
balans.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a5c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  08008c00  08008c00  00018c00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090a8  080090a8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080090a8  080090a8  000190a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090b0  080090b0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090b0  080090b0  000190b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090b4  080090b4  000190b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080090b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  200001dc  08009294  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000468  08009294  00020468  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012eef  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029da  00000000  00000000  000330fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  00035ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b60  00000000  00000000  00036710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ffe  00000000  00000000  00037270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001184e  00000000  00000000  0005026e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009576e  00000000  00000000  00061abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f722a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004390  00000000  00000000  000f7280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008be4 	.word	0x08008be4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08008be4 	.word	0x08008be4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f56:	463b      	mov	r3, r7
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f62:	4b21      	ldr	r3, [pc, #132]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f64:	4a21      	ldr	r2, [pc, #132]	; (8000fec <MX_ADC1_Init+0x9c>)
 8000f66:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f68:	4b1f      	ldr	r3, [pc, #124]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000f6e:	4b1e      	ldr	r3, [pc, #120]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f74:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f76:	4b1c      	ldr	r3, [pc, #112]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f7c:	4b1a      	ldr	r3, [pc, #104]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f82:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f8a:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f90:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f92:	4a17      	ldr	r2, [pc, #92]	; (8000ff0 <MX_ADC1_Init+0xa0>)
 8000f94:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f96:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fa2:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000faa:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fb0:	480d      	ldr	r0, [pc, #52]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000fb2:	f001 fb19 	bl	80025e8 <HAL_ADC_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000fbc:	f000 feb6 	bl	8001d2c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000fc0:	2305      	movs	r3, #5
 8000fc2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fcc:	463b      	mov	r3, r7
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000fd2:	f001 fb4d 	bl	8002670 <HAL_ADC_ConfigChannel>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000fdc:	f000 fea6 	bl	8001d2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fe0:	bf00      	nop
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000240 	.word	0x20000240
 8000fec:	40012000 	.word	0x40012000
 8000ff0:	0f000001 	.word	0x0f000001

08000ff4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	; 0x28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a17      	ldr	r2, [pc, #92]	; (8001070 <HAL_ADC_MspInit+0x7c>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d127      	bne.n	8001066 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	613b      	str	r3, [r7, #16]
 800101a:	4b16      	ldr	r3, [pc, #88]	; (8001074 <HAL_ADC_MspInit+0x80>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101e:	4a15      	ldr	r2, [pc, #84]	; (8001074 <HAL_ADC_MspInit+0x80>)
 8001020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001024:	6453      	str	r3, [r2, #68]	; 0x44
 8001026:	4b13      	ldr	r3, [pc, #76]	; (8001074 <HAL_ADC_MspInit+0x80>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <HAL_ADC_MspInit+0x80>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a0e      	ldr	r2, [pc, #56]	; (8001074 <HAL_ADC_MspInit+0x80>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <HAL_ADC_MspInit+0x80>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800104e:	2320      	movs	r3, #32
 8001050:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001052:	2303      	movs	r3, #3
 8001054:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	4619      	mov	r1, r3
 8001060:	4805      	ldr	r0, [pc, #20]	; (8001078 <HAL_ADC_MspInit+0x84>)
 8001062:	f001 fec7 	bl	8002df4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001066:	bf00      	nop
 8001068:	3728      	adds	r7, #40	; 0x28
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40012000 	.word	0x40012000
 8001074:	40023800 	.word	0x40023800
 8001078:	40020000 	.word	0x40020000

0800107c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08a      	sub	sp, #40	; 0x28
 8001080:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	60da      	str	r2, [r3, #12]
 8001090:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]
 8001096:	4b32      	ldr	r3, [pc, #200]	; (8001160 <MX_GPIO_Init+0xe4>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a31      	ldr	r2, [pc, #196]	; (8001160 <MX_GPIO_Init+0xe4>)
 800109c:	f043 0304 	orr.w	r3, r3, #4
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b2f      	ldr	r3, [pc, #188]	; (8001160 <MX_GPIO_Init+0xe4>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0304 	and.w	r3, r3, #4
 80010aa:	613b      	str	r3, [r7, #16]
 80010ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	4b2b      	ldr	r3, [pc, #172]	; (8001160 <MX_GPIO_Init+0xe4>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a2a      	ldr	r2, [pc, #168]	; (8001160 <MX_GPIO_Init+0xe4>)
 80010b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b28      	ldr	r3, [pc, #160]	; (8001160 <MX_GPIO_Init+0xe4>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	60bb      	str	r3, [r7, #8]
 80010ce:	4b24      	ldr	r3, [pc, #144]	; (8001160 <MX_GPIO_Init+0xe4>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a23      	ldr	r2, [pc, #140]	; (8001160 <MX_GPIO_Init+0xe4>)
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b21      	ldr	r3, [pc, #132]	; (8001160 <MX_GPIO_Init+0xe4>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	60bb      	str	r3, [r7, #8]
 80010e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	607b      	str	r3, [r7, #4]
 80010ea:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <MX_GPIO_Init+0xe4>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a1c      	ldr	r2, [pc, #112]	; (8001160 <MX_GPIO_Init+0xe4>)
 80010f0:	f043 0302 	orr.w	r3, r3, #2
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <MX_GPIO_Init+0xe4>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001102:	2200      	movs	r2, #0
 8001104:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001108:	4816      	ldr	r0, [pc, #88]	; (8001164 <MX_GPIO_Init+0xe8>)
 800110a:	f002 f80f 	bl	800312c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800110e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001112:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001114:	2301      	movs	r3, #1
 8001116:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	2300      	movs	r3, #0
 800111e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	4619      	mov	r1, r3
 8001126:	480f      	ldr	r0, [pc, #60]	; (8001164 <MX_GPIO_Init+0xe8>)
 8001128:	f001 fe64 	bl	8002df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PPM_EXTI_Pin;
 800112c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001130:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001132:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001136:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001138:	2301      	movs	r3, #1
 800113a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PPM_EXTI_GPIO_Port, &GPIO_InitStruct);
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	4619      	mov	r1, r3
 8001142:	4809      	ldr	r0, [pc, #36]	; (8001168 <MX_GPIO_Init+0xec>)
 8001144:	f001 fe56 	bl	8002df4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001148:	2200      	movs	r2, #0
 800114a:	2100      	movs	r1, #0
 800114c:	2028      	movs	r0, #40	; 0x28
 800114e:	f001 fd88 	bl	8002c62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001152:	2028      	movs	r0, #40	; 0x28
 8001154:	f001 fda1 	bl	8002c9a <HAL_NVIC_EnableIRQ>

}
 8001158:	bf00      	nop
 800115a:	3728      	adds	r7, #40	; 0x28
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40023800 	.word	0x40023800
 8001164:	40020800 	.word	0x40020800
 8001168:	40020400 	.word	0x40020400

0800116c <Send>:



// ########################## SEND ##########################
void Send(int16_t uSteer, int16_t uSpeed)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	460a      	mov	r2, r1
 8001176:	80fb      	strh	r3, [r7, #6]
 8001178:	4613      	mov	r3, r2
 800117a:	80bb      	strh	r3, [r7, #4]
  // Create command
  Command.start    = (uint16_t)START_FRAME;
 800117c:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <Send+0x58>)
 800117e:	f64a 32cd 	movw	r2, #43981	; 0xabcd
 8001182:	801a      	strh	r2, [r3, #0]
  Command.steer    = (int16_t)uSteer;
 8001184:	4a0f      	ldr	r2, [pc, #60]	; (80011c4 <Send+0x58>)
 8001186:	88fb      	ldrh	r3, [r7, #6]
 8001188:	8053      	strh	r3, [r2, #2]
  Command.speed    = (int16_t)uSpeed;
 800118a:	4a0e      	ldr	r2, [pc, #56]	; (80011c4 <Send+0x58>)
 800118c:	88bb      	ldrh	r3, [r7, #4]
 800118e:	8093      	strh	r3, [r2, #4]
  Command.checksum = (uint16_t)(Command.start ^ Command.steer ^ Command.speed);
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <Send+0x58>)
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	b21a      	sxth	r2, r3
 8001196:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <Send+0x58>)
 8001198:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800119c:	4053      	eors	r3, r2
 800119e:	b21a      	sxth	r2, r3
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <Send+0x58>)
 80011a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80011a6:	4053      	eors	r3, r2
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <Send+0x58>)
 80011ae:	80da      	strh	r2, [r3, #6]

  // Write to Serial
  //HoverSerial.write((uint8_t *) &Command, sizeof(Command));
  HAL_UART_Transmit(&huart2, (uint8_t*) &Command, sizeof(Command), 100);
 80011b0:	2364      	movs	r3, #100	; 0x64
 80011b2:	2208      	movs	r2, #8
 80011b4:	4903      	ldr	r1, [pc, #12]	; (80011c4 <Send+0x58>)
 80011b6:	4804      	ldr	r0, [pc, #16]	; (80011c8 <Send+0x5c>)
 80011b8:	f003 fc59 	bl	8004a6e <HAL_UART_Transmit>
}
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	200002b8 	.word	0x200002b8
 80011c8:	20000410 	.word	0x20000410

080011cc <Receive>:

// ########################## RECEIVE ##########################
void Receive(uint8_t* byte)
{
 80011cc:	b5b0      	push	{r4, r5, r7, lr}
 80011ce:	b08a      	sub	sp, #40	; 0x28
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	char buffer[30];

	if(data_available)
 80011d4:	4bad      	ldr	r3, [pc, #692]	; (800148c <Receive+0x2c0>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d01b      	beq.n	8001214 <Receive+0x48>
	{
		incomingByte = *byte;             // Read the incoming byte
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	781a      	ldrb	r2, [r3, #0]
 80011e0:	4bab      	ldr	r3, [pc, #684]	; (8001490 <Receive+0x2c4>)
 80011e2:	701a      	strb	r2, [r3, #0]
		bufStartFrame = ((uint16_t) (incomingByte) << 8) | incomingBytePrev; // Construct the start frame
 80011e4:	4baa      	ldr	r3, [pc, #680]	; (8001490 <Receive+0x2c4>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	021b      	lsls	r3, r3, #8
 80011ea:	b21a      	sxth	r2, r3
 80011ec:	4ba9      	ldr	r3, [pc, #676]	; (8001494 <Receive+0x2c8>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	b21b      	sxth	r3, r3
 80011f2:	4313      	orrs	r3, r2
 80011f4:	b21b      	sxth	r3, r3
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	4ba7      	ldr	r3, [pc, #668]	; (8001498 <Receive+0x2cc>)
 80011fa:	801a      	strh	r2, [r3, #0]
		incomingBytePrev = incomingByte;
 80011fc:	4ba4      	ldr	r3, [pc, #656]	; (8001490 <Receive+0x2c4>)
 80011fe:	781a      	ldrb	r2, [r3, #0]
 8001200:	4ba4      	ldr	r3, [pc, #656]	; (8001494 <Receive+0x2c8>)
 8001202:	701a      	strb	r2, [r3, #0]
		data_available = 0;
 8001204:	4ba1      	ldr	r3, [pc, #644]	; (800148c <Receive+0x2c0>)
 8001206:	2200      	movs	r2, #0
 8001208:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, byte, sizeof(*byte)); //ponowne oczekiwanie na przerwanie
 800120a:	2201      	movs	r2, #1
 800120c:	6879      	ldr	r1, [r7, #4]
 800120e:	48a3      	ldr	r0, [pc, #652]	; (800149c <Receive+0x2d0>)
 8001210:	f003 fcbf 	bl	8004b92 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart1, (uint8_t*) &bufStartFrame, sizeof(bufStartFrame),100);
        return;
    #endif

    // Copy received data
    if (bufStartFrame == START_FRAME) {	                    // Initialize if new data is detected
 8001214:	4ba0      	ldr	r3, [pc, #640]	; (8001498 <Receive+0x2cc>)
 8001216:	881b      	ldrh	r3, [r3, #0]
 8001218:	f64a 32cd 	movw	r2, #43981	; 0xabcd
 800121c:	4293      	cmp	r3, r2
 800121e:	d116      	bne.n	800124e <Receive+0x82>
        p       = (uint8_t *)&NewFeedback;
 8001220:	4b9f      	ldr	r3, [pc, #636]	; (80014a0 <Receive+0x2d4>)
 8001222:	4aa0      	ldr	r2, [pc, #640]	; (80014a4 <Receive+0x2d8>)
 8001224:	601a      	str	r2, [r3, #0]
        *p++    = incomingBytePrev;
 8001226:	4b9e      	ldr	r3, [pc, #632]	; (80014a0 <Receive+0x2d4>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	1c5a      	adds	r2, r3, #1
 800122c:	499c      	ldr	r1, [pc, #624]	; (80014a0 <Receive+0x2d4>)
 800122e:	600a      	str	r2, [r1, #0]
 8001230:	4a98      	ldr	r2, [pc, #608]	; (8001494 <Receive+0x2c8>)
 8001232:	7812      	ldrb	r2, [r2, #0]
 8001234:	701a      	strb	r2, [r3, #0]
        *p++    = incomingByte;
 8001236:	4b9a      	ldr	r3, [pc, #616]	; (80014a0 <Receive+0x2d4>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	1c5a      	adds	r2, r3, #1
 800123c:	4998      	ldr	r1, [pc, #608]	; (80014a0 <Receive+0x2d4>)
 800123e:	600a      	str	r2, [r1, #0]
 8001240:	4a93      	ldr	r2, [pc, #588]	; (8001490 <Receive+0x2c4>)
 8001242:	7812      	ldrb	r2, [r2, #0]
 8001244:	701a      	strb	r2, [r3, #0]
        idx     = 2;
 8001246:	4b98      	ldr	r3, [pc, #608]	; (80014a8 <Receive+0x2dc>)
 8001248:	2202      	movs	r2, #2
 800124a:	701a      	strb	r2, [r3, #0]
 800124c:	e015      	b.n	800127a <Receive+0xae>
    } else if (idx >= 2 && idx < sizeof(SerialFeedback)) {  // Save the new received data
 800124e:	4b96      	ldr	r3, [pc, #600]	; (80014a8 <Receive+0x2dc>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d911      	bls.n	800127a <Receive+0xae>
 8001256:	4b94      	ldr	r3, [pc, #592]	; (80014a8 <Receive+0x2dc>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b11      	cmp	r3, #17
 800125c:	d80d      	bhi.n	800127a <Receive+0xae>
        *p++    = incomingByte;
 800125e:	4b90      	ldr	r3, [pc, #576]	; (80014a0 <Receive+0x2d4>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	1c5a      	adds	r2, r3, #1
 8001264:	498e      	ldr	r1, [pc, #568]	; (80014a0 <Receive+0x2d4>)
 8001266:	600a      	str	r2, [r1, #0]
 8001268:	4a89      	ldr	r2, [pc, #548]	; (8001490 <Receive+0x2c4>)
 800126a:	7812      	ldrb	r2, [r2, #0]
 800126c:	701a      	strb	r2, [r3, #0]
        idx++;
 800126e:	4b8e      	ldr	r3, [pc, #568]	; (80014a8 <Receive+0x2dc>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	3301      	adds	r3, #1
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4b8c      	ldr	r3, [pc, #560]	; (80014a8 <Receive+0x2dc>)
 8001278:	701a      	strb	r2, [r3, #0]
    }

    // Check if we reached the end of the package
    if (idx == sizeof(SerialFeedback)) {
 800127a:	4b8b      	ldr	r3, [pc, #556]	; (80014a8 <Receive+0x2dc>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b12      	cmp	r3, #18
 8001280:	f040 815d 	bne.w	800153e <Receive+0x372>
        uint16_t checksum;
        checksum = (uint16_t)(NewFeedback.start ^ NewFeedback.cmd1 ^ NewFeedback.cmd2 ^ NewFeedback.speedR_meas ^ NewFeedback.speedL_meas
 8001284:	4b87      	ldr	r3, [pc, #540]	; (80014a4 <Receive+0x2d8>)
 8001286:	881b      	ldrh	r3, [r3, #0]
 8001288:	b21a      	sxth	r2, r3
 800128a:	4b86      	ldr	r3, [pc, #536]	; (80014a4 <Receive+0x2d8>)
 800128c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001290:	4053      	eors	r3, r2
 8001292:	b21a      	sxth	r2, r3
 8001294:	4b83      	ldr	r3, [pc, #524]	; (80014a4 <Receive+0x2d8>)
 8001296:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800129a:	4053      	eors	r3, r2
 800129c:	b21a      	sxth	r2, r3
 800129e:	4b81      	ldr	r3, [pc, #516]	; (80014a4 <Receive+0x2d8>)
 80012a0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80012a4:	4053      	eors	r3, r2
 80012a6:	b21a      	sxth	r2, r3
 80012a8:	4b7e      	ldr	r3, [pc, #504]	; (80014a4 <Receive+0x2d8>)
 80012aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80012ae:	4053      	eors	r3, r2
 80012b0:	b21a      	sxth	r2, r3
                            ^ NewFeedback.batVoltage ^ NewFeedback.boardTemp ^ NewFeedback.cmdLed);
 80012b2:	4b7c      	ldr	r3, [pc, #496]	; (80014a4 <Receive+0x2d8>)
 80012b4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80012b8:	4053      	eors	r3, r2
 80012ba:	b21a      	sxth	r2, r3
 80012bc:	4b79      	ldr	r3, [pc, #484]	; (80014a4 <Receive+0x2d8>)
 80012be:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80012c2:	4053      	eors	r3, r2
 80012c4:	b21a      	sxth	r2, r3
 80012c6:	4b77      	ldr	r3, [pc, #476]	; (80014a4 <Receive+0x2d8>)
 80012c8:	89db      	ldrh	r3, [r3, #14]
 80012ca:	b21b      	sxth	r3, r3
 80012cc:	4053      	eors	r3, r2
 80012ce:	b21b      	sxth	r3, r3
        checksum = (uint16_t)(NewFeedback.start ^ NewFeedback.cmd1 ^ NewFeedback.cmd2 ^ NewFeedback.speedR_meas ^ NewFeedback.speedL_meas
 80012d0:	84fb      	strh	r3, [r7, #38]	; 0x26

        // Check validity of the new data
        if (NewFeedback.start == START_FRAME && checksum == NewFeedback.checksum) {
 80012d2:	4b74      	ldr	r3, [pc, #464]	; (80014a4 <Receive+0x2d8>)
 80012d4:	881b      	ldrh	r3, [r3, #0]
 80012d6:	f64a 32cd 	movw	r2, #43981	; 0xabcd
 80012da:	4293      	cmp	r3, r2
 80012dc:	f040 8106 	bne.w	80014ec <Receive+0x320>
 80012e0:	4b70      	ldr	r3, [pc, #448]	; (80014a4 <Receive+0x2d8>)
 80012e2:	8a1b      	ldrh	r3, [r3, #16]
 80012e4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80012e6:	429a      	cmp	r2, r3
 80012e8:	f040 8100 	bne.w	80014ec <Receive+0x320>
            // Copy the new data
            memcpy(&Feedback, &NewFeedback, sizeof(SerialFeedback));
 80012ec:	4b6f      	ldr	r3, [pc, #444]	; (80014ac <Receive+0x2e0>)
 80012ee:	4a6d      	ldr	r2, [pc, #436]	; (80014a4 <Receive+0x2d8>)
 80012f0:	6815      	ldr	r5, [r2, #0]
 80012f2:	6854      	ldr	r4, [r2, #4]
 80012f4:	6890      	ldr	r0, [r2, #8]
 80012f6:	68d1      	ldr	r1, [r2, #12]
 80012f8:	601d      	str	r5, [r3, #0]
 80012fa:	605c      	str	r4, [r3, #4]
 80012fc:	6098      	str	r0, [r3, #8]
 80012fe:	60d9      	str	r1, [r3, #12]
 8001300:	8a12      	ldrh	r2, [r2, #16]
 8001302:	821a      	strh	r2, [r3, #16]

            // Print data to built-in Serial
            sprintf(buffer, "1: ");
 8001304:	f107 0308 	add.w	r3, r7, #8
 8001308:	4969      	ldr	r1, [pc, #420]	; (80014b0 <Receive+0x2e4>)
 800130a:	4618      	mov	r0, r3
 800130c:	f004 ffc6 	bl	800629c <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*) &buffer, strlen(buffer), 100);
 8001310:	f107 0308 	add.w	r3, r7, #8
 8001314:	4618      	mov	r0, r3
 8001316:	f7fe ff63 	bl	80001e0 <strlen>
 800131a:	4603      	mov	r3, r0
 800131c:	b29a      	uxth	r2, r3
 800131e:	f107 0108 	add.w	r1, r7, #8
 8001322:	2364      	movs	r3, #100	; 0x64
 8001324:	485d      	ldr	r0, [pc, #372]	; (800149c <Receive+0x2d0>)
 8001326:	f003 fba2 	bl	8004a6e <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, (uint8_t*) &Feedback.cmd1, sizeof(Feedback.cmd1), 100);
 800132a:	2364      	movs	r3, #100	; 0x64
 800132c:	2202      	movs	r2, #2
 800132e:	4961      	ldr	r1, [pc, #388]	; (80014b4 <Receive+0x2e8>)
 8001330:	485a      	ldr	r0, [pc, #360]	; (800149c <Receive+0x2d0>)
 8001332:	f003 fb9c 	bl	8004a6e <HAL_UART_Transmit>
            sprintf(buffer, "2: ");
 8001336:	f107 0308 	add.w	r3, r7, #8
 800133a:	495f      	ldr	r1, [pc, #380]	; (80014b8 <Receive+0x2ec>)
 800133c:	4618      	mov	r0, r3
 800133e:	f004 ffad 	bl	800629c <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*) &buffer, strlen(buffer), 100);
 8001342:	f107 0308 	add.w	r3, r7, #8
 8001346:	4618      	mov	r0, r3
 8001348:	f7fe ff4a 	bl	80001e0 <strlen>
 800134c:	4603      	mov	r3, r0
 800134e:	b29a      	uxth	r2, r3
 8001350:	f107 0108 	add.w	r1, r7, #8
 8001354:	2364      	movs	r3, #100	; 0x64
 8001356:	4851      	ldr	r0, [pc, #324]	; (800149c <Receive+0x2d0>)
 8001358:	f003 fb89 	bl	8004a6e <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, (uint8_t*) &Feedback.cmd2, sizeof(Feedback.cmd2), 100);
 800135c:	2364      	movs	r3, #100	; 0x64
 800135e:	2202      	movs	r2, #2
 8001360:	4956      	ldr	r1, [pc, #344]	; (80014bc <Receive+0x2f0>)
 8001362:	484e      	ldr	r0, [pc, #312]	; (800149c <Receive+0x2d0>)
 8001364:	f003 fb83 	bl	8004a6e <HAL_UART_Transmit>
            sprintf(buffer, "3: ");
 8001368:	f107 0308 	add.w	r3, r7, #8
 800136c:	4954      	ldr	r1, [pc, #336]	; (80014c0 <Receive+0x2f4>)
 800136e:	4618      	mov	r0, r3
 8001370:	f004 ff94 	bl	800629c <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*) &buffer, strlen(buffer), 100);
 8001374:	f107 0308 	add.w	r3, r7, #8
 8001378:	4618      	mov	r0, r3
 800137a:	f7fe ff31 	bl	80001e0 <strlen>
 800137e:	4603      	mov	r3, r0
 8001380:	b29a      	uxth	r2, r3
 8001382:	f107 0108 	add.w	r1, r7, #8
 8001386:	2364      	movs	r3, #100	; 0x64
 8001388:	4844      	ldr	r0, [pc, #272]	; (800149c <Receive+0x2d0>)
 800138a:	f003 fb70 	bl	8004a6e <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, (uint8_t*) &Feedback.speedR_meas, sizeof(Feedback.speedR_meas), 100);
 800138e:	2364      	movs	r3, #100	; 0x64
 8001390:	2202      	movs	r2, #2
 8001392:	494c      	ldr	r1, [pc, #304]	; (80014c4 <Receive+0x2f8>)
 8001394:	4841      	ldr	r0, [pc, #260]	; (800149c <Receive+0x2d0>)
 8001396:	f003 fb6a 	bl	8004a6e <HAL_UART_Transmit>
            sprintf(buffer, "4: ");
 800139a:	f107 0308 	add.w	r3, r7, #8
 800139e:	494a      	ldr	r1, [pc, #296]	; (80014c8 <Receive+0x2fc>)
 80013a0:	4618      	mov	r0, r3
 80013a2:	f004 ff7b 	bl	800629c <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*) &buffer, strlen(buffer), 100);
 80013a6:	f107 0308 	add.w	r3, r7, #8
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7fe ff18 	bl	80001e0 <strlen>
 80013b0:	4603      	mov	r3, r0
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	f107 0108 	add.w	r1, r7, #8
 80013b8:	2364      	movs	r3, #100	; 0x64
 80013ba:	4838      	ldr	r0, [pc, #224]	; (800149c <Receive+0x2d0>)
 80013bc:	f003 fb57 	bl	8004a6e <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, (uint8_t*) &Feedback.speedL_meas, sizeof(Feedback.speedL_meas), 100);
 80013c0:	2364      	movs	r3, #100	; 0x64
 80013c2:	2202      	movs	r2, #2
 80013c4:	4941      	ldr	r1, [pc, #260]	; (80014cc <Receive+0x300>)
 80013c6:	4835      	ldr	r0, [pc, #212]	; (800149c <Receive+0x2d0>)
 80013c8:	f003 fb51 	bl	8004a6e <HAL_UART_Transmit>
            sprintf(buffer, "5: ");
 80013cc:	f107 0308 	add.w	r3, r7, #8
 80013d0:	493f      	ldr	r1, [pc, #252]	; (80014d0 <Receive+0x304>)
 80013d2:	4618      	mov	r0, r3
 80013d4:	f004 ff62 	bl	800629c <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*) &buffer, strlen(buffer), 100);
 80013d8:	f107 0308 	add.w	r3, r7, #8
 80013dc:	4618      	mov	r0, r3
 80013de:	f7fe feff 	bl	80001e0 <strlen>
 80013e2:	4603      	mov	r3, r0
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	f107 0108 	add.w	r1, r7, #8
 80013ea:	2364      	movs	r3, #100	; 0x64
 80013ec:	482b      	ldr	r0, [pc, #172]	; (800149c <Receive+0x2d0>)
 80013ee:	f003 fb3e 	bl	8004a6e <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, (uint8_t*) &Feedback.batVoltage, sizeof(Feedback.batVoltage), 100);
 80013f2:	2364      	movs	r3, #100	; 0x64
 80013f4:	2202      	movs	r2, #2
 80013f6:	4937      	ldr	r1, [pc, #220]	; (80014d4 <Receive+0x308>)
 80013f8:	4828      	ldr	r0, [pc, #160]	; (800149c <Receive+0x2d0>)
 80013fa:	f003 fb38 	bl	8004a6e <HAL_UART_Transmit>
            sprintf(buffer, "6: ");
 80013fe:	f107 0308 	add.w	r3, r7, #8
 8001402:	4935      	ldr	r1, [pc, #212]	; (80014d8 <Receive+0x30c>)
 8001404:	4618      	mov	r0, r3
 8001406:	f004 ff49 	bl	800629c <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*) &buffer, strlen(buffer), 100);
 800140a:	f107 0308 	add.w	r3, r7, #8
 800140e:	4618      	mov	r0, r3
 8001410:	f7fe fee6 	bl	80001e0 <strlen>
 8001414:	4603      	mov	r3, r0
 8001416:	b29a      	uxth	r2, r3
 8001418:	f107 0108 	add.w	r1, r7, #8
 800141c:	2364      	movs	r3, #100	; 0x64
 800141e:	481f      	ldr	r0, [pc, #124]	; (800149c <Receive+0x2d0>)
 8001420:	f003 fb25 	bl	8004a6e <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, (uint8_t*) &Feedback.boardTemp, sizeof(Feedback.boardTemp), 100);
 8001424:	2364      	movs	r3, #100	; 0x64
 8001426:	2202      	movs	r2, #2
 8001428:	492c      	ldr	r1, [pc, #176]	; (80014dc <Receive+0x310>)
 800142a:	481c      	ldr	r0, [pc, #112]	; (800149c <Receive+0x2d0>)
 800142c:	f003 fb1f 	bl	8004a6e <HAL_UART_Transmit>
            sprintf(buffer, "7: ");
 8001430:	f107 0308 	add.w	r3, r7, #8
 8001434:	492a      	ldr	r1, [pc, #168]	; (80014e0 <Receive+0x314>)
 8001436:	4618      	mov	r0, r3
 8001438:	f004 ff30 	bl	800629c <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*) &buffer, strlen(buffer), 100);
 800143c:	f107 0308 	add.w	r3, r7, #8
 8001440:	4618      	mov	r0, r3
 8001442:	f7fe fecd 	bl	80001e0 <strlen>
 8001446:	4603      	mov	r3, r0
 8001448:	b29a      	uxth	r2, r3
 800144a:	f107 0108 	add.w	r1, r7, #8
 800144e:	2364      	movs	r3, #100	; 0x64
 8001450:	4812      	ldr	r0, [pc, #72]	; (800149c <Receive+0x2d0>)
 8001452:	f003 fb0c 	bl	8004a6e <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, (uint8_t*) &Feedback.cmdLed, sizeof(Feedback.cmdLed), 100);
 8001456:	2364      	movs	r3, #100	; 0x64
 8001458:	2202      	movs	r2, #2
 800145a:	4922      	ldr	r1, [pc, #136]	; (80014e4 <Receive+0x318>)
 800145c:	480f      	ldr	r0, [pc, #60]	; (800149c <Receive+0x2d0>)
 800145e:	f003 fb06 	bl	8004a6e <HAL_UART_Transmit>
            sprintf(buffer, "\n\r");
 8001462:	f107 0308 	add.w	r3, r7, #8
 8001466:	4920      	ldr	r1, [pc, #128]	; (80014e8 <Receive+0x31c>)
 8001468:	4618      	mov	r0, r3
 800146a:	f004 ff17 	bl	800629c <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*) &buffer, strlen(buffer), 100);
 800146e:	f107 0308 	add.w	r3, r7, #8
 8001472:	4618      	mov	r0, r3
 8001474:	f7fe feb4 	bl	80001e0 <strlen>
 8001478:	4603      	mov	r3, r0
 800147a:	b29a      	uxth	r2, r3
 800147c:	f107 0108 	add.w	r1, r7, #8
 8001480:	2364      	movs	r3, #100	; 0x64
 8001482:	4806      	ldr	r0, [pc, #24]	; (800149c <Receive+0x2d0>)
 8001484:	f003 faf3 	bl	8004a6e <HAL_UART_Transmit>
 8001488:	e056      	b.n	8001538 <Receive+0x36c>
 800148a:	bf00      	nop
 800148c:	200002a0 	.word	0x200002a0
 8001490:	200001f9 	.word	0x200001f9
 8001494:	200001fa 	.word	0x200001fa
 8001498:	2000029e 	.word	0x2000029e
 800149c:	20000410 	.word	0x20000410
 80014a0:	20000288 	.word	0x20000288
 80014a4:	2000028c 	.word	0x2000028c
 80014a8:	200001f8 	.word	0x200001f8
 80014ac:	200002a4 	.word	0x200002a4
 80014b0:	08008c00 	.word	0x08008c00
 80014b4:	200002a6 	.word	0x200002a6
 80014b8:	08008c04 	.word	0x08008c04
 80014bc:	200002a8 	.word	0x200002a8
 80014c0:	08008c08 	.word	0x08008c08
 80014c4:	200002aa 	.word	0x200002aa
 80014c8:	08008c0c 	.word	0x08008c0c
 80014cc:	200002ac 	.word	0x200002ac
 80014d0:	08008c10 	.word	0x08008c10
 80014d4:	200002ae 	.word	0x200002ae
 80014d8:	08008c14 	.word	0x08008c14
 80014dc:	200002b0 	.word	0x200002b0
 80014e0:	08008c18 	.word	0x08008c18
 80014e4:	200002b2 	.word	0x200002b2
 80014e8:	08008c1c 	.word	0x08008c1c
            Serial.print(" 4: ");  Serial.print(Feedback.speedL_meas);
            Serial.print(" 5: ");  Serial.print(Feedback.batVoltage);
            Serial.print(" 6: ");  Serial.print(Feedback.boardTemp);
            Serial.print(" 7: ");  Serial.println(Feedback.cmdLed);*/
        } else {
        	sprintf(buffer, "Non-valid data skipped");
 80014ec:	f107 0308 	add.w	r3, r7, #8
 80014f0:	4917      	ldr	r1, [pc, #92]	; (8001550 <Receive+0x384>)
 80014f2:	4618      	mov	r0, r3
 80014f4:	f004 fed2 	bl	800629c <siprintf>
        	HAL_UART_Transmit(&huart2, (uint8_t*) &buffer, strlen(buffer), 100);
 80014f8:	f107 0308 	add.w	r3, r7, #8
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7fe fe6f 	bl	80001e0 <strlen>
 8001502:	4603      	mov	r3, r0
 8001504:	b29a      	uxth	r2, r3
 8001506:	f107 0108 	add.w	r1, r7, #8
 800150a:	2364      	movs	r3, #100	; 0x64
 800150c:	4811      	ldr	r0, [pc, #68]	; (8001554 <Receive+0x388>)
 800150e:	f003 faae 	bl	8004a6e <HAL_UART_Transmit>
        	sprintf(buffer, "\n\r");
 8001512:	f107 0308 	add.w	r3, r7, #8
 8001516:	4910      	ldr	r1, [pc, #64]	; (8001558 <Receive+0x38c>)
 8001518:	4618      	mov	r0, r3
 800151a:	f004 febf 	bl	800629c <siprintf>
        	HAL_UART_Transmit(&huart2, (uint8_t*) &buffer, strlen(buffer), 100);
 800151e:	f107 0308 	add.w	r3, r7, #8
 8001522:	4618      	mov	r0, r3
 8001524:	f7fe fe5c 	bl	80001e0 <strlen>
 8001528:	4603      	mov	r3, r0
 800152a:	b29a      	uxth	r2, r3
 800152c:	f107 0108 	add.w	r1, r7, #8
 8001530:	2364      	movs	r3, #100	; 0x64
 8001532:	4808      	ldr	r0, [pc, #32]	; (8001554 <Receive+0x388>)
 8001534:	f003 fa9b 	bl	8004a6e <HAL_UART_Transmit>
          //Serial.println("Non-valid data skipped");
        }
        idx = 0;    // Reset the index (it prevents to enter in this if condition in the next cycle)
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <Receive+0x390>)
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
    }

    // Update previous states
    incomingBytePrev = incomingByte;
 800153e:	4b08      	ldr	r3, [pc, #32]	; (8001560 <Receive+0x394>)
 8001540:	781a      	ldrb	r2, [r3, #0]
 8001542:	4b08      	ldr	r3, [pc, #32]	; (8001564 <Receive+0x398>)
 8001544:	701a      	strb	r2, [r3, #0]
}
 8001546:	bf00      	nop
 8001548:	3728      	adds	r7, #40	; 0x28
 800154a:	46bd      	mov	sp, r7
 800154c:	bdb0      	pop	{r4, r5, r7, pc}
 800154e:	bf00      	nop
 8001550:	08008c20 	.word	0x08008c20
 8001554:	20000410 	.word	0x20000410
 8001558:	08008c1c 	.word	0x08008c1c
 800155c:	200001f8 	.word	0x200001f8
 8001560:	200001f9 	.word	0x200001f9
 8001564:	200001fa 	.word	0x200001fa

08001568 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <MX_I2C1_Init+0x50>)
 800156e:	4a13      	ldr	r2, [pc, #76]	; (80015bc <MX_I2C1_Init+0x54>)
 8001570:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <MX_I2C1_Init+0x50>)
 8001574:	4a12      	ldr	r2, [pc, #72]	; (80015c0 <MX_I2C1_Init+0x58>)
 8001576:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001578:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <MX_I2C1_Init+0x50>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <MX_I2C1_Init+0x50>)
 8001580:	2200      	movs	r2, #0
 8001582:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <MX_I2C1_Init+0x50>)
 8001586:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800158a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800158c:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <MX_I2C1_Init+0x50>)
 800158e:	2200      	movs	r2, #0
 8001590:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001592:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <MX_I2C1_Init+0x50>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001598:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <MX_I2C1_Init+0x50>)
 800159a:	2200      	movs	r2, #0
 800159c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <MX_I2C1_Init+0x50>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015a4:	4804      	ldr	r0, [pc, #16]	; (80015b8 <MX_I2C1_Init+0x50>)
 80015a6:	f001 fe0d 	bl	80031c4 <HAL_I2C_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015b0:	f000 fbbc 	bl	8001d2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	200002c0 	.word	0x200002c0
 80015bc:	40005400 	.word	0x40005400
 80015c0:	00061a80 	.word	0x00061a80

080015c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08a      	sub	sp, #40	; 0x28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a19      	ldr	r2, [pc, #100]	; (8001648 <HAL_I2C_MspInit+0x84>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d12b      	bne.n	800163e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	4b18      	ldr	r3, [pc, #96]	; (800164c <HAL_I2C_MspInit+0x88>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a17      	ldr	r2, [pc, #92]	; (800164c <HAL_I2C_MspInit+0x88>)
 80015f0:	f043 0302 	orr.w	r3, r3, #2
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <HAL_I2C_MspInit+0x88>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001602:	23c0      	movs	r3, #192	; 0xc0
 8001604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001606:	2312      	movs	r3, #18
 8001608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160e:	2303      	movs	r3, #3
 8001610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001612:	2304      	movs	r3, #4
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001616:	f107 0314 	add.w	r3, r7, #20
 800161a:	4619      	mov	r1, r3
 800161c:	480c      	ldr	r0, [pc, #48]	; (8001650 <HAL_I2C_MspInit+0x8c>)
 800161e:	f001 fbe9 	bl	8002df4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	4b09      	ldr	r3, [pc, #36]	; (800164c <HAL_I2C_MspInit+0x88>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	4a08      	ldr	r2, [pc, #32]	; (800164c <HAL_I2C_MspInit+0x88>)
 800162c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001630:	6413      	str	r3, [r2, #64]	; 0x40
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_I2C_MspInit+0x88>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800163e:	bf00      	nop
 8001640:	3728      	adds	r7, #40	; 0x28
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40005400 	.word	0x40005400
 800164c:	40023800 	.word	0x40023800
 8001650:	40020400 	.word	0x40020400

08001654 <getChannelValuePPM>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void getChannelValuePPM(uint8_t pointer) {
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
	channels[pointer - 1] = timers[pointer] - timers[pointer - 1];
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	4a17      	ldr	r2, [pc, #92]	; (80016c0 <getChannelValuePPM+0x6c>)
 8001662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001666:	b299      	uxth	r1, r3
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	3b01      	subs	r3, #1
 800166c:	4a14      	ldr	r2, [pc, #80]	; (80016c0 <getChannelValuePPM+0x6c>)
 800166e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001672:	b29a      	uxth	r2, r3
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	3b01      	subs	r3, #1
 8001678:	1a8a      	subs	r2, r1, r2
 800167a:	b291      	uxth	r1, r2
 800167c:	4a11      	ldr	r2, [pc, #68]	; (80016c4 <getChannelValuePPM+0x70>)
 800167e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	if (channels[pointer - 1] > 3000) {
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	3b01      	subs	r3, #1
 8001686:	4a0f      	ldr	r2, [pc, #60]	; (80016c4 <getChannelValuePPM+0x70>)
 8001688:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800168c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001690:	4293      	cmp	r3, r2
 8001692:	d909      	bls.n	80016a8 <getChannelValuePPM+0x54>
		timers[0] = timers[pointer];
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	4a0a      	ldr	r2, [pc, #40]	; (80016c0 <getChannelValuePPM+0x6c>)
 8001698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800169c:	4a08      	ldr	r2, [pc, #32]	; (80016c0 <getChannelValuePPM+0x6c>)
 800169e:	6013      	str	r3, [r2, #0]
		pulse = 1;
 80016a0:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <getChannelValuePPM+0x74>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	701a      	strb	r2, [r3, #0]
	} else
		pulse++;
}
 80016a6:	e005      	b.n	80016b4 <getChannelValuePPM+0x60>
		pulse++;
 80016a8:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <getChannelValuePPM+0x74>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	3301      	adds	r3, #1
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <getChannelValuePPM+0x74>)
 80016b2:	701a      	strb	r2, [r3, #0]
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	20000318 	.word	0x20000318
 80016c4:	200003b4 	.word	0x200003b4
 80016c8:	2000021c 	.word	0x2000021c

080016cc <getValuePPM>:

uint32_t getValuePPM(uint8_t channel) {
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
	return channels[channel - 1];
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	3b01      	subs	r3, #1
 80016da:	4a04      	ldr	r2, [pc, #16]	; (80016ec <getValuePPM+0x20>)
 80016dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	200003b4 	.word	0x200003b4

080016f0 <LL_SYSTICK_IsActiveCounterFlag>:

static inline uint32_t LL_SYSTICK_IsActiveCounterFlag(void) {
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
	return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)
 80016f4:	4b07      	ldr	r3, [pc, #28]	; (8001714 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
			== (SysTick_CTRL_COUNTFLAG_Msk));
 80016fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001700:	bf0c      	ite	eq
 8001702:	2301      	moveq	r3, #1
 8001704:	2300      	movne	r3, #0
 8001706:	b2db      	uxtb	r3, r3
}
 8001708:	4618      	mov	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	e000e010 	.word	0xe000e010

08001718 <getCurrentMicros>:

uint32_t getCurrentMicros(void) {
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
	/* Ensure COUNTFLAG is reset by reading SysTick control and status register */
	LL_SYSTICK_IsActiveCounterFlag();
 800171e:	f7ff ffe7 	bl	80016f0 <LL_SYSTICK_IsActiveCounterFlag>
	uint32_t m = HAL_GetTick();
 8001722:	f000 ff55 	bl	80025d0 <HAL_GetTick>
 8001726:	60f8      	str	r0, [r7, #12]
	const uint32_t tms = SysTick->LOAD + 1;
 8001728:	4b13      	ldr	r3, [pc, #76]	; (8001778 <getCurrentMicros+0x60>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	3301      	adds	r3, #1
 800172e:	60bb      	str	r3, [r7, #8]
	__IO uint32_t u = tms - SysTick->VAL;
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <getCurrentMicros+0x60>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	68ba      	ldr	r2, [r7, #8]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	607b      	str	r3, [r7, #4]
	if (LL_SYSTICK_IsActiveCounterFlag()) {
 800173a:	f7ff ffd9 	bl	80016f0 <LL_SYSTICK_IsActiveCounterFlag>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d007      	beq.n	8001754 <getCurrentMicros+0x3c>
		m = HAL_GetTick();
 8001744:	f000 ff44 	bl	80025d0 <HAL_GetTick>
 8001748:	60f8      	str	r0, [r7, #12]
		u = tms - SysTick->VAL;
 800174a:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <getCurrentMicros+0x60>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	68ba      	ldr	r2, [r7, #8]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	607b      	str	r3, [r7, #4]
	}
	return (m * 1000 + (u * 1000) / tms);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800175a:	fb02 f203 	mul.w	r2, r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001764:	fb01 f103 	mul.w	r1, r1, r3
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	fbb1 f3f3 	udiv	r3, r1, r3
 800176e:	4413      	add	r3, r2
}
 8001770:	4618      	mov	r0, r3
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	e000e010 	.word	0xe000e010

0800177c <map>:

int32_t map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min,
		int32_t out_max) {
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
 8001788:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	69b9      	ldr	r1, [r7, #24]
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	1a8a      	subs	r2, r1, r2
 8001796:	fb02 f203 	mul.w	r2, r2, r3
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	1acb      	subs	r3, r1, r3
 80017a0:	fb92 f2f3 	sdiv	r2, r2, r3
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	4413      	add	r3, r2
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <mapfloat>:
float mapfloat(float x, float in_min, float in_max, float out_min,
		float out_max) {
 80017b4:	b480      	push	{r7}
 80017b6:	b087      	sub	sp, #28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	ed87 0a05 	vstr	s0, [r7, #20]
 80017be:	edc7 0a04 	vstr	s1, [r7, #16]
 80017c2:	ed87 1a03 	vstr	s2, [r7, #12]
 80017c6:	edc7 1a02 	vstr	s3, [r7, #8]
 80017ca:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80017ce:	ed97 7a05 	vldr	s14, [r7, #20]
 80017d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80017d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017da:	edd7 6a01 	vldr	s13, [r7, #4]
 80017de:	edd7 7a02 	vldr	s15, [r7, #8]
 80017e2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80017e6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80017ea:	ed97 7a03 	vldr	s14, [r7, #12]
 80017ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80017f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80017fe:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001802:	eeb0 0a67 	vmov.f32	s0, s15
 8001806:	371c      	adds	r7, #28
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001816:	f000 fe75 	bl	8002504 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800181a:	f000 f9dd 	bl	8001bd8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800181e:	f7ff fc2d 	bl	800107c <MX_GPIO_Init>
	MX_I2C1_Init();
 8001822:	f7ff fea1 	bl	8001568 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8001826:	f000 fd6b 	bl	8002300 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800182a:	f000 fd93 	bl	8002354 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 800182e:	f7ff fb8f 	bl	8000f50 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	mpu6050_ready = MPU6050_Init();	//może podmienić rezystory na I2C bo musiałem dać pullup software'owy
 8001832:	f000 fa81 	bl	8001d38 <MPU6050_Init>
 8001836:	4603      	mov	r3, r0
 8001838:	461a      	mov	r2, r3
 800183a:	4b93      	ldr	r3, [pc, #588]	; (8001a88 <main+0x278>)
 800183c:	701a      	strb	r2, [r3, #0]

	HAL_UART_Receive_IT(&huart2, &byte, sizeof(byte)); //oczekiwanie na przerwanie
 800183e:	2201      	movs	r2, #1
 8001840:	4992      	ldr	r1, [pc, #584]	; (8001a8c <main+0x27c>)
 8001842:	4893      	ldr	r0, [pc, #588]	; (8001a90 <main+0x280>)
 8001844:	f003 f9a5 	bl	8004b92 <HAL_UART_Receive_IT>
	loop_timer = getCurrentMicros();
 8001848:	f7ff ff66 	bl	8001718 <getCurrentMicros>
 800184c:	4603      	mov	r3, r0
 800184e:	4a91      	ldr	r2, [pc, #580]	; (8001a94 <main+0x284>)
 8001850:	6013      	str	r3, [r2, #0]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (mpu6050_ready) {
 8001852:	4b8d      	ldr	r3, [pc, #564]	; (8001a88 <main+0x278>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d0fb      	beq.n	8001852 <main+0x42>

			// Check for new received data
			Receive(&byte);
 800185a:	488c      	ldr	r0, [pc, #560]	; (8001a8c <main+0x27c>)
 800185c:	f7ff fcb6 	bl	80011cc <Receive>

#ifdef aparatura



		V_bok_apar = getValuePPM(1);	//predkosc boki
 8001860:	2001      	movs	r0, #1
 8001862:	f7ff ff33 	bl	80016cc <getValuePPM>
 8001866:	4603      	mov	r3, r0
 8001868:	b21a      	sxth	r2, r3
 800186a:	4b8b      	ldr	r3, [pc, #556]	; (8001a98 <main+0x288>)
 800186c:	801a      	strh	r2, [r3, #0]
		V_apar = getValuePPM(2);   //predkosc
 800186e:	2002      	movs	r0, #2
 8001870:	f7ff ff2c 	bl	80016cc <getValuePPM>
 8001874:	4603      	mov	r3, r0
 8001876:	b21a      	sxth	r2, r3
 8001878:	4b88      	ldr	r3, [pc, #544]	; (8001a9c <main+0x28c>)
 800187a:	801a      	strh	r2, [r3, #0]
		Funkcja_SW = getValuePPM(7);
 800187c:	2007      	movs	r0, #7
 800187e:	f7ff ff25 	bl	80016cc <getValuePPM>
 8001882:	4603      	mov	r3, r0
 8001884:	b21a      	sxth	r2, r3
 8001886:	4b86      	ldr	r3, [pc, #536]	; (8001aa0 <main+0x290>)
 8001888:	801a      	strh	r2, [r3, #0]
		Relay_SW = getValuePPM(6);	//zalacz silniki
 800188a:	2006      	movs	r0, #6
 800188c:	f7ff ff1e 	bl	80016cc <getValuePPM>
 8001890:	4603      	mov	r3, r0
 8001892:	b21a      	sxth	r2, r3
 8001894:	4b83      	ldr	r3, [pc, #524]	; (8001aa4 <main+0x294>)
 8001896:	801a      	strh	r2, [r3, #0]
		V_max_apar = getValuePPM(5);	//regulacja predkosci silnikow
 8001898:	2005      	movs	r0, #5
 800189a:	f7ff ff17 	bl	80016cc <getValuePPM>
 800189e:	4603      	mov	r3, r0
 80018a0:	b21a      	sxth	r2, r3
 80018a2:	4b81      	ldr	r3, [pc, #516]	; (8001aa8 <main+0x298>)
 80018a4:	801a      	strh	r2, [r3, #0]
		Fi_max_apar = getValuePPM(8);
 80018a6:	2008      	movs	r0, #8
 80018a8:	f7ff ff10 	bl	80016cc <getValuePPM>
 80018ac:	4603      	mov	r3, r0
 80018ae:	b21a      	sxth	r2, r3
 80018b0:	4b7e      	ldr	r3, [pc, #504]	; (8001aac <main+0x29c>)
 80018b2:	801a      	strh	r2, [r3, #0]
//			HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 100);
//		}
//		sprintf(buffer, "\n\r");
//		HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 100);

		V_max = map(V_max_apar, 1000, 2000, 0, 400);
 80018b4:	4b7c      	ldr	r3, [pc, #496]	; (8001aa8 <main+0x298>)
 80018b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	2300      	movs	r3, #0
 80018c4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80018c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80018cc:	f7ff ff56 	bl	800177c <map>
 80018d0:	4603      	mov	r3, r0
 80018d2:	b21a      	sxth	r2, r3
 80018d4:	4b76      	ldr	r3, [pc, #472]	; (8001ab0 <main+0x2a0>)
 80018d6:	801a      	strh	r2, [r3, #0]
		//                                      / tu jest wartocm maskymalnej rotacji
		Fi_max = map(Fi_max_apar, 1000, 2000, 0, 400);
 80018d8:	4b74      	ldr	r3, [pc, #464]	; (8001aac <main+0x29c>)
 80018da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018de:	4618      	mov	r0, r3
 80018e0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80018e4:	9300      	str	r3, [sp, #0]
 80018e6:	2300      	movs	r3, #0
 80018e8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80018ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80018f0:	f7ff ff44 	bl	800177c <map>
 80018f4:	4603      	mov	r3, r0
 80018f6:	b21a      	sxth	r2, r3
 80018f8:	4b6e      	ldr	r3, [pc, #440]	; (8001ab4 <main+0x2a4>)
 80018fa:	801a      	strh	r2, [r3, #0]

		y = mapfloat(V_bok_apar, RC_CH1_MIN, RC_CH1_MAX, -1.0, 1.0);
 80018fc:	4b66      	ldr	r3, [pc, #408]	; (8001a98 <main+0x288>)
 80018fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001902:	ee07 3a90 	vmov	s15, r3
 8001906:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800190a:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 800190e:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 8001912:	ed9f 1a69 	vldr	s2, [pc, #420]	; 8001ab8 <main+0x2a8>
 8001916:	eddf 0a69 	vldr	s1, [pc, #420]	; 8001abc <main+0x2ac>
 800191a:	eeb0 0a67 	vmov.f32	s0, s15
 800191e:	f7ff ff49 	bl	80017b4 <mapfloat>
 8001922:	eef0 7a40 	vmov.f32	s15, s0
 8001926:	4b66      	ldr	r3, [pc, #408]	; (8001ac0 <main+0x2b0>)
 8001928:	edc3 7a00 	vstr	s15, [r3]
		x = mapfloat(V_apar, RC_CH2_MIN, RC_CH2_MAX, -1.0, 1.0);
 800192c:	4b5b      	ldr	r3, [pc, #364]	; (8001a9c <main+0x28c>)
 800192e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001932:	ee07 3a90 	vmov	s15, r3
 8001936:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800193a:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 800193e:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 8001942:	ed9f 1a5d 	vldr	s2, [pc, #372]	; 8001ab8 <main+0x2a8>
 8001946:	eddf 0a5d 	vldr	s1, [pc, #372]	; 8001abc <main+0x2ac>
 800194a:	eeb0 0a67 	vmov.f32	s0, s15
 800194e:	f7ff ff31 	bl	80017b4 <mapfloat>
 8001952:	eef0 7a40 	vmov.f32	s15, s0
 8001956:	4b5b      	ldr	r3, [pc, #364]	; (8001ac4 <main+0x2b4>)
 8001958:	edc3 7a00 	vstr	s15, [r3]

		if ((Relay_SW > 1900) && (Relay_SW < 2100)) {
 800195c:	4b51      	ldr	r3, [pc, #324]	; (8001aa4 <main+0x294>)
 800195e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001962:	f240 726c 	movw	r2, #1900	; 0x76c
 8001966:	4293      	cmp	r3, r2
 8001968:	dd0a      	ble.n	8001980 <main+0x170>
 800196a:	4b4e      	ldr	r3, [pc, #312]	; (8001aa4 <main+0x294>)
 800196c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001970:	f640 0233 	movw	r2, #2099	; 0x833
 8001974:	4293      	cmp	r3, r2
 8001976:	dc03      	bgt.n	8001980 <main+0x170>
			//digitalWrite(Relay,HIGH);
			Jazda = 1;
 8001978:	4b53      	ldr	r3, [pc, #332]	; (8001ac8 <main+0x2b8>)
 800197a:	2201      	movs	r2, #1
 800197c:	801a      	strh	r2, [r3, #0]
 800197e:	e002      	b.n	8001986 <main+0x176>
		} else {
			//digitalWrite(Relay,LOW);
			Jazda = 0;
 8001980:	4b51      	ldr	r3, [pc, #324]	; (8001ac8 <main+0x2b8>)
 8001982:	2200      	movs	r2, #0
 8001984:	801a      	strh	r2, [r3, #0]
		}

		if (Jazda == 1) {
 8001986:	4b50      	ldr	r3, [pc, #320]	; (8001ac8 <main+0x2b8>)
 8001988:	f9b3 3000 	ldrsh.w	r3, [r3]
 800198c:	2b01      	cmp	r3, #1
 800198e:	f040 80a5 	bne.w	8001adc <main+0x2cc>
			VR = mapfloat(x, -1.0, 1.0, -V_max, V_max);
 8001992:	4b4c      	ldr	r3, [pc, #304]	; (8001ac4 <main+0x2b4>)
 8001994:	edd3 7a00 	vldr	s15, [r3]
 8001998:	4b45      	ldr	r3, [pc, #276]	; (8001ab0 <main+0x2a0>)
 800199a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800199e:	425b      	negs	r3, r3
 80019a0:	ee07 3a10 	vmov	s14, r3
 80019a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80019a8:	4b41      	ldr	r3, [pc, #260]	; (8001ab0 <main+0x2a0>)
 80019aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ae:	ee06 3a90 	vmov	s13, r3
 80019b2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80019b6:	eeb0 2a66 	vmov.f32	s4, s13
 80019ba:	eef0 1a47 	vmov.f32	s3, s14
 80019be:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80019c2:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80019c6:	eeb0 0a67 	vmov.f32	s0, s15
 80019ca:	f7ff fef3 	bl	80017b4 <mapfloat>
 80019ce:	eef0 7a40 	vmov.f32	s15, s0
 80019d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019d6:	ee17 3a90 	vmov	r3, s15
 80019da:	b21a      	sxth	r2, r3
 80019dc:	4b3b      	ldr	r3, [pc, #236]	; (8001acc <main+0x2bc>)
 80019de:	801a      	strh	r2, [r3, #0]
			VL = mapfloat(y, -1.0, 1.0, -V_max, V_max);
 80019e0:	4b37      	ldr	r3, [pc, #220]	; (8001ac0 <main+0x2b0>)
 80019e2:	edd3 7a00 	vldr	s15, [r3]
 80019e6:	4b32      	ldr	r3, [pc, #200]	; (8001ab0 <main+0x2a0>)
 80019e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ec:	425b      	negs	r3, r3
 80019ee:	ee07 3a10 	vmov	s14, r3
 80019f2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80019f6:	4b2e      	ldr	r3, [pc, #184]	; (8001ab0 <main+0x2a0>)
 80019f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019fc:	ee06 3a90 	vmov	s13, r3
 8001a00:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001a04:	eeb0 2a66 	vmov.f32	s4, s13
 8001a08:	eef0 1a47 	vmov.f32	s3, s14
 8001a0c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001a10:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8001a14:	eeb0 0a67 	vmov.f32	s0, s15
 8001a18:	f7ff fecc 	bl	80017b4 <mapfloat>
 8001a1c:	eef0 7a40 	vmov.f32	s15, s0
 8001a20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a24:	ee17 3a90 	vmov	r3, s15
 8001a28:	b21a      	sxth	r2, r3
 8001a2a:	4b29      	ldr	r3, [pc, #164]	; (8001ad0 <main+0x2c0>)
 8001a2c:	801a      	strh	r2, [r3, #0]
			Robot_V = map(V_apar, 1000, 2000, -V_max, V_max);
 8001a2e:	4b1b      	ldr	r3, [pc, #108]	; (8001a9c <main+0x28c>)
 8001a30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a34:	4618      	mov	r0, r3
 8001a36:	4b1e      	ldr	r3, [pc, #120]	; (8001ab0 <main+0x2a0>)
 8001a38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a3c:	425b      	negs	r3, r3
 8001a3e:	4a1c      	ldr	r2, [pc, #112]	; (8001ab0 <main+0x2a0>)
 8001a40:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a44:	9200      	str	r2, [sp, #0]
 8001a46:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001a4a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a4e:	f7ff fe95 	bl	800177c <map>
 8001a52:	4603      	mov	r3, r0
 8001a54:	b21a      	sxth	r2, r3
 8001a56:	4b1f      	ldr	r3, [pc, #124]	; (8001ad4 <main+0x2c4>)
 8001a58:	801a      	strh	r2, [r3, #0]
			Robot_Fi = map(V_bok_apar, 1000, 2000, -Fi_max, Fi_max);
 8001a5a:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <main+0x288>)
 8001a5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a60:	4618      	mov	r0, r3
 8001a62:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <main+0x2a4>)
 8001a64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a68:	425b      	negs	r3, r3
 8001a6a:	4a12      	ldr	r2, [pc, #72]	; (8001ab4 <main+0x2a4>)
 8001a6c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a70:	9200      	str	r2, [sp, #0]
 8001a72:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001a76:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a7a:	f7ff fe7f 	bl	800177c <map>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	b21a      	sxth	r2, r3
 8001a82:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <main+0x2c8>)
 8001a84:	801a      	strh	r2, [r3, #0]
 8001a86:	e035      	b.n	8001af4 <main+0x2e4>
 8001a88:	20000200 	.word	0x20000200
 8001a8c:	200003ac 	.word	0x200003ac
 8001a90:	20000410 	.word	0x20000410
 8001a94:	200003c8 	.word	0x200003c8
 8001a98:	2000020a 	.word	0x2000020a
 8001a9c:	20000208 	.word	0x20000208
 8001aa0:	2000021a 	.word	0x2000021a
 8001aa4:	20000218 	.word	0x20000218
 8001aa8:	2000020c 	.word	0x2000020c
 8001aac:	2000020e 	.word	0x2000020e
 8001ab0:	20000210 	.word	0x20000210
 8001ab4:	20000212 	.word	0x20000212
 8001ab8:	44fa0000 	.word	0x44fa0000
 8001abc:	447a0000 	.word	0x447a0000
 8001ac0:	200003b0 	.word	0x200003b0
 8001ac4:	20000314 	.word	0x20000314
 8001ac8:	20000202 	.word	0x20000202
 8001acc:	20000216 	.word	0x20000216
 8001ad0:	20000214 	.word	0x20000214
 8001ad4:	20000204 	.word	0x20000204
 8001ad8:	20000206 	.word	0x20000206

		} else {
			//Serial.println("Jazda 0");
			VL = 0;
 8001adc:	4b38      	ldr	r3, [pc, #224]	; (8001bc0 <main+0x3b0>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	801a      	strh	r2, [r3, #0]
			VR = 0;
 8001ae2:	4b38      	ldr	r3, [pc, #224]	; (8001bc4 <main+0x3b4>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	801a      	strh	r2, [r3, #0]
			Robot_V = 0;
 8001ae8:	4b37      	ldr	r3, [pc, #220]	; (8001bc8 <main+0x3b8>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	801a      	strh	r2, [r3, #0]
			Robot_Fi = 0;
 8001aee:	4b37      	ldr	r3, [pc, #220]	; (8001bcc <main+0x3bc>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	801a      	strh	r2, [r3, #0]
		}

		if ((VL < 5) && (VL > -5))
 8001af4:	4b32      	ldr	r3, [pc, #200]	; (8001bc0 <main+0x3b0>)
 8001af6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	dc08      	bgt.n	8001b10 <main+0x300>
 8001afe:	4b30      	ldr	r3, [pc, #192]	; (8001bc0 <main+0x3b0>)
 8001b00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b04:	f113 0f04 	cmn.w	r3, #4
 8001b08:	db02      	blt.n	8001b10 <main+0x300>
			VL = 0;
 8001b0a:	4b2d      	ldr	r3, [pc, #180]	; (8001bc0 <main+0x3b0>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	801a      	strh	r2, [r3, #0]
		if ((VR < 5) && (VR > -5))
 8001b10:	4b2c      	ldr	r3, [pc, #176]	; (8001bc4 <main+0x3b4>)
 8001b12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	dc08      	bgt.n	8001b2c <main+0x31c>
 8001b1a:	4b2a      	ldr	r3, [pc, #168]	; (8001bc4 <main+0x3b4>)
 8001b1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b20:	f113 0f04 	cmn.w	r3, #4
 8001b24:	db02      	blt.n	8001b2c <main+0x31c>
			VR = 0;
 8001b26:	4b27      	ldr	r3, [pc, #156]	; (8001bc4 <main+0x3b4>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	801a      	strh	r2, [r3, #0]
		if ((Robot_V < 5) && (Robot_V > -5))
 8001b2c:	4b26      	ldr	r3, [pc, #152]	; (8001bc8 <main+0x3b8>)
 8001b2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	dc08      	bgt.n	8001b48 <main+0x338>
 8001b36:	4b24      	ldr	r3, [pc, #144]	; (8001bc8 <main+0x3b8>)
 8001b38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b3c:	f113 0f04 	cmn.w	r3, #4
 8001b40:	db02      	blt.n	8001b48 <main+0x338>
			Robot_V = 0;
 8001b42:	4b21      	ldr	r3, [pc, #132]	; (8001bc8 <main+0x3b8>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	801a      	strh	r2, [r3, #0]
		if ((Robot_Fi < 5) && (Robot_Fi > -5))
 8001b48:	4b20      	ldr	r3, [pc, #128]	; (8001bcc <main+0x3bc>)
 8001b4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	dc08      	bgt.n	8001b64 <main+0x354>
 8001b52:	4b1e      	ldr	r3, [pc, #120]	; (8001bcc <main+0x3bc>)
 8001b54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b58:	f113 0f04 	cmn.w	r3, #4
 8001b5c:	db02      	blt.n	8001b64 <main+0x354>
			Robot_Fi = 0;
 8001b5e:	4b1b      	ldr	r3, [pc, #108]	; (8001bcc <main+0x3bc>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	801a      	strh	r2, [r3, #0]

		Send(Robot_Fi, Robot_V);
 8001b64:	4b19      	ldr	r3, [pc, #100]	; (8001bcc <main+0x3bc>)
 8001b66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b6a:	4a17      	ldr	r2, [pc, #92]	; (8001bc8 <main+0x3b8>)
 8001b6c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001b70:	4611      	mov	r1, r2
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff fafa 	bl	800116c <Send>
			Send(Robot_Fi, Robot_V);
			//sprintf(buffer, "Robot_Fi: %d Robot_V: %d\n\r", Robot_Fi, Robot_V);
			sprintf(buffer, "%d %d\n\r", Robot_Fi, Robot_V);
			HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 100);
#endif
			time = (getCurrentMicros() - loop_timer) * 1e-6;
 8001b78:	f7ff fdce 	bl	8001718 <getCurrentMicros>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	4b14      	ldr	r3, [pc, #80]	; (8001bd0 <main+0x3c0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7fe fcc5 	bl	8000514 <__aeabi_ui2d>
 8001b8a:	a30b      	add	r3, pc, #44	; (adr r3, 8001bb8 <main+0x3a8>)
 8001b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b90:	f7fe fd3a 	bl	8000608 <__aeabi_dmul>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	4610      	mov	r0, r2
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	f7ff f80c 	bl	8000bb8 <__aeabi_d2f>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	4a0c      	ldr	r2, [pc, #48]	; (8001bd4 <main+0x3c4>)
 8001ba4:	6013      	str	r3, [r2, #0]
			loop_timer = getCurrentMicros();
 8001ba6:	f7ff fdb7 	bl	8001718 <getCurrentMicros>
 8001baa:	4603      	mov	r3, r0
 8001bac:	4a08      	ldr	r2, [pc, #32]	; (8001bd0 <main+0x3c0>)
 8001bae:	6013      	str	r3, [r2, #0]
		if (mpu6050_ready) {
 8001bb0:	e64f      	b.n	8001852 <main+0x42>
 8001bb2:	bf00      	nop
 8001bb4:	f3af 8000 	nop.w
 8001bb8:	a0b5ed8d 	.word	0xa0b5ed8d
 8001bbc:	3eb0c6f7 	.word	0x3eb0c6f7
 8001bc0:	20000214 	.word	0x20000214
 8001bc4:	20000216 	.word	0x20000216
 8001bc8:	20000204 	.word	0x20000204
 8001bcc:	20000206 	.word	0x20000206
 8001bd0:	200003c8 	.word	0x200003c8
 8001bd4:	200001fc 	.word	0x200001fc

08001bd8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b094      	sub	sp, #80	; 0x50
 8001bdc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001bde:	f107 0320 	add.w	r3, r7, #32
 8001be2:	2230      	movs	r2, #48	; 0x30
 8001be4:	2100      	movs	r1, #0
 8001be6:	4618      	mov	r0, r3
 8001be8:	f003 fee6 	bl	80059b8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001bec:	f107 030c 	add.w	r3, r7, #12
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60bb      	str	r3, [r7, #8]
 8001c00:	4b22      	ldr	r3, [pc, #136]	; (8001c8c <SystemClock_Config+0xb4>)
 8001c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c04:	4a21      	ldr	r2, [pc, #132]	; (8001c8c <SystemClock_Config+0xb4>)
 8001c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c0a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c0c:	4b1f      	ldr	r3, [pc, #124]	; (8001c8c <SystemClock_Config+0xb4>)
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c18:	2300      	movs	r3, #0
 8001c1a:	607b      	str	r3, [r7, #4]
 8001c1c:	4b1c      	ldr	r3, [pc, #112]	; (8001c90 <SystemClock_Config+0xb8>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c24:	4a1a      	ldr	r2, [pc, #104]	; (8001c90 <SystemClock_Config+0xb8>)
 8001c26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c2a:	6013      	str	r3, [r2, #0]
 8001c2c:	4b18      	ldr	r3, [pc, #96]	; (8001c90 <SystemClock_Config+0xb8>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c34:	607b      	str	r3, [r7, #4]
 8001c36:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c42:	2300      	movs	r3, #0
 8001c44:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001c46:	f107 0320 	add.w	r3, r7, #32
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f002 fa7a 	bl	8004144 <HAL_RCC_OscConfig>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <SystemClock_Config+0x82>
		Error_Handler();
 8001c56:	f000 f869 	bl	8001d2c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001c5a:	230f      	movs	r3, #15
 8001c5c:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001c6e:	f107 030c 	add.w	r3, r7, #12
 8001c72:	2100      	movs	r1, #0
 8001c74:	4618      	mov	r0, r3
 8001c76:	f002 fcdd 	bl	8004634 <HAL_RCC_ClockConfig>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <SystemClock_Config+0xac>
		Error_Handler();
 8001c80:	f000 f854 	bl	8001d2c <Error_Handler>
	}
}
 8001c84:	bf00      	nop
 8001c86:	3750      	adds	r7, #80	; 0x50
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40007000 	.word	0x40007000

08001c94 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) { //sprawdzenie czy przyszło z właściwego usarta
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a05      	ldr	r2, [pc, #20]	; (8001cb8 <HAL_UART_RxCpltCallback+0x24>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d102      	bne.n	8001cac <HAL_UART_RxCpltCallback+0x18>
		data_available = 1;
 8001ca6:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <HAL_UART_RxCpltCallback+0x28>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	701a      	strb	r2, [r3, #0]
		//ponowne wywołanie oczekiwania na przerwania dzieje się po przetworzeniu danych w hoverserial.c
	}
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	40004400 	.word	0x40004400
 8001cbc:	200002a0 	.word	0x200002a0

08001cc0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001cc0:	b590      	push	{r4, r7, lr}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == PPM_EXTI_Pin) { //sprawdzenie czy właściwy PIN (uwaga, aktualnie ustawiony sprzętowy pullup)
 8001cca:	88fb      	ldrh	r3, [r7, #6]
 8001ccc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cd0:	d122      	bne.n	8001d18 <HAL_GPIO_EXTI_Callback+0x58>
		//		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);

		uint8_t state_now = HAL_GPIO_ReadPin(PPM_EXTI_GPIO_Port, PPM_EXTI_Pin); //tylko port C w tym momencie
 8001cd2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cd6:	4812      	ldr	r0, [pc, #72]	; (8001d20 <HAL_GPIO_EXTI_Callback+0x60>)
 8001cd8:	f001 fa10 	bl	80030fc <HAL_GPIO_ReadPin>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	73fb      	strb	r3, [r7, #15]
		if (state_now == 1) {
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d118      	bne.n	8001d18 <HAL_GPIO_EXTI_Callback+0x58>
			timers[pulse] = getCurrentMicros();
 8001ce6:	4b0f      	ldr	r3, [pc, #60]	; (8001d24 <HAL_GPIO_EXTI_Callback+0x64>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	461c      	mov	r4, r3
 8001cec:	f7ff fd14 	bl	8001718 <getCurrentMicros>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	4a0d      	ldr	r2, [pc, #52]	; (8001d28 <HAL_GPIO_EXTI_Callback+0x68>)
 8001cf4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			if (pulse > 0) {
 8001cf8:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <HAL_GPIO_EXTI_Callback+0x64>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d005      	beq.n	8001d0c <HAL_GPIO_EXTI_Callback+0x4c>
				getChannelValuePPM(pulse);
 8001d00:	4b08      	ldr	r3, [pc, #32]	; (8001d24 <HAL_GPIO_EXTI_Callback+0x64>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff fca5 	bl	8001654 <getChannelValuePPM>
			} else
				pulse++;
		}
	}
}
 8001d0a:	e005      	b.n	8001d18 <HAL_GPIO_EXTI_Callback+0x58>
				pulse++;
 8001d0c:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <HAL_GPIO_EXTI_Callback+0x64>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	3301      	adds	r3, #1
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	4b03      	ldr	r3, [pc, #12]	; (8001d24 <HAL_GPIO_EXTI_Callback+0x64>)
 8001d16:	701a      	strb	r2, [r3, #0]
}
 8001d18:	bf00      	nop
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd90      	pop	{r4, r7, pc}
 8001d20:	40020400 	.word	0x40020400
 8001d24:	2000021c 	.word	0x2000021c
 8001d28:	20000318 	.word	0x20000318

08001d2c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d30:	b672      	cpsid	i
}
 8001d32:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001d34:	e7fe      	b.n	8001d34 <Error_Handler+0x8>
	...

08001d38 <MPU6050_Init>:
uint32_t loop_timer;
float gyro_calibr = 0, acc_calibr = 0;

float angle_acc, Gx = 0, Gy, Gz;

_Bool MPU6050_Init(void) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;
	_Bool mpu6050_status = 0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	71fb      	strb	r3, [r7, #7]

	// sprawdzenie czy to MPU6050

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I, 1, &check, 1, 1000);
 8001d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d46:	9302      	str	r3, [sp, #8]
 8001d48:	2301      	movs	r3, #1
 8001d4a:	9301      	str	r3, [sp, #4]
 8001d4c:	1dbb      	adds	r3, r7, #6
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	2301      	movs	r3, #1
 8001d52:	2275      	movs	r2, #117	; 0x75
 8001d54:	21d0      	movs	r1, #208	; 0xd0
 8001d56:	482e      	ldr	r0, [pc, #184]	; (8001e10 <MPU6050_Init+0xd8>)
 8001d58:	f001 fc72 	bl	8003640 <HAL_I2C_Mem_Read>

	if (check == 0x72) // powinno być 0x68 ale w tym przypadku to jakiś klon
 8001d5c:	79bb      	ldrb	r3, [r7, #6]
 8001d5e:	2b72      	cmp	r3, #114	; 0x72
 8001d60:	d14b      	bne.n	8001dfa <MPU6050_Init+0xc2>
			{
		// power management register: brak resetu, wyłączone tryby sleep i cycle, wyłączony czujnik temp. (bit wysoki), wewnętrzny zegar 8MHz
		Data = 0b00001000;
 8001d62:	2308      	movs	r3, #8
 8001d64:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1, 1, &Data, 1, 1000);
 8001d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d6a:	9302      	str	r3, [sp, #8]
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	9301      	str	r3, [sp, #4]
 8001d70:	1d7b      	adds	r3, r7, #5
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	2301      	movs	r3, #1
 8001d76:	226b      	movs	r2, #107	; 0x6b
 8001d78:	21d0      	movs	r1, #208	; 0xd0
 8001d7a:	4825      	ldr	r0, [pc, #148]	; (8001e10 <MPU6050_Init+0xd8>)
 8001d7c:	f001 fb66 	bl	800344c <HAL_I2C_Mem_Write>
		//Data = 0x07;
		//HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV, 1, &Data, 1, 1000);

		// konfiguracja akcelerometru
		// bity 3 = 0; 4 = 0 - zakres akcelerometru na +-0g, pozostałe bity to selftest bądź zastrzeżone (oba nieistotne)
		Data = 0x00;
 8001d80:	2300      	movs	r3, #0
 8001d82:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG, 1, &Data, 1,
 8001d84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d88:	9302      	str	r3, [sp, #8]
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	9301      	str	r3, [sp, #4]
 8001d8e:	1d7b      	adds	r3, r7, #5
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	2301      	movs	r3, #1
 8001d94:	221c      	movs	r2, #28
 8001d96:	21d0      	movs	r1, #208	; 0xd0
 8001d98:	481d      	ldr	r0, [pc, #116]	; (8001e10 <MPU6050_Init+0xd8>)
 8001d9a:	f001 fb57 	bl	800344c <HAL_I2C_Mem_Write>
				1000);

		// konfiguracja żyroskopu
		// bity 3 = 0; 4 = 0 - zakres żyroskopu na +-250 deg/s, pozostałe bity to selftest bądź zastrzeżone (oba nieistotne)
		Data = 0x00;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG, 1, &Data, 1, 1000);
 8001da2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001da6:	9302      	str	r3, [sp, #8]
 8001da8:	2301      	movs	r3, #1
 8001daa:	9301      	str	r3, [sp, #4]
 8001dac:	1d7b      	adds	r3, r7, #5
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	2301      	movs	r3, #1
 8001db2:	221b      	movs	r2, #27
 8001db4:	21d0      	movs	r1, #208	; 0xd0
 8001db6:	4816      	ldr	r0, [pc, #88]	; (8001e10 <MPU6050_Init+0xd8>)
 8001db8:	f001 fb48 	bl	800344c <HAL_I2C_Mem_Write>

		Data = 0b00000101;	////ostatnie 3 bity to filtr LPF, 43Hz 011
 8001dbc:	2305      	movs	r3, #5
 8001dbe:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x1A, 1, &Data, 1, 1000);
 8001dc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dc4:	9302      	str	r3, [sp, #8]
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	9301      	str	r3, [sp, #4]
 8001dca:	1d7b      	adds	r3, r7, #5
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	2301      	movs	r3, #1
 8001dd0:	221a      	movs	r2, #26
 8001dd2:	21d0      	movs	r1, #208	; 0xd0
 8001dd4:	480e      	ldr	r0, [pc, #56]	; (8001e10 <MPU6050_Init+0xd8>)
 8001dd6:	f001 fb39 	bl	800344c <HAL_I2C_Mem_Write>

		gyro_calibr = kalibracja_gyro();
 8001dda:	f000 f8db 	bl	8001f94 <kalibracja_gyro>
 8001dde:	eef0 7a40 	vmov.f32	s15, s0
 8001de2:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <MPU6050_Init+0xdc>)
 8001de4:	edc3 7a00 	vstr	s15, [r3]
		acc_calibr = kalibracja_acc();
 8001de8:	f000 f81a 	bl	8001e20 <kalibracja_acc>
 8001dec:	eef0 7a40 	vmov.f32	s15, s0
 8001df0:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <MPU6050_Init+0xe0>)
 8001df2:	edc3 7a00 	vstr	s15, [r3]
		mpu6050_status = 1;
 8001df6:	2301      	movs	r3, #1
 8001df8:	71fb      	strb	r3, [r7, #7]
	}
	loop_timer = HAL_GetTick();
 8001dfa:	f000 fbe9 	bl	80025d0 <HAL_GetTick>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	4a06      	ldr	r2, [pc, #24]	; (8001e1c <MPU6050_Init+0xe4>)
 8001e02:	6013      	str	r3, [r2, #0]
return mpu6050_status;
 8001e04:	79fb      	ldrb	r3, [r7, #7]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	200002c0 	.word	0x200002c0
 8001e14:	2000022c 	.word	0x2000022c
 8001e18:	20000230 	.word	0x20000230
 8001e1c:	200003c8 	.word	0x200003c8

08001e20 <kalibracja_acc>:
	Gx = Gyro_Y_RAW / 131;
	//Gx += Gyro_X_RAW * time / 131; //kąt z poprzedniej pętli + kąt przebyty w tej pętli - 131 LSB dla 1deg/s, czas petli wynosi 0.004s, zatem pokonana droga wyniesie 131/0.004 deg
	return (Gx);
}

float kalibracja_acc(void) {
 8001e20:	b5b0      	push	{r4, r5, r7, lr}
 8001e22:	b088      	sub	sp, #32
 8001e24:	af04      	add	r7, sp, #16
	for (int i = 0; i < 10000; i++) {
 8001e26:	2300      	movs	r3, #0
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	e084      	b.n	8001f36 <kalibracja_acc+0x116>
		if (i % 200 == 0)
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	4b50      	ldr	r3, [pc, #320]	; (8001f70 <kalibracja_acc+0x150>)
 8001e30:	fb83 1302 	smull	r1, r3, r3, r2
 8001e34:	1199      	asrs	r1, r3, #6
 8001e36:	17d3      	asrs	r3, r2, #31
 8001e38:	1acb      	subs	r3, r1, r3
 8001e3a:	21c8      	movs	r1, #200	; 0xc8
 8001e3c:	fb01 f303 	mul.w	r3, r1, r3
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d104      	bne.n	8001e50 <kalibracja_acc+0x30>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001e46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e4a:	484a      	ldr	r0, [pc, #296]	; (8001f74 <kalibracja_acc+0x154>)
 8001e4c:	f001 f987 	bl	800315e <HAL_GPIO_TogglePin>

		uint8_t Rec_Data[6];
		HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H, 1, Rec_Data, 6,
 8001e50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e54:	9302      	str	r3, [sp, #8]
 8001e56:	2306      	movs	r3, #6
 8001e58:	9301      	str	r3, [sp, #4]
 8001e5a:	1d3b      	adds	r3, r7, #4
 8001e5c:	9300      	str	r3, [sp, #0]
 8001e5e:	2301      	movs	r3, #1
 8001e60:	223b      	movs	r2, #59	; 0x3b
 8001e62:	21d0      	movs	r1, #208	; 0xd0
 8001e64:	4844      	ldr	r0, [pc, #272]	; (8001f78 <kalibracja_acc+0x158>)
 8001e66:	f001 fbeb 	bl	8003640 <HAL_I2C_Mem_Read>
				1000);
		acc_rawX = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8001e6a:	793b      	ldrb	r3, [r7, #4]
 8001e6c:	021b      	lsls	r3, r3, #8
 8001e6e:	b21a      	sxth	r2, r3
 8001e70:	797b      	ldrb	r3, [r7, #5]
 8001e72:	b21b      	sxth	r3, r3
 8001e74:	4313      	orrs	r3, r2
 8001e76:	b21a      	sxth	r2, r3
 8001e78:	4b40      	ldr	r3, [pc, #256]	; (8001f7c <kalibracja_acc+0x15c>)
 8001e7a:	801a      	strh	r2, [r3, #0]
		acc_rawY = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001e7c:	79bb      	ldrb	r3, [r7, #6]
 8001e7e:	021b      	lsls	r3, r3, #8
 8001e80:	b21a      	sxth	r2, r3
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	b21b      	sxth	r3, r3
 8001e86:	4313      	orrs	r3, r2
 8001e88:	b21a      	sxth	r2, r3
 8001e8a:	4b3d      	ldr	r3, [pc, #244]	; (8001f80 <kalibracja_acc+0x160>)
 8001e8c:	801a      	strh	r2, [r3, #0]
		acc_rawZ = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8001e8e:	7a3b      	ldrb	r3, [r7, #8]
 8001e90:	021b      	lsls	r3, r3, #8
 8001e92:	b21a      	sxth	r2, r3
 8001e94:	7a7b      	ldrb	r3, [r7, #9]
 8001e96:	b21b      	sxth	r3, r3
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	b21a      	sxth	r2, r3
 8001e9c:	4b39      	ldr	r3, [pc, #228]	; (8001f84 <kalibracja_acc+0x164>)
 8001e9e:	801a      	strh	r2, [r3, #0]

		//kąt jest atanem ilorazu przyspieszeń zatem nie trzeba konwertować do g

		acc_calibr += atan2((float) acc_rawX, (float) acc_rawZ) * -180 / M_PI;
 8001ea0:	4b36      	ldr	r3, [pc, #216]	; (8001f7c <kalibracja_acc+0x15c>)
 8001ea2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ea6:	ee07 3a90 	vmov	s15, r3
 8001eaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eae:	ee17 0a90 	vmov	r0, s15
 8001eb2:	f7fe fb51 	bl	8000558 <__aeabi_f2d>
 8001eb6:	4604      	mov	r4, r0
 8001eb8:	460d      	mov	r5, r1
 8001eba:	4b32      	ldr	r3, [pc, #200]	; (8001f84 <kalibracja_acc+0x164>)
 8001ebc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ec0:	ee07 3a90 	vmov	s15, r3
 8001ec4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ec8:	ee17 0a90 	vmov	r0, s15
 8001ecc:	f7fe fb44 	bl	8000558 <__aeabi_f2d>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	ec43 2b11 	vmov	d1, r2, r3
 8001ed8:	ec45 4b10 	vmov	d0, r4, r5
 8001edc:	f006 fc0a 	bl	80086f4 <atan2>
 8001ee0:	ec51 0b10 	vmov	r0, r1, d0
 8001ee4:	f04f 0200 	mov.w	r2, #0
 8001ee8:	4b27      	ldr	r3, [pc, #156]	; (8001f88 <kalibracja_acc+0x168>)
 8001eea:	f7fe fb8d 	bl	8000608 <__aeabi_dmul>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	4610      	mov	r0, r2
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	a31c      	add	r3, pc, #112	; (adr r3, 8001f68 <kalibracja_acc+0x148>)
 8001ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001efc:	f7fe fcae 	bl	800085c <__aeabi_ddiv>
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
 8001f04:	4614      	mov	r4, r2
 8001f06:	461d      	mov	r5, r3
 8001f08:	4b20      	ldr	r3, [pc, #128]	; (8001f8c <kalibracja_acc+0x16c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7fe fb23 	bl	8000558 <__aeabi_f2d>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	4620      	mov	r0, r4
 8001f18:	4629      	mov	r1, r5
 8001f1a:	f7fe f9bf 	bl	800029c <__adddf3>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	460b      	mov	r3, r1
 8001f22:	4610      	mov	r0, r2
 8001f24:	4619      	mov	r1, r3
 8001f26:	f7fe fe47 	bl	8000bb8 <__aeabi_d2f>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	4a17      	ldr	r2, [pc, #92]	; (8001f8c <kalibracja_acc+0x16c>)
 8001f2e:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 10000; i++) {
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	3301      	adds	r3, #1
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f242 720f 	movw	r2, #9999	; 0x270f
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	f77f af75 	ble.w	8001e2c <kalibracja_acc+0xc>
	}
	acc_calibr /= 10000;
 8001f42:	4b12      	ldr	r3, [pc, #72]	; (8001f8c <kalibracja_acc+0x16c>)
 8001f44:	ed93 7a00 	vldr	s14, [r3]
 8001f48:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001f90 <kalibracja_acc+0x170>
 8001f4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f50:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <kalibracja_acc+0x16c>)
 8001f52:	edc3 7a00 	vstr	s15, [r3]

	return acc_calibr;
 8001f56:	4b0d      	ldr	r3, [pc, #52]	; (8001f8c <kalibracja_acc+0x16c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	ee07 3a90 	vmov	s15, r3
}
 8001f5e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bdb0      	pop	{r4, r5, r7, pc}
 8001f68:	54442d18 	.word	0x54442d18
 8001f6c:	400921fb 	.word	0x400921fb
 8001f70:	51eb851f 	.word	0x51eb851f
 8001f74:	40020800 	.word	0x40020800
 8001f78:	200002c0 	.word	0x200002c0
 8001f7c:	2000021e 	.word	0x2000021e
 8001f80:	20000220 	.word	0x20000220
 8001f84:	20000222 	.word	0x20000222
 8001f88:	c0668000 	.word	0xc0668000
 8001f8c:	20000230 	.word	0x20000230
 8001f90:	461c4000 	.word	0x461c4000

08001f94 <kalibracja_gyro>:

float kalibracja_gyro(void) {
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b088      	sub	sp, #32
 8001f98:	af04      	add	r7, sp, #16
	for (int i = 0; i < 10000; i++) {
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	e04b      	b.n	8002038 <kalibracja_gyro+0xa4>
		if (i % 200 == 0)
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	4b31      	ldr	r3, [pc, #196]	; (8002068 <kalibracja_gyro+0xd4>)
 8001fa4:	fb83 1302 	smull	r1, r3, r3, r2
 8001fa8:	1199      	asrs	r1, r3, #6
 8001faa:	17d3      	asrs	r3, r2, #31
 8001fac:	1acb      	subs	r3, r1, r3
 8001fae:	21c8      	movs	r1, #200	; 0xc8
 8001fb0:	fb01 f303 	mul.w	r3, r1, r3
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d104      	bne.n	8001fc4 <kalibracja_gyro+0x30>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); //migająca dioda - informacja o procesie kalibracji
 8001fba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fbe:	482b      	ldr	r0, [pc, #172]	; (800206c <kalibracja_gyro+0xd8>)
 8001fc0:	f001 f8cd 	bl	800315e <HAL_GPIO_TogglePin>
		uint8_t Rec_Data[6];
		HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H, 1, Rec_Data, 6,
 8001fc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fc8:	9302      	str	r3, [sp, #8]
 8001fca:	2306      	movs	r3, #6
 8001fcc:	9301      	str	r3, [sp, #4]
 8001fce:	1d3b      	adds	r3, r7, #4
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	2243      	movs	r2, #67	; 0x43
 8001fd6:	21d0      	movs	r1, #208	; 0xd0
 8001fd8:	4825      	ldr	r0, [pc, #148]	; (8002070 <kalibracja_gyro+0xdc>)
 8001fda:	f001 fb31 	bl	8003640 <HAL_I2C_Mem_Read>
				1000);

		Gyro_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8001fde:	793b      	ldrb	r3, [r7, #4]
 8001fe0:	021b      	lsls	r3, r3, #8
 8001fe2:	b21a      	sxth	r2, r3
 8001fe4:	797b      	ldrb	r3, [r7, #5]
 8001fe6:	b21b      	sxth	r3, r3
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	b21a      	sxth	r2, r3
 8001fec:	4b21      	ldr	r3, [pc, #132]	; (8002074 <kalibracja_gyro+0xe0>)
 8001fee:	801a      	strh	r2, [r3, #0]
		Gyro_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001ff0:	79bb      	ldrb	r3, [r7, #6]
 8001ff2:	021b      	lsls	r3, r3, #8
 8001ff4:	b21a      	sxth	r2, r3
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	b21b      	sxth	r3, r3
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	b21a      	sxth	r2, r3
 8001ffe:	4b1e      	ldr	r3, [pc, #120]	; (8002078 <kalibracja_gyro+0xe4>)
 8002000:	801a      	strh	r2, [r3, #0]
		Gyro_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8002002:	7a3b      	ldrb	r3, [r7, #8]
 8002004:	021b      	lsls	r3, r3, #8
 8002006:	b21a      	sxth	r2, r3
 8002008:	7a7b      	ldrb	r3, [r7, #9]
 800200a:	b21b      	sxth	r3, r3
 800200c:	4313      	orrs	r3, r2
 800200e:	b21a      	sxth	r2, r3
 8002010:	4b1a      	ldr	r3, [pc, #104]	; (800207c <kalibracja_gyro+0xe8>)
 8002012:	801a      	strh	r2, [r3, #0]
		gyro_calibr += Gyro_Y_RAW;
 8002014:	4b18      	ldr	r3, [pc, #96]	; (8002078 <kalibracja_gyro+0xe4>)
 8002016:	f9b3 3000 	ldrsh.w	r3, [r3]
 800201a:	ee07 3a90 	vmov	s15, r3
 800201e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002022:	4b17      	ldr	r3, [pc, #92]	; (8002080 <kalibracja_gyro+0xec>)
 8002024:	edd3 7a00 	vldr	s15, [r3]
 8002028:	ee77 7a27 	vadd.f32	s15, s14, s15
 800202c:	4b14      	ldr	r3, [pc, #80]	; (8002080 <kalibracja_gyro+0xec>)
 800202e:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 10000; i++) {
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	3301      	adds	r3, #1
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f242 720f 	movw	r2, #9999	; 0x270f
 800203e:	4293      	cmp	r3, r2
 8002040:	ddae      	ble.n	8001fa0 <kalibracja_gyro+0xc>

	}
	gyro_calibr /= 10000;                                      //wartosc srednia
 8002042:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <kalibracja_gyro+0xec>)
 8002044:	ed93 7a00 	vldr	s14, [r3]
 8002048:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002084 <kalibracja_gyro+0xf0>
 800204c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002050:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <kalibracja_gyro+0xec>)
 8002052:	edc3 7a00 	vstr	s15, [r3]

	return gyro_calibr;
 8002056:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <kalibracja_gyro+0xec>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	ee07 3a90 	vmov	s15, r3
}
 800205e:	eeb0 0a67 	vmov.f32	s0, s15
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	51eb851f 	.word	0x51eb851f
 800206c:	40020800 	.word	0x40020800
 8002070:	200002c0 	.word	0x200002c0
 8002074:	20000224 	.word	0x20000224
 8002078:	20000226 	.word	0x20000226
 800207c:	20000228 	.word	0x20000228
 8002080:	2000022c 	.word	0x2000022c
 8002084:	461c4000 	.word	0x461c4000

08002088 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	607b      	str	r3, [r7, #4]
 8002092:	4b10      	ldr	r3, [pc, #64]	; (80020d4 <HAL_MspInit+0x4c>)
 8002094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002096:	4a0f      	ldr	r2, [pc, #60]	; (80020d4 <HAL_MspInit+0x4c>)
 8002098:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800209c:	6453      	str	r3, [r2, #68]	; 0x44
 800209e:	4b0d      	ldr	r3, [pc, #52]	; (80020d4 <HAL_MspInit+0x4c>)
 80020a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020a6:	607b      	str	r3, [r7, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	603b      	str	r3, [r7, #0]
 80020ae:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <HAL_MspInit+0x4c>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	4a08      	ldr	r2, [pc, #32]	; (80020d4 <HAL_MspInit+0x4c>)
 80020b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020b8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ba:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <HAL_MspInit+0x4c>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c2:	603b      	str	r3, [r7, #0]
 80020c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	40023800 	.word	0x40023800

080020d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020dc:	e7fe      	b.n	80020dc <NMI_Handler+0x4>

080020de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020de:	b480      	push	{r7}
 80020e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020e2:	e7fe      	b.n	80020e2 <HardFault_Handler+0x4>

080020e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020e8:	e7fe      	b.n	80020e8 <MemManage_Handler+0x4>

080020ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020ea:	b480      	push	{r7}
 80020ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ee:	e7fe      	b.n	80020ee <BusFault_Handler+0x4>

080020f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020f4:	e7fe      	b.n	80020f4 <UsageFault_Handler+0x4>

080020f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020f6:	b480      	push	{r7}
 80020f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020fa:	bf00      	nop
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002112:	b480      	push	{r7}
 8002114:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002124:	f000 fa40 	bl	80025a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002128:	bf00      	nop
 800212a:	bd80      	pop	{r7, pc}

0800212c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002130:	4802      	ldr	r0, [pc, #8]	; (800213c <USART2_IRQHandler+0x10>)
 8002132:	f002 fd5f 	bl	8004bf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	20000410 	.word	0x20000410

08002140 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002144:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002148:	f001 f824 	bl	8003194 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800214c:	bf00      	nop
 800214e:	bd80      	pop	{r7, pc}

08002150 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
	return 1;
 8002154:	2301      	movs	r3, #1
}
 8002156:	4618      	mov	r0, r3
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <_kill>:

int _kill(int pid, int sig)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800216a:	f003 fbfb 	bl	8005964 <__errno>
 800216e:	4603      	mov	r3, r0
 8002170:	2216      	movs	r2, #22
 8002172:	601a      	str	r2, [r3, #0]
	return -1;
 8002174:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002178:	4618      	mov	r0, r3
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <_exit>:

void _exit (int status)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002188:	f04f 31ff 	mov.w	r1, #4294967295
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff ffe7 	bl	8002160 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002192:	e7fe      	b.n	8002192 <_exit+0x12>

08002194 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]
 80021a4:	e00a      	b.n	80021bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80021a6:	f3af 8000 	nop.w
 80021aa:	4601      	mov	r1, r0
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	1c5a      	adds	r2, r3, #1
 80021b0:	60ba      	str	r2, [r7, #8]
 80021b2:	b2ca      	uxtb	r2, r1
 80021b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	3301      	adds	r3, #1
 80021ba:	617b      	str	r3, [r7, #20]
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	dbf0      	blt.n	80021a6 <_read+0x12>
	}

return len;
 80021c4:	687b      	ldr	r3, [r7, #4]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b086      	sub	sp, #24
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	60f8      	str	r0, [r7, #12]
 80021d6:	60b9      	str	r1, [r7, #8]
 80021d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]
 80021de:	e009      	b.n	80021f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	1c5a      	adds	r2, r3, #1
 80021e4:	60ba      	str	r2, [r7, #8]
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	3301      	adds	r3, #1
 80021f2:	617b      	str	r3, [r7, #20]
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	dbf1      	blt.n	80021e0 <_write+0x12>
	}
	return len;
 80021fc:	687b      	ldr	r3, [r7, #4]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <_close>:

int _close(int file)
{
 8002206:	b480      	push	{r7}
 8002208:	b083      	sub	sp, #12
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
	return -1;
 800220e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002212:	4618      	mov	r0, r3
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800221e:	b480      	push	{r7}
 8002220:	b083      	sub	sp, #12
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
 8002226:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800222e:	605a      	str	r2, [r3, #4]
	return 0;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <_isatty>:

int _isatty(int file)
{
 800223e:	b480      	push	{r7}
 8002240:	b083      	sub	sp, #12
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
	return 1;
 8002246:	2301      	movs	r3, #1
}
 8002248:	4618      	mov	r0, r3
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
	return 0;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
	...

08002270 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002278:	4a14      	ldr	r2, [pc, #80]	; (80022cc <_sbrk+0x5c>)
 800227a:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <_sbrk+0x60>)
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002284:	4b13      	ldr	r3, [pc, #76]	; (80022d4 <_sbrk+0x64>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d102      	bne.n	8002292 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800228c:	4b11      	ldr	r3, [pc, #68]	; (80022d4 <_sbrk+0x64>)
 800228e:	4a12      	ldr	r2, [pc, #72]	; (80022d8 <_sbrk+0x68>)
 8002290:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002292:	4b10      	ldr	r3, [pc, #64]	; (80022d4 <_sbrk+0x64>)
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4413      	add	r3, r2
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	429a      	cmp	r2, r3
 800229e:	d207      	bcs.n	80022b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022a0:	f003 fb60 	bl	8005964 <__errno>
 80022a4:	4603      	mov	r3, r0
 80022a6:	220c      	movs	r2, #12
 80022a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022aa:	f04f 33ff 	mov.w	r3, #4294967295
 80022ae:	e009      	b.n	80022c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022b0:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <_sbrk+0x64>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022b6:	4b07      	ldr	r3, [pc, #28]	; (80022d4 <_sbrk+0x64>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4413      	add	r3, r2
 80022be:	4a05      	ldr	r2, [pc, #20]	; (80022d4 <_sbrk+0x64>)
 80022c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022c2:	68fb      	ldr	r3, [r7, #12]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3718      	adds	r7, #24
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	20010000 	.word	0x20010000
 80022d0:	00000400 	.word	0x00000400
 80022d4:	20000234 	.word	0x20000234
 80022d8:	20000468 	.word	0x20000468

080022dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022e0:	4b06      	ldr	r3, [pc, #24]	; (80022fc <SystemInit+0x20>)
 80022e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e6:	4a05      	ldr	r2, [pc, #20]	; (80022fc <SystemInit+0x20>)
 80022e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022f0:	bf00      	nop
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	e000ed00 	.word	0xe000ed00

08002300 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002304:	4b11      	ldr	r3, [pc, #68]	; (800234c <MX_USART1_UART_Init+0x4c>)
 8002306:	4a12      	ldr	r2, [pc, #72]	; (8002350 <MX_USART1_UART_Init+0x50>)
 8002308:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800230a:	4b10      	ldr	r3, [pc, #64]	; (800234c <MX_USART1_UART_Init+0x4c>)
 800230c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002310:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002312:	4b0e      	ldr	r3, [pc, #56]	; (800234c <MX_USART1_UART_Init+0x4c>)
 8002314:	2200      	movs	r2, #0
 8002316:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002318:	4b0c      	ldr	r3, [pc, #48]	; (800234c <MX_USART1_UART_Init+0x4c>)
 800231a:	2200      	movs	r2, #0
 800231c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800231e:	4b0b      	ldr	r3, [pc, #44]	; (800234c <MX_USART1_UART_Init+0x4c>)
 8002320:	2200      	movs	r2, #0
 8002322:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002324:	4b09      	ldr	r3, [pc, #36]	; (800234c <MX_USART1_UART_Init+0x4c>)
 8002326:	220c      	movs	r2, #12
 8002328:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800232a:	4b08      	ldr	r3, [pc, #32]	; (800234c <MX_USART1_UART_Init+0x4c>)
 800232c:	2200      	movs	r2, #0
 800232e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <MX_USART1_UART_Init+0x4c>)
 8002332:	2200      	movs	r2, #0
 8002334:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002336:	4805      	ldr	r0, [pc, #20]	; (800234c <MX_USART1_UART_Init+0x4c>)
 8002338:	f002 fb4c 	bl	80049d4 <HAL_UART_Init>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002342:	f7ff fcf3 	bl	8001d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	200003cc 	.word	0x200003cc
 8002350:	40011000 	.word	0x40011000

08002354 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002358:	4b11      	ldr	r3, [pc, #68]	; (80023a0 <MX_USART2_UART_Init+0x4c>)
 800235a:	4a12      	ldr	r2, [pc, #72]	; (80023a4 <MX_USART2_UART_Init+0x50>)
 800235c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800235e:	4b10      	ldr	r3, [pc, #64]	; (80023a0 <MX_USART2_UART_Init+0x4c>)
 8002360:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002364:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002366:	4b0e      	ldr	r3, [pc, #56]	; (80023a0 <MX_USART2_UART_Init+0x4c>)
 8002368:	2200      	movs	r2, #0
 800236a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800236c:	4b0c      	ldr	r3, [pc, #48]	; (80023a0 <MX_USART2_UART_Init+0x4c>)
 800236e:	2200      	movs	r2, #0
 8002370:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002372:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <MX_USART2_UART_Init+0x4c>)
 8002374:	2200      	movs	r2, #0
 8002376:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002378:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <MX_USART2_UART_Init+0x4c>)
 800237a:	220c      	movs	r2, #12
 800237c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800237e:	4b08      	ldr	r3, [pc, #32]	; (80023a0 <MX_USART2_UART_Init+0x4c>)
 8002380:	2200      	movs	r2, #0
 8002382:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002384:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <MX_USART2_UART_Init+0x4c>)
 8002386:	2200      	movs	r2, #0
 8002388:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800238a:	4805      	ldr	r0, [pc, #20]	; (80023a0 <MX_USART2_UART_Init+0x4c>)
 800238c:	f002 fb22 	bl	80049d4 <HAL_UART_Init>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002396:	f7ff fcc9 	bl	8001d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	20000410 	.word	0x20000410
 80023a4:	40004400 	.word	0x40004400

080023a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08c      	sub	sp, #48	; 0x30
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b0:	f107 031c 	add.w	r3, r7, #28
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	605a      	str	r2, [r3, #4]
 80023ba:	609a      	str	r2, [r3, #8]
 80023bc:	60da      	str	r2, [r3, #12]
 80023be:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a36      	ldr	r2, [pc, #216]	; (80024a0 <HAL_UART_MspInit+0xf8>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d12d      	bne.n	8002426 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	61bb      	str	r3, [r7, #24]
 80023ce:	4b35      	ldr	r3, [pc, #212]	; (80024a4 <HAL_UART_MspInit+0xfc>)
 80023d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d2:	4a34      	ldr	r2, [pc, #208]	; (80024a4 <HAL_UART_MspInit+0xfc>)
 80023d4:	f043 0310 	orr.w	r3, r3, #16
 80023d8:	6453      	str	r3, [r2, #68]	; 0x44
 80023da:	4b32      	ldr	r3, [pc, #200]	; (80024a4 <HAL_UART_MspInit+0xfc>)
 80023dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023de:	f003 0310 	and.w	r3, r3, #16
 80023e2:	61bb      	str	r3, [r7, #24]
 80023e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	617b      	str	r3, [r7, #20]
 80023ea:	4b2e      	ldr	r3, [pc, #184]	; (80024a4 <HAL_UART_MspInit+0xfc>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	4a2d      	ldr	r2, [pc, #180]	; (80024a4 <HAL_UART_MspInit+0xfc>)
 80023f0:	f043 0301 	orr.w	r3, r3, #1
 80023f4:	6313      	str	r3, [r2, #48]	; 0x30
 80023f6:	4b2b      	ldr	r3, [pc, #172]	; (80024a4 <HAL_UART_MspInit+0xfc>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	617b      	str	r3, [r7, #20]
 8002400:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002402:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002408:	2302      	movs	r3, #2
 800240a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240c:	2300      	movs	r3, #0
 800240e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002410:	2303      	movs	r3, #3
 8002412:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002414:	2307      	movs	r3, #7
 8002416:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002418:	f107 031c 	add.w	r3, r7, #28
 800241c:	4619      	mov	r1, r3
 800241e:	4822      	ldr	r0, [pc, #136]	; (80024a8 <HAL_UART_MspInit+0x100>)
 8002420:	f000 fce8 	bl	8002df4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002424:	e038      	b.n	8002498 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a20      	ldr	r2, [pc, #128]	; (80024ac <HAL_UART_MspInit+0x104>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d133      	bne.n	8002498 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002430:	2300      	movs	r3, #0
 8002432:	613b      	str	r3, [r7, #16]
 8002434:	4b1b      	ldr	r3, [pc, #108]	; (80024a4 <HAL_UART_MspInit+0xfc>)
 8002436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002438:	4a1a      	ldr	r2, [pc, #104]	; (80024a4 <HAL_UART_MspInit+0xfc>)
 800243a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800243e:	6413      	str	r3, [r2, #64]	; 0x40
 8002440:	4b18      	ldr	r3, [pc, #96]	; (80024a4 <HAL_UART_MspInit+0xfc>)
 8002442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002448:	613b      	str	r3, [r7, #16]
 800244a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800244c:	2300      	movs	r3, #0
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	4b14      	ldr	r3, [pc, #80]	; (80024a4 <HAL_UART_MspInit+0xfc>)
 8002452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002454:	4a13      	ldr	r2, [pc, #76]	; (80024a4 <HAL_UART_MspInit+0xfc>)
 8002456:	f043 0301 	orr.w	r3, r3, #1
 800245a:	6313      	str	r3, [r2, #48]	; 0x30
 800245c:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <HAL_UART_MspInit+0xfc>)
 800245e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002468:	230c      	movs	r3, #12
 800246a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246c:	2302      	movs	r3, #2
 800246e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002470:	2300      	movs	r3, #0
 8002472:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002474:	2303      	movs	r3, #3
 8002476:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002478:	2307      	movs	r3, #7
 800247a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800247c:	f107 031c 	add.w	r3, r7, #28
 8002480:	4619      	mov	r1, r3
 8002482:	4809      	ldr	r0, [pc, #36]	; (80024a8 <HAL_UART_MspInit+0x100>)
 8002484:	f000 fcb6 	bl	8002df4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002488:	2200      	movs	r2, #0
 800248a:	2100      	movs	r1, #0
 800248c:	2026      	movs	r0, #38	; 0x26
 800248e:	f000 fbe8 	bl	8002c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002492:	2026      	movs	r0, #38	; 0x26
 8002494:	f000 fc01 	bl	8002c9a <HAL_NVIC_EnableIRQ>
}
 8002498:	bf00      	nop
 800249a:	3730      	adds	r7, #48	; 0x30
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40011000 	.word	0x40011000
 80024a4:	40023800 	.word	0x40023800
 80024a8:	40020000 	.word	0x40020000
 80024ac:	40004400 	.word	0x40004400

080024b0 <Reset_Handler>:
 80024b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024e8 <LoopFillZerobss+0x12>
 80024b4:	480d      	ldr	r0, [pc, #52]	; (80024ec <LoopFillZerobss+0x16>)
 80024b6:	490e      	ldr	r1, [pc, #56]	; (80024f0 <LoopFillZerobss+0x1a>)
 80024b8:	4a0e      	ldr	r2, [pc, #56]	; (80024f4 <LoopFillZerobss+0x1e>)
 80024ba:	2300      	movs	r3, #0
 80024bc:	e002      	b.n	80024c4 <LoopCopyDataInit>

080024be <CopyDataInit>:
 80024be:	58d4      	ldr	r4, [r2, r3]
 80024c0:	50c4      	str	r4, [r0, r3]
 80024c2:	3304      	adds	r3, #4

080024c4 <LoopCopyDataInit>:
 80024c4:	18c4      	adds	r4, r0, r3
 80024c6:	428c      	cmp	r4, r1
 80024c8:	d3f9      	bcc.n	80024be <CopyDataInit>
 80024ca:	4a0b      	ldr	r2, [pc, #44]	; (80024f8 <LoopFillZerobss+0x22>)
 80024cc:	4c0b      	ldr	r4, [pc, #44]	; (80024fc <LoopFillZerobss+0x26>)
 80024ce:	2300      	movs	r3, #0
 80024d0:	e001      	b.n	80024d6 <LoopFillZerobss>

080024d2 <FillZerobss>:
 80024d2:	6013      	str	r3, [r2, #0]
 80024d4:	3204      	adds	r2, #4

080024d6 <LoopFillZerobss>:
 80024d6:	42a2      	cmp	r2, r4
 80024d8:	d3fb      	bcc.n	80024d2 <FillZerobss>
 80024da:	f7ff feff 	bl	80022dc <SystemInit>
 80024de:	f003 fa47 	bl	8005970 <__libc_init_array>
 80024e2:	f7ff f995 	bl	8001810 <main>
 80024e6:	4770      	bx	lr
 80024e8:	20010000 	.word	0x20010000
 80024ec:	20000000 	.word	0x20000000
 80024f0:	200001dc 	.word	0x200001dc
 80024f4:	080090b8 	.word	0x080090b8
 80024f8:	200001dc 	.word	0x200001dc
 80024fc:	20000468 	.word	0x20000468

08002500 <ADC_IRQHandler>:
 8002500:	e7fe      	b.n	8002500 <ADC_IRQHandler>
	...

08002504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002508:	4b0e      	ldr	r3, [pc, #56]	; (8002544 <HAL_Init+0x40>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a0d      	ldr	r2, [pc, #52]	; (8002544 <HAL_Init+0x40>)
 800250e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002512:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002514:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <HAL_Init+0x40>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a0a      	ldr	r2, [pc, #40]	; (8002544 <HAL_Init+0x40>)
 800251a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800251e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002520:	4b08      	ldr	r3, [pc, #32]	; (8002544 <HAL_Init+0x40>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a07      	ldr	r2, [pc, #28]	; (8002544 <HAL_Init+0x40>)
 8002526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800252a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800252c:	2003      	movs	r0, #3
 800252e:	f000 fb8d 	bl	8002c4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002532:	200f      	movs	r0, #15
 8002534:	f000 f808 	bl	8002548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002538:	f7ff fda6 	bl	8002088 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40023c00 	.word	0x40023c00

08002548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002550:	4b12      	ldr	r3, [pc, #72]	; (800259c <HAL_InitTick+0x54>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	4b12      	ldr	r3, [pc, #72]	; (80025a0 <HAL_InitTick+0x58>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	4619      	mov	r1, r3
 800255a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800255e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002562:	fbb2 f3f3 	udiv	r3, r2, r3
 8002566:	4618      	mov	r0, r3
 8002568:	f000 fba5 	bl	8002cb6 <HAL_SYSTICK_Config>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e00e      	b.n	8002594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b0f      	cmp	r3, #15
 800257a:	d80a      	bhi.n	8002592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800257c:	2200      	movs	r2, #0
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	f04f 30ff 	mov.w	r0, #4294967295
 8002584:	f000 fb6d 	bl	8002c62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002588:	4a06      	ldr	r2, [pc, #24]	; (80025a4 <HAL_InitTick+0x5c>)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800258e:	2300      	movs	r3, #0
 8002590:	e000      	b.n	8002594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
}
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20000000 	.word	0x20000000
 80025a0:	20000008 	.word	0x20000008
 80025a4:	20000004 	.word	0x20000004

080025a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025ac:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <HAL_IncTick+0x20>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	461a      	mov	r2, r3
 80025b2:	4b06      	ldr	r3, [pc, #24]	; (80025cc <HAL_IncTick+0x24>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4413      	add	r3, r2
 80025b8:	4a04      	ldr	r2, [pc, #16]	; (80025cc <HAL_IncTick+0x24>)
 80025ba:	6013      	str	r3, [r2, #0]
}
 80025bc:	bf00      	nop
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	20000008 	.word	0x20000008
 80025cc:	20000454 	.word	0x20000454

080025d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  return uwTick;
 80025d4:	4b03      	ldr	r3, [pc, #12]	; (80025e4 <HAL_GetTick+0x14>)
 80025d6:	681b      	ldr	r3, [r3, #0]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	20000454 	.word	0x20000454

080025e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025f0:	2300      	movs	r3, #0
 80025f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e033      	b.n	8002666 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	2b00      	cmp	r3, #0
 8002604:	d109      	bne.n	800261a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7fe fcf4 	bl	8000ff4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	f003 0310 	and.w	r3, r3, #16
 8002622:	2b00      	cmp	r3, #0
 8002624:	d118      	bne.n	8002658 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800262e:	f023 0302 	bic.w	r3, r3, #2
 8002632:	f043 0202 	orr.w	r2, r3, #2
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 f93a 	bl	80028b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	f023 0303 	bic.w	r3, r3, #3
 800264e:	f043 0201 	orr.w	r2, r3, #1
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	641a      	str	r2, [r3, #64]	; 0x40
 8002656:	e001      	b.n	800265c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002664:	7bfb      	ldrb	r3, [r7, #15]
}
 8002666:	4618      	mov	r0, r3
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
	...

08002670 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800267a:	2300      	movs	r3, #0
 800267c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002684:	2b01      	cmp	r3, #1
 8002686:	d101      	bne.n	800268c <HAL_ADC_ConfigChannel+0x1c>
 8002688:	2302      	movs	r3, #2
 800268a:	e105      	b.n	8002898 <HAL_ADC_ConfigChannel+0x228>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2b09      	cmp	r3, #9
 800269a:	d925      	bls.n	80026e8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68d9      	ldr	r1, [r3, #12]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	461a      	mov	r2, r3
 80026aa:	4613      	mov	r3, r2
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	4413      	add	r3, r2
 80026b0:	3b1e      	subs	r3, #30
 80026b2:	2207      	movs	r2, #7
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	43da      	mvns	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	400a      	ands	r2, r1
 80026c0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68d9      	ldr	r1, [r3, #12]
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	4618      	mov	r0, r3
 80026d4:	4603      	mov	r3, r0
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	4403      	add	r3, r0
 80026da:	3b1e      	subs	r3, #30
 80026dc:	409a      	lsls	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	60da      	str	r2, [r3, #12]
 80026e6:	e022      	b.n	800272e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6919      	ldr	r1, [r3, #16]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	461a      	mov	r2, r3
 80026f6:	4613      	mov	r3, r2
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	4413      	add	r3, r2
 80026fc:	2207      	movs	r2, #7
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43da      	mvns	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	400a      	ands	r2, r1
 800270a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6919      	ldr	r1, [r3, #16]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	689a      	ldr	r2, [r3, #8]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	b29b      	uxth	r3, r3
 800271c:	4618      	mov	r0, r3
 800271e:	4603      	mov	r3, r0
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	4403      	add	r3, r0
 8002724:	409a      	lsls	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b06      	cmp	r3, #6
 8002734:	d824      	bhi.n	8002780 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	4613      	mov	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	3b05      	subs	r3, #5
 8002748:	221f      	movs	r2, #31
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	43da      	mvns	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	400a      	ands	r2, r1
 8002756:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	b29b      	uxth	r3, r3
 8002764:	4618      	mov	r0, r3
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	4613      	mov	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4413      	add	r3, r2
 8002770:	3b05      	subs	r3, #5
 8002772:	fa00 f203 	lsl.w	r2, r0, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	430a      	orrs	r2, r1
 800277c:	635a      	str	r2, [r3, #52]	; 0x34
 800277e:	e04c      	b.n	800281a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	2b0c      	cmp	r3, #12
 8002786:	d824      	bhi.n	80027d2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685a      	ldr	r2, [r3, #4]
 8002792:	4613      	mov	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	3b23      	subs	r3, #35	; 0x23
 800279a:	221f      	movs	r2, #31
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	43da      	mvns	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	400a      	ands	r2, r1
 80027a8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	4618      	mov	r0, r3
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	4613      	mov	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	3b23      	subs	r3, #35	; 0x23
 80027c4:	fa00 f203 	lsl.w	r2, r0, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	430a      	orrs	r2, r1
 80027ce:	631a      	str	r2, [r3, #48]	; 0x30
 80027d0:	e023      	b.n	800281a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685a      	ldr	r2, [r3, #4]
 80027dc:	4613      	mov	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	3b41      	subs	r3, #65	; 0x41
 80027e4:	221f      	movs	r2, #31
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	43da      	mvns	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	400a      	ands	r2, r1
 80027f2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	4618      	mov	r0, r3
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	4613      	mov	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	4413      	add	r3, r2
 800280c:	3b41      	subs	r3, #65	; 0x41
 800280e:	fa00 f203 	lsl.w	r2, r0, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800281a:	4b22      	ldr	r3, [pc, #136]	; (80028a4 <HAL_ADC_ConfigChannel+0x234>)
 800281c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a21      	ldr	r2, [pc, #132]	; (80028a8 <HAL_ADC_ConfigChannel+0x238>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d109      	bne.n	800283c <HAL_ADC_ConfigChannel+0x1cc>
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b12      	cmp	r3, #18
 800282e:	d105      	bne.n	800283c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a19      	ldr	r2, [pc, #100]	; (80028a8 <HAL_ADC_ConfigChannel+0x238>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d123      	bne.n	800288e <HAL_ADC_ConfigChannel+0x21e>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2b10      	cmp	r3, #16
 800284c:	d003      	beq.n	8002856 <HAL_ADC_ConfigChannel+0x1e6>
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2b11      	cmp	r3, #17
 8002854:	d11b      	bne.n	800288e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2b10      	cmp	r3, #16
 8002868:	d111      	bne.n	800288e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800286a:	4b10      	ldr	r3, [pc, #64]	; (80028ac <HAL_ADC_ConfigChannel+0x23c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a10      	ldr	r2, [pc, #64]	; (80028b0 <HAL_ADC_ConfigChannel+0x240>)
 8002870:	fba2 2303 	umull	r2, r3, r2, r3
 8002874:	0c9a      	lsrs	r2, r3, #18
 8002876:	4613      	mov	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002880:	e002      	b.n	8002888 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	3b01      	subs	r3, #1
 8002886:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1f9      	bne.n	8002882 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	40012300 	.word	0x40012300
 80028a8:	40012000 	.word	0x40012000
 80028ac:	20000000 	.word	0x20000000
 80028b0:	431bde83 	.word	0x431bde83

080028b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028bc:	4b79      	ldr	r3, [pc, #484]	; (8002aa4 <ADC_Init+0x1f0>)
 80028be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	431a      	orrs	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6859      	ldr	r1, [r3, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	021a      	lsls	r2, r3, #8
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800290c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6859      	ldr	r1, [r3, #4]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800292e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6899      	ldr	r1, [r3, #8]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68da      	ldr	r2, [r3, #12]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	430a      	orrs	r2, r1
 8002940:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002946:	4a58      	ldr	r2, [pc, #352]	; (8002aa8 <ADC_Init+0x1f4>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d022      	beq.n	8002992 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800295a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6899      	ldr	r1, [r3, #8]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	430a      	orrs	r2, r1
 800296c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800297c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6899      	ldr	r1, [r3, #8]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	430a      	orrs	r2, r1
 800298e:	609a      	str	r2, [r3, #8]
 8002990:	e00f      	b.n	80029b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0202 	bic.w	r2, r2, #2
 80029c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	6899      	ldr	r1, [r3, #8]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	7e1b      	ldrb	r3, [r3, #24]
 80029cc:	005a      	lsls	r2, r3, #1
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	430a      	orrs	r2, r1
 80029d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d01b      	beq.n	8002a18 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	685a      	ldr	r2, [r3, #4]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80029fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6859      	ldr	r1, [r3, #4]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	035a      	lsls	r2, r3, #13
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	605a      	str	r2, [r3, #4]
 8002a16:	e007      	b.n	8002a28 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a26:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a36:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	69db      	ldr	r3, [r3, #28]
 8002a42:	3b01      	subs	r3, #1
 8002a44:	051a      	lsls	r2, r3, #20
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6899      	ldr	r1, [r3, #8]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a6a:	025a      	lsls	r2, r3, #9
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689a      	ldr	r2, [r3, #8]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6899      	ldr	r1, [r3, #8]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	029a      	lsls	r2, r3, #10
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	430a      	orrs	r2, r1
 8002a96:	609a      	str	r2, [r3, #8]
}
 8002a98:	bf00      	nop
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	40012300 	.word	0x40012300
 8002aa8:	0f000001 	.word	0x0f000001

08002aac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002abc:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <__NVIC_SetPriorityGrouping+0x44>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ac8:	4013      	ands	r3, r2
 8002aca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ad4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002adc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ade:	4a04      	ldr	r2, [pc, #16]	; (8002af0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	60d3      	str	r3, [r2, #12]
}
 8002ae4:	bf00      	nop
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	e000ed00 	.word	0xe000ed00

08002af4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002af8:	4b04      	ldr	r3, [pc, #16]	; (8002b0c <__NVIC_GetPriorityGrouping+0x18>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	0a1b      	lsrs	r3, r3, #8
 8002afe:	f003 0307 	and.w	r3, r3, #7
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	e000ed00 	.word	0xe000ed00

08002b10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	db0b      	blt.n	8002b3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b22:	79fb      	ldrb	r3, [r7, #7]
 8002b24:	f003 021f 	and.w	r2, r3, #31
 8002b28:	4907      	ldr	r1, [pc, #28]	; (8002b48 <__NVIC_EnableIRQ+0x38>)
 8002b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2e:	095b      	lsrs	r3, r3, #5
 8002b30:	2001      	movs	r0, #1
 8002b32:	fa00 f202 	lsl.w	r2, r0, r2
 8002b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	e000e100 	.word	0xe000e100

08002b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	6039      	str	r1, [r7, #0]
 8002b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	db0a      	blt.n	8002b76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	490c      	ldr	r1, [pc, #48]	; (8002b98 <__NVIC_SetPriority+0x4c>)
 8002b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6a:	0112      	lsls	r2, r2, #4
 8002b6c:	b2d2      	uxtb	r2, r2
 8002b6e:	440b      	add	r3, r1
 8002b70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b74:	e00a      	b.n	8002b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	4908      	ldr	r1, [pc, #32]	; (8002b9c <__NVIC_SetPriority+0x50>)
 8002b7c:	79fb      	ldrb	r3, [r7, #7]
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	3b04      	subs	r3, #4
 8002b84:	0112      	lsls	r2, r2, #4
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	440b      	add	r3, r1
 8002b8a:	761a      	strb	r2, [r3, #24]
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	e000e100 	.word	0xe000e100
 8002b9c:	e000ed00 	.word	0xe000ed00

08002ba0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b089      	sub	sp, #36	; 0x24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f003 0307 	and.w	r3, r3, #7
 8002bb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	f1c3 0307 	rsb	r3, r3, #7
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	bf28      	it	cs
 8002bbe:	2304      	movcs	r3, #4
 8002bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	3304      	adds	r3, #4
 8002bc6:	2b06      	cmp	r3, #6
 8002bc8:	d902      	bls.n	8002bd0 <NVIC_EncodePriority+0x30>
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	3b03      	subs	r3, #3
 8002bce:	e000      	b.n	8002bd2 <NVIC_EncodePriority+0x32>
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	43da      	mvns	r2, r3
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	401a      	ands	r2, r3
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002be8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf2:	43d9      	mvns	r1, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf8:	4313      	orrs	r3, r2
         );
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3724      	adds	r7, #36	; 0x24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
	...

08002c08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3b01      	subs	r3, #1
 8002c14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c18:	d301      	bcc.n	8002c1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e00f      	b.n	8002c3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c1e:	4a0a      	ldr	r2, [pc, #40]	; (8002c48 <SysTick_Config+0x40>)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3b01      	subs	r3, #1
 8002c24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c26:	210f      	movs	r1, #15
 8002c28:	f04f 30ff 	mov.w	r0, #4294967295
 8002c2c:	f7ff ff8e 	bl	8002b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c30:	4b05      	ldr	r3, [pc, #20]	; (8002c48 <SysTick_Config+0x40>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c36:	4b04      	ldr	r3, [pc, #16]	; (8002c48 <SysTick_Config+0x40>)
 8002c38:	2207      	movs	r2, #7
 8002c3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	e000e010 	.word	0xe000e010

08002c4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7ff ff29 	bl	8002aac <__NVIC_SetPriorityGrouping>
}
 8002c5a:	bf00      	nop
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b086      	sub	sp, #24
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	4603      	mov	r3, r0
 8002c6a:	60b9      	str	r1, [r7, #8]
 8002c6c:	607a      	str	r2, [r7, #4]
 8002c6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c74:	f7ff ff3e 	bl	8002af4 <__NVIC_GetPriorityGrouping>
 8002c78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	68b9      	ldr	r1, [r7, #8]
 8002c7e:	6978      	ldr	r0, [r7, #20]
 8002c80:	f7ff ff8e 	bl	8002ba0 <NVIC_EncodePriority>
 8002c84:	4602      	mov	r2, r0
 8002c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c8a:	4611      	mov	r1, r2
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff ff5d 	bl	8002b4c <__NVIC_SetPriority>
}
 8002c92:	bf00      	nop
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b082      	sub	sp, #8
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff ff31 	bl	8002b10 <__NVIC_EnableIRQ>
}
 8002cae:	bf00      	nop
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b082      	sub	sp, #8
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7ff ffa2 	bl	8002c08 <SysTick_Config>
 8002cc4:	4603      	mov	r3, r0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b084      	sub	sp, #16
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cda:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002cdc:	f7ff fc78 	bl	80025d0 <HAL_GetTick>
 8002ce0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d008      	beq.n	8002d00 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2280      	movs	r2, #128	; 0x80
 8002cf2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e052      	b.n	8002da6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0216 	bic.w	r2, r2, #22
 8002d0e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	695a      	ldr	r2, [r3, #20]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d1e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d103      	bne.n	8002d30 <HAL_DMA_Abort+0x62>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d007      	beq.n	8002d40 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0208 	bic.w	r2, r2, #8
 8002d3e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 0201 	bic.w	r2, r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d50:	e013      	b.n	8002d7a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d52:	f7ff fc3d 	bl	80025d0 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b05      	cmp	r3, #5
 8002d5e:	d90c      	bls.n	8002d7a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2220      	movs	r2, #32
 8002d64:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2203      	movs	r2, #3
 8002d6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e015      	b.n	8002da6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1e4      	bne.n	8002d52 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d8c:	223f      	movs	r2, #63	; 0x3f
 8002d8e:	409a      	lsls	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d004      	beq.n	8002dcc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2280      	movs	r2, #128	; 0x80
 8002dc6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e00c      	b.n	8002de6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2205      	movs	r2, #5
 8002dd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0201 	bic.w	r2, r2, #1
 8002de2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
	...

08002df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b089      	sub	sp, #36	; 0x24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e02:	2300      	movs	r3, #0
 8002e04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e06:	2300      	movs	r3, #0
 8002e08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	61fb      	str	r3, [r7, #28]
 8002e0e:	e159      	b.n	80030c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e10:	2201      	movs	r2, #1
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	4013      	ands	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	f040 8148 	bne.w	80030be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f003 0303 	and.w	r3, r3, #3
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d005      	beq.n	8002e46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d130      	bne.n	8002ea8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	2203      	movs	r2, #3
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	43db      	mvns	r3, r3
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	68da      	ldr	r2, [r3, #12]
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	43db      	mvns	r3, r3
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	091b      	lsrs	r3, r3, #4
 8002e92:	f003 0201 	and.w	r2, r3, #1
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f003 0303 	and.w	r3, r3, #3
 8002eb0:	2b03      	cmp	r3, #3
 8002eb2:	d017      	beq.n	8002ee4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	2203      	movs	r2, #3
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f003 0303 	and.w	r3, r3, #3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d123      	bne.n	8002f38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	08da      	lsrs	r2, r3, #3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3208      	adds	r2, #8
 8002ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	f003 0307 	and.w	r3, r3, #7
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	220f      	movs	r2, #15
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4013      	ands	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	691a      	ldr	r2, [r3, #16]
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	08da      	lsrs	r2, r3, #3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	3208      	adds	r2, #8
 8002f32:	69b9      	ldr	r1, [r7, #24]
 8002f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	2203      	movs	r2, #3
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f003 0203 	and.w	r2, r3, #3
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f000 80a2 	beq.w	80030be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60fb      	str	r3, [r7, #12]
 8002f7e:	4b57      	ldr	r3, [pc, #348]	; (80030dc <HAL_GPIO_Init+0x2e8>)
 8002f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f82:	4a56      	ldr	r2, [pc, #344]	; (80030dc <HAL_GPIO_Init+0x2e8>)
 8002f84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f88:	6453      	str	r3, [r2, #68]	; 0x44
 8002f8a:	4b54      	ldr	r3, [pc, #336]	; (80030dc <HAL_GPIO_Init+0x2e8>)
 8002f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f92:	60fb      	str	r3, [r7, #12]
 8002f94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f96:	4a52      	ldr	r2, [pc, #328]	; (80030e0 <HAL_GPIO_Init+0x2ec>)
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	089b      	lsrs	r3, r3, #2
 8002f9c:	3302      	adds	r3, #2
 8002f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	f003 0303 	and.w	r3, r3, #3
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	220f      	movs	r2, #15
 8002fae:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a49      	ldr	r2, [pc, #292]	; (80030e4 <HAL_GPIO_Init+0x2f0>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d019      	beq.n	8002ff6 <HAL_GPIO_Init+0x202>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a48      	ldr	r2, [pc, #288]	; (80030e8 <HAL_GPIO_Init+0x2f4>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d013      	beq.n	8002ff2 <HAL_GPIO_Init+0x1fe>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a47      	ldr	r2, [pc, #284]	; (80030ec <HAL_GPIO_Init+0x2f8>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d00d      	beq.n	8002fee <HAL_GPIO_Init+0x1fa>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a46      	ldr	r2, [pc, #280]	; (80030f0 <HAL_GPIO_Init+0x2fc>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d007      	beq.n	8002fea <HAL_GPIO_Init+0x1f6>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a45      	ldr	r2, [pc, #276]	; (80030f4 <HAL_GPIO_Init+0x300>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d101      	bne.n	8002fe6 <HAL_GPIO_Init+0x1f2>
 8002fe2:	2304      	movs	r3, #4
 8002fe4:	e008      	b.n	8002ff8 <HAL_GPIO_Init+0x204>
 8002fe6:	2307      	movs	r3, #7
 8002fe8:	e006      	b.n	8002ff8 <HAL_GPIO_Init+0x204>
 8002fea:	2303      	movs	r3, #3
 8002fec:	e004      	b.n	8002ff8 <HAL_GPIO_Init+0x204>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	e002      	b.n	8002ff8 <HAL_GPIO_Init+0x204>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e000      	b.n	8002ff8 <HAL_GPIO_Init+0x204>
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	69fa      	ldr	r2, [r7, #28]
 8002ffa:	f002 0203 	and.w	r2, r2, #3
 8002ffe:	0092      	lsls	r2, r2, #2
 8003000:	4093      	lsls	r3, r2
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4313      	orrs	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003008:	4935      	ldr	r1, [pc, #212]	; (80030e0 <HAL_GPIO_Init+0x2ec>)
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	089b      	lsrs	r3, r3, #2
 800300e:	3302      	adds	r3, #2
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003016:	4b38      	ldr	r3, [pc, #224]	; (80030f8 <HAL_GPIO_Init+0x304>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	43db      	mvns	r3, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4013      	ands	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	4313      	orrs	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800303a:	4a2f      	ldr	r2, [pc, #188]	; (80030f8 <HAL_GPIO_Init+0x304>)
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003040:	4b2d      	ldr	r3, [pc, #180]	; (80030f8 <HAL_GPIO_Init+0x304>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	43db      	mvns	r3, r3
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4013      	ands	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d003      	beq.n	8003064 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	4313      	orrs	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003064:	4a24      	ldr	r2, [pc, #144]	; (80030f8 <HAL_GPIO_Init+0x304>)
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800306a:	4b23      	ldr	r3, [pc, #140]	; (80030f8 <HAL_GPIO_Init+0x304>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	43db      	mvns	r3, r3
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	4013      	ands	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	4313      	orrs	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800308e:	4a1a      	ldr	r2, [pc, #104]	; (80030f8 <HAL_GPIO_Init+0x304>)
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003094:	4b18      	ldr	r3, [pc, #96]	; (80030f8 <HAL_GPIO_Init+0x304>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	43db      	mvns	r3, r3
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	4013      	ands	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030b8:	4a0f      	ldr	r2, [pc, #60]	; (80030f8 <HAL_GPIO_Init+0x304>)
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	3301      	adds	r3, #1
 80030c2:	61fb      	str	r3, [r7, #28]
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	2b0f      	cmp	r3, #15
 80030c8:	f67f aea2 	bls.w	8002e10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030cc:	bf00      	nop
 80030ce:	bf00      	nop
 80030d0:	3724      	adds	r7, #36	; 0x24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	40023800 	.word	0x40023800
 80030e0:	40013800 	.word	0x40013800
 80030e4:	40020000 	.word	0x40020000
 80030e8:	40020400 	.word	0x40020400
 80030ec:	40020800 	.word	0x40020800
 80030f0:	40020c00 	.word	0x40020c00
 80030f4:	40021000 	.word	0x40021000
 80030f8:	40013c00 	.word	0x40013c00

080030fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	460b      	mov	r3, r1
 8003106:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	691a      	ldr	r2, [r3, #16]
 800310c:	887b      	ldrh	r3, [r7, #2]
 800310e:	4013      	ands	r3, r2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d002      	beq.n	800311a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003114:	2301      	movs	r3, #1
 8003116:	73fb      	strb	r3, [r7, #15]
 8003118:	e001      	b.n	800311e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800311a:	2300      	movs	r3, #0
 800311c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800311e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003120:	4618      	mov	r0, r3
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	460b      	mov	r3, r1
 8003136:	807b      	strh	r3, [r7, #2]
 8003138:	4613      	mov	r3, r2
 800313a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800313c:	787b      	ldrb	r3, [r7, #1]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d003      	beq.n	800314a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003142:	887a      	ldrh	r2, [r7, #2]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003148:	e003      	b.n	8003152 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800314a:	887b      	ldrh	r3, [r7, #2]
 800314c:	041a      	lsls	r2, r3, #16
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	619a      	str	r2, [r3, #24]
}
 8003152:	bf00      	nop
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800315e:	b480      	push	{r7}
 8003160:	b085      	sub	sp, #20
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
 8003166:	460b      	mov	r3, r1
 8003168:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003170:	887a      	ldrh	r2, [r7, #2]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	4013      	ands	r3, r2
 8003176:	041a      	lsls	r2, r3, #16
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	43d9      	mvns	r1, r3
 800317c:	887b      	ldrh	r3, [r7, #2]
 800317e:	400b      	ands	r3, r1
 8003180:	431a      	orrs	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	619a      	str	r2, [r3, #24]
}
 8003186:	bf00      	nop
 8003188:	3714      	adds	r7, #20
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
	...

08003194 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	4603      	mov	r3, r0
 800319c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800319e:	4b08      	ldr	r3, [pc, #32]	; (80031c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031a0:	695a      	ldr	r2, [r3, #20]
 80031a2:	88fb      	ldrh	r3, [r7, #6]
 80031a4:	4013      	ands	r3, r2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d006      	beq.n	80031b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031aa:	4a05      	ldr	r2, [pc, #20]	; (80031c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031ac:	88fb      	ldrh	r3, [r7, #6]
 80031ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031b0:	88fb      	ldrh	r3, [r7, #6]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fe fd84 	bl	8001cc0 <HAL_GPIO_EXTI_Callback>
  }
}
 80031b8:	bf00      	nop
 80031ba:	3708      	adds	r7, #8
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40013c00 	.word	0x40013c00

080031c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e12b      	b.n	800342e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d106      	bne.n	80031f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7fe f9ea 	bl	80015c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2224      	movs	r2, #36	; 0x24
 80031f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 0201 	bic.w	r2, r2, #1
 8003206:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003216:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003226:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003228:	f001 fbac 	bl	8004984 <HAL_RCC_GetPCLK1Freq>
 800322c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	4a81      	ldr	r2, [pc, #516]	; (8003438 <HAL_I2C_Init+0x274>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d807      	bhi.n	8003248 <HAL_I2C_Init+0x84>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4a80      	ldr	r2, [pc, #512]	; (800343c <HAL_I2C_Init+0x278>)
 800323c:	4293      	cmp	r3, r2
 800323e:	bf94      	ite	ls
 8003240:	2301      	movls	r3, #1
 8003242:	2300      	movhi	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	e006      	b.n	8003256 <HAL_I2C_Init+0x92>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4a7d      	ldr	r2, [pc, #500]	; (8003440 <HAL_I2C_Init+0x27c>)
 800324c:	4293      	cmp	r3, r2
 800324e:	bf94      	ite	ls
 8003250:	2301      	movls	r3, #1
 8003252:	2300      	movhi	r3, #0
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e0e7      	b.n	800342e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	4a78      	ldr	r2, [pc, #480]	; (8003444 <HAL_I2C_Init+0x280>)
 8003262:	fba2 2303 	umull	r2, r3, r2, r3
 8003266:	0c9b      	lsrs	r3, r3, #18
 8003268:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	430a      	orrs	r2, r1
 800327c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	4a6a      	ldr	r2, [pc, #424]	; (8003438 <HAL_I2C_Init+0x274>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d802      	bhi.n	8003298 <HAL_I2C_Init+0xd4>
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	3301      	adds	r3, #1
 8003296:	e009      	b.n	80032ac <HAL_I2C_Init+0xe8>
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800329e:	fb02 f303 	mul.w	r3, r2, r3
 80032a2:	4a69      	ldr	r2, [pc, #420]	; (8003448 <HAL_I2C_Init+0x284>)
 80032a4:	fba2 2303 	umull	r2, r3, r2, r3
 80032a8:	099b      	lsrs	r3, r3, #6
 80032aa:	3301      	adds	r3, #1
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	6812      	ldr	r2, [r2, #0]
 80032b0:	430b      	orrs	r3, r1
 80032b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80032be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	495c      	ldr	r1, [pc, #368]	; (8003438 <HAL_I2C_Init+0x274>)
 80032c8:	428b      	cmp	r3, r1
 80032ca:	d819      	bhi.n	8003300 <HAL_I2C_Init+0x13c>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	1e59      	subs	r1, r3, #1
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80032da:	1c59      	adds	r1, r3, #1
 80032dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80032e0:	400b      	ands	r3, r1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00a      	beq.n	80032fc <HAL_I2C_Init+0x138>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	1e59      	subs	r1, r3, #1
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80032f4:	3301      	adds	r3, #1
 80032f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032fa:	e051      	b.n	80033a0 <HAL_I2C_Init+0x1dc>
 80032fc:	2304      	movs	r3, #4
 80032fe:	e04f      	b.n	80033a0 <HAL_I2C_Init+0x1dc>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d111      	bne.n	800332c <HAL_I2C_Init+0x168>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	1e58      	subs	r0, r3, #1
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6859      	ldr	r1, [r3, #4]
 8003310:	460b      	mov	r3, r1
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	440b      	add	r3, r1
 8003316:	fbb0 f3f3 	udiv	r3, r0, r3
 800331a:	3301      	adds	r3, #1
 800331c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003320:	2b00      	cmp	r3, #0
 8003322:	bf0c      	ite	eq
 8003324:	2301      	moveq	r3, #1
 8003326:	2300      	movne	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	e012      	b.n	8003352 <HAL_I2C_Init+0x18e>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	1e58      	subs	r0, r3, #1
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6859      	ldr	r1, [r3, #4]
 8003334:	460b      	mov	r3, r1
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	0099      	lsls	r1, r3, #2
 800333c:	440b      	add	r3, r1
 800333e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003342:	3301      	adds	r3, #1
 8003344:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003348:	2b00      	cmp	r3, #0
 800334a:	bf0c      	ite	eq
 800334c:	2301      	moveq	r3, #1
 800334e:	2300      	movne	r3, #0
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <HAL_I2C_Init+0x196>
 8003356:	2301      	movs	r3, #1
 8003358:	e022      	b.n	80033a0 <HAL_I2C_Init+0x1dc>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10e      	bne.n	8003380 <HAL_I2C_Init+0x1bc>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	1e58      	subs	r0, r3, #1
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6859      	ldr	r1, [r3, #4]
 800336a:	460b      	mov	r3, r1
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	440b      	add	r3, r1
 8003370:	fbb0 f3f3 	udiv	r3, r0, r3
 8003374:	3301      	adds	r3, #1
 8003376:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800337a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800337e:	e00f      	b.n	80033a0 <HAL_I2C_Init+0x1dc>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	1e58      	subs	r0, r3, #1
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6859      	ldr	r1, [r3, #4]
 8003388:	460b      	mov	r3, r1
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	440b      	add	r3, r1
 800338e:	0099      	lsls	r1, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	fbb0 f3f3 	udiv	r3, r0, r3
 8003396:	3301      	adds	r3, #1
 8003398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800339c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033a0:	6879      	ldr	r1, [r7, #4]
 80033a2:	6809      	ldr	r1, [r1, #0]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69da      	ldr	r2, [r3, #28]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	431a      	orrs	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80033ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	6911      	ldr	r1, [r2, #16]
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	68d2      	ldr	r2, [r2, #12]
 80033da:	4311      	orrs	r1, r2
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	6812      	ldr	r2, [r2, #0]
 80033e0:	430b      	orrs	r3, r1
 80033e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	695a      	ldr	r2, [r3, #20]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	431a      	orrs	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f042 0201 	orr.w	r2, r2, #1
 800340e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2220      	movs	r2, #32
 800341a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	000186a0 	.word	0x000186a0
 800343c:	001e847f 	.word	0x001e847f
 8003440:	003d08ff 	.word	0x003d08ff
 8003444:	431bde83 	.word	0x431bde83
 8003448:	10624dd3 	.word	0x10624dd3

0800344c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b088      	sub	sp, #32
 8003450:	af02      	add	r7, sp, #8
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	4608      	mov	r0, r1
 8003456:	4611      	mov	r1, r2
 8003458:	461a      	mov	r2, r3
 800345a:	4603      	mov	r3, r0
 800345c:	817b      	strh	r3, [r7, #10]
 800345e:	460b      	mov	r3, r1
 8003460:	813b      	strh	r3, [r7, #8]
 8003462:	4613      	mov	r3, r2
 8003464:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003466:	f7ff f8b3 	bl	80025d0 <HAL_GetTick>
 800346a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b20      	cmp	r3, #32
 8003476:	f040 80d9 	bne.w	800362c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	2319      	movs	r3, #25
 8003480:	2201      	movs	r2, #1
 8003482:	496d      	ldr	r1, [pc, #436]	; (8003638 <HAL_I2C_Mem_Write+0x1ec>)
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f000 fc7f 	bl	8003d88 <I2C_WaitOnFlagUntilTimeout>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003490:	2302      	movs	r3, #2
 8003492:	e0cc      	b.n	800362e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800349a:	2b01      	cmp	r3, #1
 800349c:	d101      	bne.n	80034a2 <HAL_I2C_Mem_Write+0x56>
 800349e:	2302      	movs	r3, #2
 80034a0:	e0c5      	b.n	800362e <HAL_I2C_Mem_Write+0x1e2>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d007      	beq.n	80034c8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f042 0201 	orr.w	r2, r2, #1
 80034c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2221      	movs	r2, #33	; 0x21
 80034dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2240      	movs	r2, #64	; 0x40
 80034e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6a3a      	ldr	r2, [r7, #32]
 80034f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80034f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034fe:	b29a      	uxth	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	4a4d      	ldr	r2, [pc, #308]	; (800363c <HAL_I2C_Mem_Write+0x1f0>)
 8003508:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800350a:	88f8      	ldrh	r0, [r7, #6]
 800350c:	893a      	ldrh	r2, [r7, #8]
 800350e:	8979      	ldrh	r1, [r7, #10]
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	9301      	str	r3, [sp, #4]
 8003514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	4603      	mov	r3, r0
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f000 fab6 	bl	8003a8c <I2C_RequestMemoryWrite>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d052      	beq.n	80035cc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e081      	b.n	800362e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f000 fd00 	bl	8003f34 <I2C_WaitOnTXEFlagUntilTimeout>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00d      	beq.n	8003556 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	2b04      	cmp	r3, #4
 8003540:	d107      	bne.n	8003552 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003550:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e06b      	b.n	800362e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355a:	781a      	ldrb	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003566:	1c5a      	adds	r2, r3, #1
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003570:	3b01      	subs	r3, #1
 8003572:	b29a      	uxth	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800357c:	b29b      	uxth	r3, r3
 800357e:	3b01      	subs	r3, #1
 8003580:	b29a      	uxth	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b04      	cmp	r3, #4
 8003592:	d11b      	bne.n	80035cc <HAL_I2C_Mem_Write+0x180>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003598:	2b00      	cmp	r3, #0
 800359a:	d017      	beq.n	80035cc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a0:	781a      	ldrb	r2, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	1c5a      	adds	r2, r3, #1
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b6:	3b01      	subs	r3, #1
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	3b01      	subs	r3, #1
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1aa      	bne.n	800352a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f000 fcec 	bl	8003fb6 <I2C_WaitOnBTFFlagUntilTimeout>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00d      	beq.n	8003600 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e8:	2b04      	cmp	r3, #4
 80035ea:	d107      	bne.n	80035fc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035fa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e016      	b.n	800362e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800360e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2220      	movs	r2, #32
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003628:	2300      	movs	r3, #0
 800362a:	e000      	b.n	800362e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800362c:	2302      	movs	r3, #2
  }
}
 800362e:	4618      	mov	r0, r3
 8003630:	3718      	adds	r7, #24
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	00100002 	.word	0x00100002
 800363c:	ffff0000 	.word	0xffff0000

08003640 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b08c      	sub	sp, #48	; 0x30
 8003644:	af02      	add	r7, sp, #8
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	4608      	mov	r0, r1
 800364a:	4611      	mov	r1, r2
 800364c:	461a      	mov	r2, r3
 800364e:	4603      	mov	r3, r0
 8003650:	817b      	strh	r3, [r7, #10]
 8003652:	460b      	mov	r3, r1
 8003654:	813b      	strh	r3, [r7, #8]
 8003656:	4613      	mov	r3, r2
 8003658:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800365a:	f7fe ffb9 	bl	80025d0 <HAL_GetTick>
 800365e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b20      	cmp	r3, #32
 800366a:	f040 8208 	bne.w	8003a7e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800366e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003670:	9300      	str	r3, [sp, #0]
 8003672:	2319      	movs	r3, #25
 8003674:	2201      	movs	r2, #1
 8003676:	497b      	ldr	r1, [pc, #492]	; (8003864 <HAL_I2C_Mem_Read+0x224>)
 8003678:	68f8      	ldr	r0, [r7, #12]
 800367a:	f000 fb85 	bl	8003d88 <I2C_WaitOnFlagUntilTimeout>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003684:	2302      	movs	r3, #2
 8003686:	e1fb      	b.n	8003a80 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800368e:	2b01      	cmp	r3, #1
 8003690:	d101      	bne.n	8003696 <HAL_I2C_Mem_Read+0x56>
 8003692:	2302      	movs	r3, #2
 8003694:	e1f4      	b.n	8003a80 <HAL_I2C_Mem_Read+0x440>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d007      	beq.n	80036bc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f042 0201 	orr.w	r2, r2, #1
 80036ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2222      	movs	r2, #34	; 0x22
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2240      	movs	r2, #64	; 0x40
 80036d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80036ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4a5b      	ldr	r2, [pc, #364]	; (8003868 <HAL_I2C_Mem_Read+0x228>)
 80036fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036fe:	88f8      	ldrh	r0, [r7, #6]
 8003700:	893a      	ldrh	r2, [r7, #8]
 8003702:	8979      	ldrh	r1, [r7, #10]
 8003704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003706:	9301      	str	r3, [sp, #4]
 8003708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370a:	9300      	str	r3, [sp, #0]
 800370c:	4603      	mov	r3, r0
 800370e:	68f8      	ldr	r0, [r7, #12]
 8003710:	f000 fa52 	bl	8003bb8 <I2C_RequestMemoryRead>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e1b0      	b.n	8003a80 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003722:	2b00      	cmp	r3, #0
 8003724:	d113      	bne.n	800374e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003726:	2300      	movs	r3, #0
 8003728:	623b      	str	r3, [r7, #32]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	623b      	str	r3, [r7, #32]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	623b      	str	r3, [r7, #32]
 800373a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	e184      	b.n	8003a58 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003752:	2b01      	cmp	r3, #1
 8003754:	d11b      	bne.n	800378e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003764:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003766:	2300      	movs	r3, #0
 8003768:	61fb      	str	r3, [r7, #28]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	61fb      	str	r3, [r7, #28]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	61fb      	str	r3, [r7, #28]
 800377a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	e164      	b.n	8003a58 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003792:	2b02      	cmp	r3, #2
 8003794:	d11b      	bne.n	80037ce <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037a4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037b6:	2300      	movs	r3, #0
 80037b8:	61bb      	str	r3, [r7, #24]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	61bb      	str	r3, [r7, #24]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	61bb      	str	r3, [r7, #24]
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	e144      	b.n	8003a58 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ce:	2300      	movs	r3, #0
 80037d0:	617b      	str	r3, [r7, #20]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	617b      	str	r3, [r7, #20]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	617b      	str	r3, [r7, #20]
 80037e2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80037e4:	e138      	b.n	8003a58 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ea:	2b03      	cmp	r3, #3
 80037ec:	f200 80f1 	bhi.w	80039d2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d123      	bne.n	8003840 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f000 fc1b 	bl	8004038 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e139      	b.n	8003a80 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	691a      	ldr	r2, [r3, #16]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	1c5a      	adds	r2, r3, #1
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003828:	3b01      	subs	r3, #1
 800382a:	b29a      	uxth	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003834:	b29b      	uxth	r3, r3
 8003836:	3b01      	subs	r3, #1
 8003838:	b29a      	uxth	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800383e:	e10b      	b.n	8003a58 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003844:	2b02      	cmp	r3, #2
 8003846:	d14e      	bne.n	80038e6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384e:	2200      	movs	r2, #0
 8003850:	4906      	ldr	r1, [pc, #24]	; (800386c <HAL_I2C_Mem_Read+0x22c>)
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 fa98 	bl	8003d88 <I2C_WaitOnFlagUntilTimeout>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d008      	beq.n	8003870 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e10e      	b.n	8003a80 <HAL_I2C_Mem_Read+0x440>
 8003862:	bf00      	nop
 8003864:	00100002 	.word	0x00100002
 8003868:	ffff0000 	.word	0xffff0000
 800386c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800387e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	691a      	ldr	r2, [r3, #16]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388a:	b2d2      	uxtb	r2, r2
 800388c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003892:	1c5a      	adds	r2, r3, #1
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800389c:	3b01      	subs	r3, #1
 800389e:	b29a      	uxth	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	3b01      	subs	r3, #1
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	691a      	ldr	r2, [r3, #16]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038bc:	b2d2      	uxtb	r2, r2
 80038be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	1c5a      	adds	r2, r3, #1
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ce:	3b01      	subs	r3, #1
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038da:	b29b      	uxth	r3, r3
 80038dc:	3b01      	subs	r3, #1
 80038de:	b29a      	uxth	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038e4:	e0b8      	b.n	8003a58 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ec:	2200      	movs	r2, #0
 80038ee:	4966      	ldr	r1, [pc, #408]	; (8003a88 <HAL_I2C_Mem_Read+0x448>)
 80038f0:	68f8      	ldr	r0, [r7, #12]
 80038f2:	f000 fa49 	bl	8003d88 <I2C_WaitOnFlagUntilTimeout>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e0bf      	b.n	8003a80 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800390e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	691a      	ldr	r2, [r3, #16]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003922:	1c5a      	adds	r2, r3, #1
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800392c:	3b01      	subs	r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003938:	b29b      	uxth	r3, r3
 800393a:	3b01      	subs	r3, #1
 800393c:	b29a      	uxth	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003948:	2200      	movs	r2, #0
 800394a:	494f      	ldr	r1, [pc, #316]	; (8003a88 <HAL_I2C_Mem_Read+0x448>)
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 fa1b 	bl	8003d88 <I2C_WaitOnFlagUntilTimeout>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e091      	b.n	8003a80 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800396a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	691a      	ldr	r2, [r3, #16]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003976:	b2d2      	uxtb	r2, r2
 8003978:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	1c5a      	adds	r2, r3, #1
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003988:	3b01      	subs	r3, #1
 800398a:	b29a      	uxth	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003994:	b29b      	uxth	r3, r3
 8003996:	3b01      	subs	r3, #1
 8003998:	b29a      	uxth	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	691a      	ldr	r2, [r3, #16]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a8:	b2d2      	uxtb	r2, r2
 80039aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b0:	1c5a      	adds	r2, r3, #1
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ba:	3b01      	subs	r3, #1
 80039bc:	b29a      	uxth	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039d0:	e042      	b.n	8003a58 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f000 fb2e 	bl	8004038 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e04c      	b.n	8003a80 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	691a      	ldr	r2, [r3, #16]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	b2d2      	uxtb	r2, r2
 80039f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	1c5a      	adds	r2, r3, #1
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a02:	3b01      	subs	r3, #1
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	3b01      	subs	r3, #1
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	f003 0304 	and.w	r3, r3, #4
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	d118      	bne.n	8003a58 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	691a      	ldr	r2, [r3, #16]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a30:	b2d2      	uxtb	r2, r2
 8003a32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	1c5a      	adds	r2, r3, #1
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a42:	3b01      	subs	r3, #1
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	3b01      	subs	r3, #1
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f47f aec2 	bne.w	80037e6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2220      	movs	r2, #32
 8003a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	e000      	b.n	8003a80 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003a7e:	2302      	movs	r3, #2
  }
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3728      	adds	r7, #40	; 0x28
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	00010004 	.word	0x00010004

08003a8c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b088      	sub	sp, #32
 8003a90:	af02      	add	r7, sp, #8
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	4608      	mov	r0, r1
 8003a96:	4611      	mov	r1, r2
 8003a98:	461a      	mov	r2, r3
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	817b      	strh	r3, [r7, #10]
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	813b      	strh	r3, [r7, #8]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ab4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	6a3b      	ldr	r3, [r7, #32]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f000 f960 	bl	8003d88 <I2C_WaitOnFlagUntilTimeout>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00d      	beq.n	8003aea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003adc:	d103      	bne.n	8003ae6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ae4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e05f      	b.n	8003baa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003aea:	897b      	ldrh	r3, [r7, #10]
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	461a      	mov	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003af8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afc:	6a3a      	ldr	r2, [r7, #32]
 8003afe:	492d      	ldr	r1, [pc, #180]	; (8003bb4 <I2C_RequestMemoryWrite+0x128>)
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f000 f998 	bl	8003e36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d001      	beq.n	8003b10 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e04c      	b.n	8003baa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b10:	2300      	movs	r3, #0
 8003b12:	617b      	str	r3, [r7, #20]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	617b      	str	r3, [r7, #20]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	617b      	str	r3, [r7, #20]
 8003b24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b28:	6a39      	ldr	r1, [r7, #32]
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f000 fa02 	bl	8003f34 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00d      	beq.n	8003b52 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	d107      	bne.n	8003b4e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e02b      	b.n	8003baa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b52:	88fb      	ldrh	r3, [r7, #6]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d105      	bne.n	8003b64 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b58:	893b      	ldrh	r3, [r7, #8]
 8003b5a:	b2da      	uxtb	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	611a      	str	r2, [r3, #16]
 8003b62:	e021      	b.n	8003ba8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b64:	893b      	ldrh	r3, [r7, #8]
 8003b66:	0a1b      	lsrs	r3, r3, #8
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b74:	6a39      	ldr	r1, [r7, #32]
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f000 f9dc 	bl	8003f34 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00d      	beq.n	8003b9e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	2b04      	cmp	r3, #4
 8003b88:	d107      	bne.n	8003b9a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e005      	b.n	8003baa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b9e:	893b      	ldrh	r3, [r7, #8]
 8003ba0:	b2da      	uxtb	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3718      	adds	r7, #24
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	00010002 	.word	0x00010002

08003bb8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b088      	sub	sp, #32
 8003bbc:	af02      	add	r7, sp, #8
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	4608      	mov	r0, r1
 8003bc2:	4611      	mov	r1, r2
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	817b      	strh	r3, [r7, #10]
 8003bca:	460b      	mov	r3, r1
 8003bcc:	813b      	strh	r3, [r7, #8]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003be0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bf0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	6a3b      	ldr	r3, [r7, #32]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f000 f8c2 	bl	8003d88 <I2C_WaitOnFlagUntilTimeout>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00d      	beq.n	8003c26 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c18:	d103      	bne.n	8003c22 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c20:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e0aa      	b.n	8003d7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c26:	897b      	ldrh	r3, [r7, #10]
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c34:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c38:	6a3a      	ldr	r2, [r7, #32]
 8003c3a:	4952      	ldr	r1, [pc, #328]	; (8003d84 <I2C_RequestMemoryRead+0x1cc>)
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f000 f8fa 	bl	8003e36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d001      	beq.n	8003c4c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e097      	b.n	8003d7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	617b      	str	r3, [r7, #20]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	617b      	str	r3, [r7, #20]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	617b      	str	r3, [r7, #20]
 8003c60:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c64:	6a39      	ldr	r1, [r7, #32]
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 f964 	bl	8003f34 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00d      	beq.n	8003c8e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	d107      	bne.n	8003c8a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c88:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e076      	b.n	8003d7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c8e:	88fb      	ldrh	r3, [r7, #6]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d105      	bne.n	8003ca0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c94:	893b      	ldrh	r3, [r7, #8]
 8003c96:	b2da      	uxtb	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	611a      	str	r2, [r3, #16]
 8003c9e:	e021      	b.n	8003ce4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ca0:	893b      	ldrh	r3, [r7, #8]
 8003ca2:	0a1b      	lsrs	r3, r3, #8
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	b2da      	uxtb	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb0:	6a39      	ldr	r1, [r7, #32]
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f000 f93e 	bl	8003f34 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00d      	beq.n	8003cda <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	2b04      	cmp	r3, #4
 8003cc4:	d107      	bne.n	8003cd6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cd4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e050      	b.n	8003d7c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cda:	893b      	ldrh	r3, [r7, #8]
 8003cdc:	b2da      	uxtb	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce6:	6a39      	ldr	r1, [r7, #32]
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f000 f923 	bl	8003f34 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00d      	beq.n	8003d10 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf8:	2b04      	cmp	r3, #4
 8003cfa:	d107      	bne.n	8003d0c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d0a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e035      	b.n	8003d7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d1e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	6a3b      	ldr	r3, [r7, #32]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f000 f82b 	bl	8003d88 <I2C_WaitOnFlagUntilTimeout>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00d      	beq.n	8003d54 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d46:	d103      	bne.n	8003d50 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e013      	b.n	8003d7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003d54:	897b      	ldrh	r3, [r7, #10]
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	f043 0301 	orr.w	r3, r3, #1
 8003d5c:	b2da      	uxtb	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	6a3a      	ldr	r2, [r7, #32]
 8003d68:	4906      	ldr	r1, [pc, #24]	; (8003d84 <I2C_RequestMemoryRead+0x1cc>)
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f000 f863 	bl	8003e36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e000      	b.n	8003d7c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3718      	adds	r7, #24
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	00010002 	.word	0x00010002

08003d88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	603b      	str	r3, [r7, #0]
 8003d94:	4613      	mov	r3, r2
 8003d96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d98:	e025      	b.n	8003de6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da0:	d021      	beq.n	8003de6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003da2:	f7fe fc15 	bl	80025d0 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d302      	bcc.n	8003db8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d116      	bne.n	8003de6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	f043 0220 	orr.w	r2, r3, #32
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e023      	b.n	8003e2e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	0c1b      	lsrs	r3, r3, #16
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d10d      	bne.n	8003e0c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	43da      	mvns	r2, r3
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	bf0c      	ite	eq
 8003e02:	2301      	moveq	r3, #1
 8003e04:	2300      	movne	r3, #0
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	461a      	mov	r2, r3
 8003e0a:	e00c      	b.n	8003e26 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	43da      	mvns	r2, r3
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	4013      	ands	r3, r2
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	bf0c      	ite	eq
 8003e1e:	2301      	moveq	r3, #1
 8003e20:	2300      	movne	r3, #0
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	461a      	mov	r2, r3
 8003e26:	79fb      	ldrb	r3, [r7, #7]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d0b6      	beq.n	8003d9a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b084      	sub	sp, #16
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	60f8      	str	r0, [r7, #12]
 8003e3e:	60b9      	str	r1, [r7, #8]
 8003e40:	607a      	str	r2, [r7, #4]
 8003e42:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e44:	e051      	b.n	8003eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e54:	d123      	bne.n	8003e9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e64:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e6e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2220      	movs	r2, #32
 8003e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8a:	f043 0204 	orr.w	r2, r3, #4
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e046      	b.n	8003f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea4:	d021      	beq.n	8003eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ea6:	f7fe fb93 	bl	80025d0 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d302      	bcc.n	8003ebc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d116      	bne.n	8003eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed6:	f043 0220 	orr.w	r2, r3, #32
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e020      	b.n	8003f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	0c1b      	lsrs	r3, r3, #16
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d10c      	bne.n	8003f0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	43da      	mvns	r2, r3
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	4013      	ands	r3, r2
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	bf14      	ite	ne
 8003f06:	2301      	movne	r3, #1
 8003f08:	2300      	moveq	r3, #0
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	e00b      	b.n	8003f26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	43da      	mvns	r2, r3
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	bf14      	ite	ne
 8003f20:	2301      	movne	r3, #1
 8003f22:	2300      	moveq	r3, #0
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d18d      	bne.n	8003e46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f40:	e02d      	b.n	8003f9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f000 f8ce 	bl	80040e4 <I2C_IsAcknowledgeFailed>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e02d      	b.n	8003fae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f58:	d021      	beq.n	8003f9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f5a:	f7fe fb39 	bl	80025d0 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d302      	bcc.n	8003f70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d116      	bne.n	8003f9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	f043 0220 	orr.w	r2, r3, #32
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e007      	b.n	8003fae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa8:	2b80      	cmp	r3, #128	; 0x80
 8003faa:	d1ca      	bne.n	8003f42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b084      	sub	sp, #16
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	60f8      	str	r0, [r7, #12]
 8003fbe:	60b9      	str	r1, [r7, #8]
 8003fc0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fc2:	e02d      	b.n	8004020 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f000 f88d 	bl	80040e4 <I2C_IsAcknowledgeFailed>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d001      	beq.n	8003fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e02d      	b.n	8004030 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fda:	d021      	beq.n	8004020 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fdc:	f7fe faf8 	bl	80025d0 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d302      	bcc.n	8003ff2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d116      	bne.n	8004020 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400c:	f043 0220 	orr.w	r2, r3, #32
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e007      	b.n	8004030 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	f003 0304 	and.w	r3, r3, #4
 800402a:	2b04      	cmp	r3, #4
 800402c:	d1ca      	bne.n	8003fc4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004044:	e042      	b.n	80040cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	f003 0310 	and.w	r3, r3, #16
 8004050:	2b10      	cmp	r3, #16
 8004052:	d119      	bne.n	8004088 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f06f 0210 	mvn.w	r2, #16
 800405c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2220      	movs	r2, #32
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e029      	b.n	80040dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004088:	f7fe faa2 	bl	80025d0 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	68ba      	ldr	r2, [r7, #8]
 8004094:	429a      	cmp	r2, r3
 8004096:	d302      	bcc.n	800409e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d116      	bne.n	80040cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2220      	movs	r2, #32
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b8:	f043 0220 	orr.w	r2, r3, #32
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e007      	b.n	80040dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d6:	2b40      	cmp	r3, #64	; 0x40
 80040d8:	d1b5      	bne.n	8004046 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040fa:	d11b      	bne.n	8004134 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004104:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2220      	movs	r2, #32
 8004110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004120:	f043 0204 	orr.w	r2, r3, #4
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e000      	b.n	8004136 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
	...

08004144 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e264      	b.n	8004620 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b00      	cmp	r3, #0
 8004160:	d075      	beq.n	800424e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004162:	4ba3      	ldr	r3, [pc, #652]	; (80043f0 <HAL_RCC_OscConfig+0x2ac>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f003 030c 	and.w	r3, r3, #12
 800416a:	2b04      	cmp	r3, #4
 800416c:	d00c      	beq.n	8004188 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800416e:	4ba0      	ldr	r3, [pc, #640]	; (80043f0 <HAL_RCC_OscConfig+0x2ac>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004176:	2b08      	cmp	r3, #8
 8004178:	d112      	bne.n	80041a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800417a:	4b9d      	ldr	r3, [pc, #628]	; (80043f0 <HAL_RCC_OscConfig+0x2ac>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004182:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004186:	d10b      	bne.n	80041a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004188:	4b99      	ldr	r3, [pc, #612]	; (80043f0 <HAL_RCC_OscConfig+0x2ac>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d05b      	beq.n	800424c <HAL_RCC_OscConfig+0x108>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d157      	bne.n	800424c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e23f      	b.n	8004620 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041a8:	d106      	bne.n	80041b8 <HAL_RCC_OscConfig+0x74>
 80041aa:	4b91      	ldr	r3, [pc, #580]	; (80043f0 <HAL_RCC_OscConfig+0x2ac>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a90      	ldr	r2, [pc, #576]	; (80043f0 <HAL_RCC_OscConfig+0x2ac>)
 80041b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b4:	6013      	str	r3, [r2, #0]
 80041b6:	e01d      	b.n	80041f4 <HAL_RCC_OscConfig+0xb0>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041c0:	d10c      	bne.n	80041dc <HAL_RCC_OscConfig+0x98>
 80041c2:	4b8b      	ldr	r3, [pc, #556]	; (80043f0 <HAL_RCC_OscConfig+0x2ac>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a8a      	ldr	r2, [pc, #552]	; (80043f0 <HAL_RCC_OscConfig+0x2ac>)
 80041c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041cc:	6013      	str	r3, [r2, #0]
 80041ce:	4b88      	ldr	r3, [pc, #544]	; (80043f0 <HAL_RCC_OscConfig+0x2ac>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a87      	ldr	r2, [pc, #540]	; (80043f0 <HAL_RCC_OscConfig+0x2ac>)
 80041d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041d8:	6013      	str	r3, [r2, #0]
 80041da:	e00b      	b.n	80041f4 <HAL_RCC_OscConfig+0xb0>
 80041dc:	4b84      	ldr	r3, [pc, #528]	; (80043f0 <HAL_RCC_OscConfig+0x2ac>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a83      	ldr	r2, [pc, #524]	; (80043f0 <HAL_RCC_OscConfig+0x2ac>)
 80041e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041e6:	6013      	str	r3, [r2, #0]
 80041e8:	4b81      	ldr	r3, [pc, #516]	; (80043f0 <HAL_RCC_OscConfig+0x2ac>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a80      	ldr	r2, [pc, #512]	; (80043f0 <HAL_RCC_OscConfig+0x2ac>)
 80041ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d013      	beq.n	8004224 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041fc:	f7fe f9e8 	bl	80025d0 <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004202:	e008      	b.n	8004216 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004204:	f7fe f9e4 	bl	80025d0 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b64      	cmp	r3, #100	; 0x64
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e204      	b.n	8004620 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004216:	4b76      	ldr	r3, [pc, #472]	; (80043f0 <HAL_RCC_OscConfig+0x2ac>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d0f0      	beq.n	8004204 <HAL_RCC_OscConfig+0xc0>
 8004222:	e014      	b.n	800424e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004224:	f7fe f9d4 	bl	80025d0 <HAL_GetTick>
 8004228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800422c:	f7fe f9d0 	bl	80025d0 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b64      	cmp	r3, #100	; 0x64
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e1f0      	b.n	8004620 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800423e:	4b6c      	ldr	r3, [pc, #432]	; (80043f0 <HAL_RCC_OscConfig+0x2ac>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1f0      	bne.n	800422c <HAL_RCC_OscConfig+0xe8>
 800424a:	e000      	b.n	800424e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800424c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d063      	beq.n	8004322 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800425a:	4b65      	ldr	r3, [pc, #404]	; (80043f0 <HAL_RCC_OscConfig+0x2ac>)
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f003 030c 	and.w	r3, r3, #12
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00b      	beq.n	800427e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004266:	4b62      	ldr	r3, [pc, #392]	; (80043f0 <HAL_RCC_OscConfig+0x2ac>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800426e:	2b08      	cmp	r3, #8
 8004270:	d11c      	bne.n	80042ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004272:	4b5f      	ldr	r3, [pc, #380]	; (80043f0 <HAL_RCC_OscConfig+0x2ac>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d116      	bne.n	80042ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800427e:	4b5c      	ldr	r3, [pc, #368]	; (80043f0 <HAL_RCC_OscConfig+0x2ac>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d005      	beq.n	8004296 <HAL_RCC_OscConfig+0x152>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d001      	beq.n	8004296 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e1c4      	b.n	8004620 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004296:	4b56      	ldr	r3, [pc, #344]	; (80043f0 <HAL_RCC_OscConfig+0x2ac>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	00db      	lsls	r3, r3, #3
 80042a4:	4952      	ldr	r1, [pc, #328]	; (80043f0 <HAL_RCC_OscConfig+0x2ac>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042aa:	e03a      	b.n	8004322 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d020      	beq.n	80042f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042b4:	4b4f      	ldr	r3, [pc, #316]	; (80043f4 <HAL_RCC_OscConfig+0x2b0>)
 80042b6:	2201      	movs	r2, #1
 80042b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ba:	f7fe f989 	bl	80025d0 <HAL_GetTick>
 80042be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042c0:	e008      	b.n	80042d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042c2:	f7fe f985 	bl	80025d0 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d901      	bls.n	80042d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e1a5      	b.n	8004620 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042d4:	4b46      	ldr	r3, [pc, #280]	; (80043f0 <HAL_RCC_OscConfig+0x2ac>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d0f0      	beq.n	80042c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042e0:	4b43      	ldr	r3, [pc, #268]	; (80043f0 <HAL_RCC_OscConfig+0x2ac>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	00db      	lsls	r3, r3, #3
 80042ee:	4940      	ldr	r1, [pc, #256]	; (80043f0 <HAL_RCC_OscConfig+0x2ac>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	600b      	str	r3, [r1, #0]
 80042f4:	e015      	b.n	8004322 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042f6:	4b3f      	ldr	r3, [pc, #252]	; (80043f4 <HAL_RCC_OscConfig+0x2b0>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042fc:	f7fe f968 	bl	80025d0 <HAL_GetTick>
 8004300:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004302:	e008      	b.n	8004316 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004304:	f7fe f964 	bl	80025d0 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b02      	cmp	r3, #2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e184      	b.n	8004620 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004316:	4b36      	ldr	r3, [pc, #216]	; (80043f0 <HAL_RCC_OscConfig+0x2ac>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1f0      	bne.n	8004304 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0308 	and.w	r3, r3, #8
 800432a:	2b00      	cmp	r3, #0
 800432c:	d030      	beq.n	8004390 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d016      	beq.n	8004364 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004336:	4b30      	ldr	r3, [pc, #192]	; (80043f8 <HAL_RCC_OscConfig+0x2b4>)
 8004338:	2201      	movs	r2, #1
 800433a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800433c:	f7fe f948 	bl	80025d0 <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004344:	f7fe f944 	bl	80025d0 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e164      	b.n	8004620 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004356:	4b26      	ldr	r3, [pc, #152]	; (80043f0 <HAL_RCC_OscConfig+0x2ac>)
 8004358:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d0f0      	beq.n	8004344 <HAL_RCC_OscConfig+0x200>
 8004362:	e015      	b.n	8004390 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004364:	4b24      	ldr	r3, [pc, #144]	; (80043f8 <HAL_RCC_OscConfig+0x2b4>)
 8004366:	2200      	movs	r2, #0
 8004368:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800436a:	f7fe f931 	bl	80025d0 <HAL_GetTick>
 800436e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004370:	e008      	b.n	8004384 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004372:	f7fe f92d 	bl	80025d0 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	2b02      	cmp	r3, #2
 800437e:	d901      	bls.n	8004384 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e14d      	b.n	8004620 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004384:	4b1a      	ldr	r3, [pc, #104]	; (80043f0 <HAL_RCC_OscConfig+0x2ac>)
 8004386:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1f0      	bne.n	8004372 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0304 	and.w	r3, r3, #4
 8004398:	2b00      	cmp	r3, #0
 800439a:	f000 80a0 	beq.w	80044de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800439e:	2300      	movs	r3, #0
 80043a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043a2:	4b13      	ldr	r3, [pc, #76]	; (80043f0 <HAL_RCC_OscConfig+0x2ac>)
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10f      	bne.n	80043ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043ae:	2300      	movs	r3, #0
 80043b0:	60bb      	str	r3, [r7, #8]
 80043b2:	4b0f      	ldr	r3, [pc, #60]	; (80043f0 <HAL_RCC_OscConfig+0x2ac>)
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	4a0e      	ldr	r2, [pc, #56]	; (80043f0 <HAL_RCC_OscConfig+0x2ac>)
 80043b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043bc:	6413      	str	r3, [r2, #64]	; 0x40
 80043be:	4b0c      	ldr	r3, [pc, #48]	; (80043f0 <HAL_RCC_OscConfig+0x2ac>)
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043c6:	60bb      	str	r3, [r7, #8]
 80043c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043ca:	2301      	movs	r3, #1
 80043cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ce:	4b0b      	ldr	r3, [pc, #44]	; (80043fc <HAL_RCC_OscConfig+0x2b8>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d121      	bne.n	800441e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043da:	4b08      	ldr	r3, [pc, #32]	; (80043fc <HAL_RCC_OscConfig+0x2b8>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a07      	ldr	r2, [pc, #28]	; (80043fc <HAL_RCC_OscConfig+0x2b8>)
 80043e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043e6:	f7fe f8f3 	bl	80025d0 <HAL_GetTick>
 80043ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ec:	e011      	b.n	8004412 <HAL_RCC_OscConfig+0x2ce>
 80043ee:	bf00      	nop
 80043f0:	40023800 	.word	0x40023800
 80043f4:	42470000 	.word	0x42470000
 80043f8:	42470e80 	.word	0x42470e80
 80043fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004400:	f7fe f8e6 	bl	80025d0 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e106      	b.n	8004620 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004412:	4b85      	ldr	r3, [pc, #532]	; (8004628 <HAL_RCC_OscConfig+0x4e4>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800441a:	2b00      	cmp	r3, #0
 800441c:	d0f0      	beq.n	8004400 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d106      	bne.n	8004434 <HAL_RCC_OscConfig+0x2f0>
 8004426:	4b81      	ldr	r3, [pc, #516]	; (800462c <HAL_RCC_OscConfig+0x4e8>)
 8004428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800442a:	4a80      	ldr	r2, [pc, #512]	; (800462c <HAL_RCC_OscConfig+0x4e8>)
 800442c:	f043 0301 	orr.w	r3, r3, #1
 8004430:	6713      	str	r3, [r2, #112]	; 0x70
 8004432:	e01c      	b.n	800446e <HAL_RCC_OscConfig+0x32a>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	2b05      	cmp	r3, #5
 800443a:	d10c      	bne.n	8004456 <HAL_RCC_OscConfig+0x312>
 800443c:	4b7b      	ldr	r3, [pc, #492]	; (800462c <HAL_RCC_OscConfig+0x4e8>)
 800443e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004440:	4a7a      	ldr	r2, [pc, #488]	; (800462c <HAL_RCC_OscConfig+0x4e8>)
 8004442:	f043 0304 	orr.w	r3, r3, #4
 8004446:	6713      	str	r3, [r2, #112]	; 0x70
 8004448:	4b78      	ldr	r3, [pc, #480]	; (800462c <HAL_RCC_OscConfig+0x4e8>)
 800444a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444c:	4a77      	ldr	r2, [pc, #476]	; (800462c <HAL_RCC_OscConfig+0x4e8>)
 800444e:	f043 0301 	orr.w	r3, r3, #1
 8004452:	6713      	str	r3, [r2, #112]	; 0x70
 8004454:	e00b      	b.n	800446e <HAL_RCC_OscConfig+0x32a>
 8004456:	4b75      	ldr	r3, [pc, #468]	; (800462c <HAL_RCC_OscConfig+0x4e8>)
 8004458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445a:	4a74      	ldr	r2, [pc, #464]	; (800462c <HAL_RCC_OscConfig+0x4e8>)
 800445c:	f023 0301 	bic.w	r3, r3, #1
 8004460:	6713      	str	r3, [r2, #112]	; 0x70
 8004462:	4b72      	ldr	r3, [pc, #456]	; (800462c <HAL_RCC_OscConfig+0x4e8>)
 8004464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004466:	4a71      	ldr	r2, [pc, #452]	; (800462c <HAL_RCC_OscConfig+0x4e8>)
 8004468:	f023 0304 	bic.w	r3, r3, #4
 800446c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d015      	beq.n	80044a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004476:	f7fe f8ab 	bl	80025d0 <HAL_GetTick>
 800447a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800447c:	e00a      	b.n	8004494 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800447e:	f7fe f8a7 	bl	80025d0 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	f241 3288 	movw	r2, #5000	; 0x1388
 800448c:	4293      	cmp	r3, r2
 800448e:	d901      	bls.n	8004494 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e0c5      	b.n	8004620 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004494:	4b65      	ldr	r3, [pc, #404]	; (800462c <HAL_RCC_OscConfig+0x4e8>)
 8004496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b00      	cmp	r3, #0
 800449e:	d0ee      	beq.n	800447e <HAL_RCC_OscConfig+0x33a>
 80044a0:	e014      	b.n	80044cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044a2:	f7fe f895 	bl	80025d0 <HAL_GetTick>
 80044a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044a8:	e00a      	b.n	80044c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044aa:	f7fe f891 	bl	80025d0 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d901      	bls.n	80044c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e0af      	b.n	8004620 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044c0:	4b5a      	ldr	r3, [pc, #360]	; (800462c <HAL_RCC_OscConfig+0x4e8>)
 80044c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c4:	f003 0302 	and.w	r3, r3, #2
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1ee      	bne.n	80044aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044cc:	7dfb      	ldrb	r3, [r7, #23]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d105      	bne.n	80044de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044d2:	4b56      	ldr	r3, [pc, #344]	; (800462c <HAL_RCC_OscConfig+0x4e8>)
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	4a55      	ldr	r2, [pc, #340]	; (800462c <HAL_RCC_OscConfig+0x4e8>)
 80044d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f000 809b 	beq.w	800461e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044e8:	4b50      	ldr	r3, [pc, #320]	; (800462c <HAL_RCC_OscConfig+0x4e8>)
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f003 030c 	and.w	r3, r3, #12
 80044f0:	2b08      	cmp	r3, #8
 80044f2:	d05c      	beq.n	80045ae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d141      	bne.n	8004580 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044fc:	4b4c      	ldr	r3, [pc, #304]	; (8004630 <HAL_RCC_OscConfig+0x4ec>)
 80044fe:	2200      	movs	r2, #0
 8004500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004502:	f7fe f865 	bl	80025d0 <HAL_GetTick>
 8004506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004508:	e008      	b.n	800451c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800450a:	f7fe f861 	bl	80025d0 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d901      	bls.n	800451c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e081      	b.n	8004620 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800451c:	4b43      	ldr	r3, [pc, #268]	; (800462c <HAL_RCC_OscConfig+0x4e8>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1f0      	bne.n	800450a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	69da      	ldr	r2, [r3, #28]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a1b      	ldr	r3, [r3, #32]
 8004530:	431a      	orrs	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004536:	019b      	lsls	r3, r3, #6
 8004538:	431a      	orrs	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453e:	085b      	lsrs	r3, r3, #1
 8004540:	3b01      	subs	r3, #1
 8004542:	041b      	lsls	r3, r3, #16
 8004544:	431a      	orrs	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454a:	061b      	lsls	r3, r3, #24
 800454c:	4937      	ldr	r1, [pc, #220]	; (800462c <HAL_RCC_OscConfig+0x4e8>)
 800454e:	4313      	orrs	r3, r2
 8004550:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004552:	4b37      	ldr	r3, [pc, #220]	; (8004630 <HAL_RCC_OscConfig+0x4ec>)
 8004554:	2201      	movs	r2, #1
 8004556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004558:	f7fe f83a 	bl	80025d0 <HAL_GetTick>
 800455c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800455e:	e008      	b.n	8004572 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004560:	f7fe f836 	bl	80025d0 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b02      	cmp	r3, #2
 800456c:	d901      	bls.n	8004572 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e056      	b.n	8004620 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004572:	4b2e      	ldr	r3, [pc, #184]	; (800462c <HAL_RCC_OscConfig+0x4e8>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d0f0      	beq.n	8004560 <HAL_RCC_OscConfig+0x41c>
 800457e:	e04e      	b.n	800461e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004580:	4b2b      	ldr	r3, [pc, #172]	; (8004630 <HAL_RCC_OscConfig+0x4ec>)
 8004582:	2200      	movs	r2, #0
 8004584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004586:	f7fe f823 	bl	80025d0 <HAL_GetTick>
 800458a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800458c:	e008      	b.n	80045a0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800458e:	f7fe f81f 	bl	80025d0 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	2b02      	cmp	r3, #2
 800459a:	d901      	bls.n	80045a0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e03f      	b.n	8004620 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045a0:	4b22      	ldr	r3, [pc, #136]	; (800462c <HAL_RCC_OscConfig+0x4e8>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1f0      	bne.n	800458e <HAL_RCC_OscConfig+0x44a>
 80045ac:	e037      	b.n	800461e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d101      	bne.n	80045ba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e032      	b.n	8004620 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045ba:	4b1c      	ldr	r3, [pc, #112]	; (800462c <HAL_RCC_OscConfig+0x4e8>)
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d028      	beq.n	800461a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d121      	bne.n	800461a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d11a      	bne.n	800461a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80045ea:	4013      	ands	r3, r2
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045f0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d111      	bne.n	800461a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004600:	085b      	lsrs	r3, r3, #1
 8004602:	3b01      	subs	r3, #1
 8004604:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004606:	429a      	cmp	r2, r3
 8004608:	d107      	bne.n	800461a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004614:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004616:	429a      	cmp	r2, r3
 8004618:	d001      	beq.n	800461e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e000      	b.n	8004620 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3718      	adds	r7, #24
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	40007000 	.word	0x40007000
 800462c:	40023800 	.word	0x40023800
 8004630:	42470060 	.word	0x42470060

08004634 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d101      	bne.n	8004648 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e0cc      	b.n	80047e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004648:	4b68      	ldr	r3, [pc, #416]	; (80047ec <HAL_RCC_ClockConfig+0x1b8>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0307 	and.w	r3, r3, #7
 8004650:	683a      	ldr	r2, [r7, #0]
 8004652:	429a      	cmp	r2, r3
 8004654:	d90c      	bls.n	8004670 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004656:	4b65      	ldr	r3, [pc, #404]	; (80047ec <HAL_RCC_ClockConfig+0x1b8>)
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	b2d2      	uxtb	r2, r2
 800465c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800465e:	4b63      	ldr	r3, [pc, #396]	; (80047ec <HAL_RCC_ClockConfig+0x1b8>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0307 	and.w	r3, r3, #7
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	429a      	cmp	r2, r3
 800466a:	d001      	beq.n	8004670 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e0b8      	b.n	80047e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0302 	and.w	r3, r3, #2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d020      	beq.n	80046be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0304 	and.w	r3, r3, #4
 8004684:	2b00      	cmp	r3, #0
 8004686:	d005      	beq.n	8004694 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004688:	4b59      	ldr	r3, [pc, #356]	; (80047f0 <HAL_RCC_ClockConfig+0x1bc>)
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	4a58      	ldr	r2, [pc, #352]	; (80047f0 <HAL_RCC_ClockConfig+0x1bc>)
 800468e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004692:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0308 	and.w	r3, r3, #8
 800469c:	2b00      	cmp	r3, #0
 800469e:	d005      	beq.n	80046ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046a0:	4b53      	ldr	r3, [pc, #332]	; (80047f0 <HAL_RCC_ClockConfig+0x1bc>)
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	4a52      	ldr	r2, [pc, #328]	; (80047f0 <HAL_RCC_ClockConfig+0x1bc>)
 80046a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80046aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046ac:	4b50      	ldr	r3, [pc, #320]	; (80047f0 <HAL_RCC_ClockConfig+0x1bc>)
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	494d      	ldr	r1, [pc, #308]	; (80047f0 <HAL_RCC_ClockConfig+0x1bc>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d044      	beq.n	8004754 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d107      	bne.n	80046e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046d2:	4b47      	ldr	r3, [pc, #284]	; (80047f0 <HAL_RCC_ClockConfig+0x1bc>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d119      	bne.n	8004712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e07f      	b.n	80047e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d003      	beq.n	80046f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046ee:	2b03      	cmp	r3, #3
 80046f0:	d107      	bne.n	8004702 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046f2:	4b3f      	ldr	r3, [pc, #252]	; (80047f0 <HAL_RCC_ClockConfig+0x1bc>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d109      	bne.n	8004712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e06f      	b.n	80047e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004702:	4b3b      	ldr	r3, [pc, #236]	; (80047f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d101      	bne.n	8004712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e067      	b.n	80047e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004712:	4b37      	ldr	r3, [pc, #220]	; (80047f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f023 0203 	bic.w	r2, r3, #3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	4934      	ldr	r1, [pc, #208]	; (80047f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004720:	4313      	orrs	r3, r2
 8004722:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004724:	f7fd ff54 	bl	80025d0 <HAL_GetTick>
 8004728:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800472a:	e00a      	b.n	8004742 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800472c:	f7fd ff50 	bl	80025d0 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	f241 3288 	movw	r2, #5000	; 0x1388
 800473a:	4293      	cmp	r3, r2
 800473c:	d901      	bls.n	8004742 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e04f      	b.n	80047e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004742:	4b2b      	ldr	r3, [pc, #172]	; (80047f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f003 020c 	and.w	r2, r3, #12
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	429a      	cmp	r2, r3
 8004752:	d1eb      	bne.n	800472c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004754:	4b25      	ldr	r3, [pc, #148]	; (80047ec <HAL_RCC_ClockConfig+0x1b8>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0307 	and.w	r3, r3, #7
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	429a      	cmp	r2, r3
 8004760:	d20c      	bcs.n	800477c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004762:	4b22      	ldr	r3, [pc, #136]	; (80047ec <HAL_RCC_ClockConfig+0x1b8>)
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	b2d2      	uxtb	r2, r2
 8004768:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800476a:	4b20      	ldr	r3, [pc, #128]	; (80047ec <HAL_RCC_ClockConfig+0x1b8>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0307 	and.w	r3, r3, #7
 8004772:	683a      	ldr	r2, [r7, #0]
 8004774:	429a      	cmp	r2, r3
 8004776:	d001      	beq.n	800477c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e032      	b.n	80047e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0304 	and.w	r3, r3, #4
 8004784:	2b00      	cmp	r3, #0
 8004786:	d008      	beq.n	800479a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004788:	4b19      	ldr	r3, [pc, #100]	; (80047f0 <HAL_RCC_ClockConfig+0x1bc>)
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	4916      	ldr	r1, [pc, #88]	; (80047f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004796:	4313      	orrs	r3, r2
 8004798:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0308 	and.w	r3, r3, #8
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d009      	beq.n	80047ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047a6:	4b12      	ldr	r3, [pc, #72]	; (80047f0 <HAL_RCC_ClockConfig+0x1bc>)
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	00db      	lsls	r3, r3, #3
 80047b4:	490e      	ldr	r1, [pc, #56]	; (80047f0 <HAL_RCC_ClockConfig+0x1bc>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047ba:	f000 f821 	bl	8004800 <HAL_RCC_GetSysClockFreq>
 80047be:	4602      	mov	r2, r0
 80047c0:	4b0b      	ldr	r3, [pc, #44]	; (80047f0 <HAL_RCC_ClockConfig+0x1bc>)
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	091b      	lsrs	r3, r3, #4
 80047c6:	f003 030f 	and.w	r3, r3, #15
 80047ca:	490a      	ldr	r1, [pc, #40]	; (80047f4 <HAL_RCC_ClockConfig+0x1c0>)
 80047cc:	5ccb      	ldrb	r3, [r1, r3]
 80047ce:	fa22 f303 	lsr.w	r3, r2, r3
 80047d2:	4a09      	ldr	r2, [pc, #36]	; (80047f8 <HAL_RCC_ClockConfig+0x1c4>)
 80047d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047d6:	4b09      	ldr	r3, [pc, #36]	; (80047fc <HAL_RCC_ClockConfig+0x1c8>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4618      	mov	r0, r3
 80047dc:	f7fd feb4 	bl	8002548 <HAL_InitTick>

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	40023c00 	.word	0x40023c00
 80047f0:	40023800 	.word	0x40023800
 80047f4:	08008c38 	.word	0x08008c38
 80047f8:	20000000 	.word	0x20000000
 80047fc:	20000004 	.word	0x20000004

08004800 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004800:	b5b0      	push	{r4, r5, r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004806:	2100      	movs	r1, #0
 8004808:	6079      	str	r1, [r7, #4]
 800480a:	2100      	movs	r1, #0
 800480c:	60f9      	str	r1, [r7, #12]
 800480e:	2100      	movs	r1, #0
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004812:	2100      	movs	r1, #0
 8004814:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004816:	4952      	ldr	r1, [pc, #328]	; (8004960 <HAL_RCC_GetSysClockFreq+0x160>)
 8004818:	6889      	ldr	r1, [r1, #8]
 800481a:	f001 010c 	and.w	r1, r1, #12
 800481e:	2908      	cmp	r1, #8
 8004820:	d00d      	beq.n	800483e <HAL_RCC_GetSysClockFreq+0x3e>
 8004822:	2908      	cmp	r1, #8
 8004824:	f200 8094 	bhi.w	8004950 <HAL_RCC_GetSysClockFreq+0x150>
 8004828:	2900      	cmp	r1, #0
 800482a:	d002      	beq.n	8004832 <HAL_RCC_GetSysClockFreq+0x32>
 800482c:	2904      	cmp	r1, #4
 800482e:	d003      	beq.n	8004838 <HAL_RCC_GetSysClockFreq+0x38>
 8004830:	e08e      	b.n	8004950 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004832:	4b4c      	ldr	r3, [pc, #304]	; (8004964 <HAL_RCC_GetSysClockFreq+0x164>)
 8004834:	60bb      	str	r3, [r7, #8]
       break;
 8004836:	e08e      	b.n	8004956 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004838:	4b4b      	ldr	r3, [pc, #300]	; (8004968 <HAL_RCC_GetSysClockFreq+0x168>)
 800483a:	60bb      	str	r3, [r7, #8]
      break;
 800483c:	e08b      	b.n	8004956 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800483e:	4948      	ldr	r1, [pc, #288]	; (8004960 <HAL_RCC_GetSysClockFreq+0x160>)
 8004840:	6849      	ldr	r1, [r1, #4]
 8004842:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004846:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004848:	4945      	ldr	r1, [pc, #276]	; (8004960 <HAL_RCC_GetSysClockFreq+0x160>)
 800484a:	6849      	ldr	r1, [r1, #4]
 800484c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004850:	2900      	cmp	r1, #0
 8004852:	d024      	beq.n	800489e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004854:	4942      	ldr	r1, [pc, #264]	; (8004960 <HAL_RCC_GetSysClockFreq+0x160>)
 8004856:	6849      	ldr	r1, [r1, #4]
 8004858:	0989      	lsrs	r1, r1, #6
 800485a:	4608      	mov	r0, r1
 800485c:	f04f 0100 	mov.w	r1, #0
 8004860:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004864:	f04f 0500 	mov.w	r5, #0
 8004868:	ea00 0204 	and.w	r2, r0, r4
 800486c:	ea01 0305 	and.w	r3, r1, r5
 8004870:	493d      	ldr	r1, [pc, #244]	; (8004968 <HAL_RCC_GetSysClockFreq+0x168>)
 8004872:	fb01 f003 	mul.w	r0, r1, r3
 8004876:	2100      	movs	r1, #0
 8004878:	fb01 f102 	mul.w	r1, r1, r2
 800487c:	1844      	adds	r4, r0, r1
 800487e:	493a      	ldr	r1, [pc, #232]	; (8004968 <HAL_RCC_GetSysClockFreq+0x168>)
 8004880:	fba2 0101 	umull	r0, r1, r2, r1
 8004884:	1863      	adds	r3, r4, r1
 8004886:	4619      	mov	r1, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	461a      	mov	r2, r3
 800488c:	f04f 0300 	mov.w	r3, #0
 8004890:	f7fc f9e2 	bl	8000c58 <__aeabi_uldivmod>
 8004894:	4602      	mov	r2, r0
 8004896:	460b      	mov	r3, r1
 8004898:	4613      	mov	r3, r2
 800489a:	60fb      	str	r3, [r7, #12]
 800489c:	e04a      	b.n	8004934 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800489e:	4b30      	ldr	r3, [pc, #192]	; (8004960 <HAL_RCC_GetSysClockFreq+0x160>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	099b      	lsrs	r3, r3, #6
 80048a4:	461a      	mov	r2, r3
 80048a6:	f04f 0300 	mov.w	r3, #0
 80048aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80048ae:	f04f 0100 	mov.w	r1, #0
 80048b2:	ea02 0400 	and.w	r4, r2, r0
 80048b6:	ea03 0501 	and.w	r5, r3, r1
 80048ba:	4620      	mov	r0, r4
 80048bc:	4629      	mov	r1, r5
 80048be:	f04f 0200 	mov.w	r2, #0
 80048c2:	f04f 0300 	mov.w	r3, #0
 80048c6:	014b      	lsls	r3, r1, #5
 80048c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80048cc:	0142      	lsls	r2, r0, #5
 80048ce:	4610      	mov	r0, r2
 80048d0:	4619      	mov	r1, r3
 80048d2:	1b00      	subs	r0, r0, r4
 80048d4:	eb61 0105 	sbc.w	r1, r1, r5
 80048d8:	f04f 0200 	mov.w	r2, #0
 80048dc:	f04f 0300 	mov.w	r3, #0
 80048e0:	018b      	lsls	r3, r1, #6
 80048e2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80048e6:	0182      	lsls	r2, r0, #6
 80048e8:	1a12      	subs	r2, r2, r0
 80048ea:	eb63 0301 	sbc.w	r3, r3, r1
 80048ee:	f04f 0000 	mov.w	r0, #0
 80048f2:	f04f 0100 	mov.w	r1, #0
 80048f6:	00d9      	lsls	r1, r3, #3
 80048f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048fc:	00d0      	lsls	r0, r2, #3
 80048fe:	4602      	mov	r2, r0
 8004900:	460b      	mov	r3, r1
 8004902:	1912      	adds	r2, r2, r4
 8004904:	eb45 0303 	adc.w	r3, r5, r3
 8004908:	f04f 0000 	mov.w	r0, #0
 800490c:	f04f 0100 	mov.w	r1, #0
 8004910:	0299      	lsls	r1, r3, #10
 8004912:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004916:	0290      	lsls	r0, r2, #10
 8004918:	4602      	mov	r2, r0
 800491a:	460b      	mov	r3, r1
 800491c:	4610      	mov	r0, r2
 800491e:	4619      	mov	r1, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	461a      	mov	r2, r3
 8004924:	f04f 0300 	mov.w	r3, #0
 8004928:	f7fc f996 	bl	8000c58 <__aeabi_uldivmod>
 800492c:	4602      	mov	r2, r0
 800492e:	460b      	mov	r3, r1
 8004930:	4613      	mov	r3, r2
 8004932:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004934:	4b0a      	ldr	r3, [pc, #40]	; (8004960 <HAL_RCC_GetSysClockFreq+0x160>)
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	0c1b      	lsrs	r3, r3, #16
 800493a:	f003 0303 	and.w	r3, r3, #3
 800493e:	3301      	adds	r3, #1
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	fbb2 f3f3 	udiv	r3, r2, r3
 800494c:	60bb      	str	r3, [r7, #8]
      break;
 800494e:	e002      	b.n	8004956 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004950:	4b04      	ldr	r3, [pc, #16]	; (8004964 <HAL_RCC_GetSysClockFreq+0x164>)
 8004952:	60bb      	str	r3, [r7, #8]
      break;
 8004954:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004956:	68bb      	ldr	r3, [r7, #8]
}
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bdb0      	pop	{r4, r5, r7, pc}
 8004960:	40023800 	.word	0x40023800
 8004964:	00f42400 	.word	0x00f42400
 8004968:	017d7840 	.word	0x017d7840

0800496c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004970:	4b03      	ldr	r3, [pc, #12]	; (8004980 <HAL_RCC_GetHCLKFreq+0x14>)
 8004972:	681b      	ldr	r3, [r3, #0]
}
 8004974:	4618      	mov	r0, r3
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	20000000 	.word	0x20000000

08004984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004988:	f7ff fff0 	bl	800496c <HAL_RCC_GetHCLKFreq>
 800498c:	4602      	mov	r2, r0
 800498e:	4b05      	ldr	r3, [pc, #20]	; (80049a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	0a9b      	lsrs	r3, r3, #10
 8004994:	f003 0307 	and.w	r3, r3, #7
 8004998:	4903      	ldr	r1, [pc, #12]	; (80049a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800499a:	5ccb      	ldrb	r3, [r1, r3]
 800499c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	40023800 	.word	0x40023800
 80049a8:	08008c48 	.word	0x08008c48

080049ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80049b0:	f7ff ffdc 	bl	800496c <HAL_RCC_GetHCLKFreq>
 80049b4:	4602      	mov	r2, r0
 80049b6:	4b05      	ldr	r3, [pc, #20]	; (80049cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	0b5b      	lsrs	r3, r3, #13
 80049bc:	f003 0307 	and.w	r3, r3, #7
 80049c0:	4903      	ldr	r1, [pc, #12]	; (80049d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049c2:	5ccb      	ldrb	r3, [r1, r3]
 80049c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	40023800 	.word	0x40023800
 80049d0:	08008c48 	.word	0x08008c48

080049d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e03f      	b.n	8004a66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d106      	bne.n	8004a00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f7fd fcd4 	bl	80023a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2224      	movs	r2, #36	; 0x24
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68da      	ldr	r2, [r3, #12]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 fddb 	bl	80055d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	691a      	ldr	r2, [r3, #16]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	695a      	ldr	r2, [r3, #20]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68da      	ldr	r2, [r3, #12]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2220      	movs	r2, #32
 8004a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2220      	movs	r2, #32
 8004a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3708      	adds	r7, #8
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b08a      	sub	sp, #40	; 0x28
 8004a72:	af02      	add	r7, sp, #8
 8004a74:	60f8      	str	r0, [r7, #12]
 8004a76:	60b9      	str	r1, [r7, #8]
 8004a78:	603b      	str	r3, [r7, #0]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b20      	cmp	r3, #32
 8004a8c:	d17c      	bne.n	8004b88 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d002      	beq.n	8004a9a <HAL_UART_Transmit+0x2c>
 8004a94:	88fb      	ldrh	r3, [r7, #6]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e075      	b.n	8004b8a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d101      	bne.n	8004aac <HAL_UART_Transmit+0x3e>
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	e06e      	b.n	8004b8a <HAL_UART_Transmit+0x11c>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2221      	movs	r2, #33	; 0x21
 8004abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ac2:	f7fd fd85 	bl	80025d0 <HAL_GetTick>
 8004ac6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	88fa      	ldrh	r2, [r7, #6]
 8004acc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	88fa      	ldrh	r2, [r7, #6]
 8004ad2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004adc:	d108      	bne.n	8004af0 <HAL_UART_Transmit+0x82>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d104      	bne.n	8004af0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	61bb      	str	r3, [r7, #24]
 8004aee:	e003      	b.n	8004af8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004af4:	2300      	movs	r3, #0
 8004af6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004b00:	e02a      	b.n	8004b58 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	9300      	str	r3, [sp, #0]
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	2180      	movs	r1, #128	; 0x80
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f000 fb1f 	bl	8005150 <UART_WaitOnFlagUntilTimeout>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d001      	beq.n	8004b1c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e036      	b.n	8004b8a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10b      	bne.n	8004b3a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	881b      	ldrh	r3, [r3, #0]
 8004b26:	461a      	mov	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	3302      	adds	r3, #2
 8004b36:	61bb      	str	r3, [r7, #24]
 8004b38:	e007      	b.n	8004b4a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	781a      	ldrb	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	3301      	adds	r3, #1
 8004b48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	3b01      	subs	r3, #1
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1cf      	bne.n	8004b02 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	9300      	str	r3, [sp, #0]
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	2140      	movs	r1, #64	; 0x40
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f000 faef 	bl	8005150 <UART_WaitOnFlagUntilTimeout>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d001      	beq.n	8004b7c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e006      	b.n	8004b8a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004b84:	2300      	movs	r3, #0
 8004b86:	e000      	b.n	8004b8a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004b88:	2302      	movs	r3, #2
  }
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3720      	adds	r7, #32
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b084      	sub	sp, #16
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	60f8      	str	r0, [r7, #12]
 8004b9a:	60b9      	str	r1, [r7, #8]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	2b20      	cmp	r3, #32
 8004baa:	d11d      	bne.n	8004be8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d002      	beq.n	8004bb8 <HAL_UART_Receive_IT+0x26>
 8004bb2:	88fb      	ldrh	r3, [r7, #6]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e016      	b.n	8004bea <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d101      	bne.n	8004bca <HAL_UART_Receive_IT+0x38>
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	e00f      	b.n	8004bea <HAL_UART_Receive_IT+0x58>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004bd8:	88fb      	ldrh	r3, [r7, #6]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	68b9      	ldr	r1, [r7, #8]
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f000 fb24 	bl	800522c <UART_Start_Receive_IT>
 8004be4:	4603      	mov	r3, r0
 8004be6:	e000      	b.n	8004bea <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004be8:	2302      	movs	r3, #2
  }
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
	...

08004bf4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b0ba      	sub	sp, #232	; 0xe8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004c20:	2300      	movs	r3, #0
 8004c22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c2a:	f003 030f 	and.w	r3, r3, #15
 8004c2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004c32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10f      	bne.n	8004c5a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c3e:	f003 0320 	and.w	r3, r3, #32
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d009      	beq.n	8004c5a <HAL_UART_IRQHandler+0x66>
 8004c46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c4a:	f003 0320 	and.w	r3, r3, #32
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 fc03 	bl	800545e <UART_Receive_IT>
      return;
 8004c58:	e256      	b.n	8005108 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004c5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f000 80de 	beq.w	8004e20 <HAL_UART_IRQHandler+0x22c>
 8004c64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c68:	f003 0301 	and.w	r3, r3, #1
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d106      	bne.n	8004c7e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c74:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f000 80d1 	beq.w	8004e20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00b      	beq.n	8004ca2 <HAL_UART_IRQHandler+0xae>
 8004c8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d005      	beq.n	8004ca2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	f043 0201 	orr.w	r2, r3, #1
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ca6:	f003 0304 	and.w	r3, r3, #4
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00b      	beq.n	8004cc6 <HAL_UART_IRQHandler+0xd2>
 8004cae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d005      	beq.n	8004cc6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	f043 0202 	orr.w	r2, r3, #2
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00b      	beq.n	8004cea <HAL_UART_IRQHandler+0xf6>
 8004cd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d005      	beq.n	8004cea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce2:	f043 0204 	orr.w	r2, r3, #4
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cee:	f003 0308 	and.w	r3, r3, #8
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d011      	beq.n	8004d1a <HAL_UART_IRQHandler+0x126>
 8004cf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cfa:	f003 0320 	and.w	r3, r3, #32
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d105      	bne.n	8004d0e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d005      	beq.n	8004d1a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d12:	f043 0208 	orr.w	r2, r3, #8
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	f000 81ed 	beq.w	80050fe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d28:	f003 0320 	and.w	r3, r3, #32
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d008      	beq.n	8004d42 <HAL_UART_IRQHandler+0x14e>
 8004d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d34:	f003 0320 	and.w	r3, r3, #32
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d002      	beq.n	8004d42 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 fb8e 	bl	800545e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	695b      	ldr	r3, [r3, #20]
 8004d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d4c:	2b40      	cmp	r3, #64	; 0x40
 8004d4e:	bf0c      	ite	eq
 8004d50:	2301      	moveq	r3, #1
 8004d52:	2300      	movne	r3, #0
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5e:	f003 0308 	and.w	r3, r3, #8
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d103      	bne.n	8004d6e <HAL_UART_IRQHandler+0x17a>
 8004d66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d04f      	beq.n	8004e0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 fa96 	bl	80052a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7e:	2b40      	cmp	r3, #64	; 0x40
 8004d80:	d141      	bne.n	8004e06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	3314      	adds	r3, #20
 8004d88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d90:	e853 3f00 	ldrex	r3, [r3]
 8004d94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004d98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004da0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	3314      	adds	r3, #20
 8004daa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004dae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004db2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004dba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004dbe:	e841 2300 	strex	r3, r2, [r1]
 8004dc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004dc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1d9      	bne.n	8004d82 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d013      	beq.n	8004dfe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dda:	4a7d      	ldr	r2, [pc, #500]	; (8004fd0 <HAL_UART_IRQHandler+0x3dc>)
 8004ddc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7fd ffe3 	bl	8002dae <HAL_DMA_Abort_IT>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d016      	beq.n	8004e1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004df8:	4610      	mov	r0, r2
 8004dfa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dfc:	e00e      	b.n	8004e1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 f990 	bl	8005124 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e04:	e00a      	b.n	8004e1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 f98c 	bl	8005124 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e0c:	e006      	b.n	8004e1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 f988 	bl	8005124 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004e1a:	e170      	b.n	80050fe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e1c:	bf00      	nop
    return;
 8004e1e:	e16e      	b.n	80050fe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	f040 814a 	bne.w	80050be <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e2e:	f003 0310 	and.w	r3, r3, #16
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	f000 8143 	beq.w	80050be <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e3c:	f003 0310 	and.w	r3, r3, #16
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f000 813c 	beq.w	80050be <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e46:	2300      	movs	r3, #0
 8004e48:	60bb      	str	r3, [r7, #8]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	60bb      	str	r3, [r7, #8]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	60bb      	str	r3, [r7, #8]
 8004e5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e66:	2b40      	cmp	r3, #64	; 0x40
 8004e68:	f040 80b4 	bne.w	8004fd4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f000 8140 	beq.w	8005102 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	f080 8139 	bcs.w	8005102 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e96:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9c:	69db      	ldr	r3, [r3, #28]
 8004e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ea2:	f000 8088 	beq.w	8004fb6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	330c      	adds	r3, #12
 8004eac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004eb4:	e853 3f00 	ldrex	r3, [r3]
 8004eb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004ebc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ec0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ec4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	330c      	adds	r3, #12
 8004ece:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004ed2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ed6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eda:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004ede:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ee2:	e841 2300 	strex	r3, r2, [r1]
 8004ee6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004eea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1d9      	bne.n	8004ea6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	3314      	adds	r3, #20
 8004ef8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004efc:	e853 3f00 	ldrex	r3, [r3]
 8004f00:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004f02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f04:	f023 0301 	bic.w	r3, r3, #1
 8004f08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	3314      	adds	r3, #20
 8004f12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004f16:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004f1a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004f1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f22:	e841 2300 	strex	r3, r2, [r1]
 8004f26:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004f28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1e1      	bne.n	8004ef2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	3314      	adds	r3, #20
 8004f34:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f38:	e853 3f00 	ldrex	r3, [r3]
 8004f3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004f3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	3314      	adds	r3, #20
 8004f4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004f52:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004f54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f56:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004f58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f5a:	e841 2300 	strex	r3, r2, [r1]
 8004f5e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004f60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1e3      	bne.n	8004f2e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2220      	movs	r2, #32
 8004f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	330c      	adds	r3, #12
 8004f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f7e:	e853 3f00 	ldrex	r3, [r3]
 8004f82:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004f84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f86:	f023 0310 	bic.w	r3, r3, #16
 8004f8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	330c      	adds	r3, #12
 8004f94:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004f98:	65ba      	str	r2, [r7, #88]	; 0x58
 8004f9a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004fa0:	e841 2300 	strex	r3, r2, [r1]
 8004fa4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004fa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1e3      	bne.n	8004f74 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7fd fe8c 	bl	8002cce <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 f8b6 	bl	8005138 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004fcc:	e099      	b.n	8005102 <HAL_UART_IRQHandler+0x50e>
 8004fce:	bf00      	nop
 8004fd0:	08005367 	.word	0x08005367
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f000 808b 	beq.w	8005106 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004ff0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 8086 	beq.w	8005106 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	330c      	adds	r3, #12
 8005000:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005004:	e853 3f00 	ldrex	r3, [r3]
 8005008:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800500a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800500c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005010:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	330c      	adds	r3, #12
 800501a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800501e:	647a      	str	r2, [r7, #68]	; 0x44
 8005020:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005022:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005024:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005026:	e841 2300 	strex	r3, r2, [r1]
 800502a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800502c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1e3      	bne.n	8004ffa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	3314      	adds	r3, #20
 8005038:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	e853 3f00 	ldrex	r3, [r3]
 8005040:	623b      	str	r3, [r7, #32]
   return(result);
 8005042:	6a3b      	ldr	r3, [r7, #32]
 8005044:	f023 0301 	bic.w	r3, r3, #1
 8005048:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	3314      	adds	r3, #20
 8005052:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005056:	633a      	str	r2, [r7, #48]	; 0x30
 8005058:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800505a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800505c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800505e:	e841 2300 	strex	r3, r2, [r1]
 8005062:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1e3      	bne.n	8005032 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2220      	movs	r2, #32
 800506e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	330c      	adds	r3, #12
 800507e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	e853 3f00 	ldrex	r3, [r3]
 8005086:	60fb      	str	r3, [r7, #12]
   return(result);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f023 0310 	bic.w	r3, r3, #16
 800508e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	330c      	adds	r3, #12
 8005098:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800509c:	61fa      	str	r2, [r7, #28]
 800509e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a0:	69b9      	ldr	r1, [r7, #24]
 80050a2:	69fa      	ldr	r2, [r7, #28]
 80050a4:	e841 2300 	strex	r3, r2, [r1]
 80050a8:	617b      	str	r3, [r7, #20]
   return(result);
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d1e3      	bne.n	8005078 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80050b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80050b4:	4619      	mov	r1, r3
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f83e 	bl	8005138 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050bc:	e023      	b.n	8005106 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80050be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d009      	beq.n	80050de <HAL_UART_IRQHandler+0x4ea>
 80050ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d003      	beq.n	80050de <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 f959 	bl	800538e <UART_Transmit_IT>
    return;
 80050dc:	e014      	b.n	8005108 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80050de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00e      	beq.n	8005108 <HAL_UART_IRQHandler+0x514>
 80050ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d008      	beq.n	8005108 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f999 	bl	800542e <UART_EndTransmit_IT>
    return;
 80050fc:	e004      	b.n	8005108 <HAL_UART_IRQHandler+0x514>
    return;
 80050fe:	bf00      	nop
 8005100:	e002      	b.n	8005108 <HAL_UART_IRQHandler+0x514>
      return;
 8005102:	bf00      	nop
 8005104:	e000      	b.n	8005108 <HAL_UART_IRQHandler+0x514>
      return;
 8005106:	bf00      	nop
  }
}
 8005108:	37e8      	adds	r7, #232	; 0xe8
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop

08005110 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005118:	bf00      	nop
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	460b      	mov	r3, r1
 8005142:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005144:	bf00      	nop
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b090      	sub	sp, #64	; 0x40
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	603b      	str	r3, [r7, #0]
 800515c:	4613      	mov	r3, r2
 800515e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005160:	e050      	b.n	8005204 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005162:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005168:	d04c      	beq.n	8005204 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800516a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800516c:	2b00      	cmp	r3, #0
 800516e:	d007      	beq.n	8005180 <UART_WaitOnFlagUntilTimeout+0x30>
 8005170:	f7fd fa2e 	bl	80025d0 <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800517c:	429a      	cmp	r2, r3
 800517e:	d241      	bcs.n	8005204 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	330c      	adds	r3, #12
 8005186:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518a:	e853 3f00 	ldrex	r3, [r3]
 800518e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005192:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005196:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	330c      	adds	r3, #12
 800519e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80051a0:	637a      	str	r2, [r7, #52]	; 0x34
 80051a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051a8:	e841 2300 	strex	r3, r2, [r1]
 80051ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80051ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1e5      	bne.n	8005180 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	3314      	adds	r3, #20
 80051ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	e853 3f00 	ldrex	r3, [r3]
 80051c2:	613b      	str	r3, [r7, #16]
   return(result);
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	f023 0301 	bic.w	r3, r3, #1
 80051ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	3314      	adds	r3, #20
 80051d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051d4:	623a      	str	r2, [r7, #32]
 80051d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d8:	69f9      	ldr	r1, [r7, #28]
 80051da:	6a3a      	ldr	r2, [r7, #32]
 80051dc:	e841 2300 	strex	r3, r2, [r1]
 80051e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1e5      	bne.n	80051b4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2220      	movs	r2, #32
 80051ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2220      	movs	r2, #32
 80051f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e00f      	b.n	8005224 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	4013      	ands	r3, r2
 800520e:	68ba      	ldr	r2, [r7, #8]
 8005210:	429a      	cmp	r2, r3
 8005212:	bf0c      	ite	eq
 8005214:	2301      	moveq	r3, #1
 8005216:	2300      	movne	r3, #0
 8005218:	b2db      	uxtb	r3, r3
 800521a:	461a      	mov	r2, r3
 800521c:	79fb      	ldrb	r3, [r7, #7]
 800521e:	429a      	cmp	r2, r3
 8005220:	d09f      	beq.n	8005162 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3740      	adds	r7, #64	; 0x40
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	4613      	mov	r3, r2
 8005238:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	88fa      	ldrh	r2, [r7, #6]
 8005244:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	88fa      	ldrh	r2, [r7, #6]
 800524a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2222      	movs	r2, #34	; 0x22
 8005256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68da      	ldr	r2, [r3, #12]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005270:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	695a      	ldr	r2, [r3, #20]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f042 0201 	orr.w	r2, r2, #1
 8005280:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68da      	ldr	r2, [r3, #12]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f042 0220 	orr.w	r2, r2, #32
 8005290:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3714      	adds	r7, #20
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b095      	sub	sp, #84	; 0x54
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	330c      	adds	r3, #12
 80052ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052b2:	e853 3f00 	ldrex	r3, [r3]
 80052b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80052b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	330c      	adds	r3, #12
 80052c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052c8:	643a      	str	r2, [r7, #64]	; 0x40
 80052ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80052ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052d0:	e841 2300 	strex	r3, r2, [r1]
 80052d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1e5      	bne.n	80052a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	3314      	adds	r3, #20
 80052e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e4:	6a3b      	ldr	r3, [r7, #32]
 80052e6:	e853 3f00 	ldrex	r3, [r3]
 80052ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	f023 0301 	bic.w	r3, r3, #1
 80052f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	3314      	adds	r3, #20
 80052fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005300:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005302:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005304:	e841 2300 	strex	r3, r2, [r1]
 8005308:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1e5      	bne.n	80052dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005314:	2b01      	cmp	r3, #1
 8005316:	d119      	bne.n	800534c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	330c      	adds	r3, #12
 800531e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	e853 3f00 	ldrex	r3, [r3]
 8005326:	60bb      	str	r3, [r7, #8]
   return(result);
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	f023 0310 	bic.w	r3, r3, #16
 800532e:	647b      	str	r3, [r7, #68]	; 0x44
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	330c      	adds	r3, #12
 8005336:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005338:	61ba      	str	r2, [r7, #24]
 800533a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533c:	6979      	ldr	r1, [r7, #20]
 800533e:	69ba      	ldr	r2, [r7, #24]
 8005340:	e841 2300 	strex	r3, r2, [r1]
 8005344:	613b      	str	r3, [r7, #16]
   return(result);
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1e5      	bne.n	8005318 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2220      	movs	r2, #32
 8005350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	631a      	str	r2, [r3, #48]	; 0x30
}
 800535a:	bf00      	nop
 800535c:	3754      	adds	r7, #84	; 0x54
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr

08005366 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005366:	b580      	push	{r7, lr}
 8005368:	b084      	sub	sp, #16
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005372:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	f7ff fecf 	bl	8005124 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005386:	bf00      	nop
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800538e:	b480      	push	{r7}
 8005390:	b085      	sub	sp, #20
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b21      	cmp	r3, #33	; 0x21
 80053a0:	d13e      	bne.n	8005420 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053aa:	d114      	bne.n	80053d6 <UART_Transmit_IT+0x48>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d110      	bne.n	80053d6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a1b      	ldr	r3, [r3, #32]
 80053b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	881b      	ldrh	r3, [r3, #0]
 80053be:	461a      	mov	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a1b      	ldr	r3, [r3, #32]
 80053ce:	1c9a      	adds	r2, r3, #2
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	621a      	str	r2, [r3, #32]
 80053d4:	e008      	b.n	80053e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	1c59      	adds	r1, r3, #1
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	6211      	str	r1, [r2, #32]
 80053e0:	781a      	ldrb	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	3b01      	subs	r3, #1
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	4619      	mov	r1, r3
 80053f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d10f      	bne.n	800541c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68da      	ldr	r2, [r3, #12]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800540a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68da      	ldr	r2, [r3, #12]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800541a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800541c:	2300      	movs	r3, #0
 800541e:	e000      	b.n	8005422 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005420:	2302      	movs	r3, #2
  }
}
 8005422:	4618      	mov	r0, r3
 8005424:	3714      	adds	r7, #20
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800542e:	b580      	push	{r7, lr}
 8005430:	b082      	sub	sp, #8
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68da      	ldr	r2, [r3, #12]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005444:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2220      	movs	r2, #32
 800544a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7ff fe5e 	bl	8005110 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3708      	adds	r7, #8
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b08c      	sub	sp, #48	; 0x30
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2b22      	cmp	r3, #34	; 0x22
 8005470:	f040 80ab 	bne.w	80055ca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800547c:	d117      	bne.n	80054ae <UART_Receive_IT+0x50>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d113      	bne.n	80054ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005486:	2300      	movs	r3, #0
 8005488:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800548e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	b29b      	uxth	r3, r3
 8005498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800549c:	b29a      	uxth	r2, r3
 800549e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a6:	1c9a      	adds	r2, r3, #2
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	629a      	str	r2, [r3, #40]	; 0x28
 80054ac:	e026      	b.n	80054fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80054b4:	2300      	movs	r3, #0
 80054b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054c0:	d007      	beq.n	80054d2 <UART_Receive_IT+0x74>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10a      	bne.n	80054e0 <UART_Receive_IT+0x82>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d106      	bne.n	80054e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	b2da      	uxtb	r2, r3
 80054da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054dc:	701a      	strb	r2, [r3, #0]
 80054de:	e008      	b.n	80054f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054ec:	b2da      	uxtb	r2, r3
 80054ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f6:	1c5a      	adds	r2, r3, #1
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005500:	b29b      	uxth	r3, r3
 8005502:	3b01      	subs	r3, #1
 8005504:	b29b      	uxth	r3, r3
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	4619      	mov	r1, r3
 800550a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800550c:	2b00      	cmp	r3, #0
 800550e:	d15a      	bne.n	80055c6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68da      	ldr	r2, [r3, #12]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f022 0220 	bic.w	r2, r2, #32
 800551e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68da      	ldr	r2, [r3, #12]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800552e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	695a      	ldr	r2, [r3, #20]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f022 0201 	bic.w	r2, r2, #1
 800553e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2220      	movs	r2, #32
 8005544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554c:	2b01      	cmp	r3, #1
 800554e:	d135      	bne.n	80055bc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	330c      	adds	r3, #12
 800555c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	e853 3f00 	ldrex	r3, [r3]
 8005564:	613b      	str	r3, [r7, #16]
   return(result);
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	f023 0310 	bic.w	r3, r3, #16
 800556c:	627b      	str	r3, [r7, #36]	; 0x24
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	330c      	adds	r3, #12
 8005574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005576:	623a      	str	r2, [r7, #32]
 8005578:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557a:	69f9      	ldr	r1, [r7, #28]
 800557c:	6a3a      	ldr	r2, [r7, #32]
 800557e:	e841 2300 	strex	r3, r2, [r1]
 8005582:	61bb      	str	r3, [r7, #24]
   return(result);
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1e5      	bne.n	8005556 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0310 	and.w	r3, r3, #16
 8005594:	2b10      	cmp	r3, #16
 8005596:	d10a      	bne.n	80055ae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005598:	2300      	movs	r3, #0
 800559a:	60fb      	str	r3, [r7, #12]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	60fb      	str	r3, [r7, #12]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	60fb      	str	r3, [r7, #12]
 80055ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80055b2:	4619      	mov	r1, r3
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f7ff fdbf 	bl	8005138 <HAL_UARTEx_RxEventCallback>
 80055ba:	e002      	b.n	80055c2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f7fc fb69 	bl	8001c94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80055c2:	2300      	movs	r3, #0
 80055c4:	e002      	b.n	80055cc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80055c6:	2300      	movs	r3, #0
 80055c8:	e000      	b.n	80055cc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80055ca:	2302      	movs	r3, #2
  }
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3730      	adds	r7, #48	; 0x30
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055d8:	b09f      	sub	sp, #124	; 0x7c
 80055da:	af00      	add	r7, sp, #0
 80055dc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80055e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ea:	68d9      	ldr	r1, [r3, #12]
 80055ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	ea40 0301 	orr.w	r3, r0, r1
 80055f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055f8:	689a      	ldr	r2, [r3, #8]
 80055fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	431a      	orrs	r2, r3
 8005600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	431a      	orrs	r2, r3
 8005606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	4313      	orrs	r3, r2
 800560c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800560e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005618:	f021 010c 	bic.w	r1, r1, #12
 800561c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005622:	430b      	orrs	r3, r1
 8005624:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	695b      	ldr	r3, [r3, #20]
 800562c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005632:	6999      	ldr	r1, [r3, #24]
 8005634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	ea40 0301 	orr.w	r3, r0, r1
 800563c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800563e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	4bc5      	ldr	r3, [pc, #788]	; (8005958 <UART_SetConfig+0x384>)
 8005644:	429a      	cmp	r2, r3
 8005646:	d004      	beq.n	8005652 <UART_SetConfig+0x7e>
 8005648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	4bc3      	ldr	r3, [pc, #780]	; (800595c <UART_SetConfig+0x388>)
 800564e:	429a      	cmp	r2, r3
 8005650:	d103      	bne.n	800565a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005652:	f7ff f9ab 	bl	80049ac <HAL_RCC_GetPCLK2Freq>
 8005656:	6778      	str	r0, [r7, #116]	; 0x74
 8005658:	e002      	b.n	8005660 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800565a:	f7ff f993 	bl	8004984 <HAL_RCC_GetPCLK1Freq>
 800565e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005662:	69db      	ldr	r3, [r3, #28]
 8005664:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005668:	f040 80b6 	bne.w	80057d8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800566c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800566e:	461c      	mov	r4, r3
 8005670:	f04f 0500 	mov.w	r5, #0
 8005674:	4622      	mov	r2, r4
 8005676:	462b      	mov	r3, r5
 8005678:	1891      	adds	r1, r2, r2
 800567a:	6439      	str	r1, [r7, #64]	; 0x40
 800567c:	415b      	adcs	r3, r3
 800567e:	647b      	str	r3, [r7, #68]	; 0x44
 8005680:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005684:	1912      	adds	r2, r2, r4
 8005686:	eb45 0303 	adc.w	r3, r5, r3
 800568a:	f04f 0000 	mov.w	r0, #0
 800568e:	f04f 0100 	mov.w	r1, #0
 8005692:	00d9      	lsls	r1, r3, #3
 8005694:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005698:	00d0      	lsls	r0, r2, #3
 800569a:	4602      	mov	r2, r0
 800569c:	460b      	mov	r3, r1
 800569e:	1911      	adds	r1, r2, r4
 80056a0:	6639      	str	r1, [r7, #96]	; 0x60
 80056a2:	416b      	adcs	r3, r5
 80056a4:	667b      	str	r3, [r7, #100]	; 0x64
 80056a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	461a      	mov	r2, r3
 80056ac:	f04f 0300 	mov.w	r3, #0
 80056b0:	1891      	adds	r1, r2, r2
 80056b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80056b4:	415b      	adcs	r3, r3
 80056b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80056bc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80056c0:	f7fb faca 	bl	8000c58 <__aeabi_uldivmod>
 80056c4:	4602      	mov	r2, r0
 80056c6:	460b      	mov	r3, r1
 80056c8:	4ba5      	ldr	r3, [pc, #660]	; (8005960 <UART_SetConfig+0x38c>)
 80056ca:	fba3 2302 	umull	r2, r3, r3, r2
 80056ce:	095b      	lsrs	r3, r3, #5
 80056d0:	011e      	lsls	r6, r3, #4
 80056d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056d4:	461c      	mov	r4, r3
 80056d6:	f04f 0500 	mov.w	r5, #0
 80056da:	4622      	mov	r2, r4
 80056dc:	462b      	mov	r3, r5
 80056de:	1891      	adds	r1, r2, r2
 80056e0:	6339      	str	r1, [r7, #48]	; 0x30
 80056e2:	415b      	adcs	r3, r3
 80056e4:	637b      	str	r3, [r7, #52]	; 0x34
 80056e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80056ea:	1912      	adds	r2, r2, r4
 80056ec:	eb45 0303 	adc.w	r3, r5, r3
 80056f0:	f04f 0000 	mov.w	r0, #0
 80056f4:	f04f 0100 	mov.w	r1, #0
 80056f8:	00d9      	lsls	r1, r3, #3
 80056fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80056fe:	00d0      	lsls	r0, r2, #3
 8005700:	4602      	mov	r2, r0
 8005702:	460b      	mov	r3, r1
 8005704:	1911      	adds	r1, r2, r4
 8005706:	65b9      	str	r1, [r7, #88]	; 0x58
 8005708:	416b      	adcs	r3, r5
 800570a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800570c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	461a      	mov	r2, r3
 8005712:	f04f 0300 	mov.w	r3, #0
 8005716:	1891      	adds	r1, r2, r2
 8005718:	62b9      	str	r1, [r7, #40]	; 0x28
 800571a:	415b      	adcs	r3, r3
 800571c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800571e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005722:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005726:	f7fb fa97 	bl	8000c58 <__aeabi_uldivmod>
 800572a:	4602      	mov	r2, r0
 800572c:	460b      	mov	r3, r1
 800572e:	4b8c      	ldr	r3, [pc, #560]	; (8005960 <UART_SetConfig+0x38c>)
 8005730:	fba3 1302 	umull	r1, r3, r3, r2
 8005734:	095b      	lsrs	r3, r3, #5
 8005736:	2164      	movs	r1, #100	; 0x64
 8005738:	fb01 f303 	mul.w	r3, r1, r3
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	00db      	lsls	r3, r3, #3
 8005740:	3332      	adds	r3, #50	; 0x32
 8005742:	4a87      	ldr	r2, [pc, #540]	; (8005960 <UART_SetConfig+0x38c>)
 8005744:	fba2 2303 	umull	r2, r3, r2, r3
 8005748:	095b      	lsrs	r3, r3, #5
 800574a:	005b      	lsls	r3, r3, #1
 800574c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005750:	441e      	add	r6, r3
 8005752:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005754:	4618      	mov	r0, r3
 8005756:	f04f 0100 	mov.w	r1, #0
 800575a:	4602      	mov	r2, r0
 800575c:	460b      	mov	r3, r1
 800575e:	1894      	adds	r4, r2, r2
 8005760:	623c      	str	r4, [r7, #32]
 8005762:	415b      	adcs	r3, r3
 8005764:	627b      	str	r3, [r7, #36]	; 0x24
 8005766:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800576a:	1812      	adds	r2, r2, r0
 800576c:	eb41 0303 	adc.w	r3, r1, r3
 8005770:	f04f 0400 	mov.w	r4, #0
 8005774:	f04f 0500 	mov.w	r5, #0
 8005778:	00dd      	lsls	r5, r3, #3
 800577a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800577e:	00d4      	lsls	r4, r2, #3
 8005780:	4622      	mov	r2, r4
 8005782:	462b      	mov	r3, r5
 8005784:	1814      	adds	r4, r2, r0
 8005786:	653c      	str	r4, [r7, #80]	; 0x50
 8005788:	414b      	adcs	r3, r1
 800578a:	657b      	str	r3, [r7, #84]	; 0x54
 800578c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	461a      	mov	r2, r3
 8005792:	f04f 0300 	mov.w	r3, #0
 8005796:	1891      	adds	r1, r2, r2
 8005798:	61b9      	str	r1, [r7, #24]
 800579a:	415b      	adcs	r3, r3
 800579c:	61fb      	str	r3, [r7, #28]
 800579e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057a2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80057a6:	f7fb fa57 	bl	8000c58 <__aeabi_uldivmod>
 80057aa:	4602      	mov	r2, r0
 80057ac:	460b      	mov	r3, r1
 80057ae:	4b6c      	ldr	r3, [pc, #432]	; (8005960 <UART_SetConfig+0x38c>)
 80057b0:	fba3 1302 	umull	r1, r3, r3, r2
 80057b4:	095b      	lsrs	r3, r3, #5
 80057b6:	2164      	movs	r1, #100	; 0x64
 80057b8:	fb01 f303 	mul.w	r3, r1, r3
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	00db      	lsls	r3, r3, #3
 80057c0:	3332      	adds	r3, #50	; 0x32
 80057c2:	4a67      	ldr	r2, [pc, #412]	; (8005960 <UART_SetConfig+0x38c>)
 80057c4:	fba2 2303 	umull	r2, r3, r2, r3
 80057c8:	095b      	lsrs	r3, r3, #5
 80057ca:	f003 0207 	and.w	r2, r3, #7
 80057ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4432      	add	r2, r6
 80057d4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80057d6:	e0b9      	b.n	800594c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057da:	461c      	mov	r4, r3
 80057dc:	f04f 0500 	mov.w	r5, #0
 80057e0:	4622      	mov	r2, r4
 80057e2:	462b      	mov	r3, r5
 80057e4:	1891      	adds	r1, r2, r2
 80057e6:	6139      	str	r1, [r7, #16]
 80057e8:	415b      	adcs	r3, r3
 80057ea:	617b      	str	r3, [r7, #20]
 80057ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80057f0:	1912      	adds	r2, r2, r4
 80057f2:	eb45 0303 	adc.w	r3, r5, r3
 80057f6:	f04f 0000 	mov.w	r0, #0
 80057fa:	f04f 0100 	mov.w	r1, #0
 80057fe:	00d9      	lsls	r1, r3, #3
 8005800:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005804:	00d0      	lsls	r0, r2, #3
 8005806:	4602      	mov	r2, r0
 8005808:	460b      	mov	r3, r1
 800580a:	eb12 0804 	adds.w	r8, r2, r4
 800580e:	eb43 0905 	adc.w	r9, r3, r5
 8005812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	4618      	mov	r0, r3
 8005818:	f04f 0100 	mov.w	r1, #0
 800581c:	f04f 0200 	mov.w	r2, #0
 8005820:	f04f 0300 	mov.w	r3, #0
 8005824:	008b      	lsls	r3, r1, #2
 8005826:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800582a:	0082      	lsls	r2, r0, #2
 800582c:	4640      	mov	r0, r8
 800582e:	4649      	mov	r1, r9
 8005830:	f7fb fa12 	bl	8000c58 <__aeabi_uldivmod>
 8005834:	4602      	mov	r2, r0
 8005836:	460b      	mov	r3, r1
 8005838:	4b49      	ldr	r3, [pc, #292]	; (8005960 <UART_SetConfig+0x38c>)
 800583a:	fba3 2302 	umull	r2, r3, r3, r2
 800583e:	095b      	lsrs	r3, r3, #5
 8005840:	011e      	lsls	r6, r3, #4
 8005842:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005844:	4618      	mov	r0, r3
 8005846:	f04f 0100 	mov.w	r1, #0
 800584a:	4602      	mov	r2, r0
 800584c:	460b      	mov	r3, r1
 800584e:	1894      	adds	r4, r2, r2
 8005850:	60bc      	str	r4, [r7, #8]
 8005852:	415b      	adcs	r3, r3
 8005854:	60fb      	str	r3, [r7, #12]
 8005856:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800585a:	1812      	adds	r2, r2, r0
 800585c:	eb41 0303 	adc.w	r3, r1, r3
 8005860:	f04f 0400 	mov.w	r4, #0
 8005864:	f04f 0500 	mov.w	r5, #0
 8005868:	00dd      	lsls	r5, r3, #3
 800586a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800586e:	00d4      	lsls	r4, r2, #3
 8005870:	4622      	mov	r2, r4
 8005872:	462b      	mov	r3, r5
 8005874:	1814      	adds	r4, r2, r0
 8005876:	64bc      	str	r4, [r7, #72]	; 0x48
 8005878:	414b      	adcs	r3, r1
 800587a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800587c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	4618      	mov	r0, r3
 8005882:	f04f 0100 	mov.w	r1, #0
 8005886:	f04f 0200 	mov.w	r2, #0
 800588a:	f04f 0300 	mov.w	r3, #0
 800588e:	008b      	lsls	r3, r1, #2
 8005890:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005894:	0082      	lsls	r2, r0, #2
 8005896:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800589a:	f7fb f9dd 	bl	8000c58 <__aeabi_uldivmod>
 800589e:	4602      	mov	r2, r0
 80058a0:	460b      	mov	r3, r1
 80058a2:	4b2f      	ldr	r3, [pc, #188]	; (8005960 <UART_SetConfig+0x38c>)
 80058a4:	fba3 1302 	umull	r1, r3, r3, r2
 80058a8:	095b      	lsrs	r3, r3, #5
 80058aa:	2164      	movs	r1, #100	; 0x64
 80058ac:	fb01 f303 	mul.w	r3, r1, r3
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	011b      	lsls	r3, r3, #4
 80058b4:	3332      	adds	r3, #50	; 0x32
 80058b6:	4a2a      	ldr	r2, [pc, #168]	; (8005960 <UART_SetConfig+0x38c>)
 80058b8:	fba2 2303 	umull	r2, r3, r2, r3
 80058bc:	095b      	lsrs	r3, r3, #5
 80058be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058c2:	441e      	add	r6, r3
 80058c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058c6:	4618      	mov	r0, r3
 80058c8:	f04f 0100 	mov.w	r1, #0
 80058cc:	4602      	mov	r2, r0
 80058ce:	460b      	mov	r3, r1
 80058d0:	1894      	adds	r4, r2, r2
 80058d2:	603c      	str	r4, [r7, #0]
 80058d4:	415b      	adcs	r3, r3
 80058d6:	607b      	str	r3, [r7, #4]
 80058d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058dc:	1812      	adds	r2, r2, r0
 80058de:	eb41 0303 	adc.w	r3, r1, r3
 80058e2:	f04f 0400 	mov.w	r4, #0
 80058e6:	f04f 0500 	mov.w	r5, #0
 80058ea:	00dd      	lsls	r5, r3, #3
 80058ec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80058f0:	00d4      	lsls	r4, r2, #3
 80058f2:	4622      	mov	r2, r4
 80058f4:	462b      	mov	r3, r5
 80058f6:	eb12 0a00 	adds.w	sl, r2, r0
 80058fa:	eb43 0b01 	adc.w	fp, r3, r1
 80058fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	4618      	mov	r0, r3
 8005904:	f04f 0100 	mov.w	r1, #0
 8005908:	f04f 0200 	mov.w	r2, #0
 800590c:	f04f 0300 	mov.w	r3, #0
 8005910:	008b      	lsls	r3, r1, #2
 8005912:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005916:	0082      	lsls	r2, r0, #2
 8005918:	4650      	mov	r0, sl
 800591a:	4659      	mov	r1, fp
 800591c:	f7fb f99c 	bl	8000c58 <__aeabi_uldivmod>
 8005920:	4602      	mov	r2, r0
 8005922:	460b      	mov	r3, r1
 8005924:	4b0e      	ldr	r3, [pc, #56]	; (8005960 <UART_SetConfig+0x38c>)
 8005926:	fba3 1302 	umull	r1, r3, r3, r2
 800592a:	095b      	lsrs	r3, r3, #5
 800592c:	2164      	movs	r1, #100	; 0x64
 800592e:	fb01 f303 	mul.w	r3, r1, r3
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	011b      	lsls	r3, r3, #4
 8005936:	3332      	adds	r3, #50	; 0x32
 8005938:	4a09      	ldr	r2, [pc, #36]	; (8005960 <UART_SetConfig+0x38c>)
 800593a:	fba2 2303 	umull	r2, r3, r2, r3
 800593e:	095b      	lsrs	r3, r3, #5
 8005940:	f003 020f 	and.w	r2, r3, #15
 8005944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4432      	add	r2, r6
 800594a:	609a      	str	r2, [r3, #8]
}
 800594c:	bf00      	nop
 800594e:	377c      	adds	r7, #124	; 0x7c
 8005950:	46bd      	mov	sp, r7
 8005952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005956:	bf00      	nop
 8005958:	40011000 	.word	0x40011000
 800595c:	40011400 	.word	0x40011400
 8005960:	51eb851f 	.word	0x51eb851f

08005964 <__errno>:
 8005964:	4b01      	ldr	r3, [pc, #4]	; (800596c <__errno+0x8>)
 8005966:	6818      	ldr	r0, [r3, #0]
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	2000000c 	.word	0x2000000c

08005970 <__libc_init_array>:
 8005970:	b570      	push	{r4, r5, r6, lr}
 8005972:	4d0d      	ldr	r5, [pc, #52]	; (80059a8 <__libc_init_array+0x38>)
 8005974:	4c0d      	ldr	r4, [pc, #52]	; (80059ac <__libc_init_array+0x3c>)
 8005976:	1b64      	subs	r4, r4, r5
 8005978:	10a4      	asrs	r4, r4, #2
 800597a:	2600      	movs	r6, #0
 800597c:	42a6      	cmp	r6, r4
 800597e:	d109      	bne.n	8005994 <__libc_init_array+0x24>
 8005980:	4d0b      	ldr	r5, [pc, #44]	; (80059b0 <__libc_init_array+0x40>)
 8005982:	4c0c      	ldr	r4, [pc, #48]	; (80059b4 <__libc_init_array+0x44>)
 8005984:	f003 f92e 	bl	8008be4 <_init>
 8005988:	1b64      	subs	r4, r4, r5
 800598a:	10a4      	asrs	r4, r4, #2
 800598c:	2600      	movs	r6, #0
 800598e:	42a6      	cmp	r6, r4
 8005990:	d105      	bne.n	800599e <__libc_init_array+0x2e>
 8005992:	bd70      	pop	{r4, r5, r6, pc}
 8005994:	f855 3b04 	ldr.w	r3, [r5], #4
 8005998:	4798      	blx	r3
 800599a:	3601      	adds	r6, #1
 800599c:	e7ee      	b.n	800597c <__libc_init_array+0xc>
 800599e:	f855 3b04 	ldr.w	r3, [r5], #4
 80059a2:	4798      	blx	r3
 80059a4:	3601      	adds	r6, #1
 80059a6:	e7f2      	b.n	800598e <__libc_init_array+0x1e>
 80059a8:	080090b0 	.word	0x080090b0
 80059ac:	080090b0 	.word	0x080090b0
 80059b0:	080090b0 	.word	0x080090b0
 80059b4:	080090b4 	.word	0x080090b4

080059b8 <memset>:
 80059b8:	4402      	add	r2, r0
 80059ba:	4603      	mov	r3, r0
 80059bc:	4293      	cmp	r3, r2
 80059be:	d100      	bne.n	80059c2 <memset+0xa>
 80059c0:	4770      	bx	lr
 80059c2:	f803 1b01 	strb.w	r1, [r3], #1
 80059c6:	e7f9      	b.n	80059bc <memset+0x4>

080059c8 <__cvt>:
 80059c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059cc:	ec55 4b10 	vmov	r4, r5, d0
 80059d0:	2d00      	cmp	r5, #0
 80059d2:	460e      	mov	r6, r1
 80059d4:	4619      	mov	r1, r3
 80059d6:	462b      	mov	r3, r5
 80059d8:	bfbb      	ittet	lt
 80059da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80059de:	461d      	movlt	r5, r3
 80059e0:	2300      	movge	r3, #0
 80059e2:	232d      	movlt	r3, #45	; 0x2d
 80059e4:	700b      	strb	r3, [r1, #0]
 80059e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80059ec:	4691      	mov	r9, r2
 80059ee:	f023 0820 	bic.w	r8, r3, #32
 80059f2:	bfbc      	itt	lt
 80059f4:	4622      	movlt	r2, r4
 80059f6:	4614      	movlt	r4, r2
 80059f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80059fc:	d005      	beq.n	8005a0a <__cvt+0x42>
 80059fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005a02:	d100      	bne.n	8005a06 <__cvt+0x3e>
 8005a04:	3601      	adds	r6, #1
 8005a06:	2102      	movs	r1, #2
 8005a08:	e000      	b.n	8005a0c <__cvt+0x44>
 8005a0a:	2103      	movs	r1, #3
 8005a0c:	ab03      	add	r3, sp, #12
 8005a0e:	9301      	str	r3, [sp, #4]
 8005a10:	ab02      	add	r3, sp, #8
 8005a12:	9300      	str	r3, [sp, #0]
 8005a14:	ec45 4b10 	vmov	d0, r4, r5
 8005a18:	4653      	mov	r3, sl
 8005a1a:	4632      	mov	r2, r6
 8005a1c:	f000 fcec 	bl	80063f8 <_dtoa_r>
 8005a20:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005a24:	4607      	mov	r7, r0
 8005a26:	d102      	bne.n	8005a2e <__cvt+0x66>
 8005a28:	f019 0f01 	tst.w	r9, #1
 8005a2c:	d022      	beq.n	8005a74 <__cvt+0xac>
 8005a2e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005a32:	eb07 0906 	add.w	r9, r7, r6
 8005a36:	d110      	bne.n	8005a5a <__cvt+0x92>
 8005a38:	783b      	ldrb	r3, [r7, #0]
 8005a3a:	2b30      	cmp	r3, #48	; 0x30
 8005a3c:	d10a      	bne.n	8005a54 <__cvt+0x8c>
 8005a3e:	2200      	movs	r2, #0
 8005a40:	2300      	movs	r3, #0
 8005a42:	4620      	mov	r0, r4
 8005a44:	4629      	mov	r1, r5
 8005a46:	f7fb f847 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a4a:	b918      	cbnz	r0, 8005a54 <__cvt+0x8c>
 8005a4c:	f1c6 0601 	rsb	r6, r6, #1
 8005a50:	f8ca 6000 	str.w	r6, [sl]
 8005a54:	f8da 3000 	ldr.w	r3, [sl]
 8005a58:	4499      	add	r9, r3
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	4620      	mov	r0, r4
 8005a60:	4629      	mov	r1, r5
 8005a62:	f7fb f839 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a66:	b108      	cbz	r0, 8005a6c <__cvt+0xa4>
 8005a68:	f8cd 900c 	str.w	r9, [sp, #12]
 8005a6c:	2230      	movs	r2, #48	; 0x30
 8005a6e:	9b03      	ldr	r3, [sp, #12]
 8005a70:	454b      	cmp	r3, r9
 8005a72:	d307      	bcc.n	8005a84 <__cvt+0xbc>
 8005a74:	9b03      	ldr	r3, [sp, #12]
 8005a76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a78:	1bdb      	subs	r3, r3, r7
 8005a7a:	4638      	mov	r0, r7
 8005a7c:	6013      	str	r3, [r2, #0]
 8005a7e:	b004      	add	sp, #16
 8005a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a84:	1c59      	adds	r1, r3, #1
 8005a86:	9103      	str	r1, [sp, #12]
 8005a88:	701a      	strb	r2, [r3, #0]
 8005a8a:	e7f0      	b.n	8005a6e <__cvt+0xa6>

08005a8c <__exponent>:
 8005a8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2900      	cmp	r1, #0
 8005a92:	bfb8      	it	lt
 8005a94:	4249      	neglt	r1, r1
 8005a96:	f803 2b02 	strb.w	r2, [r3], #2
 8005a9a:	bfb4      	ite	lt
 8005a9c:	222d      	movlt	r2, #45	; 0x2d
 8005a9e:	222b      	movge	r2, #43	; 0x2b
 8005aa0:	2909      	cmp	r1, #9
 8005aa2:	7042      	strb	r2, [r0, #1]
 8005aa4:	dd2a      	ble.n	8005afc <__exponent+0x70>
 8005aa6:	f10d 0407 	add.w	r4, sp, #7
 8005aaa:	46a4      	mov	ip, r4
 8005aac:	270a      	movs	r7, #10
 8005aae:	46a6      	mov	lr, r4
 8005ab0:	460a      	mov	r2, r1
 8005ab2:	fb91 f6f7 	sdiv	r6, r1, r7
 8005ab6:	fb07 1516 	mls	r5, r7, r6, r1
 8005aba:	3530      	adds	r5, #48	; 0x30
 8005abc:	2a63      	cmp	r2, #99	; 0x63
 8005abe:	f104 34ff 	add.w	r4, r4, #4294967295
 8005ac2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005ac6:	4631      	mov	r1, r6
 8005ac8:	dcf1      	bgt.n	8005aae <__exponent+0x22>
 8005aca:	3130      	adds	r1, #48	; 0x30
 8005acc:	f1ae 0502 	sub.w	r5, lr, #2
 8005ad0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005ad4:	1c44      	adds	r4, r0, #1
 8005ad6:	4629      	mov	r1, r5
 8005ad8:	4561      	cmp	r1, ip
 8005ada:	d30a      	bcc.n	8005af2 <__exponent+0x66>
 8005adc:	f10d 0209 	add.w	r2, sp, #9
 8005ae0:	eba2 020e 	sub.w	r2, r2, lr
 8005ae4:	4565      	cmp	r5, ip
 8005ae6:	bf88      	it	hi
 8005ae8:	2200      	movhi	r2, #0
 8005aea:	4413      	add	r3, r2
 8005aec:	1a18      	subs	r0, r3, r0
 8005aee:	b003      	add	sp, #12
 8005af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005af2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005af6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005afa:	e7ed      	b.n	8005ad8 <__exponent+0x4c>
 8005afc:	2330      	movs	r3, #48	; 0x30
 8005afe:	3130      	adds	r1, #48	; 0x30
 8005b00:	7083      	strb	r3, [r0, #2]
 8005b02:	70c1      	strb	r1, [r0, #3]
 8005b04:	1d03      	adds	r3, r0, #4
 8005b06:	e7f1      	b.n	8005aec <__exponent+0x60>

08005b08 <_printf_float>:
 8005b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b0c:	ed2d 8b02 	vpush	{d8}
 8005b10:	b08d      	sub	sp, #52	; 0x34
 8005b12:	460c      	mov	r4, r1
 8005b14:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005b18:	4616      	mov	r6, r2
 8005b1a:	461f      	mov	r7, r3
 8005b1c:	4605      	mov	r5, r0
 8005b1e:	f001 fa57 	bl	8006fd0 <_localeconv_r>
 8005b22:	f8d0 a000 	ldr.w	sl, [r0]
 8005b26:	4650      	mov	r0, sl
 8005b28:	f7fa fb5a 	bl	80001e0 <strlen>
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	930a      	str	r3, [sp, #40]	; 0x28
 8005b30:	6823      	ldr	r3, [r4, #0]
 8005b32:	9305      	str	r3, [sp, #20]
 8005b34:	f8d8 3000 	ldr.w	r3, [r8]
 8005b38:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005b3c:	3307      	adds	r3, #7
 8005b3e:	f023 0307 	bic.w	r3, r3, #7
 8005b42:	f103 0208 	add.w	r2, r3, #8
 8005b46:	f8c8 2000 	str.w	r2, [r8]
 8005b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b4e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005b52:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005b56:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005b5a:	9307      	str	r3, [sp, #28]
 8005b5c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005b60:	ee08 0a10 	vmov	s16, r0
 8005b64:	4b9f      	ldr	r3, [pc, #636]	; (8005de4 <_printf_float+0x2dc>)
 8005b66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b6e:	f7fa ffe5 	bl	8000b3c <__aeabi_dcmpun>
 8005b72:	bb88      	cbnz	r0, 8005bd8 <_printf_float+0xd0>
 8005b74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b78:	4b9a      	ldr	r3, [pc, #616]	; (8005de4 <_printf_float+0x2dc>)
 8005b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b7e:	f7fa ffbf 	bl	8000b00 <__aeabi_dcmple>
 8005b82:	bb48      	cbnz	r0, 8005bd8 <_printf_float+0xd0>
 8005b84:	2200      	movs	r2, #0
 8005b86:	2300      	movs	r3, #0
 8005b88:	4640      	mov	r0, r8
 8005b8a:	4649      	mov	r1, r9
 8005b8c:	f7fa ffae 	bl	8000aec <__aeabi_dcmplt>
 8005b90:	b110      	cbz	r0, 8005b98 <_printf_float+0x90>
 8005b92:	232d      	movs	r3, #45	; 0x2d
 8005b94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b98:	4b93      	ldr	r3, [pc, #588]	; (8005de8 <_printf_float+0x2e0>)
 8005b9a:	4894      	ldr	r0, [pc, #592]	; (8005dec <_printf_float+0x2e4>)
 8005b9c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005ba0:	bf94      	ite	ls
 8005ba2:	4698      	movls	r8, r3
 8005ba4:	4680      	movhi	r8, r0
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	6123      	str	r3, [r4, #16]
 8005baa:	9b05      	ldr	r3, [sp, #20]
 8005bac:	f023 0204 	bic.w	r2, r3, #4
 8005bb0:	6022      	str	r2, [r4, #0]
 8005bb2:	f04f 0900 	mov.w	r9, #0
 8005bb6:	9700      	str	r7, [sp, #0]
 8005bb8:	4633      	mov	r3, r6
 8005bba:	aa0b      	add	r2, sp, #44	; 0x2c
 8005bbc:	4621      	mov	r1, r4
 8005bbe:	4628      	mov	r0, r5
 8005bc0:	f000 f9d8 	bl	8005f74 <_printf_common>
 8005bc4:	3001      	adds	r0, #1
 8005bc6:	f040 8090 	bne.w	8005cea <_printf_float+0x1e2>
 8005bca:	f04f 30ff 	mov.w	r0, #4294967295
 8005bce:	b00d      	add	sp, #52	; 0x34
 8005bd0:	ecbd 8b02 	vpop	{d8}
 8005bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bd8:	4642      	mov	r2, r8
 8005bda:	464b      	mov	r3, r9
 8005bdc:	4640      	mov	r0, r8
 8005bde:	4649      	mov	r1, r9
 8005be0:	f7fa ffac 	bl	8000b3c <__aeabi_dcmpun>
 8005be4:	b140      	cbz	r0, 8005bf8 <_printf_float+0xf0>
 8005be6:	464b      	mov	r3, r9
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	bfbc      	itt	lt
 8005bec:	232d      	movlt	r3, #45	; 0x2d
 8005bee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005bf2:	487f      	ldr	r0, [pc, #508]	; (8005df0 <_printf_float+0x2e8>)
 8005bf4:	4b7f      	ldr	r3, [pc, #508]	; (8005df4 <_printf_float+0x2ec>)
 8005bf6:	e7d1      	b.n	8005b9c <_printf_float+0x94>
 8005bf8:	6863      	ldr	r3, [r4, #4]
 8005bfa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005bfe:	9206      	str	r2, [sp, #24]
 8005c00:	1c5a      	adds	r2, r3, #1
 8005c02:	d13f      	bne.n	8005c84 <_printf_float+0x17c>
 8005c04:	2306      	movs	r3, #6
 8005c06:	6063      	str	r3, [r4, #4]
 8005c08:	9b05      	ldr	r3, [sp, #20]
 8005c0a:	6861      	ldr	r1, [r4, #4]
 8005c0c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005c10:	2300      	movs	r3, #0
 8005c12:	9303      	str	r3, [sp, #12]
 8005c14:	ab0a      	add	r3, sp, #40	; 0x28
 8005c16:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005c1a:	ab09      	add	r3, sp, #36	; 0x24
 8005c1c:	ec49 8b10 	vmov	d0, r8, r9
 8005c20:	9300      	str	r3, [sp, #0]
 8005c22:	6022      	str	r2, [r4, #0]
 8005c24:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005c28:	4628      	mov	r0, r5
 8005c2a:	f7ff fecd 	bl	80059c8 <__cvt>
 8005c2e:	9b06      	ldr	r3, [sp, #24]
 8005c30:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c32:	2b47      	cmp	r3, #71	; 0x47
 8005c34:	4680      	mov	r8, r0
 8005c36:	d108      	bne.n	8005c4a <_printf_float+0x142>
 8005c38:	1cc8      	adds	r0, r1, #3
 8005c3a:	db02      	blt.n	8005c42 <_printf_float+0x13a>
 8005c3c:	6863      	ldr	r3, [r4, #4]
 8005c3e:	4299      	cmp	r1, r3
 8005c40:	dd41      	ble.n	8005cc6 <_printf_float+0x1be>
 8005c42:	f1ab 0b02 	sub.w	fp, fp, #2
 8005c46:	fa5f fb8b 	uxtb.w	fp, fp
 8005c4a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005c4e:	d820      	bhi.n	8005c92 <_printf_float+0x18a>
 8005c50:	3901      	subs	r1, #1
 8005c52:	465a      	mov	r2, fp
 8005c54:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005c58:	9109      	str	r1, [sp, #36]	; 0x24
 8005c5a:	f7ff ff17 	bl	8005a8c <__exponent>
 8005c5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c60:	1813      	adds	r3, r2, r0
 8005c62:	2a01      	cmp	r2, #1
 8005c64:	4681      	mov	r9, r0
 8005c66:	6123      	str	r3, [r4, #16]
 8005c68:	dc02      	bgt.n	8005c70 <_printf_float+0x168>
 8005c6a:	6822      	ldr	r2, [r4, #0]
 8005c6c:	07d2      	lsls	r2, r2, #31
 8005c6e:	d501      	bpl.n	8005c74 <_printf_float+0x16c>
 8005c70:	3301      	adds	r3, #1
 8005c72:	6123      	str	r3, [r4, #16]
 8005c74:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d09c      	beq.n	8005bb6 <_printf_float+0xae>
 8005c7c:	232d      	movs	r3, #45	; 0x2d
 8005c7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c82:	e798      	b.n	8005bb6 <_printf_float+0xae>
 8005c84:	9a06      	ldr	r2, [sp, #24]
 8005c86:	2a47      	cmp	r2, #71	; 0x47
 8005c88:	d1be      	bne.n	8005c08 <_printf_float+0x100>
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d1bc      	bne.n	8005c08 <_printf_float+0x100>
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e7b9      	b.n	8005c06 <_printf_float+0xfe>
 8005c92:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005c96:	d118      	bne.n	8005cca <_printf_float+0x1c2>
 8005c98:	2900      	cmp	r1, #0
 8005c9a:	6863      	ldr	r3, [r4, #4]
 8005c9c:	dd0b      	ble.n	8005cb6 <_printf_float+0x1ae>
 8005c9e:	6121      	str	r1, [r4, #16]
 8005ca0:	b913      	cbnz	r3, 8005ca8 <_printf_float+0x1a0>
 8005ca2:	6822      	ldr	r2, [r4, #0]
 8005ca4:	07d0      	lsls	r0, r2, #31
 8005ca6:	d502      	bpl.n	8005cae <_printf_float+0x1a6>
 8005ca8:	3301      	adds	r3, #1
 8005caa:	440b      	add	r3, r1
 8005cac:	6123      	str	r3, [r4, #16]
 8005cae:	65a1      	str	r1, [r4, #88]	; 0x58
 8005cb0:	f04f 0900 	mov.w	r9, #0
 8005cb4:	e7de      	b.n	8005c74 <_printf_float+0x16c>
 8005cb6:	b913      	cbnz	r3, 8005cbe <_printf_float+0x1b6>
 8005cb8:	6822      	ldr	r2, [r4, #0]
 8005cba:	07d2      	lsls	r2, r2, #31
 8005cbc:	d501      	bpl.n	8005cc2 <_printf_float+0x1ba>
 8005cbe:	3302      	adds	r3, #2
 8005cc0:	e7f4      	b.n	8005cac <_printf_float+0x1a4>
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e7f2      	b.n	8005cac <_printf_float+0x1a4>
 8005cc6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005cca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ccc:	4299      	cmp	r1, r3
 8005cce:	db05      	blt.n	8005cdc <_printf_float+0x1d4>
 8005cd0:	6823      	ldr	r3, [r4, #0]
 8005cd2:	6121      	str	r1, [r4, #16]
 8005cd4:	07d8      	lsls	r0, r3, #31
 8005cd6:	d5ea      	bpl.n	8005cae <_printf_float+0x1a6>
 8005cd8:	1c4b      	adds	r3, r1, #1
 8005cda:	e7e7      	b.n	8005cac <_printf_float+0x1a4>
 8005cdc:	2900      	cmp	r1, #0
 8005cde:	bfd4      	ite	le
 8005ce0:	f1c1 0202 	rsble	r2, r1, #2
 8005ce4:	2201      	movgt	r2, #1
 8005ce6:	4413      	add	r3, r2
 8005ce8:	e7e0      	b.n	8005cac <_printf_float+0x1a4>
 8005cea:	6823      	ldr	r3, [r4, #0]
 8005cec:	055a      	lsls	r2, r3, #21
 8005cee:	d407      	bmi.n	8005d00 <_printf_float+0x1f8>
 8005cf0:	6923      	ldr	r3, [r4, #16]
 8005cf2:	4642      	mov	r2, r8
 8005cf4:	4631      	mov	r1, r6
 8005cf6:	4628      	mov	r0, r5
 8005cf8:	47b8      	blx	r7
 8005cfa:	3001      	adds	r0, #1
 8005cfc:	d12c      	bne.n	8005d58 <_printf_float+0x250>
 8005cfe:	e764      	b.n	8005bca <_printf_float+0xc2>
 8005d00:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005d04:	f240 80e0 	bls.w	8005ec8 <_printf_float+0x3c0>
 8005d08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	2300      	movs	r3, #0
 8005d10:	f7fa fee2 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d14:	2800      	cmp	r0, #0
 8005d16:	d034      	beq.n	8005d82 <_printf_float+0x27a>
 8005d18:	4a37      	ldr	r2, [pc, #220]	; (8005df8 <_printf_float+0x2f0>)
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	4631      	mov	r1, r6
 8005d1e:	4628      	mov	r0, r5
 8005d20:	47b8      	blx	r7
 8005d22:	3001      	adds	r0, #1
 8005d24:	f43f af51 	beq.w	8005bca <_printf_float+0xc2>
 8005d28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	db02      	blt.n	8005d36 <_printf_float+0x22e>
 8005d30:	6823      	ldr	r3, [r4, #0]
 8005d32:	07d8      	lsls	r0, r3, #31
 8005d34:	d510      	bpl.n	8005d58 <_printf_float+0x250>
 8005d36:	ee18 3a10 	vmov	r3, s16
 8005d3a:	4652      	mov	r2, sl
 8005d3c:	4631      	mov	r1, r6
 8005d3e:	4628      	mov	r0, r5
 8005d40:	47b8      	blx	r7
 8005d42:	3001      	adds	r0, #1
 8005d44:	f43f af41 	beq.w	8005bca <_printf_float+0xc2>
 8005d48:	f04f 0800 	mov.w	r8, #0
 8005d4c:	f104 091a 	add.w	r9, r4, #26
 8005d50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d52:	3b01      	subs	r3, #1
 8005d54:	4543      	cmp	r3, r8
 8005d56:	dc09      	bgt.n	8005d6c <_printf_float+0x264>
 8005d58:	6823      	ldr	r3, [r4, #0]
 8005d5a:	079b      	lsls	r3, r3, #30
 8005d5c:	f100 8105 	bmi.w	8005f6a <_printf_float+0x462>
 8005d60:	68e0      	ldr	r0, [r4, #12]
 8005d62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d64:	4298      	cmp	r0, r3
 8005d66:	bfb8      	it	lt
 8005d68:	4618      	movlt	r0, r3
 8005d6a:	e730      	b.n	8005bce <_printf_float+0xc6>
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	464a      	mov	r2, r9
 8005d70:	4631      	mov	r1, r6
 8005d72:	4628      	mov	r0, r5
 8005d74:	47b8      	blx	r7
 8005d76:	3001      	adds	r0, #1
 8005d78:	f43f af27 	beq.w	8005bca <_printf_float+0xc2>
 8005d7c:	f108 0801 	add.w	r8, r8, #1
 8005d80:	e7e6      	b.n	8005d50 <_printf_float+0x248>
 8005d82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	dc39      	bgt.n	8005dfc <_printf_float+0x2f4>
 8005d88:	4a1b      	ldr	r2, [pc, #108]	; (8005df8 <_printf_float+0x2f0>)
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	4631      	mov	r1, r6
 8005d8e:	4628      	mov	r0, r5
 8005d90:	47b8      	blx	r7
 8005d92:	3001      	adds	r0, #1
 8005d94:	f43f af19 	beq.w	8005bca <_printf_float+0xc2>
 8005d98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	d102      	bne.n	8005da6 <_printf_float+0x29e>
 8005da0:	6823      	ldr	r3, [r4, #0]
 8005da2:	07d9      	lsls	r1, r3, #31
 8005da4:	d5d8      	bpl.n	8005d58 <_printf_float+0x250>
 8005da6:	ee18 3a10 	vmov	r3, s16
 8005daa:	4652      	mov	r2, sl
 8005dac:	4631      	mov	r1, r6
 8005dae:	4628      	mov	r0, r5
 8005db0:	47b8      	blx	r7
 8005db2:	3001      	adds	r0, #1
 8005db4:	f43f af09 	beq.w	8005bca <_printf_float+0xc2>
 8005db8:	f04f 0900 	mov.w	r9, #0
 8005dbc:	f104 0a1a 	add.w	sl, r4, #26
 8005dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dc2:	425b      	negs	r3, r3
 8005dc4:	454b      	cmp	r3, r9
 8005dc6:	dc01      	bgt.n	8005dcc <_printf_float+0x2c4>
 8005dc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dca:	e792      	b.n	8005cf2 <_printf_float+0x1ea>
 8005dcc:	2301      	movs	r3, #1
 8005dce:	4652      	mov	r2, sl
 8005dd0:	4631      	mov	r1, r6
 8005dd2:	4628      	mov	r0, r5
 8005dd4:	47b8      	blx	r7
 8005dd6:	3001      	adds	r0, #1
 8005dd8:	f43f aef7 	beq.w	8005bca <_printf_float+0xc2>
 8005ddc:	f109 0901 	add.w	r9, r9, #1
 8005de0:	e7ee      	b.n	8005dc0 <_printf_float+0x2b8>
 8005de2:	bf00      	nop
 8005de4:	7fefffff 	.word	0x7fefffff
 8005de8:	08008c54 	.word	0x08008c54
 8005dec:	08008c58 	.word	0x08008c58
 8005df0:	08008c60 	.word	0x08008c60
 8005df4:	08008c5c 	.word	0x08008c5c
 8005df8:	08008c64 	.word	0x08008c64
 8005dfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005dfe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e00:	429a      	cmp	r2, r3
 8005e02:	bfa8      	it	ge
 8005e04:	461a      	movge	r2, r3
 8005e06:	2a00      	cmp	r2, #0
 8005e08:	4691      	mov	r9, r2
 8005e0a:	dc37      	bgt.n	8005e7c <_printf_float+0x374>
 8005e0c:	f04f 0b00 	mov.w	fp, #0
 8005e10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e14:	f104 021a 	add.w	r2, r4, #26
 8005e18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e1a:	9305      	str	r3, [sp, #20]
 8005e1c:	eba3 0309 	sub.w	r3, r3, r9
 8005e20:	455b      	cmp	r3, fp
 8005e22:	dc33      	bgt.n	8005e8c <_printf_float+0x384>
 8005e24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	db3b      	blt.n	8005ea4 <_printf_float+0x39c>
 8005e2c:	6823      	ldr	r3, [r4, #0]
 8005e2e:	07da      	lsls	r2, r3, #31
 8005e30:	d438      	bmi.n	8005ea4 <_printf_float+0x39c>
 8005e32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e34:	9b05      	ldr	r3, [sp, #20]
 8005e36:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	eba2 0901 	sub.w	r9, r2, r1
 8005e3e:	4599      	cmp	r9, r3
 8005e40:	bfa8      	it	ge
 8005e42:	4699      	movge	r9, r3
 8005e44:	f1b9 0f00 	cmp.w	r9, #0
 8005e48:	dc35      	bgt.n	8005eb6 <_printf_float+0x3ae>
 8005e4a:	f04f 0800 	mov.w	r8, #0
 8005e4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e52:	f104 0a1a 	add.w	sl, r4, #26
 8005e56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e5a:	1a9b      	subs	r3, r3, r2
 8005e5c:	eba3 0309 	sub.w	r3, r3, r9
 8005e60:	4543      	cmp	r3, r8
 8005e62:	f77f af79 	ble.w	8005d58 <_printf_float+0x250>
 8005e66:	2301      	movs	r3, #1
 8005e68:	4652      	mov	r2, sl
 8005e6a:	4631      	mov	r1, r6
 8005e6c:	4628      	mov	r0, r5
 8005e6e:	47b8      	blx	r7
 8005e70:	3001      	adds	r0, #1
 8005e72:	f43f aeaa 	beq.w	8005bca <_printf_float+0xc2>
 8005e76:	f108 0801 	add.w	r8, r8, #1
 8005e7a:	e7ec      	b.n	8005e56 <_printf_float+0x34e>
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	4631      	mov	r1, r6
 8005e80:	4642      	mov	r2, r8
 8005e82:	4628      	mov	r0, r5
 8005e84:	47b8      	blx	r7
 8005e86:	3001      	adds	r0, #1
 8005e88:	d1c0      	bne.n	8005e0c <_printf_float+0x304>
 8005e8a:	e69e      	b.n	8005bca <_printf_float+0xc2>
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	4631      	mov	r1, r6
 8005e90:	4628      	mov	r0, r5
 8005e92:	9205      	str	r2, [sp, #20]
 8005e94:	47b8      	blx	r7
 8005e96:	3001      	adds	r0, #1
 8005e98:	f43f ae97 	beq.w	8005bca <_printf_float+0xc2>
 8005e9c:	9a05      	ldr	r2, [sp, #20]
 8005e9e:	f10b 0b01 	add.w	fp, fp, #1
 8005ea2:	e7b9      	b.n	8005e18 <_printf_float+0x310>
 8005ea4:	ee18 3a10 	vmov	r3, s16
 8005ea8:	4652      	mov	r2, sl
 8005eaa:	4631      	mov	r1, r6
 8005eac:	4628      	mov	r0, r5
 8005eae:	47b8      	blx	r7
 8005eb0:	3001      	adds	r0, #1
 8005eb2:	d1be      	bne.n	8005e32 <_printf_float+0x32a>
 8005eb4:	e689      	b.n	8005bca <_printf_float+0xc2>
 8005eb6:	9a05      	ldr	r2, [sp, #20]
 8005eb8:	464b      	mov	r3, r9
 8005eba:	4442      	add	r2, r8
 8005ebc:	4631      	mov	r1, r6
 8005ebe:	4628      	mov	r0, r5
 8005ec0:	47b8      	blx	r7
 8005ec2:	3001      	adds	r0, #1
 8005ec4:	d1c1      	bne.n	8005e4a <_printf_float+0x342>
 8005ec6:	e680      	b.n	8005bca <_printf_float+0xc2>
 8005ec8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005eca:	2a01      	cmp	r2, #1
 8005ecc:	dc01      	bgt.n	8005ed2 <_printf_float+0x3ca>
 8005ece:	07db      	lsls	r3, r3, #31
 8005ed0:	d538      	bpl.n	8005f44 <_printf_float+0x43c>
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	4642      	mov	r2, r8
 8005ed6:	4631      	mov	r1, r6
 8005ed8:	4628      	mov	r0, r5
 8005eda:	47b8      	blx	r7
 8005edc:	3001      	adds	r0, #1
 8005ede:	f43f ae74 	beq.w	8005bca <_printf_float+0xc2>
 8005ee2:	ee18 3a10 	vmov	r3, s16
 8005ee6:	4652      	mov	r2, sl
 8005ee8:	4631      	mov	r1, r6
 8005eea:	4628      	mov	r0, r5
 8005eec:	47b8      	blx	r7
 8005eee:	3001      	adds	r0, #1
 8005ef0:	f43f ae6b 	beq.w	8005bca <_printf_float+0xc2>
 8005ef4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ef8:	2200      	movs	r2, #0
 8005efa:	2300      	movs	r3, #0
 8005efc:	f7fa fdec 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f00:	b9d8      	cbnz	r0, 8005f3a <_printf_float+0x432>
 8005f02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f04:	f108 0201 	add.w	r2, r8, #1
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	4631      	mov	r1, r6
 8005f0c:	4628      	mov	r0, r5
 8005f0e:	47b8      	blx	r7
 8005f10:	3001      	adds	r0, #1
 8005f12:	d10e      	bne.n	8005f32 <_printf_float+0x42a>
 8005f14:	e659      	b.n	8005bca <_printf_float+0xc2>
 8005f16:	2301      	movs	r3, #1
 8005f18:	4652      	mov	r2, sl
 8005f1a:	4631      	mov	r1, r6
 8005f1c:	4628      	mov	r0, r5
 8005f1e:	47b8      	blx	r7
 8005f20:	3001      	adds	r0, #1
 8005f22:	f43f ae52 	beq.w	8005bca <_printf_float+0xc2>
 8005f26:	f108 0801 	add.w	r8, r8, #1
 8005f2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	4543      	cmp	r3, r8
 8005f30:	dcf1      	bgt.n	8005f16 <_printf_float+0x40e>
 8005f32:	464b      	mov	r3, r9
 8005f34:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005f38:	e6dc      	b.n	8005cf4 <_printf_float+0x1ec>
 8005f3a:	f04f 0800 	mov.w	r8, #0
 8005f3e:	f104 0a1a 	add.w	sl, r4, #26
 8005f42:	e7f2      	b.n	8005f2a <_printf_float+0x422>
 8005f44:	2301      	movs	r3, #1
 8005f46:	4642      	mov	r2, r8
 8005f48:	e7df      	b.n	8005f0a <_printf_float+0x402>
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	464a      	mov	r2, r9
 8005f4e:	4631      	mov	r1, r6
 8005f50:	4628      	mov	r0, r5
 8005f52:	47b8      	blx	r7
 8005f54:	3001      	adds	r0, #1
 8005f56:	f43f ae38 	beq.w	8005bca <_printf_float+0xc2>
 8005f5a:	f108 0801 	add.w	r8, r8, #1
 8005f5e:	68e3      	ldr	r3, [r4, #12]
 8005f60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005f62:	1a5b      	subs	r3, r3, r1
 8005f64:	4543      	cmp	r3, r8
 8005f66:	dcf0      	bgt.n	8005f4a <_printf_float+0x442>
 8005f68:	e6fa      	b.n	8005d60 <_printf_float+0x258>
 8005f6a:	f04f 0800 	mov.w	r8, #0
 8005f6e:	f104 0919 	add.w	r9, r4, #25
 8005f72:	e7f4      	b.n	8005f5e <_printf_float+0x456>

08005f74 <_printf_common>:
 8005f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f78:	4616      	mov	r6, r2
 8005f7a:	4699      	mov	r9, r3
 8005f7c:	688a      	ldr	r2, [r1, #8]
 8005f7e:	690b      	ldr	r3, [r1, #16]
 8005f80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f84:	4293      	cmp	r3, r2
 8005f86:	bfb8      	it	lt
 8005f88:	4613      	movlt	r3, r2
 8005f8a:	6033      	str	r3, [r6, #0]
 8005f8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f90:	4607      	mov	r7, r0
 8005f92:	460c      	mov	r4, r1
 8005f94:	b10a      	cbz	r2, 8005f9a <_printf_common+0x26>
 8005f96:	3301      	adds	r3, #1
 8005f98:	6033      	str	r3, [r6, #0]
 8005f9a:	6823      	ldr	r3, [r4, #0]
 8005f9c:	0699      	lsls	r1, r3, #26
 8005f9e:	bf42      	ittt	mi
 8005fa0:	6833      	ldrmi	r3, [r6, #0]
 8005fa2:	3302      	addmi	r3, #2
 8005fa4:	6033      	strmi	r3, [r6, #0]
 8005fa6:	6825      	ldr	r5, [r4, #0]
 8005fa8:	f015 0506 	ands.w	r5, r5, #6
 8005fac:	d106      	bne.n	8005fbc <_printf_common+0x48>
 8005fae:	f104 0a19 	add.w	sl, r4, #25
 8005fb2:	68e3      	ldr	r3, [r4, #12]
 8005fb4:	6832      	ldr	r2, [r6, #0]
 8005fb6:	1a9b      	subs	r3, r3, r2
 8005fb8:	42ab      	cmp	r3, r5
 8005fba:	dc26      	bgt.n	800600a <_printf_common+0x96>
 8005fbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005fc0:	1e13      	subs	r3, r2, #0
 8005fc2:	6822      	ldr	r2, [r4, #0]
 8005fc4:	bf18      	it	ne
 8005fc6:	2301      	movne	r3, #1
 8005fc8:	0692      	lsls	r2, r2, #26
 8005fca:	d42b      	bmi.n	8006024 <_printf_common+0xb0>
 8005fcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005fd0:	4649      	mov	r1, r9
 8005fd2:	4638      	mov	r0, r7
 8005fd4:	47c0      	blx	r8
 8005fd6:	3001      	adds	r0, #1
 8005fd8:	d01e      	beq.n	8006018 <_printf_common+0xa4>
 8005fda:	6823      	ldr	r3, [r4, #0]
 8005fdc:	68e5      	ldr	r5, [r4, #12]
 8005fde:	6832      	ldr	r2, [r6, #0]
 8005fe0:	f003 0306 	and.w	r3, r3, #6
 8005fe4:	2b04      	cmp	r3, #4
 8005fe6:	bf08      	it	eq
 8005fe8:	1aad      	subeq	r5, r5, r2
 8005fea:	68a3      	ldr	r3, [r4, #8]
 8005fec:	6922      	ldr	r2, [r4, #16]
 8005fee:	bf0c      	ite	eq
 8005ff0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ff4:	2500      	movne	r5, #0
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	bfc4      	itt	gt
 8005ffa:	1a9b      	subgt	r3, r3, r2
 8005ffc:	18ed      	addgt	r5, r5, r3
 8005ffe:	2600      	movs	r6, #0
 8006000:	341a      	adds	r4, #26
 8006002:	42b5      	cmp	r5, r6
 8006004:	d11a      	bne.n	800603c <_printf_common+0xc8>
 8006006:	2000      	movs	r0, #0
 8006008:	e008      	b.n	800601c <_printf_common+0xa8>
 800600a:	2301      	movs	r3, #1
 800600c:	4652      	mov	r2, sl
 800600e:	4649      	mov	r1, r9
 8006010:	4638      	mov	r0, r7
 8006012:	47c0      	blx	r8
 8006014:	3001      	adds	r0, #1
 8006016:	d103      	bne.n	8006020 <_printf_common+0xac>
 8006018:	f04f 30ff 	mov.w	r0, #4294967295
 800601c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006020:	3501      	adds	r5, #1
 8006022:	e7c6      	b.n	8005fb2 <_printf_common+0x3e>
 8006024:	18e1      	adds	r1, r4, r3
 8006026:	1c5a      	adds	r2, r3, #1
 8006028:	2030      	movs	r0, #48	; 0x30
 800602a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800602e:	4422      	add	r2, r4
 8006030:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006034:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006038:	3302      	adds	r3, #2
 800603a:	e7c7      	b.n	8005fcc <_printf_common+0x58>
 800603c:	2301      	movs	r3, #1
 800603e:	4622      	mov	r2, r4
 8006040:	4649      	mov	r1, r9
 8006042:	4638      	mov	r0, r7
 8006044:	47c0      	blx	r8
 8006046:	3001      	adds	r0, #1
 8006048:	d0e6      	beq.n	8006018 <_printf_common+0xa4>
 800604a:	3601      	adds	r6, #1
 800604c:	e7d9      	b.n	8006002 <_printf_common+0x8e>
	...

08006050 <_printf_i>:
 8006050:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006054:	460c      	mov	r4, r1
 8006056:	4691      	mov	r9, r2
 8006058:	7e27      	ldrb	r7, [r4, #24]
 800605a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800605c:	2f78      	cmp	r7, #120	; 0x78
 800605e:	4680      	mov	r8, r0
 8006060:	469a      	mov	sl, r3
 8006062:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006066:	d807      	bhi.n	8006078 <_printf_i+0x28>
 8006068:	2f62      	cmp	r7, #98	; 0x62
 800606a:	d80a      	bhi.n	8006082 <_printf_i+0x32>
 800606c:	2f00      	cmp	r7, #0
 800606e:	f000 80d8 	beq.w	8006222 <_printf_i+0x1d2>
 8006072:	2f58      	cmp	r7, #88	; 0x58
 8006074:	f000 80a3 	beq.w	80061be <_printf_i+0x16e>
 8006078:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800607c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006080:	e03a      	b.n	80060f8 <_printf_i+0xa8>
 8006082:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006086:	2b15      	cmp	r3, #21
 8006088:	d8f6      	bhi.n	8006078 <_printf_i+0x28>
 800608a:	a001      	add	r0, pc, #4	; (adr r0, 8006090 <_printf_i+0x40>)
 800608c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006090:	080060e9 	.word	0x080060e9
 8006094:	080060fd 	.word	0x080060fd
 8006098:	08006079 	.word	0x08006079
 800609c:	08006079 	.word	0x08006079
 80060a0:	08006079 	.word	0x08006079
 80060a4:	08006079 	.word	0x08006079
 80060a8:	080060fd 	.word	0x080060fd
 80060ac:	08006079 	.word	0x08006079
 80060b0:	08006079 	.word	0x08006079
 80060b4:	08006079 	.word	0x08006079
 80060b8:	08006079 	.word	0x08006079
 80060bc:	08006209 	.word	0x08006209
 80060c0:	0800612d 	.word	0x0800612d
 80060c4:	080061eb 	.word	0x080061eb
 80060c8:	08006079 	.word	0x08006079
 80060cc:	08006079 	.word	0x08006079
 80060d0:	0800622b 	.word	0x0800622b
 80060d4:	08006079 	.word	0x08006079
 80060d8:	0800612d 	.word	0x0800612d
 80060dc:	08006079 	.word	0x08006079
 80060e0:	08006079 	.word	0x08006079
 80060e4:	080061f3 	.word	0x080061f3
 80060e8:	680b      	ldr	r3, [r1, #0]
 80060ea:	1d1a      	adds	r2, r3, #4
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	600a      	str	r2, [r1, #0]
 80060f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80060f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060f8:	2301      	movs	r3, #1
 80060fa:	e0a3      	b.n	8006244 <_printf_i+0x1f4>
 80060fc:	6825      	ldr	r5, [r4, #0]
 80060fe:	6808      	ldr	r0, [r1, #0]
 8006100:	062e      	lsls	r6, r5, #24
 8006102:	f100 0304 	add.w	r3, r0, #4
 8006106:	d50a      	bpl.n	800611e <_printf_i+0xce>
 8006108:	6805      	ldr	r5, [r0, #0]
 800610a:	600b      	str	r3, [r1, #0]
 800610c:	2d00      	cmp	r5, #0
 800610e:	da03      	bge.n	8006118 <_printf_i+0xc8>
 8006110:	232d      	movs	r3, #45	; 0x2d
 8006112:	426d      	negs	r5, r5
 8006114:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006118:	485e      	ldr	r0, [pc, #376]	; (8006294 <_printf_i+0x244>)
 800611a:	230a      	movs	r3, #10
 800611c:	e019      	b.n	8006152 <_printf_i+0x102>
 800611e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006122:	6805      	ldr	r5, [r0, #0]
 8006124:	600b      	str	r3, [r1, #0]
 8006126:	bf18      	it	ne
 8006128:	b22d      	sxthne	r5, r5
 800612a:	e7ef      	b.n	800610c <_printf_i+0xbc>
 800612c:	680b      	ldr	r3, [r1, #0]
 800612e:	6825      	ldr	r5, [r4, #0]
 8006130:	1d18      	adds	r0, r3, #4
 8006132:	6008      	str	r0, [r1, #0]
 8006134:	0628      	lsls	r0, r5, #24
 8006136:	d501      	bpl.n	800613c <_printf_i+0xec>
 8006138:	681d      	ldr	r5, [r3, #0]
 800613a:	e002      	b.n	8006142 <_printf_i+0xf2>
 800613c:	0669      	lsls	r1, r5, #25
 800613e:	d5fb      	bpl.n	8006138 <_printf_i+0xe8>
 8006140:	881d      	ldrh	r5, [r3, #0]
 8006142:	4854      	ldr	r0, [pc, #336]	; (8006294 <_printf_i+0x244>)
 8006144:	2f6f      	cmp	r7, #111	; 0x6f
 8006146:	bf0c      	ite	eq
 8006148:	2308      	moveq	r3, #8
 800614a:	230a      	movne	r3, #10
 800614c:	2100      	movs	r1, #0
 800614e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006152:	6866      	ldr	r6, [r4, #4]
 8006154:	60a6      	str	r6, [r4, #8]
 8006156:	2e00      	cmp	r6, #0
 8006158:	bfa2      	ittt	ge
 800615a:	6821      	ldrge	r1, [r4, #0]
 800615c:	f021 0104 	bicge.w	r1, r1, #4
 8006160:	6021      	strge	r1, [r4, #0]
 8006162:	b90d      	cbnz	r5, 8006168 <_printf_i+0x118>
 8006164:	2e00      	cmp	r6, #0
 8006166:	d04d      	beq.n	8006204 <_printf_i+0x1b4>
 8006168:	4616      	mov	r6, r2
 800616a:	fbb5 f1f3 	udiv	r1, r5, r3
 800616e:	fb03 5711 	mls	r7, r3, r1, r5
 8006172:	5dc7      	ldrb	r7, [r0, r7]
 8006174:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006178:	462f      	mov	r7, r5
 800617a:	42bb      	cmp	r3, r7
 800617c:	460d      	mov	r5, r1
 800617e:	d9f4      	bls.n	800616a <_printf_i+0x11a>
 8006180:	2b08      	cmp	r3, #8
 8006182:	d10b      	bne.n	800619c <_printf_i+0x14c>
 8006184:	6823      	ldr	r3, [r4, #0]
 8006186:	07df      	lsls	r7, r3, #31
 8006188:	d508      	bpl.n	800619c <_printf_i+0x14c>
 800618a:	6923      	ldr	r3, [r4, #16]
 800618c:	6861      	ldr	r1, [r4, #4]
 800618e:	4299      	cmp	r1, r3
 8006190:	bfde      	ittt	le
 8006192:	2330      	movle	r3, #48	; 0x30
 8006194:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006198:	f106 36ff 	addle.w	r6, r6, #4294967295
 800619c:	1b92      	subs	r2, r2, r6
 800619e:	6122      	str	r2, [r4, #16]
 80061a0:	f8cd a000 	str.w	sl, [sp]
 80061a4:	464b      	mov	r3, r9
 80061a6:	aa03      	add	r2, sp, #12
 80061a8:	4621      	mov	r1, r4
 80061aa:	4640      	mov	r0, r8
 80061ac:	f7ff fee2 	bl	8005f74 <_printf_common>
 80061b0:	3001      	adds	r0, #1
 80061b2:	d14c      	bne.n	800624e <_printf_i+0x1fe>
 80061b4:	f04f 30ff 	mov.w	r0, #4294967295
 80061b8:	b004      	add	sp, #16
 80061ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061be:	4835      	ldr	r0, [pc, #212]	; (8006294 <_printf_i+0x244>)
 80061c0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80061c4:	6823      	ldr	r3, [r4, #0]
 80061c6:	680e      	ldr	r6, [r1, #0]
 80061c8:	061f      	lsls	r7, r3, #24
 80061ca:	f856 5b04 	ldr.w	r5, [r6], #4
 80061ce:	600e      	str	r6, [r1, #0]
 80061d0:	d514      	bpl.n	80061fc <_printf_i+0x1ac>
 80061d2:	07d9      	lsls	r1, r3, #31
 80061d4:	bf44      	itt	mi
 80061d6:	f043 0320 	orrmi.w	r3, r3, #32
 80061da:	6023      	strmi	r3, [r4, #0]
 80061dc:	b91d      	cbnz	r5, 80061e6 <_printf_i+0x196>
 80061de:	6823      	ldr	r3, [r4, #0]
 80061e0:	f023 0320 	bic.w	r3, r3, #32
 80061e4:	6023      	str	r3, [r4, #0]
 80061e6:	2310      	movs	r3, #16
 80061e8:	e7b0      	b.n	800614c <_printf_i+0xfc>
 80061ea:	6823      	ldr	r3, [r4, #0]
 80061ec:	f043 0320 	orr.w	r3, r3, #32
 80061f0:	6023      	str	r3, [r4, #0]
 80061f2:	2378      	movs	r3, #120	; 0x78
 80061f4:	4828      	ldr	r0, [pc, #160]	; (8006298 <_printf_i+0x248>)
 80061f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80061fa:	e7e3      	b.n	80061c4 <_printf_i+0x174>
 80061fc:	065e      	lsls	r6, r3, #25
 80061fe:	bf48      	it	mi
 8006200:	b2ad      	uxthmi	r5, r5
 8006202:	e7e6      	b.n	80061d2 <_printf_i+0x182>
 8006204:	4616      	mov	r6, r2
 8006206:	e7bb      	b.n	8006180 <_printf_i+0x130>
 8006208:	680b      	ldr	r3, [r1, #0]
 800620a:	6826      	ldr	r6, [r4, #0]
 800620c:	6960      	ldr	r0, [r4, #20]
 800620e:	1d1d      	adds	r5, r3, #4
 8006210:	600d      	str	r5, [r1, #0]
 8006212:	0635      	lsls	r5, r6, #24
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	d501      	bpl.n	800621c <_printf_i+0x1cc>
 8006218:	6018      	str	r0, [r3, #0]
 800621a:	e002      	b.n	8006222 <_printf_i+0x1d2>
 800621c:	0671      	lsls	r1, r6, #25
 800621e:	d5fb      	bpl.n	8006218 <_printf_i+0x1c8>
 8006220:	8018      	strh	r0, [r3, #0]
 8006222:	2300      	movs	r3, #0
 8006224:	6123      	str	r3, [r4, #16]
 8006226:	4616      	mov	r6, r2
 8006228:	e7ba      	b.n	80061a0 <_printf_i+0x150>
 800622a:	680b      	ldr	r3, [r1, #0]
 800622c:	1d1a      	adds	r2, r3, #4
 800622e:	600a      	str	r2, [r1, #0]
 8006230:	681e      	ldr	r6, [r3, #0]
 8006232:	6862      	ldr	r2, [r4, #4]
 8006234:	2100      	movs	r1, #0
 8006236:	4630      	mov	r0, r6
 8006238:	f7f9 ffda 	bl	80001f0 <memchr>
 800623c:	b108      	cbz	r0, 8006242 <_printf_i+0x1f2>
 800623e:	1b80      	subs	r0, r0, r6
 8006240:	6060      	str	r0, [r4, #4]
 8006242:	6863      	ldr	r3, [r4, #4]
 8006244:	6123      	str	r3, [r4, #16]
 8006246:	2300      	movs	r3, #0
 8006248:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800624c:	e7a8      	b.n	80061a0 <_printf_i+0x150>
 800624e:	6923      	ldr	r3, [r4, #16]
 8006250:	4632      	mov	r2, r6
 8006252:	4649      	mov	r1, r9
 8006254:	4640      	mov	r0, r8
 8006256:	47d0      	blx	sl
 8006258:	3001      	adds	r0, #1
 800625a:	d0ab      	beq.n	80061b4 <_printf_i+0x164>
 800625c:	6823      	ldr	r3, [r4, #0]
 800625e:	079b      	lsls	r3, r3, #30
 8006260:	d413      	bmi.n	800628a <_printf_i+0x23a>
 8006262:	68e0      	ldr	r0, [r4, #12]
 8006264:	9b03      	ldr	r3, [sp, #12]
 8006266:	4298      	cmp	r0, r3
 8006268:	bfb8      	it	lt
 800626a:	4618      	movlt	r0, r3
 800626c:	e7a4      	b.n	80061b8 <_printf_i+0x168>
 800626e:	2301      	movs	r3, #1
 8006270:	4632      	mov	r2, r6
 8006272:	4649      	mov	r1, r9
 8006274:	4640      	mov	r0, r8
 8006276:	47d0      	blx	sl
 8006278:	3001      	adds	r0, #1
 800627a:	d09b      	beq.n	80061b4 <_printf_i+0x164>
 800627c:	3501      	adds	r5, #1
 800627e:	68e3      	ldr	r3, [r4, #12]
 8006280:	9903      	ldr	r1, [sp, #12]
 8006282:	1a5b      	subs	r3, r3, r1
 8006284:	42ab      	cmp	r3, r5
 8006286:	dcf2      	bgt.n	800626e <_printf_i+0x21e>
 8006288:	e7eb      	b.n	8006262 <_printf_i+0x212>
 800628a:	2500      	movs	r5, #0
 800628c:	f104 0619 	add.w	r6, r4, #25
 8006290:	e7f5      	b.n	800627e <_printf_i+0x22e>
 8006292:	bf00      	nop
 8006294:	08008c66 	.word	0x08008c66
 8006298:	08008c77 	.word	0x08008c77

0800629c <siprintf>:
 800629c:	b40e      	push	{r1, r2, r3}
 800629e:	b500      	push	{lr}
 80062a0:	b09c      	sub	sp, #112	; 0x70
 80062a2:	ab1d      	add	r3, sp, #116	; 0x74
 80062a4:	9002      	str	r0, [sp, #8]
 80062a6:	9006      	str	r0, [sp, #24]
 80062a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80062ac:	4809      	ldr	r0, [pc, #36]	; (80062d4 <siprintf+0x38>)
 80062ae:	9107      	str	r1, [sp, #28]
 80062b0:	9104      	str	r1, [sp, #16]
 80062b2:	4909      	ldr	r1, [pc, #36]	; (80062d8 <siprintf+0x3c>)
 80062b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80062b8:	9105      	str	r1, [sp, #20]
 80062ba:	6800      	ldr	r0, [r0, #0]
 80062bc:	9301      	str	r3, [sp, #4]
 80062be:	a902      	add	r1, sp, #8
 80062c0:	f001 fb34 	bl	800792c <_svfiprintf_r>
 80062c4:	9b02      	ldr	r3, [sp, #8]
 80062c6:	2200      	movs	r2, #0
 80062c8:	701a      	strb	r2, [r3, #0]
 80062ca:	b01c      	add	sp, #112	; 0x70
 80062cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80062d0:	b003      	add	sp, #12
 80062d2:	4770      	bx	lr
 80062d4:	2000000c 	.word	0x2000000c
 80062d8:	ffff0208 	.word	0xffff0208

080062dc <quorem>:
 80062dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062e0:	6903      	ldr	r3, [r0, #16]
 80062e2:	690c      	ldr	r4, [r1, #16]
 80062e4:	42a3      	cmp	r3, r4
 80062e6:	4607      	mov	r7, r0
 80062e8:	f2c0 8081 	blt.w	80063ee <quorem+0x112>
 80062ec:	3c01      	subs	r4, #1
 80062ee:	f101 0814 	add.w	r8, r1, #20
 80062f2:	f100 0514 	add.w	r5, r0, #20
 80062f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80062fa:	9301      	str	r3, [sp, #4]
 80062fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006300:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006304:	3301      	adds	r3, #1
 8006306:	429a      	cmp	r2, r3
 8006308:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800630c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006310:	fbb2 f6f3 	udiv	r6, r2, r3
 8006314:	d331      	bcc.n	800637a <quorem+0x9e>
 8006316:	f04f 0e00 	mov.w	lr, #0
 800631a:	4640      	mov	r0, r8
 800631c:	46ac      	mov	ip, r5
 800631e:	46f2      	mov	sl, lr
 8006320:	f850 2b04 	ldr.w	r2, [r0], #4
 8006324:	b293      	uxth	r3, r2
 8006326:	fb06 e303 	mla	r3, r6, r3, lr
 800632a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800632e:	b29b      	uxth	r3, r3
 8006330:	ebaa 0303 	sub.w	r3, sl, r3
 8006334:	0c12      	lsrs	r2, r2, #16
 8006336:	f8dc a000 	ldr.w	sl, [ip]
 800633a:	fb06 e202 	mla	r2, r6, r2, lr
 800633e:	fa13 f38a 	uxtah	r3, r3, sl
 8006342:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006346:	fa1f fa82 	uxth.w	sl, r2
 800634a:	f8dc 2000 	ldr.w	r2, [ip]
 800634e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006352:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006356:	b29b      	uxth	r3, r3
 8006358:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800635c:	4581      	cmp	r9, r0
 800635e:	f84c 3b04 	str.w	r3, [ip], #4
 8006362:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006366:	d2db      	bcs.n	8006320 <quorem+0x44>
 8006368:	f855 300b 	ldr.w	r3, [r5, fp]
 800636c:	b92b      	cbnz	r3, 800637a <quorem+0x9e>
 800636e:	9b01      	ldr	r3, [sp, #4]
 8006370:	3b04      	subs	r3, #4
 8006372:	429d      	cmp	r5, r3
 8006374:	461a      	mov	r2, r3
 8006376:	d32e      	bcc.n	80063d6 <quorem+0xfa>
 8006378:	613c      	str	r4, [r7, #16]
 800637a:	4638      	mov	r0, r7
 800637c:	f001 f8c0 	bl	8007500 <__mcmp>
 8006380:	2800      	cmp	r0, #0
 8006382:	db24      	blt.n	80063ce <quorem+0xf2>
 8006384:	3601      	adds	r6, #1
 8006386:	4628      	mov	r0, r5
 8006388:	f04f 0c00 	mov.w	ip, #0
 800638c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006390:	f8d0 e000 	ldr.w	lr, [r0]
 8006394:	b293      	uxth	r3, r2
 8006396:	ebac 0303 	sub.w	r3, ip, r3
 800639a:	0c12      	lsrs	r2, r2, #16
 800639c:	fa13 f38e 	uxtah	r3, r3, lr
 80063a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80063a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063ae:	45c1      	cmp	r9, r8
 80063b0:	f840 3b04 	str.w	r3, [r0], #4
 80063b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80063b8:	d2e8      	bcs.n	800638c <quorem+0xb0>
 80063ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063c2:	b922      	cbnz	r2, 80063ce <quorem+0xf2>
 80063c4:	3b04      	subs	r3, #4
 80063c6:	429d      	cmp	r5, r3
 80063c8:	461a      	mov	r2, r3
 80063ca:	d30a      	bcc.n	80063e2 <quorem+0x106>
 80063cc:	613c      	str	r4, [r7, #16]
 80063ce:	4630      	mov	r0, r6
 80063d0:	b003      	add	sp, #12
 80063d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063d6:	6812      	ldr	r2, [r2, #0]
 80063d8:	3b04      	subs	r3, #4
 80063da:	2a00      	cmp	r2, #0
 80063dc:	d1cc      	bne.n	8006378 <quorem+0x9c>
 80063de:	3c01      	subs	r4, #1
 80063e0:	e7c7      	b.n	8006372 <quorem+0x96>
 80063e2:	6812      	ldr	r2, [r2, #0]
 80063e4:	3b04      	subs	r3, #4
 80063e6:	2a00      	cmp	r2, #0
 80063e8:	d1f0      	bne.n	80063cc <quorem+0xf0>
 80063ea:	3c01      	subs	r4, #1
 80063ec:	e7eb      	b.n	80063c6 <quorem+0xea>
 80063ee:	2000      	movs	r0, #0
 80063f0:	e7ee      	b.n	80063d0 <quorem+0xf4>
 80063f2:	0000      	movs	r0, r0
 80063f4:	0000      	movs	r0, r0
	...

080063f8 <_dtoa_r>:
 80063f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063fc:	ed2d 8b02 	vpush	{d8}
 8006400:	ec57 6b10 	vmov	r6, r7, d0
 8006404:	b095      	sub	sp, #84	; 0x54
 8006406:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006408:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800640c:	9105      	str	r1, [sp, #20]
 800640e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006412:	4604      	mov	r4, r0
 8006414:	9209      	str	r2, [sp, #36]	; 0x24
 8006416:	930f      	str	r3, [sp, #60]	; 0x3c
 8006418:	b975      	cbnz	r5, 8006438 <_dtoa_r+0x40>
 800641a:	2010      	movs	r0, #16
 800641c:	f000 fddc 	bl	8006fd8 <malloc>
 8006420:	4602      	mov	r2, r0
 8006422:	6260      	str	r0, [r4, #36]	; 0x24
 8006424:	b920      	cbnz	r0, 8006430 <_dtoa_r+0x38>
 8006426:	4bb2      	ldr	r3, [pc, #712]	; (80066f0 <_dtoa_r+0x2f8>)
 8006428:	21ea      	movs	r1, #234	; 0xea
 800642a:	48b2      	ldr	r0, [pc, #712]	; (80066f4 <_dtoa_r+0x2fc>)
 800642c:	f001 fb8e 	bl	8007b4c <__assert_func>
 8006430:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006434:	6005      	str	r5, [r0, #0]
 8006436:	60c5      	str	r5, [r0, #12]
 8006438:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800643a:	6819      	ldr	r1, [r3, #0]
 800643c:	b151      	cbz	r1, 8006454 <_dtoa_r+0x5c>
 800643e:	685a      	ldr	r2, [r3, #4]
 8006440:	604a      	str	r2, [r1, #4]
 8006442:	2301      	movs	r3, #1
 8006444:	4093      	lsls	r3, r2
 8006446:	608b      	str	r3, [r1, #8]
 8006448:	4620      	mov	r0, r4
 800644a:	f000 fe1b 	bl	8007084 <_Bfree>
 800644e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006450:	2200      	movs	r2, #0
 8006452:	601a      	str	r2, [r3, #0]
 8006454:	1e3b      	subs	r3, r7, #0
 8006456:	bfb9      	ittee	lt
 8006458:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800645c:	9303      	strlt	r3, [sp, #12]
 800645e:	2300      	movge	r3, #0
 8006460:	f8c8 3000 	strge.w	r3, [r8]
 8006464:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006468:	4ba3      	ldr	r3, [pc, #652]	; (80066f8 <_dtoa_r+0x300>)
 800646a:	bfbc      	itt	lt
 800646c:	2201      	movlt	r2, #1
 800646e:	f8c8 2000 	strlt.w	r2, [r8]
 8006472:	ea33 0309 	bics.w	r3, r3, r9
 8006476:	d11b      	bne.n	80064b0 <_dtoa_r+0xb8>
 8006478:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800647a:	f242 730f 	movw	r3, #9999	; 0x270f
 800647e:	6013      	str	r3, [r2, #0]
 8006480:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006484:	4333      	orrs	r3, r6
 8006486:	f000 857a 	beq.w	8006f7e <_dtoa_r+0xb86>
 800648a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800648c:	b963      	cbnz	r3, 80064a8 <_dtoa_r+0xb0>
 800648e:	4b9b      	ldr	r3, [pc, #620]	; (80066fc <_dtoa_r+0x304>)
 8006490:	e024      	b.n	80064dc <_dtoa_r+0xe4>
 8006492:	4b9b      	ldr	r3, [pc, #620]	; (8006700 <_dtoa_r+0x308>)
 8006494:	9300      	str	r3, [sp, #0]
 8006496:	3308      	adds	r3, #8
 8006498:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800649a:	6013      	str	r3, [r2, #0]
 800649c:	9800      	ldr	r0, [sp, #0]
 800649e:	b015      	add	sp, #84	; 0x54
 80064a0:	ecbd 8b02 	vpop	{d8}
 80064a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064a8:	4b94      	ldr	r3, [pc, #592]	; (80066fc <_dtoa_r+0x304>)
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	3303      	adds	r3, #3
 80064ae:	e7f3      	b.n	8006498 <_dtoa_r+0xa0>
 80064b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80064b4:	2200      	movs	r2, #0
 80064b6:	ec51 0b17 	vmov	r0, r1, d7
 80064ba:	2300      	movs	r3, #0
 80064bc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80064c0:	f7fa fb0a 	bl	8000ad8 <__aeabi_dcmpeq>
 80064c4:	4680      	mov	r8, r0
 80064c6:	b158      	cbz	r0, 80064e0 <_dtoa_r+0xe8>
 80064c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80064ca:	2301      	movs	r3, #1
 80064cc:	6013      	str	r3, [r2, #0]
 80064ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	f000 8551 	beq.w	8006f78 <_dtoa_r+0xb80>
 80064d6:	488b      	ldr	r0, [pc, #556]	; (8006704 <_dtoa_r+0x30c>)
 80064d8:	6018      	str	r0, [r3, #0]
 80064da:	1e43      	subs	r3, r0, #1
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	e7dd      	b.n	800649c <_dtoa_r+0xa4>
 80064e0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80064e4:	aa12      	add	r2, sp, #72	; 0x48
 80064e6:	a913      	add	r1, sp, #76	; 0x4c
 80064e8:	4620      	mov	r0, r4
 80064ea:	f001 f8ad 	bl	8007648 <__d2b>
 80064ee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80064f2:	4683      	mov	fp, r0
 80064f4:	2d00      	cmp	r5, #0
 80064f6:	d07c      	beq.n	80065f2 <_dtoa_r+0x1fa>
 80064f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064fa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80064fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006502:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006506:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800650a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800650e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006512:	4b7d      	ldr	r3, [pc, #500]	; (8006708 <_dtoa_r+0x310>)
 8006514:	2200      	movs	r2, #0
 8006516:	4630      	mov	r0, r6
 8006518:	4639      	mov	r1, r7
 800651a:	f7f9 febd 	bl	8000298 <__aeabi_dsub>
 800651e:	a36e      	add	r3, pc, #440	; (adr r3, 80066d8 <_dtoa_r+0x2e0>)
 8006520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006524:	f7fa f870 	bl	8000608 <__aeabi_dmul>
 8006528:	a36d      	add	r3, pc, #436	; (adr r3, 80066e0 <_dtoa_r+0x2e8>)
 800652a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652e:	f7f9 feb5 	bl	800029c <__adddf3>
 8006532:	4606      	mov	r6, r0
 8006534:	4628      	mov	r0, r5
 8006536:	460f      	mov	r7, r1
 8006538:	f7f9 fffc 	bl	8000534 <__aeabi_i2d>
 800653c:	a36a      	add	r3, pc, #424	; (adr r3, 80066e8 <_dtoa_r+0x2f0>)
 800653e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006542:	f7fa f861 	bl	8000608 <__aeabi_dmul>
 8006546:	4602      	mov	r2, r0
 8006548:	460b      	mov	r3, r1
 800654a:	4630      	mov	r0, r6
 800654c:	4639      	mov	r1, r7
 800654e:	f7f9 fea5 	bl	800029c <__adddf3>
 8006552:	4606      	mov	r6, r0
 8006554:	460f      	mov	r7, r1
 8006556:	f7fa fb07 	bl	8000b68 <__aeabi_d2iz>
 800655a:	2200      	movs	r2, #0
 800655c:	4682      	mov	sl, r0
 800655e:	2300      	movs	r3, #0
 8006560:	4630      	mov	r0, r6
 8006562:	4639      	mov	r1, r7
 8006564:	f7fa fac2 	bl	8000aec <__aeabi_dcmplt>
 8006568:	b148      	cbz	r0, 800657e <_dtoa_r+0x186>
 800656a:	4650      	mov	r0, sl
 800656c:	f7f9 ffe2 	bl	8000534 <__aeabi_i2d>
 8006570:	4632      	mov	r2, r6
 8006572:	463b      	mov	r3, r7
 8006574:	f7fa fab0 	bl	8000ad8 <__aeabi_dcmpeq>
 8006578:	b908      	cbnz	r0, 800657e <_dtoa_r+0x186>
 800657a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800657e:	f1ba 0f16 	cmp.w	sl, #22
 8006582:	d854      	bhi.n	800662e <_dtoa_r+0x236>
 8006584:	4b61      	ldr	r3, [pc, #388]	; (800670c <_dtoa_r+0x314>)
 8006586:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800658a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006592:	f7fa faab 	bl	8000aec <__aeabi_dcmplt>
 8006596:	2800      	cmp	r0, #0
 8006598:	d04b      	beq.n	8006632 <_dtoa_r+0x23a>
 800659a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800659e:	2300      	movs	r3, #0
 80065a0:	930e      	str	r3, [sp, #56]	; 0x38
 80065a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065a4:	1b5d      	subs	r5, r3, r5
 80065a6:	1e6b      	subs	r3, r5, #1
 80065a8:	9304      	str	r3, [sp, #16]
 80065aa:	bf43      	ittte	mi
 80065ac:	2300      	movmi	r3, #0
 80065ae:	f1c5 0801 	rsbmi	r8, r5, #1
 80065b2:	9304      	strmi	r3, [sp, #16]
 80065b4:	f04f 0800 	movpl.w	r8, #0
 80065b8:	f1ba 0f00 	cmp.w	sl, #0
 80065bc:	db3b      	blt.n	8006636 <_dtoa_r+0x23e>
 80065be:	9b04      	ldr	r3, [sp, #16]
 80065c0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80065c4:	4453      	add	r3, sl
 80065c6:	9304      	str	r3, [sp, #16]
 80065c8:	2300      	movs	r3, #0
 80065ca:	9306      	str	r3, [sp, #24]
 80065cc:	9b05      	ldr	r3, [sp, #20]
 80065ce:	2b09      	cmp	r3, #9
 80065d0:	d869      	bhi.n	80066a6 <_dtoa_r+0x2ae>
 80065d2:	2b05      	cmp	r3, #5
 80065d4:	bfc4      	itt	gt
 80065d6:	3b04      	subgt	r3, #4
 80065d8:	9305      	strgt	r3, [sp, #20]
 80065da:	9b05      	ldr	r3, [sp, #20]
 80065dc:	f1a3 0302 	sub.w	r3, r3, #2
 80065e0:	bfcc      	ite	gt
 80065e2:	2500      	movgt	r5, #0
 80065e4:	2501      	movle	r5, #1
 80065e6:	2b03      	cmp	r3, #3
 80065e8:	d869      	bhi.n	80066be <_dtoa_r+0x2c6>
 80065ea:	e8df f003 	tbb	[pc, r3]
 80065ee:	4e2c      	.short	0x4e2c
 80065f0:	5a4c      	.short	0x5a4c
 80065f2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80065f6:	441d      	add	r5, r3
 80065f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80065fc:	2b20      	cmp	r3, #32
 80065fe:	bfc1      	itttt	gt
 8006600:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006604:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006608:	fa09 f303 	lslgt.w	r3, r9, r3
 800660c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006610:	bfda      	itte	le
 8006612:	f1c3 0320 	rsble	r3, r3, #32
 8006616:	fa06 f003 	lslle.w	r0, r6, r3
 800661a:	4318      	orrgt	r0, r3
 800661c:	f7f9 ff7a 	bl	8000514 <__aeabi_ui2d>
 8006620:	2301      	movs	r3, #1
 8006622:	4606      	mov	r6, r0
 8006624:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006628:	3d01      	subs	r5, #1
 800662a:	9310      	str	r3, [sp, #64]	; 0x40
 800662c:	e771      	b.n	8006512 <_dtoa_r+0x11a>
 800662e:	2301      	movs	r3, #1
 8006630:	e7b6      	b.n	80065a0 <_dtoa_r+0x1a8>
 8006632:	900e      	str	r0, [sp, #56]	; 0x38
 8006634:	e7b5      	b.n	80065a2 <_dtoa_r+0x1aa>
 8006636:	f1ca 0300 	rsb	r3, sl, #0
 800663a:	9306      	str	r3, [sp, #24]
 800663c:	2300      	movs	r3, #0
 800663e:	eba8 080a 	sub.w	r8, r8, sl
 8006642:	930d      	str	r3, [sp, #52]	; 0x34
 8006644:	e7c2      	b.n	80065cc <_dtoa_r+0x1d4>
 8006646:	2300      	movs	r3, #0
 8006648:	9308      	str	r3, [sp, #32]
 800664a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800664c:	2b00      	cmp	r3, #0
 800664e:	dc39      	bgt.n	80066c4 <_dtoa_r+0x2cc>
 8006650:	f04f 0901 	mov.w	r9, #1
 8006654:	f8cd 9004 	str.w	r9, [sp, #4]
 8006658:	464b      	mov	r3, r9
 800665a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800665e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006660:	2200      	movs	r2, #0
 8006662:	6042      	str	r2, [r0, #4]
 8006664:	2204      	movs	r2, #4
 8006666:	f102 0614 	add.w	r6, r2, #20
 800666a:	429e      	cmp	r6, r3
 800666c:	6841      	ldr	r1, [r0, #4]
 800666e:	d92f      	bls.n	80066d0 <_dtoa_r+0x2d8>
 8006670:	4620      	mov	r0, r4
 8006672:	f000 fcc7 	bl	8007004 <_Balloc>
 8006676:	9000      	str	r0, [sp, #0]
 8006678:	2800      	cmp	r0, #0
 800667a:	d14b      	bne.n	8006714 <_dtoa_r+0x31c>
 800667c:	4b24      	ldr	r3, [pc, #144]	; (8006710 <_dtoa_r+0x318>)
 800667e:	4602      	mov	r2, r0
 8006680:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006684:	e6d1      	b.n	800642a <_dtoa_r+0x32>
 8006686:	2301      	movs	r3, #1
 8006688:	e7de      	b.n	8006648 <_dtoa_r+0x250>
 800668a:	2300      	movs	r3, #0
 800668c:	9308      	str	r3, [sp, #32]
 800668e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006690:	eb0a 0903 	add.w	r9, sl, r3
 8006694:	f109 0301 	add.w	r3, r9, #1
 8006698:	2b01      	cmp	r3, #1
 800669a:	9301      	str	r3, [sp, #4]
 800669c:	bfb8      	it	lt
 800669e:	2301      	movlt	r3, #1
 80066a0:	e7dd      	b.n	800665e <_dtoa_r+0x266>
 80066a2:	2301      	movs	r3, #1
 80066a4:	e7f2      	b.n	800668c <_dtoa_r+0x294>
 80066a6:	2501      	movs	r5, #1
 80066a8:	2300      	movs	r3, #0
 80066aa:	9305      	str	r3, [sp, #20]
 80066ac:	9508      	str	r5, [sp, #32]
 80066ae:	f04f 39ff 	mov.w	r9, #4294967295
 80066b2:	2200      	movs	r2, #0
 80066b4:	f8cd 9004 	str.w	r9, [sp, #4]
 80066b8:	2312      	movs	r3, #18
 80066ba:	9209      	str	r2, [sp, #36]	; 0x24
 80066bc:	e7cf      	b.n	800665e <_dtoa_r+0x266>
 80066be:	2301      	movs	r3, #1
 80066c0:	9308      	str	r3, [sp, #32]
 80066c2:	e7f4      	b.n	80066ae <_dtoa_r+0x2b6>
 80066c4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80066c8:	f8cd 9004 	str.w	r9, [sp, #4]
 80066cc:	464b      	mov	r3, r9
 80066ce:	e7c6      	b.n	800665e <_dtoa_r+0x266>
 80066d0:	3101      	adds	r1, #1
 80066d2:	6041      	str	r1, [r0, #4]
 80066d4:	0052      	lsls	r2, r2, #1
 80066d6:	e7c6      	b.n	8006666 <_dtoa_r+0x26e>
 80066d8:	636f4361 	.word	0x636f4361
 80066dc:	3fd287a7 	.word	0x3fd287a7
 80066e0:	8b60c8b3 	.word	0x8b60c8b3
 80066e4:	3fc68a28 	.word	0x3fc68a28
 80066e8:	509f79fb 	.word	0x509f79fb
 80066ec:	3fd34413 	.word	0x3fd34413
 80066f0:	08008c95 	.word	0x08008c95
 80066f4:	08008cac 	.word	0x08008cac
 80066f8:	7ff00000 	.word	0x7ff00000
 80066fc:	08008c91 	.word	0x08008c91
 8006700:	08008c88 	.word	0x08008c88
 8006704:	08008c65 	.word	0x08008c65
 8006708:	3ff80000 	.word	0x3ff80000
 800670c:	08008da8 	.word	0x08008da8
 8006710:	08008d0b 	.word	0x08008d0b
 8006714:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006716:	9a00      	ldr	r2, [sp, #0]
 8006718:	601a      	str	r2, [r3, #0]
 800671a:	9b01      	ldr	r3, [sp, #4]
 800671c:	2b0e      	cmp	r3, #14
 800671e:	f200 80ad 	bhi.w	800687c <_dtoa_r+0x484>
 8006722:	2d00      	cmp	r5, #0
 8006724:	f000 80aa 	beq.w	800687c <_dtoa_r+0x484>
 8006728:	f1ba 0f00 	cmp.w	sl, #0
 800672c:	dd36      	ble.n	800679c <_dtoa_r+0x3a4>
 800672e:	4ac3      	ldr	r2, [pc, #780]	; (8006a3c <_dtoa_r+0x644>)
 8006730:	f00a 030f 	and.w	r3, sl, #15
 8006734:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006738:	ed93 7b00 	vldr	d7, [r3]
 800673c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006740:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006744:	eeb0 8a47 	vmov.f32	s16, s14
 8006748:	eef0 8a67 	vmov.f32	s17, s15
 800674c:	d016      	beq.n	800677c <_dtoa_r+0x384>
 800674e:	4bbc      	ldr	r3, [pc, #752]	; (8006a40 <_dtoa_r+0x648>)
 8006750:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006754:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006758:	f7fa f880 	bl	800085c <__aeabi_ddiv>
 800675c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006760:	f007 070f 	and.w	r7, r7, #15
 8006764:	2503      	movs	r5, #3
 8006766:	4eb6      	ldr	r6, [pc, #728]	; (8006a40 <_dtoa_r+0x648>)
 8006768:	b957      	cbnz	r7, 8006780 <_dtoa_r+0x388>
 800676a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800676e:	ec53 2b18 	vmov	r2, r3, d8
 8006772:	f7fa f873 	bl	800085c <__aeabi_ddiv>
 8006776:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800677a:	e029      	b.n	80067d0 <_dtoa_r+0x3d8>
 800677c:	2502      	movs	r5, #2
 800677e:	e7f2      	b.n	8006766 <_dtoa_r+0x36e>
 8006780:	07f9      	lsls	r1, r7, #31
 8006782:	d508      	bpl.n	8006796 <_dtoa_r+0x39e>
 8006784:	ec51 0b18 	vmov	r0, r1, d8
 8006788:	e9d6 2300 	ldrd	r2, r3, [r6]
 800678c:	f7f9 ff3c 	bl	8000608 <__aeabi_dmul>
 8006790:	ec41 0b18 	vmov	d8, r0, r1
 8006794:	3501      	adds	r5, #1
 8006796:	107f      	asrs	r7, r7, #1
 8006798:	3608      	adds	r6, #8
 800679a:	e7e5      	b.n	8006768 <_dtoa_r+0x370>
 800679c:	f000 80a6 	beq.w	80068ec <_dtoa_r+0x4f4>
 80067a0:	f1ca 0600 	rsb	r6, sl, #0
 80067a4:	4ba5      	ldr	r3, [pc, #660]	; (8006a3c <_dtoa_r+0x644>)
 80067a6:	4fa6      	ldr	r7, [pc, #664]	; (8006a40 <_dtoa_r+0x648>)
 80067a8:	f006 020f 	and.w	r2, r6, #15
 80067ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80067b8:	f7f9 ff26 	bl	8000608 <__aeabi_dmul>
 80067bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067c0:	1136      	asrs	r6, r6, #4
 80067c2:	2300      	movs	r3, #0
 80067c4:	2502      	movs	r5, #2
 80067c6:	2e00      	cmp	r6, #0
 80067c8:	f040 8085 	bne.w	80068d6 <_dtoa_r+0x4de>
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1d2      	bne.n	8006776 <_dtoa_r+0x37e>
 80067d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f000 808c 	beq.w	80068f0 <_dtoa_r+0x4f8>
 80067d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80067dc:	4b99      	ldr	r3, [pc, #612]	; (8006a44 <_dtoa_r+0x64c>)
 80067de:	2200      	movs	r2, #0
 80067e0:	4630      	mov	r0, r6
 80067e2:	4639      	mov	r1, r7
 80067e4:	f7fa f982 	bl	8000aec <__aeabi_dcmplt>
 80067e8:	2800      	cmp	r0, #0
 80067ea:	f000 8081 	beq.w	80068f0 <_dtoa_r+0x4f8>
 80067ee:	9b01      	ldr	r3, [sp, #4]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d07d      	beq.n	80068f0 <_dtoa_r+0x4f8>
 80067f4:	f1b9 0f00 	cmp.w	r9, #0
 80067f8:	dd3c      	ble.n	8006874 <_dtoa_r+0x47c>
 80067fa:	f10a 33ff 	add.w	r3, sl, #4294967295
 80067fe:	9307      	str	r3, [sp, #28]
 8006800:	2200      	movs	r2, #0
 8006802:	4b91      	ldr	r3, [pc, #580]	; (8006a48 <_dtoa_r+0x650>)
 8006804:	4630      	mov	r0, r6
 8006806:	4639      	mov	r1, r7
 8006808:	f7f9 fefe 	bl	8000608 <__aeabi_dmul>
 800680c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006810:	3501      	adds	r5, #1
 8006812:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006816:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800681a:	4628      	mov	r0, r5
 800681c:	f7f9 fe8a 	bl	8000534 <__aeabi_i2d>
 8006820:	4632      	mov	r2, r6
 8006822:	463b      	mov	r3, r7
 8006824:	f7f9 fef0 	bl	8000608 <__aeabi_dmul>
 8006828:	4b88      	ldr	r3, [pc, #544]	; (8006a4c <_dtoa_r+0x654>)
 800682a:	2200      	movs	r2, #0
 800682c:	f7f9 fd36 	bl	800029c <__adddf3>
 8006830:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006834:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006838:	9303      	str	r3, [sp, #12]
 800683a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800683c:	2b00      	cmp	r3, #0
 800683e:	d15c      	bne.n	80068fa <_dtoa_r+0x502>
 8006840:	4b83      	ldr	r3, [pc, #524]	; (8006a50 <_dtoa_r+0x658>)
 8006842:	2200      	movs	r2, #0
 8006844:	4630      	mov	r0, r6
 8006846:	4639      	mov	r1, r7
 8006848:	f7f9 fd26 	bl	8000298 <__aeabi_dsub>
 800684c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006850:	4606      	mov	r6, r0
 8006852:	460f      	mov	r7, r1
 8006854:	f7fa f968 	bl	8000b28 <__aeabi_dcmpgt>
 8006858:	2800      	cmp	r0, #0
 800685a:	f040 8296 	bne.w	8006d8a <_dtoa_r+0x992>
 800685e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006862:	4630      	mov	r0, r6
 8006864:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006868:	4639      	mov	r1, r7
 800686a:	f7fa f93f 	bl	8000aec <__aeabi_dcmplt>
 800686e:	2800      	cmp	r0, #0
 8006870:	f040 8288 	bne.w	8006d84 <_dtoa_r+0x98c>
 8006874:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006878:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800687c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800687e:	2b00      	cmp	r3, #0
 8006880:	f2c0 8158 	blt.w	8006b34 <_dtoa_r+0x73c>
 8006884:	f1ba 0f0e 	cmp.w	sl, #14
 8006888:	f300 8154 	bgt.w	8006b34 <_dtoa_r+0x73c>
 800688c:	4b6b      	ldr	r3, [pc, #428]	; (8006a3c <_dtoa_r+0x644>)
 800688e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006892:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006898:	2b00      	cmp	r3, #0
 800689a:	f280 80e3 	bge.w	8006a64 <_dtoa_r+0x66c>
 800689e:	9b01      	ldr	r3, [sp, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f300 80df 	bgt.w	8006a64 <_dtoa_r+0x66c>
 80068a6:	f040 826d 	bne.w	8006d84 <_dtoa_r+0x98c>
 80068aa:	4b69      	ldr	r3, [pc, #420]	; (8006a50 <_dtoa_r+0x658>)
 80068ac:	2200      	movs	r2, #0
 80068ae:	4640      	mov	r0, r8
 80068b0:	4649      	mov	r1, r9
 80068b2:	f7f9 fea9 	bl	8000608 <__aeabi_dmul>
 80068b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80068ba:	f7fa f92b 	bl	8000b14 <__aeabi_dcmpge>
 80068be:	9e01      	ldr	r6, [sp, #4]
 80068c0:	4637      	mov	r7, r6
 80068c2:	2800      	cmp	r0, #0
 80068c4:	f040 8243 	bne.w	8006d4e <_dtoa_r+0x956>
 80068c8:	9d00      	ldr	r5, [sp, #0]
 80068ca:	2331      	movs	r3, #49	; 0x31
 80068cc:	f805 3b01 	strb.w	r3, [r5], #1
 80068d0:	f10a 0a01 	add.w	sl, sl, #1
 80068d4:	e23f      	b.n	8006d56 <_dtoa_r+0x95e>
 80068d6:	07f2      	lsls	r2, r6, #31
 80068d8:	d505      	bpl.n	80068e6 <_dtoa_r+0x4ee>
 80068da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068de:	f7f9 fe93 	bl	8000608 <__aeabi_dmul>
 80068e2:	3501      	adds	r5, #1
 80068e4:	2301      	movs	r3, #1
 80068e6:	1076      	asrs	r6, r6, #1
 80068e8:	3708      	adds	r7, #8
 80068ea:	e76c      	b.n	80067c6 <_dtoa_r+0x3ce>
 80068ec:	2502      	movs	r5, #2
 80068ee:	e76f      	b.n	80067d0 <_dtoa_r+0x3d8>
 80068f0:	9b01      	ldr	r3, [sp, #4]
 80068f2:	f8cd a01c 	str.w	sl, [sp, #28]
 80068f6:	930c      	str	r3, [sp, #48]	; 0x30
 80068f8:	e78d      	b.n	8006816 <_dtoa_r+0x41e>
 80068fa:	9900      	ldr	r1, [sp, #0]
 80068fc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80068fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006900:	4b4e      	ldr	r3, [pc, #312]	; (8006a3c <_dtoa_r+0x644>)
 8006902:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006906:	4401      	add	r1, r0
 8006908:	9102      	str	r1, [sp, #8]
 800690a:	9908      	ldr	r1, [sp, #32]
 800690c:	eeb0 8a47 	vmov.f32	s16, s14
 8006910:	eef0 8a67 	vmov.f32	s17, s15
 8006914:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006918:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800691c:	2900      	cmp	r1, #0
 800691e:	d045      	beq.n	80069ac <_dtoa_r+0x5b4>
 8006920:	494c      	ldr	r1, [pc, #304]	; (8006a54 <_dtoa_r+0x65c>)
 8006922:	2000      	movs	r0, #0
 8006924:	f7f9 ff9a 	bl	800085c <__aeabi_ddiv>
 8006928:	ec53 2b18 	vmov	r2, r3, d8
 800692c:	f7f9 fcb4 	bl	8000298 <__aeabi_dsub>
 8006930:	9d00      	ldr	r5, [sp, #0]
 8006932:	ec41 0b18 	vmov	d8, r0, r1
 8006936:	4639      	mov	r1, r7
 8006938:	4630      	mov	r0, r6
 800693a:	f7fa f915 	bl	8000b68 <__aeabi_d2iz>
 800693e:	900c      	str	r0, [sp, #48]	; 0x30
 8006940:	f7f9 fdf8 	bl	8000534 <__aeabi_i2d>
 8006944:	4602      	mov	r2, r0
 8006946:	460b      	mov	r3, r1
 8006948:	4630      	mov	r0, r6
 800694a:	4639      	mov	r1, r7
 800694c:	f7f9 fca4 	bl	8000298 <__aeabi_dsub>
 8006950:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006952:	3330      	adds	r3, #48	; 0x30
 8006954:	f805 3b01 	strb.w	r3, [r5], #1
 8006958:	ec53 2b18 	vmov	r2, r3, d8
 800695c:	4606      	mov	r6, r0
 800695e:	460f      	mov	r7, r1
 8006960:	f7fa f8c4 	bl	8000aec <__aeabi_dcmplt>
 8006964:	2800      	cmp	r0, #0
 8006966:	d165      	bne.n	8006a34 <_dtoa_r+0x63c>
 8006968:	4632      	mov	r2, r6
 800696a:	463b      	mov	r3, r7
 800696c:	4935      	ldr	r1, [pc, #212]	; (8006a44 <_dtoa_r+0x64c>)
 800696e:	2000      	movs	r0, #0
 8006970:	f7f9 fc92 	bl	8000298 <__aeabi_dsub>
 8006974:	ec53 2b18 	vmov	r2, r3, d8
 8006978:	f7fa f8b8 	bl	8000aec <__aeabi_dcmplt>
 800697c:	2800      	cmp	r0, #0
 800697e:	f040 80b9 	bne.w	8006af4 <_dtoa_r+0x6fc>
 8006982:	9b02      	ldr	r3, [sp, #8]
 8006984:	429d      	cmp	r5, r3
 8006986:	f43f af75 	beq.w	8006874 <_dtoa_r+0x47c>
 800698a:	4b2f      	ldr	r3, [pc, #188]	; (8006a48 <_dtoa_r+0x650>)
 800698c:	ec51 0b18 	vmov	r0, r1, d8
 8006990:	2200      	movs	r2, #0
 8006992:	f7f9 fe39 	bl	8000608 <__aeabi_dmul>
 8006996:	4b2c      	ldr	r3, [pc, #176]	; (8006a48 <_dtoa_r+0x650>)
 8006998:	ec41 0b18 	vmov	d8, r0, r1
 800699c:	2200      	movs	r2, #0
 800699e:	4630      	mov	r0, r6
 80069a0:	4639      	mov	r1, r7
 80069a2:	f7f9 fe31 	bl	8000608 <__aeabi_dmul>
 80069a6:	4606      	mov	r6, r0
 80069a8:	460f      	mov	r7, r1
 80069aa:	e7c4      	b.n	8006936 <_dtoa_r+0x53e>
 80069ac:	ec51 0b17 	vmov	r0, r1, d7
 80069b0:	f7f9 fe2a 	bl	8000608 <__aeabi_dmul>
 80069b4:	9b02      	ldr	r3, [sp, #8]
 80069b6:	9d00      	ldr	r5, [sp, #0]
 80069b8:	930c      	str	r3, [sp, #48]	; 0x30
 80069ba:	ec41 0b18 	vmov	d8, r0, r1
 80069be:	4639      	mov	r1, r7
 80069c0:	4630      	mov	r0, r6
 80069c2:	f7fa f8d1 	bl	8000b68 <__aeabi_d2iz>
 80069c6:	9011      	str	r0, [sp, #68]	; 0x44
 80069c8:	f7f9 fdb4 	bl	8000534 <__aeabi_i2d>
 80069cc:	4602      	mov	r2, r0
 80069ce:	460b      	mov	r3, r1
 80069d0:	4630      	mov	r0, r6
 80069d2:	4639      	mov	r1, r7
 80069d4:	f7f9 fc60 	bl	8000298 <__aeabi_dsub>
 80069d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80069da:	3330      	adds	r3, #48	; 0x30
 80069dc:	f805 3b01 	strb.w	r3, [r5], #1
 80069e0:	9b02      	ldr	r3, [sp, #8]
 80069e2:	429d      	cmp	r5, r3
 80069e4:	4606      	mov	r6, r0
 80069e6:	460f      	mov	r7, r1
 80069e8:	f04f 0200 	mov.w	r2, #0
 80069ec:	d134      	bne.n	8006a58 <_dtoa_r+0x660>
 80069ee:	4b19      	ldr	r3, [pc, #100]	; (8006a54 <_dtoa_r+0x65c>)
 80069f0:	ec51 0b18 	vmov	r0, r1, d8
 80069f4:	f7f9 fc52 	bl	800029c <__adddf3>
 80069f8:	4602      	mov	r2, r0
 80069fa:	460b      	mov	r3, r1
 80069fc:	4630      	mov	r0, r6
 80069fe:	4639      	mov	r1, r7
 8006a00:	f7fa f892 	bl	8000b28 <__aeabi_dcmpgt>
 8006a04:	2800      	cmp	r0, #0
 8006a06:	d175      	bne.n	8006af4 <_dtoa_r+0x6fc>
 8006a08:	ec53 2b18 	vmov	r2, r3, d8
 8006a0c:	4911      	ldr	r1, [pc, #68]	; (8006a54 <_dtoa_r+0x65c>)
 8006a0e:	2000      	movs	r0, #0
 8006a10:	f7f9 fc42 	bl	8000298 <__aeabi_dsub>
 8006a14:	4602      	mov	r2, r0
 8006a16:	460b      	mov	r3, r1
 8006a18:	4630      	mov	r0, r6
 8006a1a:	4639      	mov	r1, r7
 8006a1c:	f7fa f866 	bl	8000aec <__aeabi_dcmplt>
 8006a20:	2800      	cmp	r0, #0
 8006a22:	f43f af27 	beq.w	8006874 <_dtoa_r+0x47c>
 8006a26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a28:	1e6b      	subs	r3, r5, #1
 8006a2a:	930c      	str	r3, [sp, #48]	; 0x30
 8006a2c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006a30:	2b30      	cmp	r3, #48	; 0x30
 8006a32:	d0f8      	beq.n	8006a26 <_dtoa_r+0x62e>
 8006a34:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006a38:	e04a      	b.n	8006ad0 <_dtoa_r+0x6d8>
 8006a3a:	bf00      	nop
 8006a3c:	08008da8 	.word	0x08008da8
 8006a40:	08008d80 	.word	0x08008d80
 8006a44:	3ff00000 	.word	0x3ff00000
 8006a48:	40240000 	.word	0x40240000
 8006a4c:	401c0000 	.word	0x401c0000
 8006a50:	40140000 	.word	0x40140000
 8006a54:	3fe00000 	.word	0x3fe00000
 8006a58:	4baf      	ldr	r3, [pc, #700]	; (8006d18 <_dtoa_r+0x920>)
 8006a5a:	f7f9 fdd5 	bl	8000608 <__aeabi_dmul>
 8006a5e:	4606      	mov	r6, r0
 8006a60:	460f      	mov	r7, r1
 8006a62:	e7ac      	b.n	80069be <_dtoa_r+0x5c6>
 8006a64:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006a68:	9d00      	ldr	r5, [sp, #0]
 8006a6a:	4642      	mov	r2, r8
 8006a6c:	464b      	mov	r3, r9
 8006a6e:	4630      	mov	r0, r6
 8006a70:	4639      	mov	r1, r7
 8006a72:	f7f9 fef3 	bl	800085c <__aeabi_ddiv>
 8006a76:	f7fa f877 	bl	8000b68 <__aeabi_d2iz>
 8006a7a:	9002      	str	r0, [sp, #8]
 8006a7c:	f7f9 fd5a 	bl	8000534 <__aeabi_i2d>
 8006a80:	4642      	mov	r2, r8
 8006a82:	464b      	mov	r3, r9
 8006a84:	f7f9 fdc0 	bl	8000608 <__aeabi_dmul>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	4630      	mov	r0, r6
 8006a8e:	4639      	mov	r1, r7
 8006a90:	f7f9 fc02 	bl	8000298 <__aeabi_dsub>
 8006a94:	9e02      	ldr	r6, [sp, #8]
 8006a96:	9f01      	ldr	r7, [sp, #4]
 8006a98:	3630      	adds	r6, #48	; 0x30
 8006a9a:	f805 6b01 	strb.w	r6, [r5], #1
 8006a9e:	9e00      	ldr	r6, [sp, #0]
 8006aa0:	1bae      	subs	r6, r5, r6
 8006aa2:	42b7      	cmp	r7, r6
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	d137      	bne.n	8006b1a <_dtoa_r+0x722>
 8006aaa:	f7f9 fbf7 	bl	800029c <__adddf3>
 8006aae:	4642      	mov	r2, r8
 8006ab0:	464b      	mov	r3, r9
 8006ab2:	4606      	mov	r6, r0
 8006ab4:	460f      	mov	r7, r1
 8006ab6:	f7fa f837 	bl	8000b28 <__aeabi_dcmpgt>
 8006aba:	b9c8      	cbnz	r0, 8006af0 <_dtoa_r+0x6f8>
 8006abc:	4642      	mov	r2, r8
 8006abe:	464b      	mov	r3, r9
 8006ac0:	4630      	mov	r0, r6
 8006ac2:	4639      	mov	r1, r7
 8006ac4:	f7fa f808 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ac8:	b110      	cbz	r0, 8006ad0 <_dtoa_r+0x6d8>
 8006aca:	9b02      	ldr	r3, [sp, #8]
 8006acc:	07d9      	lsls	r1, r3, #31
 8006ace:	d40f      	bmi.n	8006af0 <_dtoa_r+0x6f8>
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	4659      	mov	r1, fp
 8006ad4:	f000 fad6 	bl	8007084 <_Bfree>
 8006ad8:	2300      	movs	r3, #0
 8006ada:	702b      	strb	r3, [r5, #0]
 8006adc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ade:	f10a 0001 	add.w	r0, sl, #1
 8006ae2:	6018      	str	r0, [r3, #0]
 8006ae4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f43f acd8 	beq.w	800649c <_dtoa_r+0xa4>
 8006aec:	601d      	str	r5, [r3, #0]
 8006aee:	e4d5      	b.n	800649c <_dtoa_r+0xa4>
 8006af0:	f8cd a01c 	str.w	sl, [sp, #28]
 8006af4:	462b      	mov	r3, r5
 8006af6:	461d      	mov	r5, r3
 8006af8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006afc:	2a39      	cmp	r2, #57	; 0x39
 8006afe:	d108      	bne.n	8006b12 <_dtoa_r+0x71a>
 8006b00:	9a00      	ldr	r2, [sp, #0]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d1f7      	bne.n	8006af6 <_dtoa_r+0x6fe>
 8006b06:	9a07      	ldr	r2, [sp, #28]
 8006b08:	9900      	ldr	r1, [sp, #0]
 8006b0a:	3201      	adds	r2, #1
 8006b0c:	9207      	str	r2, [sp, #28]
 8006b0e:	2230      	movs	r2, #48	; 0x30
 8006b10:	700a      	strb	r2, [r1, #0]
 8006b12:	781a      	ldrb	r2, [r3, #0]
 8006b14:	3201      	adds	r2, #1
 8006b16:	701a      	strb	r2, [r3, #0]
 8006b18:	e78c      	b.n	8006a34 <_dtoa_r+0x63c>
 8006b1a:	4b7f      	ldr	r3, [pc, #508]	; (8006d18 <_dtoa_r+0x920>)
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f7f9 fd73 	bl	8000608 <__aeabi_dmul>
 8006b22:	2200      	movs	r2, #0
 8006b24:	2300      	movs	r3, #0
 8006b26:	4606      	mov	r6, r0
 8006b28:	460f      	mov	r7, r1
 8006b2a:	f7f9 ffd5 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b2e:	2800      	cmp	r0, #0
 8006b30:	d09b      	beq.n	8006a6a <_dtoa_r+0x672>
 8006b32:	e7cd      	b.n	8006ad0 <_dtoa_r+0x6d8>
 8006b34:	9a08      	ldr	r2, [sp, #32]
 8006b36:	2a00      	cmp	r2, #0
 8006b38:	f000 80c4 	beq.w	8006cc4 <_dtoa_r+0x8cc>
 8006b3c:	9a05      	ldr	r2, [sp, #20]
 8006b3e:	2a01      	cmp	r2, #1
 8006b40:	f300 80a8 	bgt.w	8006c94 <_dtoa_r+0x89c>
 8006b44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006b46:	2a00      	cmp	r2, #0
 8006b48:	f000 80a0 	beq.w	8006c8c <_dtoa_r+0x894>
 8006b4c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006b50:	9e06      	ldr	r6, [sp, #24]
 8006b52:	4645      	mov	r5, r8
 8006b54:	9a04      	ldr	r2, [sp, #16]
 8006b56:	2101      	movs	r1, #1
 8006b58:	441a      	add	r2, r3
 8006b5a:	4620      	mov	r0, r4
 8006b5c:	4498      	add	r8, r3
 8006b5e:	9204      	str	r2, [sp, #16]
 8006b60:	f000 fb4c 	bl	80071fc <__i2b>
 8006b64:	4607      	mov	r7, r0
 8006b66:	2d00      	cmp	r5, #0
 8006b68:	dd0b      	ble.n	8006b82 <_dtoa_r+0x78a>
 8006b6a:	9b04      	ldr	r3, [sp, #16]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	dd08      	ble.n	8006b82 <_dtoa_r+0x78a>
 8006b70:	42ab      	cmp	r3, r5
 8006b72:	9a04      	ldr	r2, [sp, #16]
 8006b74:	bfa8      	it	ge
 8006b76:	462b      	movge	r3, r5
 8006b78:	eba8 0803 	sub.w	r8, r8, r3
 8006b7c:	1aed      	subs	r5, r5, r3
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	9304      	str	r3, [sp, #16]
 8006b82:	9b06      	ldr	r3, [sp, #24]
 8006b84:	b1fb      	cbz	r3, 8006bc6 <_dtoa_r+0x7ce>
 8006b86:	9b08      	ldr	r3, [sp, #32]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f000 809f 	beq.w	8006ccc <_dtoa_r+0x8d4>
 8006b8e:	2e00      	cmp	r6, #0
 8006b90:	dd11      	ble.n	8006bb6 <_dtoa_r+0x7be>
 8006b92:	4639      	mov	r1, r7
 8006b94:	4632      	mov	r2, r6
 8006b96:	4620      	mov	r0, r4
 8006b98:	f000 fbec 	bl	8007374 <__pow5mult>
 8006b9c:	465a      	mov	r2, fp
 8006b9e:	4601      	mov	r1, r0
 8006ba0:	4607      	mov	r7, r0
 8006ba2:	4620      	mov	r0, r4
 8006ba4:	f000 fb40 	bl	8007228 <__multiply>
 8006ba8:	4659      	mov	r1, fp
 8006baa:	9007      	str	r0, [sp, #28]
 8006bac:	4620      	mov	r0, r4
 8006bae:	f000 fa69 	bl	8007084 <_Bfree>
 8006bb2:	9b07      	ldr	r3, [sp, #28]
 8006bb4:	469b      	mov	fp, r3
 8006bb6:	9b06      	ldr	r3, [sp, #24]
 8006bb8:	1b9a      	subs	r2, r3, r6
 8006bba:	d004      	beq.n	8006bc6 <_dtoa_r+0x7ce>
 8006bbc:	4659      	mov	r1, fp
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	f000 fbd8 	bl	8007374 <__pow5mult>
 8006bc4:	4683      	mov	fp, r0
 8006bc6:	2101      	movs	r1, #1
 8006bc8:	4620      	mov	r0, r4
 8006bca:	f000 fb17 	bl	80071fc <__i2b>
 8006bce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	4606      	mov	r6, r0
 8006bd4:	dd7c      	ble.n	8006cd0 <_dtoa_r+0x8d8>
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	4601      	mov	r1, r0
 8006bda:	4620      	mov	r0, r4
 8006bdc:	f000 fbca 	bl	8007374 <__pow5mult>
 8006be0:	9b05      	ldr	r3, [sp, #20]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	4606      	mov	r6, r0
 8006be6:	dd76      	ble.n	8006cd6 <_dtoa_r+0x8de>
 8006be8:	2300      	movs	r3, #0
 8006bea:	9306      	str	r3, [sp, #24]
 8006bec:	6933      	ldr	r3, [r6, #16]
 8006bee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006bf2:	6918      	ldr	r0, [r3, #16]
 8006bf4:	f000 fab2 	bl	800715c <__hi0bits>
 8006bf8:	f1c0 0020 	rsb	r0, r0, #32
 8006bfc:	9b04      	ldr	r3, [sp, #16]
 8006bfe:	4418      	add	r0, r3
 8006c00:	f010 001f 	ands.w	r0, r0, #31
 8006c04:	f000 8086 	beq.w	8006d14 <_dtoa_r+0x91c>
 8006c08:	f1c0 0320 	rsb	r3, r0, #32
 8006c0c:	2b04      	cmp	r3, #4
 8006c0e:	dd7f      	ble.n	8006d10 <_dtoa_r+0x918>
 8006c10:	f1c0 001c 	rsb	r0, r0, #28
 8006c14:	9b04      	ldr	r3, [sp, #16]
 8006c16:	4403      	add	r3, r0
 8006c18:	4480      	add	r8, r0
 8006c1a:	4405      	add	r5, r0
 8006c1c:	9304      	str	r3, [sp, #16]
 8006c1e:	f1b8 0f00 	cmp.w	r8, #0
 8006c22:	dd05      	ble.n	8006c30 <_dtoa_r+0x838>
 8006c24:	4659      	mov	r1, fp
 8006c26:	4642      	mov	r2, r8
 8006c28:	4620      	mov	r0, r4
 8006c2a:	f000 fbfd 	bl	8007428 <__lshift>
 8006c2e:	4683      	mov	fp, r0
 8006c30:	9b04      	ldr	r3, [sp, #16]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	dd05      	ble.n	8006c42 <_dtoa_r+0x84a>
 8006c36:	4631      	mov	r1, r6
 8006c38:	461a      	mov	r2, r3
 8006c3a:	4620      	mov	r0, r4
 8006c3c:	f000 fbf4 	bl	8007428 <__lshift>
 8006c40:	4606      	mov	r6, r0
 8006c42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d069      	beq.n	8006d1c <_dtoa_r+0x924>
 8006c48:	4631      	mov	r1, r6
 8006c4a:	4658      	mov	r0, fp
 8006c4c:	f000 fc58 	bl	8007500 <__mcmp>
 8006c50:	2800      	cmp	r0, #0
 8006c52:	da63      	bge.n	8006d1c <_dtoa_r+0x924>
 8006c54:	2300      	movs	r3, #0
 8006c56:	4659      	mov	r1, fp
 8006c58:	220a      	movs	r2, #10
 8006c5a:	4620      	mov	r0, r4
 8006c5c:	f000 fa34 	bl	80070c8 <__multadd>
 8006c60:	9b08      	ldr	r3, [sp, #32]
 8006c62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c66:	4683      	mov	fp, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f000 818f 	beq.w	8006f8c <_dtoa_r+0xb94>
 8006c6e:	4639      	mov	r1, r7
 8006c70:	2300      	movs	r3, #0
 8006c72:	220a      	movs	r2, #10
 8006c74:	4620      	mov	r0, r4
 8006c76:	f000 fa27 	bl	80070c8 <__multadd>
 8006c7a:	f1b9 0f00 	cmp.w	r9, #0
 8006c7e:	4607      	mov	r7, r0
 8006c80:	f300 808e 	bgt.w	8006da0 <_dtoa_r+0x9a8>
 8006c84:	9b05      	ldr	r3, [sp, #20]
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	dc50      	bgt.n	8006d2c <_dtoa_r+0x934>
 8006c8a:	e089      	b.n	8006da0 <_dtoa_r+0x9a8>
 8006c8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006c92:	e75d      	b.n	8006b50 <_dtoa_r+0x758>
 8006c94:	9b01      	ldr	r3, [sp, #4]
 8006c96:	1e5e      	subs	r6, r3, #1
 8006c98:	9b06      	ldr	r3, [sp, #24]
 8006c9a:	42b3      	cmp	r3, r6
 8006c9c:	bfbf      	itttt	lt
 8006c9e:	9b06      	ldrlt	r3, [sp, #24]
 8006ca0:	9606      	strlt	r6, [sp, #24]
 8006ca2:	1af2      	sublt	r2, r6, r3
 8006ca4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006ca6:	bfb6      	itet	lt
 8006ca8:	189b      	addlt	r3, r3, r2
 8006caa:	1b9e      	subge	r6, r3, r6
 8006cac:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006cae:	9b01      	ldr	r3, [sp, #4]
 8006cb0:	bfb8      	it	lt
 8006cb2:	2600      	movlt	r6, #0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	bfb5      	itete	lt
 8006cb8:	eba8 0503 	sublt.w	r5, r8, r3
 8006cbc:	9b01      	ldrge	r3, [sp, #4]
 8006cbe:	2300      	movlt	r3, #0
 8006cc0:	4645      	movge	r5, r8
 8006cc2:	e747      	b.n	8006b54 <_dtoa_r+0x75c>
 8006cc4:	9e06      	ldr	r6, [sp, #24]
 8006cc6:	9f08      	ldr	r7, [sp, #32]
 8006cc8:	4645      	mov	r5, r8
 8006cca:	e74c      	b.n	8006b66 <_dtoa_r+0x76e>
 8006ccc:	9a06      	ldr	r2, [sp, #24]
 8006cce:	e775      	b.n	8006bbc <_dtoa_r+0x7c4>
 8006cd0:	9b05      	ldr	r3, [sp, #20]
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	dc18      	bgt.n	8006d08 <_dtoa_r+0x910>
 8006cd6:	9b02      	ldr	r3, [sp, #8]
 8006cd8:	b9b3      	cbnz	r3, 8006d08 <_dtoa_r+0x910>
 8006cda:	9b03      	ldr	r3, [sp, #12]
 8006cdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ce0:	b9a3      	cbnz	r3, 8006d0c <_dtoa_r+0x914>
 8006ce2:	9b03      	ldr	r3, [sp, #12]
 8006ce4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ce8:	0d1b      	lsrs	r3, r3, #20
 8006cea:	051b      	lsls	r3, r3, #20
 8006cec:	b12b      	cbz	r3, 8006cfa <_dtoa_r+0x902>
 8006cee:	9b04      	ldr	r3, [sp, #16]
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	9304      	str	r3, [sp, #16]
 8006cf4:	f108 0801 	add.w	r8, r8, #1
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	9306      	str	r3, [sp, #24]
 8006cfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	f47f af74 	bne.w	8006bec <_dtoa_r+0x7f4>
 8006d04:	2001      	movs	r0, #1
 8006d06:	e779      	b.n	8006bfc <_dtoa_r+0x804>
 8006d08:	2300      	movs	r3, #0
 8006d0a:	e7f6      	b.n	8006cfa <_dtoa_r+0x902>
 8006d0c:	9b02      	ldr	r3, [sp, #8]
 8006d0e:	e7f4      	b.n	8006cfa <_dtoa_r+0x902>
 8006d10:	d085      	beq.n	8006c1e <_dtoa_r+0x826>
 8006d12:	4618      	mov	r0, r3
 8006d14:	301c      	adds	r0, #28
 8006d16:	e77d      	b.n	8006c14 <_dtoa_r+0x81c>
 8006d18:	40240000 	.word	0x40240000
 8006d1c:	9b01      	ldr	r3, [sp, #4]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	dc38      	bgt.n	8006d94 <_dtoa_r+0x99c>
 8006d22:	9b05      	ldr	r3, [sp, #20]
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	dd35      	ble.n	8006d94 <_dtoa_r+0x99c>
 8006d28:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006d2c:	f1b9 0f00 	cmp.w	r9, #0
 8006d30:	d10d      	bne.n	8006d4e <_dtoa_r+0x956>
 8006d32:	4631      	mov	r1, r6
 8006d34:	464b      	mov	r3, r9
 8006d36:	2205      	movs	r2, #5
 8006d38:	4620      	mov	r0, r4
 8006d3a:	f000 f9c5 	bl	80070c8 <__multadd>
 8006d3e:	4601      	mov	r1, r0
 8006d40:	4606      	mov	r6, r0
 8006d42:	4658      	mov	r0, fp
 8006d44:	f000 fbdc 	bl	8007500 <__mcmp>
 8006d48:	2800      	cmp	r0, #0
 8006d4a:	f73f adbd 	bgt.w	80068c8 <_dtoa_r+0x4d0>
 8006d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d50:	9d00      	ldr	r5, [sp, #0]
 8006d52:	ea6f 0a03 	mvn.w	sl, r3
 8006d56:	f04f 0800 	mov.w	r8, #0
 8006d5a:	4631      	mov	r1, r6
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	f000 f991 	bl	8007084 <_Bfree>
 8006d62:	2f00      	cmp	r7, #0
 8006d64:	f43f aeb4 	beq.w	8006ad0 <_dtoa_r+0x6d8>
 8006d68:	f1b8 0f00 	cmp.w	r8, #0
 8006d6c:	d005      	beq.n	8006d7a <_dtoa_r+0x982>
 8006d6e:	45b8      	cmp	r8, r7
 8006d70:	d003      	beq.n	8006d7a <_dtoa_r+0x982>
 8006d72:	4641      	mov	r1, r8
 8006d74:	4620      	mov	r0, r4
 8006d76:	f000 f985 	bl	8007084 <_Bfree>
 8006d7a:	4639      	mov	r1, r7
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	f000 f981 	bl	8007084 <_Bfree>
 8006d82:	e6a5      	b.n	8006ad0 <_dtoa_r+0x6d8>
 8006d84:	2600      	movs	r6, #0
 8006d86:	4637      	mov	r7, r6
 8006d88:	e7e1      	b.n	8006d4e <_dtoa_r+0x956>
 8006d8a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006d8c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006d90:	4637      	mov	r7, r6
 8006d92:	e599      	b.n	80068c8 <_dtoa_r+0x4d0>
 8006d94:	9b08      	ldr	r3, [sp, #32]
 8006d96:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	f000 80fd 	beq.w	8006f9a <_dtoa_r+0xba2>
 8006da0:	2d00      	cmp	r5, #0
 8006da2:	dd05      	ble.n	8006db0 <_dtoa_r+0x9b8>
 8006da4:	4639      	mov	r1, r7
 8006da6:	462a      	mov	r2, r5
 8006da8:	4620      	mov	r0, r4
 8006daa:	f000 fb3d 	bl	8007428 <__lshift>
 8006dae:	4607      	mov	r7, r0
 8006db0:	9b06      	ldr	r3, [sp, #24]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d05c      	beq.n	8006e70 <_dtoa_r+0xa78>
 8006db6:	6879      	ldr	r1, [r7, #4]
 8006db8:	4620      	mov	r0, r4
 8006dba:	f000 f923 	bl	8007004 <_Balloc>
 8006dbe:	4605      	mov	r5, r0
 8006dc0:	b928      	cbnz	r0, 8006dce <_dtoa_r+0x9d6>
 8006dc2:	4b80      	ldr	r3, [pc, #512]	; (8006fc4 <_dtoa_r+0xbcc>)
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006dca:	f7ff bb2e 	b.w	800642a <_dtoa_r+0x32>
 8006dce:	693a      	ldr	r2, [r7, #16]
 8006dd0:	3202      	adds	r2, #2
 8006dd2:	0092      	lsls	r2, r2, #2
 8006dd4:	f107 010c 	add.w	r1, r7, #12
 8006dd8:	300c      	adds	r0, #12
 8006dda:	f000 f905 	bl	8006fe8 <memcpy>
 8006dde:	2201      	movs	r2, #1
 8006de0:	4629      	mov	r1, r5
 8006de2:	4620      	mov	r0, r4
 8006de4:	f000 fb20 	bl	8007428 <__lshift>
 8006de8:	9b00      	ldr	r3, [sp, #0]
 8006dea:	3301      	adds	r3, #1
 8006dec:	9301      	str	r3, [sp, #4]
 8006dee:	9b00      	ldr	r3, [sp, #0]
 8006df0:	444b      	add	r3, r9
 8006df2:	9307      	str	r3, [sp, #28]
 8006df4:	9b02      	ldr	r3, [sp, #8]
 8006df6:	f003 0301 	and.w	r3, r3, #1
 8006dfa:	46b8      	mov	r8, r7
 8006dfc:	9306      	str	r3, [sp, #24]
 8006dfe:	4607      	mov	r7, r0
 8006e00:	9b01      	ldr	r3, [sp, #4]
 8006e02:	4631      	mov	r1, r6
 8006e04:	3b01      	subs	r3, #1
 8006e06:	4658      	mov	r0, fp
 8006e08:	9302      	str	r3, [sp, #8]
 8006e0a:	f7ff fa67 	bl	80062dc <quorem>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	3330      	adds	r3, #48	; 0x30
 8006e12:	9004      	str	r0, [sp, #16]
 8006e14:	4641      	mov	r1, r8
 8006e16:	4658      	mov	r0, fp
 8006e18:	9308      	str	r3, [sp, #32]
 8006e1a:	f000 fb71 	bl	8007500 <__mcmp>
 8006e1e:	463a      	mov	r2, r7
 8006e20:	4681      	mov	r9, r0
 8006e22:	4631      	mov	r1, r6
 8006e24:	4620      	mov	r0, r4
 8006e26:	f000 fb87 	bl	8007538 <__mdiff>
 8006e2a:	68c2      	ldr	r2, [r0, #12]
 8006e2c:	9b08      	ldr	r3, [sp, #32]
 8006e2e:	4605      	mov	r5, r0
 8006e30:	bb02      	cbnz	r2, 8006e74 <_dtoa_r+0xa7c>
 8006e32:	4601      	mov	r1, r0
 8006e34:	4658      	mov	r0, fp
 8006e36:	f000 fb63 	bl	8007500 <__mcmp>
 8006e3a:	9b08      	ldr	r3, [sp, #32]
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	4629      	mov	r1, r5
 8006e40:	4620      	mov	r0, r4
 8006e42:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006e46:	f000 f91d 	bl	8007084 <_Bfree>
 8006e4a:	9b05      	ldr	r3, [sp, #20]
 8006e4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e4e:	9d01      	ldr	r5, [sp, #4]
 8006e50:	ea43 0102 	orr.w	r1, r3, r2
 8006e54:	9b06      	ldr	r3, [sp, #24]
 8006e56:	430b      	orrs	r3, r1
 8006e58:	9b08      	ldr	r3, [sp, #32]
 8006e5a:	d10d      	bne.n	8006e78 <_dtoa_r+0xa80>
 8006e5c:	2b39      	cmp	r3, #57	; 0x39
 8006e5e:	d029      	beq.n	8006eb4 <_dtoa_r+0xabc>
 8006e60:	f1b9 0f00 	cmp.w	r9, #0
 8006e64:	dd01      	ble.n	8006e6a <_dtoa_r+0xa72>
 8006e66:	9b04      	ldr	r3, [sp, #16]
 8006e68:	3331      	adds	r3, #49	; 0x31
 8006e6a:	9a02      	ldr	r2, [sp, #8]
 8006e6c:	7013      	strb	r3, [r2, #0]
 8006e6e:	e774      	b.n	8006d5a <_dtoa_r+0x962>
 8006e70:	4638      	mov	r0, r7
 8006e72:	e7b9      	b.n	8006de8 <_dtoa_r+0x9f0>
 8006e74:	2201      	movs	r2, #1
 8006e76:	e7e2      	b.n	8006e3e <_dtoa_r+0xa46>
 8006e78:	f1b9 0f00 	cmp.w	r9, #0
 8006e7c:	db06      	blt.n	8006e8c <_dtoa_r+0xa94>
 8006e7e:	9905      	ldr	r1, [sp, #20]
 8006e80:	ea41 0909 	orr.w	r9, r1, r9
 8006e84:	9906      	ldr	r1, [sp, #24]
 8006e86:	ea59 0101 	orrs.w	r1, r9, r1
 8006e8a:	d120      	bne.n	8006ece <_dtoa_r+0xad6>
 8006e8c:	2a00      	cmp	r2, #0
 8006e8e:	ddec      	ble.n	8006e6a <_dtoa_r+0xa72>
 8006e90:	4659      	mov	r1, fp
 8006e92:	2201      	movs	r2, #1
 8006e94:	4620      	mov	r0, r4
 8006e96:	9301      	str	r3, [sp, #4]
 8006e98:	f000 fac6 	bl	8007428 <__lshift>
 8006e9c:	4631      	mov	r1, r6
 8006e9e:	4683      	mov	fp, r0
 8006ea0:	f000 fb2e 	bl	8007500 <__mcmp>
 8006ea4:	2800      	cmp	r0, #0
 8006ea6:	9b01      	ldr	r3, [sp, #4]
 8006ea8:	dc02      	bgt.n	8006eb0 <_dtoa_r+0xab8>
 8006eaa:	d1de      	bne.n	8006e6a <_dtoa_r+0xa72>
 8006eac:	07da      	lsls	r2, r3, #31
 8006eae:	d5dc      	bpl.n	8006e6a <_dtoa_r+0xa72>
 8006eb0:	2b39      	cmp	r3, #57	; 0x39
 8006eb2:	d1d8      	bne.n	8006e66 <_dtoa_r+0xa6e>
 8006eb4:	9a02      	ldr	r2, [sp, #8]
 8006eb6:	2339      	movs	r3, #57	; 0x39
 8006eb8:	7013      	strb	r3, [r2, #0]
 8006eba:	462b      	mov	r3, r5
 8006ebc:	461d      	mov	r5, r3
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006ec4:	2a39      	cmp	r2, #57	; 0x39
 8006ec6:	d050      	beq.n	8006f6a <_dtoa_r+0xb72>
 8006ec8:	3201      	adds	r2, #1
 8006eca:	701a      	strb	r2, [r3, #0]
 8006ecc:	e745      	b.n	8006d5a <_dtoa_r+0x962>
 8006ece:	2a00      	cmp	r2, #0
 8006ed0:	dd03      	ble.n	8006eda <_dtoa_r+0xae2>
 8006ed2:	2b39      	cmp	r3, #57	; 0x39
 8006ed4:	d0ee      	beq.n	8006eb4 <_dtoa_r+0xabc>
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	e7c7      	b.n	8006e6a <_dtoa_r+0xa72>
 8006eda:	9a01      	ldr	r2, [sp, #4]
 8006edc:	9907      	ldr	r1, [sp, #28]
 8006ede:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006ee2:	428a      	cmp	r2, r1
 8006ee4:	d02a      	beq.n	8006f3c <_dtoa_r+0xb44>
 8006ee6:	4659      	mov	r1, fp
 8006ee8:	2300      	movs	r3, #0
 8006eea:	220a      	movs	r2, #10
 8006eec:	4620      	mov	r0, r4
 8006eee:	f000 f8eb 	bl	80070c8 <__multadd>
 8006ef2:	45b8      	cmp	r8, r7
 8006ef4:	4683      	mov	fp, r0
 8006ef6:	f04f 0300 	mov.w	r3, #0
 8006efa:	f04f 020a 	mov.w	r2, #10
 8006efe:	4641      	mov	r1, r8
 8006f00:	4620      	mov	r0, r4
 8006f02:	d107      	bne.n	8006f14 <_dtoa_r+0xb1c>
 8006f04:	f000 f8e0 	bl	80070c8 <__multadd>
 8006f08:	4680      	mov	r8, r0
 8006f0a:	4607      	mov	r7, r0
 8006f0c:	9b01      	ldr	r3, [sp, #4]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	9301      	str	r3, [sp, #4]
 8006f12:	e775      	b.n	8006e00 <_dtoa_r+0xa08>
 8006f14:	f000 f8d8 	bl	80070c8 <__multadd>
 8006f18:	4639      	mov	r1, r7
 8006f1a:	4680      	mov	r8, r0
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	220a      	movs	r2, #10
 8006f20:	4620      	mov	r0, r4
 8006f22:	f000 f8d1 	bl	80070c8 <__multadd>
 8006f26:	4607      	mov	r7, r0
 8006f28:	e7f0      	b.n	8006f0c <_dtoa_r+0xb14>
 8006f2a:	f1b9 0f00 	cmp.w	r9, #0
 8006f2e:	9a00      	ldr	r2, [sp, #0]
 8006f30:	bfcc      	ite	gt
 8006f32:	464d      	movgt	r5, r9
 8006f34:	2501      	movle	r5, #1
 8006f36:	4415      	add	r5, r2
 8006f38:	f04f 0800 	mov.w	r8, #0
 8006f3c:	4659      	mov	r1, fp
 8006f3e:	2201      	movs	r2, #1
 8006f40:	4620      	mov	r0, r4
 8006f42:	9301      	str	r3, [sp, #4]
 8006f44:	f000 fa70 	bl	8007428 <__lshift>
 8006f48:	4631      	mov	r1, r6
 8006f4a:	4683      	mov	fp, r0
 8006f4c:	f000 fad8 	bl	8007500 <__mcmp>
 8006f50:	2800      	cmp	r0, #0
 8006f52:	dcb2      	bgt.n	8006eba <_dtoa_r+0xac2>
 8006f54:	d102      	bne.n	8006f5c <_dtoa_r+0xb64>
 8006f56:	9b01      	ldr	r3, [sp, #4]
 8006f58:	07db      	lsls	r3, r3, #31
 8006f5a:	d4ae      	bmi.n	8006eba <_dtoa_r+0xac2>
 8006f5c:	462b      	mov	r3, r5
 8006f5e:	461d      	mov	r5, r3
 8006f60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f64:	2a30      	cmp	r2, #48	; 0x30
 8006f66:	d0fa      	beq.n	8006f5e <_dtoa_r+0xb66>
 8006f68:	e6f7      	b.n	8006d5a <_dtoa_r+0x962>
 8006f6a:	9a00      	ldr	r2, [sp, #0]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d1a5      	bne.n	8006ebc <_dtoa_r+0xac4>
 8006f70:	f10a 0a01 	add.w	sl, sl, #1
 8006f74:	2331      	movs	r3, #49	; 0x31
 8006f76:	e779      	b.n	8006e6c <_dtoa_r+0xa74>
 8006f78:	4b13      	ldr	r3, [pc, #76]	; (8006fc8 <_dtoa_r+0xbd0>)
 8006f7a:	f7ff baaf 	b.w	80064dc <_dtoa_r+0xe4>
 8006f7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f47f aa86 	bne.w	8006492 <_dtoa_r+0x9a>
 8006f86:	4b11      	ldr	r3, [pc, #68]	; (8006fcc <_dtoa_r+0xbd4>)
 8006f88:	f7ff baa8 	b.w	80064dc <_dtoa_r+0xe4>
 8006f8c:	f1b9 0f00 	cmp.w	r9, #0
 8006f90:	dc03      	bgt.n	8006f9a <_dtoa_r+0xba2>
 8006f92:	9b05      	ldr	r3, [sp, #20]
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	f73f aec9 	bgt.w	8006d2c <_dtoa_r+0x934>
 8006f9a:	9d00      	ldr	r5, [sp, #0]
 8006f9c:	4631      	mov	r1, r6
 8006f9e:	4658      	mov	r0, fp
 8006fa0:	f7ff f99c 	bl	80062dc <quorem>
 8006fa4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006fa8:	f805 3b01 	strb.w	r3, [r5], #1
 8006fac:	9a00      	ldr	r2, [sp, #0]
 8006fae:	1aaa      	subs	r2, r5, r2
 8006fb0:	4591      	cmp	r9, r2
 8006fb2:	ddba      	ble.n	8006f2a <_dtoa_r+0xb32>
 8006fb4:	4659      	mov	r1, fp
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	220a      	movs	r2, #10
 8006fba:	4620      	mov	r0, r4
 8006fbc:	f000 f884 	bl	80070c8 <__multadd>
 8006fc0:	4683      	mov	fp, r0
 8006fc2:	e7eb      	b.n	8006f9c <_dtoa_r+0xba4>
 8006fc4:	08008d0b 	.word	0x08008d0b
 8006fc8:	08008c64 	.word	0x08008c64
 8006fcc:	08008c88 	.word	0x08008c88

08006fd0 <_localeconv_r>:
 8006fd0:	4800      	ldr	r0, [pc, #0]	; (8006fd4 <_localeconv_r+0x4>)
 8006fd2:	4770      	bx	lr
 8006fd4:	20000160 	.word	0x20000160

08006fd8 <malloc>:
 8006fd8:	4b02      	ldr	r3, [pc, #8]	; (8006fe4 <malloc+0xc>)
 8006fda:	4601      	mov	r1, r0
 8006fdc:	6818      	ldr	r0, [r3, #0]
 8006fde:	f000 bbef 	b.w	80077c0 <_malloc_r>
 8006fe2:	bf00      	nop
 8006fe4:	2000000c 	.word	0x2000000c

08006fe8 <memcpy>:
 8006fe8:	440a      	add	r2, r1
 8006fea:	4291      	cmp	r1, r2
 8006fec:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ff0:	d100      	bne.n	8006ff4 <memcpy+0xc>
 8006ff2:	4770      	bx	lr
 8006ff4:	b510      	push	{r4, lr}
 8006ff6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ffa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ffe:	4291      	cmp	r1, r2
 8007000:	d1f9      	bne.n	8006ff6 <memcpy+0xe>
 8007002:	bd10      	pop	{r4, pc}

08007004 <_Balloc>:
 8007004:	b570      	push	{r4, r5, r6, lr}
 8007006:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007008:	4604      	mov	r4, r0
 800700a:	460d      	mov	r5, r1
 800700c:	b976      	cbnz	r6, 800702c <_Balloc+0x28>
 800700e:	2010      	movs	r0, #16
 8007010:	f7ff ffe2 	bl	8006fd8 <malloc>
 8007014:	4602      	mov	r2, r0
 8007016:	6260      	str	r0, [r4, #36]	; 0x24
 8007018:	b920      	cbnz	r0, 8007024 <_Balloc+0x20>
 800701a:	4b18      	ldr	r3, [pc, #96]	; (800707c <_Balloc+0x78>)
 800701c:	4818      	ldr	r0, [pc, #96]	; (8007080 <_Balloc+0x7c>)
 800701e:	2166      	movs	r1, #102	; 0x66
 8007020:	f000 fd94 	bl	8007b4c <__assert_func>
 8007024:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007028:	6006      	str	r6, [r0, #0]
 800702a:	60c6      	str	r6, [r0, #12]
 800702c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800702e:	68f3      	ldr	r3, [r6, #12]
 8007030:	b183      	cbz	r3, 8007054 <_Balloc+0x50>
 8007032:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800703a:	b9b8      	cbnz	r0, 800706c <_Balloc+0x68>
 800703c:	2101      	movs	r1, #1
 800703e:	fa01 f605 	lsl.w	r6, r1, r5
 8007042:	1d72      	adds	r2, r6, #5
 8007044:	0092      	lsls	r2, r2, #2
 8007046:	4620      	mov	r0, r4
 8007048:	f000 fb5a 	bl	8007700 <_calloc_r>
 800704c:	b160      	cbz	r0, 8007068 <_Balloc+0x64>
 800704e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007052:	e00e      	b.n	8007072 <_Balloc+0x6e>
 8007054:	2221      	movs	r2, #33	; 0x21
 8007056:	2104      	movs	r1, #4
 8007058:	4620      	mov	r0, r4
 800705a:	f000 fb51 	bl	8007700 <_calloc_r>
 800705e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007060:	60f0      	str	r0, [r6, #12]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d1e4      	bne.n	8007032 <_Balloc+0x2e>
 8007068:	2000      	movs	r0, #0
 800706a:	bd70      	pop	{r4, r5, r6, pc}
 800706c:	6802      	ldr	r2, [r0, #0]
 800706e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007072:	2300      	movs	r3, #0
 8007074:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007078:	e7f7      	b.n	800706a <_Balloc+0x66>
 800707a:	bf00      	nop
 800707c:	08008c95 	.word	0x08008c95
 8007080:	08008d1c 	.word	0x08008d1c

08007084 <_Bfree>:
 8007084:	b570      	push	{r4, r5, r6, lr}
 8007086:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007088:	4605      	mov	r5, r0
 800708a:	460c      	mov	r4, r1
 800708c:	b976      	cbnz	r6, 80070ac <_Bfree+0x28>
 800708e:	2010      	movs	r0, #16
 8007090:	f7ff ffa2 	bl	8006fd8 <malloc>
 8007094:	4602      	mov	r2, r0
 8007096:	6268      	str	r0, [r5, #36]	; 0x24
 8007098:	b920      	cbnz	r0, 80070a4 <_Bfree+0x20>
 800709a:	4b09      	ldr	r3, [pc, #36]	; (80070c0 <_Bfree+0x3c>)
 800709c:	4809      	ldr	r0, [pc, #36]	; (80070c4 <_Bfree+0x40>)
 800709e:	218a      	movs	r1, #138	; 0x8a
 80070a0:	f000 fd54 	bl	8007b4c <__assert_func>
 80070a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80070a8:	6006      	str	r6, [r0, #0]
 80070aa:	60c6      	str	r6, [r0, #12]
 80070ac:	b13c      	cbz	r4, 80070be <_Bfree+0x3a>
 80070ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80070b0:	6862      	ldr	r2, [r4, #4]
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80070b8:	6021      	str	r1, [r4, #0]
 80070ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80070be:	bd70      	pop	{r4, r5, r6, pc}
 80070c0:	08008c95 	.word	0x08008c95
 80070c4:	08008d1c 	.word	0x08008d1c

080070c8 <__multadd>:
 80070c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070cc:	690e      	ldr	r6, [r1, #16]
 80070ce:	4607      	mov	r7, r0
 80070d0:	4698      	mov	r8, r3
 80070d2:	460c      	mov	r4, r1
 80070d4:	f101 0014 	add.w	r0, r1, #20
 80070d8:	2300      	movs	r3, #0
 80070da:	6805      	ldr	r5, [r0, #0]
 80070dc:	b2a9      	uxth	r1, r5
 80070de:	fb02 8101 	mla	r1, r2, r1, r8
 80070e2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80070e6:	0c2d      	lsrs	r5, r5, #16
 80070e8:	fb02 c505 	mla	r5, r2, r5, ip
 80070ec:	b289      	uxth	r1, r1
 80070ee:	3301      	adds	r3, #1
 80070f0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80070f4:	429e      	cmp	r6, r3
 80070f6:	f840 1b04 	str.w	r1, [r0], #4
 80070fa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80070fe:	dcec      	bgt.n	80070da <__multadd+0x12>
 8007100:	f1b8 0f00 	cmp.w	r8, #0
 8007104:	d022      	beq.n	800714c <__multadd+0x84>
 8007106:	68a3      	ldr	r3, [r4, #8]
 8007108:	42b3      	cmp	r3, r6
 800710a:	dc19      	bgt.n	8007140 <__multadd+0x78>
 800710c:	6861      	ldr	r1, [r4, #4]
 800710e:	4638      	mov	r0, r7
 8007110:	3101      	adds	r1, #1
 8007112:	f7ff ff77 	bl	8007004 <_Balloc>
 8007116:	4605      	mov	r5, r0
 8007118:	b928      	cbnz	r0, 8007126 <__multadd+0x5e>
 800711a:	4602      	mov	r2, r0
 800711c:	4b0d      	ldr	r3, [pc, #52]	; (8007154 <__multadd+0x8c>)
 800711e:	480e      	ldr	r0, [pc, #56]	; (8007158 <__multadd+0x90>)
 8007120:	21b5      	movs	r1, #181	; 0xb5
 8007122:	f000 fd13 	bl	8007b4c <__assert_func>
 8007126:	6922      	ldr	r2, [r4, #16]
 8007128:	3202      	adds	r2, #2
 800712a:	f104 010c 	add.w	r1, r4, #12
 800712e:	0092      	lsls	r2, r2, #2
 8007130:	300c      	adds	r0, #12
 8007132:	f7ff ff59 	bl	8006fe8 <memcpy>
 8007136:	4621      	mov	r1, r4
 8007138:	4638      	mov	r0, r7
 800713a:	f7ff ffa3 	bl	8007084 <_Bfree>
 800713e:	462c      	mov	r4, r5
 8007140:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007144:	3601      	adds	r6, #1
 8007146:	f8c3 8014 	str.w	r8, [r3, #20]
 800714a:	6126      	str	r6, [r4, #16]
 800714c:	4620      	mov	r0, r4
 800714e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007152:	bf00      	nop
 8007154:	08008d0b 	.word	0x08008d0b
 8007158:	08008d1c 	.word	0x08008d1c

0800715c <__hi0bits>:
 800715c:	0c03      	lsrs	r3, r0, #16
 800715e:	041b      	lsls	r3, r3, #16
 8007160:	b9d3      	cbnz	r3, 8007198 <__hi0bits+0x3c>
 8007162:	0400      	lsls	r0, r0, #16
 8007164:	2310      	movs	r3, #16
 8007166:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800716a:	bf04      	itt	eq
 800716c:	0200      	lsleq	r0, r0, #8
 800716e:	3308      	addeq	r3, #8
 8007170:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007174:	bf04      	itt	eq
 8007176:	0100      	lsleq	r0, r0, #4
 8007178:	3304      	addeq	r3, #4
 800717a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800717e:	bf04      	itt	eq
 8007180:	0080      	lsleq	r0, r0, #2
 8007182:	3302      	addeq	r3, #2
 8007184:	2800      	cmp	r0, #0
 8007186:	db05      	blt.n	8007194 <__hi0bits+0x38>
 8007188:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800718c:	f103 0301 	add.w	r3, r3, #1
 8007190:	bf08      	it	eq
 8007192:	2320      	moveq	r3, #32
 8007194:	4618      	mov	r0, r3
 8007196:	4770      	bx	lr
 8007198:	2300      	movs	r3, #0
 800719a:	e7e4      	b.n	8007166 <__hi0bits+0xa>

0800719c <__lo0bits>:
 800719c:	6803      	ldr	r3, [r0, #0]
 800719e:	f013 0207 	ands.w	r2, r3, #7
 80071a2:	4601      	mov	r1, r0
 80071a4:	d00b      	beq.n	80071be <__lo0bits+0x22>
 80071a6:	07da      	lsls	r2, r3, #31
 80071a8:	d424      	bmi.n	80071f4 <__lo0bits+0x58>
 80071aa:	0798      	lsls	r0, r3, #30
 80071ac:	bf49      	itett	mi
 80071ae:	085b      	lsrmi	r3, r3, #1
 80071b0:	089b      	lsrpl	r3, r3, #2
 80071b2:	2001      	movmi	r0, #1
 80071b4:	600b      	strmi	r3, [r1, #0]
 80071b6:	bf5c      	itt	pl
 80071b8:	600b      	strpl	r3, [r1, #0]
 80071ba:	2002      	movpl	r0, #2
 80071bc:	4770      	bx	lr
 80071be:	b298      	uxth	r0, r3
 80071c0:	b9b0      	cbnz	r0, 80071f0 <__lo0bits+0x54>
 80071c2:	0c1b      	lsrs	r3, r3, #16
 80071c4:	2010      	movs	r0, #16
 80071c6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80071ca:	bf04      	itt	eq
 80071cc:	0a1b      	lsreq	r3, r3, #8
 80071ce:	3008      	addeq	r0, #8
 80071d0:	071a      	lsls	r2, r3, #28
 80071d2:	bf04      	itt	eq
 80071d4:	091b      	lsreq	r3, r3, #4
 80071d6:	3004      	addeq	r0, #4
 80071d8:	079a      	lsls	r2, r3, #30
 80071da:	bf04      	itt	eq
 80071dc:	089b      	lsreq	r3, r3, #2
 80071de:	3002      	addeq	r0, #2
 80071e0:	07da      	lsls	r2, r3, #31
 80071e2:	d403      	bmi.n	80071ec <__lo0bits+0x50>
 80071e4:	085b      	lsrs	r3, r3, #1
 80071e6:	f100 0001 	add.w	r0, r0, #1
 80071ea:	d005      	beq.n	80071f8 <__lo0bits+0x5c>
 80071ec:	600b      	str	r3, [r1, #0]
 80071ee:	4770      	bx	lr
 80071f0:	4610      	mov	r0, r2
 80071f2:	e7e8      	b.n	80071c6 <__lo0bits+0x2a>
 80071f4:	2000      	movs	r0, #0
 80071f6:	4770      	bx	lr
 80071f8:	2020      	movs	r0, #32
 80071fa:	4770      	bx	lr

080071fc <__i2b>:
 80071fc:	b510      	push	{r4, lr}
 80071fe:	460c      	mov	r4, r1
 8007200:	2101      	movs	r1, #1
 8007202:	f7ff feff 	bl	8007004 <_Balloc>
 8007206:	4602      	mov	r2, r0
 8007208:	b928      	cbnz	r0, 8007216 <__i2b+0x1a>
 800720a:	4b05      	ldr	r3, [pc, #20]	; (8007220 <__i2b+0x24>)
 800720c:	4805      	ldr	r0, [pc, #20]	; (8007224 <__i2b+0x28>)
 800720e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007212:	f000 fc9b 	bl	8007b4c <__assert_func>
 8007216:	2301      	movs	r3, #1
 8007218:	6144      	str	r4, [r0, #20]
 800721a:	6103      	str	r3, [r0, #16]
 800721c:	bd10      	pop	{r4, pc}
 800721e:	bf00      	nop
 8007220:	08008d0b 	.word	0x08008d0b
 8007224:	08008d1c 	.word	0x08008d1c

08007228 <__multiply>:
 8007228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800722c:	4614      	mov	r4, r2
 800722e:	690a      	ldr	r2, [r1, #16]
 8007230:	6923      	ldr	r3, [r4, #16]
 8007232:	429a      	cmp	r2, r3
 8007234:	bfb8      	it	lt
 8007236:	460b      	movlt	r3, r1
 8007238:	460d      	mov	r5, r1
 800723a:	bfbc      	itt	lt
 800723c:	4625      	movlt	r5, r4
 800723e:	461c      	movlt	r4, r3
 8007240:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007244:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007248:	68ab      	ldr	r3, [r5, #8]
 800724a:	6869      	ldr	r1, [r5, #4]
 800724c:	eb0a 0709 	add.w	r7, sl, r9
 8007250:	42bb      	cmp	r3, r7
 8007252:	b085      	sub	sp, #20
 8007254:	bfb8      	it	lt
 8007256:	3101      	addlt	r1, #1
 8007258:	f7ff fed4 	bl	8007004 <_Balloc>
 800725c:	b930      	cbnz	r0, 800726c <__multiply+0x44>
 800725e:	4602      	mov	r2, r0
 8007260:	4b42      	ldr	r3, [pc, #264]	; (800736c <__multiply+0x144>)
 8007262:	4843      	ldr	r0, [pc, #268]	; (8007370 <__multiply+0x148>)
 8007264:	f240 115d 	movw	r1, #349	; 0x15d
 8007268:	f000 fc70 	bl	8007b4c <__assert_func>
 800726c:	f100 0614 	add.w	r6, r0, #20
 8007270:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007274:	4633      	mov	r3, r6
 8007276:	2200      	movs	r2, #0
 8007278:	4543      	cmp	r3, r8
 800727a:	d31e      	bcc.n	80072ba <__multiply+0x92>
 800727c:	f105 0c14 	add.w	ip, r5, #20
 8007280:	f104 0314 	add.w	r3, r4, #20
 8007284:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007288:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800728c:	9202      	str	r2, [sp, #8]
 800728e:	ebac 0205 	sub.w	r2, ip, r5
 8007292:	3a15      	subs	r2, #21
 8007294:	f022 0203 	bic.w	r2, r2, #3
 8007298:	3204      	adds	r2, #4
 800729a:	f105 0115 	add.w	r1, r5, #21
 800729e:	458c      	cmp	ip, r1
 80072a0:	bf38      	it	cc
 80072a2:	2204      	movcc	r2, #4
 80072a4:	9201      	str	r2, [sp, #4]
 80072a6:	9a02      	ldr	r2, [sp, #8]
 80072a8:	9303      	str	r3, [sp, #12]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d808      	bhi.n	80072c0 <__multiply+0x98>
 80072ae:	2f00      	cmp	r7, #0
 80072b0:	dc55      	bgt.n	800735e <__multiply+0x136>
 80072b2:	6107      	str	r7, [r0, #16]
 80072b4:	b005      	add	sp, #20
 80072b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ba:	f843 2b04 	str.w	r2, [r3], #4
 80072be:	e7db      	b.n	8007278 <__multiply+0x50>
 80072c0:	f8b3 a000 	ldrh.w	sl, [r3]
 80072c4:	f1ba 0f00 	cmp.w	sl, #0
 80072c8:	d020      	beq.n	800730c <__multiply+0xe4>
 80072ca:	f105 0e14 	add.w	lr, r5, #20
 80072ce:	46b1      	mov	r9, r6
 80072d0:	2200      	movs	r2, #0
 80072d2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80072d6:	f8d9 b000 	ldr.w	fp, [r9]
 80072da:	b2a1      	uxth	r1, r4
 80072dc:	fa1f fb8b 	uxth.w	fp, fp
 80072e0:	fb0a b101 	mla	r1, sl, r1, fp
 80072e4:	4411      	add	r1, r2
 80072e6:	f8d9 2000 	ldr.w	r2, [r9]
 80072ea:	0c24      	lsrs	r4, r4, #16
 80072ec:	0c12      	lsrs	r2, r2, #16
 80072ee:	fb0a 2404 	mla	r4, sl, r4, r2
 80072f2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80072f6:	b289      	uxth	r1, r1
 80072f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80072fc:	45f4      	cmp	ip, lr
 80072fe:	f849 1b04 	str.w	r1, [r9], #4
 8007302:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007306:	d8e4      	bhi.n	80072d2 <__multiply+0xaa>
 8007308:	9901      	ldr	r1, [sp, #4]
 800730a:	5072      	str	r2, [r6, r1]
 800730c:	9a03      	ldr	r2, [sp, #12]
 800730e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007312:	3304      	adds	r3, #4
 8007314:	f1b9 0f00 	cmp.w	r9, #0
 8007318:	d01f      	beq.n	800735a <__multiply+0x132>
 800731a:	6834      	ldr	r4, [r6, #0]
 800731c:	f105 0114 	add.w	r1, r5, #20
 8007320:	46b6      	mov	lr, r6
 8007322:	f04f 0a00 	mov.w	sl, #0
 8007326:	880a      	ldrh	r2, [r1, #0]
 8007328:	f8be b002 	ldrh.w	fp, [lr, #2]
 800732c:	fb09 b202 	mla	r2, r9, r2, fp
 8007330:	4492      	add	sl, r2
 8007332:	b2a4      	uxth	r4, r4
 8007334:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007338:	f84e 4b04 	str.w	r4, [lr], #4
 800733c:	f851 4b04 	ldr.w	r4, [r1], #4
 8007340:	f8be 2000 	ldrh.w	r2, [lr]
 8007344:	0c24      	lsrs	r4, r4, #16
 8007346:	fb09 2404 	mla	r4, r9, r4, r2
 800734a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800734e:	458c      	cmp	ip, r1
 8007350:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007354:	d8e7      	bhi.n	8007326 <__multiply+0xfe>
 8007356:	9a01      	ldr	r2, [sp, #4]
 8007358:	50b4      	str	r4, [r6, r2]
 800735a:	3604      	adds	r6, #4
 800735c:	e7a3      	b.n	80072a6 <__multiply+0x7e>
 800735e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007362:	2b00      	cmp	r3, #0
 8007364:	d1a5      	bne.n	80072b2 <__multiply+0x8a>
 8007366:	3f01      	subs	r7, #1
 8007368:	e7a1      	b.n	80072ae <__multiply+0x86>
 800736a:	bf00      	nop
 800736c:	08008d0b 	.word	0x08008d0b
 8007370:	08008d1c 	.word	0x08008d1c

08007374 <__pow5mult>:
 8007374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007378:	4615      	mov	r5, r2
 800737a:	f012 0203 	ands.w	r2, r2, #3
 800737e:	4606      	mov	r6, r0
 8007380:	460f      	mov	r7, r1
 8007382:	d007      	beq.n	8007394 <__pow5mult+0x20>
 8007384:	4c25      	ldr	r4, [pc, #148]	; (800741c <__pow5mult+0xa8>)
 8007386:	3a01      	subs	r2, #1
 8007388:	2300      	movs	r3, #0
 800738a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800738e:	f7ff fe9b 	bl	80070c8 <__multadd>
 8007392:	4607      	mov	r7, r0
 8007394:	10ad      	asrs	r5, r5, #2
 8007396:	d03d      	beq.n	8007414 <__pow5mult+0xa0>
 8007398:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800739a:	b97c      	cbnz	r4, 80073bc <__pow5mult+0x48>
 800739c:	2010      	movs	r0, #16
 800739e:	f7ff fe1b 	bl	8006fd8 <malloc>
 80073a2:	4602      	mov	r2, r0
 80073a4:	6270      	str	r0, [r6, #36]	; 0x24
 80073a6:	b928      	cbnz	r0, 80073b4 <__pow5mult+0x40>
 80073a8:	4b1d      	ldr	r3, [pc, #116]	; (8007420 <__pow5mult+0xac>)
 80073aa:	481e      	ldr	r0, [pc, #120]	; (8007424 <__pow5mult+0xb0>)
 80073ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80073b0:	f000 fbcc 	bl	8007b4c <__assert_func>
 80073b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80073b8:	6004      	str	r4, [r0, #0]
 80073ba:	60c4      	str	r4, [r0, #12]
 80073bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80073c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80073c4:	b94c      	cbnz	r4, 80073da <__pow5mult+0x66>
 80073c6:	f240 2171 	movw	r1, #625	; 0x271
 80073ca:	4630      	mov	r0, r6
 80073cc:	f7ff ff16 	bl	80071fc <__i2b>
 80073d0:	2300      	movs	r3, #0
 80073d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80073d6:	4604      	mov	r4, r0
 80073d8:	6003      	str	r3, [r0, #0]
 80073da:	f04f 0900 	mov.w	r9, #0
 80073de:	07eb      	lsls	r3, r5, #31
 80073e0:	d50a      	bpl.n	80073f8 <__pow5mult+0x84>
 80073e2:	4639      	mov	r1, r7
 80073e4:	4622      	mov	r2, r4
 80073e6:	4630      	mov	r0, r6
 80073e8:	f7ff ff1e 	bl	8007228 <__multiply>
 80073ec:	4639      	mov	r1, r7
 80073ee:	4680      	mov	r8, r0
 80073f0:	4630      	mov	r0, r6
 80073f2:	f7ff fe47 	bl	8007084 <_Bfree>
 80073f6:	4647      	mov	r7, r8
 80073f8:	106d      	asrs	r5, r5, #1
 80073fa:	d00b      	beq.n	8007414 <__pow5mult+0xa0>
 80073fc:	6820      	ldr	r0, [r4, #0]
 80073fe:	b938      	cbnz	r0, 8007410 <__pow5mult+0x9c>
 8007400:	4622      	mov	r2, r4
 8007402:	4621      	mov	r1, r4
 8007404:	4630      	mov	r0, r6
 8007406:	f7ff ff0f 	bl	8007228 <__multiply>
 800740a:	6020      	str	r0, [r4, #0]
 800740c:	f8c0 9000 	str.w	r9, [r0]
 8007410:	4604      	mov	r4, r0
 8007412:	e7e4      	b.n	80073de <__pow5mult+0x6a>
 8007414:	4638      	mov	r0, r7
 8007416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800741a:	bf00      	nop
 800741c:	08008e70 	.word	0x08008e70
 8007420:	08008c95 	.word	0x08008c95
 8007424:	08008d1c 	.word	0x08008d1c

08007428 <__lshift>:
 8007428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800742c:	460c      	mov	r4, r1
 800742e:	6849      	ldr	r1, [r1, #4]
 8007430:	6923      	ldr	r3, [r4, #16]
 8007432:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007436:	68a3      	ldr	r3, [r4, #8]
 8007438:	4607      	mov	r7, r0
 800743a:	4691      	mov	r9, r2
 800743c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007440:	f108 0601 	add.w	r6, r8, #1
 8007444:	42b3      	cmp	r3, r6
 8007446:	db0b      	blt.n	8007460 <__lshift+0x38>
 8007448:	4638      	mov	r0, r7
 800744a:	f7ff fddb 	bl	8007004 <_Balloc>
 800744e:	4605      	mov	r5, r0
 8007450:	b948      	cbnz	r0, 8007466 <__lshift+0x3e>
 8007452:	4602      	mov	r2, r0
 8007454:	4b28      	ldr	r3, [pc, #160]	; (80074f8 <__lshift+0xd0>)
 8007456:	4829      	ldr	r0, [pc, #164]	; (80074fc <__lshift+0xd4>)
 8007458:	f240 11d9 	movw	r1, #473	; 0x1d9
 800745c:	f000 fb76 	bl	8007b4c <__assert_func>
 8007460:	3101      	adds	r1, #1
 8007462:	005b      	lsls	r3, r3, #1
 8007464:	e7ee      	b.n	8007444 <__lshift+0x1c>
 8007466:	2300      	movs	r3, #0
 8007468:	f100 0114 	add.w	r1, r0, #20
 800746c:	f100 0210 	add.w	r2, r0, #16
 8007470:	4618      	mov	r0, r3
 8007472:	4553      	cmp	r3, sl
 8007474:	db33      	blt.n	80074de <__lshift+0xb6>
 8007476:	6920      	ldr	r0, [r4, #16]
 8007478:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800747c:	f104 0314 	add.w	r3, r4, #20
 8007480:	f019 091f 	ands.w	r9, r9, #31
 8007484:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007488:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800748c:	d02b      	beq.n	80074e6 <__lshift+0xbe>
 800748e:	f1c9 0e20 	rsb	lr, r9, #32
 8007492:	468a      	mov	sl, r1
 8007494:	2200      	movs	r2, #0
 8007496:	6818      	ldr	r0, [r3, #0]
 8007498:	fa00 f009 	lsl.w	r0, r0, r9
 800749c:	4302      	orrs	r2, r0
 800749e:	f84a 2b04 	str.w	r2, [sl], #4
 80074a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80074a6:	459c      	cmp	ip, r3
 80074a8:	fa22 f20e 	lsr.w	r2, r2, lr
 80074ac:	d8f3      	bhi.n	8007496 <__lshift+0x6e>
 80074ae:	ebac 0304 	sub.w	r3, ip, r4
 80074b2:	3b15      	subs	r3, #21
 80074b4:	f023 0303 	bic.w	r3, r3, #3
 80074b8:	3304      	adds	r3, #4
 80074ba:	f104 0015 	add.w	r0, r4, #21
 80074be:	4584      	cmp	ip, r0
 80074c0:	bf38      	it	cc
 80074c2:	2304      	movcc	r3, #4
 80074c4:	50ca      	str	r2, [r1, r3]
 80074c6:	b10a      	cbz	r2, 80074cc <__lshift+0xa4>
 80074c8:	f108 0602 	add.w	r6, r8, #2
 80074cc:	3e01      	subs	r6, #1
 80074ce:	4638      	mov	r0, r7
 80074d0:	612e      	str	r6, [r5, #16]
 80074d2:	4621      	mov	r1, r4
 80074d4:	f7ff fdd6 	bl	8007084 <_Bfree>
 80074d8:	4628      	mov	r0, r5
 80074da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074de:	f842 0f04 	str.w	r0, [r2, #4]!
 80074e2:	3301      	adds	r3, #1
 80074e4:	e7c5      	b.n	8007472 <__lshift+0x4a>
 80074e6:	3904      	subs	r1, #4
 80074e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80074ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80074f0:	459c      	cmp	ip, r3
 80074f2:	d8f9      	bhi.n	80074e8 <__lshift+0xc0>
 80074f4:	e7ea      	b.n	80074cc <__lshift+0xa4>
 80074f6:	bf00      	nop
 80074f8:	08008d0b 	.word	0x08008d0b
 80074fc:	08008d1c 	.word	0x08008d1c

08007500 <__mcmp>:
 8007500:	b530      	push	{r4, r5, lr}
 8007502:	6902      	ldr	r2, [r0, #16]
 8007504:	690c      	ldr	r4, [r1, #16]
 8007506:	1b12      	subs	r2, r2, r4
 8007508:	d10e      	bne.n	8007528 <__mcmp+0x28>
 800750a:	f100 0314 	add.w	r3, r0, #20
 800750e:	3114      	adds	r1, #20
 8007510:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007514:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007518:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800751c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007520:	42a5      	cmp	r5, r4
 8007522:	d003      	beq.n	800752c <__mcmp+0x2c>
 8007524:	d305      	bcc.n	8007532 <__mcmp+0x32>
 8007526:	2201      	movs	r2, #1
 8007528:	4610      	mov	r0, r2
 800752a:	bd30      	pop	{r4, r5, pc}
 800752c:	4283      	cmp	r3, r0
 800752e:	d3f3      	bcc.n	8007518 <__mcmp+0x18>
 8007530:	e7fa      	b.n	8007528 <__mcmp+0x28>
 8007532:	f04f 32ff 	mov.w	r2, #4294967295
 8007536:	e7f7      	b.n	8007528 <__mcmp+0x28>

08007538 <__mdiff>:
 8007538:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800753c:	460c      	mov	r4, r1
 800753e:	4606      	mov	r6, r0
 8007540:	4611      	mov	r1, r2
 8007542:	4620      	mov	r0, r4
 8007544:	4617      	mov	r7, r2
 8007546:	f7ff ffdb 	bl	8007500 <__mcmp>
 800754a:	1e05      	subs	r5, r0, #0
 800754c:	d110      	bne.n	8007570 <__mdiff+0x38>
 800754e:	4629      	mov	r1, r5
 8007550:	4630      	mov	r0, r6
 8007552:	f7ff fd57 	bl	8007004 <_Balloc>
 8007556:	b930      	cbnz	r0, 8007566 <__mdiff+0x2e>
 8007558:	4b39      	ldr	r3, [pc, #228]	; (8007640 <__mdiff+0x108>)
 800755a:	4602      	mov	r2, r0
 800755c:	f240 2132 	movw	r1, #562	; 0x232
 8007560:	4838      	ldr	r0, [pc, #224]	; (8007644 <__mdiff+0x10c>)
 8007562:	f000 faf3 	bl	8007b4c <__assert_func>
 8007566:	2301      	movs	r3, #1
 8007568:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800756c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007570:	bfa4      	itt	ge
 8007572:	463b      	movge	r3, r7
 8007574:	4627      	movge	r7, r4
 8007576:	4630      	mov	r0, r6
 8007578:	6879      	ldr	r1, [r7, #4]
 800757a:	bfa6      	itte	ge
 800757c:	461c      	movge	r4, r3
 800757e:	2500      	movge	r5, #0
 8007580:	2501      	movlt	r5, #1
 8007582:	f7ff fd3f 	bl	8007004 <_Balloc>
 8007586:	b920      	cbnz	r0, 8007592 <__mdiff+0x5a>
 8007588:	4b2d      	ldr	r3, [pc, #180]	; (8007640 <__mdiff+0x108>)
 800758a:	4602      	mov	r2, r0
 800758c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007590:	e7e6      	b.n	8007560 <__mdiff+0x28>
 8007592:	693e      	ldr	r6, [r7, #16]
 8007594:	60c5      	str	r5, [r0, #12]
 8007596:	6925      	ldr	r5, [r4, #16]
 8007598:	f107 0114 	add.w	r1, r7, #20
 800759c:	f104 0914 	add.w	r9, r4, #20
 80075a0:	f100 0e14 	add.w	lr, r0, #20
 80075a4:	f107 0210 	add.w	r2, r7, #16
 80075a8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80075ac:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80075b0:	46f2      	mov	sl, lr
 80075b2:	2700      	movs	r7, #0
 80075b4:	f859 3b04 	ldr.w	r3, [r9], #4
 80075b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80075bc:	fa1f f883 	uxth.w	r8, r3
 80075c0:	fa17 f78b 	uxtah	r7, r7, fp
 80075c4:	0c1b      	lsrs	r3, r3, #16
 80075c6:	eba7 0808 	sub.w	r8, r7, r8
 80075ca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80075ce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80075d2:	fa1f f888 	uxth.w	r8, r8
 80075d6:	141f      	asrs	r7, r3, #16
 80075d8:	454d      	cmp	r5, r9
 80075da:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80075de:	f84a 3b04 	str.w	r3, [sl], #4
 80075e2:	d8e7      	bhi.n	80075b4 <__mdiff+0x7c>
 80075e4:	1b2b      	subs	r3, r5, r4
 80075e6:	3b15      	subs	r3, #21
 80075e8:	f023 0303 	bic.w	r3, r3, #3
 80075ec:	3304      	adds	r3, #4
 80075ee:	3415      	adds	r4, #21
 80075f0:	42a5      	cmp	r5, r4
 80075f2:	bf38      	it	cc
 80075f4:	2304      	movcc	r3, #4
 80075f6:	4419      	add	r1, r3
 80075f8:	4473      	add	r3, lr
 80075fa:	469e      	mov	lr, r3
 80075fc:	460d      	mov	r5, r1
 80075fe:	4565      	cmp	r5, ip
 8007600:	d30e      	bcc.n	8007620 <__mdiff+0xe8>
 8007602:	f10c 0203 	add.w	r2, ip, #3
 8007606:	1a52      	subs	r2, r2, r1
 8007608:	f022 0203 	bic.w	r2, r2, #3
 800760c:	3903      	subs	r1, #3
 800760e:	458c      	cmp	ip, r1
 8007610:	bf38      	it	cc
 8007612:	2200      	movcc	r2, #0
 8007614:	441a      	add	r2, r3
 8007616:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800761a:	b17b      	cbz	r3, 800763c <__mdiff+0x104>
 800761c:	6106      	str	r6, [r0, #16]
 800761e:	e7a5      	b.n	800756c <__mdiff+0x34>
 8007620:	f855 8b04 	ldr.w	r8, [r5], #4
 8007624:	fa17 f488 	uxtah	r4, r7, r8
 8007628:	1422      	asrs	r2, r4, #16
 800762a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800762e:	b2a4      	uxth	r4, r4
 8007630:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007634:	f84e 4b04 	str.w	r4, [lr], #4
 8007638:	1417      	asrs	r7, r2, #16
 800763a:	e7e0      	b.n	80075fe <__mdiff+0xc6>
 800763c:	3e01      	subs	r6, #1
 800763e:	e7ea      	b.n	8007616 <__mdiff+0xde>
 8007640:	08008d0b 	.word	0x08008d0b
 8007644:	08008d1c 	.word	0x08008d1c

08007648 <__d2b>:
 8007648:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800764c:	4689      	mov	r9, r1
 800764e:	2101      	movs	r1, #1
 8007650:	ec57 6b10 	vmov	r6, r7, d0
 8007654:	4690      	mov	r8, r2
 8007656:	f7ff fcd5 	bl	8007004 <_Balloc>
 800765a:	4604      	mov	r4, r0
 800765c:	b930      	cbnz	r0, 800766c <__d2b+0x24>
 800765e:	4602      	mov	r2, r0
 8007660:	4b25      	ldr	r3, [pc, #148]	; (80076f8 <__d2b+0xb0>)
 8007662:	4826      	ldr	r0, [pc, #152]	; (80076fc <__d2b+0xb4>)
 8007664:	f240 310a 	movw	r1, #778	; 0x30a
 8007668:	f000 fa70 	bl	8007b4c <__assert_func>
 800766c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007670:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007674:	bb35      	cbnz	r5, 80076c4 <__d2b+0x7c>
 8007676:	2e00      	cmp	r6, #0
 8007678:	9301      	str	r3, [sp, #4]
 800767a:	d028      	beq.n	80076ce <__d2b+0x86>
 800767c:	4668      	mov	r0, sp
 800767e:	9600      	str	r6, [sp, #0]
 8007680:	f7ff fd8c 	bl	800719c <__lo0bits>
 8007684:	9900      	ldr	r1, [sp, #0]
 8007686:	b300      	cbz	r0, 80076ca <__d2b+0x82>
 8007688:	9a01      	ldr	r2, [sp, #4]
 800768a:	f1c0 0320 	rsb	r3, r0, #32
 800768e:	fa02 f303 	lsl.w	r3, r2, r3
 8007692:	430b      	orrs	r3, r1
 8007694:	40c2      	lsrs	r2, r0
 8007696:	6163      	str	r3, [r4, #20]
 8007698:	9201      	str	r2, [sp, #4]
 800769a:	9b01      	ldr	r3, [sp, #4]
 800769c:	61a3      	str	r3, [r4, #24]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	bf14      	ite	ne
 80076a2:	2202      	movne	r2, #2
 80076a4:	2201      	moveq	r2, #1
 80076a6:	6122      	str	r2, [r4, #16]
 80076a8:	b1d5      	cbz	r5, 80076e0 <__d2b+0x98>
 80076aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80076ae:	4405      	add	r5, r0
 80076b0:	f8c9 5000 	str.w	r5, [r9]
 80076b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80076b8:	f8c8 0000 	str.w	r0, [r8]
 80076bc:	4620      	mov	r0, r4
 80076be:	b003      	add	sp, #12
 80076c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80076c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076c8:	e7d5      	b.n	8007676 <__d2b+0x2e>
 80076ca:	6161      	str	r1, [r4, #20]
 80076cc:	e7e5      	b.n	800769a <__d2b+0x52>
 80076ce:	a801      	add	r0, sp, #4
 80076d0:	f7ff fd64 	bl	800719c <__lo0bits>
 80076d4:	9b01      	ldr	r3, [sp, #4]
 80076d6:	6163      	str	r3, [r4, #20]
 80076d8:	2201      	movs	r2, #1
 80076da:	6122      	str	r2, [r4, #16]
 80076dc:	3020      	adds	r0, #32
 80076de:	e7e3      	b.n	80076a8 <__d2b+0x60>
 80076e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80076e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80076e8:	f8c9 0000 	str.w	r0, [r9]
 80076ec:	6918      	ldr	r0, [r3, #16]
 80076ee:	f7ff fd35 	bl	800715c <__hi0bits>
 80076f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80076f6:	e7df      	b.n	80076b8 <__d2b+0x70>
 80076f8:	08008d0b 	.word	0x08008d0b
 80076fc:	08008d1c 	.word	0x08008d1c

08007700 <_calloc_r>:
 8007700:	b513      	push	{r0, r1, r4, lr}
 8007702:	434a      	muls	r2, r1
 8007704:	4611      	mov	r1, r2
 8007706:	9201      	str	r2, [sp, #4]
 8007708:	f000 f85a 	bl	80077c0 <_malloc_r>
 800770c:	4604      	mov	r4, r0
 800770e:	b118      	cbz	r0, 8007718 <_calloc_r+0x18>
 8007710:	9a01      	ldr	r2, [sp, #4]
 8007712:	2100      	movs	r1, #0
 8007714:	f7fe f950 	bl	80059b8 <memset>
 8007718:	4620      	mov	r0, r4
 800771a:	b002      	add	sp, #8
 800771c:	bd10      	pop	{r4, pc}
	...

08007720 <_free_r>:
 8007720:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007722:	2900      	cmp	r1, #0
 8007724:	d048      	beq.n	80077b8 <_free_r+0x98>
 8007726:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800772a:	9001      	str	r0, [sp, #4]
 800772c:	2b00      	cmp	r3, #0
 800772e:	f1a1 0404 	sub.w	r4, r1, #4
 8007732:	bfb8      	it	lt
 8007734:	18e4      	addlt	r4, r4, r3
 8007736:	f000 fa65 	bl	8007c04 <__malloc_lock>
 800773a:	4a20      	ldr	r2, [pc, #128]	; (80077bc <_free_r+0x9c>)
 800773c:	9801      	ldr	r0, [sp, #4]
 800773e:	6813      	ldr	r3, [r2, #0]
 8007740:	4615      	mov	r5, r2
 8007742:	b933      	cbnz	r3, 8007752 <_free_r+0x32>
 8007744:	6063      	str	r3, [r4, #4]
 8007746:	6014      	str	r4, [r2, #0]
 8007748:	b003      	add	sp, #12
 800774a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800774e:	f000 ba5f 	b.w	8007c10 <__malloc_unlock>
 8007752:	42a3      	cmp	r3, r4
 8007754:	d90b      	bls.n	800776e <_free_r+0x4e>
 8007756:	6821      	ldr	r1, [r4, #0]
 8007758:	1862      	adds	r2, r4, r1
 800775a:	4293      	cmp	r3, r2
 800775c:	bf04      	itt	eq
 800775e:	681a      	ldreq	r2, [r3, #0]
 8007760:	685b      	ldreq	r3, [r3, #4]
 8007762:	6063      	str	r3, [r4, #4]
 8007764:	bf04      	itt	eq
 8007766:	1852      	addeq	r2, r2, r1
 8007768:	6022      	streq	r2, [r4, #0]
 800776a:	602c      	str	r4, [r5, #0]
 800776c:	e7ec      	b.n	8007748 <_free_r+0x28>
 800776e:	461a      	mov	r2, r3
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	b10b      	cbz	r3, 8007778 <_free_r+0x58>
 8007774:	42a3      	cmp	r3, r4
 8007776:	d9fa      	bls.n	800776e <_free_r+0x4e>
 8007778:	6811      	ldr	r1, [r2, #0]
 800777a:	1855      	adds	r5, r2, r1
 800777c:	42a5      	cmp	r5, r4
 800777e:	d10b      	bne.n	8007798 <_free_r+0x78>
 8007780:	6824      	ldr	r4, [r4, #0]
 8007782:	4421      	add	r1, r4
 8007784:	1854      	adds	r4, r2, r1
 8007786:	42a3      	cmp	r3, r4
 8007788:	6011      	str	r1, [r2, #0]
 800778a:	d1dd      	bne.n	8007748 <_free_r+0x28>
 800778c:	681c      	ldr	r4, [r3, #0]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	6053      	str	r3, [r2, #4]
 8007792:	4421      	add	r1, r4
 8007794:	6011      	str	r1, [r2, #0]
 8007796:	e7d7      	b.n	8007748 <_free_r+0x28>
 8007798:	d902      	bls.n	80077a0 <_free_r+0x80>
 800779a:	230c      	movs	r3, #12
 800779c:	6003      	str	r3, [r0, #0]
 800779e:	e7d3      	b.n	8007748 <_free_r+0x28>
 80077a0:	6825      	ldr	r5, [r4, #0]
 80077a2:	1961      	adds	r1, r4, r5
 80077a4:	428b      	cmp	r3, r1
 80077a6:	bf04      	itt	eq
 80077a8:	6819      	ldreq	r1, [r3, #0]
 80077aa:	685b      	ldreq	r3, [r3, #4]
 80077ac:	6063      	str	r3, [r4, #4]
 80077ae:	bf04      	itt	eq
 80077b0:	1949      	addeq	r1, r1, r5
 80077b2:	6021      	streq	r1, [r4, #0]
 80077b4:	6054      	str	r4, [r2, #4]
 80077b6:	e7c7      	b.n	8007748 <_free_r+0x28>
 80077b8:	b003      	add	sp, #12
 80077ba:	bd30      	pop	{r4, r5, pc}
 80077bc:	20000238 	.word	0x20000238

080077c0 <_malloc_r>:
 80077c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077c2:	1ccd      	adds	r5, r1, #3
 80077c4:	f025 0503 	bic.w	r5, r5, #3
 80077c8:	3508      	adds	r5, #8
 80077ca:	2d0c      	cmp	r5, #12
 80077cc:	bf38      	it	cc
 80077ce:	250c      	movcc	r5, #12
 80077d0:	2d00      	cmp	r5, #0
 80077d2:	4606      	mov	r6, r0
 80077d4:	db01      	blt.n	80077da <_malloc_r+0x1a>
 80077d6:	42a9      	cmp	r1, r5
 80077d8:	d903      	bls.n	80077e2 <_malloc_r+0x22>
 80077da:	230c      	movs	r3, #12
 80077dc:	6033      	str	r3, [r6, #0]
 80077de:	2000      	movs	r0, #0
 80077e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077e2:	f000 fa0f 	bl	8007c04 <__malloc_lock>
 80077e6:	4921      	ldr	r1, [pc, #132]	; (800786c <_malloc_r+0xac>)
 80077e8:	680a      	ldr	r2, [r1, #0]
 80077ea:	4614      	mov	r4, r2
 80077ec:	b99c      	cbnz	r4, 8007816 <_malloc_r+0x56>
 80077ee:	4f20      	ldr	r7, [pc, #128]	; (8007870 <_malloc_r+0xb0>)
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	b923      	cbnz	r3, 80077fe <_malloc_r+0x3e>
 80077f4:	4621      	mov	r1, r4
 80077f6:	4630      	mov	r0, r6
 80077f8:	f000 f998 	bl	8007b2c <_sbrk_r>
 80077fc:	6038      	str	r0, [r7, #0]
 80077fe:	4629      	mov	r1, r5
 8007800:	4630      	mov	r0, r6
 8007802:	f000 f993 	bl	8007b2c <_sbrk_r>
 8007806:	1c43      	adds	r3, r0, #1
 8007808:	d123      	bne.n	8007852 <_malloc_r+0x92>
 800780a:	230c      	movs	r3, #12
 800780c:	6033      	str	r3, [r6, #0]
 800780e:	4630      	mov	r0, r6
 8007810:	f000 f9fe 	bl	8007c10 <__malloc_unlock>
 8007814:	e7e3      	b.n	80077de <_malloc_r+0x1e>
 8007816:	6823      	ldr	r3, [r4, #0]
 8007818:	1b5b      	subs	r3, r3, r5
 800781a:	d417      	bmi.n	800784c <_malloc_r+0x8c>
 800781c:	2b0b      	cmp	r3, #11
 800781e:	d903      	bls.n	8007828 <_malloc_r+0x68>
 8007820:	6023      	str	r3, [r4, #0]
 8007822:	441c      	add	r4, r3
 8007824:	6025      	str	r5, [r4, #0]
 8007826:	e004      	b.n	8007832 <_malloc_r+0x72>
 8007828:	6863      	ldr	r3, [r4, #4]
 800782a:	42a2      	cmp	r2, r4
 800782c:	bf0c      	ite	eq
 800782e:	600b      	streq	r3, [r1, #0]
 8007830:	6053      	strne	r3, [r2, #4]
 8007832:	4630      	mov	r0, r6
 8007834:	f000 f9ec 	bl	8007c10 <__malloc_unlock>
 8007838:	f104 000b 	add.w	r0, r4, #11
 800783c:	1d23      	adds	r3, r4, #4
 800783e:	f020 0007 	bic.w	r0, r0, #7
 8007842:	1ac2      	subs	r2, r0, r3
 8007844:	d0cc      	beq.n	80077e0 <_malloc_r+0x20>
 8007846:	1a1b      	subs	r3, r3, r0
 8007848:	50a3      	str	r3, [r4, r2]
 800784a:	e7c9      	b.n	80077e0 <_malloc_r+0x20>
 800784c:	4622      	mov	r2, r4
 800784e:	6864      	ldr	r4, [r4, #4]
 8007850:	e7cc      	b.n	80077ec <_malloc_r+0x2c>
 8007852:	1cc4      	adds	r4, r0, #3
 8007854:	f024 0403 	bic.w	r4, r4, #3
 8007858:	42a0      	cmp	r0, r4
 800785a:	d0e3      	beq.n	8007824 <_malloc_r+0x64>
 800785c:	1a21      	subs	r1, r4, r0
 800785e:	4630      	mov	r0, r6
 8007860:	f000 f964 	bl	8007b2c <_sbrk_r>
 8007864:	3001      	adds	r0, #1
 8007866:	d1dd      	bne.n	8007824 <_malloc_r+0x64>
 8007868:	e7cf      	b.n	800780a <_malloc_r+0x4a>
 800786a:	bf00      	nop
 800786c:	20000238 	.word	0x20000238
 8007870:	2000023c 	.word	0x2000023c

08007874 <__ssputs_r>:
 8007874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007878:	688e      	ldr	r6, [r1, #8]
 800787a:	429e      	cmp	r6, r3
 800787c:	4682      	mov	sl, r0
 800787e:	460c      	mov	r4, r1
 8007880:	4690      	mov	r8, r2
 8007882:	461f      	mov	r7, r3
 8007884:	d838      	bhi.n	80078f8 <__ssputs_r+0x84>
 8007886:	898a      	ldrh	r2, [r1, #12]
 8007888:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800788c:	d032      	beq.n	80078f4 <__ssputs_r+0x80>
 800788e:	6825      	ldr	r5, [r4, #0]
 8007890:	6909      	ldr	r1, [r1, #16]
 8007892:	eba5 0901 	sub.w	r9, r5, r1
 8007896:	6965      	ldr	r5, [r4, #20]
 8007898:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800789c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80078a0:	3301      	adds	r3, #1
 80078a2:	444b      	add	r3, r9
 80078a4:	106d      	asrs	r5, r5, #1
 80078a6:	429d      	cmp	r5, r3
 80078a8:	bf38      	it	cc
 80078aa:	461d      	movcc	r5, r3
 80078ac:	0553      	lsls	r3, r2, #21
 80078ae:	d531      	bpl.n	8007914 <__ssputs_r+0xa0>
 80078b0:	4629      	mov	r1, r5
 80078b2:	f7ff ff85 	bl	80077c0 <_malloc_r>
 80078b6:	4606      	mov	r6, r0
 80078b8:	b950      	cbnz	r0, 80078d0 <__ssputs_r+0x5c>
 80078ba:	230c      	movs	r3, #12
 80078bc:	f8ca 3000 	str.w	r3, [sl]
 80078c0:	89a3      	ldrh	r3, [r4, #12]
 80078c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078c6:	81a3      	strh	r3, [r4, #12]
 80078c8:	f04f 30ff 	mov.w	r0, #4294967295
 80078cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078d0:	6921      	ldr	r1, [r4, #16]
 80078d2:	464a      	mov	r2, r9
 80078d4:	f7ff fb88 	bl	8006fe8 <memcpy>
 80078d8:	89a3      	ldrh	r3, [r4, #12]
 80078da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80078de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078e2:	81a3      	strh	r3, [r4, #12]
 80078e4:	6126      	str	r6, [r4, #16]
 80078e6:	6165      	str	r5, [r4, #20]
 80078e8:	444e      	add	r6, r9
 80078ea:	eba5 0509 	sub.w	r5, r5, r9
 80078ee:	6026      	str	r6, [r4, #0]
 80078f0:	60a5      	str	r5, [r4, #8]
 80078f2:	463e      	mov	r6, r7
 80078f4:	42be      	cmp	r6, r7
 80078f6:	d900      	bls.n	80078fa <__ssputs_r+0x86>
 80078f8:	463e      	mov	r6, r7
 80078fa:	4632      	mov	r2, r6
 80078fc:	6820      	ldr	r0, [r4, #0]
 80078fe:	4641      	mov	r1, r8
 8007900:	f000 f966 	bl	8007bd0 <memmove>
 8007904:	68a3      	ldr	r3, [r4, #8]
 8007906:	6822      	ldr	r2, [r4, #0]
 8007908:	1b9b      	subs	r3, r3, r6
 800790a:	4432      	add	r2, r6
 800790c:	60a3      	str	r3, [r4, #8]
 800790e:	6022      	str	r2, [r4, #0]
 8007910:	2000      	movs	r0, #0
 8007912:	e7db      	b.n	80078cc <__ssputs_r+0x58>
 8007914:	462a      	mov	r2, r5
 8007916:	f000 f981 	bl	8007c1c <_realloc_r>
 800791a:	4606      	mov	r6, r0
 800791c:	2800      	cmp	r0, #0
 800791e:	d1e1      	bne.n	80078e4 <__ssputs_r+0x70>
 8007920:	6921      	ldr	r1, [r4, #16]
 8007922:	4650      	mov	r0, sl
 8007924:	f7ff fefc 	bl	8007720 <_free_r>
 8007928:	e7c7      	b.n	80078ba <__ssputs_r+0x46>
	...

0800792c <_svfiprintf_r>:
 800792c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007930:	4698      	mov	r8, r3
 8007932:	898b      	ldrh	r3, [r1, #12]
 8007934:	061b      	lsls	r3, r3, #24
 8007936:	b09d      	sub	sp, #116	; 0x74
 8007938:	4607      	mov	r7, r0
 800793a:	460d      	mov	r5, r1
 800793c:	4614      	mov	r4, r2
 800793e:	d50e      	bpl.n	800795e <_svfiprintf_r+0x32>
 8007940:	690b      	ldr	r3, [r1, #16]
 8007942:	b963      	cbnz	r3, 800795e <_svfiprintf_r+0x32>
 8007944:	2140      	movs	r1, #64	; 0x40
 8007946:	f7ff ff3b 	bl	80077c0 <_malloc_r>
 800794a:	6028      	str	r0, [r5, #0]
 800794c:	6128      	str	r0, [r5, #16]
 800794e:	b920      	cbnz	r0, 800795a <_svfiprintf_r+0x2e>
 8007950:	230c      	movs	r3, #12
 8007952:	603b      	str	r3, [r7, #0]
 8007954:	f04f 30ff 	mov.w	r0, #4294967295
 8007958:	e0d1      	b.n	8007afe <_svfiprintf_r+0x1d2>
 800795a:	2340      	movs	r3, #64	; 0x40
 800795c:	616b      	str	r3, [r5, #20]
 800795e:	2300      	movs	r3, #0
 8007960:	9309      	str	r3, [sp, #36]	; 0x24
 8007962:	2320      	movs	r3, #32
 8007964:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007968:	f8cd 800c 	str.w	r8, [sp, #12]
 800796c:	2330      	movs	r3, #48	; 0x30
 800796e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007b18 <_svfiprintf_r+0x1ec>
 8007972:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007976:	f04f 0901 	mov.w	r9, #1
 800797a:	4623      	mov	r3, r4
 800797c:	469a      	mov	sl, r3
 800797e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007982:	b10a      	cbz	r2, 8007988 <_svfiprintf_r+0x5c>
 8007984:	2a25      	cmp	r2, #37	; 0x25
 8007986:	d1f9      	bne.n	800797c <_svfiprintf_r+0x50>
 8007988:	ebba 0b04 	subs.w	fp, sl, r4
 800798c:	d00b      	beq.n	80079a6 <_svfiprintf_r+0x7a>
 800798e:	465b      	mov	r3, fp
 8007990:	4622      	mov	r2, r4
 8007992:	4629      	mov	r1, r5
 8007994:	4638      	mov	r0, r7
 8007996:	f7ff ff6d 	bl	8007874 <__ssputs_r>
 800799a:	3001      	adds	r0, #1
 800799c:	f000 80aa 	beq.w	8007af4 <_svfiprintf_r+0x1c8>
 80079a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079a2:	445a      	add	r2, fp
 80079a4:	9209      	str	r2, [sp, #36]	; 0x24
 80079a6:	f89a 3000 	ldrb.w	r3, [sl]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	f000 80a2 	beq.w	8007af4 <_svfiprintf_r+0x1c8>
 80079b0:	2300      	movs	r3, #0
 80079b2:	f04f 32ff 	mov.w	r2, #4294967295
 80079b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079ba:	f10a 0a01 	add.w	sl, sl, #1
 80079be:	9304      	str	r3, [sp, #16]
 80079c0:	9307      	str	r3, [sp, #28]
 80079c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079c6:	931a      	str	r3, [sp, #104]	; 0x68
 80079c8:	4654      	mov	r4, sl
 80079ca:	2205      	movs	r2, #5
 80079cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079d0:	4851      	ldr	r0, [pc, #324]	; (8007b18 <_svfiprintf_r+0x1ec>)
 80079d2:	f7f8 fc0d 	bl	80001f0 <memchr>
 80079d6:	9a04      	ldr	r2, [sp, #16]
 80079d8:	b9d8      	cbnz	r0, 8007a12 <_svfiprintf_r+0xe6>
 80079da:	06d0      	lsls	r0, r2, #27
 80079dc:	bf44      	itt	mi
 80079de:	2320      	movmi	r3, #32
 80079e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079e4:	0711      	lsls	r1, r2, #28
 80079e6:	bf44      	itt	mi
 80079e8:	232b      	movmi	r3, #43	; 0x2b
 80079ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079ee:	f89a 3000 	ldrb.w	r3, [sl]
 80079f2:	2b2a      	cmp	r3, #42	; 0x2a
 80079f4:	d015      	beq.n	8007a22 <_svfiprintf_r+0xf6>
 80079f6:	9a07      	ldr	r2, [sp, #28]
 80079f8:	4654      	mov	r4, sl
 80079fa:	2000      	movs	r0, #0
 80079fc:	f04f 0c0a 	mov.w	ip, #10
 8007a00:	4621      	mov	r1, r4
 8007a02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a06:	3b30      	subs	r3, #48	; 0x30
 8007a08:	2b09      	cmp	r3, #9
 8007a0a:	d94e      	bls.n	8007aaa <_svfiprintf_r+0x17e>
 8007a0c:	b1b0      	cbz	r0, 8007a3c <_svfiprintf_r+0x110>
 8007a0e:	9207      	str	r2, [sp, #28]
 8007a10:	e014      	b.n	8007a3c <_svfiprintf_r+0x110>
 8007a12:	eba0 0308 	sub.w	r3, r0, r8
 8007a16:	fa09 f303 	lsl.w	r3, r9, r3
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	9304      	str	r3, [sp, #16]
 8007a1e:	46a2      	mov	sl, r4
 8007a20:	e7d2      	b.n	80079c8 <_svfiprintf_r+0x9c>
 8007a22:	9b03      	ldr	r3, [sp, #12]
 8007a24:	1d19      	adds	r1, r3, #4
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	9103      	str	r1, [sp, #12]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	bfbb      	ittet	lt
 8007a2e:	425b      	neglt	r3, r3
 8007a30:	f042 0202 	orrlt.w	r2, r2, #2
 8007a34:	9307      	strge	r3, [sp, #28]
 8007a36:	9307      	strlt	r3, [sp, #28]
 8007a38:	bfb8      	it	lt
 8007a3a:	9204      	strlt	r2, [sp, #16]
 8007a3c:	7823      	ldrb	r3, [r4, #0]
 8007a3e:	2b2e      	cmp	r3, #46	; 0x2e
 8007a40:	d10c      	bne.n	8007a5c <_svfiprintf_r+0x130>
 8007a42:	7863      	ldrb	r3, [r4, #1]
 8007a44:	2b2a      	cmp	r3, #42	; 0x2a
 8007a46:	d135      	bne.n	8007ab4 <_svfiprintf_r+0x188>
 8007a48:	9b03      	ldr	r3, [sp, #12]
 8007a4a:	1d1a      	adds	r2, r3, #4
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	9203      	str	r2, [sp, #12]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	bfb8      	it	lt
 8007a54:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a58:	3402      	adds	r4, #2
 8007a5a:	9305      	str	r3, [sp, #20]
 8007a5c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007b28 <_svfiprintf_r+0x1fc>
 8007a60:	7821      	ldrb	r1, [r4, #0]
 8007a62:	2203      	movs	r2, #3
 8007a64:	4650      	mov	r0, sl
 8007a66:	f7f8 fbc3 	bl	80001f0 <memchr>
 8007a6a:	b140      	cbz	r0, 8007a7e <_svfiprintf_r+0x152>
 8007a6c:	2340      	movs	r3, #64	; 0x40
 8007a6e:	eba0 000a 	sub.w	r0, r0, sl
 8007a72:	fa03 f000 	lsl.w	r0, r3, r0
 8007a76:	9b04      	ldr	r3, [sp, #16]
 8007a78:	4303      	orrs	r3, r0
 8007a7a:	3401      	adds	r4, #1
 8007a7c:	9304      	str	r3, [sp, #16]
 8007a7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a82:	4826      	ldr	r0, [pc, #152]	; (8007b1c <_svfiprintf_r+0x1f0>)
 8007a84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a88:	2206      	movs	r2, #6
 8007a8a:	f7f8 fbb1 	bl	80001f0 <memchr>
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	d038      	beq.n	8007b04 <_svfiprintf_r+0x1d8>
 8007a92:	4b23      	ldr	r3, [pc, #140]	; (8007b20 <_svfiprintf_r+0x1f4>)
 8007a94:	bb1b      	cbnz	r3, 8007ade <_svfiprintf_r+0x1b2>
 8007a96:	9b03      	ldr	r3, [sp, #12]
 8007a98:	3307      	adds	r3, #7
 8007a9a:	f023 0307 	bic.w	r3, r3, #7
 8007a9e:	3308      	adds	r3, #8
 8007aa0:	9303      	str	r3, [sp, #12]
 8007aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aa4:	4433      	add	r3, r6
 8007aa6:	9309      	str	r3, [sp, #36]	; 0x24
 8007aa8:	e767      	b.n	800797a <_svfiprintf_r+0x4e>
 8007aaa:	fb0c 3202 	mla	r2, ip, r2, r3
 8007aae:	460c      	mov	r4, r1
 8007ab0:	2001      	movs	r0, #1
 8007ab2:	e7a5      	b.n	8007a00 <_svfiprintf_r+0xd4>
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	3401      	adds	r4, #1
 8007ab8:	9305      	str	r3, [sp, #20]
 8007aba:	4619      	mov	r1, r3
 8007abc:	f04f 0c0a 	mov.w	ip, #10
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ac6:	3a30      	subs	r2, #48	; 0x30
 8007ac8:	2a09      	cmp	r2, #9
 8007aca:	d903      	bls.n	8007ad4 <_svfiprintf_r+0x1a8>
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d0c5      	beq.n	8007a5c <_svfiprintf_r+0x130>
 8007ad0:	9105      	str	r1, [sp, #20]
 8007ad2:	e7c3      	b.n	8007a5c <_svfiprintf_r+0x130>
 8007ad4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ad8:	4604      	mov	r4, r0
 8007ada:	2301      	movs	r3, #1
 8007adc:	e7f0      	b.n	8007ac0 <_svfiprintf_r+0x194>
 8007ade:	ab03      	add	r3, sp, #12
 8007ae0:	9300      	str	r3, [sp, #0]
 8007ae2:	462a      	mov	r2, r5
 8007ae4:	4b0f      	ldr	r3, [pc, #60]	; (8007b24 <_svfiprintf_r+0x1f8>)
 8007ae6:	a904      	add	r1, sp, #16
 8007ae8:	4638      	mov	r0, r7
 8007aea:	f7fe f80d 	bl	8005b08 <_printf_float>
 8007aee:	1c42      	adds	r2, r0, #1
 8007af0:	4606      	mov	r6, r0
 8007af2:	d1d6      	bne.n	8007aa2 <_svfiprintf_r+0x176>
 8007af4:	89ab      	ldrh	r3, [r5, #12]
 8007af6:	065b      	lsls	r3, r3, #25
 8007af8:	f53f af2c 	bmi.w	8007954 <_svfiprintf_r+0x28>
 8007afc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007afe:	b01d      	add	sp, #116	; 0x74
 8007b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b04:	ab03      	add	r3, sp, #12
 8007b06:	9300      	str	r3, [sp, #0]
 8007b08:	462a      	mov	r2, r5
 8007b0a:	4b06      	ldr	r3, [pc, #24]	; (8007b24 <_svfiprintf_r+0x1f8>)
 8007b0c:	a904      	add	r1, sp, #16
 8007b0e:	4638      	mov	r0, r7
 8007b10:	f7fe fa9e 	bl	8006050 <_printf_i>
 8007b14:	e7eb      	b.n	8007aee <_svfiprintf_r+0x1c2>
 8007b16:	bf00      	nop
 8007b18:	08008e7c 	.word	0x08008e7c
 8007b1c:	08008e86 	.word	0x08008e86
 8007b20:	08005b09 	.word	0x08005b09
 8007b24:	08007875 	.word	0x08007875
 8007b28:	08008e82 	.word	0x08008e82

08007b2c <_sbrk_r>:
 8007b2c:	b538      	push	{r3, r4, r5, lr}
 8007b2e:	4d06      	ldr	r5, [pc, #24]	; (8007b48 <_sbrk_r+0x1c>)
 8007b30:	2300      	movs	r3, #0
 8007b32:	4604      	mov	r4, r0
 8007b34:	4608      	mov	r0, r1
 8007b36:	602b      	str	r3, [r5, #0]
 8007b38:	f7fa fb9a 	bl	8002270 <_sbrk>
 8007b3c:	1c43      	adds	r3, r0, #1
 8007b3e:	d102      	bne.n	8007b46 <_sbrk_r+0x1a>
 8007b40:	682b      	ldr	r3, [r5, #0]
 8007b42:	b103      	cbz	r3, 8007b46 <_sbrk_r+0x1a>
 8007b44:	6023      	str	r3, [r4, #0]
 8007b46:	bd38      	pop	{r3, r4, r5, pc}
 8007b48:	20000458 	.word	0x20000458

08007b4c <__assert_func>:
 8007b4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b4e:	4614      	mov	r4, r2
 8007b50:	461a      	mov	r2, r3
 8007b52:	4b09      	ldr	r3, [pc, #36]	; (8007b78 <__assert_func+0x2c>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4605      	mov	r5, r0
 8007b58:	68d8      	ldr	r0, [r3, #12]
 8007b5a:	b14c      	cbz	r4, 8007b70 <__assert_func+0x24>
 8007b5c:	4b07      	ldr	r3, [pc, #28]	; (8007b7c <__assert_func+0x30>)
 8007b5e:	9100      	str	r1, [sp, #0]
 8007b60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b64:	4906      	ldr	r1, [pc, #24]	; (8007b80 <__assert_func+0x34>)
 8007b66:	462b      	mov	r3, r5
 8007b68:	f000 f80e 	bl	8007b88 <fiprintf>
 8007b6c:	f000 faa4 	bl	80080b8 <abort>
 8007b70:	4b04      	ldr	r3, [pc, #16]	; (8007b84 <__assert_func+0x38>)
 8007b72:	461c      	mov	r4, r3
 8007b74:	e7f3      	b.n	8007b5e <__assert_func+0x12>
 8007b76:	bf00      	nop
 8007b78:	2000000c 	.word	0x2000000c
 8007b7c:	08008e8d 	.word	0x08008e8d
 8007b80:	08008e9a 	.word	0x08008e9a
 8007b84:	08008ec8 	.word	0x08008ec8

08007b88 <fiprintf>:
 8007b88:	b40e      	push	{r1, r2, r3}
 8007b8a:	b503      	push	{r0, r1, lr}
 8007b8c:	4601      	mov	r1, r0
 8007b8e:	ab03      	add	r3, sp, #12
 8007b90:	4805      	ldr	r0, [pc, #20]	; (8007ba8 <fiprintf+0x20>)
 8007b92:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b96:	6800      	ldr	r0, [r0, #0]
 8007b98:	9301      	str	r3, [sp, #4]
 8007b9a:	f000 f88f 	bl	8007cbc <_vfiprintf_r>
 8007b9e:	b002      	add	sp, #8
 8007ba0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ba4:	b003      	add	sp, #12
 8007ba6:	4770      	bx	lr
 8007ba8:	2000000c 	.word	0x2000000c

08007bac <__ascii_mbtowc>:
 8007bac:	b082      	sub	sp, #8
 8007bae:	b901      	cbnz	r1, 8007bb2 <__ascii_mbtowc+0x6>
 8007bb0:	a901      	add	r1, sp, #4
 8007bb2:	b142      	cbz	r2, 8007bc6 <__ascii_mbtowc+0x1a>
 8007bb4:	b14b      	cbz	r3, 8007bca <__ascii_mbtowc+0x1e>
 8007bb6:	7813      	ldrb	r3, [r2, #0]
 8007bb8:	600b      	str	r3, [r1, #0]
 8007bba:	7812      	ldrb	r2, [r2, #0]
 8007bbc:	1e10      	subs	r0, r2, #0
 8007bbe:	bf18      	it	ne
 8007bc0:	2001      	movne	r0, #1
 8007bc2:	b002      	add	sp, #8
 8007bc4:	4770      	bx	lr
 8007bc6:	4610      	mov	r0, r2
 8007bc8:	e7fb      	b.n	8007bc2 <__ascii_mbtowc+0x16>
 8007bca:	f06f 0001 	mvn.w	r0, #1
 8007bce:	e7f8      	b.n	8007bc2 <__ascii_mbtowc+0x16>

08007bd0 <memmove>:
 8007bd0:	4288      	cmp	r0, r1
 8007bd2:	b510      	push	{r4, lr}
 8007bd4:	eb01 0402 	add.w	r4, r1, r2
 8007bd8:	d902      	bls.n	8007be0 <memmove+0x10>
 8007bda:	4284      	cmp	r4, r0
 8007bdc:	4623      	mov	r3, r4
 8007bde:	d807      	bhi.n	8007bf0 <memmove+0x20>
 8007be0:	1e43      	subs	r3, r0, #1
 8007be2:	42a1      	cmp	r1, r4
 8007be4:	d008      	beq.n	8007bf8 <memmove+0x28>
 8007be6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007bee:	e7f8      	b.n	8007be2 <memmove+0x12>
 8007bf0:	4402      	add	r2, r0
 8007bf2:	4601      	mov	r1, r0
 8007bf4:	428a      	cmp	r2, r1
 8007bf6:	d100      	bne.n	8007bfa <memmove+0x2a>
 8007bf8:	bd10      	pop	{r4, pc}
 8007bfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007bfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c02:	e7f7      	b.n	8007bf4 <memmove+0x24>

08007c04 <__malloc_lock>:
 8007c04:	4801      	ldr	r0, [pc, #4]	; (8007c0c <__malloc_lock+0x8>)
 8007c06:	f000 bc17 	b.w	8008438 <__retarget_lock_acquire_recursive>
 8007c0a:	bf00      	nop
 8007c0c:	20000460 	.word	0x20000460

08007c10 <__malloc_unlock>:
 8007c10:	4801      	ldr	r0, [pc, #4]	; (8007c18 <__malloc_unlock+0x8>)
 8007c12:	f000 bc12 	b.w	800843a <__retarget_lock_release_recursive>
 8007c16:	bf00      	nop
 8007c18:	20000460 	.word	0x20000460

08007c1c <_realloc_r>:
 8007c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c1e:	4607      	mov	r7, r0
 8007c20:	4614      	mov	r4, r2
 8007c22:	460e      	mov	r6, r1
 8007c24:	b921      	cbnz	r1, 8007c30 <_realloc_r+0x14>
 8007c26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007c2a:	4611      	mov	r1, r2
 8007c2c:	f7ff bdc8 	b.w	80077c0 <_malloc_r>
 8007c30:	b922      	cbnz	r2, 8007c3c <_realloc_r+0x20>
 8007c32:	f7ff fd75 	bl	8007720 <_free_r>
 8007c36:	4625      	mov	r5, r4
 8007c38:	4628      	mov	r0, r5
 8007c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c3c:	f000 fc62 	bl	8008504 <_malloc_usable_size_r>
 8007c40:	42a0      	cmp	r0, r4
 8007c42:	d20f      	bcs.n	8007c64 <_realloc_r+0x48>
 8007c44:	4621      	mov	r1, r4
 8007c46:	4638      	mov	r0, r7
 8007c48:	f7ff fdba 	bl	80077c0 <_malloc_r>
 8007c4c:	4605      	mov	r5, r0
 8007c4e:	2800      	cmp	r0, #0
 8007c50:	d0f2      	beq.n	8007c38 <_realloc_r+0x1c>
 8007c52:	4631      	mov	r1, r6
 8007c54:	4622      	mov	r2, r4
 8007c56:	f7ff f9c7 	bl	8006fe8 <memcpy>
 8007c5a:	4631      	mov	r1, r6
 8007c5c:	4638      	mov	r0, r7
 8007c5e:	f7ff fd5f 	bl	8007720 <_free_r>
 8007c62:	e7e9      	b.n	8007c38 <_realloc_r+0x1c>
 8007c64:	4635      	mov	r5, r6
 8007c66:	e7e7      	b.n	8007c38 <_realloc_r+0x1c>

08007c68 <__sfputc_r>:
 8007c68:	6893      	ldr	r3, [r2, #8]
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	b410      	push	{r4}
 8007c70:	6093      	str	r3, [r2, #8]
 8007c72:	da08      	bge.n	8007c86 <__sfputc_r+0x1e>
 8007c74:	6994      	ldr	r4, [r2, #24]
 8007c76:	42a3      	cmp	r3, r4
 8007c78:	db01      	blt.n	8007c7e <__sfputc_r+0x16>
 8007c7a:	290a      	cmp	r1, #10
 8007c7c:	d103      	bne.n	8007c86 <__sfputc_r+0x1e>
 8007c7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c82:	f000 b94b 	b.w	8007f1c <__swbuf_r>
 8007c86:	6813      	ldr	r3, [r2, #0]
 8007c88:	1c58      	adds	r0, r3, #1
 8007c8a:	6010      	str	r0, [r2, #0]
 8007c8c:	7019      	strb	r1, [r3, #0]
 8007c8e:	4608      	mov	r0, r1
 8007c90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c94:	4770      	bx	lr

08007c96 <__sfputs_r>:
 8007c96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c98:	4606      	mov	r6, r0
 8007c9a:	460f      	mov	r7, r1
 8007c9c:	4614      	mov	r4, r2
 8007c9e:	18d5      	adds	r5, r2, r3
 8007ca0:	42ac      	cmp	r4, r5
 8007ca2:	d101      	bne.n	8007ca8 <__sfputs_r+0x12>
 8007ca4:	2000      	movs	r0, #0
 8007ca6:	e007      	b.n	8007cb8 <__sfputs_r+0x22>
 8007ca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cac:	463a      	mov	r2, r7
 8007cae:	4630      	mov	r0, r6
 8007cb0:	f7ff ffda 	bl	8007c68 <__sfputc_r>
 8007cb4:	1c43      	adds	r3, r0, #1
 8007cb6:	d1f3      	bne.n	8007ca0 <__sfputs_r+0xa>
 8007cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007cbc <_vfiprintf_r>:
 8007cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cc0:	460d      	mov	r5, r1
 8007cc2:	b09d      	sub	sp, #116	; 0x74
 8007cc4:	4614      	mov	r4, r2
 8007cc6:	4698      	mov	r8, r3
 8007cc8:	4606      	mov	r6, r0
 8007cca:	b118      	cbz	r0, 8007cd4 <_vfiprintf_r+0x18>
 8007ccc:	6983      	ldr	r3, [r0, #24]
 8007cce:	b90b      	cbnz	r3, 8007cd4 <_vfiprintf_r+0x18>
 8007cd0:	f000 fb14 	bl	80082fc <__sinit>
 8007cd4:	4b89      	ldr	r3, [pc, #548]	; (8007efc <_vfiprintf_r+0x240>)
 8007cd6:	429d      	cmp	r5, r3
 8007cd8:	d11b      	bne.n	8007d12 <_vfiprintf_r+0x56>
 8007cda:	6875      	ldr	r5, [r6, #4]
 8007cdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cde:	07d9      	lsls	r1, r3, #31
 8007ce0:	d405      	bmi.n	8007cee <_vfiprintf_r+0x32>
 8007ce2:	89ab      	ldrh	r3, [r5, #12]
 8007ce4:	059a      	lsls	r2, r3, #22
 8007ce6:	d402      	bmi.n	8007cee <_vfiprintf_r+0x32>
 8007ce8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cea:	f000 fba5 	bl	8008438 <__retarget_lock_acquire_recursive>
 8007cee:	89ab      	ldrh	r3, [r5, #12]
 8007cf0:	071b      	lsls	r3, r3, #28
 8007cf2:	d501      	bpl.n	8007cf8 <_vfiprintf_r+0x3c>
 8007cf4:	692b      	ldr	r3, [r5, #16]
 8007cf6:	b9eb      	cbnz	r3, 8007d34 <_vfiprintf_r+0x78>
 8007cf8:	4629      	mov	r1, r5
 8007cfa:	4630      	mov	r0, r6
 8007cfc:	f000 f96e 	bl	8007fdc <__swsetup_r>
 8007d00:	b1c0      	cbz	r0, 8007d34 <_vfiprintf_r+0x78>
 8007d02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d04:	07dc      	lsls	r4, r3, #31
 8007d06:	d50e      	bpl.n	8007d26 <_vfiprintf_r+0x6a>
 8007d08:	f04f 30ff 	mov.w	r0, #4294967295
 8007d0c:	b01d      	add	sp, #116	; 0x74
 8007d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d12:	4b7b      	ldr	r3, [pc, #492]	; (8007f00 <_vfiprintf_r+0x244>)
 8007d14:	429d      	cmp	r5, r3
 8007d16:	d101      	bne.n	8007d1c <_vfiprintf_r+0x60>
 8007d18:	68b5      	ldr	r5, [r6, #8]
 8007d1a:	e7df      	b.n	8007cdc <_vfiprintf_r+0x20>
 8007d1c:	4b79      	ldr	r3, [pc, #484]	; (8007f04 <_vfiprintf_r+0x248>)
 8007d1e:	429d      	cmp	r5, r3
 8007d20:	bf08      	it	eq
 8007d22:	68f5      	ldreq	r5, [r6, #12]
 8007d24:	e7da      	b.n	8007cdc <_vfiprintf_r+0x20>
 8007d26:	89ab      	ldrh	r3, [r5, #12]
 8007d28:	0598      	lsls	r0, r3, #22
 8007d2a:	d4ed      	bmi.n	8007d08 <_vfiprintf_r+0x4c>
 8007d2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d2e:	f000 fb84 	bl	800843a <__retarget_lock_release_recursive>
 8007d32:	e7e9      	b.n	8007d08 <_vfiprintf_r+0x4c>
 8007d34:	2300      	movs	r3, #0
 8007d36:	9309      	str	r3, [sp, #36]	; 0x24
 8007d38:	2320      	movs	r3, #32
 8007d3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d42:	2330      	movs	r3, #48	; 0x30
 8007d44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007f08 <_vfiprintf_r+0x24c>
 8007d48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d4c:	f04f 0901 	mov.w	r9, #1
 8007d50:	4623      	mov	r3, r4
 8007d52:	469a      	mov	sl, r3
 8007d54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d58:	b10a      	cbz	r2, 8007d5e <_vfiprintf_r+0xa2>
 8007d5a:	2a25      	cmp	r2, #37	; 0x25
 8007d5c:	d1f9      	bne.n	8007d52 <_vfiprintf_r+0x96>
 8007d5e:	ebba 0b04 	subs.w	fp, sl, r4
 8007d62:	d00b      	beq.n	8007d7c <_vfiprintf_r+0xc0>
 8007d64:	465b      	mov	r3, fp
 8007d66:	4622      	mov	r2, r4
 8007d68:	4629      	mov	r1, r5
 8007d6a:	4630      	mov	r0, r6
 8007d6c:	f7ff ff93 	bl	8007c96 <__sfputs_r>
 8007d70:	3001      	adds	r0, #1
 8007d72:	f000 80aa 	beq.w	8007eca <_vfiprintf_r+0x20e>
 8007d76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d78:	445a      	add	r2, fp
 8007d7a:	9209      	str	r2, [sp, #36]	; 0x24
 8007d7c:	f89a 3000 	ldrb.w	r3, [sl]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	f000 80a2 	beq.w	8007eca <_vfiprintf_r+0x20e>
 8007d86:	2300      	movs	r3, #0
 8007d88:	f04f 32ff 	mov.w	r2, #4294967295
 8007d8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d90:	f10a 0a01 	add.w	sl, sl, #1
 8007d94:	9304      	str	r3, [sp, #16]
 8007d96:	9307      	str	r3, [sp, #28]
 8007d98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d9c:	931a      	str	r3, [sp, #104]	; 0x68
 8007d9e:	4654      	mov	r4, sl
 8007da0:	2205      	movs	r2, #5
 8007da2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007da6:	4858      	ldr	r0, [pc, #352]	; (8007f08 <_vfiprintf_r+0x24c>)
 8007da8:	f7f8 fa22 	bl	80001f0 <memchr>
 8007dac:	9a04      	ldr	r2, [sp, #16]
 8007dae:	b9d8      	cbnz	r0, 8007de8 <_vfiprintf_r+0x12c>
 8007db0:	06d1      	lsls	r1, r2, #27
 8007db2:	bf44      	itt	mi
 8007db4:	2320      	movmi	r3, #32
 8007db6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dba:	0713      	lsls	r3, r2, #28
 8007dbc:	bf44      	itt	mi
 8007dbe:	232b      	movmi	r3, #43	; 0x2b
 8007dc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dc4:	f89a 3000 	ldrb.w	r3, [sl]
 8007dc8:	2b2a      	cmp	r3, #42	; 0x2a
 8007dca:	d015      	beq.n	8007df8 <_vfiprintf_r+0x13c>
 8007dcc:	9a07      	ldr	r2, [sp, #28]
 8007dce:	4654      	mov	r4, sl
 8007dd0:	2000      	movs	r0, #0
 8007dd2:	f04f 0c0a 	mov.w	ip, #10
 8007dd6:	4621      	mov	r1, r4
 8007dd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ddc:	3b30      	subs	r3, #48	; 0x30
 8007dde:	2b09      	cmp	r3, #9
 8007de0:	d94e      	bls.n	8007e80 <_vfiprintf_r+0x1c4>
 8007de2:	b1b0      	cbz	r0, 8007e12 <_vfiprintf_r+0x156>
 8007de4:	9207      	str	r2, [sp, #28]
 8007de6:	e014      	b.n	8007e12 <_vfiprintf_r+0x156>
 8007de8:	eba0 0308 	sub.w	r3, r0, r8
 8007dec:	fa09 f303 	lsl.w	r3, r9, r3
 8007df0:	4313      	orrs	r3, r2
 8007df2:	9304      	str	r3, [sp, #16]
 8007df4:	46a2      	mov	sl, r4
 8007df6:	e7d2      	b.n	8007d9e <_vfiprintf_r+0xe2>
 8007df8:	9b03      	ldr	r3, [sp, #12]
 8007dfa:	1d19      	adds	r1, r3, #4
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	9103      	str	r1, [sp, #12]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	bfbb      	ittet	lt
 8007e04:	425b      	neglt	r3, r3
 8007e06:	f042 0202 	orrlt.w	r2, r2, #2
 8007e0a:	9307      	strge	r3, [sp, #28]
 8007e0c:	9307      	strlt	r3, [sp, #28]
 8007e0e:	bfb8      	it	lt
 8007e10:	9204      	strlt	r2, [sp, #16]
 8007e12:	7823      	ldrb	r3, [r4, #0]
 8007e14:	2b2e      	cmp	r3, #46	; 0x2e
 8007e16:	d10c      	bne.n	8007e32 <_vfiprintf_r+0x176>
 8007e18:	7863      	ldrb	r3, [r4, #1]
 8007e1a:	2b2a      	cmp	r3, #42	; 0x2a
 8007e1c:	d135      	bne.n	8007e8a <_vfiprintf_r+0x1ce>
 8007e1e:	9b03      	ldr	r3, [sp, #12]
 8007e20:	1d1a      	adds	r2, r3, #4
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	9203      	str	r2, [sp, #12]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	bfb8      	it	lt
 8007e2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e2e:	3402      	adds	r4, #2
 8007e30:	9305      	str	r3, [sp, #20]
 8007e32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007f18 <_vfiprintf_r+0x25c>
 8007e36:	7821      	ldrb	r1, [r4, #0]
 8007e38:	2203      	movs	r2, #3
 8007e3a:	4650      	mov	r0, sl
 8007e3c:	f7f8 f9d8 	bl	80001f0 <memchr>
 8007e40:	b140      	cbz	r0, 8007e54 <_vfiprintf_r+0x198>
 8007e42:	2340      	movs	r3, #64	; 0x40
 8007e44:	eba0 000a 	sub.w	r0, r0, sl
 8007e48:	fa03 f000 	lsl.w	r0, r3, r0
 8007e4c:	9b04      	ldr	r3, [sp, #16]
 8007e4e:	4303      	orrs	r3, r0
 8007e50:	3401      	adds	r4, #1
 8007e52:	9304      	str	r3, [sp, #16]
 8007e54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e58:	482c      	ldr	r0, [pc, #176]	; (8007f0c <_vfiprintf_r+0x250>)
 8007e5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e5e:	2206      	movs	r2, #6
 8007e60:	f7f8 f9c6 	bl	80001f0 <memchr>
 8007e64:	2800      	cmp	r0, #0
 8007e66:	d03f      	beq.n	8007ee8 <_vfiprintf_r+0x22c>
 8007e68:	4b29      	ldr	r3, [pc, #164]	; (8007f10 <_vfiprintf_r+0x254>)
 8007e6a:	bb1b      	cbnz	r3, 8007eb4 <_vfiprintf_r+0x1f8>
 8007e6c:	9b03      	ldr	r3, [sp, #12]
 8007e6e:	3307      	adds	r3, #7
 8007e70:	f023 0307 	bic.w	r3, r3, #7
 8007e74:	3308      	adds	r3, #8
 8007e76:	9303      	str	r3, [sp, #12]
 8007e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e7a:	443b      	add	r3, r7
 8007e7c:	9309      	str	r3, [sp, #36]	; 0x24
 8007e7e:	e767      	b.n	8007d50 <_vfiprintf_r+0x94>
 8007e80:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e84:	460c      	mov	r4, r1
 8007e86:	2001      	movs	r0, #1
 8007e88:	e7a5      	b.n	8007dd6 <_vfiprintf_r+0x11a>
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	3401      	adds	r4, #1
 8007e8e:	9305      	str	r3, [sp, #20]
 8007e90:	4619      	mov	r1, r3
 8007e92:	f04f 0c0a 	mov.w	ip, #10
 8007e96:	4620      	mov	r0, r4
 8007e98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e9c:	3a30      	subs	r2, #48	; 0x30
 8007e9e:	2a09      	cmp	r2, #9
 8007ea0:	d903      	bls.n	8007eaa <_vfiprintf_r+0x1ee>
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d0c5      	beq.n	8007e32 <_vfiprintf_r+0x176>
 8007ea6:	9105      	str	r1, [sp, #20]
 8007ea8:	e7c3      	b.n	8007e32 <_vfiprintf_r+0x176>
 8007eaa:	fb0c 2101 	mla	r1, ip, r1, r2
 8007eae:	4604      	mov	r4, r0
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e7f0      	b.n	8007e96 <_vfiprintf_r+0x1da>
 8007eb4:	ab03      	add	r3, sp, #12
 8007eb6:	9300      	str	r3, [sp, #0]
 8007eb8:	462a      	mov	r2, r5
 8007eba:	4b16      	ldr	r3, [pc, #88]	; (8007f14 <_vfiprintf_r+0x258>)
 8007ebc:	a904      	add	r1, sp, #16
 8007ebe:	4630      	mov	r0, r6
 8007ec0:	f7fd fe22 	bl	8005b08 <_printf_float>
 8007ec4:	4607      	mov	r7, r0
 8007ec6:	1c78      	adds	r0, r7, #1
 8007ec8:	d1d6      	bne.n	8007e78 <_vfiprintf_r+0x1bc>
 8007eca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ecc:	07d9      	lsls	r1, r3, #31
 8007ece:	d405      	bmi.n	8007edc <_vfiprintf_r+0x220>
 8007ed0:	89ab      	ldrh	r3, [r5, #12]
 8007ed2:	059a      	lsls	r2, r3, #22
 8007ed4:	d402      	bmi.n	8007edc <_vfiprintf_r+0x220>
 8007ed6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ed8:	f000 faaf 	bl	800843a <__retarget_lock_release_recursive>
 8007edc:	89ab      	ldrh	r3, [r5, #12]
 8007ede:	065b      	lsls	r3, r3, #25
 8007ee0:	f53f af12 	bmi.w	8007d08 <_vfiprintf_r+0x4c>
 8007ee4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ee6:	e711      	b.n	8007d0c <_vfiprintf_r+0x50>
 8007ee8:	ab03      	add	r3, sp, #12
 8007eea:	9300      	str	r3, [sp, #0]
 8007eec:	462a      	mov	r2, r5
 8007eee:	4b09      	ldr	r3, [pc, #36]	; (8007f14 <_vfiprintf_r+0x258>)
 8007ef0:	a904      	add	r1, sp, #16
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	f7fe f8ac 	bl	8006050 <_printf_i>
 8007ef8:	e7e4      	b.n	8007ec4 <_vfiprintf_r+0x208>
 8007efa:	bf00      	nop
 8007efc:	08008ff4 	.word	0x08008ff4
 8007f00:	08009014 	.word	0x08009014
 8007f04:	08008fd4 	.word	0x08008fd4
 8007f08:	08008e7c 	.word	0x08008e7c
 8007f0c:	08008e86 	.word	0x08008e86
 8007f10:	08005b09 	.word	0x08005b09
 8007f14:	08007c97 	.word	0x08007c97
 8007f18:	08008e82 	.word	0x08008e82

08007f1c <__swbuf_r>:
 8007f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f1e:	460e      	mov	r6, r1
 8007f20:	4614      	mov	r4, r2
 8007f22:	4605      	mov	r5, r0
 8007f24:	b118      	cbz	r0, 8007f2e <__swbuf_r+0x12>
 8007f26:	6983      	ldr	r3, [r0, #24]
 8007f28:	b90b      	cbnz	r3, 8007f2e <__swbuf_r+0x12>
 8007f2a:	f000 f9e7 	bl	80082fc <__sinit>
 8007f2e:	4b21      	ldr	r3, [pc, #132]	; (8007fb4 <__swbuf_r+0x98>)
 8007f30:	429c      	cmp	r4, r3
 8007f32:	d12b      	bne.n	8007f8c <__swbuf_r+0x70>
 8007f34:	686c      	ldr	r4, [r5, #4]
 8007f36:	69a3      	ldr	r3, [r4, #24]
 8007f38:	60a3      	str	r3, [r4, #8]
 8007f3a:	89a3      	ldrh	r3, [r4, #12]
 8007f3c:	071a      	lsls	r2, r3, #28
 8007f3e:	d52f      	bpl.n	8007fa0 <__swbuf_r+0x84>
 8007f40:	6923      	ldr	r3, [r4, #16]
 8007f42:	b36b      	cbz	r3, 8007fa0 <__swbuf_r+0x84>
 8007f44:	6923      	ldr	r3, [r4, #16]
 8007f46:	6820      	ldr	r0, [r4, #0]
 8007f48:	1ac0      	subs	r0, r0, r3
 8007f4a:	6963      	ldr	r3, [r4, #20]
 8007f4c:	b2f6      	uxtb	r6, r6
 8007f4e:	4283      	cmp	r3, r0
 8007f50:	4637      	mov	r7, r6
 8007f52:	dc04      	bgt.n	8007f5e <__swbuf_r+0x42>
 8007f54:	4621      	mov	r1, r4
 8007f56:	4628      	mov	r0, r5
 8007f58:	f000 f93c 	bl	80081d4 <_fflush_r>
 8007f5c:	bb30      	cbnz	r0, 8007fac <__swbuf_r+0x90>
 8007f5e:	68a3      	ldr	r3, [r4, #8]
 8007f60:	3b01      	subs	r3, #1
 8007f62:	60a3      	str	r3, [r4, #8]
 8007f64:	6823      	ldr	r3, [r4, #0]
 8007f66:	1c5a      	adds	r2, r3, #1
 8007f68:	6022      	str	r2, [r4, #0]
 8007f6a:	701e      	strb	r6, [r3, #0]
 8007f6c:	6963      	ldr	r3, [r4, #20]
 8007f6e:	3001      	adds	r0, #1
 8007f70:	4283      	cmp	r3, r0
 8007f72:	d004      	beq.n	8007f7e <__swbuf_r+0x62>
 8007f74:	89a3      	ldrh	r3, [r4, #12]
 8007f76:	07db      	lsls	r3, r3, #31
 8007f78:	d506      	bpl.n	8007f88 <__swbuf_r+0x6c>
 8007f7a:	2e0a      	cmp	r6, #10
 8007f7c:	d104      	bne.n	8007f88 <__swbuf_r+0x6c>
 8007f7e:	4621      	mov	r1, r4
 8007f80:	4628      	mov	r0, r5
 8007f82:	f000 f927 	bl	80081d4 <_fflush_r>
 8007f86:	b988      	cbnz	r0, 8007fac <__swbuf_r+0x90>
 8007f88:	4638      	mov	r0, r7
 8007f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f8c:	4b0a      	ldr	r3, [pc, #40]	; (8007fb8 <__swbuf_r+0x9c>)
 8007f8e:	429c      	cmp	r4, r3
 8007f90:	d101      	bne.n	8007f96 <__swbuf_r+0x7a>
 8007f92:	68ac      	ldr	r4, [r5, #8]
 8007f94:	e7cf      	b.n	8007f36 <__swbuf_r+0x1a>
 8007f96:	4b09      	ldr	r3, [pc, #36]	; (8007fbc <__swbuf_r+0xa0>)
 8007f98:	429c      	cmp	r4, r3
 8007f9a:	bf08      	it	eq
 8007f9c:	68ec      	ldreq	r4, [r5, #12]
 8007f9e:	e7ca      	b.n	8007f36 <__swbuf_r+0x1a>
 8007fa0:	4621      	mov	r1, r4
 8007fa2:	4628      	mov	r0, r5
 8007fa4:	f000 f81a 	bl	8007fdc <__swsetup_r>
 8007fa8:	2800      	cmp	r0, #0
 8007faa:	d0cb      	beq.n	8007f44 <__swbuf_r+0x28>
 8007fac:	f04f 37ff 	mov.w	r7, #4294967295
 8007fb0:	e7ea      	b.n	8007f88 <__swbuf_r+0x6c>
 8007fb2:	bf00      	nop
 8007fb4:	08008ff4 	.word	0x08008ff4
 8007fb8:	08009014 	.word	0x08009014
 8007fbc:	08008fd4 	.word	0x08008fd4

08007fc0 <__ascii_wctomb>:
 8007fc0:	b149      	cbz	r1, 8007fd6 <__ascii_wctomb+0x16>
 8007fc2:	2aff      	cmp	r2, #255	; 0xff
 8007fc4:	bf85      	ittet	hi
 8007fc6:	238a      	movhi	r3, #138	; 0x8a
 8007fc8:	6003      	strhi	r3, [r0, #0]
 8007fca:	700a      	strbls	r2, [r1, #0]
 8007fcc:	f04f 30ff 	movhi.w	r0, #4294967295
 8007fd0:	bf98      	it	ls
 8007fd2:	2001      	movls	r0, #1
 8007fd4:	4770      	bx	lr
 8007fd6:	4608      	mov	r0, r1
 8007fd8:	4770      	bx	lr
	...

08007fdc <__swsetup_r>:
 8007fdc:	4b32      	ldr	r3, [pc, #200]	; (80080a8 <__swsetup_r+0xcc>)
 8007fde:	b570      	push	{r4, r5, r6, lr}
 8007fe0:	681d      	ldr	r5, [r3, #0]
 8007fe2:	4606      	mov	r6, r0
 8007fe4:	460c      	mov	r4, r1
 8007fe6:	b125      	cbz	r5, 8007ff2 <__swsetup_r+0x16>
 8007fe8:	69ab      	ldr	r3, [r5, #24]
 8007fea:	b913      	cbnz	r3, 8007ff2 <__swsetup_r+0x16>
 8007fec:	4628      	mov	r0, r5
 8007fee:	f000 f985 	bl	80082fc <__sinit>
 8007ff2:	4b2e      	ldr	r3, [pc, #184]	; (80080ac <__swsetup_r+0xd0>)
 8007ff4:	429c      	cmp	r4, r3
 8007ff6:	d10f      	bne.n	8008018 <__swsetup_r+0x3c>
 8007ff8:	686c      	ldr	r4, [r5, #4]
 8007ffa:	89a3      	ldrh	r3, [r4, #12]
 8007ffc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008000:	0719      	lsls	r1, r3, #28
 8008002:	d42c      	bmi.n	800805e <__swsetup_r+0x82>
 8008004:	06dd      	lsls	r5, r3, #27
 8008006:	d411      	bmi.n	800802c <__swsetup_r+0x50>
 8008008:	2309      	movs	r3, #9
 800800a:	6033      	str	r3, [r6, #0]
 800800c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008010:	81a3      	strh	r3, [r4, #12]
 8008012:	f04f 30ff 	mov.w	r0, #4294967295
 8008016:	e03e      	b.n	8008096 <__swsetup_r+0xba>
 8008018:	4b25      	ldr	r3, [pc, #148]	; (80080b0 <__swsetup_r+0xd4>)
 800801a:	429c      	cmp	r4, r3
 800801c:	d101      	bne.n	8008022 <__swsetup_r+0x46>
 800801e:	68ac      	ldr	r4, [r5, #8]
 8008020:	e7eb      	b.n	8007ffa <__swsetup_r+0x1e>
 8008022:	4b24      	ldr	r3, [pc, #144]	; (80080b4 <__swsetup_r+0xd8>)
 8008024:	429c      	cmp	r4, r3
 8008026:	bf08      	it	eq
 8008028:	68ec      	ldreq	r4, [r5, #12]
 800802a:	e7e6      	b.n	8007ffa <__swsetup_r+0x1e>
 800802c:	0758      	lsls	r0, r3, #29
 800802e:	d512      	bpl.n	8008056 <__swsetup_r+0x7a>
 8008030:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008032:	b141      	cbz	r1, 8008046 <__swsetup_r+0x6a>
 8008034:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008038:	4299      	cmp	r1, r3
 800803a:	d002      	beq.n	8008042 <__swsetup_r+0x66>
 800803c:	4630      	mov	r0, r6
 800803e:	f7ff fb6f 	bl	8007720 <_free_r>
 8008042:	2300      	movs	r3, #0
 8008044:	6363      	str	r3, [r4, #52]	; 0x34
 8008046:	89a3      	ldrh	r3, [r4, #12]
 8008048:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800804c:	81a3      	strh	r3, [r4, #12]
 800804e:	2300      	movs	r3, #0
 8008050:	6063      	str	r3, [r4, #4]
 8008052:	6923      	ldr	r3, [r4, #16]
 8008054:	6023      	str	r3, [r4, #0]
 8008056:	89a3      	ldrh	r3, [r4, #12]
 8008058:	f043 0308 	orr.w	r3, r3, #8
 800805c:	81a3      	strh	r3, [r4, #12]
 800805e:	6923      	ldr	r3, [r4, #16]
 8008060:	b94b      	cbnz	r3, 8008076 <__swsetup_r+0x9a>
 8008062:	89a3      	ldrh	r3, [r4, #12]
 8008064:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800806c:	d003      	beq.n	8008076 <__swsetup_r+0x9a>
 800806e:	4621      	mov	r1, r4
 8008070:	4630      	mov	r0, r6
 8008072:	f000 fa07 	bl	8008484 <__smakebuf_r>
 8008076:	89a0      	ldrh	r0, [r4, #12]
 8008078:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800807c:	f010 0301 	ands.w	r3, r0, #1
 8008080:	d00a      	beq.n	8008098 <__swsetup_r+0xbc>
 8008082:	2300      	movs	r3, #0
 8008084:	60a3      	str	r3, [r4, #8]
 8008086:	6963      	ldr	r3, [r4, #20]
 8008088:	425b      	negs	r3, r3
 800808a:	61a3      	str	r3, [r4, #24]
 800808c:	6923      	ldr	r3, [r4, #16]
 800808e:	b943      	cbnz	r3, 80080a2 <__swsetup_r+0xc6>
 8008090:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008094:	d1ba      	bne.n	800800c <__swsetup_r+0x30>
 8008096:	bd70      	pop	{r4, r5, r6, pc}
 8008098:	0781      	lsls	r1, r0, #30
 800809a:	bf58      	it	pl
 800809c:	6963      	ldrpl	r3, [r4, #20]
 800809e:	60a3      	str	r3, [r4, #8]
 80080a0:	e7f4      	b.n	800808c <__swsetup_r+0xb0>
 80080a2:	2000      	movs	r0, #0
 80080a4:	e7f7      	b.n	8008096 <__swsetup_r+0xba>
 80080a6:	bf00      	nop
 80080a8:	2000000c 	.word	0x2000000c
 80080ac:	08008ff4 	.word	0x08008ff4
 80080b0:	08009014 	.word	0x08009014
 80080b4:	08008fd4 	.word	0x08008fd4

080080b8 <abort>:
 80080b8:	b508      	push	{r3, lr}
 80080ba:	2006      	movs	r0, #6
 80080bc:	f000 fa52 	bl	8008564 <raise>
 80080c0:	2001      	movs	r0, #1
 80080c2:	f7fa f85d 	bl	8002180 <_exit>
	...

080080c8 <__sflush_r>:
 80080c8:	898a      	ldrh	r2, [r1, #12]
 80080ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080ce:	4605      	mov	r5, r0
 80080d0:	0710      	lsls	r0, r2, #28
 80080d2:	460c      	mov	r4, r1
 80080d4:	d458      	bmi.n	8008188 <__sflush_r+0xc0>
 80080d6:	684b      	ldr	r3, [r1, #4]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	dc05      	bgt.n	80080e8 <__sflush_r+0x20>
 80080dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80080de:	2b00      	cmp	r3, #0
 80080e0:	dc02      	bgt.n	80080e8 <__sflush_r+0x20>
 80080e2:	2000      	movs	r0, #0
 80080e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080ea:	2e00      	cmp	r6, #0
 80080ec:	d0f9      	beq.n	80080e2 <__sflush_r+0x1a>
 80080ee:	2300      	movs	r3, #0
 80080f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80080f4:	682f      	ldr	r7, [r5, #0]
 80080f6:	602b      	str	r3, [r5, #0]
 80080f8:	d032      	beq.n	8008160 <__sflush_r+0x98>
 80080fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80080fc:	89a3      	ldrh	r3, [r4, #12]
 80080fe:	075a      	lsls	r2, r3, #29
 8008100:	d505      	bpl.n	800810e <__sflush_r+0x46>
 8008102:	6863      	ldr	r3, [r4, #4]
 8008104:	1ac0      	subs	r0, r0, r3
 8008106:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008108:	b10b      	cbz	r3, 800810e <__sflush_r+0x46>
 800810a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800810c:	1ac0      	subs	r0, r0, r3
 800810e:	2300      	movs	r3, #0
 8008110:	4602      	mov	r2, r0
 8008112:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008114:	6a21      	ldr	r1, [r4, #32]
 8008116:	4628      	mov	r0, r5
 8008118:	47b0      	blx	r6
 800811a:	1c43      	adds	r3, r0, #1
 800811c:	89a3      	ldrh	r3, [r4, #12]
 800811e:	d106      	bne.n	800812e <__sflush_r+0x66>
 8008120:	6829      	ldr	r1, [r5, #0]
 8008122:	291d      	cmp	r1, #29
 8008124:	d82c      	bhi.n	8008180 <__sflush_r+0xb8>
 8008126:	4a2a      	ldr	r2, [pc, #168]	; (80081d0 <__sflush_r+0x108>)
 8008128:	40ca      	lsrs	r2, r1
 800812a:	07d6      	lsls	r6, r2, #31
 800812c:	d528      	bpl.n	8008180 <__sflush_r+0xb8>
 800812e:	2200      	movs	r2, #0
 8008130:	6062      	str	r2, [r4, #4]
 8008132:	04d9      	lsls	r1, r3, #19
 8008134:	6922      	ldr	r2, [r4, #16]
 8008136:	6022      	str	r2, [r4, #0]
 8008138:	d504      	bpl.n	8008144 <__sflush_r+0x7c>
 800813a:	1c42      	adds	r2, r0, #1
 800813c:	d101      	bne.n	8008142 <__sflush_r+0x7a>
 800813e:	682b      	ldr	r3, [r5, #0]
 8008140:	b903      	cbnz	r3, 8008144 <__sflush_r+0x7c>
 8008142:	6560      	str	r0, [r4, #84]	; 0x54
 8008144:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008146:	602f      	str	r7, [r5, #0]
 8008148:	2900      	cmp	r1, #0
 800814a:	d0ca      	beq.n	80080e2 <__sflush_r+0x1a>
 800814c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008150:	4299      	cmp	r1, r3
 8008152:	d002      	beq.n	800815a <__sflush_r+0x92>
 8008154:	4628      	mov	r0, r5
 8008156:	f7ff fae3 	bl	8007720 <_free_r>
 800815a:	2000      	movs	r0, #0
 800815c:	6360      	str	r0, [r4, #52]	; 0x34
 800815e:	e7c1      	b.n	80080e4 <__sflush_r+0x1c>
 8008160:	6a21      	ldr	r1, [r4, #32]
 8008162:	2301      	movs	r3, #1
 8008164:	4628      	mov	r0, r5
 8008166:	47b0      	blx	r6
 8008168:	1c41      	adds	r1, r0, #1
 800816a:	d1c7      	bne.n	80080fc <__sflush_r+0x34>
 800816c:	682b      	ldr	r3, [r5, #0]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d0c4      	beq.n	80080fc <__sflush_r+0x34>
 8008172:	2b1d      	cmp	r3, #29
 8008174:	d001      	beq.n	800817a <__sflush_r+0xb2>
 8008176:	2b16      	cmp	r3, #22
 8008178:	d101      	bne.n	800817e <__sflush_r+0xb6>
 800817a:	602f      	str	r7, [r5, #0]
 800817c:	e7b1      	b.n	80080e2 <__sflush_r+0x1a>
 800817e:	89a3      	ldrh	r3, [r4, #12]
 8008180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008184:	81a3      	strh	r3, [r4, #12]
 8008186:	e7ad      	b.n	80080e4 <__sflush_r+0x1c>
 8008188:	690f      	ldr	r7, [r1, #16]
 800818a:	2f00      	cmp	r7, #0
 800818c:	d0a9      	beq.n	80080e2 <__sflush_r+0x1a>
 800818e:	0793      	lsls	r3, r2, #30
 8008190:	680e      	ldr	r6, [r1, #0]
 8008192:	bf08      	it	eq
 8008194:	694b      	ldreq	r3, [r1, #20]
 8008196:	600f      	str	r7, [r1, #0]
 8008198:	bf18      	it	ne
 800819a:	2300      	movne	r3, #0
 800819c:	eba6 0807 	sub.w	r8, r6, r7
 80081a0:	608b      	str	r3, [r1, #8]
 80081a2:	f1b8 0f00 	cmp.w	r8, #0
 80081a6:	dd9c      	ble.n	80080e2 <__sflush_r+0x1a>
 80081a8:	6a21      	ldr	r1, [r4, #32]
 80081aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80081ac:	4643      	mov	r3, r8
 80081ae:	463a      	mov	r2, r7
 80081b0:	4628      	mov	r0, r5
 80081b2:	47b0      	blx	r6
 80081b4:	2800      	cmp	r0, #0
 80081b6:	dc06      	bgt.n	80081c6 <__sflush_r+0xfe>
 80081b8:	89a3      	ldrh	r3, [r4, #12]
 80081ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081be:	81a3      	strh	r3, [r4, #12]
 80081c0:	f04f 30ff 	mov.w	r0, #4294967295
 80081c4:	e78e      	b.n	80080e4 <__sflush_r+0x1c>
 80081c6:	4407      	add	r7, r0
 80081c8:	eba8 0800 	sub.w	r8, r8, r0
 80081cc:	e7e9      	b.n	80081a2 <__sflush_r+0xda>
 80081ce:	bf00      	nop
 80081d0:	20400001 	.word	0x20400001

080081d4 <_fflush_r>:
 80081d4:	b538      	push	{r3, r4, r5, lr}
 80081d6:	690b      	ldr	r3, [r1, #16]
 80081d8:	4605      	mov	r5, r0
 80081da:	460c      	mov	r4, r1
 80081dc:	b913      	cbnz	r3, 80081e4 <_fflush_r+0x10>
 80081de:	2500      	movs	r5, #0
 80081e0:	4628      	mov	r0, r5
 80081e2:	bd38      	pop	{r3, r4, r5, pc}
 80081e4:	b118      	cbz	r0, 80081ee <_fflush_r+0x1a>
 80081e6:	6983      	ldr	r3, [r0, #24]
 80081e8:	b90b      	cbnz	r3, 80081ee <_fflush_r+0x1a>
 80081ea:	f000 f887 	bl	80082fc <__sinit>
 80081ee:	4b14      	ldr	r3, [pc, #80]	; (8008240 <_fflush_r+0x6c>)
 80081f0:	429c      	cmp	r4, r3
 80081f2:	d11b      	bne.n	800822c <_fflush_r+0x58>
 80081f4:	686c      	ldr	r4, [r5, #4]
 80081f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d0ef      	beq.n	80081de <_fflush_r+0xa>
 80081fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008200:	07d0      	lsls	r0, r2, #31
 8008202:	d404      	bmi.n	800820e <_fflush_r+0x3a>
 8008204:	0599      	lsls	r1, r3, #22
 8008206:	d402      	bmi.n	800820e <_fflush_r+0x3a>
 8008208:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800820a:	f000 f915 	bl	8008438 <__retarget_lock_acquire_recursive>
 800820e:	4628      	mov	r0, r5
 8008210:	4621      	mov	r1, r4
 8008212:	f7ff ff59 	bl	80080c8 <__sflush_r>
 8008216:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008218:	07da      	lsls	r2, r3, #31
 800821a:	4605      	mov	r5, r0
 800821c:	d4e0      	bmi.n	80081e0 <_fflush_r+0xc>
 800821e:	89a3      	ldrh	r3, [r4, #12]
 8008220:	059b      	lsls	r3, r3, #22
 8008222:	d4dd      	bmi.n	80081e0 <_fflush_r+0xc>
 8008224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008226:	f000 f908 	bl	800843a <__retarget_lock_release_recursive>
 800822a:	e7d9      	b.n	80081e0 <_fflush_r+0xc>
 800822c:	4b05      	ldr	r3, [pc, #20]	; (8008244 <_fflush_r+0x70>)
 800822e:	429c      	cmp	r4, r3
 8008230:	d101      	bne.n	8008236 <_fflush_r+0x62>
 8008232:	68ac      	ldr	r4, [r5, #8]
 8008234:	e7df      	b.n	80081f6 <_fflush_r+0x22>
 8008236:	4b04      	ldr	r3, [pc, #16]	; (8008248 <_fflush_r+0x74>)
 8008238:	429c      	cmp	r4, r3
 800823a:	bf08      	it	eq
 800823c:	68ec      	ldreq	r4, [r5, #12]
 800823e:	e7da      	b.n	80081f6 <_fflush_r+0x22>
 8008240:	08008ff4 	.word	0x08008ff4
 8008244:	08009014 	.word	0x08009014
 8008248:	08008fd4 	.word	0x08008fd4

0800824c <std>:
 800824c:	2300      	movs	r3, #0
 800824e:	b510      	push	{r4, lr}
 8008250:	4604      	mov	r4, r0
 8008252:	e9c0 3300 	strd	r3, r3, [r0]
 8008256:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800825a:	6083      	str	r3, [r0, #8]
 800825c:	8181      	strh	r1, [r0, #12]
 800825e:	6643      	str	r3, [r0, #100]	; 0x64
 8008260:	81c2      	strh	r2, [r0, #14]
 8008262:	6183      	str	r3, [r0, #24]
 8008264:	4619      	mov	r1, r3
 8008266:	2208      	movs	r2, #8
 8008268:	305c      	adds	r0, #92	; 0x5c
 800826a:	f7fd fba5 	bl	80059b8 <memset>
 800826e:	4b05      	ldr	r3, [pc, #20]	; (8008284 <std+0x38>)
 8008270:	6263      	str	r3, [r4, #36]	; 0x24
 8008272:	4b05      	ldr	r3, [pc, #20]	; (8008288 <std+0x3c>)
 8008274:	62a3      	str	r3, [r4, #40]	; 0x28
 8008276:	4b05      	ldr	r3, [pc, #20]	; (800828c <std+0x40>)
 8008278:	62e3      	str	r3, [r4, #44]	; 0x2c
 800827a:	4b05      	ldr	r3, [pc, #20]	; (8008290 <std+0x44>)
 800827c:	6224      	str	r4, [r4, #32]
 800827e:	6323      	str	r3, [r4, #48]	; 0x30
 8008280:	bd10      	pop	{r4, pc}
 8008282:	bf00      	nop
 8008284:	0800859d 	.word	0x0800859d
 8008288:	080085bf 	.word	0x080085bf
 800828c:	080085f7 	.word	0x080085f7
 8008290:	0800861b 	.word	0x0800861b

08008294 <_cleanup_r>:
 8008294:	4901      	ldr	r1, [pc, #4]	; (800829c <_cleanup_r+0x8>)
 8008296:	f000 b8af 	b.w	80083f8 <_fwalk_reent>
 800829a:	bf00      	nop
 800829c:	080081d5 	.word	0x080081d5

080082a0 <__sfmoreglue>:
 80082a0:	b570      	push	{r4, r5, r6, lr}
 80082a2:	1e4a      	subs	r2, r1, #1
 80082a4:	2568      	movs	r5, #104	; 0x68
 80082a6:	4355      	muls	r5, r2
 80082a8:	460e      	mov	r6, r1
 80082aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80082ae:	f7ff fa87 	bl	80077c0 <_malloc_r>
 80082b2:	4604      	mov	r4, r0
 80082b4:	b140      	cbz	r0, 80082c8 <__sfmoreglue+0x28>
 80082b6:	2100      	movs	r1, #0
 80082b8:	e9c0 1600 	strd	r1, r6, [r0]
 80082bc:	300c      	adds	r0, #12
 80082be:	60a0      	str	r0, [r4, #8]
 80082c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80082c4:	f7fd fb78 	bl	80059b8 <memset>
 80082c8:	4620      	mov	r0, r4
 80082ca:	bd70      	pop	{r4, r5, r6, pc}

080082cc <__sfp_lock_acquire>:
 80082cc:	4801      	ldr	r0, [pc, #4]	; (80082d4 <__sfp_lock_acquire+0x8>)
 80082ce:	f000 b8b3 	b.w	8008438 <__retarget_lock_acquire_recursive>
 80082d2:	bf00      	nop
 80082d4:	20000464 	.word	0x20000464

080082d8 <__sfp_lock_release>:
 80082d8:	4801      	ldr	r0, [pc, #4]	; (80082e0 <__sfp_lock_release+0x8>)
 80082da:	f000 b8ae 	b.w	800843a <__retarget_lock_release_recursive>
 80082de:	bf00      	nop
 80082e0:	20000464 	.word	0x20000464

080082e4 <__sinit_lock_acquire>:
 80082e4:	4801      	ldr	r0, [pc, #4]	; (80082ec <__sinit_lock_acquire+0x8>)
 80082e6:	f000 b8a7 	b.w	8008438 <__retarget_lock_acquire_recursive>
 80082ea:	bf00      	nop
 80082ec:	2000045f 	.word	0x2000045f

080082f0 <__sinit_lock_release>:
 80082f0:	4801      	ldr	r0, [pc, #4]	; (80082f8 <__sinit_lock_release+0x8>)
 80082f2:	f000 b8a2 	b.w	800843a <__retarget_lock_release_recursive>
 80082f6:	bf00      	nop
 80082f8:	2000045f 	.word	0x2000045f

080082fc <__sinit>:
 80082fc:	b510      	push	{r4, lr}
 80082fe:	4604      	mov	r4, r0
 8008300:	f7ff fff0 	bl	80082e4 <__sinit_lock_acquire>
 8008304:	69a3      	ldr	r3, [r4, #24]
 8008306:	b11b      	cbz	r3, 8008310 <__sinit+0x14>
 8008308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800830c:	f7ff bff0 	b.w	80082f0 <__sinit_lock_release>
 8008310:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008314:	6523      	str	r3, [r4, #80]	; 0x50
 8008316:	4b13      	ldr	r3, [pc, #76]	; (8008364 <__sinit+0x68>)
 8008318:	4a13      	ldr	r2, [pc, #76]	; (8008368 <__sinit+0x6c>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	62a2      	str	r2, [r4, #40]	; 0x28
 800831e:	42a3      	cmp	r3, r4
 8008320:	bf04      	itt	eq
 8008322:	2301      	moveq	r3, #1
 8008324:	61a3      	streq	r3, [r4, #24]
 8008326:	4620      	mov	r0, r4
 8008328:	f000 f820 	bl	800836c <__sfp>
 800832c:	6060      	str	r0, [r4, #4]
 800832e:	4620      	mov	r0, r4
 8008330:	f000 f81c 	bl	800836c <__sfp>
 8008334:	60a0      	str	r0, [r4, #8]
 8008336:	4620      	mov	r0, r4
 8008338:	f000 f818 	bl	800836c <__sfp>
 800833c:	2200      	movs	r2, #0
 800833e:	60e0      	str	r0, [r4, #12]
 8008340:	2104      	movs	r1, #4
 8008342:	6860      	ldr	r0, [r4, #4]
 8008344:	f7ff ff82 	bl	800824c <std>
 8008348:	68a0      	ldr	r0, [r4, #8]
 800834a:	2201      	movs	r2, #1
 800834c:	2109      	movs	r1, #9
 800834e:	f7ff ff7d 	bl	800824c <std>
 8008352:	68e0      	ldr	r0, [r4, #12]
 8008354:	2202      	movs	r2, #2
 8008356:	2112      	movs	r1, #18
 8008358:	f7ff ff78 	bl	800824c <std>
 800835c:	2301      	movs	r3, #1
 800835e:	61a3      	str	r3, [r4, #24]
 8008360:	e7d2      	b.n	8008308 <__sinit+0xc>
 8008362:	bf00      	nop
 8008364:	08008c50 	.word	0x08008c50
 8008368:	08008295 	.word	0x08008295

0800836c <__sfp>:
 800836c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800836e:	4607      	mov	r7, r0
 8008370:	f7ff ffac 	bl	80082cc <__sfp_lock_acquire>
 8008374:	4b1e      	ldr	r3, [pc, #120]	; (80083f0 <__sfp+0x84>)
 8008376:	681e      	ldr	r6, [r3, #0]
 8008378:	69b3      	ldr	r3, [r6, #24]
 800837a:	b913      	cbnz	r3, 8008382 <__sfp+0x16>
 800837c:	4630      	mov	r0, r6
 800837e:	f7ff ffbd 	bl	80082fc <__sinit>
 8008382:	3648      	adds	r6, #72	; 0x48
 8008384:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008388:	3b01      	subs	r3, #1
 800838a:	d503      	bpl.n	8008394 <__sfp+0x28>
 800838c:	6833      	ldr	r3, [r6, #0]
 800838e:	b30b      	cbz	r3, 80083d4 <__sfp+0x68>
 8008390:	6836      	ldr	r6, [r6, #0]
 8008392:	e7f7      	b.n	8008384 <__sfp+0x18>
 8008394:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008398:	b9d5      	cbnz	r5, 80083d0 <__sfp+0x64>
 800839a:	4b16      	ldr	r3, [pc, #88]	; (80083f4 <__sfp+0x88>)
 800839c:	60e3      	str	r3, [r4, #12]
 800839e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80083a2:	6665      	str	r5, [r4, #100]	; 0x64
 80083a4:	f000 f847 	bl	8008436 <__retarget_lock_init_recursive>
 80083a8:	f7ff ff96 	bl	80082d8 <__sfp_lock_release>
 80083ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80083b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80083b4:	6025      	str	r5, [r4, #0]
 80083b6:	61a5      	str	r5, [r4, #24]
 80083b8:	2208      	movs	r2, #8
 80083ba:	4629      	mov	r1, r5
 80083bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80083c0:	f7fd fafa 	bl	80059b8 <memset>
 80083c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80083c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80083cc:	4620      	mov	r0, r4
 80083ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083d0:	3468      	adds	r4, #104	; 0x68
 80083d2:	e7d9      	b.n	8008388 <__sfp+0x1c>
 80083d4:	2104      	movs	r1, #4
 80083d6:	4638      	mov	r0, r7
 80083d8:	f7ff ff62 	bl	80082a0 <__sfmoreglue>
 80083dc:	4604      	mov	r4, r0
 80083de:	6030      	str	r0, [r6, #0]
 80083e0:	2800      	cmp	r0, #0
 80083e2:	d1d5      	bne.n	8008390 <__sfp+0x24>
 80083e4:	f7ff ff78 	bl	80082d8 <__sfp_lock_release>
 80083e8:	230c      	movs	r3, #12
 80083ea:	603b      	str	r3, [r7, #0]
 80083ec:	e7ee      	b.n	80083cc <__sfp+0x60>
 80083ee:	bf00      	nop
 80083f0:	08008c50 	.word	0x08008c50
 80083f4:	ffff0001 	.word	0xffff0001

080083f8 <_fwalk_reent>:
 80083f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083fc:	4606      	mov	r6, r0
 80083fe:	4688      	mov	r8, r1
 8008400:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008404:	2700      	movs	r7, #0
 8008406:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800840a:	f1b9 0901 	subs.w	r9, r9, #1
 800840e:	d505      	bpl.n	800841c <_fwalk_reent+0x24>
 8008410:	6824      	ldr	r4, [r4, #0]
 8008412:	2c00      	cmp	r4, #0
 8008414:	d1f7      	bne.n	8008406 <_fwalk_reent+0xe>
 8008416:	4638      	mov	r0, r7
 8008418:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800841c:	89ab      	ldrh	r3, [r5, #12]
 800841e:	2b01      	cmp	r3, #1
 8008420:	d907      	bls.n	8008432 <_fwalk_reent+0x3a>
 8008422:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008426:	3301      	adds	r3, #1
 8008428:	d003      	beq.n	8008432 <_fwalk_reent+0x3a>
 800842a:	4629      	mov	r1, r5
 800842c:	4630      	mov	r0, r6
 800842e:	47c0      	blx	r8
 8008430:	4307      	orrs	r7, r0
 8008432:	3568      	adds	r5, #104	; 0x68
 8008434:	e7e9      	b.n	800840a <_fwalk_reent+0x12>

08008436 <__retarget_lock_init_recursive>:
 8008436:	4770      	bx	lr

08008438 <__retarget_lock_acquire_recursive>:
 8008438:	4770      	bx	lr

0800843a <__retarget_lock_release_recursive>:
 800843a:	4770      	bx	lr

0800843c <__swhatbuf_r>:
 800843c:	b570      	push	{r4, r5, r6, lr}
 800843e:	460e      	mov	r6, r1
 8008440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008444:	2900      	cmp	r1, #0
 8008446:	b096      	sub	sp, #88	; 0x58
 8008448:	4614      	mov	r4, r2
 800844a:	461d      	mov	r5, r3
 800844c:	da07      	bge.n	800845e <__swhatbuf_r+0x22>
 800844e:	2300      	movs	r3, #0
 8008450:	602b      	str	r3, [r5, #0]
 8008452:	89b3      	ldrh	r3, [r6, #12]
 8008454:	061a      	lsls	r2, r3, #24
 8008456:	d410      	bmi.n	800847a <__swhatbuf_r+0x3e>
 8008458:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800845c:	e00e      	b.n	800847c <__swhatbuf_r+0x40>
 800845e:	466a      	mov	r2, sp
 8008460:	f000 f902 	bl	8008668 <_fstat_r>
 8008464:	2800      	cmp	r0, #0
 8008466:	dbf2      	blt.n	800844e <__swhatbuf_r+0x12>
 8008468:	9a01      	ldr	r2, [sp, #4]
 800846a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800846e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008472:	425a      	negs	r2, r3
 8008474:	415a      	adcs	r2, r3
 8008476:	602a      	str	r2, [r5, #0]
 8008478:	e7ee      	b.n	8008458 <__swhatbuf_r+0x1c>
 800847a:	2340      	movs	r3, #64	; 0x40
 800847c:	2000      	movs	r0, #0
 800847e:	6023      	str	r3, [r4, #0]
 8008480:	b016      	add	sp, #88	; 0x58
 8008482:	bd70      	pop	{r4, r5, r6, pc}

08008484 <__smakebuf_r>:
 8008484:	898b      	ldrh	r3, [r1, #12]
 8008486:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008488:	079d      	lsls	r5, r3, #30
 800848a:	4606      	mov	r6, r0
 800848c:	460c      	mov	r4, r1
 800848e:	d507      	bpl.n	80084a0 <__smakebuf_r+0x1c>
 8008490:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008494:	6023      	str	r3, [r4, #0]
 8008496:	6123      	str	r3, [r4, #16]
 8008498:	2301      	movs	r3, #1
 800849a:	6163      	str	r3, [r4, #20]
 800849c:	b002      	add	sp, #8
 800849e:	bd70      	pop	{r4, r5, r6, pc}
 80084a0:	ab01      	add	r3, sp, #4
 80084a2:	466a      	mov	r2, sp
 80084a4:	f7ff ffca 	bl	800843c <__swhatbuf_r>
 80084a8:	9900      	ldr	r1, [sp, #0]
 80084aa:	4605      	mov	r5, r0
 80084ac:	4630      	mov	r0, r6
 80084ae:	f7ff f987 	bl	80077c0 <_malloc_r>
 80084b2:	b948      	cbnz	r0, 80084c8 <__smakebuf_r+0x44>
 80084b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084b8:	059a      	lsls	r2, r3, #22
 80084ba:	d4ef      	bmi.n	800849c <__smakebuf_r+0x18>
 80084bc:	f023 0303 	bic.w	r3, r3, #3
 80084c0:	f043 0302 	orr.w	r3, r3, #2
 80084c4:	81a3      	strh	r3, [r4, #12]
 80084c6:	e7e3      	b.n	8008490 <__smakebuf_r+0xc>
 80084c8:	4b0d      	ldr	r3, [pc, #52]	; (8008500 <__smakebuf_r+0x7c>)
 80084ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80084cc:	89a3      	ldrh	r3, [r4, #12]
 80084ce:	6020      	str	r0, [r4, #0]
 80084d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084d4:	81a3      	strh	r3, [r4, #12]
 80084d6:	9b00      	ldr	r3, [sp, #0]
 80084d8:	6163      	str	r3, [r4, #20]
 80084da:	9b01      	ldr	r3, [sp, #4]
 80084dc:	6120      	str	r0, [r4, #16]
 80084de:	b15b      	cbz	r3, 80084f8 <__smakebuf_r+0x74>
 80084e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084e4:	4630      	mov	r0, r6
 80084e6:	f000 f8d1 	bl	800868c <_isatty_r>
 80084ea:	b128      	cbz	r0, 80084f8 <__smakebuf_r+0x74>
 80084ec:	89a3      	ldrh	r3, [r4, #12]
 80084ee:	f023 0303 	bic.w	r3, r3, #3
 80084f2:	f043 0301 	orr.w	r3, r3, #1
 80084f6:	81a3      	strh	r3, [r4, #12]
 80084f8:	89a0      	ldrh	r0, [r4, #12]
 80084fa:	4305      	orrs	r5, r0
 80084fc:	81a5      	strh	r5, [r4, #12]
 80084fe:	e7cd      	b.n	800849c <__smakebuf_r+0x18>
 8008500:	08008295 	.word	0x08008295

08008504 <_malloc_usable_size_r>:
 8008504:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008508:	1f18      	subs	r0, r3, #4
 800850a:	2b00      	cmp	r3, #0
 800850c:	bfbc      	itt	lt
 800850e:	580b      	ldrlt	r3, [r1, r0]
 8008510:	18c0      	addlt	r0, r0, r3
 8008512:	4770      	bx	lr

08008514 <_raise_r>:
 8008514:	291f      	cmp	r1, #31
 8008516:	b538      	push	{r3, r4, r5, lr}
 8008518:	4604      	mov	r4, r0
 800851a:	460d      	mov	r5, r1
 800851c:	d904      	bls.n	8008528 <_raise_r+0x14>
 800851e:	2316      	movs	r3, #22
 8008520:	6003      	str	r3, [r0, #0]
 8008522:	f04f 30ff 	mov.w	r0, #4294967295
 8008526:	bd38      	pop	{r3, r4, r5, pc}
 8008528:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800852a:	b112      	cbz	r2, 8008532 <_raise_r+0x1e>
 800852c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008530:	b94b      	cbnz	r3, 8008546 <_raise_r+0x32>
 8008532:	4620      	mov	r0, r4
 8008534:	f000 f830 	bl	8008598 <_getpid_r>
 8008538:	462a      	mov	r2, r5
 800853a:	4601      	mov	r1, r0
 800853c:	4620      	mov	r0, r4
 800853e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008542:	f000 b817 	b.w	8008574 <_kill_r>
 8008546:	2b01      	cmp	r3, #1
 8008548:	d00a      	beq.n	8008560 <_raise_r+0x4c>
 800854a:	1c59      	adds	r1, r3, #1
 800854c:	d103      	bne.n	8008556 <_raise_r+0x42>
 800854e:	2316      	movs	r3, #22
 8008550:	6003      	str	r3, [r0, #0]
 8008552:	2001      	movs	r0, #1
 8008554:	e7e7      	b.n	8008526 <_raise_r+0x12>
 8008556:	2400      	movs	r4, #0
 8008558:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800855c:	4628      	mov	r0, r5
 800855e:	4798      	blx	r3
 8008560:	2000      	movs	r0, #0
 8008562:	e7e0      	b.n	8008526 <_raise_r+0x12>

08008564 <raise>:
 8008564:	4b02      	ldr	r3, [pc, #8]	; (8008570 <raise+0xc>)
 8008566:	4601      	mov	r1, r0
 8008568:	6818      	ldr	r0, [r3, #0]
 800856a:	f7ff bfd3 	b.w	8008514 <_raise_r>
 800856e:	bf00      	nop
 8008570:	2000000c 	.word	0x2000000c

08008574 <_kill_r>:
 8008574:	b538      	push	{r3, r4, r5, lr}
 8008576:	4d07      	ldr	r5, [pc, #28]	; (8008594 <_kill_r+0x20>)
 8008578:	2300      	movs	r3, #0
 800857a:	4604      	mov	r4, r0
 800857c:	4608      	mov	r0, r1
 800857e:	4611      	mov	r1, r2
 8008580:	602b      	str	r3, [r5, #0]
 8008582:	f7f9 fded 	bl	8002160 <_kill>
 8008586:	1c43      	adds	r3, r0, #1
 8008588:	d102      	bne.n	8008590 <_kill_r+0x1c>
 800858a:	682b      	ldr	r3, [r5, #0]
 800858c:	b103      	cbz	r3, 8008590 <_kill_r+0x1c>
 800858e:	6023      	str	r3, [r4, #0]
 8008590:	bd38      	pop	{r3, r4, r5, pc}
 8008592:	bf00      	nop
 8008594:	20000458 	.word	0x20000458

08008598 <_getpid_r>:
 8008598:	f7f9 bdda 	b.w	8002150 <_getpid>

0800859c <__sread>:
 800859c:	b510      	push	{r4, lr}
 800859e:	460c      	mov	r4, r1
 80085a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085a4:	f000 f894 	bl	80086d0 <_read_r>
 80085a8:	2800      	cmp	r0, #0
 80085aa:	bfab      	itete	ge
 80085ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80085ae:	89a3      	ldrhlt	r3, [r4, #12]
 80085b0:	181b      	addge	r3, r3, r0
 80085b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80085b6:	bfac      	ite	ge
 80085b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80085ba:	81a3      	strhlt	r3, [r4, #12]
 80085bc:	bd10      	pop	{r4, pc}

080085be <__swrite>:
 80085be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085c2:	461f      	mov	r7, r3
 80085c4:	898b      	ldrh	r3, [r1, #12]
 80085c6:	05db      	lsls	r3, r3, #23
 80085c8:	4605      	mov	r5, r0
 80085ca:	460c      	mov	r4, r1
 80085cc:	4616      	mov	r6, r2
 80085ce:	d505      	bpl.n	80085dc <__swrite+0x1e>
 80085d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085d4:	2302      	movs	r3, #2
 80085d6:	2200      	movs	r2, #0
 80085d8:	f000 f868 	bl	80086ac <_lseek_r>
 80085dc:	89a3      	ldrh	r3, [r4, #12]
 80085de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085e6:	81a3      	strh	r3, [r4, #12]
 80085e8:	4632      	mov	r2, r6
 80085ea:	463b      	mov	r3, r7
 80085ec:	4628      	mov	r0, r5
 80085ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085f2:	f000 b817 	b.w	8008624 <_write_r>

080085f6 <__sseek>:
 80085f6:	b510      	push	{r4, lr}
 80085f8:	460c      	mov	r4, r1
 80085fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085fe:	f000 f855 	bl	80086ac <_lseek_r>
 8008602:	1c43      	adds	r3, r0, #1
 8008604:	89a3      	ldrh	r3, [r4, #12]
 8008606:	bf15      	itete	ne
 8008608:	6560      	strne	r0, [r4, #84]	; 0x54
 800860a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800860e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008612:	81a3      	strheq	r3, [r4, #12]
 8008614:	bf18      	it	ne
 8008616:	81a3      	strhne	r3, [r4, #12]
 8008618:	bd10      	pop	{r4, pc}

0800861a <__sclose>:
 800861a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800861e:	f000 b813 	b.w	8008648 <_close_r>
	...

08008624 <_write_r>:
 8008624:	b538      	push	{r3, r4, r5, lr}
 8008626:	4d07      	ldr	r5, [pc, #28]	; (8008644 <_write_r+0x20>)
 8008628:	4604      	mov	r4, r0
 800862a:	4608      	mov	r0, r1
 800862c:	4611      	mov	r1, r2
 800862e:	2200      	movs	r2, #0
 8008630:	602a      	str	r2, [r5, #0]
 8008632:	461a      	mov	r2, r3
 8008634:	f7f9 fdcb 	bl	80021ce <_write>
 8008638:	1c43      	adds	r3, r0, #1
 800863a:	d102      	bne.n	8008642 <_write_r+0x1e>
 800863c:	682b      	ldr	r3, [r5, #0]
 800863e:	b103      	cbz	r3, 8008642 <_write_r+0x1e>
 8008640:	6023      	str	r3, [r4, #0]
 8008642:	bd38      	pop	{r3, r4, r5, pc}
 8008644:	20000458 	.word	0x20000458

08008648 <_close_r>:
 8008648:	b538      	push	{r3, r4, r5, lr}
 800864a:	4d06      	ldr	r5, [pc, #24]	; (8008664 <_close_r+0x1c>)
 800864c:	2300      	movs	r3, #0
 800864e:	4604      	mov	r4, r0
 8008650:	4608      	mov	r0, r1
 8008652:	602b      	str	r3, [r5, #0]
 8008654:	f7f9 fdd7 	bl	8002206 <_close>
 8008658:	1c43      	adds	r3, r0, #1
 800865a:	d102      	bne.n	8008662 <_close_r+0x1a>
 800865c:	682b      	ldr	r3, [r5, #0]
 800865e:	b103      	cbz	r3, 8008662 <_close_r+0x1a>
 8008660:	6023      	str	r3, [r4, #0]
 8008662:	bd38      	pop	{r3, r4, r5, pc}
 8008664:	20000458 	.word	0x20000458

08008668 <_fstat_r>:
 8008668:	b538      	push	{r3, r4, r5, lr}
 800866a:	4d07      	ldr	r5, [pc, #28]	; (8008688 <_fstat_r+0x20>)
 800866c:	2300      	movs	r3, #0
 800866e:	4604      	mov	r4, r0
 8008670:	4608      	mov	r0, r1
 8008672:	4611      	mov	r1, r2
 8008674:	602b      	str	r3, [r5, #0]
 8008676:	f7f9 fdd2 	bl	800221e <_fstat>
 800867a:	1c43      	adds	r3, r0, #1
 800867c:	d102      	bne.n	8008684 <_fstat_r+0x1c>
 800867e:	682b      	ldr	r3, [r5, #0]
 8008680:	b103      	cbz	r3, 8008684 <_fstat_r+0x1c>
 8008682:	6023      	str	r3, [r4, #0]
 8008684:	bd38      	pop	{r3, r4, r5, pc}
 8008686:	bf00      	nop
 8008688:	20000458 	.word	0x20000458

0800868c <_isatty_r>:
 800868c:	b538      	push	{r3, r4, r5, lr}
 800868e:	4d06      	ldr	r5, [pc, #24]	; (80086a8 <_isatty_r+0x1c>)
 8008690:	2300      	movs	r3, #0
 8008692:	4604      	mov	r4, r0
 8008694:	4608      	mov	r0, r1
 8008696:	602b      	str	r3, [r5, #0]
 8008698:	f7f9 fdd1 	bl	800223e <_isatty>
 800869c:	1c43      	adds	r3, r0, #1
 800869e:	d102      	bne.n	80086a6 <_isatty_r+0x1a>
 80086a0:	682b      	ldr	r3, [r5, #0]
 80086a2:	b103      	cbz	r3, 80086a6 <_isatty_r+0x1a>
 80086a4:	6023      	str	r3, [r4, #0]
 80086a6:	bd38      	pop	{r3, r4, r5, pc}
 80086a8:	20000458 	.word	0x20000458

080086ac <_lseek_r>:
 80086ac:	b538      	push	{r3, r4, r5, lr}
 80086ae:	4d07      	ldr	r5, [pc, #28]	; (80086cc <_lseek_r+0x20>)
 80086b0:	4604      	mov	r4, r0
 80086b2:	4608      	mov	r0, r1
 80086b4:	4611      	mov	r1, r2
 80086b6:	2200      	movs	r2, #0
 80086b8:	602a      	str	r2, [r5, #0]
 80086ba:	461a      	mov	r2, r3
 80086bc:	f7f9 fdca 	bl	8002254 <_lseek>
 80086c0:	1c43      	adds	r3, r0, #1
 80086c2:	d102      	bne.n	80086ca <_lseek_r+0x1e>
 80086c4:	682b      	ldr	r3, [r5, #0]
 80086c6:	b103      	cbz	r3, 80086ca <_lseek_r+0x1e>
 80086c8:	6023      	str	r3, [r4, #0]
 80086ca:	bd38      	pop	{r3, r4, r5, pc}
 80086cc:	20000458 	.word	0x20000458

080086d0 <_read_r>:
 80086d0:	b538      	push	{r3, r4, r5, lr}
 80086d2:	4d07      	ldr	r5, [pc, #28]	; (80086f0 <_read_r+0x20>)
 80086d4:	4604      	mov	r4, r0
 80086d6:	4608      	mov	r0, r1
 80086d8:	4611      	mov	r1, r2
 80086da:	2200      	movs	r2, #0
 80086dc:	602a      	str	r2, [r5, #0]
 80086de:	461a      	mov	r2, r3
 80086e0:	f7f9 fd58 	bl	8002194 <_read>
 80086e4:	1c43      	adds	r3, r0, #1
 80086e6:	d102      	bne.n	80086ee <_read_r+0x1e>
 80086e8:	682b      	ldr	r3, [r5, #0]
 80086ea:	b103      	cbz	r3, 80086ee <_read_r+0x1e>
 80086ec:	6023      	str	r3, [r4, #0]
 80086ee:	bd38      	pop	{r3, r4, r5, pc}
 80086f0:	20000458 	.word	0x20000458

080086f4 <atan2>:
 80086f4:	f000 b800 	b.w	80086f8 <__ieee754_atan2>

080086f8 <__ieee754_atan2>:
 80086f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086fc:	ec57 6b11 	vmov	r6, r7, d1
 8008700:	4273      	negs	r3, r6
 8008702:	f8df e184 	ldr.w	lr, [pc, #388]	; 8008888 <__ieee754_atan2+0x190>
 8008706:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800870a:	4333      	orrs	r3, r6
 800870c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008710:	4573      	cmp	r3, lr
 8008712:	ec51 0b10 	vmov	r0, r1, d0
 8008716:	ee11 8a10 	vmov	r8, s2
 800871a:	d80a      	bhi.n	8008732 <__ieee754_atan2+0x3a>
 800871c:	4244      	negs	r4, r0
 800871e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008722:	4304      	orrs	r4, r0
 8008724:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008728:	4574      	cmp	r4, lr
 800872a:	ee10 9a10 	vmov	r9, s0
 800872e:	468c      	mov	ip, r1
 8008730:	d907      	bls.n	8008742 <__ieee754_atan2+0x4a>
 8008732:	4632      	mov	r2, r6
 8008734:	463b      	mov	r3, r7
 8008736:	f7f7 fdb1 	bl	800029c <__adddf3>
 800873a:	ec41 0b10 	vmov	d0, r0, r1
 800873e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008742:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8008746:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800874a:	4334      	orrs	r4, r6
 800874c:	d103      	bne.n	8008756 <__ieee754_atan2+0x5e>
 800874e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008752:	f000 b89d 	b.w	8008890 <atan>
 8008756:	17bc      	asrs	r4, r7, #30
 8008758:	f004 0402 	and.w	r4, r4, #2
 800875c:	ea53 0909 	orrs.w	r9, r3, r9
 8008760:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008764:	d107      	bne.n	8008776 <__ieee754_atan2+0x7e>
 8008766:	2c02      	cmp	r4, #2
 8008768:	d060      	beq.n	800882c <__ieee754_atan2+0x134>
 800876a:	2c03      	cmp	r4, #3
 800876c:	d1e5      	bne.n	800873a <__ieee754_atan2+0x42>
 800876e:	a142      	add	r1, pc, #264	; (adr r1, 8008878 <__ieee754_atan2+0x180>)
 8008770:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008774:	e7e1      	b.n	800873a <__ieee754_atan2+0x42>
 8008776:	ea52 0808 	orrs.w	r8, r2, r8
 800877a:	d106      	bne.n	800878a <__ieee754_atan2+0x92>
 800877c:	f1bc 0f00 	cmp.w	ip, #0
 8008780:	da5f      	bge.n	8008842 <__ieee754_atan2+0x14a>
 8008782:	a13f      	add	r1, pc, #252	; (adr r1, 8008880 <__ieee754_atan2+0x188>)
 8008784:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008788:	e7d7      	b.n	800873a <__ieee754_atan2+0x42>
 800878a:	4572      	cmp	r2, lr
 800878c:	d10f      	bne.n	80087ae <__ieee754_atan2+0xb6>
 800878e:	4293      	cmp	r3, r2
 8008790:	f104 34ff 	add.w	r4, r4, #4294967295
 8008794:	d107      	bne.n	80087a6 <__ieee754_atan2+0xae>
 8008796:	2c02      	cmp	r4, #2
 8008798:	d84c      	bhi.n	8008834 <__ieee754_atan2+0x13c>
 800879a:	4b35      	ldr	r3, [pc, #212]	; (8008870 <__ieee754_atan2+0x178>)
 800879c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80087a0:	e9d4 0100 	ldrd	r0, r1, [r4]
 80087a4:	e7c9      	b.n	800873a <__ieee754_atan2+0x42>
 80087a6:	2c02      	cmp	r4, #2
 80087a8:	d848      	bhi.n	800883c <__ieee754_atan2+0x144>
 80087aa:	4b32      	ldr	r3, [pc, #200]	; (8008874 <__ieee754_atan2+0x17c>)
 80087ac:	e7f6      	b.n	800879c <__ieee754_atan2+0xa4>
 80087ae:	4573      	cmp	r3, lr
 80087b0:	d0e4      	beq.n	800877c <__ieee754_atan2+0x84>
 80087b2:	1a9b      	subs	r3, r3, r2
 80087b4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80087b8:	ea4f 5223 	mov.w	r2, r3, asr #20
 80087bc:	da1e      	bge.n	80087fc <__ieee754_atan2+0x104>
 80087be:	2f00      	cmp	r7, #0
 80087c0:	da01      	bge.n	80087c6 <__ieee754_atan2+0xce>
 80087c2:	323c      	adds	r2, #60	; 0x3c
 80087c4:	db1e      	blt.n	8008804 <__ieee754_atan2+0x10c>
 80087c6:	4632      	mov	r2, r6
 80087c8:	463b      	mov	r3, r7
 80087ca:	f7f8 f847 	bl	800085c <__aeabi_ddiv>
 80087ce:	ec41 0b10 	vmov	d0, r0, r1
 80087d2:	f000 f9fd 	bl	8008bd0 <fabs>
 80087d6:	f000 f85b 	bl	8008890 <atan>
 80087da:	ec51 0b10 	vmov	r0, r1, d0
 80087de:	2c01      	cmp	r4, #1
 80087e0:	d013      	beq.n	800880a <__ieee754_atan2+0x112>
 80087e2:	2c02      	cmp	r4, #2
 80087e4:	d015      	beq.n	8008812 <__ieee754_atan2+0x11a>
 80087e6:	2c00      	cmp	r4, #0
 80087e8:	d0a7      	beq.n	800873a <__ieee754_atan2+0x42>
 80087ea:	a319      	add	r3, pc, #100	; (adr r3, 8008850 <__ieee754_atan2+0x158>)
 80087ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f0:	f7f7 fd52 	bl	8000298 <__aeabi_dsub>
 80087f4:	a318      	add	r3, pc, #96	; (adr r3, 8008858 <__ieee754_atan2+0x160>)
 80087f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fa:	e014      	b.n	8008826 <__ieee754_atan2+0x12e>
 80087fc:	a118      	add	r1, pc, #96	; (adr r1, 8008860 <__ieee754_atan2+0x168>)
 80087fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008802:	e7ec      	b.n	80087de <__ieee754_atan2+0xe6>
 8008804:	2000      	movs	r0, #0
 8008806:	2100      	movs	r1, #0
 8008808:	e7e9      	b.n	80087de <__ieee754_atan2+0xe6>
 800880a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800880e:	4619      	mov	r1, r3
 8008810:	e793      	b.n	800873a <__ieee754_atan2+0x42>
 8008812:	a30f      	add	r3, pc, #60	; (adr r3, 8008850 <__ieee754_atan2+0x158>)
 8008814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008818:	f7f7 fd3e 	bl	8000298 <__aeabi_dsub>
 800881c:	4602      	mov	r2, r0
 800881e:	460b      	mov	r3, r1
 8008820:	a10d      	add	r1, pc, #52	; (adr r1, 8008858 <__ieee754_atan2+0x160>)
 8008822:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008826:	f7f7 fd37 	bl	8000298 <__aeabi_dsub>
 800882a:	e786      	b.n	800873a <__ieee754_atan2+0x42>
 800882c:	a10a      	add	r1, pc, #40	; (adr r1, 8008858 <__ieee754_atan2+0x160>)
 800882e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008832:	e782      	b.n	800873a <__ieee754_atan2+0x42>
 8008834:	a10c      	add	r1, pc, #48	; (adr r1, 8008868 <__ieee754_atan2+0x170>)
 8008836:	e9d1 0100 	ldrd	r0, r1, [r1]
 800883a:	e77e      	b.n	800873a <__ieee754_atan2+0x42>
 800883c:	2000      	movs	r0, #0
 800883e:	2100      	movs	r1, #0
 8008840:	e77b      	b.n	800873a <__ieee754_atan2+0x42>
 8008842:	a107      	add	r1, pc, #28	; (adr r1, 8008860 <__ieee754_atan2+0x168>)
 8008844:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008848:	e777      	b.n	800873a <__ieee754_atan2+0x42>
 800884a:	bf00      	nop
 800884c:	f3af 8000 	nop.w
 8008850:	33145c07 	.word	0x33145c07
 8008854:	3ca1a626 	.word	0x3ca1a626
 8008858:	54442d18 	.word	0x54442d18
 800885c:	400921fb 	.word	0x400921fb
 8008860:	54442d18 	.word	0x54442d18
 8008864:	3ff921fb 	.word	0x3ff921fb
 8008868:	54442d18 	.word	0x54442d18
 800886c:	3fe921fb 	.word	0x3fe921fb
 8008870:	08009038 	.word	0x08009038
 8008874:	08009050 	.word	0x08009050
 8008878:	54442d18 	.word	0x54442d18
 800887c:	c00921fb 	.word	0xc00921fb
 8008880:	54442d18 	.word	0x54442d18
 8008884:	bff921fb 	.word	0xbff921fb
 8008888:	7ff00000 	.word	0x7ff00000
 800888c:	00000000 	.word	0x00000000

08008890 <atan>:
 8008890:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008894:	ec55 4b10 	vmov	r4, r5, d0
 8008898:	4bc3      	ldr	r3, [pc, #780]	; (8008ba8 <atan+0x318>)
 800889a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800889e:	429e      	cmp	r6, r3
 80088a0:	46ab      	mov	fp, r5
 80088a2:	dd18      	ble.n	80088d6 <atan+0x46>
 80088a4:	4bc1      	ldr	r3, [pc, #772]	; (8008bac <atan+0x31c>)
 80088a6:	429e      	cmp	r6, r3
 80088a8:	dc01      	bgt.n	80088ae <atan+0x1e>
 80088aa:	d109      	bne.n	80088c0 <atan+0x30>
 80088ac:	b144      	cbz	r4, 80088c0 <atan+0x30>
 80088ae:	4622      	mov	r2, r4
 80088b0:	462b      	mov	r3, r5
 80088b2:	4620      	mov	r0, r4
 80088b4:	4629      	mov	r1, r5
 80088b6:	f7f7 fcf1 	bl	800029c <__adddf3>
 80088ba:	4604      	mov	r4, r0
 80088bc:	460d      	mov	r5, r1
 80088be:	e006      	b.n	80088ce <atan+0x3e>
 80088c0:	f1bb 0f00 	cmp.w	fp, #0
 80088c4:	f300 8131 	bgt.w	8008b2a <atan+0x29a>
 80088c8:	a59b      	add	r5, pc, #620	; (adr r5, 8008b38 <atan+0x2a8>)
 80088ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 80088ce:	ec45 4b10 	vmov	d0, r4, r5
 80088d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088d6:	4bb6      	ldr	r3, [pc, #728]	; (8008bb0 <atan+0x320>)
 80088d8:	429e      	cmp	r6, r3
 80088da:	dc14      	bgt.n	8008906 <atan+0x76>
 80088dc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80088e0:	429e      	cmp	r6, r3
 80088e2:	dc0d      	bgt.n	8008900 <atan+0x70>
 80088e4:	a396      	add	r3, pc, #600	; (adr r3, 8008b40 <atan+0x2b0>)
 80088e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ea:	ee10 0a10 	vmov	r0, s0
 80088ee:	4629      	mov	r1, r5
 80088f0:	f7f7 fcd4 	bl	800029c <__adddf3>
 80088f4:	4baf      	ldr	r3, [pc, #700]	; (8008bb4 <atan+0x324>)
 80088f6:	2200      	movs	r2, #0
 80088f8:	f7f8 f916 	bl	8000b28 <__aeabi_dcmpgt>
 80088fc:	2800      	cmp	r0, #0
 80088fe:	d1e6      	bne.n	80088ce <atan+0x3e>
 8008900:	f04f 3aff 	mov.w	sl, #4294967295
 8008904:	e02b      	b.n	800895e <atan+0xce>
 8008906:	f000 f963 	bl	8008bd0 <fabs>
 800890a:	4bab      	ldr	r3, [pc, #684]	; (8008bb8 <atan+0x328>)
 800890c:	429e      	cmp	r6, r3
 800890e:	ec55 4b10 	vmov	r4, r5, d0
 8008912:	f300 80bf 	bgt.w	8008a94 <atan+0x204>
 8008916:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800891a:	429e      	cmp	r6, r3
 800891c:	f300 80a0 	bgt.w	8008a60 <atan+0x1d0>
 8008920:	ee10 2a10 	vmov	r2, s0
 8008924:	ee10 0a10 	vmov	r0, s0
 8008928:	462b      	mov	r3, r5
 800892a:	4629      	mov	r1, r5
 800892c:	f7f7 fcb6 	bl	800029c <__adddf3>
 8008930:	4ba0      	ldr	r3, [pc, #640]	; (8008bb4 <atan+0x324>)
 8008932:	2200      	movs	r2, #0
 8008934:	f7f7 fcb0 	bl	8000298 <__aeabi_dsub>
 8008938:	2200      	movs	r2, #0
 800893a:	4606      	mov	r6, r0
 800893c:	460f      	mov	r7, r1
 800893e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008942:	4620      	mov	r0, r4
 8008944:	4629      	mov	r1, r5
 8008946:	f7f7 fca9 	bl	800029c <__adddf3>
 800894a:	4602      	mov	r2, r0
 800894c:	460b      	mov	r3, r1
 800894e:	4630      	mov	r0, r6
 8008950:	4639      	mov	r1, r7
 8008952:	f7f7 ff83 	bl	800085c <__aeabi_ddiv>
 8008956:	f04f 0a00 	mov.w	sl, #0
 800895a:	4604      	mov	r4, r0
 800895c:	460d      	mov	r5, r1
 800895e:	4622      	mov	r2, r4
 8008960:	462b      	mov	r3, r5
 8008962:	4620      	mov	r0, r4
 8008964:	4629      	mov	r1, r5
 8008966:	f7f7 fe4f 	bl	8000608 <__aeabi_dmul>
 800896a:	4602      	mov	r2, r0
 800896c:	460b      	mov	r3, r1
 800896e:	4680      	mov	r8, r0
 8008970:	4689      	mov	r9, r1
 8008972:	f7f7 fe49 	bl	8000608 <__aeabi_dmul>
 8008976:	a374      	add	r3, pc, #464	; (adr r3, 8008b48 <atan+0x2b8>)
 8008978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800897c:	4606      	mov	r6, r0
 800897e:	460f      	mov	r7, r1
 8008980:	f7f7 fe42 	bl	8000608 <__aeabi_dmul>
 8008984:	a372      	add	r3, pc, #456	; (adr r3, 8008b50 <atan+0x2c0>)
 8008986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898a:	f7f7 fc87 	bl	800029c <__adddf3>
 800898e:	4632      	mov	r2, r6
 8008990:	463b      	mov	r3, r7
 8008992:	f7f7 fe39 	bl	8000608 <__aeabi_dmul>
 8008996:	a370      	add	r3, pc, #448	; (adr r3, 8008b58 <atan+0x2c8>)
 8008998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800899c:	f7f7 fc7e 	bl	800029c <__adddf3>
 80089a0:	4632      	mov	r2, r6
 80089a2:	463b      	mov	r3, r7
 80089a4:	f7f7 fe30 	bl	8000608 <__aeabi_dmul>
 80089a8:	a36d      	add	r3, pc, #436	; (adr r3, 8008b60 <atan+0x2d0>)
 80089aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ae:	f7f7 fc75 	bl	800029c <__adddf3>
 80089b2:	4632      	mov	r2, r6
 80089b4:	463b      	mov	r3, r7
 80089b6:	f7f7 fe27 	bl	8000608 <__aeabi_dmul>
 80089ba:	a36b      	add	r3, pc, #428	; (adr r3, 8008b68 <atan+0x2d8>)
 80089bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c0:	f7f7 fc6c 	bl	800029c <__adddf3>
 80089c4:	4632      	mov	r2, r6
 80089c6:	463b      	mov	r3, r7
 80089c8:	f7f7 fe1e 	bl	8000608 <__aeabi_dmul>
 80089cc:	a368      	add	r3, pc, #416	; (adr r3, 8008b70 <atan+0x2e0>)
 80089ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d2:	f7f7 fc63 	bl	800029c <__adddf3>
 80089d6:	4642      	mov	r2, r8
 80089d8:	464b      	mov	r3, r9
 80089da:	f7f7 fe15 	bl	8000608 <__aeabi_dmul>
 80089de:	a366      	add	r3, pc, #408	; (adr r3, 8008b78 <atan+0x2e8>)
 80089e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e4:	4680      	mov	r8, r0
 80089e6:	4689      	mov	r9, r1
 80089e8:	4630      	mov	r0, r6
 80089ea:	4639      	mov	r1, r7
 80089ec:	f7f7 fe0c 	bl	8000608 <__aeabi_dmul>
 80089f0:	a363      	add	r3, pc, #396	; (adr r3, 8008b80 <atan+0x2f0>)
 80089f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f6:	f7f7 fc4f 	bl	8000298 <__aeabi_dsub>
 80089fa:	4632      	mov	r2, r6
 80089fc:	463b      	mov	r3, r7
 80089fe:	f7f7 fe03 	bl	8000608 <__aeabi_dmul>
 8008a02:	a361      	add	r3, pc, #388	; (adr r3, 8008b88 <atan+0x2f8>)
 8008a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a08:	f7f7 fc46 	bl	8000298 <__aeabi_dsub>
 8008a0c:	4632      	mov	r2, r6
 8008a0e:	463b      	mov	r3, r7
 8008a10:	f7f7 fdfa 	bl	8000608 <__aeabi_dmul>
 8008a14:	a35e      	add	r3, pc, #376	; (adr r3, 8008b90 <atan+0x300>)
 8008a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1a:	f7f7 fc3d 	bl	8000298 <__aeabi_dsub>
 8008a1e:	4632      	mov	r2, r6
 8008a20:	463b      	mov	r3, r7
 8008a22:	f7f7 fdf1 	bl	8000608 <__aeabi_dmul>
 8008a26:	a35c      	add	r3, pc, #368	; (adr r3, 8008b98 <atan+0x308>)
 8008a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2c:	f7f7 fc34 	bl	8000298 <__aeabi_dsub>
 8008a30:	4632      	mov	r2, r6
 8008a32:	463b      	mov	r3, r7
 8008a34:	f7f7 fde8 	bl	8000608 <__aeabi_dmul>
 8008a38:	4602      	mov	r2, r0
 8008a3a:	460b      	mov	r3, r1
 8008a3c:	4640      	mov	r0, r8
 8008a3e:	4649      	mov	r1, r9
 8008a40:	f7f7 fc2c 	bl	800029c <__adddf3>
 8008a44:	4622      	mov	r2, r4
 8008a46:	462b      	mov	r3, r5
 8008a48:	f7f7 fdde 	bl	8000608 <__aeabi_dmul>
 8008a4c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008a50:	4602      	mov	r2, r0
 8008a52:	460b      	mov	r3, r1
 8008a54:	d14b      	bne.n	8008aee <atan+0x25e>
 8008a56:	4620      	mov	r0, r4
 8008a58:	4629      	mov	r1, r5
 8008a5a:	f7f7 fc1d 	bl	8000298 <__aeabi_dsub>
 8008a5e:	e72c      	b.n	80088ba <atan+0x2a>
 8008a60:	ee10 0a10 	vmov	r0, s0
 8008a64:	4b53      	ldr	r3, [pc, #332]	; (8008bb4 <atan+0x324>)
 8008a66:	2200      	movs	r2, #0
 8008a68:	4629      	mov	r1, r5
 8008a6a:	f7f7 fc15 	bl	8000298 <__aeabi_dsub>
 8008a6e:	4b51      	ldr	r3, [pc, #324]	; (8008bb4 <atan+0x324>)
 8008a70:	4606      	mov	r6, r0
 8008a72:	460f      	mov	r7, r1
 8008a74:	2200      	movs	r2, #0
 8008a76:	4620      	mov	r0, r4
 8008a78:	4629      	mov	r1, r5
 8008a7a:	f7f7 fc0f 	bl	800029c <__adddf3>
 8008a7e:	4602      	mov	r2, r0
 8008a80:	460b      	mov	r3, r1
 8008a82:	4630      	mov	r0, r6
 8008a84:	4639      	mov	r1, r7
 8008a86:	f7f7 fee9 	bl	800085c <__aeabi_ddiv>
 8008a8a:	f04f 0a01 	mov.w	sl, #1
 8008a8e:	4604      	mov	r4, r0
 8008a90:	460d      	mov	r5, r1
 8008a92:	e764      	b.n	800895e <atan+0xce>
 8008a94:	4b49      	ldr	r3, [pc, #292]	; (8008bbc <atan+0x32c>)
 8008a96:	429e      	cmp	r6, r3
 8008a98:	da1d      	bge.n	8008ad6 <atan+0x246>
 8008a9a:	ee10 0a10 	vmov	r0, s0
 8008a9e:	4b48      	ldr	r3, [pc, #288]	; (8008bc0 <atan+0x330>)
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	4629      	mov	r1, r5
 8008aa4:	f7f7 fbf8 	bl	8000298 <__aeabi_dsub>
 8008aa8:	4b45      	ldr	r3, [pc, #276]	; (8008bc0 <atan+0x330>)
 8008aaa:	4606      	mov	r6, r0
 8008aac:	460f      	mov	r7, r1
 8008aae:	2200      	movs	r2, #0
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	4629      	mov	r1, r5
 8008ab4:	f7f7 fda8 	bl	8000608 <__aeabi_dmul>
 8008ab8:	4b3e      	ldr	r3, [pc, #248]	; (8008bb4 <atan+0x324>)
 8008aba:	2200      	movs	r2, #0
 8008abc:	f7f7 fbee 	bl	800029c <__adddf3>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	460b      	mov	r3, r1
 8008ac4:	4630      	mov	r0, r6
 8008ac6:	4639      	mov	r1, r7
 8008ac8:	f7f7 fec8 	bl	800085c <__aeabi_ddiv>
 8008acc:	f04f 0a02 	mov.w	sl, #2
 8008ad0:	4604      	mov	r4, r0
 8008ad2:	460d      	mov	r5, r1
 8008ad4:	e743      	b.n	800895e <atan+0xce>
 8008ad6:	462b      	mov	r3, r5
 8008ad8:	ee10 2a10 	vmov	r2, s0
 8008adc:	4939      	ldr	r1, [pc, #228]	; (8008bc4 <atan+0x334>)
 8008ade:	2000      	movs	r0, #0
 8008ae0:	f7f7 febc 	bl	800085c <__aeabi_ddiv>
 8008ae4:	f04f 0a03 	mov.w	sl, #3
 8008ae8:	4604      	mov	r4, r0
 8008aea:	460d      	mov	r5, r1
 8008aec:	e737      	b.n	800895e <atan+0xce>
 8008aee:	4b36      	ldr	r3, [pc, #216]	; (8008bc8 <atan+0x338>)
 8008af0:	4e36      	ldr	r6, [pc, #216]	; (8008bcc <atan+0x33c>)
 8008af2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008af6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8008afa:	e9da 2300 	ldrd	r2, r3, [sl]
 8008afe:	f7f7 fbcb 	bl	8000298 <__aeabi_dsub>
 8008b02:	4622      	mov	r2, r4
 8008b04:	462b      	mov	r3, r5
 8008b06:	f7f7 fbc7 	bl	8000298 <__aeabi_dsub>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008b12:	f7f7 fbc1 	bl	8000298 <__aeabi_dsub>
 8008b16:	f1bb 0f00 	cmp.w	fp, #0
 8008b1a:	4604      	mov	r4, r0
 8008b1c:	460d      	mov	r5, r1
 8008b1e:	f6bf aed6 	bge.w	80088ce <atan+0x3e>
 8008b22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b26:	461d      	mov	r5, r3
 8008b28:	e6d1      	b.n	80088ce <atan+0x3e>
 8008b2a:	a51d      	add	r5, pc, #116	; (adr r5, 8008ba0 <atan+0x310>)
 8008b2c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008b30:	e6cd      	b.n	80088ce <atan+0x3e>
 8008b32:	bf00      	nop
 8008b34:	f3af 8000 	nop.w
 8008b38:	54442d18 	.word	0x54442d18
 8008b3c:	bff921fb 	.word	0xbff921fb
 8008b40:	8800759c 	.word	0x8800759c
 8008b44:	7e37e43c 	.word	0x7e37e43c
 8008b48:	e322da11 	.word	0xe322da11
 8008b4c:	3f90ad3a 	.word	0x3f90ad3a
 8008b50:	24760deb 	.word	0x24760deb
 8008b54:	3fa97b4b 	.word	0x3fa97b4b
 8008b58:	a0d03d51 	.word	0xa0d03d51
 8008b5c:	3fb10d66 	.word	0x3fb10d66
 8008b60:	c54c206e 	.word	0xc54c206e
 8008b64:	3fb745cd 	.word	0x3fb745cd
 8008b68:	920083ff 	.word	0x920083ff
 8008b6c:	3fc24924 	.word	0x3fc24924
 8008b70:	5555550d 	.word	0x5555550d
 8008b74:	3fd55555 	.word	0x3fd55555
 8008b78:	2c6a6c2f 	.word	0x2c6a6c2f
 8008b7c:	bfa2b444 	.word	0xbfa2b444
 8008b80:	52defd9a 	.word	0x52defd9a
 8008b84:	3fadde2d 	.word	0x3fadde2d
 8008b88:	af749a6d 	.word	0xaf749a6d
 8008b8c:	3fb3b0f2 	.word	0x3fb3b0f2
 8008b90:	fe231671 	.word	0xfe231671
 8008b94:	3fbc71c6 	.word	0x3fbc71c6
 8008b98:	9998ebc4 	.word	0x9998ebc4
 8008b9c:	3fc99999 	.word	0x3fc99999
 8008ba0:	54442d18 	.word	0x54442d18
 8008ba4:	3ff921fb 	.word	0x3ff921fb
 8008ba8:	440fffff 	.word	0x440fffff
 8008bac:	7ff00000 	.word	0x7ff00000
 8008bb0:	3fdbffff 	.word	0x3fdbffff
 8008bb4:	3ff00000 	.word	0x3ff00000
 8008bb8:	3ff2ffff 	.word	0x3ff2ffff
 8008bbc:	40038000 	.word	0x40038000
 8008bc0:	3ff80000 	.word	0x3ff80000
 8008bc4:	bff00000 	.word	0xbff00000
 8008bc8:	08009088 	.word	0x08009088
 8008bcc:	08009068 	.word	0x08009068

08008bd0 <fabs>:
 8008bd0:	ec51 0b10 	vmov	r0, r1, d0
 8008bd4:	ee10 2a10 	vmov	r2, s0
 8008bd8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008bdc:	ec43 2b10 	vmov	d0, r2, r3
 8008be0:	4770      	bx	lr
	...

08008be4 <_init>:
 8008be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008be6:	bf00      	nop
 8008be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bea:	bc08      	pop	{r3}
 8008bec:	469e      	mov	lr, r3
 8008bee:	4770      	bx	lr

08008bf0 <_fini>:
 8008bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bf2:	bf00      	nop
 8008bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bf6:	bc08      	pop	{r3}
 8008bf8:	469e      	mov	lr, r3
 8008bfa:	4770      	bx	lr
