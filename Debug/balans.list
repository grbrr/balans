
balans.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2ac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  0800b450  0800b450  0001b450  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b900  0800b900  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b900  0800b900  0001b900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b908  0800b908  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b908  0800b908  0001b908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b90c  0800b90c  0001b90c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800b910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  200001dc  0800baec  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000534  0800baec  00020534  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bf0b  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b07  00000000  00000000  0003c117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  0003fc20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001118  00000000  00000000  00040eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b1b8  00000000  00000000  00041fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a68e  00000000  00000000  0005d188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e048  00000000  00000000  00077816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011585e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e34  00000000  00000000  001158b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b434 	.word	0x0800b434

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	0800b434 	.word	0x0800b434

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f56:	463b      	mov	r3, r7
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f62:	4b21      	ldr	r3, [pc, #132]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f64:	4a21      	ldr	r2, [pc, #132]	; (8000fec <MX_ADC1_Init+0x9c>)
 8000f66:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f68:	4b1f      	ldr	r3, [pc, #124]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000f6e:	4b1e      	ldr	r3, [pc, #120]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f74:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f76:	4b1c      	ldr	r3, [pc, #112]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f7c:	4b1a      	ldr	r3, [pc, #104]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f82:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f8a:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f90:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f92:	4a17      	ldr	r2, [pc, #92]	; (8000ff0 <MX_ADC1_Init+0xa0>)
 8000f94:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f96:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fa2:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000faa:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fb0:	480d      	ldr	r0, [pc, #52]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000fb2:	f002 fa8f 	bl	80034d4 <HAL_ADC_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000fbc:	f000 ff6c 	bl	8001e98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000fc0:	2305      	movs	r3, #5
 8000fc2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fcc:	463b      	mov	r3, r7
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000fd2:	f002 fc0f 	bl	80037f4 <HAL_ADC_ConfigChannel>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000fdc:	f000 ff5c 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fe0:	bf00      	nop
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000278 	.word	0x20000278
 8000fec:	40012000 	.word	0x40012000
 8000ff0:	0f000001 	.word	0x0f000001

08000ff4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	; 0x28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a17      	ldr	r2, [pc, #92]	; (8001070 <HAL_ADC_MspInit+0x7c>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d127      	bne.n	8001066 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	613b      	str	r3, [r7, #16]
 800101a:	4b16      	ldr	r3, [pc, #88]	; (8001074 <HAL_ADC_MspInit+0x80>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101e:	4a15      	ldr	r2, [pc, #84]	; (8001074 <HAL_ADC_MspInit+0x80>)
 8001020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001024:	6453      	str	r3, [r2, #68]	; 0x44
 8001026:	4b13      	ldr	r3, [pc, #76]	; (8001074 <HAL_ADC_MspInit+0x80>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <HAL_ADC_MspInit+0x80>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a0e      	ldr	r2, [pc, #56]	; (8001074 <HAL_ADC_MspInit+0x80>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <HAL_ADC_MspInit+0x80>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800104e:	2320      	movs	r3, #32
 8001050:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001052:	2303      	movs	r3, #3
 8001054:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	4619      	mov	r1, r3
 8001060:	4805      	ldr	r0, [pc, #20]	; (8001078 <HAL_ADC_MspInit+0x84>)
 8001062:	f003 faf9 	bl	8004658 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001066:	bf00      	nop
 8001068:	3728      	adds	r7, #40	; 0x28
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40012000 	.word	0x40012000
 8001074:	40023800 	.word	0x40023800
 8001078:	40020000 	.word	0x40020000

0800107c <LL_SYSTICK_IsActiveCounterFlag>:
 *      Author: Damian
 */

#include "additives.h"
//wymagane dla działania getCurrentMicros()
static inline uint32_t LL_SYSTICK_IsActiveCounterFlag(void) {
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
	return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)
 8001080:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
			== (SysTick_CTRL_COUNTFLAG_Msk));
 8001088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800108c:	bf0c      	ite	eq
 800108e:	2301      	moveq	r3, #1
 8001090:	2300      	movne	r3, #0
 8001092:	b2db      	uxtb	r3, r3
}
 8001094:	4618      	mov	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	e000e010 	.word	0xe000e010

080010a4 <getCurrentMicros>:
//funkcja zwracająca liczbę mikrosekund od uruchomiena, pochodzi bodajże z PlatformIO (HAL domyślnie nie posiada odpowiednika)
uint32_t getCurrentMicros(void) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
	/* Ensure COUNTFLAG is reset by reading SysTick control and status register */
	LL_SYSTICK_IsActiveCounterFlag();
 80010aa:	f7ff ffe7 	bl	800107c <LL_SYSTICK_IsActiveCounterFlag>
	uint32_t m = HAL_GetTick();
 80010ae:	f002 f9e1 	bl	8003474 <HAL_GetTick>
 80010b2:	60f8      	str	r0, [r7, #12]
	const uint32_t tms = SysTick->LOAD + 1;
 80010b4:	4b13      	ldr	r3, [pc, #76]	; (8001104 <getCurrentMicros+0x60>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	3301      	adds	r3, #1
 80010ba:	60bb      	str	r3, [r7, #8]
	__IO uint32_t u = tms - SysTick->VAL;
 80010bc:	4b11      	ldr	r3, [pc, #68]	; (8001104 <getCurrentMicros+0x60>)
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	68ba      	ldr	r2, [r7, #8]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	607b      	str	r3, [r7, #4]
	if (LL_SYSTICK_IsActiveCounterFlag()) {
 80010c6:	f7ff ffd9 	bl	800107c <LL_SYSTICK_IsActiveCounterFlag>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d007      	beq.n	80010e0 <getCurrentMicros+0x3c>
		m = HAL_GetTick();
 80010d0:	f002 f9d0 	bl	8003474 <HAL_GetTick>
 80010d4:	60f8      	str	r0, [r7, #12]
		u = tms - SysTick->VAL;
 80010d6:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <getCurrentMicros+0x60>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	607b      	str	r3, [r7, #4]
	}
	return (m * 1000 + (u * 1000) / tms);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010e6:	fb02 f203 	mul.w	r2, r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010f0:	fb01 f103 	mul.w	r1, r1, r3
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80010fa:	4413      	add	r3, r2
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	e000e010 	.word	0xe000e010

08001108 <map>:
//funkcje mapowania wartości
int32_t map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min,
		int32_t out_max) {
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
 8001114:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001116:	68fa      	ldr	r2, [r7, #12]
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	69b9      	ldr	r1, [r7, #24]
 800111e:	683a      	ldr	r2, [r7, #0]
 8001120:	1a8a      	subs	r2, r1, r2
 8001122:	fb02 f203 	mul.w	r2, r2, r3
 8001126:	6879      	ldr	r1, [r7, #4]
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	1acb      	subs	r3, r1, r3
 800112c:	fb92 f2f3 	sdiv	r2, r2, r3
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	4413      	add	r3, r2
}
 8001134:	4618      	mov	r0, r3
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <mapfloat>:

float mapfloat(float x, float in_min, float in_max, float out_min,
		float out_max) {
 8001140:	b480      	push	{r7}
 8001142:	b087      	sub	sp, #28
 8001144:	af00      	add	r7, sp, #0
 8001146:	ed87 0a05 	vstr	s0, [r7, #20]
 800114a:	edc7 0a04 	vstr	s1, [r7, #16]
 800114e:	ed87 1a03 	vstr	s2, [r7, #12]
 8001152:	edc7 1a02 	vstr	s3, [r7, #8]
 8001156:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800115a:	ed97 7a05 	vldr	s14, [r7, #20]
 800115e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001162:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001166:	edd7 6a01 	vldr	s13, [r7, #4]
 800116a:	edd7 7a02 	vldr	s15, [r7, #8]
 800116e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001172:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001176:	ed97 7a03 	vldr	s14, [r7, #12]
 800117a:	edd7 7a04 	vldr	s15, [r7, #16]
 800117e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001186:	edd7 7a02 	vldr	s15, [r7, #8]
 800118a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800118e:	eeb0 0a67 	vmov.f32	s0, s15
 8001192:	371c      	adds	r7, #28
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <potentiometer_value>:

//funkcja przetwarzająca wartość z potencjometru na kąt dla regulatora PID
float potentiometer_value(void) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
	float x = 0.0;
 80011a2:	f04f 0300 	mov.w	r3, #0
 80011a6:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 10; i++) {
 80011a8:	2300      	movs	r3, #0
 80011aa:	603b      	str	r3, [r7, #0]
 80011ac:	e024      	b.n	80011f8 <potentiometer_value+0x5c>
		HAL_ADC_Start(&hadc1);
 80011ae:	481c      	ldr	r0, [pc, #112]	; (8001220 <potentiometer_value+0x84>)
 80011b0:	f002 f9d4 	bl	800355c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100);
 80011b4:	2164      	movs	r1, #100	; 0x64
 80011b6:	481a      	ldr	r0, [pc, #104]	; (8001220 <potentiometer_value+0x84>)
 80011b8:	f002 fa84 	bl	80036c4 <HAL_ADC_PollForConversion>
		x += mapfloat(HAL_ADC_GetValue(&hadc1), 0, 1023, -5, 5);
 80011bc:	4818      	ldr	r0, [pc, #96]	; (8001220 <potentiometer_value+0x84>)
 80011be:	f002 fb0c 	bl	80037da <HAL_ADC_GetValue>
 80011c2:	ee07 0a90 	vmov	s15, r0
 80011c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011ca:	eeb1 2a04 	vmov.f32	s4, #20	; 0x40a00000  5.0
 80011ce:	eef9 1a04 	vmov.f32	s3, #148	; 0xc0a00000 -5.0
 80011d2:	ed9f 1a14 	vldr	s2, [pc, #80]	; 8001224 <potentiometer_value+0x88>
 80011d6:	eddf 0a14 	vldr	s1, [pc, #80]	; 8001228 <potentiometer_value+0x8c>
 80011da:	eeb0 0a67 	vmov.f32	s0, s15
 80011de:	f7ff ffaf 	bl	8001140 <mapfloat>
 80011e2:	eeb0 7a40 	vmov.f32	s14, s0
 80011e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80011ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011ee:	edc7 7a01 	vstr	s15, [r7, #4]
	for (int i = 0; i < 10; i++) {
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	3301      	adds	r3, #1
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	2b09      	cmp	r3, #9
 80011fc:	ddd7      	ble.n	80011ae <potentiometer_value+0x12>
	}
	x /= 10;
 80011fe:	ed97 7a01 	vldr	s14, [r7, #4]
 8001202:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001206:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800120a:	edc7 7a01 	vstr	s15, [r7, #4]
	return x;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	ee07 3a90 	vmov	s15, r3
}
 8001214:	eeb0 0a67 	vmov.f32	s0, s15
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000278 	.word	0x20000278
 8001224:	447fc000 	.word	0x447fc000
 8001228:	00000000 	.word	0x00000000

0800122c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <MX_DMA_Init+0x3c>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a0b      	ldr	r2, [pc, #44]	; (8001268 <MX_DMA_Init+0x3c>)
 800123c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b09      	ldr	r3, [pc, #36]	; (8001268 <MX_DMA_Init+0x3c>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800124e:	2200      	movs	r2, #0
 8001250:	2100      	movs	r1, #0
 8001252:	203a      	movs	r0, #58	; 0x3a
 8001254:	f002 fdc7 	bl	8003de6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001258:	203a      	movs	r0, #58	; 0x3a
 800125a:	f002 fde0 	bl	8003e1e <HAL_NVIC_EnableIRQ>

}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40023800 	.word	0x40023800

0800126c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08a      	sub	sp, #40	; 0x28
 8001270:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
 8001280:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	4b2e      	ldr	r3, [pc, #184]	; (8001340 <MX_GPIO_Init+0xd4>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a2d      	ldr	r2, [pc, #180]	; (8001340 <MX_GPIO_Init+0xd4>)
 800128c:	f043 0304 	orr.w	r3, r3, #4
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b2b      	ldr	r3, [pc, #172]	; (8001340 <MX_GPIO_Init+0xd4>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f003 0304 	and.w	r3, r3, #4
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	4b27      	ldr	r3, [pc, #156]	; (8001340 <MX_GPIO_Init+0xd4>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a26      	ldr	r2, [pc, #152]	; (8001340 <MX_GPIO_Init+0xd4>)
 80012a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b24      	ldr	r3, [pc, #144]	; (8001340 <MX_GPIO_Init+0xd4>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	4b20      	ldr	r3, [pc, #128]	; (8001340 <MX_GPIO_Init+0xd4>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a1f      	ldr	r2, [pc, #124]	; (8001340 <MX_GPIO_Init+0xd4>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b1d      	ldr	r3, [pc, #116]	; (8001340 <MX_GPIO_Init+0xd4>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	607b      	str	r3, [r7, #4]
 80012da:	4b19      	ldr	r3, [pc, #100]	; (8001340 <MX_GPIO_Init+0xd4>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a18      	ldr	r2, [pc, #96]	; (8001340 <MX_GPIO_Init+0xd4>)
 80012e0:	f043 0302 	orr.w	r3, r3, #2
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b16      	ldr	r3, [pc, #88]	; (8001340 <MX_GPIO_Init+0xd4>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80012f2:	2200      	movs	r2, #0
 80012f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012f8:	4812      	ldr	r0, [pc, #72]	; (8001344 <MX_GPIO_Init+0xd8>)
 80012fa:	f003 fb49 	bl	8004990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80012fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001302:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001304:	2301      	movs	r3, #1
 8001306:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130c:	2300      	movs	r3, #0
 800130e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	4619      	mov	r1, r3
 8001316:	480b      	ldr	r0, [pc, #44]	; (8001344 <MX_GPIO_Init+0xd8>)
 8001318:	f003 f99e 	bl	8004658 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LEG_Pin;
 800131c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001322:	2300      	movs	r3, #0
 8001324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001326:	2301      	movs	r3, #1
 8001328:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LEG_GPIO_Port, &GPIO_InitStruct);
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	4619      	mov	r1, r3
 8001330:	4805      	ldr	r0, [pc, #20]	; (8001348 <MX_GPIO_Init+0xdc>)
 8001332:	f003 f991 	bl	8004658 <HAL_GPIO_Init>

}
 8001336:	bf00      	nop
 8001338:	3728      	adds	r7, #40	; 0x28
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40023800 	.word	0x40023800
 8001344:	40020800 	.word	0x40020800
 8001348:	40020400 	.word	0x40020400

0800134c <Send>:
} SerialFeedback;
SerialFeedback Feedback;
SerialFeedback NewFeedback;

// ########################## SEND ##########################
void Send(int16_t uSteer, int16_t uSpeed) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	460a      	mov	r2, r1
 8001356:	80fb      	strh	r3, [r7, #6]
 8001358:	4613      	mov	r3, r2
 800135a:	80bb      	strh	r3, [r7, #4]
	// Create command
	Command.start = (uint16_t) START_FRAME;
 800135c:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <Send+0x58>)
 800135e:	f64a 32cd 	movw	r2, #43981	; 0xabcd
 8001362:	801a      	strh	r2, [r3, #0]
	Command.steer = (int16_t) uSteer;
 8001364:	4a0f      	ldr	r2, [pc, #60]	; (80013a4 <Send+0x58>)
 8001366:	88fb      	ldrh	r3, [r7, #6]
 8001368:	8053      	strh	r3, [r2, #2]
	Command.speed = (int16_t) uSpeed;
 800136a:	4a0e      	ldr	r2, [pc, #56]	; (80013a4 <Send+0x58>)
 800136c:	88bb      	ldrh	r3, [r7, #4]
 800136e:	8093      	strh	r3, [r2, #4]
	Command.checksum =
			(uint16_t) (Command.start ^ Command.steer ^ Command.speed);
 8001370:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <Send+0x58>)
 8001372:	881b      	ldrh	r3, [r3, #0]
 8001374:	b21a      	sxth	r2, r3
 8001376:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <Send+0x58>)
 8001378:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800137c:	4053      	eors	r3, r2
 800137e:	b21a      	sxth	r2, r3
 8001380:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <Send+0x58>)
 8001382:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001386:	4053      	eors	r3, r2
 8001388:	b21b      	sxth	r3, r3
 800138a:	b29a      	uxth	r2, r3
	Command.checksum =
 800138c:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <Send+0x58>)
 800138e:	80da      	strh	r2, [r3, #6]

	// Write to Serial
	//HoverSerial.write((uint8_t *) &Command, sizeof(Command));
	HAL_UART_Transmit(commUART, (uint8_t*) &Command, sizeof(Command), 100);
 8001390:	2364      	movs	r3, #100	; 0x64
 8001392:	2208      	movs	r2, #8
 8001394:	4903      	ldr	r1, [pc, #12]	; (80013a4 <Send+0x58>)
 8001396:	4804      	ldr	r0, [pc, #16]	; (80013a8 <Send+0x5c>)
 8001398:	f005 fd9f 	bl	8006eda <HAL_UART_Transmit>
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	200002f0 	.word	0x200002f0
 80013a8:	200004dc 	.word	0x200004dc

080013ac <Receive>:

// ########################## RECEIVE ##########################
void Receive(uint8_t *byte) {
 80013ac:	b5b0      	push	{r4, r5, r7, lr}
 80013ae:	b08a      	sub	sp, #40	; 0x28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
	char buffer[30];

	if (data_available) {
 80013b4:	4bad      	ldr	r3, [pc, #692]	; (800166c <Receive+0x2c0>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d01b      	beq.n	80013f4 <Receive+0x48>
		incomingByte = *byte;             // Read the incoming byte
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	781a      	ldrb	r2, [r3, #0]
 80013c0:	4bab      	ldr	r3, [pc, #684]	; (8001670 <Receive+0x2c4>)
 80013c2:	701a      	strb	r2, [r3, #0]
		bufStartFrame = ((uint16_t) (incomingByte) << 8) | incomingBytePrev; // Construct the start frame
 80013c4:	4baa      	ldr	r3, [pc, #680]	; (8001670 <Receive+0x2c4>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	021b      	lsls	r3, r3, #8
 80013ca:	b21a      	sxth	r2, r3
 80013cc:	4ba9      	ldr	r3, [pc, #676]	; (8001674 <Receive+0x2c8>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	b21b      	sxth	r3, r3
 80013d2:	4313      	orrs	r3, r2
 80013d4:	b21b      	sxth	r3, r3
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	4ba7      	ldr	r3, [pc, #668]	; (8001678 <Receive+0x2cc>)
 80013da:	801a      	strh	r2, [r3, #0]
		incomingBytePrev = incomingByte;
 80013dc:	4ba4      	ldr	r3, [pc, #656]	; (8001670 <Receive+0x2c4>)
 80013de:	781a      	ldrb	r2, [r3, #0]
 80013e0:	4ba4      	ldr	r3, [pc, #656]	; (8001674 <Receive+0x2c8>)
 80013e2:	701a      	strb	r2, [r3, #0]
		data_available = 0;
 80013e4:	4ba1      	ldr	r3, [pc, #644]	; (800166c <Receive+0x2c0>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(commUART, byte, sizeof(*byte)); //ponowne oczekiwanie na przerwanie
 80013ea:	2201      	movs	r2, #1
 80013ec:	6879      	ldr	r1, [r7, #4]
 80013ee:	48a3      	ldr	r0, [pc, #652]	; (800167c <Receive+0x2d0>)
 80013f0:	f005 fe05 	bl	8006ffe <HAL_UART_Receive_IT>
	HAL_UART_Transmit(debugUART, (uint8_t*) &bufStartFrame, sizeof(bufStartFrame),100);
        return;
    #endif

	// Copy received data
	if (bufStartFrame == START_FRAME) {	   // Initialize if new data is detected
 80013f4:	4ba0      	ldr	r3, [pc, #640]	; (8001678 <Receive+0x2cc>)
 80013f6:	881b      	ldrh	r3, [r3, #0]
 80013f8:	f64a 32cd 	movw	r2, #43981	; 0xabcd
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d116      	bne.n	800142e <Receive+0x82>
		p = (uint8_t*) &NewFeedback;
 8001400:	4b9f      	ldr	r3, [pc, #636]	; (8001680 <Receive+0x2d4>)
 8001402:	4aa0      	ldr	r2, [pc, #640]	; (8001684 <Receive+0x2d8>)
 8001404:	601a      	str	r2, [r3, #0]
		*p++ = incomingBytePrev;
 8001406:	4b9e      	ldr	r3, [pc, #632]	; (8001680 <Receive+0x2d4>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	1c5a      	adds	r2, r3, #1
 800140c:	499c      	ldr	r1, [pc, #624]	; (8001680 <Receive+0x2d4>)
 800140e:	600a      	str	r2, [r1, #0]
 8001410:	4a98      	ldr	r2, [pc, #608]	; (8001674 <Receive+0x2c8>)
 8001412:	7812      	ldrb	r2, [r2, #0]
 8001414:	701a      	strb	r2, [r3, #0]
		*p++ = incomingByte;
 8001416:	4b9a      	ldr	r3, [pc, #616]	; (8001680 <Receive+0x2d4>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	1c5a      	adds	r2, r3, #1
 800141c:	4998      	ldr	r1, [pc, #608]	; (8001680 <Receive+0x2d4>)
 800141e:	600a      	str	r2, [r1, #0]
 8001420:	4a93      	ldr	r2, [pc, #588]	; (8001670 <Receive+0x2c4>)
 8001422:	7812      	ldrb	r2, [r2, #0]
 8001424:	701a      	strb	r2, [r3, #0]
		idx = 2;
 8001426:	4b98      	ldr	r3, [pc, #608]	; (8001688 <Receive+0x2dc>)
 8001428:	2202      	movs	r2, #2
 800142a:	701a      	strb	r2, [r3, #0]
 800142c:	e015      	b.n	800145a <Receive+0xae>
	} else if (idx >= 2 && idx < sizeof(SerialFeedback)) { // Save the new received data
 800142e:	4b96      	ldr	r3, [pc, #600]	; (8001688 <Receive+0x2dc>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d911      	bls.n	800145a <Receive+0xae>
 8001436:	4b94      	ldr	r3, [pc, #592]	; (8001688 <Receive+0x2dc>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b11      	cmp	r3, #17
 800143c:	d80d      	bhi.n	800145a <Receive+0xae>
		*p++ = incomingByte;
 800143e:	4b90      	ldr	r3, [pc, #576]	; (8001680 <Receive+0x2d4>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	1c5a      	adds	r2, r3, #1
 8001444:	498e      	ldr	r1, [pc, #568]	; (8001680 <Receive+0x2d4>)
 8001446:	600a      	str	r2, [r1, #0]
 8001448:	4a89      	ldr	r2, [pc, #548]	; (8001670 <Receive+0x2c4>)
 800144a:	7812      	ldrb	r2, [r2, #0]
 800144c:	701a      	strb	r2, [r3, #0]
		idx++;
 800144e:	4b8e      	ldr	r3, [pc, #568]	; (8001688 <Receive+0x2dc>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	3301      	adds	r3, #1
 8001454:	b2da      	uxtb	r2, r3
 8001456:	4b8c      	ldr	r3, [pc, #560]	; (8001688 <Receive+0x2dc>)
 8001458:	701a      	strb	r2, [r3, #0]
	}

	// Check if we reached the end of the package
	if (idx == sizeof(SerialFeedback)) {
 800145a:	4b8b      	ldr	r3, [pc, #556]	; (8001688 <Receive+0x2dc>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b12      	cmp	r3, #18
 8001460:	f040 815d 	bne.w	800171e <Receive+0x372>
		uint16_t checksum;
		checksum = (uint16_t) (NewFeedback.start ^ NewFeedback.cmd1
 8001464:	4b87      	ldr	r3, [pc, #540]	; (8001684 <Receive+0x2d8>)
 8001466:	881b      	ldrh	r3, [r3, #0]
 8001468:	b21a      	sxth	r2, r3
 800146a:	4b86      	ldr	r3, [pc, #536]	; (8001684 <Receive+0x2d8>)
 800146c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001470:	4053      	eors	r3, r2
 8001472:	b21a      	sxth	r2, r3
				^ NewFeedback.cmd2 ^ NewFeedback.speedR_meas
 8001474:	4b83      	ldr	r3, [pc, #524]	; (8001684 <Receive+0x2d8>)
 8001476:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800147a:	4053      	eors	r3, r2
 800147c:	b21a      	sxth	r2, r3
 800147e:	4b81      	ldr	r3, [pc, #516]	; (8001684 <Receive+0x2d8>)
 8001480:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001484:	4053      	eors	r3, r2
 8001486:	b21a      	sxth	r2, r3
				^ NewFeedback.speedL_meas ^ NewFeedback.batVoltage
 8001488:	4b7e      	ldr	r3, [pc, #504]	; (8001684 <Receive+0x2d8>)
 800148a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800148e:	4053      	eors	r3, r2
 8001490:	b21a      	sxth	r2, r3
 8001492:	4b7c      	ldr	r3, [pc, #496]	; (8001684 <Receive+0x2d8>)
 8001494:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001498:	4053      	eors	r3, r2
 800149a:	b21a      	sxth	r2, r3
				^ NewFeedback.boardTemp ^ NewFeedback.cmdLed);
 800149c:	4b79      	ldr	r3, [pc, #484]	; (8001684 <Receive+0x2d8>)
 800149e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80014a2:	4053      	eors	r3, r2
 80014a4:	b21a      	sxth	r2, r3
 80014a6:	4b77      	ldr	r3, [pc, #476]	; (8001684 <Receive+0x2d8>)
 80014a8:	89db      	ldrh	r3, [r3, #14]
 80014aa:	b21b      	sxth	r3, r3
 80014ac:	4053      	eors	r3, r2
 80014ae:	b21b      	sxth	r3, r3
		checksum = (uint16_t) (NewFeedback.start ^ NewFeedback.cmd1
 80014b0:	84fb      	strh	r3, [r7, #38]	; 0x26

		// Check validity of the new data
		if (NewFeedback.start == START_FRAME
 80014b2:	4b74      	ldr	r3, [pc, #464]	; (8001684 <Receive+0x2d8>)
 80014b4:	881b      	ldrh	r3, [r3, #0]
 80014b6:	f64a 32cd 	movw	r2, #43981	; 0xabcd
 80014ba:	4293      	cmp	r3, r2
 80014bc:	f040 8106 	bne.w	80016cc <Receive+0x320>
				&& checksum == NewFeedback.checksum) {
 80014c0:	4b70      	ldr	r3, [pc, #448]	; (8001684 <Receive+0x2d8>)
 80014c2:	8a1b      	ldrh	r3, [r3, #16]
 80014c4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80014c6:	429a      	cmp	r2, r3
 80014c8:	f040 8100 	bne.w	80016cc <Receive+0x320>
			// Copy the new data
			memcpy(&Feedback, &NewFeedback, sizeof(SerialFeedback));
 80014cc:	4b6f      	ldr	r3, [pc, #444]	; (800168c <Receive+0x2e0>)
 80014ce:	4a6d      	ldr	r2, [pc, #436]	; (8001684 <Receive+0x2d8>)
 80014d0:	6815      	ldr	r5, [r2, #0]
 80014d2:	6854      	ldr	r4, [r2, #4]
 80014d4:	6890      	ldr	r0, [r2, #8]
 80014d6:	68d1      	ldr	r1, [r2, #12]
 80014d8:	601d      	str	r5, [r3, #0]
 80014da:	605c      	str	r4, [r3, #4]
 80014dc:	6098      	str	r0, [r3, #8]
 80014de:	60d9      	str	r1, [r3, #12]
 80014e0:	8a12      	ldrh	r2, [r2, #16]
 80014e2:	821a      	strh	r2, [r3, #16]

			// Print data to built-in Serial
			sprintf(buffer, "1: ");
 80014e4:	f107 0308 	add.w	r3, r7, #8
 80014e8:	4969      	ldr	r1, [pc, #420]	; (8001690 <Receive+0x2e4>)
 80014ea:	4618      	mov	r0, r3
 80014ec:	f007 fb00 	bl	8008af0 <siprintf>
			HAL_UART_Transmit(commUART, (uint8_t*) &buffer, strlen(buffer),
 80014f0:	f107 0308 	add.w	r3, r7, #8
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7fe fe73 	bl	80001e0 <strlen>
 80014fa:	4603      	mov	r3, r0
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	f107 0108 	add.w	r1, r7, #8
 8001502:	2364      	movs	r3, #100	; 0x64
 8001504:	485d      	ldr	r0, [pc, #372]	; (800167c <Receive+0x2d0>)
 8001506:	f005 fce8 	bl	8006eda <HAL_UART_Transmit>
					100);
			HAL_UART_Transmit(commUART, (uint8_t*) &Feedback.cmd1,
 800150a:	2364      	movs	r3, #100	; 0x64
 800150c:	2202      	movs	r2, #2
 800150e:	4961      	ldr	r1, [pc, #388]	; (8001694 <Receive+0x2e8>)
 8001510:	485a      	ldr	r0, [pc, #360]	; (800167c <Receive+0x2d0>)
 8001512:	f005 fce2 	bl	8006eda <HAL_UART_Transmit>
					sizeof(Feedback.cmd1), 100);
			sprintf(buffer, "2: ");
 8001516:	f107 0308 	add.w	r3, r7, #8
 800151a:	495f      	ldr	r1, [pc, #380]	; (8001698 <Receive+0x2ec>)
 800151c:	4618      	mov	r0, r3
 800151e:	f007 fae7 	bl	8008af0 <siprintf>
			HAL_UART_Transmit(commUART, (uint8_t*) &buffer, strlen(buffer),
 8001522:	f107 0308 	add.w	r3, r7, #8
 8001526:	4618      	mov	r0, r3
 8001528:	f7fe fe5a 	bl	80001e0 <strlen>
 800152c:	4603      	mov	r3, r0
 800152e:	b29a      	uxth	r2, r3
 8001530:	f107 0108 	add.w	r1, r7, #8
 8001534:	2364      	movs	r3, #100	; 0x64
 8001536:	4851      	ldr	r0, [pc, #324]	; (800167c <Receive+0x2d0>)
 8001538:	f005 fccf 	bl	8006eda <HAL_UART_Transmit>
					100);
			HAL_UART_Transmit(commUART, (uint8_t*) &Feedback.cmd2,
 800153c:	2364      	movs	r3, #100	; 0x64
 800153e:	2202      	movs	r2, #2
 8001540:	4956      	ldr	r1, [pc, #344]	; (800169c <Receive+0x2f0>)
 8001542:	484e      	ldr	r0, [pc, #312]	; (800167c <Receive+0x2d0>)
 8001544:	f005 fcc9 	bl	8006eda <HAL_UART_Transmit>
					sizeof(Feedback.cmd2), 100);
			sprintf(buffer, "3: ");
 8001548:	f107 0308 	add.w	r3, r7, #8
 800154c:	4954      	ldr	r1, [pc, #336]	; (80016a0 <Receive+0x2f4>)
 800154e:	4618      	mov	r0, r3
 8001550:	f007 face 	bl	8008af0 <siprintf>
			HAL_UART_Transmit(commUART, (uint8_t*) &buffer, strlen(buffer),
 8001554:	f107 0308 	add.w	r3, r7, #8
 8001558:	4618      	mov	r0, r3
 800155a:	f7fe fe41 	bl	80001e0 <strlen>
 800155e:	4603      	mov	r3, r0
 8001560:	b29a      	uxth	r2, r3
 8001562:	f107 0108 	add.w	r1, r7, #8
 8001566:	2364      	movs	r3, #100	; 0x64
 8001568:	4844      	ldr	r0, [pc, #272]	; (800167c <Receive+0x2d0>)
 800156a:	f005 fcb6 	bl	8006eda <HAL_UART_Transmit>
					100);
			HAL_UART_Transmit(commUART, (uint8_t*) &Feedback.speedR_meas,
 800156e:	2364      	movs	r3, #100	; 0x64
 8001570:	2202      	movs	r2, #2
 8001572:	494c      	ldr	r1, [pc, #304]	; (80016a4 <Receive+0x2f8>)
 8001574:	4841      	ldr	r0, [pc, #260]	; (800167c <Receive+0x2d0>)
 8001576:	f005 fcb0 	bl	8006eda <HAL_UART_Transmit>
					sizeof(Feedback.speedR_meas), 100);
			sprintf(buffer, "4: ");
 800157a:	f107 0308 	add.w	r3, r7, #8
 800157e:	494a      	ldr	r1, [pc, #296]	; (80016a8 <Receive+0x2fc>)
 8001580:	4618      	mov	r0, r3
 8001582:	f007 fab5 	bl	8008af0 <siprintf>
			HAL_UART_Transmit(commUART, (uint8_t*) &buffer, strlen(buffer),
 8001586:	f107 0308 	add.w	r3, r7, #8
 800158a:	4618      	mov	r0, r3
 800158c:	f7fe fe28 	bl	80001e0 <strlen>
 8001590:	4603      	mov	r3, r0
 8001592:	b29a      	uxth	r2, r3
 8001594:	f107 0108 	add.w	r1, r7, #8
 8001598:	2364      	movs	r3, #100	; 0x64
 800159a:	4838      	ldr	r0, [pc, #224]	; (800167c <Receive+0x2d0>)
 800159c:	f005 fc9d 	bl	8006eda <HAL_UART_Transmit>
					100);
			HAL_UART_Transmit(commUART, (uint8_t*) &Feedback.speedL_meas,
 80015a0:	2364      	movs	r3, #100	; 0x64
 80015a2:	2202      	movs	r2, #2
 80015a4:	4941      	ldr	r1, [pc, #260]	; (80016ac <Receive+0x300>)
 80015a6:	4835      	ldr	r0, [pc, #212]	; (800167c <Receive+0x2d0>)
 80015a8:	f005 fc97 	bl	8006eda <HAL_UART_Transmit>
					sizeof(Feedback.speedL_meas), 100);
			sprintf(buffer, "5: ");
 80015ac:	f107 0308 	add.w	r3, r7, #8
 80015b0:	493f      	ldr	r1, [pc, #252]	; (80016b0 <Receive+0x304>)
 80015b2:	4618      	mov	r0, r3
 80015b4:	f007 fa9c 	bl	8008af0 <siprintf>
			HAL_UART_Transmit(commUART, (uint8_t*) &buffer, strlen(buffer),
 80015b8:	f107 0308 	add.w	r3, r7, #8
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe fe0f 	bl	80001e0 <strlen>
 80015c2:	4603      	mov	r3, r0
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	f107 0108 	add.w	r1, r7, #8
 80015ca:	2364      	movs	r3, #100	; 0x64
 80015cc:	482b      	ldr	r0, [pc, #172]	; (800167c <Receive+0x2d0>)
 80015ce:	f005 fc84 	bl	8006eda <HAL_UART_Transmit>
					100);
			HAL_UART_Transmit(commUART, (uint8_t*) &Feedback.batVoltage,
 80015d2:	2364      	movs	r3, #100	; 0x64
 80015d4:	2202      	movs	r2, #2
 80015d6:	4937      	ldr	r1, [pc, #220]	; (80016b4 <Receive+0x308>)
 80015d8:	4828      	ldr	r0, [pc, #160]	; (800167c <Receive+0x2d0>)
 80015da:	f005 fc7e 	bl	8006eda <HAL_UART_Transmit>
					sizeof(Feedback.batVoltage), 100);
			sprintf(buffer, "6: ");
 80015de:	f107 0308 	add.w	r3, r7, #8
 80015e2:	4935      	ldr	r1, [pc, #212]	; (80016b8 <Receive+0x30c>)
 80015e4:	4618      	mov	r0, r3
 80015e6:	f007 fa83 	bl	8008af0 <siprintf>
			HAL_UART_Transmit(commUART, (uint8_t*) &buffer, strlen(buffer),
 80015ea:	f107 0308 	add.w	r3, r7, #8
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7fe fdf6 	bl	80001e0 <strlen>
 80015f4:	4603      	mov	r3, r0
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	f107 0108 	add.w	r1, r7, #8
 80015fc:	2364      	movs	r3, #100	; 0x64
 80015fe:	481f      	ldr	r0, [pc, #124]	; (800167c <Receive+0x2d0>)
 8001600:	f005 fc6b 	bl	8006eda <HAL_UART_Transmit>
					100);
			HAL_UART_Transmit(commUART, (uint8_t*) &Feedback.boardTemp,
 8001604:	2364      	movs	r3, #100	; 0x64
 8001606:	2202      	movs	r2, #2
 8001608:	492c      	ldr	r1, [pc, #176]	; (80016bc <Receive+0x310>)
 800160a:	481c      	ldr	r0, [pc, #112]	; (800167c <Receive+0x2d0>)
 800160c:	f005 fc65 	bl	8006eda <HAL_UART_Transmit>
					sizeof(Feedback.boardTemp), 100);
			sprintf(buffer, "7: ");
 8001610:	f107 0308 	add.w	r3, r7, #8
 8001614:	492a      	ldr	r1, [pc, #168]	; (80016c0 <Receive+0x314>)
 8001616:	4618      	mov	r0, r3
 8001618:	f007 fa6a 	bl	8008af0 <siprintf>
			HAL_UART_Transmit(commUART, (uint8_t*) &buffer, strlen(buffer),
 800161c:	f107 0308 	add.w	r3, r7, #8
 8001620:	4618      	mov	r0, r3
 8001622:	f7fe fddd 	bl	80001e0 <strlen>
 8001626:	4603      	mov	r3, r0
 8001628:	b29a      	uxth	r2, r3
 800162a:	f107 0108 	add.w	r1, r7, #8
 800162e:	2364      	movs	r3, #100	; 0x64
 8001630:	4812      	ldr	r0, [pc, #72]	; (800167c <Receive+0x2d0>)
 8001632:	f005 fc52 	bl	8006eda <HAL_UART_Transmit>
					100);
			HAL_UART_Transmit(commUART, (uint8_t*) &Feedback.cmdLed,
 8001636:	2364      	movs	r3, #100	; 0x64
 8001638:	2202      	movs	r2, #2
 800163a:	4922      	ldr	r1, [pc, #136]	; (80016c4 <Receive+0x318>)
 800163c:	480f      	ldr	r0, [pc, #60]	; (800167c <Receive+0x2d0>)
 800163e:	f005 fc4c 	bl	8006eda <HAL_UART_Transmit>
					sizeof(Feedback.cmdLed), 100);
			sprintf(buffer, "\n\r");
 8001642:	f107 0308 	add.w	r3, r7, #8
 8001646:	4920      	ldr	r1, [pc, #128]	; (80016c8 <Receive+0x31c>)
 8001648:	4618      	mov	r0, r3
 800164a:	f007 fa51 	bl	8008af0 <siprintf>
			HAL_UART_Transmit(commUART, (uint8_t*) &buffer, strlen(buffer),
 800164e:	f107 0308 	add.w	r3, r7, #8
 8001652:	4618      	mov	r0, r3
 8001654:	f7fe fdc4 	bl	80001e0 <strlen>
 8001658:	4603      	mov	r3, r0
 800165a:	b29a      	uxth	r2, r3
 800165c:	f107 0108 	add.w	r1, r7, #8
 8001660:	2364      	movs	r3, #100	; 0x64
 8001662:	4806      	ldr	r0, [pc, #24]	; (800167c <Receive+0x2d0>)
 8001664:	f005 fc39 	bl	8006eda <HAL_UART_Transmit>
 8001668:	e056      	b.n	8001718 <Receive+0x36c>
 800166a:	bf00      	nop
 800166c:	200002d8 	.word	0x200002d8
 8001670:	200001f9 	.word	0x200001f9
 8001674:	200001fa 	.word	0x200001fa
 8001678:	200002d6 	.word	0x200002d6
 800167c:	200004dc 	.word	0x200004dc
 8001680:	200002c0 	.word	0x200002c0
 8001684:	200002c4 	.word	0x200002c4
 8001688:	200001f8 	.word	0x200001f8
 800168c:	200002dc 	.word	0x200002dc
 8001690:	0800b450 	.word	0x0800b450
 8001694:	200002de 	.word	0x200002de
 8001698:	0800b454 	.word	0x0800b454
 800169c:	200002e0 	.word	0x200002e0
 80016a0:	0800b458 	.word	0x0800b458
 80016a4:	200002e2 	.word	0x200002e2
 80016a8:	0800b45c 	.word	0x0800b45c
 80016ac:	200002e4 	.word	0x200002e4
 80016b0:	0800b460 	.word	0x0800b460
 80016b4:	200002e6 	.word	0x200002e6
 80016b8:	0800b464 	.word	0x0800b464
 80016bc:	200002e8 	.word	0x200002e8
 80016c0:	0800b468 	.word	0x0800b468
 80016c4:	200002ea 	.word	0x200002ea
 80016c8:	0800b46c 	.word	0x0800b46c
					100);

		} else {

			sprintf(buffer, "Non-valid data skipped");
 80016cc:	f107 0308 	add.w	r3, r7, #8
 80016d0:	4917      	ldr	r1, [pc, #92]	; (8001730 <Receive+0x384>)
 80016d2:	4618      	mov	r0, r3
 80016d4:	f007 fa0c 	bl	8008af0 <siprintf>
			HAL_UART_Transmit(commUART, (uint8_t*) &buffer, strlen(buffer),
 80016d8:	f107 0308 	add.w	r3, r7, #8
 80016dc:	4618      	mov	r0, r3
 80016de:	f7fe fd7f 	bl	80001e0 <strlen>
 80016e2:	4603      	mov	r3, r0
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	f107 0108 	add.w	r1, r7, #8
 80016ea:	2364      	movs	r3, #100	; 0x64
 80016ec:	4811      	ldr	r0, [pc, #68]	; (8001734 <Receive+0x388>)
 80016ee:	f005 fbf4 	bl	8006eda <HAL_UART_Transmit>
					100);
			sprintf(buffer, "\n\r");
 80016f2:	f107 0308 	add.w	r3, r7, #8
 80016f6:	4910      	ldr	r1, [pc, #64]	; (8001738 <Receive+0x38c>)
 80016f8:	4618      	mov	r0, r3
 80016fa:	f007 f9f9 	bl	8008af0 <siprintf>
			HAL_UART_Transmit(commUART, (uint8_t*) &buffer, strlen(buffer),
 80016fe:	f107 0308 	add.w	r3, r7, #8
 8001702:	4618      	mov	r0, r3
 8001704:	f7fe fd6c 	bl	80001e0 <strlen>
 8001708:	4603      	mov	r3, r0
 800170a:	b29a      	uxth	r2, r3
 800170c:	f107 0108 	add.w	r1, r7, #8
 8001710:	2364      	movs	r3, #100	; 0x64
 8001712:	4808      	ldr	r0, [pc, #32]	; (8001734 <Receive+0x388>)
 8001714:	f005 fbe1 	bl	8006eda <HAL_UART_Transmit>
					100);

		}
		idx = 0; // Reset the index (it prevents to enter in this if condition in the next cycle)
 8001718:	4b08      	ldr	r3, [pc, #32]	; (800173c <Receive+0x390>)
 800171a:	2200      	movs	r2, #0
 800171c:	701a      	strb	r2, [r3, #0]
	}

	// Update previous states
	incomingBytePrev = incomingByte;
 800171e:	4b08      	ldr	r3, [pc, #32]	; (8001740 <Receive+0x394>)
 8001720:	781a      	ldrb	r2, [r3, #0]
 8001722:	4b08      	ldr	r3, [pc, #32]	; (8001744 <Receive+0x398>)
 8001724:	701a      	strb	r2, [r3, #0]
}
 8001726:	bf00      	nop
 8001728:	3728      	adds	r7, #40	; 0x28
 800172a:	46bd      	mov	sp, r7
 800172c:	bdb0      	pop	{r4, r5, r7, pc}
 800172e:	bf00      	nop
 8001730:	0800b470 	.word	0x0800b470
 8001734:	200004dc 	.word	0x200004dc
 8001738:	0800b46c 	.word	0x0800b46c
 800173c:	200001f8 	.word	0x200001f8
 8001740:	200001f9 	.word	0x200001f9
 8001744:	200001fa 	.word	0x200001fa

08001748 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800174c:	4b12      	ldr	r3, [pc, #72]	; (8001798 <MX_I2C1_Init+0x50>)
 800174e:	4a13      	ldr	r2, [pc, #76]	; (800179c <MX_I2C1_Init+0x54>)
 8001750:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001752:	4b11      	ldr	r3, [pc, #68]	; (8001798 <MX_I2C1_Init+0x50>)
 8001754:	4a12      	ldr	r2, [pc, #72]	; (80017a0 <MX_I2C1_Init+0x58>)
 8001756:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001758:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <MX_I2C1_Init+0x50>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800175e:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <MX_I2C1_Init+0x50>)
 8001760:	2200      	movs	r2, #0
 8001762:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <MX_I2C1_Init+0x50>)
 8001766:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800176a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800176c:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <MX_I2C1_Init+0x50>)
 800176e:	2200      	movs	r2, #0
 8001770:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001772:	4b09      	ldr	r3, [pc, #36]	; (8001798 <MX_I2C1_Init+0x50>)
 8001774:	2200      	movs	r2, #0
 8001776:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001778:	4b07      	ldr	r3, [pc, #28]	; (8001798 <MX_I2C1_Init+0x50>)
 800177a:	2200      	movs	r2, #0
 800177c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800177e:	4b06      	ldr	r3, [pc, #24]	; (8001798 <MX_I2C1_Init+0x50>)
 8001780:	2200      	movs	r2, #0
 8001782:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001784:	4804      	ldr	r0, [pc, #16]	; (8001798 <MX_I2C1_Init+0x50>)
 8001786:	f003 f937 	bl	80049f8 <HAL_I2C_Init>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001790:	f000 fb82 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}
 8001798:	200002f8 	.word	0x200002f8
 800179c:	40005400 	.word	0x40005400
 80017a0:	00061a80 	.word	0x00061a80

080017a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08a      	sub	sp, #40	; 0x28
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a19      	ldr	r2, [pc, #100]	; (8001828 <HAL_I2C_MspInit+0x84>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d12b      	bne.n	800181e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	4b18      	ldr	r3, [pc, #96]	; (800182c <HAL_I2C_MspInit+0x88>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a17      	ldr	r2, [pc, #92]	; (800182c <HAL_I2C_MspInit+0x88>)
 80017d0:	f043 0302 	orr.w	r3, r3, #2
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <HAL_I2C_MspInit+0x88>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017e2:	23c0      	movs	r3, #192	; 0xc0
 80017e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017e6:	2312      	movs	r3, #18
 80017e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ee:	2303      	movs	r3, #3
 80017f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017f2:	2304      	movs	r3, #4
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	4619      	mov	r1, r3
 80017fc:	480c      	ldr	r0, [pc, #48]	; (8001830 <HAL_I2C_MspInit+0x8c>)
 80017fe:	f002 ff2b 	bl	8004658 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	4b09      	ldr	r3, [pc, #36]	; (800182c <HAL_I2C_MspInit+0x88>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	4a08      	ldr	r2, [pc, #32]	; (800182c <HAL_I2C_MspInit+0x88>)
 800180c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001810:	6413      	str	r3, [r2, #64]	; 0x40
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <HAL_I2C_MspInit+0x88>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800181e:	bf00      	nop
 8001820:	3728      	adds	r7, #40	; 0x28
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40005400 	.word	0x40005400
 800182c:	40023800 	.word	0x40023800
 8001830:	40020400 	.word	0x40020400

08001834 <ibus_init>:
/* Static variable */
static uint8_t uart_rx_buffer[IBUS_LENGTH] = { 0 };
static uint8_t fail_safe_flag = 0;

/* Main Functions */
void ibus_init() {
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(IBUS_UART, uart_rx_buffer, 32);
 8001838:	2220      	movs	r2, #32
 800183a:	4903      	ldr	r1, [pc, #12]	; (8001848 <ibus_init+0x14>)
 800183c:	4803      	ldr	r0, [pc, #12]	; (800184c <ibus_init+0x18>)
 800183e:	f005 fc0e 	bl	800705e <HAL_UART_Receive_DMA>
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	200001fc 	.word	0x200001fc
 800184c:	20000498 	.word	0x20000498

08001850 <ibus_read>:

bool ibus_read(uint16_t *ibus_data) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	if (!ibus_is_valid())
 8001858:	f000 f81a 	bl	8001890 <ibus_is_valid>
 800185c:	4603      	mov	r3, r0
 800185e:	f083 0301 	eor.w	r3, r3, #1
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <ibus_read+0x1c>
		return false;
 8001868:	2300      	movs	r3, #0
 800186a:	e00d      	b.n	8001888 <ibus_read+0x38>

	if (!ibus_checksum())
 800186c:	f000 f828 	bl	80018c0 <ibus_checksum>
 8001870:	4603      	mov	r3, r0
 8001872:	f083 0301 	eor.w	r3, r3, #1
 8001876:	b2db      	uxtb	r3, r3
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <ibus_read+0x30>
		return false;
 800187c:	2300      	movs	r3, #0
 800187e:	e003      	b.n	8001888 <ibus_read+0x38>

	ibus_update(ibus_data);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f000 f84d 	bl	8001920 <ibus_update>
	return true;
 8001886:	2301      	movs	r3, #1
}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <ibus_is_valid>:

/* Sub Functions */
bool ibus_is_valid() {
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
	// is it ibus?
	return (uart_rx_buffer[0] == IBUS_LENGTH
 8001894:	4b09      	ldr	r3, [pc, #36]	; (80018bc <ibus_is_valid+0x2c>)
 8001896:	781b      	ldrb	r3, [r3, #0]
			&& uart_rx_buffer[1] == IBUS_COMMAND40);
 8001898:	2b20      	cmp	r3, #32
 800189a:	d105      	bne.n	80018a8 <ibus_is_valid+0x18>
 800189c:	4b07      	ldr	r3, [pc, #28]	; (80018bc <ibus_is_valid+0x2c>)
 800189e:	785b      	ldrb	r3, [r3, #1]
 80018a0:	2b40      	cmp	r3, #64	; 0x40
 80018a2:	d101      	bne.n	80018a8 <ibus_is_valid+0x18>
 80018a4:	2301      	movs	r3, #1
 80018a6:	e000      	b.n	80018aa <ibus_is_valid+0x1a>
 80018a8:	2300      	movs	r3, #0
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	b2db      	uxtb	r3, r3
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	200001fc 	.word	0x200001fc

080018c0 <ibus_checksum>:

bool ibus_checksum() {
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
	uint16_t checksum_cal = 0xffff;
 80018c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018ca:	81fb      	strh	r3, [r7, #14]
	uint16_t checksum_ibus;

	for (int i = 0; i < 30; i++) {
 80018cc:	2300      	movs	r3, #0
 80018ce:	60bb      	str	r3, [r7, #8]
 80018d0:	e00a      	b.n	80018e8 <ibus_checksum+0x28>
		checksum_cal -= uart_rx_buffer[i];
 80018d2:	4a12      	ldr	r2, [pc, #72]	; (800191c <ibus_checksum+0x5c>)
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	4413      	add	r3, r2
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	b29b      	uxth	r3, r3
 80018dc:	89fa      	ldrh	r2, [r7, #14]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < 30; i++) {
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	3301      	adds	r3, #1
 80018e6:	60bb      	str	r3, [r7, #8]
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	2b1d      	cmp	r3, #29
 80018ec:	ddf1      	ble.n	80018d2 <ibus_checksum+0x12>
	}

	checksum_ibus = uart_rx_buffer[31] << 8 | uart_rx_buffer[30]; // checksum value from ibus
 80018ee:	4b0b      	ldr	r3, [pc, #44]	; (800191c <ibus_checksum+0x5c>)
 80018f0:	7fdb      	ldrb	r3, [r3, #31]
 80018f2:	021b      	lsls	r3, r3, #8
 80018f4:	b21a      	sxth	r2, r3
 80018f6:	4b09      	ldr	r3, [pc, #36]	; (800191c <ibus_checksum+0x5c>)
 80018f8:	7f9b      	ldrb	r3, [r3, #30]
 80018fa:	b21b      	sxth	r3, r3
 80018fc:	4313      	orrs	r3, r2
 80018fe:	b21b      	sxth	r3, r3
 8001900:	80fb      	strh	r3, [r7, #6]
	return (checksum_ibus == checksum_cal);
 8001902:	88fa      	ldrh	r2, [r7, #6]
 8001904:	89fb      	ldrh	r3, [r7, #14]
 8001906:	429a      	cmp	r2, r3
 8001908:	bf0c      	ite	eq
 800190a:	2301      	moveq	r3, #1
 800190c:	2300      	movne	r3, #0
 800190e:	b2db      	uxtb	r3, r3
}
 8001910:	4618      	mov	r0, r3
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	200001fc 	.word	0x200001fc

08001920 <ibus_update>:

void ibus_update(uint16_t *ibus_data) {
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
	for (int ch_index = 0, bf_index = 2; ch_index < IBUS_USER_CHANNELS;
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	2302      	movs	r3, #2
 800192e:	60bb      	str	r3, [r7, #8]
 8001930:	e018      	b.n	8001964 <ibus_update+0x44>
			ch_index++, bf_index += 2) {
		ibus_data[ch_index] = uart_rx_buffer[bf_index + 1] << 8
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	3301      	adds	r3, #1
 8001936:	4a10      	ldr	r2, [pc, #64]	; (8001978 <ibus_update+0x58>)
 8001938:	5cd3      	ldrb	r3, [r2, r3]
 800193a:	021b      	lsls	r3, r3, #8
				| uart_rx_buffer[bf_index];
 800193c:	b21a      	sxth	r2, r3
 800193e:	490e      	ldr	r1, [pc, #56]	; (8001978 <ibus_update+0x58>)
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	440b      	add	r3, r1
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	b21b      	sxth	r3, r3
 8001948:	4313      	orrs	r3, r2
 800194a:	b219      	sxth	r1, r3
		ibus_data[ch_index] = uart_rx_buffer[bf_index + 1] << 8
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	4413      	add	r3, r2
				| uart_rx_buffer[bf_index];
 8001954:	b28a      	uxth	r2, r1
		ibus_data[ch_index] = uart_rx_buffer[bf_index + 1] << 8
 8001956:	801a      	strh	r2, [r3, #0]
			ch_index++, bf_index += 2) {
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	3301      	adds	r3, #1
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	3302      	adds	r3, #2
 8001962:	60bb      	str	r3, [r7, #8]
	for (int ch_index = 0, bf_index = 2; ch_index < IBUS_USER_CHANNELS;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2b09      	cmp	r3, #9
 8001968:	dde3      	ble.n	8001932 <ibus_update+0x12>
	}
}
 800196a:	bf00      	nop
 800196c:	bf00      	nop
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	200001fc 	.word	0x200001fc

0800197c <ibus_soft_failsafe>:

/**
 * @note FS-A8S don't have fail safe feature, So make software fail-safe.
 */
void ibus_soft_failsafe(uint16_t *ibus_data, uint8_t fail_safe_max) {
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	460b      	mov	r3, r1
 8001986:	70fb      	strb	r3, [r7, #3]
	fail_safe_flag++;
 8001988:	4b18      	ldr	r3, [pc, #96]	; (80019ec <ibus_soft_failsafe+0x70>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	3301      	adds	r3, #1
 800198e:	b2da      	uxtb	r2, r3
 8001990:	4b16      	ldr	r3, [pc, #88]	; (80019ec <ibus_soft_failsafe+0x70>)
 8001992:	701a      	strb	r2, [r3, #0]

	if (fail_safe_max > fail_safe_flag)
 8001994:	4b15      	ldr	r3, [pc, #84]	; (80019ec <ibus_soft_failsafe+0x70>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	78fa      	ldrb	r2, [r7, #3]
 800199a:	429a      	cmp	r2, r3
 800199c:	d820      	bhi.n	80019e0 <ibus_soft_failsafe+0x64>
		return;

	// Clear ibus data
	for (int i = 0; i < IBUS_USER_CHANNELS; i++)
 800199e:	2300      	movs	r3, #0
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	e008      	b.n	80019b6 <ibus_soft_failsafe+0x3a>
		ibus_data[i] = 0;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	4413      	add	r3, r2
 80019ac:	2200      	movs	r2, #0
 80019ae:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < IBUS_USER_CHANNELS; i++)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	3301      	adds	r3, #1
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2b09      	cmp	r3, #9
 80019ba:	ddf3      	ble.n	80019a4 <ibus_soft_failsafe+0x28>

	// Clear ibus buffer
	for (int j = 0; j < IBUS_LENGTH; j++)
 80019bc:	2300      	movs	r3, #0
 80019be:	60bb      	str	r3, [r7, #8]
 80019c0:	e007      	b.n	80019d2 <ibus_soft_failsafe+0x56>
		uart_rx_buffer[j] = 0;
 80019c2:	4a0b      	ldr	r2, [pc, #44]	; (80019f0 <ibus_soft_failsafe+0x74>)
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	4413      	add	r3, r2
 80019c8:	2200      	movs	r2, #0
 80019ca:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < IBUS_LENGTH; j++)
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	3301      	adds	r3, #1
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	2b1f      	cmp	r3, #31
 80019d6:	ddf4      	ble.n	80019c2 <ibus_soft_failsafe+0x46>

	fail_safe_flag = 0;
 80019d8:	4b04      	ldr	r3, [pc, #16]	; (80019ec <ibus_soft_failsafe+0x70>)
 80019da:	2200      	movs	r2, #0
 80019dc:	701a      	strb	r2, [r3, #0]
	return;
 80019de:	e000      	b.n	80019e2 <ibus_soft_failsafe+0x66>
		return;
 80019e0:	bf00      	nop
}
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	2000021c 	.word	0x2000021c
 80019f0:	200001fc 	.word	0x200001fc

080019f4 <ibus_reset_failsafe>:

/**
 * @note This function is located in HAL_UART_RxCpltCallback.
 */
void ibus_reset_failsafe() {
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
	fail_safe_flag = 0; // flag reset
 80019f8:	4b03      	ldr	r3, [pc, #12]	; (8001a08 <ibus_reset_failsafe+0x14>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	701a      	strb	r2, [r3, #0]
}
 80019fe:	bf00      	nop
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	2000021c 	.word	0x2000021c
 8001a0c:	00000000 	.word	0x00000000

08001a10 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001a10:	b5b0      	push	{r4, r5, r7, lr}
 8001a12:	b08e      	sub	sp, #56	; 0x38
 8001a14:	af00      	add	r7, sp, #0
	// przyklad do wysylania danych po serialu
	// sprintf(buffer, "cos tam: %3.2f\n\r", jakis_float);
	// HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 100);
	uint8_t byte;

	_Bool mpu6050_ready = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint16_t ibus_data[IBUS_USER_CHANNELS];
	uint32_t loop_timer = 0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	637b      	str	r3, [r7, #52]	; 0x34
	float time = 0;
 8001a20:	f04f 0300 	mov.w	r3, #0
 8001a24:	633b      	str	r3, [r7, #48]	; 0x30
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001a26:	f001 fcbf 	bl	80033a8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001a2a:	f000 f9bb 	bl	8001da4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001a2e:	f7ff fc1d 	bl	800126c <MX_GPIO_Init>
	MX_I2C1_Init();
 8001a32:	f7ff fe89 	bl	8001748 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8001a36:	f001 fb21 	bl	800307c <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8001a3a:	f001 fb49 	bl	80030d0 <MX_USART2_UART_Init>
	MX_DMA_Init();
 8001a3e:	f7ff fbf5 	bl	800122c <MX_DMA_Init>
	MX_USART6_UART_Init();
 8001a42:	f001 fb6f 	bl	8003124 <MX_USART6_UART_Init>
	MX_ADC1_Init();
 8001a46:	f7ff fa83 	bl	8000f50 <MX_ADC1_Init>
	MX_TIM3_Init();
 8001a4a:	f001 f9af 	bl	8002dac <MX_TIM3_Init>
	MX_TIM11_Init();
 8001a4e:	f001 fa2d 	bl	8002eac <MX_TIM11_Init>
	/* USER CODE BEGIN 2 */
	HAL_Delay(2000);
 8001a52:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a56:	f001 fd19 	bl	800348c <HAL_Delay>
	mpu6050_ready = MPU6050_Init();
 8001a5a:	f000 fa23 	bl	8001ea4 <MPU6050_Init>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	HAL_Delay(10);
 8001a64:	200a      	movs	r0, #10
 8001a66:	f001 fd11 	bl	800348c <HAL_Delay>

	ibus_init();
 8001a6a:	f7ff fee3 	bl	8001834 <ibus_init>
	ibus_read(ibus_data);
 8001a6e:	1d3b      	adds	r3, r7, #4
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff feed 	bl	8001850 <ibus_read>

	HAL_UART_Receive_IT(commUART, &byte, sizeof(byte)); //oczekiwanie na przerwanie
 8001a76:	f107 031b 	add.w	r3, r7, #27
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4892      	ldr	r0, [pc, #584]	; (8001cc8 <main+0x2b8>)
 8001a80:	f005 fabd 	bl	8006ffe <HAL_UART_Receive_IT>

	HAL_TIM_PWM_Start(motorTIM, TIM_CHANNEL_1);
 8001a84:	2100      	movs	r1, #0
 8001a86:	4891      	ldr	r0, [pc, #580]	; (8001ccc <main+0x2bc>)
 8001a88:	f004 fc66 	bl	8006358 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(motorTIM, TIM_CHANNEL_2);
 8001a8c:	2104      	movs	r1, #4
 8001a8e:	488f      	ldr	r0, [pc, #572]	; (8001ccc <main+0x2bc>)
 8001a90:	f004 fc62 	bl	8006358 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8001a94:	2100      	movs	r1, #0
 8001a96:	488e      	ldr	r0, [pc, #568]	; (8001cd0 <main+0x2c0>)
 8001a98:	f004 fc5e 	bl	8006358 <HAL_TIM_PWM_Start>
//	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, 1100);
	uint16_t switch_vibrations_counter = 0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint32_t fall_counter = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	62bb      	str	r3, [r7, #40]	; 0x28
	loop_timer = getCurrentMicros();
 8001aa4:	f7ff fafe 	bl	80010a4 <getCurrentMicros>
 8001aa8:	6378      	str	r0, [r7, #52]	; 0x34

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {
		if (mpu6050_ready) { //jeśli mpu6050 nie jest gotowe to cały program nie wystartuje i należy zrestartować kontroler/rozwiązać problemy z magistralą I2C
 8001aaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0fb      	beq.n	8001aaa <main+0x9a>

			// pochodzi z hoverserial.ino
			Receive(&byte);
 8001ab2:	f107 031b 	add.w	r3, r7, #27
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff fc78 	bl	80013ac <Receive>

			ibus_read(ibus_data);
 8001abc:	1d3b      	adds	r3, r7, #4
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff fec6 	bl	8001850 <ibus_read>
			ibus_soft_failsafe(ibus_data, 10); // if ibus is not updated, clear ibus data - pochodzi z biblioteki ibus
 8001ac4:	1d3b      	adds	r3, r7, #4
 8001ac6:	210a      	movs	r1, #10
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff ff57 	bl	800197c <ibus_soft_failsafe>

			balancing_switch = ibus_data[8 - 1];
 8001ace:	8a7a      	ldrh	r2, [r7, #18]
 8001ad0:	4b80      	ldr	r3, [pc, #512]	; (8001cd4 <main+0x2c4>)
 8001ad2:	801a      	strh	r2, [r3, #0]
			uint16_t Relay_SW = ibus_data[6 - 1];	//zalacz silniki
 8001ad4:	89fb      	ldrh	r3, [r7, #14]
 8001ad6:	84bb      	strh	r3, [r7, #36]	; 0x24

			silnik = ibus_data[4 - 1];
 8001ad8:	897b      	ldrh	r3, [r7, #10]
 8001ada:	b21a      	sxth	r2, r3
 8001adc:	4b7e      	ldr	r3, [pc, #504]	; (8001cd8 <main+0x2c8>)
 8001ade:	801a      	strh	r2, [r3, #0]

			float acctheta = MPU6050_Read_Accel();
 8001ae0:	f000 fa56 	bl	8001f90 <MPU6050_Read_Accel>
 8001ae4:	ed87 0a08 	vstr	s0, [r7, #32]
			float gyrovelo = MPU6050_Read_Gyro(time);
 8001ae8:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8001aec:	f000 fad6 	bl	800209c <MPU6050_Read_Gyro>
 8001af0:	ed87 0a07 	vstr	s0, [r7, #28]
			theta = 0.9995 * (theta + gyrovelo * time)
 8001af4:	ed97 7a07 	vldr	s14, [r7, #28]
 8001af8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001afc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b00:	4b76      	ldr	r3, [pc, #472]	; (8001cdc <main+0x2cc>)
 8001b02:	edd3 7a00 	vldr	s15, [r3]
 8001b06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b0a:	ee17 0a90 	vmov	r0, s15
 8001b0e:	f7fe fd23 	bl	8000558 <__aeabi_f2d>
 8001b12:	a369      	add	r3, pc, #420	; (adr r3, 8001cb8 <main+0x2a8>)
 8001b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b18:	f7fe fd76 	bl	8000608 <__aeabi_dmul>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4614      	mov	r4, r2
 8001b22:	461d      	mov	r5, r3
					+ (1 - 0.9995) * acctheta;
 8001b24:	6a38      	ldr	r0, [r7, #32]
 8001b26:	f7fe fd17 	bl	8000558 <__aeabi_f2d>
 8001b2a:	a365      	add	r3, pc, #404	; (adr r3, 8001cc0 <main+0x2b0>)
 8001b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b30:	f7fe fd6a 	bl	8000608 <__aeabi_dmul>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4620      	mov	r0, r4
 8001b3a:	4629      	mov	r1, r5
 8001b3c:	f7fe fbae 	bl	800029c <__adddf3>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4610      	mov	r0, r2
 8001b46:	4619      	mov	r1, r3
 8001b48:	f7ff f836 	bl	8000bb8 <__aeabi_d2f>
 8001b4c:	4603      	mov	r3, r0
			theta = 0.9995 * (theta + gyrovelo * time)
 8001b4e:	4a63      	ldr	r2, [pc, #396]	; (8001cdc <main+0x2cc>)
 8001b50:	6013      	str	r3, [r2, #0]

			camera_angle(theta);
 8001b52:	4b62      	ldr	r3, [pc, #392]	; (8001cdc <main+0x2cc>)
 8001b54:	edd3 7a00 	vldr	s15, [r3]
 8001b58:	eeb0 0a67 	vmov.f32	s0, s15
 8001b5c:	f000 fd7e 	bl	800265c <camera_angle>
			//	__HAL_TIM_SET_COMPARE(motorTIM, TIM_CHANNEL_1, 0);
			//	__HAL_TIM_SET_COMPARE(motorTIM, TIM_CHANNEL_2, 0);
			//}
			//bezpieczenstwo

			if (balance_state_machine == 0) {			// 4wheel mode
 8001b60:	4b5f      	ldr	r3, [pc, #380]	; (8001ce0 <main+0x2d0>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d130      	bne.n	8001bca <main+0x1ba>
				horizontal_control(ibus_data);
 8001b68:	1d3b      	adds	r3, r7, #4
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f000 fdb0 	bl	80026d0 <horizontal_control>
				if (HAL_GPIO_ReadPin(LEG_GPIO_Port, LEG_Pin)) {
 8001b70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b74:	485b      	ldr	r0, [pc, #364]	; (8001ce4 <main+0x2d4>)
 8001b76:	f002 fef3 	bl	8004960 <HAL_GPIO_ReadPin>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d010      	beq.n	8001ba2 <main+0x192>
					switch_vibrations_counter = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	85fb      	strh	r3, [r7, #46]	; 0x2e

					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8001b84:	2201      	movs	r2, #1
 8001b86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b8a:	4857      	ldr	r0, [pc, #348]	; (8001ce8 <main+0x2d8>)
 8001b8c:	f002 ff00 	bl	8004990 <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(motorTIM, TIM_CHANNEL_1, 50);
 8001b90:	4b4e      	ldr	r3, [pc, #312]	; (8001ccc <main+0x2bc>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2232      	movs	r2, #50	; 0x32
 8001b96:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SET_COMPARE(motorTIM, TIM_CHANNEL_2, 0);
 8001b98:	4b4c      	ldr	r3, [pc, #304]	; (8001ccc <main+0x2bc>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	639a      	str	r2, [r3, #56]	; 0x38
 8001ba0:	e013      	b.n	8001bca <main+0x1ba>

				} else {
					switch_vibrations_counter++;
 8001ba2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	85fb      	strh	r3, [r7, #46]	; 0x2e
					if (switch_vibrations_counter > 50) {
 8001ba8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001baa:	2b32      	cmp	r3, #50	; 0x32
 8001bac:	d90d      	bls.n	8001bca <main+0x1ba>
						HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bb4:	484c      	ldr	r0, [pc, #304]	; (8001ce8 <main+0x2d8>)
 8001bb6:	f002 feeb 	bl	8004990 <HAL_GPIO_WritePin>
						__HAL_TIM_SET_COMPARE(motorTIM, TIM_CHANNEL_1, 0);
 8001bba:	4b44      	ldr	r3, [pc, #272]	; (8001ccc <main+0x2bc>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	635a      	str	r2, [r3, #52]	; 0x34
						__HAL_TIM_SET_COMPARE(motorTIM, TIM_CHANNEL_2, 0);
 8001bc2:	4b42      	ldr	r3, [pc, #264]	; (8001ccc <main+0x2bc>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	639a      	str	r2, [r3, #56]	; 0x38
				//if (theta > 1) {
				//	__HAL_TIM_SET_COMPARE(motorTIM, TIM_CHANNEL_1, 50);
				//} else
				//	__HAL_TIM_SET_COMPARE(motorTIM, TIM_CHANNEL_1, 0);
			}
			if (Relay_SW > 1900 && Relay_SW < 2100) {
 8001bca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001bcc:	f240 726c 	movw	r2, #1900	; 0x76c
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	f240 80c3 	bls.w	8001d5c <main+0x34c>
 8001bd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001bd8:	f640 0233 	movw	r2, #2099	; 0x833
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	f200 80bd 	bhi.w	8001d5c <main+0x34c>
				if (balance_state_machine == 0 && balancing_switch > 1900
 8001be2:	4b3f      	ldr	r3, [pc, #252]	; (8001ce0 <main+0x2d0>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10e      	bne.n	8001c08 <main+0x1f8>
 8001bea:	4b3a      	ldr	r3, [pc, #232]	; (8001cd4 <main+0x2c4>)
 8001bec:	881b      	ldrh	r3, [r3, #0]
 8001bee:	f240 726c 	movw	r2, #1900	; 0x76c
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d908      	bls.n	8001c08 <main+0x1f8>
						&& balancing_switch < 2100) {
 8001bf6:	4b37      	ldr	r3, [pc, #220]	; (8001cd4 <main+0x2c4>)
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	f640 0233 	movw	r2, #2099	; 0x833
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d802      	bhi.n	8001c08 <main+0x1f8>
					balance_state_machine = 1;
 8001c02:	4b37      	ldr	r3, [pc, #220]	; (8001ce0 <main+0x2d0>)
 8001c04:	2201      	movs	r2, #1
 8001c06:	701a      	strb	r2, [r3, #0]
				}
				if (balance_state_machine == 1) {			// getting up
 8001c08:	4b35      	ldr	r3, [pc, #212]	; (8001ce0 <main+0x2d0>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d10b      	bne.n	8001c28 <main+0x218>
					Send(0, 0);
 8001c10:	2100      	movs	r1, #0
 8001c12:	2000      	movs	r0, #0
 8001c14:	f7ff fb9a 	bl	800134c <Send>
					__HAL_TIM_SET_COMPARE(motorTIM, TIM_CHANNEL_1, 0);
 8001c18:	4b2c      	ldr	r3, [pc, #176]	; (8001ccc <main+0x2bc>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SET_COMPARE(motorTIM, TIM_CHANNEL_2, 100);
 8001c20:	4b2a      	ldr	r3, [pc, #168]	; (8001ccc <main+0x2bc>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2264      	movs	r2, #100	; 0x64
 8001c26:	639a      	str	r2, [r3, #56]	; 0x38
				}
				if (balance_state_machine == 1 && theta > 70) {
 8001c28:	4b2d      	ldr	r3, [pc, #180]	; (8001ce0 <main+0x2d0>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d114      	bne.n	8001c5a <main+0x24a>
 8001c30:	4b2a      	ldr	r3, [pc, #168]	; (8001cdc <main+0x2cc>)
 8001c32:	edd3 7a00 	vldr	s15, [r3]
 8001c36:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001cec <main+0x2dc>
 8001c3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c42:	dd0a      	ble.n	8001c5a <main+0x24a>
					balance_state_machine = 2;
 8001c44:	4b26      	ldr	r3, [pc, #152]	; (8001ce0 <main+0x2d0>)
 8001c46:	2202      	movs	r2, #2
 8001c48:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_SET_COMPARE(motorTIM, TIM_CHANNEL_1, 0);
 8001c4a:	4b20      	ldr	r3, [pc, #128]	; (8001ccc <main+0x2bc>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SET_COMPARE(motorTIM, TIM_CHANNEL_2, 0);
 8001c52:	4b1e      	ldr	r3, [pc, #120]	; (8001ccc <main+0x2bc>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2200      	movs	r2, #0
 8001c58:	639a      	str	r2, [r3, #56]	; 0x38
				}
				if (balance_state_machine == 2) {			// balancing
 8001c5a:	4b21      	ldr	r3, [pc, #132]	; (8001ce0 <main+0x2d0>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d15a      	bne.n	8001d18 <main+0x308>
					balance_state_machine = vertical_control(ibus_data, theta);
 8001c62:	4b1e      	ldr	r3, [pc, #120]	; (8001cdc <main+0x2cc>)
 8001c64:	edd3 7a00 	vldr	s15, [r3]
 8001c68:	1d3b      	adds	r3, r7, #4
 8001c6a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f000 fe08 	bl	8002884 <vertical_control>
 8001c74:	4603      	mov	r3, r0
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	4b19      	ldr	r3, [pc, #100]	; (8001ce0 <main+0x2d0>)
 8001c7a:	701a      	strb	r2, [r3, #0]
					fall_counter = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (HAL_GPIO_ReadPin(LEG_GPIO_Port, LEG_Pin)) {
 8001c80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c84:	4817      	ldr	r0, [pc, #92]	; (8001ce4 <main+0x2d4>)
 8001c86:	f002 fe6b 	bl	8004960 <HAL_GPIO_ReadPin>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d02f      	beq.n	8001cf0 <main+0x2e0>
						switch_vibrations_counter = 0;
 8001c90:	2300      	movs	r3, #0
 8001c92:	85fb      	strh	r3, [r7, #46]	; 0x2e

						HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8001c94:	2201      	movs	r2, #1
 8001c96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c9a:	4813      	ldr	r0, [pc, #76]	; (8001ce8 <main+0x2d8>)
 8001c9c:	f002 fe78 	bl	8004990 <HAL_GPIO_WritePin>
						__HAL_TIM_SET_COMPARE(motorTIM, TIM_CHANNEL_1, 50);
 8001ca0:	4b0a      	ldr	r3, [pc, #40]	; (8001ccc <main+0x2bc>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2232      	movs	r2, #50	; 0x32
 8001ca6:	635a      	str	r2, [r3, #52]	; 0x34
						__HAL_TIM_SET_COMPARE(motorTIM, TIM_CHANNEL_2, 0);
 8001ca8:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <main+0x2bc>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2200      	movs	r2, #0
 8001cae:	639a      	str	r2, [r3, #56]	; 0x38
 8001cb0:	e032      	b.n	8001d18 <main+0x308>
 8001cb2:	bf00      	nop
 8001cb4:	f3af 8000 	nop.w
 8001cb8:	6c8b4396 	.word	0x6c8b4396
 8001cbc:	3feffbe7 	.word	0x3feffbe7
 8001cc0:	d2f1a800 	.word	0xd2f1a800
 8001cc4:	3f40624d 	.word	0x3f40624d
 8001cc8:	200004dc 	.word	0x200004dc
 8001ccc:	20000364 	.word	0x20000364
 8001cd0:	200003ac 	.word	0x200003ac
 8001cd4:	2000034c 	.word	0x2000034c
 8001cd8:	20000356 	.word	0x20000356
 8001cdc:	20000350 	.word	0x20000350
 8001ce0:	2000021d 	.word	0x2000021d
 8001ce4:	40020400 	.word	0x40020400
 8001ce8:	40020800 	.word	0x40020800
 8001cec:	428c0000 	.word	0x428c0000

					} else {
						switch_vibrations_counter++;
 8001cf0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	85fb      	strh	r3, [r7, #46]	; 0x2e
						if (switch_vibrations_counter > 50) {
 8001cf6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001cf8:	2b32      	cmp	r3, #50	; 0x32
 8001cfa:	d90d      	bls.n	8001d18 <main+0x308>
							HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d02:	4825      	ldr	r0, [pc, #148]	; (8001d98 <main+0x388>)
 8001d04:	f002 fe44 	bl	8004990 <HAL_GPIO_WritePin>
							__HAL_TIM_SET_COMPARE(motorTIM, TIM_CHANNEL_1, 0);
 8001d08:	4b24      	ldr	r3, [pc, #144]	; (8001d9c <main+0x38c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	635a      	str	r2, [r3, #52]	; 0x34
							__HAL_TIM_SET_COMPARE(motorTIM, TIM_CHANNEL_2, 0);
 8001d10:	4b22      	ldr	r3, [pc, #136]	; (8001d9c <main+0x38c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2200      	movs	r2, #0
 8001d16:	639a      	str	r2, [r3, #56]	; 0x38
						}
					}

				}
				if (balance_state_machine == 3) {			// going down
 8001d18:	4b21      	ldr	r3, [pc, #132]	; (8001da0 <main+0x390>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b03      	cmp	r3, #3
 8001d1e:	d11d      	bne.n	8001d5c <main+0x34c>
					__HAL_TIM_SET_COMPARE(motorTIM, TIM_CHANNEL_1, 0);
 8001d20:	4b1e      	ldr	r3, [pc, #120]	; (8001d9c <main+0x38c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2200      	movs	r2, #0
 8001d26:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SET_COMPARE(motorTIM, TIM_CHANNEL_2, 75);
 8001d28:	4b1c      	ldr	r3, [pc, #112]	; (8001d9c <main+0x38c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	224b      	movs	r2, #75	; 0x4b
 8001d2e:	639a      	str	r2, [r3, #56]	; 0x38
					Send(0, 0);
 8001d30:	2100      	movs	r1, #0
 8001d32:	2000      	movs	r0, #0
 8001d34:	f7ff fb0a 	bl	800134c <Send>
					fall_counter++;
 8001d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (fall_counter > 700) {
 8001d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d40:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001d44:	d90a      	bls.n	8001d5c <main+0x34c>
						balance_state_machine = 0;
 8001d46:	4b16      	ldr	r3, [pc, #88]	; (8001da0 <main+0x390>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	701a      	strb	r2, [r3, #0]
						__HAL_TIM_SET_COMPARE(motorTIM, TIM_CHANNEL_1, 0);
 8001d4c:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <main+0x38c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2200      	movs	r2, #0
 8001d52:	635a      	str	r2, [r3, #52]	; 0x34
						__HAL_TIM_SET_COMPARE(motorTIM, TIM_CHANNEL_2, 0);
 8001d54:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <main+0x38c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	639a      	str	r2, [r3, #56]	; 0x38

			/* USER CODE END WHILE */

			/* USER CODE BEGIN 3 */

			time = (getCurrentMicros() - loop_timer) * 1e-6;
 8001d5c:	f7ff f9a2 	bl	80010a4 <getCurrentMicros>
 8001d60:	4602      	mov	r2, r0
 8001d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fbd4 	bl	8000514 <__aeabi_ui2d>
 8001d6c:	a308      	add	r3, pc, #32	; (adr r3, 8001d90 <main+0x380>)
 8001d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d72:	f7fe fc49 	bl	8000608 <__aeabi_dmul>
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	4610      	mov	r0, r2
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f7fe ff1b 	bl	8000bb8 <__aeabi_d2f>
 8001d82:	4603      	mov	r3, r0
 8001d84:	633b      	str	r3, [r7, #48]	; 0x30
			loop_timer = getCurrentMicros();
 8001d86:	f7ff f98d 	bl	80010a4 <getCurrentMicros>
 8001d8a:	6378      	str	r0, [r7, #52]	; 0x34
		if (mpu6050_ready) { //jeśli mpu6050 nie jest gotowe to cały program nie wystartuje i należy zrestartować kontroler/rozwiązać problemy z magistralą I2C
 8001d8c:	e68d      	b.n	8001aaa <main+0x9a>
 8001d8e:	bf00      	nop
 8001d90:	a0b5ed8d 	.word	0xa0b5ed8d
 8001d94:	3eb0c6f7 	.word	0x3eb0c6f7
 8001d98:	40020800 	.word	0x40020800
 8001d9c:	20000364 	.word	0x20000364
 8001da0:	2000021d 	.word	0x2000021d

08001da4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b094      	sub	sp, #80	; 0x50
 8001da8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001daa:	f107 0320 	add.w	r3, r7, #32
 8001dae:	2230      	movs	r2, #48	; 0x30
 8001db0:	2100      	movs	r1, #0
 8001db2:	4618      	mov	r0, r3
 8001db4:	f006 fa2a 	bl	800820c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001db8:	f107 030c 	add.w	r3, r7, #12
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60bb      	str	r3, [r7, #8]
 8001dcc:	4b22      	ldr	r3, [pc, #136]	; (8001e58 <SystemClock_Config+0xb4>)
 8001dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd0:	4a21      	ldr	r2, [pc, #132]	; (8001e58 <SystemClock_Config+0xb4>)
 8001dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd6:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd8:	4b1f      	ldr	r3, [pc, #124]	; (8001e58 <SystemClock_Config+0xb4>)
 8001dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001de4:	2300      	movs	r3, #0
 8001de6:	607b      	str	r3, [r7, #4]
 8001de8:	4b1c      	ldr	r3, [pc, #112]	; (8001e5c <SystemClock_Config+0xb8>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001df0:	4a1a      	ldr	r2, [pc, #104]	; (8001e5c <SystemClock_Config+0xb8>)
 8001df2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001df6:	6013      	str	r3, [r2, #0]
 8001df8:	4b18      	ldr	r3, [pc, #96]	; (8001e5c <SystemClock_Config+0xb8>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e00:	607b      	str	r3, [r7, #4]
 8001e02:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e04:	2301      	movs	r3, #1
 8001e06:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001e12:	f107 0320 	add.w	r3, r7, #32
 8001e16:	4618      	mov	r0, r3
 8001e18:	f003 fdae 	bl	8005978 <HAL_RCC_OscConfig>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <SystemClock_Config+0x82>
		Error_Handler();
 8001e22:	f000 f839 	bl	8001e98 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001e26:	230f      	movs	r3, #15
 8001e28:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e32:	2300      	movs	r3, #0
 8001e34:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001e3a:	f107 030c 	add.w	r3, r7, #12
 8001e3e:	2100      	movs	r1, #0
 8001e40:	4618      	mov	r0, r3
 8001e42:	f004 f811 	bl	8005e68 <HAL_RCC_ClockConfig>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <SystemClock_Config+0xac>
		Error_Handler();
 8001e4c:	f000 f824 	bl	8001e98 <Error_Handler>
	}
}
 8001e50:	bf00      	nop
 8001e52:	3750      	adds	r7, #80	; 0x50
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40007000 	.word	0x40007000

08001e60 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {//przerwanie na potrzeby obsługi komunikacji ze sterownikiem BLDC
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
	if (huart == commUART) { 	//sprawdzenie czy przyszło z właściwego uarta
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a08      	ldr	r2, [pc, #32]	; (8001e8c <HAL_UART_RxCpltCallback+0x2c>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d102      	bne.n	8001e76 <HAL_UART_RxCpltCallback+0x16>
		data_available = 1;
 8001e70:	4b07      	ldr	r3, [pc, #28]	; (8001e90 <HAL_UART_RxCpltCallback+0x30>)
 8001e72:	2201      	movs	r2, #1
 8001e74:	701a      	strb	r2, [r3, #0]
		//ponowne wywołanie oczekiwania na przerwania dzieje się po przetworzeniu danych w hoverserial.c (linijka 74 w hoverserial.c)
	}
	if (huart == IBUS_UART)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a06      	ldr	r2, [pc, #24]	; (8001e94 <HAL_UART_RxCpltCallback+0x34>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d101      	bne.n	8001e82 <HAL_UART_RxCpltCallback+0x22>
		ibus_reset_failsafe();
 8001e7e:	f7ff fdb9 	bl	80019f4 <ibus_reset_failsafe>
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	200004dc 	.word	0x200004dc
 8001e90:	200002d8 	.word	0x200002d8
 8001e94:	20000498 	.word	0x20000498

08001e98 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e9c:	b672      	cpsid	i
}
 8001e9e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001ea0:	e7fe      	b.n	8001ea0 <Error_Handler+0x8>
	...

08001ea4 <MPU6050_Init>:
uint32_t loop_timer;
float gyro_calibr = 0, acc_calibr = 0;

float angle_acc, gyro_velocity = 0;

_Bool MPU6050_Init(void) {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af04      	add	r7, sp, #16

	uint8_t check;
	uint8_t Data;
	_Bool mpu6050_status = 0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	71fb      	strb	r3, [r7, #7]

	// sprawdzenie czy to MPU6050
	HAL_I2C_Mem_Read(mpuI2C, MPU6050_ADDR, WHO_AM_I, 1, &check, 1, 1000);
 8001eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eb2:	9302      	str	r3, [sp, #8]
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	9301      	str	r3, [sp, #4]
 8001eb8:	1dbb      	adds	r3, r7, #6
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	2275      	movs	r2, #117	; 0x75
 8001ec0:	21d0      	movs	r1, #208	; 0xd0
 8001ec2:	482e      	ldr	r0, [pc, #184]	; (8001f7c <MPU6050_Init+0xd8>)
 8001ec4:	f002 ffd6 	bl	8004e74 <HAL_I2C_Mem_Read>

	if (check == 0x72) { // powinno być 0x68 ale w tym przypadku to jakiś klon
 8001ec8:	79bb      	ldrb	r3, [r7, #6]
 8001eca:	2b72      	cmp	r3, #114	; 0x72
 8001ecc:	d14b      	bne.n	8001f66 <MPU6050_Init+0xc2>
		// power management register: brak resetu, wyłączone tryby sleep i cycle, wyłączony czujnik temp. (bit wysoki), wewnętrzny zegar 8MHz
		Data = 0b00001000;
 8001ece:	2308      	movs	r3, #8
 8001ed0:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Mem_Write(mpuI2C, MPU6050_ADDR, PWR_MGMT_1, 1, &Data, 1, 1000);
 8001ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ed6:	9302      	str	r3, [sp, #8]
 8001ed8:	2301      	movs	r3, #1
 8001eda:	9301      	str	r3, [sp, #4]
 8001edc:	1d7b      	adds	r3, r7, #5
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	226b      	movs	r2, #107	; 0x6b
 8001ee4:	21d0      	movs	r1, #208	; 0xd0
 8001ee6:	4825      	ldr	r0, [pc, #148]	; (8001f7c <MPU6050_Init+0xd8>)
 8001ee8:	f002 feca 	bl	8004c80 <HAL_I2C_Mem_Write>

		// konfiguracja akcelerometru
		// bity 3 = 0; 4 = 0 - zakres akcelerometru na +-0g, pozostałe bity to selftest bądź zastrzeżone (oba nieistotne)
		Data = 0x00;
 8001eec:	2300      	movs	r3, #0
 8001eee:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Mem_Write(mpuI2C, MPU6050_ADDR, ACCEL_CONFIG, 1, &Data, 1,
 8001ef0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ef4:	9302      	str	r3, [sp, #8]
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	9301      	str	r3, [sp, #4]
 8001efa:	1d7b      	adds	r3, r7, #5
 8001efc:	9300      	str	r3, [sp, #0]
 8001efe:	2301      	movs	r3, #1
 8001f00:	221c      	movs	r2, #28
 8001f02:	21d0      	movs	r1, #208	; 0xd0
 8001f04:	481d      	ldr	r0, [pc, #116]	; (8001f7c <MPU6050_Init+0xd8>)
 8001f06:	f002 febb 	bl	8004c80 <HAL_I2C_Mem_Write>
				1000);

		// konfiguracja żyroskopu
		// bity 3 = 0; 4 = 0 - zakres żyroskopu na +-250 deg/s, pozostałe bity to selftest bądź zastrzeżone (oba nieistotne)
		Data = 0x00;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Mem_Write(mpuI2C, MPU6050_ADDR, GYRO_CONFIG, 1, &Data, 1, 1000);
 8001f0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f12:	9302      	str	r3, [sp, #8]
 8001f14:	2301      	movs	r3, #1
 8001f16:	9301      	str	r3, [sp, #4]
 8001f18:	1d7b      	adds	r3, r7, #5
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	221b      	movs	r2, #27
 8001f20:	21d0      	movs	r1, #208	; 0xd0
 8001f22:	4816      	ldr	r0, [pc, #88]	; (8001f7c <MPU6050_Init+0xd8>)
 8001f24:	f002 feac 	bl	8004c80 <HAL_I2C_Mem_Write>

		Data = 0b00000110;////ostatnie 3 bity to filtr LPF, teraz jest najostrzejszy
 8001f28:	2306      	movs	r3, #6
 8001f2a:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Mem_Write(mpuI2C, MPU6050_ADDR, CONFIG, 1, &Data, 1, 1000);
 8001f2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f30:	9302      	str	r3, [sp, #8]
 8001f32:	2301      	movs	r3, #1
 8001f34:	9301      	str	r3, [sp, #4]
 8001f36:	1d7b      	adds	r3, r7, #5
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	221a      	movs	r2, #26
 8001f3e:	21d0      	movs	r1, #208	; 0xd0
 8001f40:	480e      	ldr	r0, [pc, #56]	; (8001f7c <MPU6050_Init+0xd8>)
 8001f42:	f002 fe9d 	bl	8004c80 <HAL_I2C_Mem_Write>

		gyro_calibr = kalibracja_gyro();
 8001f46:	f000 f9d1 	bl	80022ec <kalibracja_gyro>
 8001f4a:	eef0 7a40 	vmov.f32	s15, s0
 8001f4e:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <MPU6050_Init+0xdc>)
 8001f50:	edc3 7a00 	vstr	s15, [r3]
		acc_calibr = kalibracja_acc();
 8001f54:	f000 f90c 	bl	8002170 <kalibracja_acc>
 8001f58:	eef0 7a40 	vmov.f32	s15, s0
 8001f5c:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <MPU6050_Init+0xe0>)
 8001f5e:	edc3 7a00 	vstr	s15, [r3]
		mpu6050_status = 1;
 8001f62:	2301      	movs	r3, #1
 8001f64:	71fb      	strb	r3, [r7, #7]
	}
	loop_timer = HAL_GetTick();
 8001f66:	f001 fa85 	bl	8003474 <HAL_GetTick>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	4a06      	ldr	r2, [pc, #24]	; (8001f88 <MPU6050_Init+0xe4>)
 8001f6e:	6013      	str	r3, [r2, #0]
	return mpu6050_status;
 8001f70:	79fb      	ldrb	r3, [r7, #7]
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	200002f8 	.word	0x200002f8
 8001f80:	2000022c 	.word	0x2000022c
 8001f84:	20000230 	.word	0x20000230
 8001f88:	2000035c 	.word	0x2000035c
 8001f8c:	00000000 	.word	0x00000000

08001f90 <MPU6050_Read_Accel>:

float MPU6050_Read_Accel(void) {
 8001f90:	b5b0      	push	{r4, r5, r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af04      	add	r7, sp, #16
	uint8_t i2c_data[6];

	// odczytanie 6 bajtów począwszy od rejestru ACCEL_XOUT_H, wymagane dwa do obliczeń
	HAL_I2C_Mem_Read(mpuI2C, MPU6050_ADDR, ACCEL_XOUT_H, 1, i2c_data, 6, 1000);
 8001f96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f9a:	9302      	str	r3, [sp, #8]
 8001f9c:	2306      	movs	r3, #6
 8001f9e:	9301      	str	r3, [sp, #4]
 8001fa0:	463b      	mov	r3, r7
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	223b      	movs	r2, #59	; 0x3b
 8001fa8:	21d0      	movs	r1, #208	; 0xd0
 8001faa:	4835      	ldr	r0, [pc, #212]	; (8002080 <MPU6050_Read_Accel+0xf0>)
 8001fac:	f002 ff62 	bl	8004e74 <HAL_I2C_Mem_Read>

	acc_rawX = (int16_t) (i2c_data[0] << 8 | i2c_data[1]);
 8001fb0:	783b      	ldrb	r3, [r7, #0]
 8001fb2:	021b      	lsls	r3, r3, #8
 8001fb4:	b21a      	sxth	r2, r3
 8001fb6:	787b      	ldrb	r3, [r7, #1]
 8001fb8:	b21b      	sxth	r3, r3
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	b21a      	sxth	r2, r3
 8001fbe:	4b31      	ldr	r3, [pc, #196]	; (8002084 <MPU6050_Read_Accel+0xf4>)
 8001fc0:	801a      	strh	r2, [r3, #0]
	acc_rawY = (int16_t) (i2c_data[2] << 8 | i2c_data[3]);
 8001fc2:	78bb      	ldrb	r3, [r7, #2]
 8001fc4:	021b      	lsls	r3, r3, #8
 8001fc6:	b21a      	sxth	r2, r3
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	b21b      	sxth	r3, r3
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	b21a      	sxth	r2, r3
 8001fd0:	4b2d      	ldr	r3, [pc, #180]	; (8002088 <MPU6050_Read_Accel+0xf8>)
 8001fd2:	801a      	strh	r2, [r3, #0]
	acc_rawZ = (int16_t) (i2c_data[4] << 8 | i2c_data[5]);
 8001fd4:	793b      	ldrb	r3, [r7, #4]
 8001fd6:	021b      	lsls	r3, r3, #8
 8001fd8:	b21a      	sxth	r2, r3
 8001fda:	797b      	ldrb	r3, [r7, #5]
 8001fdc:	b21b      	sxth	r3, r3
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	b21a      	sxth	r2, r3
 8001fe2:	4b2a      	ldr	r3, [pc, #168]	; (800208c <MPU6050_Read_Accel+0xfc>)
 8001fe4:	801a      	strh	r2, [r3, #0]

	//kąt jest atanem ilorazu przyspieszeń zatem nie trzeba konwertować do g, bo się skraca,
	//teraz dane są wyliczane dla osi Y, istotne jest ułożenie MPU6050
	angle_acc = atan2((float) acc_rawX, (float) acc_rawZ) * -180 / M_PI;
 8001fe6:	4b27      	ldr	r3, [pc, #156]	; (8002084 <MPU6050_Read_Accel+0xf4>)
 8001fe8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fec:	ee07 3a90 	vmov	s15, r3
 8001ff0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ff4:	ee17 0a90 	vmov	r0, s15
 8001ff8:	f7fe faae 	bl	8000558 <__aeabi_f2d>
 8001ffc:	4604      	mov	r4, r0
 8001ffe:	460d      	mov	r5, r1
 8002000:	4b22      	ldr	r3, [pc, #136]	; (800208c <MPU6050_Read_Accel+0xfc>)
 8002002:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002006:	ee07 3a90 	vmov	s15, r3
 800200a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800200e:	ee17 0a90 	vmov	r0, s15
 8002012:	f7fe faa1 	bl	8000558 <__aeabi_f2d>
 8002016:	4602      	mov	r2, r0
 8002018:	460b      	mov	r3, r1
 800201a:	ec43 2b11 	vmov	d1, r2, r3
 800201e:	ec45 4b10 	vmov	d0, r4, r5
 8002022:	f008 ff8f 	bl	800af44 <atan2>
 8002026:	ec51 0b10 	vmov	r0, r1, d0
 800202a:	f04f 0200 	mov.w	r2, #0
 800202e:	4b18      	ldr	r3, [pc, #96]	; (8002090 <MPU6050_Read_Accel+0x100>)
 8002030:	f7fe faea 	bl	8000608 <__aeabi_dmul>
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	4610      	mov	r0, r2
 800203a:	4619      	mov	r1, r3
 800203c:	a30e      	add	r3, pc, #56	; (adr r3, 8002078 <MPU6050_Read_Accel+0xe8>)
 800203e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002042:	f7fe fc0b 	bl	800085c <__aeabi_ddiv>
 8002046:	4602      	mov	r2, r0
 8002048:	460b      	mov	r3, r1
 800204a:	4610      	mov	r0, r2
 800204c:	4619      	mov	r1, r3
 800204e:	f7fe fdb3 	bl	8000bb8 <__aeabi_d2f>
 8002052:	4603      	mov	r3, r0
 8002054:	4a0f      	ldr	r2, [pc, #60]	; (8002094 <MPU6050_Read_Accel+0x104>)
 8002056:	6013      	str	r3, [r2, #0]

	return angle_acc - acc_calibr;
 8002058:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <MPU6050_Read_Accel+0x104>)
 800205a:	ed93 7a00 	vldr	s14, [r3]
 800205e:	4b0e      	ldr	r3, [pc, #56]	; (8002098 <MPU6050_Read_Accel+0x108>)
 8002060:	edd3 7a00 	vldr	s15, [r3]
 8002064:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8002068:	eeb0 0a67 	vmov.f32	s0, s15
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bdb0      	pop	{r4, r5, r7, pc}
 8002072:	bf00      	nop
 8002074:	f3af 8000 	nop.w
 8002078:	54442d18 	.word	0x54442d18
 800207c:	400921fb 	.word	0x400921fb
 8002080:	200002f8 	.word	0x200002f8
 8002084:	2000021e 	.word	0x2000021e
 8002088:	20000220 	.word	0x20000220
 800208c:	20000222 	.word	0x20000222
 8002090:	c0668000 	.word	0xc0668000
 8002094:	20000358 	.word	0x20000358
 8002098:	20000230 	.word	0x20000230

0800209c <MPU6050_Read_Gyro>:

float MPU6050_Read_Gyro(float time) {
 800209c:	b580      	push	{r7, lr}
 800209e:	b088      	sub	sp, #32
 80020a0:	af04      	add	r7, sp, #16
 80020a2:	ed87 0a01 	vstr	s0, [r7, #4]

	uint8_t i2c_data[6];	//odczytanie danych począwszy rejestru GYRO_XOUT_H
	HAL_I2C_Mem_Read(mpuI2C, MPU6050_ADDR, GYRO_XOUT_H, 1, i2c_data, 6, 1000);
 80020a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020aa:	9302      	str	r3, [sp, #8]
 80020ac:	2306      	movs	r3, #6
 80020ae:	9301      	str	r3, [sp, #4]
 80020b0:	f107 0308 	add.w	r3, r7, #8
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	2301      	movs	r3, #1
 80020b8:	2243      	movs	r2, #67	; 0x43
 80020ba:	21d0      	movs	r1, #208	; 0xd0
 80020bc:	4825      	ldr	r0, [pc, #148]	; (8002154 <MPU6050_Read_Gyro+0xb8>)
 80020be:	f002 fed9 	bl	8004e74 <HAL_I2C_Mem_Read>
	Gyro_X_RAW = (int16_t) (i2c_data[0] << 8 | i2c_data[1]);
 80020c2:	7a3b      	ldrb	r3, [r7, #8]
 80020c4:	021b      	lsls	r3, r3, #8
 80020c6:	b21a      	sxth	r2, r3
 80020c8:	7a7b      	ldrb	r3, [r7, #9]
 80020ca:	b21b      	sxth	r3, r3
 80020cc:	4313      	orrs	r3, r2
 80020ce:	b21a      	sxth	r2, r3
 80020d0:	4b21      	ldr	r3, [pc, #132]	; (8002158 <MPU6050_Read_Gyro+0xbc>)
 80020d2:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t) (i2c_data[2] << 8 | i2c_data[3]);
 80020d4:	7abb      	ldrb	r3, [r7, #10]
 80020d6:	021b      	lsls	r3, r3, #8
 80020d8:	b21a      	sxth	r2, r3
 80020da:	7afb      	ldrb	r3, [r7, #11]
 80020dc:	b21b      	sxth	r3, r3
 80020de:	4313      	orrs	r3, r2
 80020e0:	b21a      	sxth	r2, r3
 80020e2:	4b1e      	ldr	r3, [pc, #120]	; (800215c <MPU6050_Read_Gyro+0xc0>)
 80020e4:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t) (i2c_data[4] << 8 | i2c_data[5]);
 80020e6:	7b3b      	ldrb	r3, [r7, #12]
 80020e8:	021b      	lsls	r3, r3, #8
 80020ea:	b21a      	sxth	r2, r3
 80020ec:	7b7b      	ldrb	r3, [r7, #13]
 80020ee:	b21b      	sxth	r3, r3
 80020f0:	4313      	orrs	r3, r2
 80020f2:	b21a      	sxth	r2, r3
 80020f4:	4b1a      	ldr	r3, [pc, #104]	; (8002160 <MPU6050_Read_Gyro+0xc4>)
 80020f6:	801a      	strh	r2, [r3, #0]

	Gyro_Y_RAW -= gyro_calibr;          //uwzględnienie odczytu kalibracyjnego
 80020f8:	4b18      	ldr	r3, [pc, #96]	; (800215c <MPU6050_Read_Gyro+0xc0>)
 80020fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020fe:	ee07 3a90 	vmov	s15, r3
 8002102:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002106:	4b17      	ldr	r3, [pc, #92]	; (8002164 <MPU6050_Read_Gyro+0xc8>)
 8002108:	edd3 7a00 	vldr	s15, [r3]
 800210c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002110:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002114:	ee17 3a90 	vmov	r3, s15
 8002118:	b21a      	sxth	r2, r3
 800211a:	4b10      	ldr	r3, [pc, #64]	; (800215c <MPU6050_Read_Gyro+0xc0>)
 800211c:	801a      	strh	r2, [r3, #0]
	gyro_velocity = Gyro_Y_RAW / 131;
 800211e:	4b0f      	ldr	r3, [pc, #60]	; (800215c <MPU6050_Read_Gyro+0xc0>)
 8002120:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002124:	4a10      	ldr	r2, [pc, #64]	; (8002168 <MPU6050_Read_Gyro+0xcc>)
 8002126:	fb82 1203 	smull	r1, r2, r2, r3
 800212a:	1152      	asrs	r2, r2, #5
 800212c:	17db      	asrs	r3, r3, #31
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	b21b      	sxth	r3, r3
 8002132:	ee07 3a90 	vmov	s15, r3
 8002136:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800213a:	4b0c      	ldr	r3, [pc, #48]	; (800216c <MPU6050_Read_Gyro+0xd0>)
 800213c:	edc3 7a00 	vstr	s15, [r3]

	return gyro_velocity;
 8002140:	4b0a      	ldr	r3, [pc, #40]	; (800216c <MPU6050_Read_Gyro+0xd0>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	ee07 3a90 	vmov	s15, r3
}
 8002148:	eeb0 0a67 	vmov.f32	s0, s15
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	200002f8 	.word	0x200002f8
 8002158:	20000224 	.word	0x20000224
 800215c:	20000226 	.word	0x20000226
 8002160:	20000228 	.word	0x20000228
 8002164:	2000022c 	.word	0x2000022c
 8002168:	3e88cb3d 	.word	0x3e88cb3d
 800216c:	20000234 	.word	0x20000234

08002170 <kalibracja_acc>:

float kalibracja_acc(void) {
 8002170:	b5b0      	push	{r4, r5, r7, lr}
 8002172:	b088      	sub	sp, #32
 8002174:	af04      	add	r7, sp, #16
	for (int i = 0; i < 5000; i++) {
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	e085      	b.n	8002288 <kalibracja_acc+0x118>
		if (i % 400 == 0)
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	4b52      	ldr	r3, [pc, #328]	; (80022c8 <kalibracja_acc+0x158>)
 8002180:	fb83 1302 	smull	r1, r3, r3, r2
 8002184:	11d9      	asrs	r1, r3, #7
 8002186:	17d3      	asrs	r3, r2, #31
 8002188:	1acb      	subs	r3, r1, r3
 800218a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800218e:	fb01 f303 	mul.w	r3, r1, r3
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	d104      	bne.n	80021a2 <kalibracja_acc+0x32>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); //migająca dioda - informacja o procesie kalibracji
 8002198:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800219c:	484b      	ldr	r0, [pc, #300]	; (80022cc <kalibracja_acc+0x15c>)
 800219e:	f002 fc10 	bl	80049c2 <HAL_GPIO_TogglePin>

		uint8_t i2c_data[6];
		HAL_I2C_Mem_Read(mpuI2C, MPU6050_ADDR, ACCEL_XOUT_H, 1, i2c_data, 6,
 80021a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021a6:	9302      	str	r3, [sp, #8]
 80021a8:	2306      	movs	r3, #6
 80021aa:	9301      	str	r3, [sp, #4]
 80021ac:	1d3b      	adds	r3, r7, #4
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	2301      	movs	r3, #1
 80021b2:	223b      	movs	r2, #59	; 0x3b
 80021b4:	21d0      	movs	r1, #208	; 0xd0
 80021b6:	4846      	ldr	r0, [pc, #280]	; (80022d0 <kalibracja_acc+0x160>)
 80021b8:	f002 fe5c 	bl	8004e74 <HAL_I2C_Mem_Read>
				1000);
		acc_rawX = (int16_t) (i2c_data[0] << 8 | i2c_data[1]);
 80021bc:	793b      	ldrb	r3, [r7, #4]
 80021be:	021b      	lsls	r3, r3, #8
 80021c0:	b21a      	sxth	r2, r3
 80021c2:	797b      	ldrb	r3, [r7, #5]
 80021c4:	b21b      	sxth	r3, r3
 80021c6:	4313      	orrs	r3, r2
 80021c8:	b21a      	sxth	r2, r3
 80021ca:	4b42      	ldr	r3, [pc, #264]	; (80022d4 <kalibracja_acc+0x164>)
 80021cc:	801a      	strh	r2, [r3, #0]
		acc_rawY = (int16_t) (i2c_data[2] << 8 | i2c_data[3]);
 80021ce:	79bb      	ldrb	r3, [r7, #6]
 80021d0:	021b      	lsls	r3, r3, #8
 80021d2:	b21a      	sxth	r2, r3
 80021d4:	79fb      	ldrb	r3, [r7, #7]
 80021d6:	b21b      	sxth	r3, r3
 80021d8:	4313      	orrs	r3, r2
 80021da:	b21a      	sxth	r2, r3
 80021dc:	4b3e      	ldr	r3, [pc, #248]	; (80022d8 <kalibracja_acc+0x168>)
 80021de:	801a      	strh	r2, [r3, #0]
		acc_rawZ = (int16_t) (i2c_data[4] << 8 | i2c_data[5]);
 80021e0:	7a3b      	ldrb	r3, [r7, #8]
 80021e2:	021b      	lsls	r3, r3, #8
 80021e4:	b21a      	sxth	r2, r3
 80021e6:	7a7b      	ldrb	r3, [r7, #9]
 80021e8:	b21b      	sxth	r3, r3
 80021ea:	4313      	orrs	r3, r2
 80021ec:	b21a      	sxth	r2, r3
 80021ee:	4b3b      	ldr	r3, [pc, #236]	; (80022dc <kalibracja_acc+0x16c>)
 80021f0:	801a      	strh	r2, [r3, #0]

		acc_calibr += atan2((float) acc_rawX, (float) acc_rawZ) * -180 / M_PI;
 80021f2:	4b38      	ldr	r3, [pc, #224]	; (80022d4 <kalibracja_acc+0x164>)
 80021f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021f8:	ee07 3a90 	vmov	s15, r3
 80021fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002200:	ee17 0a90 	vmov	r0, s15
 8002204:	f7fe f9a8 	bl	8000558 <__aeabi_f2d>
 8002208:	4604      	mov	r4, r0
 800220a:	460d      	mov	r5, r1
 800220c:	4b33      	ldr	r3, [pc, #204]	; (80022dc <kalibracja_acc+0x16c>)
 800220e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002212:	ee07 3a90 	vmov	s15, r3
 8002216:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800221a:	ee17 0a90 	vmov	r0, s15
 800221e:	f7fe f99b 	bl	8000558 <__aeabi_f2d>
 8002222:	4602      	mov	r2, r0
 8002224:	460b      	mov	r3, r1
 8002226:	ec43 2b11 	vmov	d1, r2, r3
 800222a:	ec45 4b10 	vmov	d0, r4, r5
 800222e:	f008 fe89 	bl	800af44 <atan2>
 8002232:	ec51 0b10 	vmov	r0, r1, d0
 8002236:	f04f 0200 	mov.w	r2, #0
 800223a:	4b29      	ldr	r3, [pc, #164]	; (80022e0 <kalibracja_acc+0x170>)
 800223c:	f7fe f9e4 	bl	8000608 <__aeabi_dmul>
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	4610      	mov	r0, r2
 8002246:	4619      	mov	r1, r3
 8002248:	a31d      	add	r3, pc, #116	; (adr r3, 80022c0 <kalibracja_acc+0x150>)
 800224a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800224e:	f7fe fb05 	bl	800085c <__aeabi_ddiv>
 8002252:	4602      	mov	r2, r0
 8002254:	460b      	mov	r3, r1
 8002256:	4614      	mov	r4, r2
 8002258:	461d      	mov	r5, r3
 800225a:	4b22      	ldr	r3, [pc, #136]	; (80022e4 <kalibracja_acc+0x174>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f7fe f97a 	bl	8000558 <__aeabi_f2d>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	4620      	mov	r0, r4
 800226a:	4629      	mov	r1, r5
 800226c:	f7fe f816 	bl	800029c <__adddf3>
 8002270:	4602      	mov	r2, r0
 8002272:	460b      	mov	r3, r1
 8002274:	4610      	mov	r0, r2
 8002276:	4619      	mov	r1, r3
 8002278:	f7fe fc9e 	bl	8000bb8 <__aeabi_d2f>
 800227c:	4603      	mov	r3, r0
 800227e:	4a19      	ldr	r2, [pc, #100]	; (80022e4 <kalibracja_acc+0x174>)
 8002280:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 5000; i++) {
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	3301      	adds	r3, #1
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f241 3287 	movw	r2, #4999	; 0x1387
 800228e:	4293      	cmp	r3, r2
 8002290:	f77f af74 	ble.w	800217c <kalibracja_acc+0xc>
	}
	acc_calibr /= 5000; //wartosc srednia
 8002294:	4b13      	ldr	r3, [pc, #76]	; (80022e4 <kalibracja_acc+0x174>)
 8002296:	ed93 7a00 	vldr	s14, [r3]
 800229a:	eddf 6a13 	vldr	s13, [pc, #76]	; 80022e8 <kalibracja_acc+0x178>
 800229e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022a2:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <kalibracja_acc+0x174>)
 80022a4:	edc3 7a00 	vstr	s15, [r3]

	return acc_calibr;
 80022a8:	4b0e      	ldr	r3, [pc, #56]	; (80022e4 <kalibracja_acc+0x174>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	ee07 3a90 	vmov	s15, r3
}
 80022b0:	eeb0 0a67 	vmov.f32	s0, s15
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bdb0      	pop	{r4, r5, r7, pc}
 80022ba:	bf00      	nop
 80022bc:	f3af 8000 	nop.w
 80022c0:	54442d18 	.word	0x54442d18
 80022c4:	400921fb 	.word	0x400921fb
 80022c8:	51eb851f 	.word	0x51eb851f
 80022cc:	40020800 	.word	0x40020800
 80022d0:	200002f8 	.word	0x200002f8
 80022d4:	2000021e 	.word	0x2000021e
 80022d8:	20000220 	.word	0x20000220
 80022dc:	20000222 	.word	0x20000222
 80022e0:	c0668000 	.word	0xc0668000
 80022e4:	20000230 	.word	0x20000230
 80022e8:	459c4000 	.word	0x459c4000

080022ec <kalibracja_gyro>:

float kalibracja_gyro(void) {
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b088      	sub	sp, #32
 80022f0:	af04      	add	r7, sp, #16
	for (int i = 0; i < 5000; i++) {
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	e04c      	b.n	8002392 <kalibracja_gyro+0xa6>
		if (i % 400 == 0)
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	4b32      	ldr	r3, [pc, #200]	; (80023c4 <kalibracja_gyro+0xd8>)
 80022fc:	fb83 1302 	smull	r1, r3, r3, r2
 8002300:	11d9      	asrs	r1, r3, #7
 8002302:	17d3      	asrs	r3, r2, #31
 8002304:	1acb      	subs	r3, r1, r3
 8002306:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800230a:	fb01 f303 	mul.w	r3, r1, r3
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	d104      	bne.n	800231e <kalibracja_gyro+0x32>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); //migająca dioda - informacja o procesie kalibracji
 8002314:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002318:	482b      	ldr	r0, [pc, #172]	; (80023c8 <kalibracja_gyro+0xdc>)
 800231a:	f002 fb52 	bl	80049c2 <HAL_GPIO_TogglePin>

		uint8_t i2c_data[6];
		HAL_I2C_Mem_Read(mpuI2C, MPU6050_ADDR, GYRO_XOUT_H, 1, i2c_data, 6,
 800231e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002322:	9302      	str	r3, [sp, #8]
 8002324:	2306      	movs	r3, #6
 8002326:	9301      	str	r3, [sp, #4]
 8002328:	1d3b      	adds	r3, r7, #4
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	2301      	movs	r3, #1
 800232e:	2243      	movs	r2, #67	; 0x43
 8002330:	21d0      	movs	r1, #208	; 0xd0
 8002332:	4826      	ldr	r0, [pc, #152]	; (80023cc <kalibracja_gyro+0xe0>)
 8002334:	f002 fd9e 	bl	8004e74 <HAL_I2C_Mem_Read>
				1000);

		Gyro_X_RAW = (int16_t) (i2c_data[0] << 8 | i2c_data[1]);
 8002338:	793b      	ldrb	r3, [r7, #4]
 800233a:	021b      	lsls	r3, r3, #8
 800233c:	b21a      	sxth	r2, r3
 800233e:	797b      	ldrb	r3, [r7, #5]
 8002340:	b21b      	sxth	r3, r3
 8002342:	4313      	orrs	r3, r2
 8002344:	b21a      	sxth	r2, r3
 8002346:	4b22      	ldr	r3, [pc, #136]	; (80023d0 <kalibracja_gyro+0xe4>)
 8002348:	801a      	strh	r2, [r3, #0]
		Gyro_Y_RAW = (int16_t) (i2c_data[2] << 8 | i2c_data[3]);
 800234a:	79bb      	ldrb	r3, [r7, #6]
 800234c:	021b      	lsls	r3, r3, #8
 800234e:	b21a      	sxth	r2, r3
 8002350:	79fb      	ldrb	r3, [r7, #7]
 8002352:	b21b      	sxth	r3, r3
 8002354:	4313      	orrs	r3, r2
 8002356:	b21a      	sxth	r2, r3
 8002358:	4b1e      	ldr	r3, [pc, #120]	; (80023d4 <kalibracja_gyro+0xe8>)
 800235a:	801a      	strh	r2, [r3, #0]
		Gyro_Z_RAW = (int16_t) (i2c_data[4] << 8 | i2c_data[5]);
 800235c:	7a3b      	ldrb	r3, [r7, #8]
 800235e:	021b      	lsls	r3, r3, #8
 8002360:	b21a      	sxth	r2, r3
 8002362:	7a7b      	ldrb	r3, [r7, #9]
 8002364:	b21b      	sxth	r3, r3
 8002366:	4313      	orrs	r3, r2
 8002368:	b21a      	sxth	r2, r3
 800236a:	4b1b      	ldr	r3, [pc, #108]	; (80023d8 <kalibracja_gyro+0xec>)
 800236c:	801a      	strh	r2, [r3, #0]
		gyro_calibr += Gyro_Y_RAW;
 800236e:	4b19      	ldr	r3, [pc, #100]	; (80023d4 <kalibracja_gyro+0xe8>)
 8002370:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002374:	ee07 3a90 	vmov	s15, r3
 8002378:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800237c:	4b17      	ldr	r3, [pc, #92]	; (80023dc <kalibracja_gyro+0xf0>)
 800237e:	edd3 7a00 	vldr	s15, [r3]
 8002382:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002386:	4b15      	ldr	r3, [pc, #84]	; (80023dc <kalibracja_gyro+0xf0>)
 8002388:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 5000; i++) {
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	3301      	adds	r3, #1
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f241 3287 	movw	r2, #4999	; 0x1387
 8002398:	4293      	cmp	r3, r2
 800239a:	ddad      	ble.n	80022f8 <kalibracja_gyro+0xc>

	}
	gyro_calibr /= 5000; //wartosc srednia
 800239c:	4b0f      	ldr	r3, [pc, #60]	; (80023dc <kalibracja_gyro+0xf0>)
 800239e:	ed93 7a00 	vldr	s14, [r3]
 80023a2:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80023e0 <kalibracja_gyro+0xf4>
 80023a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023aa:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <kalibracja_gyro+0xf0>)
 80023ac:	edc3 7a00 	vstr	s15, [r3]

	return gyro_calibr;
 80023b0:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <kalibracja_gyro+0xf0>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	ee07 3a90 	vmov	s15, r3
}
 80023b8:	eeb0 0a67 	vmov.f32	s0, s15
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	51eb851f 	.word	0x51eb851f
 80023c8:	40020800 	.word	0x40020800
 80023cc:	200002f8 	.word	0x200002f8
 80023d0:	20000224 	.word	0x20000224
 80023d4:	20000226 	.word	0x20000226
 80023d8:	20000228 	.word	0x20000228
 80023dc:	2000022c 	.word	0x2000022c
 80023e0:	459c4000 	.word	0x459c4000
 80023e4:	00000000 	.word	0x00000000

080023e8 <pid_calculations>:

float e_n = 0;
float output = 0;

float pid_calculations(float angle, float *suma_e_n, float *poprzedni_e_n,
		float *auto_balance, float steering_angle, int16_t V_bok_apar) {
 80023e8:	b5b0      	push	{r4, r5, r7, lr}
 80023ea:	b088      	sub	sp, #32
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	ed87 0a05 	vstr	s0, [r7, #20]
 80023f2:	6138      	str	r0, [r7, #16]
 80023f4:	60f9      	str	r1, [r7, #12]
 80023f6:	60ba      	str	r2, [r7, #8]
 80023f8:	edc7 0a01 	vstr	s1, [r7, #4]
 80023fc:	807b      	strh	r3, [r7, #2]

	float potentiometer = potentiometer_value();
 80023fe:	f7fe fecd 	bl	800119c <potentiometer_value>
 8002402:	ed87 0a07 	vstr	s0, [r7, #28]
	//definicja uchybu - aktualny kat odjac kat zadany
	e_n = (theta_ref - steering_angle) - angle - potentiometer - *auto_balance;
 8002406:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8002638 <pid_calculations+0x250>
 800240a:	edd7 7a01 	vldr	s15, [r7, #4]
 800240e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002412:	edd7 7a05 	vldr	s15, [r7, #20]
 8002416:	ee37 7a67 	vsub.f32	s14, s14, s15
 800241a:	edd7 7a07 	vldr	s15, [r7, #28]
 800241e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	edd3 7a00 	vldr	s15, [r3]
 8002428:	ee77 7a67 	vsub.f32	s15, s14, s15
 800242c:	4b83      	ldr	r3, [pc, #524]	; (800263c <pid_calculations+0x254>)
 800242e:	edc3 7a00 	vstr	s15, [r3]
	//Obliczenie i ograniczenie sumy wszystkich błędów
	*suma_e_n += e_n;
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	ed93 7a00 	vldr	s14, [r3]
 8002438:	4b80      	ldr	r3, [pc, #512]	; (800263c <pid_calculations+0x254>)
 800243a:	edd3 7a00 	vldr	s15, [r3]
 800243e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	edc3 7a00 	vstr	s15, [r3]
	if (*suma_e_n > ograniczenie_regulatora)
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	edd3 7a00 	vldr	s15, [r3]
 800244e:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8002640 <pid_calculations+0x258>
 8002452:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800245a:	dd03      	ble.n	8002464 <pid_calculations+0x7c>
		*suma_e_n = ograniczenie_regulatora;
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4a79      	ldr	r2, [pc, #484]	; (8002644 <pid_calculations+0x25c>)
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	e00c      	b.n	800247e <pid_calculations+0x96>
	else if (*suma_e_n < -ograniczenie_regulatora)
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	edd3 7a00 	vldr	s15, [r3]
 800246a:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8002648 <pid_calculations+0x260>
 800246e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002476:	d502      	bpl.n	800247e <pid_calculations+0x96>
		*suma_e_n = -ograniczenie_regulatora;
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	4a74      	ldr	r2, [pc, #464]	; (800264c <pid_calculations+0x264>)
 800247c:	601a      	str	r2, [r3, #0]
	//PID
	output = k_p * e_n + k_i * *suma_e_n + k_d * (e_n - *poprzedni_e_n);
 800247e:	4b6f      	ldr	r3, [pc, #444]	; (800263c <pid_calculations+0x254>)
 8002480:	edd3 7a00 	vldr	s15, [r3]
 8002484:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002488:	ee67 7a87 	vmul.f32	s15, s15, s14
 800248c:	ee17 0a90 	vmov	r0, s15
 8002490:	f7fe f862 	bl	8000558 <__aeabi_f2d>
 8002494:	4604      	mov	r4, r0
 8002496:	460d      	mov	r5, r1
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe f85b 	bl	8000558 <__aeabi_f2d>
 80024a2:	a361      	add	r3, pc, #388	; (adr r3, 8002628 <pid_calculations+0x240>)
 80024a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a8:	f7fe f8ae 	bl	8000608 <__aeabi_dmul>
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	4620      	mov	r0, r4
 80024b2:	4629      	mov	r1, r5
 80024b4:	f7fd fef2 	bl	800029c <__adddf3>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	4614      	mov	r4, r2
 80024be:	461d      	mov	r5, r3
 80024c0:	4b5e      	ldr	r3, [pc, #376]	; (800263c <pid_calculations+0x254>)
 80024c2:	ed93 7a00 	vldr	s14, [r3]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	edd3 7a00 	vldr	s15, [r3]
 80024cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024d0:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8002650 <pid_calculations+0x268>
 80024d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024d8:	ee17 0a90 	vmov	r0, s15
 80024dc:	f7fe f83c 	bl	8000558 <__aeabi_f2d>
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	4620      	mov	r0, r4
 80024e6:	4629      	mov	r1, r5
 80024e8:	f7fd fed8 	bl	800029c <__adddf3>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	4610      	mov	r0, r2
 80024f2:	4619      	mov	r1, r3
 80024f4:	f7fe fb60 	bl	8000bb8 <__aeabi_d2f>
 80024f8:	4603      	mov	r3, r0
 80024fa:	4a56      	ldr	r2, [pc, #344]	; (8002654 <pid_calculations+0x26c>)
 80024fc:	6013      	str	r3, [r2, #0]

	//ograniczenie wyjścia PID
	if (output > ograniczenie_regulatora)
 80024fe:	4b55      	ldr	r3, [pc, #340]	; (8002654 <pid_calculations+0x26c>)
 8002500:	edd3 7a00 	vldr	s15, [r3]
 8002504:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8002640 <pid_calculations+0x258>
 8002508:	eef4 7ac7 	vcmpe.f32	s15, s14
 800250c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002510:	dd03      	ble.n	800251a <pid_calculations+0x132>
		output = ograniczenie_regulatora;
 8002512:	4b50      	ldr	r3, [pc, #320]	; (8002654 <pid_calculations+0x26c>)
 8002514:	4a4b      	ldr	r2, [pc, #300]	; (8002644 <pid_calculations+0x25c>)
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	e00c      	b.n	8002534 <pid_calculations+0x14c>
	else if (output < -ograniczenie_regulatora)
 800251a:	4b4e      	ldr	r3, [pc, #312]	; (8002654 <pid_calculations+0x26c>)
 800251c:	edd3 7a00 	vldr	s15, [r3]
 8002520:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8002648 <pid_calculations+0x260>
 8002524:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800252c:	d502      	bpl.n	8002534 <pid_calculations+0x14c>
		output = -ograniczenie_regulatora;
 800252e:	4b49      	ldr	r3, [pc, #292]	; (8002654 <pid_calculations+0x26c>)
 8002530:	4a46      	ldr	r2, [pc, #280]	; (800264c <pid_calculations+0x264>)
 8002532:	601a      	str	r2, [r3, #0]

	//Zapamiętanie ostatniego błędu
	*poprzedni_e_n = e_n;
 8002534:	4b41      	ldr	r3, [pc, #260]	; (800263c <pid_calculations+0x254>)
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	601a      	str	r2, [r3, #0]

	//przełącznik histerezowy (zapobiega ciągłym próbom regulacji w pobliżu theta_ref)
//	if (output < theta_ref + 0.1 && output > theta_ref - 0.1)
//		output = 0;
	//The self balancing point is adjusted when there is not forward or backwards movement from the transmitter. This way the robot will always find it's balancing point
	if (steering_angle == 0) {                 //If the setpoint is zero degrees
 800253c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002540:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002548:	d136      	bne.n	80025b8 <pid_calculations+0x1d0>
		if (output < 0)
 800254a:	4b42      	ldr	r3, [pc, #264]	; (8002654 <pid_calculations+0x26c>)
 800254c:	edd3 7a00 	vldr	s15, [r3]
 8002550:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002558:	d513      	bpl.n	8002582 <pid_calculations+0x19a>
			*auto_balance += 0.003; //Increase the self_balance_pid_setpoint if the robot is still moving forewards
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f7fd fffa 	bl	8000558 <__aeabi_f2d>
 8002564:	a332      	add	r3, pc, #200	; (adr r3, 8002630 <pid_calculations+0x248>)
 8002566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800256a:	f7fd fe97 	bl	800029c <__adddf3>
 800256e:	4602      	mov	r2, r0
 8002570:	460b      	mov	r3, r1
 8002572:	4610      	mov	r0, r2
 8002574:	4619      	mov	r1, r3
 8002576:	f7fe fb1f 	bl	8000bb8 <__aeabi_d2f>
 800257a:	4602      	mov	r2, r0
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	e01a      	b.n	80025b8 <pid_calculations+0x1d0>
		else if (output > 0)
 8002582:	4b34      	ldr	r3, [pc, #208]	; (8002654 <pid_calculations+0x26c>)
 8002584:	edd3 7a00 	vldr	s15, [r3]
 8002588:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800258c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002590:	dd12      	ble.n	80025b8 <pid_calculations+0x1d0>
			*auto_balance -= 0.003; //Decrease the self_balance_pid_setpoint if the robot is still moving backwards
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f7fd ffde 	bl	8000558 <__aeabi_f2d>
 800259c:	a324      	add	r3, pc, #144	; (adr r3, 8002630 <pid_calculations+0x248>)
 800259e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a2:	f7fd fe79 	bl	8000298 <__aeabi_dsub>
 80025a6:	4602      	mov	r2, r0
 80025a8:	460b      	mov	r3, r1
 80025aa:	4610      	mov	r0, r2
 80025ac:	4619      	mov	r1, r3
 80025ae:	f7fe fb03 	bl	8000bb8 <__aeabi_d2f>
 80025b2:	4602      	mov	r2, r0
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	601a      	str	r2, [r3, #0]
	}
	if (V_bok_apar < 1520 && V_bok_apar > 1480) {
 80025b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80025bc:	f5b3 6fbe 	cmp.w	r3, #1520	; 0x5f0
 80025c0:	da29      	bge.n	8002616 <pid_calculations+0x22e>
 80025c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80025c6:	f5b3 6fb9 	cmp.w	r3, #1480	; 0x5c8
 80025ca:	dd24      	ble.n	8002616 <pid_calculations+0x22e>
		if (output > 0)
 80025cc:	4b21      	ldr	r3, [pc, #132]	; (8002654 <pid_calculations+0x26c>)
 80025ce:	edd3 7a00 	vldr	s15, [r3]
 80025d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025da:	dd0a      	ble.n	80025f2 <pid_calculations+0x20a>
			output = output + 40;
 80025dc:	4b1d      	ldr	r3, [pc, #116]	; (8002654 <pid_calculations+0x26c>)
 80025de:	edd3 7a00 	vldr	s15, [r3]
 80025e2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002658 <pid_calculations+0x270>
 80025e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80025ea:	4b1a      	ldr	r3, [pc, #104]	; (8002654 <pid_calculations+0x26c>)
 80025ec:	edc3 7a00 	vstr	s15, [r3]
 80025f0:	e011      	b.n	8002616 <pid_calculations+0x22e>
		else if (output < 0)
 80025f2:	4b18      	ldr	r3, [pc, #96]	; (8002654 <pid_calculations+0x26c>)
 80025f4:	edd3 7a00 	vldr	s15, [r3]
 80025f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002600:	d509      	bpl.n	8002616 <pid_calculations+0x22e>
			output = output - 40;
 8002602:	4b14      	ldr	r3, [pc, #80]	; (8002654 <pid_calculations+0x26c>)
 8002604:	edd3 7a00 	vldr	s15, [r3]
 8002608:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002658 <pid_calculations+0x270>
 800260c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002610:	4b10      	ldr	r3, [pc, #64]	; (8002654 <pid_calculations+0x26c>)
 8002612:	edc3 7a00 	vstr	s15, [r3]
	}
	return output;
 8002616:	4b0f      	ldr	r3, [pc, #60]	; (8002654 <pid_calculations+0x26c>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	ee07 3a90 	vmov	s15, r3
}
 800261e:	eeb0 0a67 	vmov.f32	s0, s15
 8002622:	3720      	adds	r7, #32
 8002624:	46bd      	mov	sp, r7
 8002626:	bdb0      	pop	{r4, r5, r7, pc}
 8002628:	9999999a 	.word	0x9999999a
 800262c:	3fc99999 	.word	0x3fc99999
 8002630:	bc6a7efa 	.word	0xbc6a7efa
 8002634:	3f689374 	.word	0x3f689374
 8002638:	42aa0000 	.word	0x42aa0000
 800263c:	20000238 	.word	0x20000238
 8002640:	43c80000 	.word	0x43c80000
 8002644:	43c80000 	.word	0x43c80000
 8002648:	c3c80000 	.word	0xc3c80000
 800264c:	c3c80000 	.word	0xc3c80000
 8002650:	449c4000 	.word	0x449c4000
 8002654:	2000023c 	.word	0x2000023c
 8002658:	42200000 	.word	0x42200000

0800265c <camera_angle>:
 *      Author: Damian
 */

#include "servo.h"

void camera_angle(float angle) {
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af02      	add	r7, sp, #8
 8002662:	ed87 0a01 	vstr	s0, [r7, #4]
	int32_t value;
	if (angle < 1)
 8002666:	edd7 7a01 	vldr	s15, [r7, #4]
 800266a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800266e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002676:	d502      	bpl.n	800267e <camera_angle+0x22>
		angle = 0;
 8002678:	f04f 0300 	mov.w	r3, #0
 800267c:	607b      	str	r3, [r7, #4]
	if (angle >= 90)
 800267e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002682:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80026c4 <camera_angle+0x68>
 8002686:	eef4 7ac7 	vcmpe.f32	s15, s14
 800268a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800268e:	db01      	blt.n	8002694 <camera_angle+0x38>
		angle = 90;
 8002690:	4b0d      	ldr	r3, [pc, #52]	; (80026c8 <camera_angle+0x6c>)
 8002692:	607b      	str	r3, [r7, #4]
	value = map(angle, 0, 90, 950, 1750);
 8002694:	edd7 7a01 	vldr	s15, [r7, #4]
 8002698:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800269c:	f240 63d6 	movw	r3, #1750	; 0x6d6
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	f240 33b6 	movw	r3, #950	; 0x3b6
 80026a6:	225a      	movs	r2, #90	; 0x5a
 80026a8:	2100      	movs	r1, #0
 80026aa:	ee17 0a90 	vmov	r0, s15
 80026ae:	f7fe fd2b 	bl	8001108 <map>
 80026b2:	60f8      	str	r0, [r7, #12]
	__HAL_TIM_SET_COMPARE(servoTIM, TIM_CHANNEL_1, value);
 80026b4:	4b05      	ldr	r3, [pc, #20]	; (80026cc <camera_angle+0x70>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	635a      	str	r2, [r3, #52]	; 0x34
}
 80026bc:	bf00      	nop
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	42b40000 	.word	0x42b40000
 80026c8:	42b40000 	.word	0x42b40000
 80026cc:	200003ac 	.word	0x200003ac

080026d0 <horizontal_control>:
int16_t VR_out = 0;
int16_t V_nierownosc = 0;
int16_t Relay_SW = 0;
int16_t balancing_mode = 0;

void horizontal_control(uint16_t *control_data) {
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af02      	add	r7, sp, #8
 80026d6:	6078      	str	r0, [r7, #4]
	V_bok_apar = control_data[1 - 1];	//predkosc boki
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	881b      	ldrh	r3, [r3, #0]
 80026dc:	b21a      	sxth	r2, r3
 80026de:	4b5e      	ldr	r3, [pc, #376]	; (8002858 <horizontal_control+0x188>)
 80026e0:	801a      	strh	r2, [r3, #0]
	V_apar = control_data[2 - 1];   //predkosc
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3302      	adds	r3, #2
 80026e6:	881b      	ldrh	r3, [r3, #0]
 80026e8:	b21a      	sxth	r2, r3
 80026ea:	4b5c      	ldr	r3, [pc, #368]	; (800285c <horizontal_control+0x18c>)
 80026ec:	801a      	strh	r2, [r3, #0]
	V_max_apar = control_data[5 - 1];	//regulacja predkosci silnikow
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	3308      	adds	r3, #8
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	b21a      	sxth	r2, r3
 80026f6:	4b5a      	ldr	r3, [pc, #360]	; (8002860 <horizontal_control+0x190>)
 80026f8:	801a      	strh	r2, [r3, #0]
	Relay_SW = control_data[6 - 1];	//zalacz silniki
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	330a      	adds	r3, #10
 80026fe:	881b      	ldrh	r3, [r3, #0]
 8002700:	b21a      	sxth	r2, r3
 8002702:	4b58      	ldr	r3, [pc, #352]	; (8002864 <horizontal_control+0x194>)
 8002704:	801a      	strh	r2, [r3, #0]
	balancing_mode = control_data[8 - 1];
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	330e      	adds	r3, #14
 800270a:	881b      	ldrh	r3, [r3, #0]
 800270c:	b21a      	sxth	r2, r3
 800270e:	4b56      	ldr	r3, [pc, #344]	; (8002868 <horizontal_control+0x198>)
 8002710:	801a      	strh	r2, [r3, #0]

	V_max = map(V_max_apar, 1000, 2000, 0, 500);
 8002712:	4b53      	ldr	r3, [pc, #332]	; (8002860 <horizontal_control+0x190>)
 8002714:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002718:	4618      	mov	r0, r3
 800271a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	2300      	movs	r3, #0
 8002722:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002726:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800272a:	f7fe fced 	bl	8001108 <map>
 800272e:	4603      	mov	r3, r0
 8002730:	b21a      	sxth	r2, r3
 8002732:	4b4e      	ldr	r3, [pc, #312]	; (800286c <horizontal_control+0x19c>)
 8002734:	801a      	strh	r2, [r3, #0]
	//                                      / tu jest wartocm maskymalnej rotacji
	Fi_max = map(Fi_max_apar, 1000, 2000, 0, 200);
 8002736:	4b4e      	ldr	r3, [pc, #312]	; (8002870 <horizontal_control+0x1a0>)
 8002738:	f9b3 3000 	ldrsh.w	r3, [r3]
 800273c:	4618      	mov	r0, r3
 800273e:	23c8      	movs	r3, #200	; 0xc8
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	2300      	movs	r3, #0
 8002744:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002748:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800274c:	f7fe fcdc 	bl	8001108 <map>
 8002750:	4603      	mov	r3, r0
 8002752:	b21a      	sxth	r2, r3
 8002754:	4b47      	ldr	r3, [pc, #284]	; (8002874 <horizontal_control+0x1a4>)
 8002756:	801a      	strh	r2, [r3, #0]

	if ((Relay_SW > 1900) && (Relay_SW < 2100)) {
 8002758:	4b42      	ldr	r3, [pc, #264]	; (8002864 <horizontal_control+0x194>)
 800275a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800275e:	f240 726c 	movw	r2, #1900	; 0x76c
 8002762:	4293      	cmp	r3, r2
 8002764:	dd0a      	ble.n	800277c <horizontal_control+0xac>
 8002766:	4b3f      	ldr	r3, [pc, #252]	; (8002864 <horizontal_control+0x194>)
 8002768:	f9b3 3000 	ldrsh.w	r3, [r3]
 800276c:	f640 0233 	movw	r2, #2099	; 0x833
 8002770:	4293      	cmp	r3, r2
 8002772:	dc03      	bgt.n	800277c <horizontal_control+0xac>
		Jazda = 1;
 8002774:	4b40      	ldr	r3, [pc, #256]	; (8002878 <horizontal_control+0x1a8>)
 8002776:	2201      	movs	r2, #1
 8002778:	801a      	strh	r2, [r3, #0]
 800277a:	e002      	b.n	8002782 <horizontal_control+0xb2>
	} else {
		Jazda = 0;
 800277c:	4b3e      	ldr	r3, [pc, #248]	; (8002878 <horizontal_control+0x1a8>)
 800277e:	2200      	movs	r2, #0
 8002780:	801a      	strh	r2, [r3, #0]
	}

	if (Jazda == 1) {
 8002782:	4b3d      	ldr	r3, [pc, #244]	; (8002878 <horizontal_control+0x1a8>)
 8002784:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d132      	bne.n	80027f2 <horizontal_control+0x122>
		Robot_V = -map(V_apar, 1000, 2000, -V_max, V_max);
 800278c:	4b33      	ldr	r3, [pc, #204]	; (800285c <horizontal_control+0x18c>)
 800278e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002792:	4618      	mov	r0, r3
 8002794:	4b35      	ldr	r3, [pc, #212]	; (800286c <horizontal_control+0x19c>)
 8002796:	f9b3 3000 	ldrsh.w	r3, [r3]
 800279a:	425b      	negs	r3, r3
 800279c:	4a33      	ldr	r2, [pc, #204]	; (800286c <horizontal_control+0x19c>)
 800279e:	f9b2 2000 	ldrsh.w	r2, [r2]
 80027a2:	9200      	str	r2, [sp, #0]
 80027a4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80027a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80027ac:	f7fe fcac 	bl	8001108 <map>
 80027b0:	4603      	mov	r3, r0
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	425b      	negs	r3, r3
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	b21a      	sxth	r2, r3
 80027ba:	4b30      	ldr	r3, [pc, #192]	; (800287c <horizontal_control+0x1ac>)
 80027bc:	801a      	strh	r2, [r3, #0]
		Robot_Fi = -map(V_bok_apar, 1000, 2000, -Fi_max, Fi_max);
 80027be:	4b26      	ldr	r3, [pc, #152]	; (8002858 <horizontal_control+0x188>)
 80027c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027c4:	4618      	mov	r0, r3
 80027c6:	4b2b      	ldr	r3, [pc, #172]	; (8002874 <horizontal_control+0x1a4>)
 80027c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027cc:	425b      	negs	r3, r3
 80027ce:	4a29      	ldr	r2, [pc, #164]	; (8002874 <horizontal_control+0x1a4>)
 80027d0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80027d4:	9200      	str	r2, [sp, #0]
 80027d6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80027da:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80027de:	f7fe fc93 	bl	8001108 <map>
 80027e2:	4603      	mov	r3, r0
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	425b      	negs	r3, r3
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	b21a      	sxth	r2, r3
 80027ec:	4b24      	ldr	r3, [pc, #144]	; (8002880 <horizontal_control+0x1b0>)
 80027ee:	801a      	strh	r2, [r3, #0]
 80027f0:	e005      	b.n	80027fe <horizontal_control+0x12e>
	} else {
		Robot_V = 0;
 80027f2:	4b22      	ldr	r3, [pc, #136]	; (800287c <horizontal_control+0x1ac>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	801a      	strh	r2, [r3, #0]
		Robot_Fi = 0;
 80027f8:	4b21      	ldr	r3, [pc, #132]	; (8002880 <horizontal_control+0x1b0>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	801a      	strh	r2, [r3, #0]
	}
	if ((Robot_V < 5) && (Robot_V > -5))
 80027fe:	4b1f      	ldr	r3, [pc, #124]	; (800287c <horizontal_control+0x1ac>)
 8002800:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002804:	2b04      	cmp	r3, #4
 8002806:	dc08      	bgt.n	800281a <horizontal_control+0x14a>
 8002808:	4b1c      	ldr	r3, [pc, #112]	; (800287c <horizontal_control+0x1ac>)
 800280a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800280e:	f113 0f04 	cmn.w	r3, #4
 8002812:	db02      	blt.n	800281a <horizontal_control+0x14a>
		Robot_V = 0;
 8002814:	4b19      	ldr	r3, [pc, #100]	; (800287c <horizontal_control+0x1ac>)
 8002816:	2200      	movs	r2, #0
 8002818:	801a      	strh	r2, [r3, #0]
	if ((Robot_Fi < 5) && (Robot_Fi > -5))
 800281a:	4b19      	ldr	r3, [pc, #100]	; (8002880 <horizontal_control+0x1b0>)
 800281c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002820:	2b04      	cmp	r3, #4
 8002822:	dc08      	bgt.n	8002836 <horizontal_control+0x166>
 8002824:	4b16      	ldr	r3, [pc, #88]	; (8002880 <horizontal_control+0x1b0>)
 8002826:	f9b3 3000 	ldrsh.w	r3, [r3]
 800282a:	f113 0f04 	cmn.w	r3, #4
 800282e:	db02      	blt.n	8002836 <horizontal_control+0x166>
		Robot_Fi = 0;
 8002830:	4b13      	ldr	r3, [pc, #76]	; (8002880 <horizontal_control+0x1b0>)
 8002832:	2200      	movs	r2, #0
 8002834:	801a      	strh	r2, [r3, #0]

	Send(Robot_Fi, Robot_V);
 8002836:	4b12      	ldr	r3, [pc, #72]	; (8002880 <horizontal_control+0x1b0>)
 8002838:	f9b3 3000 	ldrsh.w	r3, [r3]
 800283c:	4a0f      	ldr	r2, [pc, #60]	; (800287c <horizontal_control+0x1ac>)
 800283e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002842:	4611      	mov	r1, r2
 8002844:	4618      	mov	r0, r3
 8002846:	f7fe fd81 	bl	800134c <Send>
	HAL_Delay(7);//need wait a little before next usage, may reduce later (should be at least 7 ms)
 800284a:	2007      	movs	r0, #7
 800284c:	f000 fe1e 	bl	800348c <HAL_Delay>
}
 8002850:	bf00      	nop
 8002852:	3708      	adds	r7, #8
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	20000248 	.word	0x20000248
 800285c:	20000246 	.word	0x20000246
 8002860:	2000024a 	.word	0x2000024a
 8002864:	20000252 	.word	0x20000252
 8002868:	20000254 	.word	0x20000254
 800286c:	2000024e 	.word	0x2000024e
 8002870:	2000024c 	.word	0x2000024c
 8002874:	20000250 	.word	0x20000250
 8002878:	20000240 	.word	0x20000240
 800287c:	20000242 	.word	0x20000242
 8002880:	20000244 	.word	0x20000244

08002884 <vertical_control>:

float pid_output = 0, suma_e_n = 0, steering_angle = 0, poprzedni_e_n = 0,
		auto_balance = 0;
int start;
int vertical_control(uint16_t *control_data, float angle) {
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af02      	add	r7, sp, #8
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	ed87 0a00 	vstr	s0, [r7]

	V_bok_apar = control_data[1 - 1];	//predkosc boki
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	881b      	ldrh	r3, [r3, #0]
 8002894:	b21a      	sxth	r2, r3
 8002896:	4b91      	ldr	r3, [pc, #580]	; (8002adc <vertical_control+0x258>)
 8002898:	801a      	strh	r2, [r3, #0]
	V_apar = control_data[2 - 1];   //predkosc
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	3302      	adds	r3, #2
 800289e:	881b      	ldrh	r3, [r3, #0]
 80028a0:	b21a      	sxth	r2, r3
 80028a2:	4b8f      	ldr	r3, [pc, #572]	; (8002ae0 <vertical_control+0x25c>)
 80028a4:	801a      	strh	r2, [r3, #0]
	V_max_apar = control_data[5 - 1];	//regulacja predkosci silnikow
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	3308      	adds	r3, #8
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	b21a      	sxth	r2, r3
 80028ae:	4b8d      	ldr	r3, [pc, #564]	; (8002ae4 <vertical_control+0x260>)
 80028b0:	801a      	strh	r2, [r3, #0]
	Relay_SW = control_data[6 - 1];	//zalacz silniki
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	330a      	adds	r3, #10
 80028b6:	881b      	ldrh	r3, [r3, #0]
 80028b8:	b21a      	sxth	r2, r3
 80028ba:	4b8b      	ldr	r3, [pc, #556]	; (8002ae8 <vertical_control+0x264>)
 80028bc:	801a      	strh	r2, [r3, #0]
	balancing_mode = control_data[8 - 1];
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	330e      	adds	r3, #14
 80028c2:	881b      	ldrh	r3, [r3, #0]
 80028c4:	b21a      	sxth	r2, r3
 80028c6:	4b89      	ldr	r3, [pc, #548]	; (8002aec <vertical_control+0x268>)
 80028c8:	801a      	strh	r2, [r3, #0]


	V_max = map(V_max_apar, 1000, 2000, 0, 7); //zadawany kat
 80028ca:	4b86      	ldr	r3, [pc, #536]	; (8002ae4 <vertical_control+0x260>)
 80028cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028d0:	4618      	mov	r0, r3
 80028d2:	2307      	movs	r3, #7
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	2300      	movs	r3, #0
 80028d8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80028dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80028e0:	f7fe fc12 	bl	8001108 <map>
 80028e4:	4603      	mov	r3, r0
 80028e6:	b21a      	sxth	r2, r3
 80028e8:	4b81      	ldr	r3, [pc, #516]	; (8002af0 <vertical_control+0x26c>)
 80028ea:	801a      	strh	r2, [r3, #0]
	//                                      / tu jest wartocm maskymalnej rotacji
	Fi_max = map(Fi_max_apar, 1000, 2000, 0, 200);
 80028ec:	4b81      	ldr	r3, [pc, #516]	; (8002af4 <vertical_control+0x270>)
 80028ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028f2:	4618      	mov	r0, r3
 80028f4:	23c8      	movs	r3, #200	; 0xc8
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	2300      	movs	r3, #0
 80028fa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80028fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002902:	f7fe fc01 	bl	8001108 <map>
 8002906:	4603      	mov	r3, r0
 8002908:	b21a      	sxth	r2, r3
 800290a:	4b7b      	ldr	r3, [pc, #492]	; (8002af8 <vertical_control+0x274>)
 800290c:	801a      	strh	r2, [r3, #0]

	steering_angle = mapfloat((float) V_apar, 1000, 2000, (float) -V_max,
 800290e:	4b74      	ldr	r3, [pc, #464]	; (8002ae0 <vertical_control+0x25c>)
 8002910:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002914:	ee07 3a90 	vmov	s15, r3
 8002918:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800291c:	4b74      	ldr	r3, [pc, #464]	; (8002af0 <vertical_control+0x26c>)
 800291e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002922:	425b      	negs	r3, r3
 8002924:	ee07 3a10 	vmov	s14, r3
 8002928:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800292c:	4b70      	ldr	r3, [pc, #448]	; (8002af0 <vertical_control+0x26c>)
 800292e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002932:	ee06 3a90 	vmov	s13, r3
 8002936:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800293a:	eeb0 2a66 	vmov.f32	s4, s13
 800293e:	eef0 1a47 	vmov.f32	s3, s14
 8002942:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 8002afc <vertical_control+0x278>
 8002946:	eddf 0a6e 	vldr	s1, [pc, #440]	; 8002b00 <vertical_control+0x27c>
 800294a:	eeb0 0a67 	vmov.f32	s0, s15
 800294e:	f7fe fbf7 	bl	8001140 <mapfloat>
 8002952:	eef0 7a40 	vmov.f32	s15, s0
 8002956:	4b6b      	ldr	r3, [pc, #428]	; (8002b04 <vertical_control+0x280>)
 8002958:	edc3 7a00 	vstr	s15, [r3]
			(float) V_max);
	pid_output = pid_calculations(angle, &suma_e_n, &poprzedni_e_n,
 800295c:	4b69      	ldr	r3, [pc, #420]	; (8002b04 <vertical_control+0x280>)
 800295e:	edd3 7a00 	vldr	s15, [r3]
 8002962:	4b5e      	ldr	r3, [pc, #376]	; (8002adc <vertical_control+0x258>)
 8002964:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002968:	eef0 0a67 	vmov.f32	s1, s15
 800296c:	4a66      	ldr	r2, [pc, #408]	; (8002b08 <vertical_control+0x284>)
 800296e:	4967      	ldr	r1, [pc, #412]	; (8002b0c <vertical_control+0x288>)
 8002970:	4867      	ldr	r0, [pc, #412]	; (8002b10 <vertical_control+0x28c>)
 8002972:	ed97 0a00 	vldr	s0, [r7]
 8002976:	f7ff fd37 	bl	80023e8 <pid_calculations>
 800297a:	eef0 7a40 	vmov.f32	s15, s0
 800297e:	4b65      	ldr	r3, [pc, #404]	; (8002b14 <vertical_control+0x290>)
 8002980:	edc3 7a00 	vstr	s15, [r3]
			&auto_balance, steering_angle, V_bok_apar);

	if ((Relay_SW > 1900) && (Relay_SW < 2100) && angle > (theta_ref - 45)
 8002984:	4b58      	ldr	r3, [pc, #352]	; (8002ae8 <vertical_control+0x264>)
 8002986:	f9b3 3000 	ldrsh.w	r3, [r3]
 800298a:	f240 726c 	movw	r2, #1900	; 0x76c
 800298e:	4293      	cmp	r3, r2
 8002990:	dd2d      	ble.n	80029ee <vertical_control+0x16a>
 8002992:	4b55      	ldr	r3, [pc, #340]	; (8002ae8 <vertical_control+0x264>)
 8002994:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002998:	f640 0233 	movw	r2, #2099	; 0x833
 800299c:	4293      	cmp	r3, r2
 800299e:	dc26      	bgt.n	80029ee <vertical_control+0x16a>
 80029a0:	edd7 7a00 	vldr	s15, [r7]
 80029a4:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8002b18 <vertical_control+0x294>
 80029a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029b0:	dd1d      	ble.n	80029ee <vertical_control+0x16a>
			&& angle < (theta_ref + 45) && (balancing_mode > 1900)
 80029b2:	edd7 7a00 	vldr	s15, [r7]
 80029b6:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8002b1c <vertical_control+0x298>
 80029ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029c2:	d514      	bpl.n	80029ee <vertical_control+0x16a>
 80029c4:	4b49      	ldr	r3, [pc, #292]	; (8002aec <vertical_control+0x268>)
 80029c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029ca:	f240 726c 	movw	r2, #1900	; 0x76c
 80029ce:	4293      	cmp	r3, r2
 80029d0:	dd0d      	ble.n	80029ee <vertical_control+0x16a>
			&& (balancing_mode < 2100)) {
 80029d2:	4b46      	ldr	r3, [pc, #280]	; (8002aec <vertical_control+0x268>)
 80029d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029d8:	f640 0233 	movw	r2, #2099	; 0x833
 80029dc:	4293      	cmp	r3, r2
 80029de:	dc06      	bgt.n	80029ee <vertical_control+0x16a>
		Jazda = 1;
 80029e0:	4b4f      	ldr	r3, [pc, #316]	; (8002b20 <vertical_control+0x29c>)
 80029e2:	2201      	movs	r2, #1
 80029e4:	801a      	strh	r2, [r3, #0]
		start = 1;
 80029e6:	4b4f      	ldr	r3, [pc, #316]	; (8002b24 <vertical_control+0x2a0>)
 80029e8:	2201      	movs	r2, #1
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	e015      	b.n	8002a1a <vertical_control+0x196>
	} else {
		Jazda = 0;
 80029ee:	4b4c      	ldr	r3, [pc, #304]	; (8002b20 <vertical_control+0x29c>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	801a      	strh	r2, [r3, #0]
		suma_e_n = 0;
 80029f4:	4b46      	ldr	r3, [pc, #280]	; (8002b10 <vertical_control+0x28c>)
 80029f6:	f04f 0200 	mov.w	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
		pid_output = 0;
 80029fc:	4b45      	ldr	r3, [pc, #276]	; (8002b14 <vertical_control+0x290>)
 80029fe:	f04f 0200 	mov.w	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
		start = 0;
 8002a04:	4b47      	ldr	r3, [pc, #284]	; (8002b24 <vertical_control+0x2a0>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]
		poprzedni_e_n = 0;
 8002a0a:	4b40      	ldr	r3, [pc, #256]	; (8002b0c <vertical_control+0x288>)
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	601a      	str	r2, [r3, #0]
		auto_balance = 0;
 8002a12:	4b3d      	ldr	r3, [pc, #244]	; (8002b08 <vertical_control+0x284>)
 8002a14:	f04f 0200 	mov.w	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
	}

	if (Jazda == 1) {
 8002a1a:	4b41      	ldr	r3, [pc, #260]	; (8002b20 <vertical_control+0x29c>)
 8002a1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d125      	bne.n	8002a70 <vertical_control+0x1ec>
		Robot_V = -pid_output;
 8002a24:	4b3b      	ldr	r3, [pc, #236]	; (8002b14 <vertical_control+0x290>)
 8002a26:	edd3 7a00 	vldr	s15, [r3]
 8002a2a:	eef1 7a67 	vneg.f32	s15, s15
 8002a2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a32:	ee17 3a90 	vmov	r3, s15
 8002a36:	b21a      	sxth	r2, r3
 8002a38:	4b3b      	ldr	r3, [pc, #236]	; (8002b28 <vertical_control+0x2a4>)
 8002a3a:	801a      	strh	r2, [r3, #0]
		Robot_Fi = -map(V_bok_apar, 1000, 2000, -Fi_max, Fi_max);
 8002a3c:	4b27      	ldr	r3, [pc, #156]	; (8002adc <vertical_control+0x258>)
 8002a3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a42:	4618      	mov	r0, r3
 8002a44:	4b2c      	ldr	r3, [pc, #176]	; (8002af8 <vertical_control+0x274>)
 8002a46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a4a:	425b      	negs	r3, r3
 8002a4c:	4a2a      	ldr	r2, [pc, #168]	; (8002af8 <vertical_control+0x274>)
 8002a4e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002a52:	9200      	str	r2, [sp, #0]
 8002a54:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002a58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002a5c:	f7fe fb54 	bl	8001108 <map>
 8002a60:	4603      	mov	r3, r0
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	425b      	negs	r3, r3
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	b21a      	sxth	r2, r3
 8002a6a:	4b30      	ldr	r3, [pc, #192]	; (8002b2c <vertical_control+0x2a8>)
 8002a6c:	801a      	strh	r2, [r3, #0]
 8002a6e:	e005      	b.n	8002a7c <vertical_control+0x1f8>
	} else {
		Robot_V = 0;
 8002a70:	4b2d      	ldr	r3, [pc, #180]	; (8002b28 <vertical_control+0x2a4>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	801a      	strh	r2, [r3, #0]
		Robot_Fi = 0;
 8002a76:	4b2d      	ldr	r3, [pc, #180]	; (8002b2c <vertical_control+0x2a8>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	801a      	strh	r2, [r3, #0]
	}
	if ((Robot_V < 1) && (Robot_V > -1))
 8002a7c:	4b2a      	ldr	r3, [pc, #168]	; (8002b28 <vertical_control+0x2a4>)
 8002a7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	dc07      	bgt.n	8002a96 <vertical_control+0x212>
 8002a86:	4b28      	ldr	r3, [pc, #160]	; (8002b28 <vertical_control+0x2a4>)
 8002a88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	db02      	blt.n	8002a96 <vertical_control+0x212>
		Robot_V = 0;
 8002a90:	4b25      	ldr	r3, [pc, #148]	; (8002b28 <vertical_control+0x2a4>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	801a      	strh	r2, [r3, #0]
	if ((Robot_Fi < 5) && (Robot_Fi > -5))
 8002a96:	4b25      	ldr	r3, [pc, #148]	; (8002b2c <vertical_control+0x2a8>)
 8002a98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a9c:	2b04      	cmp	r3, #4
 8002a9e:	dc08      	bgt.n	8002ab2 <vertical_control+0x22e>
 8002aa0:	4b22      	ldr	r3, [pc, #136]	; (8002b2c <vertical_control+0x2a8>)
 8002aa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aa6:	f113 0f04 	cmn.w	r3, #4
 8002aaa:	db02      	blt.n	8002ab2 <vertical_control+0x22e>
		Robot_Fi = 0;
 8002aac:	4b1f      	ldr	r3, [pc, #124]	; (8002b2c <vertical_control+0x2a8>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	801a      	strh	r2, [r3, #0]

//	Robot_V = pid_output;
//	Robot_Fi = 0;
	Send(Robot_Fi, Robot_V);
 8002ab2:	4b1e      	ldr	r3, [pc, #120]	; (8002b2c <vertical_control+0x2a8>)
 8002ab4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ab8:	4a1b      	ldr	r2, [pc, #108]	; (8002b28 <vertical_control+0x2a4>)
 8002aba:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002abe:	4611      	mov	r1, r2
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7fe fc43 	bl	800134c <Send>
	if (start == 1)
 8002ac6:	4b17      	ldr	r3, [pc, #92]	; (8002b24 <vertical_control+0x2a0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d101      	bne.n	8002ad2 <vertical_control+0x24e>
		return 2;
 8002ace:	2302      	movs	r3, #2
 8002ad0:	e000      	b.n	8002ad4 <vertical_control+0x250>
	else
		return 3;
 8002ad2:	2303      	movs	r3, #3
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	20000248 	.word	0x20000248
 8002ae0:	20000246 	.word	0x20000246
 8002ae4:	2000024a 	.word	0x2000024a
 8002ae8:	20000252 	.word	0x20000252
 8002aec:	20000254 	.word	0x20000254
 8002af0:	2000024e 	.word	0x2000024e
 8002af4:	2000024c 	.word	0x2000024c
 8002af8:	20000250 	.word	0x20000250
 8002afc:	44fa0000 	.word	0x44fa0000
 8002b00:	447a0000 	.word	0x447a0000
 8002b04:	20000260 	.word	0x20000260
 8002b08:	20000268 	.word	0x20000268
 8002b0c:	20000264 	.word	0x20000264
 8002b10:	2000025c 	.word	0x2000025c
 8002b14:	20000258 	.word	0x20000258
 8002b18:	42200000 	.word	0x42200000
 8002b1c:	43020000 	.word	0x43020000
 8002b20:	20000240 	.word	0x20000240
 8002b24:	20000360 	.word	0x20000360
 8002b28:	20000242 	.word	0x20000242
 8002b2c:	20000244 	.word	0x20000244

08002b30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b36:	2300      	movs	r3, #0
 8002b38:	607b      	str	r3, [r7, #4]
 8002b3a:	4b10      	ldr	r3, [pc, #64]	; (8002b7c <HAL_MspInit+0x4c>)
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3e:	4a0f      	ldr	r2, [pc, #60]	; (8002b7c <HAL_MspInit+0x4c>)
 8002b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b44:	6453      	str	r3, [r2, #68]	; 0x44
 8002b46:	4b0d      	ldr	r3, [pc, #52]	; (8002b7c <HAL_MspInit+0x4c>)
 8002b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b4e:	607b      	str	r3, [r7, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b52:	2300      	movs	r3, #0
 8002b54:	603b      	str	r3, [r7, #0]
 8002b56:	4b09      	ldr	r3, [pc, #36]	; (8002b7c <HAL_MspInit+0x4c>)
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	4a08      	ldr	r2, [pc, #32]	; (8002b7c <HAL_MspInit+0x4c>)
 8002b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b60:	6413      	str	r3, [r2, #64]	; 0x40
 8002b62:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <HAL_MspInit+0x4c>)
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6a:	603b      	str	r3, [r7, #0]
 8002b6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	40023800 	.word	0x40023800

08002b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b84:	e7fe      	b.n	8002b84 <NMI_Handler+0x4>

08002b86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b86:	b480      	push	{r7}
 8002b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b8a:	e7fe      	b.n	8002b8a <HardFault_Handler+0x4>

08002b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b90:	e7fe      	b.n	8002b90 <MemManage_Handler+0x4>

08002b92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b92:	b480      	push	{r7}
 8002b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b96:	e7fe      	b.n	8002b96 <BusFault_Handler+0x4>

08002b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b9c:	e7fe      	b.n	8002b9c <UsageFault_Handler+0x4>

08002b9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ba2:	bf00      	nop
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bb0:	bf00      	nop
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bbe:	bf00      	nop
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bcc:	f000 fc3e 	bl	800344c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bd0:	bf00      	nop
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002bd8:	4802      	ldr	r0, [pc, #8]	; (8002be4 <USART2_IRQHandler+0x10>)
 8002bda:	f004 fa71 	bl	80070c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002bde:	bf00      	nop
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	200004dc 	.word	0x200004dc

08002be8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002bec:	4802      	ldr	r0, [pc, #8]	; (8002bf8 <DMA2_Stream2_IRQHandler+0x10>)
 8002bee:	f001 fac9 	bl	8004184 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002bf2:	bf00      	nop
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	200003f4 	.word	0x200003f4

08002bfc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
	return 1;
 8002c00:	2301      	movs	r3, #1
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <_kill>:

int _kill(int pid, int sig)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002c16:	f005 facf 	bl	80081b8 <__errno>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2216      	movs	r2, #22
 8002c1e:	601a      	str	r2, [r3, #0]
	return -1;
 8002c20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <_exit>:

void _exit (int status)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002c34:	f04f 31ff 	mov.w	r1, #4294967295
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f7ff ffe7 	bl	8002c0c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002c3e:	e7fe      	b.n	8002c3e <_exit+0x12>

08002c40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	617b      	str	r3, [r7, #20]
 8002c50:	e00a      	b.n	8002c68 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c52:	f3af 8000 	nop.w
 8002c56:	4601      	mov	r1, r0
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	1c5a      	adds	r2, r3, #1
 8002c5c:	60ba      	str	r2, [r7, #8]
 8002c5e:	b2ca      	uxtb	r2, r1
 8002c60:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	3301      	adds	r3, #1
 8002c66:	617b      	str	r3, [r7, #20]
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	dbf0      	blt.n	8002c52 <_read+0x12>
	}

return len;
 8002c70:	687b      	ldr	r3, [r7, #4]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3718      	adds	r7, #24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b086      	sub	sp, #24
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	60f8      	str	r0, [r7, #12]
 8002c82:	60b9      	str	r1, [r7, #8]
 8002c84:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c86:	2300      	movs	r3, #0
 8002c88:	617b      	str	r3, [r7, #20]
 8002c8a:	e009      	b.n	8002ca0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	1c5a      	adds	r2, r3, #1
 8002c90:	60ba      	str	r2, [r7, #8]
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	617b      	str	r3, [r7, #20]
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	dbf1      	blt.n	8002c8c <_write+0x12>
	}
	return len;
 8002ca8:	687b      	ldr	r3, [r7, #4]
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3718      	adds	r7, #24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <_close>:

int _close(int file)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b083      	sub	sp, #12
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
	return -1;
 8002cba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
 8002cd2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cda:	605a      	str	r2, [r3, #4]
	return 0;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <_isatty>:

int _isatty(int file)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
	return 1;
 8002cf2:	2301      	movs	r3, #1
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
	return 0;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
	...

08002d1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d24:	4a14      	ldr	r2, [pc, #80]	; (8002d78 <_sbrk+0x5c>)
 8002d26:	4b15      	ldr	r3, [pc, #84]	; (8002d7c <_sbrk+0x60>)
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d30:	4b13      	ldr	r3, [pc, #76]	; (8002d80 <_sbrk+0x64>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d102      	bne.n	8002d3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d38:	4b11      	ldr	r3, [pc, #68]	; (8002d80 <_sbrk+0x64>)
 8002d3a:	4a12      	ldr	r2, [pc, #72]	; (8002d84 <_sbrk+0x68>)
 8002d3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d3e:	4b10      	ldr	r3, [pc, #64]	; (8002d80 <_sbrk+0x64>)
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4413      	add	r3, r2
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d207      	bcs.n	8002d5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d4c:	f005 fa34 	bl	80081b8 <__errno>
 8002d50:	4603      	mov	r3, r0
 8002d52:	220c      	movs	r2, #12
 8002d54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d56:	f04f 33ff 	mov.w	r3, #4294967295
 8002d5a:	e009      	b.n	8002d70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d5c:	4b08      	ldr	r3, [pc, #32]	; (8002d80 <_sbrk+0x64>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d62:	4b07      	ldr	r3, [pc, #28]	; (8002d80 <_sbrk+0x64>)
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4413      	add	r3, r2
 8002d6a:	4a05      	ldr	r2, [pc, #20]	; (8002d80 <_sbrk+0x64>)
 8002d6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3718      	adds	r7, #24
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	20010000 	.word	0x20010000
 8002d7c:	00000400 	.word	0x00000400
 8002d80:	2000026c 	.word	0x2000026c
 8002d84:	20000538 	.word	0x20000538

08002d88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d8c:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <SystemInit+0x20>)
 8002d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d92:	4a05      	ldr	r2, [pc, #20]	; (8002da8 <SystemInit+0x20>)
 8002d94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d9c:	bf00      	nop
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	e000ed00 	.word	0xe000ed00

08002dac <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b08e      	sub	sp, #56	; 0x38
 8002db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002db2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002db6:	2200      	movs	r2, #0
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	605a      	str	r2, [r3, #4]
 8002dbc:	609a      	str	r2, [r3, #8]
 8002dbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dc0:	f107 0320 	add.w	r3, r7, #32
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dca:	1d3b      	adds	r3, r7, #4
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	605a      	str	r2, [r3, #4]
 8002dd2:	609a      	str	r2, [r3, #8]
 8002dd4:	60da      	str	r2, [r3, #12]
 8002dd6:	611a      	str	r2, [r3, #16]
 8002dd8:	615a      	str	r2, [r3, #20]
 8002dda:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ddc:	4b31      	ldr	r3, [pc, #196]	; (8002ea4 <MX_TIM3_Init+0xf8>)
 8002dde:	4a32      	ldr	r2, [pc, #200]	; (8002ea8 <MX_TIM3_Init+0xfc>)
 8002de0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 25-1;
 8002de2:	4b30      	ldr	r3, [pc, #192]	; (8002ea4 <MX_TIM3_Init+0xf8>)
 8002de4:	2218      	movs	r2, #24
 8002de6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002de8:	4b2e      	ldr	r3, [pc, #184]	; (8002ea4 <MX_TIM3_Init+0xf8>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 125-1;
 8002dee:	4b2d      	ldr	r3, [pc, #180]	; (8002ea4 <MX_TIM3_Init+0xf8>)
 8002df0:	227c      	movs	r2, #124	; 0x7c
 8002df2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002df4:	4b2b      	ldr	r3, [pc, #172]	; (8002ea4 <MX_TIM3_Init+0xf8>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002dfa:	4b2a      	ldr	r3, [pc, #168]	; (8002ea4 <MX_TIM3_Init+0xf8>)
 8002dfc:	2280      	movs	r2, #128	; 0x80
 8002dfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002e00:	4828      	ldr	r0, [pc, #160]	; (8002ea4 <MX_TIM3_Init+0xf8>)
 8002e02:	f003 fa01 	bl	8006208 <HAL_TIM_Base_Init>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8002e0c:	f7ff f844 	bl	8001e98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e14:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002e16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4821      	ldr	r0, [pc, #132]	; (8002ea4 <MX_TIM3_Init+0xf8>)
 8002e1e:	f003 fc0d 	bl	800663c <HAL_TIM_ConfigClockSource>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8002e28:	f7ff f836 	bl	8001e98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002e2c:	481d      	ldr	r0, [pc, #116]	; (8002ea4 <MX_TIM3_Init+0xf8>)
 8002e2e:	f003 fa3a 	bl	80062a6 <HAL_TIM_PWM_Init>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8002e38:	f7ff f82e 	bl	8001e98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e40:	2300      	movs	r3, #0
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e44:	f107 0320 	add.w	r3, r7, #32
 8002e48:	4619      	mov	r1, r3
 8002e4a:	4816      	ldr	r0, [pc, #88]	; (8002ea4 <MX_TIM3_Init+0xf8>)
 8002e4c:	f003 ff8a 	bl	8006d64 <HAL_TIMEx_MasterConfigSynchronization>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8002e56:	f7ff f81f 	bl	8001e98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e5a:	2360      	movs	r3, #96	; 0x60
 8002e5c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e62:	2300      	movs	r3, #0
 8002e64:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e66:	2300      	movs	r3, #0
 8002e68:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e6a:	1d3b      	adds	r3, r7, #4
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	4619      	mov	r1, r3
 8002e70:	480c      	ldr	r0, [pc, #48]	; (8002ea4 <MX_TIM3_Init+0xf8>)
 8002e72:	f003 fb21 	bl	80064b8 <HAL_TIM_PWM_ConfigChannel>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8002e7c:	f7ff f80c 	bl	8001e98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e80:	1d3b      	adds	r3, r7, #4
 8002e82:	2204      	movs	r2, #4
 8002e84:	4619      	mov	r1, r3
 8002e86:	4807      	ldr	r0, [pc, #28]	; (8002ea4 <MX_TIM3_Init+0xf8>)
 8002e88:	f003 fb16 	bl	80064b8 <HAL_TIM_PWM_ConfigChannel>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8002e92:	f7ff f801 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002e96:	4803      	ldr	r0, [pc, #12]	; (8002ea4 <MX_TIM3_Init+0xf8>)
 8002e98:	f000 f88e 	bl	8002fb8 <HAL_TIM_MspPostInit>

}
 8002e9c:	bf00      	nop
 8002e9e:	3738      	adds	r7, #56	; 0x38
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	20000364 	.word	0x20000364
 8002ea8:	40000400 	.word	0x40000400

08002eac <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b088      	sub	sp, #32
 8002eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002eb2:	1d3b      	adds	r3, r7, #4
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	605a      	str	r2, [r3, #4]
 8002eba:	609a      	str	r2, [r3, #8]
 8002ebc:	60da      	str	r2, [r3, #12]
 8002ebe:	611a      	str	r2, [r3, #16]
 8002ec0:	615a      	str	r2, [r3, #20]
 8002ec2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002ec4:	4b1e      	ldr	r3, [pc, #120]	; (8002f40 <MX_TIM11_Init+0x94>)
 8002ec6:	4a1f      	ldr	r2, [pc, #124]	; (8002f44 <MX_TIM11_Init+0x98>)
 8002ec8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 25-1;
 8002eca:	4b1d      	ldr	r3, [pc, #116]	; (8002f40 <MX_TIM11_Init+0x94>)
 8002ecc:	2218      	movs	r2, #24
 8002ece:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ed0:	4b1b      	ldr	r3, [pc, #108]	; (8002f40 <MX_TIM11_Init+0x94>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 20000-1;
 8002ed6:	4b1a      	ldr	r3, [pc, #104]	; (8002f40 <MX_TIM11_Init+0x94>)
 8002ed8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002edc:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ede:	4b18      	ldr	r3, [pc, #96]	; (8002f40 <MX_TIM11_Init+0x94>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ee4:	4b16      	ldr	r3, [pc, #88]	; (8002f40 <MX_TIM11_Init+0x94>)
 8002ee6:	2280      	movs	r2, #128	; 0x80
 8002ee8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002eea:	4815      	ldr	r0, [pc, #84]	; (8002f40 <MX_TIM11_Init+0x94>)
 8002eec:	f003 f98c 	bl	8006208 <HAL_TIM_Base_Init>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8002ef6:	f7fe ffcf 	bl	8001e98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8002efa:	4811      	ldr	r0, [pc, #68]	; (8002f40 <MX_TIM11_Init+0x94>)
 8002efc:	f003 f9d3 	bl	80062a6 <HAL_TIM_PWM_Init>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8002f06:	f7fe ffc7 	bl	8001e98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f0a:	2360      	movs	r3, #96	; 0x60
 8002f0c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f12:	2300      	movs	r3, #0
 8002f14:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f16:	2300      	movs	r3, #0
 8002f18:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f1a:	1d3b      	adds	r3, r7, #4
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	4619      	mov	r1, r3
 8002f20:	4807      	ldr	r0, [pc, #28]	; (8002f40 <MX_TIM11_Init+0x94>)
 8002f22:	f003 fac9 	bl	80064b8 <HAL_TIM_PWM_ConfigChannel>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8002f2c:	f7fe ffb4 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8002f30:	4803      	ldr	r0, [pc, #12]	; (8002f40 <MX_TIM11_Init+0x94>)
 8002f32:	f000 f841 	bl	8002fb8 <HAL_TIM_MspPostInit>

}
 8002f36:	bf00      	nop
 8002f38:	3720      	adds	r7, #32
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	200003ac 	.word	0x200003ac
 8002f44:	40014800 	.word	0x40014800

08002f48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a15      	ldr	r2, [pc, #84]	; (8002fac <HAL_TIM_Base_MspInit+0x64>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d10e      	bne.n	8002f78 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	4b14      	ldr	r3, [pc, #80]	; (8002fb0 <HAL_TIM_Base_MspInit+0x68>)
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	4a13      	ldr	r2, [pc, #76]	; (8002fb0 <HAL_TIM_Base_MspInit+0x68>)
 8002f64:	f043 0302 	orr.w	r3, r3, #2
 8002f68:	6413      	str	r3, [r2, #64]	; 0x40
 8002f6a:	4b11      	ldr	r3, [pc, #68]	; (8002fb0 <HAL_TIM_Base_MspInit+0x68>)
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8002f76:	e012      	b.n	8002f9e <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM11)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a0d      	ldr	r2, [pc, #52]	; (8002fb4 <HAL_TIM_Base_MspInit+0x6c>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d10d      	bne.n	8002f9e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002f82:	2300      	movs	r3, #0
 8002f84:	60bb      	str	r3, [r7, #8]
 8002f86:	4b0a      	ldr	r3, [pc, #40]	; (8002fb0 <HAL_TIM_Base_MspInit+0x68>)
 8002f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8a:	4a09      	ldr	r2, [pc, #36]	; (8002fb0 <HAL_TIM_Base_MspInit+0x68>)
 8002f8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f90:	6453      	str	r3, [r2, #68]	; 0x44
 8002f92:	4b07      	ldr	r3, [pc, #28]	; (8002fb0 <HAL_TIM_Base_MspInit+0x68>)
 8002f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f9a:	60bb      	str	r3, [r7, #8]
 8002f9c:	68bb      	ldr	r3, [r7, #8]
}
 8002f9e:	bf00      	nop
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	40000400 	.word	0x40000400
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	40014800 	.word	0x40014800

08002fb8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b08a      	sub	sp, #40	; 0x28
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc0:	f107 0314 	add.w	r3, r7, #20
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	605a      	str	r2, [r3, #4]
 8002fca:	609a      	str	r2, [r3, #8]
 8002fcc:	60da      	str	r2, [r3, #12]
 8002fce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a24      	ldr	r2, [pc, #144]	; (8003068 <HAL_TIM_MspPostInit+0xb0>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d11e      	bne.n	8003018 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fda:	2300      	movs	r3, #0
 8002fdc:	613b      	str	r3, [r7, #16]
 8002fde:	4b23      	ldr	r3, [pc, #140]	; (800306c <HAL_TIM_MspPostInit+0xb4>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	4a22      	ldr	r2, [pc, #136]	; (800306c <HAL_TIM_MspPostInit+0xb4>)
 8002fe4:	f043 0301 	orr.w	r3, r3, #1
 8002fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fea:	4b20      	ldr	r3, [pc, #128]	; (800306c <HAL_TIM_MspPostInit+0xb4>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	613b      	str	r3, [r7, #16]
 8002ff4:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ff6:	23c0      	movs	r3, #192	; 0xc0
 8002ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffe:	2300      	movs	r3, #0
 8003000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003002:	2300      	movs	r3, #0
 8003004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003006:	2302      	movs	r3, #2
 8003008:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800300a:	f107 0314 	add.w	r3, r7, #20
 800300e:	4619      	mov	r1, r3
 8003010:	4817      	ldr	r0, [pc, #92]	; (8003070 <HAL_TIM_MspPostInit+0xb8>)
 8003012:	f001 fb21 	bl	8004658 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8003016:	e023      	b.n	8003060 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM11)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a15      	ldr	r2, [pc, #84]	; (8003074 <HAL_TIM_MspPostInit+0xbc>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d11e      	bne.n	8003060 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003022:	2300      	movs	r3, #0
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	4b11      	ldr	r3, [pc, #68]	; (800306c <HAL_TIM_MspPostInit+0xb4>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	4a10      	ldr	r2, [pc, #64]	; (800306c <HAL_TIM_MspPostInit+0xb4>)
 800302c:	f043 0302 	orr.w	r3, r3, #2
 8003030:	6313      	str	r3, [r2, #48]	; 0x30
 8003032:	4b0e      	ldr	r3, [pc, #56]	; (800306c <HAL_TIM_MspPostInit+0xb4>)
 8003034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	60fb      	str	r3, [r7, #12]
 800303c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800303e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003042:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003044:	2302      	movs	r3, #2
 8003046:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003048:	2300      	movs	r3, #0
 800304a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800304c:	2300      	movs	r3, #0
 800304e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8003050:	2303      	movs	r3, #3
 8003052:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003054:	f107 0314 	add.w	r3, r7, #20
 8003058:	4619      	mov	r1, r3
 800305a:	4807      	ldr	r0, [pc, #28]	; (8003078 <HAL_TIM_MspPostInit+0xc0>)
 800305c:	f001 fafc 	bl	8004658 <HAL_GPIO_Init>
}
 8003060:	bf00      	nop
 8003062:	3728      	adds	r7, #40	; 0x28
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40000400 	.word	0x40000400
 800306c:	40023800 	.word	0x40023800
 8003070:	40020000 	.word	0x40020000
 8003074:	40014800 	.word	0x40014800
 8003078:	40020400 	.word	0x40020400

0800307c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003080:	4b11      	ldr	r3, [pc, #68]	; (80030c8 <MX_USART1_UART_Init+0x4c>)
 8003082:	4a12      	ldr	r2, [pc, #72]	; (80030cc <MX_USART1_UART_Init+0x50>)
 8003084:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003086:	4b10      	ldr	r3, [pc, #64]	; (80030c8 <MX_USART1_UART_Init+0x4c>)
 8003088:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800308c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800308e:	4b0e      	ldr	r3, [pc, #56]	; (80030c8 <MX_USART1_UART_Init+0x4c>)
 8003090:	2200      	movs	r2, #0
 8003092:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003094:	4b0c      	ldr	r3, [pc, #48]	; (80030c8 <MX_USART1_UART_Init+0x4c>)
 8003096:	2200      	movs	r2, #0
 8003098:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800309a:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <MX_USART1_UART_Init+0x4c>)
 800309c:	2200      	movs	r2, #0
 800309e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80030a0:	4b09      	ldr	r3, [pc, #36]	; (80030c8 <MX_USART1_UART_Init+0x4c>)
 80030a2:	220c      	movs	r2, #12
 80030a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030a6:	4b08      	ldr	r3, [pc, #32]	; (80030c8 <MX_USART1_UART_Init+0x4c>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80030ac:	4b06      	ldr	r3, [pc, #24]	; (80030c8 <MX_USART1_UART_Init+0x4c>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80030b2:	4805      	ldr	r0, [pc, #20]	; (80030c8 <MX_USART1_UART_Init+0x4c>)
 80030b4:	f003 fec4 	bl	8006e40 <HAL_UART_Init>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80030be:	f7fe feeb 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80030c2:	bf00      	nop
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	20000454 	.word	0x20000454
 80030cc:	40011000 	.word	0x40011000

080030d0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80030d4:	4b11      	ldr	r3, [pc, #68]	; (800311c <MX_USART2_UART_Init+0x4c>)
 80030d6:	4a12      	ldr	r2, [pc, #72]	; (8003120 <MX_USART2_UART_Init+0x50>)
 80030d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80030da:	4b10      	ldr	r3, [pc, #64]	; (800311c <MX_USART2_UART_Init+0x4c>)
 80030dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80030e2:	4b0e      	ldr	r3, [pc, #56]	; (800311c <MX_USART2_UART_Init+0x4c>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80030e8:	4b0c      	ldr	r3, [pc, #48]	; (800311c <MX_USART2_UART_Init+0x4c>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80030ee:	4b0b      	ldr	r3, [pc, #44]	; (800311c <MX_USART2_UART_Init+0x4c>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80030f4:	4b09      	ldr	r3, [pc, #36]	; (800311c <MX_USART2_UART_Init+0x4c>)
 80030f6:	220c      	movs	r2, #12
 80030f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030fa:	4b08      	ldr	r3, [pc, #32]	; (800311c <MX_USART2_UART_Init+0x4c>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003100:	4b06      	ldr	r3, [pc, #24]	; (800311c <MX_USART2_UART_Init+0x4c>)
 8003102:	2200      	movs	r2, #0
 8003104:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003106:	4805      	ldr	r0, [pc, #20]	; (800311c <MX_USART2_UART_Init+0x4c>)
 8003108:	f003 fe9a 	bl	8006e40 <HAL_UART_Init>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003112:	f7fe fec1 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003116:	bf00      	nop
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	200004dc 	.word	0x200004dc
 8003120:	40004400 	.word	0x40004400

08003124 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003128:	4b11      	ldr	r3, [pc, #68]	; (8003170 <MX_USART6_UART_Init+0x4c>)
 800312a:	4a12      	ldr	r2, [pc, #72]	; (8003174 <MX_USART6_UART_Init+0x50>)
 800312c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800312e:	4b10      	ldr	r3, [pc, #64]	; (8003170 <MX_USART6_UART_Init+0x4c>)
 8003130:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003134:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003136:	4b0e      	ldr	r3, [pc, #56]	; (8003170 <MX_USART6_UART_Init+0x4c>)
 8003138:	2200      	movs	r2, #0
 800313a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800313c:	4b0c      	ldr	r3, [pc, #48]	; (8003170 <MX_USART6_UART_Init+0x4c>)
 800313e:	2200      	movs	r2, #0
 8003140:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003142:	4b0b      	ldr	r3, [pc, #44]	; (8003170 <MX_USART6_UART_Init+0x4c>)
 8003144:	2200      	movs	r2, #0
 8003146:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003148:	4b09      	ldr	r3, [pc, #36]	; (8003170 <MX_USART6_UART_Init+0x4c>)
 800314a:	220c      	movs	r2, #12
 800314c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800314e:	4b08      	ldr	r3, [pc, #32]	; (8003170 <MX_USART6_UART_Init+0x4c>)
 8003150:	2200      	movs	r2, #0
 8003152:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003154:	4b06      	ldr	r3, [pc, #24]	; (8003170 <MX_USART6_UART_Init+0x4c>)
 8003156:	2200      	movs	r2, #0
 8003158:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800315a:	4805      	ldr	r0, [pc, #20]	; (8003170 <MX_USART6_UART_Init+0x4c>)
 800315c:	f003 fe70 	bl	8006e40 <HAL_UART_Init>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003166:	f7fe fe97 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800316a:	bf00      	nop
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	20000498 	.word	0x20000498
 8003174:	40011400 	.word	0x40011400

08003178 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b08e      	sub	sp, #56	; 0x38
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	605a      	str	r2, [r3, #4]
 800318a:	609a      	str	r2, [r3, #8]
 800318c:	60da      	str	r2, [r3, #12]
 800318e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a68      	ldr	r2, [pc, #416]	; (8003338 <HAL_UART_MspInit+0x1c0>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d12d      	bne.n	80031f6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800319a:	2300      	movs	r3, #0
 800319c:	623b      	str	r3, [r7, #32]
 800319e:	4b67      	ldr	r3, [pc, #412]	; (800333c <HAL_UART_MspInit+0x1c4>)
 80031a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a2:	4a66      	ldr	r2, [pc, #408]	; (800333c <HAL_UART_MspInit+0x1c4>)
 80031a4:	f043 0310 	orr.w	r3, r3, #16
 80031a8:	6453      	str	r3, [r2, #68]	; 0x44
 80031aa:	4b64      	ldr	r3, [pc, #400]	; (800333c <HAL_UART_MspInit+0x1c4>)
 80031ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ae:	f003 0310 	and.w	r3, r3, #16
 80031b2:	623b      	str	r3, [r7, #32]
 80031b4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031b6:	2300      	movs	r3, #0
 80031b8:	61fb      	str	r3, [r7, #28]
 80031ba:	4b60      	ldr	r3, [pc, #384]	; (800333c <HAL_UART_MspInit+0x1c4>)
 80031bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031be:	4a5f      	ldr	r2, [pc, #380]	; (800333c <HAL_UART_MspInit+0x1c4>)
 80031c0:	f043 0301 	orr.w	r3, r3, #1
 80031c4:	6313      	str	r3, [r2, #48]	; 0x30
 80031c6:	4b5d      	ldr	r3, [pc, #372]	; (800333c <HAL_UART_MspInit+0x1c4>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	61fb      	str	r3, [r7, #28]
 80031d0:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80031d2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80031d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d8:	2302      	movs	r3, #2
 80031da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031dc:	2300      	movs	r3, #0
 80031de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031e0:	2303      	movs	r3, #3
 80031e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80031e4:	2307      	movs	r3, #7
 80031e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031ec:	4619      	mov	r1, r3
 80031ee:	4854      	ldr	r0, [pc, #336]	; (8003340 <HAL_UART_MspInit+0x1c8>)
 80031f0:	f001 fa32 	bl	8004658 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80031f4:	e09b      	b.n	800332e <HAL_UART_MspInit+0x1b6>
  else if(uartHandle->Instance==USART2)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a52      	ldr	r2, [pc, #328]	; (8003344 <HAL_UART_MspInit+0x1cc>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d134      	bne.n	800326a <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003200:	2300      	movs	r3, #0
 8003202:	61bb      	str	r3, [r7, #24]
 8003204:	4b4d      	ldr	r3, [pc, #308]	; (800333c <HAL_UART_MspInit+0x1c4>)
 8003206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003208:	4a4c      	ldr	r2, [pc, #304]	; (800333c <HAL_UART_MspInit+0x1c4>)
 800320a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800320e:	6413      	str	r3, [r2, #64]	; 0x40
 8003210:	4b4a      	ldr	r3, [pc, #296]	; (800333c <HAL_UART_MspInit+0x1c4>)
 8003212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003218:	61bb      	str	r3, [r7, #24]
 800321a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800321c:	2300      	movs	r3, #0
 800321e:	617b      	str	r3, [r7, #20]
 8003220:	4b46      	ldr	r3, [pc, #280]	; (800333c <HAL_UART_MspInit+0x1c4>)
 8003222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003224:	4a45      	ldr	r2, [pc, #276]	; (800333c <HAL_UART_MspInit+0x1c4>)
 8003226:	f043 0301 	orr.w	r3, r3, #1
 800322a:	6313      	str	r3, [r2, #48]	; 0x30
 800322c:	4b43      	ldr	r3, [pc, #268]	; (800333c <HAL_UART_MspInit+0x1c4>)
 800322e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	617b      	str	r3, [r7, #20]
 8003236:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003238:	230c      	movs	r3, #12
 800323a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800323c:	2302      	movs	r3, #2
 800323e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003240:	2300      	movs	r3, #0
 8003242:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003244:	2303      	movs	r3, #3
 8003246:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003248:	2307      	movs	r3, #7
 800324a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800324c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003250:	4619      	mov	r1, r3
 8003252:	483b      	ldr	r0, [pc, #236]	; (8003340 <HAL_UART_MspInit+0x1c8>)
 8003254:	f001 fa00 	bl	8004658 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003258:	2200      	movs	r2, #0
 800325a:	2100      	movs	r1, #0
 800325c:	2026      	movs	r0, #38	; 0x26
 800325e:	f000 fdc2 	bl	8003de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003262:	2026      	movs	r0, #38	; 0x26
 8003264:	f000 fddb 	bl	8003e1e <HAL_NVIC_EnableIRQ>
}
 8003268:	e061      	b.n	800332e <HAL_UART_MspInit+0x1b6>
  else if(uartHandle->Instance==USART6)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a36      	ldr	r2, [pc, #216]	; (8003348 <HAL_UART_MspInit+0x1d0>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d15c      	bne.n	800332e <HAL_UART_MspInit+0x1b6>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003274:	2300      	movs	r3, #0
 8003276:	613b      	str	r3, [r7, #16]
 8003278:	4b30      	ldr	r3, [pc, #192]	; (800333c <HAL_UART_MspInit+0x1c4>)
 800327a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327c:	4a2f      	ldr	r2, [pc, #188]	; (800333c <HAL_UART_MspInit+0x1c4>)
 800327e:	f043 0320 	orr.w	r3, r3, #32
 8003282:	6453      	str	r3, [r2, #68]	; 0x44
 8003284:	4b2d      	ldr	r3, [pc, #180]	; (800333c <HAL_UART_MspInit+0x1c4>)
 8003286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003288:	f003 0320 	and.w	r3, r3, #32
 800328c:	613b      	str	r3, [r7, #16]
 800328e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003290:	2300      	movs	r3, #0
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	4b29      	ldr	r3, [pc, #164]	; (800333c <HAL_UART_MspInit+0x1c4>)
 8003296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003298:	4a28      	ldr	r2, [pc, #160]	; (800333c <HAL_UART_MspInit+0x1c4>)
 800329a:	f043 0301 	orr.w	r3, r3, #1
 800329e:	6313      	str	r3, [r2, #48]	; 0x30
 80032a0:	4b26      	ldr	r3, [pc, #152]	; (800333c <HAL_UART_MspInit+0x1c4>)
 80032a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	60fb      	str	r3, [r7, #12]
 80032aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80032ac:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80032b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b2:	2302      	movs	r3, #2
 80032b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b6:	2300      	movs	r3, #0
 80032b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032ba:	2303      	movs	r3, #3
 80032bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80032be:	2308      	movs	r3, #8
 80032c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032c6:	4619      	mov	r1, r3
 80032c8:	481d      	ldr	r0, [pc, #116]	; (8003340 <HAL_UART_MspInit+0x1c8>)
 80032ca:	f001 f9c5 	bl	8004658 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream2;
 80032ce:	4b1f      	ldr	r3, [pc, #124]	; (800334c <HAL_UART_MspInit+0x1d4>)
 80032d0:	4a1f      	ldr	r2, [pc, #124]	; (8003350 <HAL_UART_MspInit+0x1d8>)
 80032d2:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80032d4:	4b1d      	ldr	r3, [pc, #116]	; (800334c <HAL_UART_MspInit+0x1d4>)
 80032d6:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80032da:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032dc:	4b1b      	ldr	r3, [pc, #108]	; (800334c <HAL_UART_MspInit+0x1d4>)
 80032de:	2200      	movs	r2, #0
 80032e0:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032e2:	4b1a      	ldr	r3, [pc, #104]	; (800334c <HAL_UART_MspInit+0x1d4>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80032e8:	4b18      	ldr	r3, [pc, #96]	; (800334c <HAL_UART_MspInit+0x1d4>)
 80032ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032ee:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032f0:	4b16      	ldr	r3, [pc, #88]	; (800334c <HAL_UART_MspInit+0x1d4>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032f6:	4b15      	ldr	r3, [pc, #84]	; (800334c <HAL_UART_MspInit+0x1d4>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80032fc:	4b13      	ldr	r3, [pc, #76]	; (800334c <HAL_UART_MspInit+0x1d4>)
 80032fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003302:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003304:	4b11      	ldr	r3, [pc, #68]	; (800334c <HAL_UART_MspInit+0x1d4>)
 8003306:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800330a:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800330c:	4b0f      	ldr	r3, [pc, #60]	; (800334c <HAL_UART_MspInit+0x1d4>)
 800330e:	2200      	movs	r2, #0
 8003310:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003312:	480e      	ldr	r0, [pc, #56]	; (800334c <HAL_UART_MspInit+0x1d4>)
 8003314:	f000 fd9e 	bl	8003e54 <HAL_DMA_Init>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <HAL_UART_MspInit+0x1aa>
      Error_Handler();
 800331e:	f7fe fdbb 	bl	8001e98 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a09      	ldr	r2, [pc, #36]	; (800334c <HAL_UART_MspInit+0x1d4>)
 8003326:	639a      	str	r2, [r3, #56]	; 0x38
 8003328:	4a08      	ldr	r2, [pc, #32]	; (800334c <HAL_UART_MspInit+0x1d4>)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800332e:	bf00      	nop
 8003330:	3738      	adds	r7, #56	; 0x38
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	40011000 	.word	0x40011000
 800333c:	40023800 	.word	0x40023800
 8003340:	40020000 	.word	0x40020000
 8003344:	40004400 	.word	0x40004400
 8003348:	40011400 	.word	0x40011400
 800334c:	200003f4 	.word	0x200003f4
 8003350:	40026440 	.word	0x40026440

08003354 <Reset_Handler>:
 8003354:	f8df d034 	ldr.w	sp, [pc, #52]	; 800338c <LoopFillZerobss+0x12>
 8003358:	480d      	ldr	r0, [pc, #52]	; (8003390 <LoopFillZerobss+0x16>)
 800335a:	490e      	ldr	r1, [pc, #56]	; (8003394 <LoopFillZerobss+0x1a>)
 800335c:	4a0e      	ldr	r2, [pc, #56]	; (8003398 <LoopFillZerobss+0x1e>)
 800335e:	2300      	movs	r3, #0
 8003360:	e002      	b.n	8003368 <LoopCopyDataInit>

08003362 <CopyDataInit>:
 8003362:	58d4      	ldr	r4, [r2, r3]
 8003364:	50c4      	str	r4, [r0, r3]
 8003366:	3304      	adds	r3, #4

08003368 <LoopCopyDataInit>:
 8003368:	18c4      	adds	r4, r0, r3
 800336a:	428c      	cmp	r4, r1
 800336c:	d3f9      	bcc.n	8003362 <CopyDataInit>
 800336e:	4a0b      	ldr	r2, [pc, #44]	; (800339c <LoopFillZerobss+0x22>)
 8003370:	4c0b      	ldr	r4, [pc, #44]	; (80033a0 <LoopFillZerobss+0x26>)
 8003372:	2300      	movs	r3, #0
 8003374:	e001      	b.n	800337a <LoopFillZerobss>

08003376 <FillZerobss>:
 8003376:	6013      	str	r3, [r2, #0]
 8003378:	3204      	adds	r2, #4

0800337a <LoopFillZerobss>:
 800337a:	42a2      	cmp	r2, r4
 800337c:	d3fb      	bcc.n	8003376 <FillZerobss>
 800337e:	f7ff fd03 	bl	8002d88 <SystemInit>
 8003382:	f004 ff1f 	bl	80081c4 <__libc_init_array>
 8003386:	f7fe fb43 	bl	8001a10 <main>
 800338a:	4770      	bx	lr
 800338c:	20010000 	.word	0x20010000
 8003390:	20000000 	.word	0x20000000
 8003394:	200001dc 	.word	0x200001dc
 8003398:	0800b910 	.word	0x0800b910
 800339c:	200001dc 	.word	0x200001dc
 80033a0:	20000534 	.word	0x20000534

080033a4 <ADC_IRQHandler>:
 80033a4:	e7fe      	b.n	80033a4 <ADC_IRQHandler>
	...

080033a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80033ac:	4b0e      	ldr	r3, [pc, #56]	; (80033e8 <HAL_Init+0x40>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a0d      	ldr	r2, [pc, #52]	; (80033e8 <HAL_Init+0x40>)
 80033b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80033b8:	4b0b      	ldr	r3, [pc, #44]	; (80033e8 <HAL_Init+0x40>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a0a      	ldr	r2, [pc, #40]	; (80033e8 <HAL_Init+0x40>)
 80033be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033c4:	4b08      	ldr	r3, [pc, #32]	; (80033e8 <HAL_Init+0x40>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a07      	ldr	r2, [pc, #28]	; (80033e8 <HAL_Init+0x40>)
 80033ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033d0:	2003      	movs	r0, #3
 80033d2:	f000 fcfd 	bl	8003dd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033d6:	200f      	movs	r0, #15
 80033d8:	f000 f808 	bl	80033ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033dc:	f7ff fba8 	bl	8002b30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	40023c00 	.word	0x40023c00

080033ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033f4:	4b12      	ldr	r3, [pc, #72]	; (8003440 <HAL_InitTick+0x54>)
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	4b12      	ldr	r3, [pc, #72]	; (8003444 <HAL_InitTick+0x58>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	4619      	mov	r1, r3
 80033fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003402:	fbb3 f3f1 	udiv	r3, r3, r1
 8003406:	fbb2 f3f3 	udiv	r3, r2, r3
 800340a:	4618      	mov	r0, r3
 800340c:	f000 fd15 	bl	8003e3a <HAL_SYSTICK_Config>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e00e      	b.n	8003438 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2b0f      	cmp	r3, #15
 800341e:	d80a      	bhi.n	8003436 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003420:	2200      	movs	r2, #0
 8003422:	6879      	ldr	r1, [r7, #4]
 8003424:	f04f 30ff 	mov.w	r0, #4294967295
 8003428:	f000 fcdd 	bl	8003de6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800342c:	4a06      	ldr	r2, [pc, #24]	; (8003448 <HAL_InitTick+0x5c>)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003432:	2300      	movs	r3, #0
 8003434:	e000      	b.n	8003438 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
}
 8003438:	4618      	mov	r0, r3
 800343a:	3708      	adds	r7, #8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	20000000 	.word	0x20000000
 8003444:	20000008 	.word	0x20000008
 8003448:	20000004 	.word	0x20000004

0800344c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003450:	4b06      	ldr	r3, [pc, #24]	; (800346c <HAL_IncTick+0x20>)
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	461a      	mov	r2, r3
 8003456:	4b06      	ldr	r3, [pc, #24]	; (8003470 <HAL_IncTick+0x24>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4413      	add	r3, r2
 800345c:	4a04      	ldr	r2, [pc, #16]	; (8003470 <HAL_IncTick+0x24>)
 800345e:	6013      	str	r3, [r2, #0]
}
 8003460:	bf00      	nop
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	20000008 	.word	0x20000008
 8003470:	20000520 	.word	0x20000520

08003474 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
  return uwTick;
 8003478:	4b03      	ldr	r3, [pc, #12]	; (8003488 <HAL_GetTick+0x14>)
 800347a:	681b      	ldr	r3, [r3, #0]
}
 800347c:	4618      	mov	r0, r3
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	20000520 	.word	0x20000520

0800348c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003494:	f7ff ffee 	bl	8003474 <HAL_GetTick>
 8003498:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a4:	d005      	beq.n	80034b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034a6:	4b0a      	ldr	r3, [pc, #40]	; (80034d0 <HAL_Delay+0x44>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	461a      	mov	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4413      	add	r3, r2
 80034b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80034b2:	bf00      	nop
 80034b4:	f7ff ffde 	bl	8003474 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d8f7      	bhi.n	80034b4 <HAL_Delay+0x28>
  {
  }
}
 80034c4:	bf00      	nop
 80034c6:	bf00      	nop
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	20000008 	.word	0x20000008

080034d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034dc:	2300      	movs	r3, #0
 80034de:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e033      	b.n	8003552 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d109      	bne.n	8003506 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7fd fd7e 	bl	8000ff4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	f003 0310 	and.w	r3, r3, #16
 800350e:	2b00      	cmp	r3, #0
 8003510:	d118      	bne.n	8003544 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800351a:	f023 0302 	bic.w	r3, r3, #2
 800351e:	f043 0202 	orr.w	r2, r3, #2
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 fa86 	bl	8003a38 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	f023 0303 	bic.w	r3, r3, #3
 800353a:	f043 0201 	orr.w	r2, r3, #1
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	641a      	str	r2, [r3, #64]	; 0x40
 8003542:	e001      	b.n	8003548 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003550:	7bfb      	ldrb	r3, [r7, #15]
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
	...

0800355c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003564:	2300      	movs	r3, #0
 8003566:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800356e:	2b01      	cmp	r3, #1
 8003570:	d101      	bne.n	8003576 <HAL_ADC_Start+0x1a>
 8003572:	2302      	movs	r3, #2
 8003574:	e097      	b.n	80036a6 <HAL_ADC_Start+0x14a>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b01      	cmp	r3, #1
 800358a:	d018      	beq.n	80035be <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689a      	ldr	r2, [r3, #8]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f042 0201 	orr.w	r2, r2, #1
 800359a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800359c:	4b45      	ldr	r3, [pc, #276]	; (80036b4 <HAL_ADC_Start+0x158>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a45      	ldr	r2, [pc, #276]	; (80036b8 <HAL_ADC_Start+0x15c>)
 80035a2:	fba2 2303 	umull	r2, r3, r2, r3
 80035a6:	0c9a      	lsrs	r2, r3, #18
 80035a8:	4613      	mov	r3, r2
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	4413      	add	r3, r2
 80035ae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80035b0:	e002      	b.n	80035b8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	3b01      	subs	r3, #1
 80035b6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f9      	bne.n	80035b2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d15f      	bne.n	800368c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80035d4:	f023 0301 	bic.w	r3, r3, #1
 80035d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d007      	beq.n	80035fe <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80035f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800360a:	d106      	bne.n	800361a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003610:	f023 0206 	bic.w	r2, r3, #6
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	645a      	str	r2, [r3, #68]	; 0x44
 8003618:	e002      	b.n	8003620 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003628:	4b24      	ldr	r3, [pc, #144]	; (80036bc <HAL_ADC_Start+0x160>)
 800362a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003634:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f003 031f 	and.w	r3, r3, #31
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10f      	bne.n	8003662 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d129      	bne.n	80036a4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689a      	ldr	r2, [r3, #8]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800365e:	609a      	str	r2, [r3, #8]
 8003660:	e020      	b.n	80036a4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a16      	ldr	r2, [pc, #88]	; (80036c0 <HAL_ADC_Start+0x164>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d11b      	bne.n	80036a4 <HAL_ADC_Start+0x148>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d114      	bne.n	80036a4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003688:	609a      	str	r2, [r3, #8]
 800368a:	e00b      	b.n	80036a4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003690:	f043 0210 	orr.w	r2, r3, #16
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369c:	f043 0201 	orr.w	r2, r3, #1
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3714      	adds	r7, #20
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	20000000 	.word	0x20000000
 80036b8:	431bde83 	.word	0x431bde83
 80036bc:	40012300 	.word	0x40012300
 80036c0:	40012000 	.word	0x40012000

080036c4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80036ce:	2300      	movs	r3, #0
 80036d0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036e0:	d113      	bne.n	800370a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80036ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036f0:	d10b      	bne.n	800370a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	f043 0220 	orr.w	r2, r3, #32
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e063      	b.n	80037d2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800370a:	f7ff feb3 	bl	8003474 <HAL_GetTick>
 800370e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003710:	e021      	b.n	8003756 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003718:	d01d      	beq.n	8003756 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d007      	beq.n	8003730 <HAL_ADC_PollForConversion+0x6c>
 8003720:	f7ff fea8 	bl	8003474 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	683a      	ldr	r2, [r7, #0]
 800372c:	429a      	cmp	r2, r3
 800372e:	d212      	bcs.n	8003756 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b02      	cmp	r3, #2
 800373c:	d00b      	beq.n	8003756 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	f043 0204 	orr.w	r2, r3, #4
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e03d      	b.n	80037d2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b02      	cmp	r3, #2
 8003762:	d1d6      	bne.n	8003712 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f06f 0212 	mvn.w	r2, #18
 800376c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d123      	bne.n	80037d0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800378c:	2b00      	cmp	r3, #0
 800378e:	d11f      	bne.n	80037d0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003796:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800379a:	2b00      	cmp	r3, #0
 800379c:	d006      	beq.n	80037ac <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d111      	bne.n	80037d0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d105      	bne.n	80037d0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c8:	f043 0201 	orr.w	r2, r3, #1
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80037da:	b480      	push	{r7}
 80037dc:	b083      	sub	sp, #12
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80037fe:	2300      	movs	r3, #0
 8003800:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003808:	2b01      	cmp	r3, #1
 800380a:	d101      	bne.n	8003810 <HAL_ADC_ConfigChannel+0x1c>
 800380c:	2302      	movs	r3, #2
 800380e:	e105      	b.n	8003a1c <HAL_ADC_ConfigChannel+0x228>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2b09      	cmp	r3, #9
 800381e:	d925      	bls.n	800386c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68d9      	ldr	r1, [r3, #12]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	b29b      	uxth	r3, r3
 800382c:	461a      	mov	r2, r3
 800382e:	4613      	mov	r3, r2
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	4413      	add	r3, r2
 8003834:	3b1e      	subs	r3, #30
 8003836:	2207      	movs	r2, #7
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	43da      	mvns	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	400a      	ands	r2, r1
 8003844:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68d9      	ldr	r1, [r3, #12]
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	689a      	ldr	r2, [r3, #8]
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	b29b      	uxth	r3, r3
 8003856:	4618      	mov	r0, r3
 8003858:	4603      	mov	r3, r0
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	4403      	add	r3, r0
 800385e:	3b1e      	subs	r3, #30
 8003860:	409a      	lsls	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	60da      	str	r2, [r3, #12]
 800386a:	e022      	b.n	80038b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6919      	ldr	r1, [r3, #16]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	b29b      	uxth	r3, r3
 8003878:	461a      	mov	r2, r3
 800387a:	4613      	mov	r3, r2
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	4413      	add	r3, r2
 8003880:	2207      	movs	r2, #7
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	43da      	mvns	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	400a      	ands	r2, r1
 800388e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6919      	ldr	r1, [r3, #16]
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	689a      	ldr	r2, [r3, #8]
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	b29b      	uxth	r3, r3
 80038a0:	4618      	mov	r0, r3
 80038a2:	4603      	mov	r3, r0
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	4403      	add	r3, r0
 80038a8:	409a      	lsls	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2b06      	cmp	r3, #6
 80038b8:	d824      	bhi.n	8003904 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	4613      	mov	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	4413      	add	r3, r2
 80038ca:	3b05      	subs	r3, #5
 80038cc:	221f      	movs	r2, #31
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	43da      	mvns	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	400a      	ands	r2, r1
 80038da:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	4618      	mov	r0, r3
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685a      	ldr	r2, [r3, #4]
 80038ee:	4613      	mov	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4413      	add	r3, r2
 80038f4:	3b05      	subs	r3, #5
 80038f6:	fa00 f203 	lsl.w	r2, r0, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	635a      	str	r2, [r3, #52]	; 0x34
 8003902:	e04c      	b.n	800399e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	2b0c      	cmp	r3, #12
 800390a:	d824      	bhi.n	8003956 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	4613      	mov	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	4413      	add	r3, r2
 800391c:	3b23      	subs	r3, #35	; 0x23
 800391e:	221f      	movs	r2, #31
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	43da      	mvns	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	400a      	ands	r2, r1
 800392c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	b29b      	uxth	r3, r3
 800393a:	4618      	mov	r0, r3
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	4613      	mov	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4413      	add	r3, r2
 8003946:	3b23      	subs	r3, #35	; 0x23
 8003948:	fa00 f203 	lsl.w	r2, r0, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	430a      	orrs	r2, r1
 8003952:	631a      	str	r2, [r3, #48]	; 0x30
 8003954:	e023      	b.n	800399e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	4613      	mov	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	3b41      	subs	r3, #65	; 0x41
 8003968:	221f      	movs	r2, #31
 800396a:	fa02 f303 	lsl.w	r3, r2, r3
 800396e:	43da      	mvns	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	400a      	ands	r2, r1
 8003976:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	b29b      	uxth	r3, r3
 8003984:	4618      	mov	r0, r3
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	4613      	mov	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4413      	add	r3, r2
 8003990:	3b41      	subs	r3, #65	; 0x41
 8003992:	fa00 f203 	lsl.w	r2, r0, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800399e:	4b22      	ldr	r3, [pc, #136]	; (8003a28 <HAL_ADC_ConfigChannel+0x234>)
 80039a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a21      	ldr	r2, [pc, #132]	; (8003a2c <HAL_ADC_ConfigChannel+0x238>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d109      	bne.n	80039c0 <HAL_ADC_ConfigChannel+0x1cc>
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b12      	cmp	r3, #18
 80039b2:	d105      	bne.n	80039c0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a19      	ldr	r2, [pc, #100]	; (8003a2c <HAL_ADC_ConfigChannel+0x238>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d123      	bne.n	8003a12 <HAL_ADC_ConfigChannel+0x21e>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2b10      	cmp	r3, #16
 80039d0:	d003      	beq.n	80039da <HAL_ADC_ConfigChannel+0x1e6>
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2b11      	cmp	r3, #17
 80039d8:	d11b      	bne.n	8003a12 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b10      	cmp	r3, #16
 80039ec:	d111      	bne.n	8003a12 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80039ee:	4b10      	ldr	r3, [pc, #64]	; (8003a30 <HAL_ADC_ConfigChannel+0x23c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a10      	ldr	r2, [pc, #64]	; (8003a34 <HAL_ADC_ConfigChannel+0x240>)
 80039f4:	fba2 2303 	umull	r2, r3, r2, r3
 80039f8:	0c9a      	lsrs	r2, r3, #18
 80039fa:	4613      	mov	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4413      	add	r3, r2
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003a04:	e002      	b.n	8003a0c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1f9      	bne.n	8003a06 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3714      	adds	r7, #20
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	40012300 	.word	0x40012300
 8003a2c:	40012000 	.word	0x40012000
 8003a30:	20000000 	.word	0x20000000
 8003a34:	431bde83 	.word	0x431bde83

08003a38 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a40:	4b79      	ldr	r3, [pc, #484]	; (8003c28 <ADC_Init+0x1f0>)
 8003a42:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6859      	ldr	r1, [r3, #4]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	021a      	lsls	r2, r3, #8
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	685a      	ldr	r2, [r3, #4]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003a90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6859      	ldr	r1, [r3, #4]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689a      	ldr	r2, [r3, #8]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ab2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6899      	ldr	r1, [r3, #8]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68da      	ldr	r2, [r3, #12]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aca:	4a58      	ldr	r2, [pc, #352]	; (8003c2c <ADC_Init+0x1f4>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d022      	beq.n	8003b16 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689a      	ldr	r2, [r3, #8]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ade:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6899      	ldr	r1, [r3, #8]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6899      	ldr	r1, [r3, #8]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	430a      	orrs	r2, r1
 8003b12:	609a      	str	r2, [r3, #8]
 8003b14:	e00f      	b.n	8003b36 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	689a      	ldr	r2, [r3, #8]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b34:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689a      	ldr	r2, [r3, #8]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 0202 	bic.w	r2, r2, #2
 8003b44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6899      	ldr	r1, [r3, #8]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	7e1b      	ldrb	r3, [r3, #24]
 8003b50:	005a      	lsls	r2, r3, #1
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d01b      	beq.n	8003b9c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b72:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685a      	ldr	r2, [r3, #4]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003b82:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6859      	ldr	r1, [r3, #4]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	035a      	lsls	r2, r3, #13
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	605a      	str	r2, [r3, #4]
 8003b9a:	e007      	b.n	8003bac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	685a      	ldr	r2, [r3, #4]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003baa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003bba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	051a      	lsls	r2, r3, #20
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003be0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6899      	ldr	r1, [r3, #8]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003bee:	025a      	lsls	r2, r3, #9
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689a      	ldr	r2, [r3, #8]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6899      	ldr	r1, [r3, #8]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	029a      	lsls	r2, r3, #10
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	609a      	str	r2, [r3, #8]
}
 8003c1c:	bf00      	nop
 8003c1e:	3714      	adds	r7, #20
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr
 8003c28:	40012300 	.word	0x40012300
 8003c2c:	0f000001 	.word	0x0f000001

08003c30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f003 0307 	and.w	r3, r3, #7
 8003c3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c40:	4b0c      	ldr	r3, [pc, #48]	; (8003c74 <__NVIC_SetPriorityGrouping+0x44>)
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c62:	4a04      	ldr	r2, [pc, #16]	; (8003c74 <__NVIC_SetPriorityGrouping+0x44>)
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	60d3      	str	r3, [r2, #12]
}
 8003c68:	bf00      	nop
 8003c6a:	3714      	adds	r7, #20
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr
 8003c74:	e000ed00 	.word	0xe000ed00

08003c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c7c:	4b04      	ldr	r3, [pc, #16]	; (8003c90 <__NVIC_GetPriorityGrouping+0x18>)
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	0a1b      	lsrs	r3, r3, #8
 8003c82:	f003 0307 	and.w	r3, r3, #7
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr
 8003c90:	e000ed00 	.word	0xe000ed00

08003c94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	db0b      	blt.n	8003cbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ca6:	79fb      	ldrb	r3, [r7, #7]
 8003ca8:	f003 021f 	and.w	r2, r3, #31
 8003cac:	4907      	ldr	r1, [pc, #28]	; (8003ccc <__NVIC_EnableIRQ+0x38>)
 8003cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb2:	095b      	lsrs	r3, r3, #5
 8003cb4:	2001      	movs	r0, #1
 8003cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8003cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cbe:	bf00      	nop
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	e000e100 	.word	0xe000e100

08003cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	6039      	str	r1, [r7, #0]
 8003cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	db0a      	blt.n	8003cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	b2da      	uxtb	r2, r3
 8003ce8:	490c      	ldr	r1, [pc, #48]	; (8003d1c <__NVIC_SetPriority+0x4c>)
 8003cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cee:	0112      	lsls	r2, r2, #4
 8003cf0:	b2d2      	uxtb	r2, r2
 8003cf2:	440b      	add	r3, r1
 8003cf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cf8:	e00a      	b.n	8003d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	b2da      	uxtb	r2, r3
 8003cfe:	4908      	ldr	r1, [pc, #32]	; (8003d20 <__NVIC_SetPriority+0x50>)
 8003d00:	79fb      	ldrb	r3, [r7, #7]
 8003d02:	f003 030f 	and.w	r3, r3, #15
 8003d06:	3b04      	subs	r3, #4
 8003d08:	0112      	lsls	r2, r2, #4
 8003d0a:	b2d2      	uxtb	r2, r2
 8003d0c:	440b      	add	r3, r1
 8003d0e:	761a      	strb	r2, [r3, #24]
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr
 8003d1c:	e000e100 	.word	0xe000e100
 8003d20:	e000ed00 	.word	0xe000ed00

08003d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b089      	sub	sp, #36	; 0x24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f003 0307 	and.w	r3, r3, #7
 8003d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	f1c3 0307 	rsb	r3, r3, #7
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	bf28      	it	cs
 8003d42:	2304      	movcs	r3, #4
 8003d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	3304      	adds	r3, #4
 8003d4a:	2b06      	cmp	r3, #6
 8003d4c:	d902      	bls.n	8003d54 <NVIC_EncodePriority+0x30>
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	3b03      	subs	r3, #3
 8003d52:	e000      	b.n	8003d56 <NVIC_EncodePriority+0x32>
 8003d54:	2300      	movs	r3, #0
 8003d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d58:	f04f 32ff 	mov.w	r2, #4294967295
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d62:	43da      	mvns	r2, r3
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	401a      	ands	r2, r3
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	fa01 f303 	lsl.w	r3, r1, r3
 8003d76:	43d9      	mvns	r1, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d7c:	4313      	orrs	r3, r2
         );
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3724      	adds	r7, #36	; 0x24
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
	...

08003d8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	3b01      	subs	r3, #1
 8003d98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d9c:	d301      	bcc.n	8003da2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e00f      	b.n	8003dc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003da2:	4a0a      	ldr	r2, [pc, #40]	; (8003dcc <SysTick_Config+0x40>)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	3b01      	subs	r3, #1
 8003da8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003daa:	210f      	movs	r1, #15
 8003dac:	f04f 30ff 	mov.w	r0, #4294967295
 8003db0:	f7ff ff8e 	bl	8003cd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003db4:	4b05      	ldr	r3, [pc, #20]	; (8003dcc <SysTick_Config+0x40>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dba:	4b04      	ldr	r3, [pc, #16]	; (8003dcc <SysTick_Config+0x40>)
 8003dbc:	2207      	movs	r2, #7
 8003dbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	e000e010 	.word	0xe000e010

08003dd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f7ff ff29 	bl	8003c30 <__NVIC_SetPriorityGrouping>
}
 8003dde:	bf00      	nop
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b086      	sub	sp, #24
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	4603      	mov	r3, r0
 8003dee:	60b9      	str	r1, [r7, #8]
 8003df0:	607a      	str	r2, [r7, #4]
 8003df2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003df4:	2300      	movs	r3, #0
 8003df6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003df8:	f7ff ff3e 	bl	8003c78 <__NVIC_GetPriorityGrouping>
 8003dfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	68b9      	ldr	r1, [r7, #8]
 8003e02:	6978      	ldr	r0, [r7, #20]
 8003e04:	f7ff ff8e 	bl	8003d24 <NVIC_EncodePriority>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e0e:	4611      	mov	r1, r2
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7ff ff5d 	bl	8003cd0 <__NVIC_SetPriority>
}
 8003e16:	bf00      	nop
 8003e18:	3718      	adds	r7, #24
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b082      	sub	sp, #8
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	4603      	mov	r3, r0
 8003e26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7ff ff31 	bl	8003c94 <__NVIC_EnableIRQ>
}
 8003e32:	bf00      	nop
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b082      	sub	sp, #8
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7ff ffa2 	bl	8003d8c <SysTick_Config>
 8003e48:	4603      	mov	r3, r0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
	...

08003e54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e60:	f7ff fb08 	bl	8003474 <HAL_GetTick>
 8003e64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d101      	bne.n	8003e70 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e099      	b.n	8003fa4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2202      	movs	r2, #2
 8003e74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 0201 	bic.w	r2, r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e90:	e00f      	b.n	8003eb2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e92:	f7ff faef 	bl	8003474 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b05      	cmp	r3, #5
 8003e9e:	d908      	bls.n	8003eb2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2203      	movs	r2, #3
 8003eaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e078      	b.n	8003fa4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1e8      	bne.n	8003e92 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	4b38      	ldr	r3, [pc, #224]	; (8003fac <HAL_DMA_Init+0x158>)
 8003ecc:	4013      	ands	r3, r2
 8003ece:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ede:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ef6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f08:	2b04      	cmp	r3, #4
 8003f0a:	d107      	bne.n	8003f1c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f14:	4313      	orrs	r3, r2
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f023 0307 	bic.w	r3, r3, #7
 8003f32:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d117      	bne.n	8003f76 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00e      	beq.n	8003f76 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 fb01 	bl	8004560 <DMA_CheckFifoParam>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d008      	beq.n	8003f76 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2240      	movs	r2, #64	; 0x40
 8003f68:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003f72:	2301      	movs	r3, #1
 8003f74:	e016      	b.n	8003fa4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 fab8 	bl	80044f4 <DMA_CalcBaseAndBitshift>
 8003f84:	4603      	mov	r3, r0
 8003f86:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f8c:	223f      	movs	r2, #63	; 0x3f
 8003f8e:	409a      	lsls	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3718      	adds	r7, #24
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	f010803f 	.word	0xf010803f

08003fb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
 8003fbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d101      	bne.n	8003fd6 <HAL_DMA_Start_IT+0x26>
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	e040      	b.n	8004058 <HAL_DMA_Start_IT+0xa8>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d12f      	bne.n	800404a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2202      	movs	r2, #2
 8003fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	68b9      	ldr	r1, [r7, #8]
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f000 fa4a 	bl	8004498 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004008:	223f      	movs	r2, #63	; 0x3f
 800400a:	409a      	lsls	r2, r3
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0216 	orr.w	r2, r2, #22
 800401e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004024:	2b00      	cmp	r3, #0
 8004026:	d007      	beq.n	8004038 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0208 	orr.w	r2, r2, #8
 8004036:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f042 0201 	orr.w	r2, r2, #1
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	e005      	b.n	8004056 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004052:	2302      	movs	r3, #2
 8004054:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004056:	7dfb      	ldrb	r3, [r7, #23]
}
 8004058:	4618      	mov	r0, r3
 800405a:	3718      	adds	r7, #24
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800406c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800406e:	f7ff fa01 	bl	8003474 <HAL_GetTick>
 8004072:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800407a:	b2db      	uxtb	r3, r3
 800407c:	2b02      	cmp	r3, #2
 800407e:	d008      	beq.n	8004092 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2280      	movs	r2, #128	; 0x80
 8004084:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e052      	b.n	8004138 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f022 0216 	bic.w	r2, r2, #22
 80040a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	695a      	ldr	r2, [r3, #20]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d103      	bne.n	80040c2 <HAL_DMA_Abort+0x62>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d007      	beq.n	80040d2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 0208 	bic.w	r2, r2, #8
 80040d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 0201 	bic.w	r2, r2, #1
 80040e0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040e2:	e013      	b.n	800410c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040e4:	f7ff f9c6 	bl	8003474 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b05      	cmp	r3, #5
 80040f0:	d90c      	bls.n	800410c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2220      	movs	r2, #32
 80040f6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2203      	movs	r2, #3
 80040fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e015      	b.n	8004138 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1e4      	bne.n	80040e4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800411e:	223f      	movs	r2, #63	; 0x3f
 8004120:	409a      	lsls	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2201      	movs	r2, #1
 800412a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d004      	beq.n	800415e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2280      	movs	r2, #128	; 0x80
 8004158:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e00c      	b.n	8004178 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2205      	movs	r2, #5
 8004162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 0201 	bic.w	r2, r2, #1
 8004174:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800418c:	2300      	movs	r3, #0
 800418e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004190:	4b92      	ldr	r3, [pc, #584]	; (80043dc <HAL_DMA_IRQHandler+0x258>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a92      	ldr	r2, [pc, #584]	; (80043e0 <HAL_DMA_IRQHandler+0x25c>)
 8004196:	fba2 2303 	umull	r2, r3, r2, r3
 800419a:	0a9b      	lsrs	r3, r3, #10
 800419c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ae:	2208      	movs	r2, #8
 80041b0:	409a      	lsls	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	4013      	ands	r3, r2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d01a      	beq.n	80041f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0304 	and.w	r3, r3, #4
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d013      	beq.n	80041f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f022 0204 	bic.w	r2, r2, #4
 80041d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041dc:	2208      	movs	r2, #8
 80041de:	409a      	lsls	r2, r3
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e8:	f043 0201 	orr.w	r2, r3, #1
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f4:	2201      	movs	r2, #1
 80041f6:	409a      	lsls	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	4013      	ands	r3, r2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d012      	beq.n	8004226 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00b      	beq.n	8004226 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004212:	2201      	movs	r2, #1
 8004214:	409a      	lsls	r2, r3
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421e:	f043 0202 	orr.w	r2, r3, #2
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800422a:	2204      	movs	r2, #4
 800422c:	409a      	lsls	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	4013      	ands	r3, r2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d012      	beq.n	800425c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00b      	beq.n	800425c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004248:	2204      	movs	r2, #4
 800424a:	409a      	lsls	r2, r3
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004254:	f043 0204 	orr.w	r2, r3, #4
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004260:	2210      	movs	r2, #16
 8004262:	409a      	lsls	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4013      	ands	r3, r2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d043      	beq.n	80042f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0308 	and.w	r3, r3, #8
 8004276:	2b00      	cmp	r3, #0
 8004278:	d03c      	beq.n	80042f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800427e:	2210      	movs	r2, #16
 8004280:	409a      	lsls	r2, r3
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d018      	beq.n	80042c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d108      	bne.n	80042b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d024      	beq.n	80042f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	4798      	blx	r3
 80042b2:	e01f      	b.n	80042f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d01b      	beq.n	80042f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	4798      	blx	r3
 80042c4:	e016      	b.n	80042f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d107      	bne.n	80042e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f022 0208 	bic.w	r2, r2, #8
 80042e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d003      	beq.n	80042f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042f8:	2220      	movs	r2, #32
 80042fa:	409a      	lsls	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	4013      	ands	r3, r2
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 808e 	beq.w	8004422 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0310 	and.w	r3, r3, #16
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 8086 	beq.w	8004422 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800431a:	2220      	movs	r2, #32
 800431c:	409a      	lsls	r2, r3
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b05      	cmp	r3, #5
 800432c:	d136      	bne.n	800439c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f022 0216 	bic.w	r2, r2, #22
 800433c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	695a      	ldr	r2, [r3, #20]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800434c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004352:	2b00      	cmp	r3, #0
 8004354:	d103      	bne.n	800435e <HAL_DMA_IRQHandler+0x1da>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800435a:	2b00      	cmp	r3, #0
 800435c:	d007      	beq.n	800436e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 0208 	bic.w	r2, r2, #8
 800436c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004372:	223f      	movs	r2, #63	; 0x3f
 8004374:	409a      	lsls	r2, r3
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800438e:	2b00      	cmp	r3, #0
 8004390:	d07d      	beq.n	800448e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	4798      	blx	r3
        }
        return;
 800439a:	e078      	b.n	800448e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d01c      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d108      	bne.n	80043ca <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d030      	beq.n	8004422 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	4798      	blx	r3
 80043c8:	e02b      	b.n	8004422 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d027      	beq.n	8004422 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	4798      	blx	r3
 80043da:	e022      	b.n	8004422 <HAL_DMA_IRQHandler+0x29e>
 80043dc:	20000000 	.word	0x20000000
 80043e0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10f      	bne.n	8004412 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 0210 	bic.w	r2, r2, #16
 8004400:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004416:	2b00      	cmp	r3, #0
 8004418:	d003      	beq.n	8004422 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004426:	2b00      	cmp	r3, #0
 8004428:	d032      	beq.n	8004490 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b00      	cmp	r3, #0
 8004434:	d022      	beq.n	800447c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2205      	movs	r2, #5
 800443a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 0201 	bic.w	r2, r2, #1
 800444c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	3301      	adds	r3, #1
 8004452:	60bb      	str	r3, [r7, #8]
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	429a      	cmp	r2, r3
 8004458:	d307      	bcc.n	800446a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1f2      	bne.n	800444e <HAL_DMA_IRQHandler+0x2ca>
 8004468:	e000      	b.n	800446c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800446a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004480:	2b00      	cmp	r3, #0
 8004482:	d005      	beq.n	8004490 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	4798      	blx	r3
 800448c:	e000      	b.n	8004490 <HAL_DMA_IRQHandler+0x30c>
        return;
 800448e:	bf00      	nop
    }
  }
}
 8004490:	3718      	adds	r7, #24
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop

08004498 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
 80044a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80044b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	683a      	ldr	r2, [r7, #0]
 80044bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	2b40      	cmp	r3, #64	; 0x40
 80044c4:	d108      	bne.n	80044d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80044d6:	e007      	b.n	80044e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68ba      	ldr	r2, [r7, #8]
 80044de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	60da      	str	r2, [r3, #12]
}
 80044e8:	bf00      	nop
 80044ea:	3714      	adds	r7, #20
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	b2db      	uxtb	r3, r3
 8004502:	3b10      	subs	r3, #16
 8004504:	4a14      	ldr	r2, [pc, #80]	; (8004558 <DMA_CalcBaseAndBitshift+0x64>)
 8004506:	fba2 2303 	umull	r2, r3, r2, r3
 800450a:	091b      	lsrs	r3, r3, #4
 800450c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800450e:	4a13      	ldr	r2, [pc, #76]	; (800455c <DMA_CalcBaseAndBitshift+0x68>)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	4413      	add	r3, r2
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	461a      	mov	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2b03      	cmp	r3, #3
 8004520:	d909      	bls.n	8004536 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800452a:	f023 0303 	bic.w	r3, r3, #3
 800452e:	1d1a      	adds	r2, r3, #4
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	659a      	str	r2, [r3, #88]	; 0x58
 8004534:	e007      	b.n	8004546 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800453e:	f023 0303 	bic.w	r3, r3, #3
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800454a:	4618      	mov	r0, r3
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	aaaaaaab 	.word	0xaaaaaaab
 800455c:	0800b4a0 	.word	0x0800b4a0

08004560 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004568:	2300      	movs	r3, #0
 800456a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004570:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d11f      	bne.n	80045ba <DMA_CheckFifoParam+0x5a>
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	2b03      	cmp	r3, #3
 800457e:	d856      	bhi.n	800462e <DMA_CheckFifoParam+0xce>
 8004580:	a201      	add	r2, pc, #4	; (adr r2, 8004588 <DMA_CheckFifoParam+0x28>)
 8004582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004586:	bf00      	nop
 8004588:	08004599 	.word	0x08004599
 800458c:	080045ab 	.word	0x080045ab
 8004590:	08004599 	.word	0x08004599
 8004594:	0800462f 	.word	0x0800462f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d046      	beq.n	8004632 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045a8:	e043      	b.n	8004632 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045b2:	d140      	bne.n	8004636 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045b8:	e03d      	b.n	8004636 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045c2:	d121      	bne.n	8004608 <DMA_CheckFifoParam+0xa8>
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	2b03      	cmp	r3, #3
 80045c8:	d837      	bhi.n	800463a <DMA_CheckFifoParam+0xda>
 80045ca:	a201      	add	r2, pc, #4	; (adr r2, 80045d0 <DMA_CheckFifoParam+0x70>)
 80045cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d0:	080045e1 	.word	0x080045e1
 80045d4:	080045e7 	.word	0x080045e7
 80045d8:	080045e1 	.word	0x080045e1
 80045dc:	080045f9 	.word	0x080045f9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	73fb      	strb	r3, [r7, #15]
      break;
 80045e4:	e030      	b.n	8004648 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d025      	beq.n	800463e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045f6:	e022      	b.n	800463e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004600:	d11f      	bne.n	8004642 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004606:	e01c      	b.n	8004642 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	2b02      	cmp	r3, #2
 800460c:	d903      	bls.n	8004616 <DMA_CheckFifoParam+0xb6>
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	2b03      	cmp	r3, #3
 8004612:	d003      	beq.n	800461c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004614:	e018      	b.n	8004648 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	73fb      	strb	r3, [r7, #15]
      break;
 800461a:	e015      	b.n	8004648 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004620:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00e      	beq.n	8004646 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	73fb      	strb	r3, [r7, #15]
      break;
 800462c:	e00b      	b.n	8004646 <DMA_CheckFifoParam+0xe6>
      break;
 800462e:	bf00      	nop
 8004630:	e00a      	b.n	8004648 <DMA_CheckFifoParam+0xe8>
      break;
 8004632:	bf00      	nop
 8004634:	e008      	b.n	8004648 <DMA_CheckFifoParam+0xe8>
      break;
 8004636:	bf00      	nop
 8004638:	e006      	b.n	8004648 <DMA_CheckFifoParam+0xe8>
      break;
 800463a:	bf00      	nop
 800463c:	e004      	b.n	8004648 <DMA_CheckFifoParam+0xe8>
      break;
 800463e:	bf00      	nop
 8004640:	e002      	b.n	8004648 <DMA_CheckFifoParam+0xe8>
      break;   
 8004642:	bf00      	nop
 8004644:	e000      	b.n	8004648 <DMA_CheckFifoParam+0xe8>
      break;
 8004646:	bf00      	nop
    }
  } 
  
  return status; 
 8004648:	7bfb      	ldrb	r3, [r7, #15]
}
 800464a:	4618      	mov	r0, r3
 800464c:	3714      	adds	r7, #20
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop

08004658 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004658:	b480      	push	{r7}
 800465a:	b089      	sub	sp, #36	; 0x24
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004662:	2300      	movs	r3, #0
 8004664:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004666:	2300      	movs	r3, #0
 8004668:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800466a:	2300      	movs	r3, #0
 800466c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800466e:	2300      	movs	r3, #0
 8004670:	61fb      	str	r3, [r7, #28]
 8004672:	e159      	b.n	8004928 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004674:	2201      	movs	r2, #1
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	fa02 f303 	lsl.w	r3, r2, r3
 800467c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	4013      	ands	r3, r2
 8004686:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	429a      	cmp	r2, r3
 800468e:	f040 8148 	bne.w	8004922 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f003 0303 	and.w	r3, r3, #3
 800469a:	2b01      	cmp	r3, #1
 800469c:	d005      	beq.n	80046aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d130      	bne.n	800470c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	005b      	lsls	r3, r3, #1
 80046b4:	2203      	movs	r2, #3
 80046b6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ba:	43db      	mvns	r3, r3
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	4013      	ands	r3, r2
 80046c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	68da      	ldr	r2, [r3, #12]
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	fa02 f303 	lsl.w	r3, r2, r3
 80046ce:	69ba      	ldr	r2, [r7, #24]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046e0:	2201      	movs	r2, #1
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	fa02 f303 	lsl.w	r3, r2, r3
 80046e8:	43db      	mvns	r3, r3
 80046ea:	69ba      	ldr	r2, [r7, #24]
 80046ec:	4013      	ands	r3, r2
 80046ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	091b      	lsrs	r3, r3, #4
 80046f6:	f003 0201 	and.w	r2, r3, #1
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004700:	69ba      	ldr	r2, [r7, #24]
 8004702:	4313      	orrs	r3, r2
 8004704:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f003 0303 	and.w	r3, r3, #3
 8004714:	2b03      	cmp	r3, #3
 8004716:	d017      	beq.n	8004748 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	2203      	movs	r2, #3
 8004724:	fa02 f303 	lsl.w	r3, r2, r3
 8004728:	43db      	mvns	r3, r3
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	4013      	ands	r3, r2
 800472e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	689a      	ldr	r2, [r3, #8]
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	005b      	lsls	r3, r3, #1
 8004738:	fa02 f303 	lsl.w	r3, r2, r3
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	4313      	orrs	r3, r2
 8004740:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f003 0303 	and.w	r3, r3, #3
 8004750:	2b02      	cmp	r3, #2
 8004752:	d123      	bne.n	800479c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	08da      	lsrs	r2, r3, #3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	3208      	adds	r2, #8
 800475c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004760:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	f003 0307 	and.w	r3, r3, #7
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	220f      	movs	r2, #15
 800476c:	fa02 f303 	lsl.w	r3, r2, r3
 8004770:	43db      	mvns	r3, r3
 8004772:	69ba      	ldr	r2, [r7, #24]
 8004774:	4013      	ands	r3, r2
 8004776:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	691a      	ldr	r2, [r3, #16]
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	f003 0307 	and.w	r3, r3, #7
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	fa02 f303 	lsl.w	r3, r2, r3
 8004788:	69ba      	ldr	r2, [r7, #24]
 800478a:	4313      	orrs	r3, r2
 800478c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	08da      	lsrs	r2, r3, #3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	3208      	adds	r2, #8
 8004796:	69b9      	ldr	r1, [r7, #24]
 8004798:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	005b      	lsls	r3, r3, #1
 80047a6:	2203      	movs	r2, #3
 80047a8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ac:	43db      	mvns	r3, r3
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	4013      	ands	r3, r2
 80047b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f003 0203 	and.w	r2, r3, #3
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	005b      	lsls	r3, r3, #1
 80047c0:	fa02 f303 	lsl.w	r3, r2, r3
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	69ba      	ldr	r2, [r7, #24]
 80047ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f000 80a2 	beq.w	8004922 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047de:	2300      	movs	r3, #0
 80047e0:	60fb      	str	r3, [r7, #12]
 80047e2:	4b57      	ldr	r3, [pc, #348]	; (8004940 <HAL_GPIO_Init+0x2e8>)
 80047e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e6:	4a56      	ldr	r2, [pc, #344]	; (8004940 <HAL_GPIO_Init+0x2e8>)
 80047e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047ec:	6453      	str	r3, [r2, #68]	; 0x44
 80047ee:	4b54      	ldr	r3, [pc, #336]	; (8004940 <HAL_GPIO_Init+0x2e8>)
 80047f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047f6:	60fb      	str	r3, [r7, #12]
 80047f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047fa:	4a52      	ldr	r2, [pc, #328]	; (8004944 <HAL_GPIO_Init+0x2ec>)
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	089b      	lsrs	r3, r3, #2
 8004800:	3302      	adds	r3, #2
 8004802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004806:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	f003 0303 	and.w	r3, r3, #3
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	220f      	movs	r2, #15
 8004812:	fa02 f303 	lsl.w	r3, r2, r3
 8004816:	43db      	mvns	r3, r3
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	4013      	ands	r3, r2
 800481c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a49      	ldr	r2, [pc, #292]	; (8004948 <HAL_GPIO_Init+0x2f0>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d019      	beq.n	800485a <HAL_GPIO_Init+0x202>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a48      	ldr	r2, [pc, #288]	; (800494c <HAL_GPIO_Init+0x2f4>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d013      	beq.n	8004856 <HAL_GPIO_Init+0x1fe>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a47      	ldr	r2, [pc, #284]	; (8004950 <HAL_GPIO_Init+0x2f8>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d00d      	beq.n	8004852 <HAL_GPIO_Init+0x1fa>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a46      	ldr	r2, [pc, #280]	; (8004954 <HAL_GPIO_Init+0x2fc>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d007      	beq.n	800484e <HAL_GPIO_Init+0x1f6>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a45      	ldr	r2, [pc, #276]	; (8004958 <HAL_GPIO_Init+0x300>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d101      	bne.n	800484a <HAL_GPIO_Init+0x1f2>
 8004846:	2304      	movs	r3, #4
 8004848:	e008      	b.n	800485c <HAL_GPIO_Init+0x204>
 800484a:	2307      	movs	r3, #7
 800484c:	e006      	b.n	800485c <HAL_GPIO_Init+0x204>
 800484e:	2303      	movs	r3, #3
 8004850:	e004      	b.n	800485c <HAL_GPIO_Init+0x204>
 8004852:	2302      	movs	r3, #2
 8004854:	e002      	b.n	800485c <HAL_GPIO_Init+0x204>
 8004856:	2301      	movs	r3, #1
 8004858:	e000      	b.n	800485c <HAL_GPIO_Init+0x204>
 800485a:	2300      	movs	r3, #0
 800485c:	69fa      	ldr	r2, [r7, #28]
 800485e:	f002 0203 	and.w	r2, r2, #3
 8004862:	0092      	lsls	r2, r2, #2
 8004864:	4093      	lsls	r3, r2
 8004866:	69ba      	ldr	r2, [r7, #24]
 8004868:	4313      	orrs	r3, r2
 800486a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800486c:	4935      	ldr	r1, [pc, #212]	; (8004944 <HAL_GPIO_Init+0x2ec>)
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	089b      	lsrs	r3, r3, #2
 8004872:	3302      	adds	r3, #2
 8004874:	69ba      	ldr	r2, [r7, #24]
 8004876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800487a:	4b38      	ldr	r3, [pc, #224]	; (800495c <HAL_GPIO_Init+0x304>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	43db      	mvns	r3, r3
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	4013      	ands	r3, r2
 8004888:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004896:	69ba      	ldr	r2, [r7, #24]
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	4313      	orrs	r3, r2
 800489c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800489e:	4a2f      	ldr	r2, [pc, #188]	; (800495c <HAL_GPIO_Init+0x304>)
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80048a4:	4b2d      	ldr	r3, [pc, #180]	; (800495c <HAL_GPIO_Init+0x304>)
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	43db      	mvns	r3, r3
 80048ae:	69ba      	ldr	r2, [r7, #24]
 80048b0:	4013      	ands	r3, r2
 80048b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d003      	beq.n	80048c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048c8:	4a24      	ldr	r2, [pc, #144]	; (800495c <HAL_GPIO_Init+0x304>)
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048ce:	4b23      	ldr	r3, [pc, #140]	; (800495c <HAL_GPIO_Init+0x304>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	43db      	mvns	r3, r3
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	4013      	ands	r3, r2
 80048dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80048ea:	69ba      	ldr	r2, [r7, #24]
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80048f2:	4a1a      	ldr	r2, [pc, #104]	; (800495c <HAL_GPIO_Init+0x304>)
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80048f8:	4b18      	ldr	r3, [pc, #96]	; (800495c <HAL_GPIO_Init+0x304>)
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	43db      	mvns	r3, r3
 8004902:	69ba      	ldr	r2, [r7, #24]
 8004904:	4013      	ands	r3, r2
 8004906:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d003      	beq.n	800491c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	4313      	orrs	r3, r2
 800491a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800491c:	4a0f      	ldr	r2, [pc, #60]	; (800495c <HAL_GPIO_Init+0x304>)
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	3301      	adds	r3, #1
 8004926:	61fb      	str	r3, [r7, #28]
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	2b0f      	cmp	r3, #15
 800492c:	f67f aea2 	bls.w	8004674 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004930:	bf00      	nop
 8004932:	bf00      	nop
 8004934:	3724      	adds	r7, #36	; 0x24
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	40023800 	.word	0x40023800
 8004944:	40013800 	.word	0x40013800
 8004948:	40020000 	.word	0x40020000
 800494c:	40020400 	.word	0x40020400
 8004950:	40020800 	.word	0x40020800
 8004954:	40020c00 	.word	0x40020c00
 8004958:	40021000 	.word	0x40021000
 800495c:	40013c00 	.word	0x40013c00

08004960 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	460b      	mov	r3, r1
 800496a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	691a      	ldr	r2, [r3, #16]
 8004970:	887b      	ldrh	r3, [r7, #2]
 8004972:	4013      	ands	r3, r2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d002      	beq.n	800497e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004978:	2301      	movs	r3, #1
 800497a:	73fb      	strb	r3, [r7, #15]
 800497c:	e001      	b.n	8004982 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800497e:	2300      	movs	r3, #0
 8004980:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004982:	7bfb      	ldrb	r3, [r7, #15]
}
 8004984:	4618      	mov	r0, r3
 8004986:	3714      	adds	r7, #20
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	460b      	mov	r3, r1
 800499a:	807b      	strh	r3, [r7, #2]
 800499c:	4613      	mov	r3, r2
 800499e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049a0:	787b      	ldrb	r3, [r7, #1]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049a6:	887a      	ldrh	r2, [r7, #2]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80049ac:	e003      	b.n	80049b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80049ae:	887b      	ldrh	r3, [r7, #2]
 80049b0:	041a      	lsls	r2, r3, #16
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	619a      	str	r2, [r3, #24]
}
 80049b6:	bf00      	nop
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049c2:	b480      	push	{r7}
 80049c4:	b085      	sub	sp, #20
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
 80049ca:	460b      	mov	r3, r1
 80049cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80049d4:	887a      	ldrh	r2, [r7, #2]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	4013      	ands	r3, r2
 80049da:	041a      	lsls	r2, r3, #16
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	43d9      	mvns	r1, r3
 80049e0:	887b      	ldrh	r3, [r7, #2]
 80049e2:	400b      	ands	r3, r1
 80049e4:	431a      	orrs	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	619a      	str	r2, [r3, #24]
}
 80049ea:	bf00      	nop
 80049ec:	3714      	adds	r7, #20
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
	...

080049f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e12b      	b.n	8004c62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d106      	bne.n	8004a24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7fc fec0 	bl	80017a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2224      	movs	r2, #36	; 0x24
 8004a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f022 0201 	bic.w	r2, r2, #1
 8004a3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a5c:	f001 fbac 	bl	80061b8 <HAL_RCC_GetPCLK1Freq>
 8004a60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	4a81      	ldr	r2, [pc, #516]	; (8004c6c <HAL_I2C_Init+0x274>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d807      	bhi.n	8004a7c <HAL_I2C_Init+0x84>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	4a80      	ldr	r2, [pc, #512]	; (8004c70 <HAL_I2C_Init+0x278>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	bf94      	ite	ls
 8004a74:	2301      	movls	r3, #1
 8004a76:	2300      	movhi	r3, #0
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	e006      	b.n	8004a8a <HAL_I2C_Init+0x92>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	4a7d      	ldr	r2, [pc, #500]	; (8004c74 <HAL_I2C_Init+0x27c>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	bf94      	ite	ls
 8004a84:	2301      	movls	r3, #1
 8004a86:	2300      	movhi	r3, #0
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e0e7      	b.n	8004c62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	4a78      	ldr	r2, [pc, #480]	; (8004c78 <HAL_I2C_Init+0x280>)
 8004a96:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9a:	0c9b      	lsrs	r3, r3, #18
 8004a9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	4a6a      	ldr	r2, [pc, #424]	; (8004c6c <HAL_I2C_Init+0x274>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d802      	bhi.n	8004acc <HAL_I2C_Init+0xd4>
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	e009      	b.n	8004ae0 <HAL_I2C_Init+0xe8>
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004ad2:	fb02 f303 	mul.w	r3, r2, r3
 8004ad6:	4a69      	ldr	r2, [pc, #420]	; (8004c7c <HAL_I2C_Init+0x284>)
 8004ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8004adc:	099b      	lsrs	r3, r3, #6
 8004ade:	3301      	adds	r3, #1
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	6812      	ldr	r2, [r2, #0]
 8004ae4:	430b      	orrs	r3, r1
 8004ae6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	69db      	ldr	r3, [r3, #28]
 8004aee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004af2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	495c      	ldr	r1, [pc, #368]	; (8004c6c <HAL_I2C_Init+0x274>)
 8004afc:	428b      	cmp	r3, r1
 8004afe:	d819      	bhi.n	8004b34 <HAL_I2C_Init+0x13c>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	1e59      	subs	r1, r3, #1
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b0e:	1c59      	adds	r1, r3, #1
 8004b10:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004b14:	400b      	ands	r3, r1
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00a      	beq.n	8004b30 <HAL_I2C_Init+0x138>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	1e59      	subs	r1, r3, #1
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	005b      	lsls	r3, r3, #1
 8004b24:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b28:	3301      	adds	r3, #1
 8004b2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b2e:	e051      	b.n	8004bd4 <HAL_I2C_Init+0x1dc>
 8004b30:	2304      	movs	r3, #4
 8004b32:	e04f      	b.n	8004bd4 <HAL_I2C_Init+0x1dc>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d111      	bne.n	8004b60 <HAL_I2C_Init+0x168>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	1e58      	subs	r0, r3, #1
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6859      	ldr	r1, [r3, #4]
 8004b44:	460b      	mov	r3, r1
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	440b      	add	r3, r1
 8004b4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b4e:	3301      	adds	r3, #1
 8004b50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	bf0c      	ite	eq
 8004b58:	2301      	moveq	r3, #1
 8004b5a:	2300      	movne	r3, #0
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	e012      	b.n	8004b86 <HAL_I2C_Init+0x18e>
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	1e58      	subs	r0, r3, #1
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6859      	ldr	r1, [r3, #4]
 8004b68:	460b      	mov	r3, r1
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	440b      	add	r3, r1
 8004b6e:	0099      	lsls	r1, r3, #2
 8004b70:	440b      	add	r3, r1
 8004b72:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b76:	3301      	adds	r3, #1
 8004b78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	bf0c      	ite	eq
 8004b80:	2301      	moveq	r3, #1
 8004b82:	2300      	movne	r3, #0
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <HAL_I2C_Init+0x196>
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e022      	b.n	8004bd4 <HAL_I2C_Init+0x1dc>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10e      	bne.n	8004bb4 <HAL_I2C_Init+0x1bc>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	1e58      	subs	r0, r3, #1
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6859      	ldr	r1, [r3, #4]
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	005b      	lsls	r3, r3, #1
 8004ba2:	440b      	add	r3, r1
 8004ba4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ba8:	3301      	adds	r3, #1
 8004baa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bb2:	e00f      	b.n	8004bd4 <HAL_I2C_Init+0x1dc>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	1e58      	subs	r0, r3, #1
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6859      	ldr	r1, [r3, #4]
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	440b      	add	r3, r1
 8004bc2:	0099      	lsls	r1, r3, #2
 8004bc4:	440b      	add	r3, r1
 8004bc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bca:	3301      	adds	r3, #1
 8004bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bd4:	6879      	ldr	r1, [r7, #4]
 8004bd6:	6809      	ldr	r1, [r1, #0]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	69da      	ldr	r2, [r3, #28]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	6911      	ldr	r1, [r2, #16]
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	68d2      	ldr	r2, [r2, #12]
 8004c0e:	4311      	orrs	r1, r2
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	6812      	ldr	r2, [r2, #0]
 8004c14:	430b      	orrs	r3, r1
 8004c16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	695a      	ldr	r2, [r3, #20]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	430a      	orrs	r2, r1
 8004c32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f042 0201 	orr.w	r2, r2, #1
 8004c42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2220      	movs	r2, #32
 8004c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	000186a0 	.word	0x000186a0
 8004c70:	001e847f 	.word	0x001e847f
 8004c74:	003d08ff 	.word	0x003d08ff
 8004c78:	431bde83 	.word	0x431bde83
 8004c7c:	10624dd3 	.word	0x10624dd3

08004c80 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b088      	sub	sp, #32
 8004c84:	af02      	add	r7, sp, #8
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	4608      	mov	r0, r1
 8004c8a:	4611      	mov	r1, r2
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	4603      	mov	r3, r0
 8004c90:	817b      	strh	r3, [r7, #10]
 8004c92:	460b      	mov	r3, r1
 8004c94:	813b      	strh	r3, [r7, #8]
 8004c96:	4613      	mov	r3, r2
 8004c98:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c9a:	f7fe fbeb 	bl	8003474 <HAL_GetTick>
 8004c9e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	2b20      	cmp	r3, #32
 8004caa:	f040 80d9 	bne.w	8004e60 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	2319      	movs	r3, #25
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	496d      	ldr	r1, [pc, #436]	; (8004e6c <HAL_I2C_Mem_Write+0x1ec>)
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f000 fc7f 	bl	80055bc <I2C_WaitOnFlagUntilTimeout>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d001      	beq.n	8004cc8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	e0cc      	b.n	8004e62 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d101      	bne.n	8004cd6 <HAL_I2C_Mem_Write+0x56>
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	e0c5      	b.n	8004e62 <HAL_I2C_Mem_Write+0x1e2>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0301 	and.w	r3, r3, #1
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d007      	beq.n	8004cfc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f042 0201 	orr.w	r2, r2, #1
 8004cfa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d0a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2221      	movs	r2, #33	; 0x21
 8004d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2240      	movs	r2, #64	; 0x40
 8004d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6a3a      	ldr	r2, [r7, #32]
 8004d26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	4a4d      	ldr	r2, [pc, #308]	; (8004e70 <HAL_I2C_Mem_Write+0x1f0>)
 8004d3c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d3e:	88f8      	ldrh	r0, [r7, #6]
 8004d40:	893a      	ldrh	r2, [r7, #8]
 8004d42:	8979      	ldrh	r1, [r7, #10]
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	9301      	str	r3, [sp, #4]
 8004d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4a:	9300      	str	r3, [sp, #0]
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f000 fab6 	bl	80052c0 <I2C_RequestMemoryWrite>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d052      	beq.n	8004e00 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e081      	b.n	8004e62 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f000 fd00 	bl	8005768 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00d      	beq.n	8004d8a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d72:	2b04      	cmp	r3, #4
 8004d74:	d107      	bne.n	8004d86 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d84:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e06b      	b.n	8004e62 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8e:	781a      	ldrb	r2, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9a:	1c5a      	adds	r2, r3, #1
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da4:	3b01      	subs	r3, #1
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	3b01      	subs	r3, #1
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	695b      	ldr	r3, [r3, #20]
 8004dc0:	f003 0304 	and.w	r3, r3, #4
 8004dc4:	2b04      	cmp	r3, #4
 8004dc6:	d11b      	bne.n	8004e00 <HAL_I2C_Mem_Write+0x180>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d017      	beq.n	8004e00 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd4:	781a      	ldrb	r2, [r3, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de0:	1c5a      	adds	r2, r3, #1
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dea:	3b01      	subs	r3, #1
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d1aa      	bne.n	8004d5e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e0c:	68f8      	ldr	r0, [r7, #12]
 8004e0e:	f000 fcec 	bl	80057ea <I2C_WaitOnBTFFlagUntilTimeout>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00d      	beq.n	8004e34 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1c:	2b04      	cmp	r3, #4
 8004e1e:	d107      	bne.n	8004e30 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e2e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e016      	b.n	8004e62 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2220      	movs	r2, #32
 8004e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	e000      	b.n	8004e62 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004e60:	2302      	movs	r3, #2
  }
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3718      	adds	r7, #24
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	00100002 	.word	0x00100002
 8004e70:	ffff0000 	.word	0xffff0000

08004e74 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b08c      	sub	sp, #48	; 0x30
 8004e78:	af02      	add	r7, sp, #8
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	4608      	mov	r0, r1
 8004e7e:	4611      	mov	r1, r2
 8004e80:	461a      	mov	r2, r3
 8004e82:	4603      	mov	r3, r0
 8004e84:	817b      	strh	r3, [r7, #10]
 8004e86:	460b      	mov	r3, r1
 8004e88:	813b      	strh	r3, [r7, #8]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e8e:	f7fe faf1 	bl	8003474 <HAL_GetTick>
 8004e92:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b20      	cmp	r3, #32
 8004e9e:	f040 8208 	bne.w	80052b2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	2319      	movs	r3, #25
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	497b      	ldr	r1, [pc, #492]	; (8005098 <HAL_I2C_Mem_Read+0x224>)
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f000 fb85 	bl	80055bc <I2C_WaitOnFlagUntilTimeout>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d001      	beq.n	8004ebc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004eb8:	2302      	movs	r3, #2
 8004eba:	e1fb      	b.n	80052b4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d101      	bne.n	8004eca <HAL_I2C_Mem_Read+0x56>
 8004ec6:	2302      	movs	r3, #2
 8004ec8:	e1f4      	b.n	80052b4 <HAL_I2C_Mem_Read+0x440>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0301 	and.w	r3, r3, #1
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d007      	beq.n	8004ef0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f042 0201 	orr.w	r2, r2, #1
 8004eee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004efe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2222      	movs	r2, #34	; 0x22
 8004f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2240      	movs	r2, #64	; 0x40
 8004f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2200      	movs	r2, #0
 8004f14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004f20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	4a5b      	ldr	r2, [pc, #364]	; (800509c <HAL_I2C_Mem_Read+0x228>)
 8004f30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f32:	88f8      	ldrh	r0, [r7, #6]
 8004f34:	893a      	ldrh	r2, [r7, #8]
 8004f36:	8979      	ldrh	r1, [r7, #10]
 8004f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3a:	9301      	str	r3, [sp, #4]
 8004f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3e:	9300      	str	r3, [sp, #0]
 8004f40:	4603      	mov	r3, r0
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f000 fa52 	bl	80053ec <I2C_RequestMemoryRead>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d001      	beq.n	8004f52 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e1b0      	b.n	80052b4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d113      	bne.n	8004f82 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	623b      	str	r3, [r7, #32]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	623b      	str	r3, [r7, #32]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	623b      	str	r3, [r7, #32]
 8004f6e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f7e:	601a      	str	r2, [r3, #0]
 8004f80:	e184      	b.n	800528c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d11b      	bne.n	8004fc2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	61fb      	str	r3, [r7, #28]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	61fb      	str	r3, [r7, #28]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	61fb      	str	r3, [r7, #28]
 8004fae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fbe:	601a      	str	r2, [r3, #0]
 8004fc0:	e164      	b.n	800528c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d11b      	bne.n	8005002 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fd8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fe8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fea:	2300      	movs	r3, #0
 8004fec:	61bb      	str	r3, [r7, #24]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	61bb      	str	r3, [r7, #24]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	61bb      	str	r3, [r7, #24]
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	e144      	b.n	800528c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005002:	2300      	movs	r3, #0
 8005004:	617b      	str	r3, [r7, #20]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	617b      	str	r3, [r7, #20]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	617b      	str	r3, [r7, #20]
 8005016:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005018:	e138      	b.n	800528c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800501e:	2b03      	cmp	r3, #3
 8005020:	f200 80f1 	bhi.w	8005206 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005028:	2b01      	cmp	r3, #1
 800502a:	d123      	bne.n	8005074 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800502c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800502e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f000 fc1b 	bl	800586c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d001      	beq.n	8005040 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e139      	b.n	80052b4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	691a      	ldr	r2, [r3, #16]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504a:	b2d2      	uxtb	r2, r2
 800504c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005052:	1c5a      	adds	r2, r3, #1
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800505c:	3b01      	subs	r3, #1
 800505e:	b29a      	uxth	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005068:	b29b      	uxth	r3, r3
 800506a:	3b01      	subs	r3, #1
 800506c:	b29a      	uxth	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005072:	e10b      	b.n	800528c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005078:	2b02      	cmp	r3, #2
 800507a:	d14e      	bne.n	800511a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800507c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005082:	2200      	movs	r2, #0
 8005084:	4906      	ldr	r1, [pc, #24]	; (80050a0 <HAL_I2C_Mem_Read+0x22c>)
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f000 fa98 	bl	80055bc <I2C_WaitOnFlagUntilTimeout>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d008      	beq.n	80050a4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e10e      	b.n	80052b4 <HAL_I2C_Mem_Read+0x440>
 8005096:	bf00      	nop
 8005098:	00100002 	.word	0x00100002
 800509c:	ffff0000 	.word	0xffff0000
 80050a0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	691a      	ldr	r2, [r3, #16]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050be:	b2d2      	uxtb	r2, r2
 80050c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c6:	1c5a      	adds	r2, r3, #1
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050d0:	3b01      	subs	r3, #1
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050dc:	b29b      	uxth	r3, r3
 80050de:	3b01      	subs	r3, #1
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	691a      	ldr	r2, [r3, #16]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f0:	b2d2      	uxtb	r2, r2
 80050f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f8:	1c5a      	adds	r2, r3, #1
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005102:	3b01      	subs	r3, #1
 8005104:	b29a      	uxth	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800510e:	b29b      	uxth	r3, r3
 8005110:	3b01      	subs	r3, #1
 8005112:	b29a      	uxth	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005118:	e0b8      	b.n	800528c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	9300      	str	r3, [sp, #0]
 800511e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005120:	2200      	movs	r2, #0
 8005122:	4966      	ldr	r1, [pc, #408]	; (80052bc <HAL_I2C_Mem_Read+0x448>)
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f000 fa49 	bl	80055bc <I2C_WaitOnFlagUntilTimeout>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d001      	beq.n	8005134 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e0bf      	b.n	80052b4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005142:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	691a      	ldr	r2, [r3, #16]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514e:	b2d2      	uxtb	r2, r2
 8005150:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005156:	1c5a      	adds	r2, r3, #1
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005160:	3b01      	subs	r3, #1
 8005162:	b29a      	uxth	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800516c:	b29b      	uxth	r3, r3
 800516e:	3b01      	subs	r3, #1
 8005170:	b29a      	uxth	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005178:	9300      	str	r3, [sp, #0]
 800517a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517c:	2200      	movs	r2, #0
 800517e:	494f      	ldr	r1, [pc, #316]	; (80052bc <HAL_I2C_Mem_Read+0x448>)
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f000 fa1b 	bl	80055bc <I2C_WaitOnFlagUntilTimeout>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d001      	beq.n	8005190 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e091      	b.n	80052b4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800519e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	691a      	ldr	r2, [r3, #16]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051aa:	b2d2      	uxtb	r2, r2
 80051ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b2:	1c5a      	adds	r2, r3, #1
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051bc:	3b01      	subs	r3, #1
 80051be:	b29a      	uxth	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	3b01      	subs	r3, #1
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	691a      	ldr	r2, [r3, #16]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051dc:	b2d2      	uxtb	r2, r2
 80051de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e4:	1c5a      	adds	r2, r3, #1
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ee:	3b01      	subs	r3, #1
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	3b01      	subs	r3, #1
 80051fe:	b29a      	uxth	r2, r3
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005204:	e042      	b.n	800528c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005208:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f000 fb2e 	bl	800586c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e04c      	b.n	80052b4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	691a      	ldr	r2, [r3, #16]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005224:	b2d2      	uxtb	r2, r2
 8005226:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522c:	1c5a      	adds	r2, r3, #1
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005236:	3b01      	subs	r3, #1
 8005238:	b29a      	uxth	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005242:	b29b      	uxth	r3, r3
 8005244:	3b01      	subs	r3, #1
 8005246:	b29a      	uxth	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	f003 0304 	and.w	r3, r3, #4
 8005256:	2b04      	cmp	r3, #4
 8005258:	d118      	bne.n	800528c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	691a      	ldr	r2, [r3, #16]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005264:	b2d2      	uxtb	r2, r2
 8005266:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526c:	1c5a      	adds	r2, r3, #1
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005276:	3b01      	subs	r3, #1
 8005278:	b29a      	uxth	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005282:	b29b      	uxth	r3, r3
 8005284:	3b01      	subs	r3, #1
 8005286:	b29a      	uxth	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005290:	2b00      	cmp	r3, #0
 8005292:	f47f aec2 	bne.w	800501a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2220      	movs	r2, #32
 800529a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80052ae:	2300      	movs	r3, #0
 80052b0:	e000      	b.n	80052b4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80052b2:	2302      	movs	r3, #2
  }
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3728      	adds	r7, #40	; 0x28
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	00010004 	.word	0x00010004

080052c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b088      	sub	sp, #32
 80052c4:	af02      	add	r7, sp, #8
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	4608      	mov	r0, r1
 80052ca:	4611      	mov	r1, r2
 80052cc:	461a      	mov	r2, r3
 80052ce:	4603      	mov	r3, r0
 80052d0:	817b      	strh	r3, [r7, #10]
 80052d2:	460b      	mov	r3, r1
 80052d4:	813b      	strh	r3, [r7, #8]
 80052d6:	4613      	mov	r3, r2
 80052d8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ec:	9300      	str	r3, [sp, #0]
 80052ee:	6a3b      	ldr	r3, [r7, #32]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f000 f960 	bl	80055bc <I2C_WaitOnFlagUntilTimeout>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00d      	beq.n	800531e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800530c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005310:	d103      	bne.n	800531a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005318:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e05f      	b.n	80053de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800531e:	897b      	ldrh	r3, [r7, #10]
 8005320:	b2db      	uxtb	r3, r3
 8005322:	461a      	mov	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800532c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800532e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005330:	6a3a      	ldr	r2, [r7, #32]
 8005332:	492d      	ldr	r1, [pc, #180]	; (80053e8 <I2C_RequestMemoryWrite+0x128>)
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f000 f998 	bl	800566a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d001      	beq.n	8005344 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e04c      	b.n	80053de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005344:	2300      	movs	r3, #0
 8005346:	617b      	str	r3, [r7, #20]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	617b      	str	r3, [r7, #20]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	617b      	str	r3, [r7, #20]
 8005358:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800535a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800535c:	6a39      	ldr	r1, [r7, #32]
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f000 fa02 	bl	8005768 <I2C_WaitOnTXEFlagUntilTimeout>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00d      	beq.n	8005386 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536e:	2b04      	cmp	r3, #4
 8005370:	d107      	bne.n	8005382 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005380:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e02b      	b.n	80053de <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005386:	88fb      	ldrh	r3, [r7, #6]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d105      	bne.n	8005398 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800538c:	893b      	ldrh	r3, [r7, #8]
 800538e:	b2da      	uxtb	r2, r3
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	611a      	str	r2, [r3, #16]
 8005396:	e021      	b.n	80053dc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005398:	893b      	ldrh	r3, [r7, #8]
 800539a:	0a1b      	lsrs	r3, r3, #8
 800539c:	b29b      	uxth	r3, r3
 800539e:	b2da      	uxtb	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053a8:	6a39      	ldr	r1, [r7, #32]
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	f000 f9dc 	bl	8005768 <I2C_WaitOnTXEFlagUntilTimeout>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00d      	beq.n	80053d2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ba:	2b04      	cmp	r3, #4
 80053bc:	d107      	bne.n	80053ce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e005      	b.n	80053de <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053d2:	893b      	ldrh	r3, [r7, #8]
 80053d4:	b2da      	uxtb	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3718      	adds	r7, #24
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	00010002 	.word	0x00010002

080053ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b088      	sub	sp, #32
 80053f0:	af02      	add	r7, sp, #8
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	4608      	mov	r0, r1
 80053f6:	4611      	mov	r1, r2
 80053f8:	461a      	mov	r2, r3
 80053fa:	4603      	mov	r3, r0
 80053fc:	817b      	strh	r3, [r7, #10]
 80053fe:	460b      	mov	r3, r1
 8005400:	813b      	strh	r3, [r7, #8]
 8005402:	4613      	mov	r3, r2
 8005404:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005414:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005424:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005428:	9300      	str	r3, [sp, #0]
 800542a:	6a3b      	ldr	r3, [r7, #32]
 800542c:	2200      	movs	r2, #0
 800542e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f000 f8c2 	bl	80055bc <I2C_WaitOnFlagUntilTimeout>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00d      	beq.n	800545a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005448:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800544c:	d103      	bne.n	8005456 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005454:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e0aa      	b.n	80055b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800545a:	897b      	ldrh	r3, [r7, #10]
 800545c:	b2db      	uxtb	r3, r3
 800545e:	461a      	mov	r2, r3
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005468:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800546a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546c:	6a3a      	ldr	r2, [r7, #32]
 800546e:	4952      	ldr	r1, [pc, #328]	; (80055b8 <I2C_RequestMemoryRead+0x1cc>)
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f000 f8fa 	bl	800566a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d001      	beq.n	8005480 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e097      	b.n	80055b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005480:	2300      	movs	r3, #0
 8005482:	617b      	str	r3, [r7, #20]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	617b      	str	r3, [r7, #20]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	617b      	str	r3, [r7, #20]
 8005494:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005498:	6a39      	ldr	r1, [r7, #32]
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f000 f964 	bl	8005768 <I2C_WaitOnTXEFlagUntilTimeout>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00d      	beq.n	80054c2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054aa:	2b04      	cmp	r3, #4
 80054ac:	d107      	bne.n	80054be <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e076      	b.n	80055b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054c2:	88fb      	ldrh	r3, [r7, #6]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d105      	bne.n	80054d4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054c8:	893b      	ldrh	r3, [r7, #8]
 80054ca:	b2da      	uxtb	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	611a      	str	r2, [r3, #16]
 80054d2:	e021      	b.n	8005518 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80054d4:	893b      	ldrh	r3, [r7, #8]
 80054d6:	0a1b      	lsrs	r3, r3, #8
 80054d8:	b29b      	uxth	r3, r3
 80054da:	b2da      	uxtb	r2, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054e4:	6a39      	ldr	r1, [r7, #32]
 80054e6:	68f8      	ldr	r0, [r7, #12]
 80054e8:	f000 f93e 	bl	8005768 <I2C_WaitOnTXEFlagUntilTimeout>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00d      	beq.n	800550e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f6:	2b04      	cmp	r3, #4
 80054f8:	d107      	bne.n	800550a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005508:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e050      	b.n	80055b0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800550e:	893b      	ldrh	r3, [r7, #8]
 8005510:	b2da      	uxtb	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800551a:	6a39      	ldr	r1, [r7, #32]
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f000 f923 	bl	8005768 <I2C_WaitOnTXEFlagUntilTimeout>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00d      	beq.n	8005544 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552c:	2b04      	cmp	r3, #4
 800552e:	d107      	bne.n	8005540 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800553e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e035      	b.n	80055b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005552:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005556:	9300      	str	r3, [sp, #0]
 8005558:	6a3b      	ldr	r3, [r7, #32]
 800555a:	2200      	movs	r2, #0
 800555c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f000 f82b 	bl	80055bc <I2C_WaitOnFlagUntilTimeout>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00d      	beq.n	8005588 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800557a:	d103      	bne.n	8005584 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005582:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e013      	b.n	80055b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005588:	897b      	ldrh	r3, [r7, #10]
 800558a:	b2db      	uxtb	r3, r3
 800558c:	f043 0301 	orr.w	r3, r3, #1
 8005590:	b2da      	uxtb	r2, r3
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559a:	6a3a      	ldr	r2, [r7, #32]
 800559c:	4906      	ldr	r1, [pc, #24]	; (80055b8 <I2C_RequestMemoryRead+0x1cc>)
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	f000 f863 	bl	800566a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d001      	beq.n	80055ae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e000      	b.n	80055b0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3718      	adds	r7, #24
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	00010002 	.word	0x00010002

080055bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	603b      	str	r3, [r7, #0]
 80055c8:	4613      	mov	r3, r2
 80055ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055cc:	e025      	b.n	800561a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d4:	d021      	beq.n	800561a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055d6:	f7fd ff4d 	bl	8003474 <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	683a      	ldr	r2, [r7, #0]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d302      	bcc.n	80055ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d116      	bne.n	800561a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2220      	movs	r2, #32
 80055f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005606:	f043 0220 	orr.w	r2, r3, #32
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e023      	b.n	8005662 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	0c1b      	lsrs	r3, r3, #16
 800561e:	b2db      	uxtb	r3, r3
 8005620:	2b01      	cmp	r3, #1
 8005622:	d10d      	bne.n	8005640 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	43da      	mvns	r2, r3
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	4013      	ands	r3, r2
 8005630:	b29b      	uxth	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	bf0c      	ite	eq
 8005636:	2301      	moveq	r3, #1
 8005638:	2300      	movne	r3, #0
 800563a:	b2db      	uxtb	r3, r3
 800563c:	461a      	mov	r2, r3
 800563e:	e00c      	b.n	800565a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	43da      	mvns	r2, r3
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	4013      	ands	r3, r2
 800564c:	b29b      	uxth	r3, r3
 800564e:	2b00      	cmp	r3, #0
 8005650:	bf0c      	ite	eq
 8005652:	2301      	moveq	r3, #1
 8005654:	2300      	movne	r3, #0
 8005656:	b2db      	uxtb	r3, r3
 8005658:	461a      	mov	r2, r3
 800565a:	79fb      	ldrb	r3, [r7, #7]
 800565c:	429a      	cmp	r2, r3
 800565e:	d0b6      	beq.n	80055ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b084      	sub	sp, #16
 800566e:	af00      	add	r7, sp, #0
 8005670:	60f8      	str	r0, [r7, #12]
 8005672:	60b9      	str	r1, [r7, #8]
 8005674:	607a      	str	r2, [r7, #4]
 8005676:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005678:	e051      	b.n	800571e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005684:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005688:	d123      	bne.n	80056d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005698:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056a2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2220      	movs	r2, #32
 80056ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056be:	f043 0204 	orr.w	r2, r3, #4
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e046      	b.n	8005760 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d8:	d021      	beq.n	800571e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056da:	f7fd fecb 	bl	8003474 <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d302      	bcc.n	80056f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d116      	bne.n	800571e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2220      	movs	r2, #32
 80056fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570a:	f043 0220 	orr.w	r2, r3, #32
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e020      	b.n	8005760 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	0c1b      	lsrs	r3, r3, #16
 8005722:	b2db      	uxtb	r3, r3
 8005724:	2b01      	cmp	r3, #1
 8005726:	d10c      	bne.n	8005742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	43da      	mvns	r2, r3
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	4013      	ands	r3, r2
 8005734:	b29b      	uxth	r3, r3
 8005736:	2b00      	cmp	r3, #0
 8005738:	bf14      	ite	ne
 800573a:	2301      	movne	r3, #1
 800573c:	2300      	moveq	r3, #0
 800573e:	b2db      	uxtb	r3, r3
 8005740:	e00b      	b.n	800575a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	699b      	ldr	r3, [r3, #24]
 8005748:	43da      	mvns	r2, r3
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	4013      	ands	r3, r2
 800574e:	b29b      	uxth	r3, r3
 8005750:	2b00      	cmp	r3, #0
 8005752:	bf14      	ite	ne
 8005754:	2301      	movne	r3, #1
 8005756:	2300      	moveq	r3, #0
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d18d      	bne.n	800567a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3710      	adds	r7, #16
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005774:	e02d      	b.n	80057d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f000 f8ce 	bl	8005918 <I2C_IsAcknowledgeFailed>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d001      	beq.n	8005786 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e02d      	b.n	80057e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800578c:	d021      	beq.n	80057d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800578e:	f7fd fe71 	bl	8003474 <HAL_GetTick>
 8005792:	4602      	mov	r2, r0
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	429a      	cmp	r2, r3
 800579c:	d302      	bcc.n	80057a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d116      	bne.n	80057d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2220      	movs	r2, #32
 80057ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057be:	f043 0220 	orr.w	r2, r3, #32
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e007      	b.n	80057e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	695b      	ldr	r3, [r3, #20]
 80057d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057dc:	2b80      	cmp	r3, #128	; 0x80
 80057de:	d1ca      	bne.n	8005776 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3710      	adds	r7, #16
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b084      	sub	sp, #16
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	60f8      	str	r0, [r7, #12]
 80057f2:	60b9      	str	r1, [r7, #8]
 80057f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057f6:	e02d      	b.n	8005854 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057f8:	68f8      	ldr	r0, [r7, #12]
 80057fa:	f000 f88d 	bl	8005918 <I2C_IsAcknowledgeFailed>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d001      	beq.n	8005808 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e02d      	b.n	8005864 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800580e:	d021      	beq.n	8005854 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005810:	f7fd fe30 	bl	8003474 <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	429a      	cmp	r2, r3
 800581e:	d302      	bcc.n	8005826 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d116      	bne.n	8005854 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2220      	movs	r2, #32
 8005830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005840:	f043 0220 	orr.w	r2, r3, #32
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e007      	b.n	8005864 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	f003 0304 	and.w	r3, r3, #4
 800585e:	2b04      	cmp	r3, #4
 8005860:	d1ca      	bne.n	80057f8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005878:	e042      	b.n	8005900 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	695b      	ldr	r3, [r3, #20]
 8005880:	f003 0310 	and.w	r3, r3, #16
 8005884:	2b10      	cmp	r3, #16
 8005886:	d119      	bne.n	80058bc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f06f 0210 	mvn.w	r2, #16
 8005890:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2220      	movs	r2, #32
 800589c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e029      	b.n	8005910 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058bc:	f7fd fdda 	bl	8003474 <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	68ba      	ldr	r2, [r7, #8]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d302      	bcc.n	80058d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d116      	bne.n	8005900 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2220      	movs	r2, #32
 80058dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ec:	f043 0220 	orr.w	r2, r3, #32
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e007      	b.n	8005910 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800590a:	2b40      	cmp	r3, #64	; 0x40
 800590c:	d1b5      	bne.n	800587a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	3710      	adds	r7, #16
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800592a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800592e:	d11b      	bne.n	8005968 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005938:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2220      	movs	r2, #32
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005954:	f043 0204 	orr.w	r2, r3, #4
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e000      	b.n	800596a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
	...

08005978 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b086      	sub	sp, #24
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d101      	bne.n	800598a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e264      	b.n	8005e54 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	2b00      	cmp	r3, #0
 8005994:	d075      	beq.n	8005a82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005996:	4ba3      	ldr	r3, [pc, #652]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f003 030c 	and.w	r3, r3, #12
 800599e:	2b04      	cmp	r3, #4
 80059a0:	d00c      	beq.n	80059bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059a2:	4ba0      	ldr	r3, [pc, #640]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059aa:	2b08      	cmp	r3, #8
 80059ac:	d112      	bne.n	80059d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059ae:	4b9d      	ldr	r3, [pc, #628]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059ba:	d10b      	bne.n	80059d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059bc:	4b99      	ldr	r3, [pc, #612]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d05b      	beq.n	8005a80 <HAL_RCC_OscConfig+0x108>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d157      	bne.n	8005a80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e23f      	b.n	8005e54 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059dc:	d106      	bne.n	80059ec <HAL_RCC_OscConfig+0x74>
 80059de:	4b91      	ldr	r3, [pc, #580]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a90      	ldr	r2, [pc, #576]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 80059e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059e8:	6013      	str	r3, [r2, #0]
 80059ea:	e01d      	b.n	8005a28 <HAL_RCC_OscConfig+0xb0>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059f4:	d10c      	bne.n	8005a10 <HAL_RCC_OscConfig+0x98>
 80059f6:	4b8b      	ldr	r3, [pc, #556]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a8a      	ldr	r2, [pc, #552]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 80059fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a00:	6013      	str	r3, [r2, #0]
 8005a02:	4b88      	ldr	r3, [pc, #544]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a87      	ldr	r2, [pc, #540]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a0c:	6013      	str	r3, [r2, #0]
 8005a0e:	e00b      	b.n	8005a28 <HAL_RCC_OscConfig+0xb0>
 8005a10:	4b84      	ldr	r3, [pc, #528]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a83      	ldr	r2, [pc, #524]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a1a:	6013      	str	r3, [r2, #0]
 8005a1c:	4b81      	ldr	r3, [pc, #516]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a80      	ldr	r2, [pc, #512]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005a22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d013      	beq.n	8005a58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a30:	f7fd fd20 	bl	8003474 <HAL_GetTick>
 8005a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a36:	e008      	b.n	8005a4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a38:	f7fd fd1c 	bl	8003474 <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	2b64      	cmp	r3, #100	; 0x64
 8005a44:	d901      	bls.n	8005a4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e204      	b.n	8005e54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a4a:	4b76      	ldr	r3, [pc, #472]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d0f0      	beq.n	8005a38 <HAL_RCC_OscConfig+0xc0>
 8005a56:	e014      	b.n	8005a82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a58:	f7fd fd0c 	bl	8003474 <HAL_GetTick>
 8005a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a5e:	e008      	b.n	8005a72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a60:	f7fd fd08 	bl	8003474 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	2b64      	cmp	r3, #100	; 0x64
 8005a6c:	d901      	bls.n	8005a72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e1f0      	b.n	8005e54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a72:	4b6c      	ldr	r3, [pc, #432]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1f0      	bne.n	8005a60 <HAL_RCC_OscConfig+0xe8>
 8005a7e:	e000      	b.n	8005a82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0302 	and.w	r3, r3, #2
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d063      	beq.n	8005b56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a8e:	4b65      	ldr	r3, [pc, #404]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f003 030c 	and.w	r3, r3, #12
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00b      	beq.n	8005ab2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a9a:	4b62      	ldr	r3, [pc, #392]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005aa2:	2b08      	cmp	r3, #8
 8005aa4:	d11c      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005aa6:	4b5f      	ldr	r3, [pc, #380]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d116      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ab2:	4b5c      	ldr	r3, [pc, #368]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0302 	and.w	r3, r3, #2
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d005      	beq.n	8005aca <HAL_RCC_OscConfig+0x152>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d001      	beq.n	8005aca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e1c4      	b.n	8005e54 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aca:	4b56      	ldr	r3, [pc, #344]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	00db      	lsls	r3, r3, #3
 8005ad8:	4952      	ldr	r1, [pc, #328]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005ada:	4313      	orrs	r3, r2
 8005adc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ade:	e03a      	b.n	8005b56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d020      	beq.n	8005b2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ae8:	4b4f      	ldr	r3, [pc, #316]	; (8005c28 <HAL_RCC_OscConfig+0x2b0>)
 8005aea:	2201      	movs	r2, #1
 8005aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aee:	f7fd fcc1 	bl	8003474 <HAL_GetTick>
 8005af2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005af4:	e008      	b.n	8005b08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005af6:	f7fd fcbd 	bl	8003474 <HAL_GetTick>
 8005afa:	4602      	mov	r2, r0
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d901      	bls.n	8005b08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b04:	2303      	movs	r3, #3
 8005b06:	e1a5      	b.n	8005e54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b08:	4b46      	ldr	r3, [pc, #280]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0302 	and.w	r3, r3, #2
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d0f0      	beq.n	8005af6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b14:	4b43      	ldr	r3, [pc, #268]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	00db      	lsls	r3, r3, #3
 8005b22:	4940      	ldr	r1, [pc, #256]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	600b      	str	r3, [r1, #0]
 8005b28:	e015      	b.n	8005b56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b2a:	4b3f      	ldr	r3, [pc, #252]	; (8005c28 <HAL_RCC_OscConfig+0x2b0>)
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b30:	f7fd fca0 	bl	8003474 <HAL_GetTick>
 8005b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b36:	e008      	b.n	8005b4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b38:	f7fd fc9c 	bl	8003474 <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d901      	bls.n	8005b4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e184      	b.n	8005e54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b4a:	4b36      	ldr	r3, [pc, #216]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1f0      	bne.n	8005b38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0308 	and.w	r3, r3, #8
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d030      	beq.n	8005bc4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d016      	beq.n	8005b98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b6a:	4b30      	ldr	r3, [pc, #192]	; (8005c2c <HAL_RCC_OscConfig+0x2b4>)
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b70:	f7fd fc80 	bl	8003474 <HAL_GetTick>
 8005b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b76:	e008      	b.n	8005b8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b78:	f7fd fc7c 	bl	8003474 <HAL_GetTick>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d901      	bls.n	8005b8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	e164      	b.n	8005e54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b8a:	4b26      	ldr	r3, [pc, #152]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b8e:	f003 0302 	and.w	r3, r3, #2
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d0f0      	beq.n	8005b78 <HAL_RCC_OscConfig+0x200>
 8005b96:	e015      	b.n	8005bc4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b98:	4b24      	ldr	r3, [pc, #144]	; (8005c2c <HAL_RCC_OscConfig+0x2b4>)
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b9e:	f7fd fc69 	bl	8003474 <HAL_GetTick>
 8005ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ba4:	e008      	b.n	8005bb8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ba6:	f7fd fc65 	bl	8003474 <HAL_GetTick>
 8005baa:	4602      	mov	r2, r0
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d901      	bls.n	8005bb8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e14d      	b.n	8005e54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bb8:	4b1a      	ldr	r3, [pc, #104]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bbc:	f003 0302 	and.w	r3, r3, #2
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1f0      	bne.n	8005ba6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0304 	and.w	r3, r3, #4
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f000 80a0 	beq.w	8005d12 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bd6:	4b13      	ldr	r3, [pc, #76]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10f      	bne.n	8005c02 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005be2:	2300      	movs	r3, #0
 8005be4:	60bb      	str	r3, [r7, #8]
 8005be6:	4b0f      	ldr	r3, [pc, #60]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bea:	4a0e      	ldr	r2, [pc, #56]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8005bf2:	4b0c      	ldr	r3, [pc, #48]	; (8005c24 <HAL_RCC_OscConfig+0x2ac>)
 8005bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bfa:	60bb      	str	r3, [r7, #8]
 8005bfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c02:	4b0b      	ldr	r3, [pc, #44]	; (8005c30 <HAL_RCC_OscConfig+0x2b8>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d121      	bne.n	8005c52 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c0e:	4b08      	ldr	r3, [pc, #32]	; (8005c30 <HAL_RCC_OscConfig+0x2b8>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a07      	ldr	r2, [pc, #28]	; (8005c30 <HAL_RCC_OscConfig+0x2b8>)
 8005c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c1a:	f7fd fc2b 	bl	8003474 <HAL_GetTick>
 8005c1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c20:	e011      	b.n	8005c46 <HAL_RCC_OscConfig+0x2ce>
 8005c22:	bf00      	nop
 8005c24:	40023800 	.word	0x40023800
 8005c28:	42470000 	.word	0x42470000
 8005c2c:	42470e80 	.word	0x42470e80
 8005c30:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c34:	f7fd fc1e 	bl	8003474 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d901      	bls.n	8005c46 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e106      	b.n	8005e54 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c46:	4b85      	ldr	r3, [pc, #532]	; (8005e5c <HAL_RCC_OscConfig+0x4e4>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d0f0      	beq.n	8005c34 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d106      	bne.n	8005c68 <HAL_RCC_OscConfig+0x2f0>
 8005c5a:	4b81      	ldr	r3, [pc, #516]	; (8005e60 <HAL_RCC_OscConfig+0x4e8>)
 8005c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c5e:	4a80      	ldr	r2, [pc, #512]	; (8005e60 <HAL_RCC_OscConfig+0x4e8>)
 8005c60:	f043 0301 	orr.w	r3, r3, #1
 8005c64:	6713      	str	r3, [r2, #112]	; 0x70
 8005c66:	e01c      	b.n	8005ca2 <HAL_RCC_OscConfig+0x32a>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	2b05      	cmp	r3, #5
 8005c6e:	d10c      	bne.n	8005c8a <HAL_RCC_OscConfig+0x312>
 8005c70:	4b7b      	ldr	r3, [pc, #492]	; (8005e60 <HAL_RCC_OscConfig+0x4e8>)
 8005c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c74:	4a7a      	ldr	r2, [pc, #488]	; (8005e60 <HAL_RCC_OscConfig+0x4e8>)
 8005c76:	f043 0304 	orr.w	r3, r3, #4
 8005c7a:	6713      	str	r3, [r2, #112]	; 0x70
 8005c7c:	4b78      	ldr	r3, [pc, #480]	; (8005e60 <HAL_RCC_OscConfig+0x4e8>)
 8005c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c80:	4a77      	ldr	r2, [pc, #476]	; (8005e60 <HAL_RCC_OscConfig+0x4e8>)
 8005c82:	f043 0301 	orr.w	r3, r3, #1
 8005c86:	6713      	str	r3, [r2, #112]	; 0x70
 8005c88:	e00b      	b.n	8005ca2 <HAL_RCC_OscConfig+0x32a>
 8005c8a:	4b75      	ldr	r3, [pc, #468]	; (8005e60 <HAL_RCC_OscConfig+0x4e8>)
 8005c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c8e:	4a74      	ldr	r2, [pc, #464]	; (8005e60 <HAL_RCC_OscConfig+0x4e8>)
 8005c90:	f023 0301 	bic.w	r3, r3, #1
 8005c94:	6713      	str	r3, [r2, #112]	; 0x70
 8005c96:	4b72      	ldr	r3, [pc, #456]	; (8005e60 <HAL_RCC_OscConfig+0x4e8>)
 8005c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c9a:	4a71      	ldr	r2, [pc, #452]	; (8005e60 <HAL_RCC_OscConfig+0x4e8>)
 8005c9c:	f023 0304 	bic.w	r3, r3, #4
 8005ca0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d015      	beq.n	8005cd6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005caa:	f7fd fbe3 	bl	8003474 <HAL_GetTick>
 8005cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cb0:	e00a      	b.n	8005cc8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cb2:	f7fd fbdf 	bl	8003474 <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d901      	bls.n	8005cc8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e0c5      	b.n	8005e54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cc8:	4b65      	ldr	r3, [pc, #404]	; (8005e60 <HAL_RCC_OscConfig+0x4e8>)
 8005cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ccc:	f003 0302 	and.w	r3, r3, #2
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d0ee      	beq.n	8005cb2 <HAL_RCC_OscConfig+0x33a>
 8005cd4:	e014      	b.n	8005d00 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cd6:	f7fd fbcd 	bl	8003474 <HAL_GetTick>
 8005cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cdc:	e00a      	b.n	8005cf4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cde:	f7fd fbc9 	bl	8003474 <HAL_GetTick>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d901      	bls.n	8005cf4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e0af      	b.n	8005e54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cf4:	4b5a      	ldr	r3, [pc, #360]	; (8005e60 <HAL_RCC_OscConfig+0x4e8>)
 8005cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf8:	f003 0302 	and.w	r3, r3, #2
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d1ee      	bne.n	8005cde <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d00:	7dfb      	ldrb	r3, [r7, #23]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d105      	bne.n	8005d12 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d06:	4b56      	ldr	r3, [pc, #344]	; (8005e60 <HAL_RCC_OscConfig+0x4e8>)
 8005d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0a:	4a55      	ldr	r2, [pc, #340]	; (8005e60 <HAL_RCC_OscConfig+0x4e8>)
 8005d0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d10:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	699b      	ldr	r3, [r3, #24]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	f000 809b 	beq.w	8005e52 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d1c:	4b50      	ldr	r3, [pc, #320]	; (8005e60 <HAL_RCC_OscConfig+0x4e8>)
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f003 030c 	and.w	r3, r3, #12
 8005d24:	2b08      	cmp	r3, #8
 8005d26:	d05c      	beq.n	8005de2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d141      	bne.n	8005db4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d30:	4b4c      	ldr	r3, [pc, #304]	; (8005e64 <HAL_RCC_OscConfig+0x4ec>)
 8005d32:	2200      	movs	r2, #0
 8005d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d36:	f7fd fb9d 	bl	8003474 <HAL_GetTick>
 8005d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d3c:	e008      	b.n	8005d50 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d3e:	f7fd fb99 	bl	8003474 <HAL_GetTick>
 8005d42:	4602      	mov	r2, r0
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d901      	bls.n	8005d50 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e081      	b.n	8005e54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d50:	4b43      	ldr	r3, [pc, #268]	; (8005e60 <HAL_RCC_OscConfig+0x4e8>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1f0      	bne.n	8005d3e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	69da      	ldr	r2, [r3, #28]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a1b      	ldr	r3, [r3, #32]
 8005d64:	431a      	orrs	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6a:	019b      	lsls	r3, r3, #6
 8005d6c:	431a      	orrs	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d72:	085b      	lsrs	r3, r3, #1
 8005d74:	3b01      	subs	r3, #1
 8005d76:	041b      	lsls	r3, r3, #16
 8005d78:	431a      	orrs	r2, r3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d7e:	061b      	lsls	r3, r3, #24
 8005d80:	4937      	ldr	r1, [pc, #220]	; (8005e60 <HAL_RCC_OscConfig+0x4e8>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d86:	4b37      	ldr	r3, [pc, #220]	; (8005e64 <HAL_RCC_OscConfig+0x4ec>)
 8005d88:	2201      	movs	r2, #1
 8005d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d8c:	f7fd fb72 	bl	8003474 <HAL_GetTick>
 8005d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d92:	e008      	b.n	8005da6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d94:	f7fd fb6e 	bl	8003474 <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d901      	bls.n	8005da6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e056      	b.n	8005e54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005da6:	4b2e      	ldr	r3, [pc, #184]	; (8005e60 <HAL_RCC_OscConfig+0x4e8>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d0f0      	beq.n	8005d94 <HAL_RCC_OscConfig+0x41c>
 8005db2:	e04e      	b.n	8005e52 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005db4:	4b2b      	ldr	r3, [pc, #172]	; (8005e64 <HAL_RCC_OscConfig+0x4ec>)
 8005db6:	2200      	movs	r2, #0
 8005db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dba:	f7fd fb5b 	bl	8003474 <HAL_GetTick>
 8005dbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dc0:	e008      	b.n	8005dd4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dc2:	f7fd fb57 	bl	8003474 <HAL_GetTick>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d901      	bls.n	8005dd4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e03f      	b.n	8005e54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dd4:	4b22      	ldr	r3, [pc, #136]	; (8005e60 <HAL_RCC_OscConfig+0x4e8>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1f0      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x44a>
 8005de0:	e037      	b.n	8005e52 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d101      	bne.n	8005dee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e032      	b.n	8005e54 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005dee:	4b1c      	ldr	r3, [pc, #112]	; (8005e60 <HAL_RCC_OscConfig+0x4e8>)
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	699b      	ldr	r3, [r3, #24]
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d028      	beq.n	8005e4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d121      	bne.n	8005e4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d11a      	bne.n	8005e4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e1e:	4013      	ands	r3, r2
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e24:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d111      	bne.n	8005e4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e34:	085b      	lsrs	r3, r3, #1
 8005e36:	3b01      	subs	r3, #1
 8005e38:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d107      	bne.n	8005e4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e48:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d001      	beq.n	8005e52 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e000      	b.n	8005e54 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3718      	adds	r7, #24
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	40007000 	.word	0x40007000
 8005e60:	40023800 	.word	0x40023800
 8005e64:	42470060 	.word	0x42470060

08005e68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d101      	bne.n	8005e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e0cc      	b.n	8006016 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e7c:	4b68      	ldr	r3, [pc, #416]	; (8006020 <HAL_RCC_ClockConfig+0x1b8>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 0307 	and.w	r3, r3, #7
 8005e84:	683a      	ldr	r2, [r7, #0]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d90c      	bls.n	8005ea4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e8a:	4b65      	ldr	r3, [pc, #404]	; (8006020 <HAL_RCC_ClockConfig+0x1b8>)
 8005e8c:	683a      	ldr	r2, [r7, #0]
 8005e8e:	b2d2      	uxtb	r2, r2
 8005e90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e92:	4b63      	ldr	r3, [pc, #396]	; (8006020 <HAL_RCC_ClockConfig+0x1b8>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0307 	and.w	r3, r3, #7
 8005e9a:	683a      	ldr	r2, [r7, #0]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d001      	beq.n	8005ea4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e0b8      	b.n	8006016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0302 	and.w	r3, r3, #2
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d020      	beq.n	8005ef2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0304 	and.w	r3, r3, #4
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d005      	beq.n	8005ec8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ebc:	4b59      	ldr	r3, [pc, #356]	; (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	4a58      	ldr	r2, [pc, #352]	; (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005ec6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0308 	and.w	r3, r3, #8
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d005      	beq.n	8005ee0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ed4:	4b53      	ldr	r3, [pc, #332]	; (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	4a52      	ldr	r2, [pc, #328]	; (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005eda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ede:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ee0:	4b50      	ldr	r3, [pc, #320]	; (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	494d      	ldr	r1, [pc, #308]	; (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d044      	beq.n	8005f88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d107      	bne.n	8005f16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f06:	4b47      	ldr	r3, [pc, #284]	; (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d119      	bne.n	8005f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e07f      	b.n	8006016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d003      	beq.n	8005f26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f22:	2b03      	cmp	r3, #3
 8005f24:	d107      	bne.n	8005f36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f26:	4b3f      	ldr	r3, [pc, #252]	; (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d109      	bne.n	8005f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e06f      	b.n	8006016 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f36:	4b3b      	ldr	r3, [pc, #236]	; (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0302 	and.w	r3, r3, #2
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d101      	bne.n	8005f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e067      	b.n	8006016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f46:	4b37      	ldr	r3, [pc, #220]	; (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f023 0203 	bic.w	r2, r3, #3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	4934      	ldr	r1, [pc, #208]	; (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005f54:	4313      	orrs	r3, r2
 8005f56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f58:	f7fd fa8c 	bl	8003474 <HAL_GetTick>
 8005f5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f5e:	e00a      	b.n	8005f76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f60:	f7fd fa88 	bl	8003474 <HAL_GetTick>
 8005f64:	4602      	mov	r2, r0
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d901      	bls.n	8005f76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e04f      	b.n	8006016 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f76:	4b2b      	ldr	r3, [pc, #172]	; (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	f003 020c 	and.w	r2, r3, #12
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d1eb      	bne.n	8005f60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f88:	4b25      	ldr	r3, [pc, #148]	; (8006020 <HAL_RCC_ClockConfig+0x1b8>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0307 	and.w	r3, r3, #7
 8005f90:	683a      	ldr	r2, [r7, #0]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d20c      	bcs.n	8005fb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f96:	4b22      	ldr	r3, [pc, #136]	; (8006020 <HAL_RCC_ClockConfig+0x1b8>)
 8005f98:	683a      	ldr	r2, [r7, #0]
 8005f9a:	b2d2      	uxtb	r2, r2
 8005f9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f9e:	4b20      	ldr	r3, [pc, #128]	; (8006020 <HAL_RCC_ClockConfig+0x1b8>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0307 	and.w	r3, r3, #7
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d001      	beq.n	8005fb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e032      	b.n	8006016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0304 	and.w	r3, r3, #4
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d008      	beq.n	8005fce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005fbc:	4b19      	ldr	r3, [pc, #100]	; (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	4916      	ldr	r1, [pc, #88]	; (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0308 	and.w	r3, r3, #8
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d009      	beq.n	8005fee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005fda:	4b12      	ldr	r3, [pc, #72]	; (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	00db      	lsls	r3, r3, #3
 8005fe8:	490e      	ldr	r1, [pc, #56]	; (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005fea:	4313      	orrs	r3, r2
 8005fec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005fee:	f000 f821 	bl	8006034 <HAL_RCC_GetSysClockFreq>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	4b0b      	ldr	r3, [pc, #44]	; (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	091b      	lsrs	r3, r3, #4
 8005ffa:	f003 030f 	and.w	r3, r3, #15
 8005ffe:	490a      	ldr	r1, [pc, #40]	; (8006028 <HAL_RCC_ClockConfig+0x1c0>)
 8006000:	5ccb      	ldrb	r3, [r1, r3]
 8006002:	fa22 f303 	lsr.w	r3, r2, r3
 8006006:	4a09      	ldr	r2, [pc, #36]	; (800602c <HAL_RCC_ClockConfig+0x1c4>)
 8006008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800600a:	4b09      	ldr	r3, [pc, #36]	; (8006030 <HAL_RCC_ClockConfig+0x1c8>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4618      	mov	r0, r3
 8006010:	f7fd f9ec 	bl	80033ec <HAL_InitTick>

  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3710      	adds	r7, #16
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	40023c00 	.word	0x40023c00
 8006024:	40023800 	.word	0x40023800
 8006028:	0800b488 	.word	0x0800b488
 800602c:	20000000 	.word	0x20000000
 8006030:	20000004 	.word	0x20000004

08006034 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006034:	b5b0      	push	{r4, r5, r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800603a:	2100      	movs	r1, #0
 800603c:	6079      	str	r1, [r7, #4]
 800603e:	2100      	movs	r1, #0
 8006040:	60f9      	str	r1, [r7, #12]
 8006042:	2100      	movs	r1, #0
 8006044:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006046:	2100      	movs	r1, #0
 8006048:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800604a:	4952      	ldr	r1, [pc, #328]	; (8006194 <HAL_RCC_GetSysClockFreq+0x160>)
 800604c:	6889      	ldr	r1, [r1, #8]
 800604e:	f001 010c 	and.w	r1, r1, #12
 8006052:	2908      	cmp	r1, #8
 8006054:	d00d      	beq.n	8006072 <HAL_RCC_GetSysClockFreq+0x3e>
 8006056:	2908      	cmp	r1, #8
 8006058:	f200 8094 	bhi.w	8006184 <HAL_RCC_GetSysClockFreq+0x150>
 800605c:	2900      	cmp	r1, #0
 800605e:	d002      	beq.n	8006066 <HAL_RCC_GetSysClockFreq+0x32>
 8006060:	2904      	cmp	r1, #4
 8006062:	d003      	beq.n	800606c <HAL_RCC_GetSysClockFreq+0x38>
 8006064:	e08e      	b.n	8006184 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006066:	4b4c      	ldr	r3, [pc, #304]	; (8006198 <HAL_RCC_GetSysClockFreq+0x164>)
 8006068:	60bb      	str	r3, [r7, #8]
       break;
 800606a:	e08e      	b.n	800618a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800606c:	4b4b      	ldr	r3, [pc, #300]	; (800619c <HAL_RCC_GetSysClockFreq+0x168>)
 800606e:	60bb      	str	r3, [r7, #8]
      break;
 8006070:	e08b      	b.n	800618a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006072:	4948      	ldr	r1, [pc, #288]	; (8006194 <HAL_RCC_GetSysClockFreq+0x160>)
 8006074:	6849      	ldr	r1, [r1, #4]
 8006076:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800607a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800607c:	4945      	ldr	r1, [pc, #276]	; (8006194 <HAL_RCC_GetSysClockFreq+0x160>)
 800607e:	6849      	ldr	r1, [r1, #4]
 8006080:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006084:	2900      	cmp	r1, #0
 8006086:	d024      	beq.n	80060d2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006088:	4942      	ldr	r1, [pc, #264]	; (8006194 <HAL_RCC_GetSysClockFreq+0x160>)
 800608a:	6849      	ldr	r1, [r1, #4]
 800608c:	0989      	lsrs	r1, r1, #6
 800608e:	4608      	mov	r0, r1
 8006090:	f04f 0100 	mov.w	r1, #0
 8006094:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006098:	f04f 0500 	mov.w	r5, #0
 800609c:	ea00 0204 	and.w	r2, r0, r4
 80060a0:	ea01 0305 	and.w	r3, r1, r5
 80060a4:	493d      	ldr	r1, [pc, #244]	; (800619c <HAL_RCC_GetSysClockFreq+0x168>)
 80060a6:	fb01 f003 	mul.w	r0, r1, r3
 80060aa:	2100      	movs	r1, #0
 80060ac:	fb01 f102 	mul.w	r1, r1, r2
 80060b0:	1844      	adds	r4, r0, r1
 80060b2:	493a      	ldr	r1, [pc, #232]	; (800619c <HAL_RCC_GetSysClockFreq+0x168>)
 80060b4:	fba2 0101 	umull	r0, r1, r2, r1
 80060b8:	1863      	adds	r3, r4, r1
 80060ba:	4619      	mov	r1, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	461a      	mov	r2, r3
 80060c0:	f04f 0300 	mov.w	r3, #0
 80060c4:	f7fa fdc8 	bl	8000c58 <__aeabi_uldivmod>
 80060c8:	4602      	mov	r2, r0
 80060ca:	460b      	mov	r3, r1
 80060cc:	4613      	mov	r3, r2
 80060ce:	60fb      	str	r3, [r7, #12]
 80060d0:	e04a      	b.n	8006168 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060d2:	4b30      	ldr	r3, [pc, #192]	; (8006194 <HAL_RCC_GetSysClockFreq+0x160>)
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	099b      	lsrs	r3, r3, #6
 80060d8:	461a      	mov	r2, r3
 80060da:	f04f 0300 	mov.w	r3, #0
 80060de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80060e2:	f04f 0100 	mov.w	r1, #0
 80060e6:	ea02 0400 	and.w	r4, r2, r0
 80060ea:	ea03 0501 	and.w	r5, r3, r1
 80060ee:	4620      	mov	r0, r4
 80060f0:	4629      	mov	r1, r5
 80060f2:	f04f 0200 	mov.w	r2, #0
 80060f6:	f04f 0300 	mov.w	r3, #0
 80060fa:	014b      	lsls	r3, r1, #5
 80060fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006100:	0142      	lsls	r2, r0, #5
 8006102:	4610      	mov	r0, r2
 8006104:	4619      	mov	r1, r3
 8006106:	1b00      	subs	r0, r0, r4
 8006108:	eb61 0105 	sbc.w	r1, r1, r5
 800610c:	f04f 0200 	mov.w	r2, #0
 8006110:	f04f 0300 	mov.w	r3, #0
 8006114:	018b      	lsls	r3, r1, #6
 8006116:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800611a:	0182      	lsls	r2, r0, #6
 800611c:	1a12      	subs	r2, r2, r0
 800611e:	eb63 0301 	sbc.w	r3, r3, r1
 8006122:	f04f 0000 	mov.w	r0, #0
 8006126:	f04f 0100 	mov.w	r1, #0
 800612a:	00d9      	lsls	r1, r3, #3
 800612c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006130:	00d0      	lsls	r0, r2, #3
 8006132:	4602      	mov	r2, r0
 8006134:	460b      	mov	r3, r1
 8006136:	1912      	adds	r2, r2, r4
 8006138:	eb45 0303 	adc.w	r3, r5, r3
 800613c:	f04f 0000 	mov.w	r0, #0
 8006140:	f04f 0100 	mov.w	r1, #0
 8006144:	0299      	lsls	r1, r3, #10
 8006146:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800614a:	0290      	lsls	r0, r2, #10
 800614c:	4602      	mov	r2, r0
 800614e:	460b      	mov	r3, r1
 8006150:	4610      	mov	r0, r2
 8006152:	4619      	mov	r1, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	461a      	mov	r2, r3
 8006158:	f04f 0300 	mov.w	r3, #0
 800615c:	f7fa fd7c 	bl	8000c58 <__aeabi_uldivmod>
 8006160:	4602      	mov	r2, r0
 8006162:	460b      	mov	r3, r1
 8006164:	4613      	mov	r3, r2
 8006166:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006168:	4b0a      	ldr	r3, [pc, #40]	; (8006194 <HAL_RCC_GetSysClockFreq+0x160>)
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	0c1b      	lsrs	r3, r3, #16
 800616e:	f003 0303 	and.w	r3, r3, #3
 8006172:	3301      	adds	r3, #1
 8006174:	005b      	lsls	r3, r3, #1
 8006176:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006180:	60bb      	str	r3, [r7, #8]
      break;
 8006182:	e002      	b.n	800618a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006184:	4b04      	ldr	r3, [pc, #16]	; (8006198 <HAL_RCC_GetSysClockFreq+0x164>)
 8006186:	60bb      	str	r3, [r7, #8]
      break;
 8006188:	bf00      	nop
    }
  }
  return sysclockfreq;
 800618a:	68bb      	ldr	r3, [r7, #8]
}
 800618c:	4618      	mov	r0, r3
 800618e:	3710      	adds	r7, #16
 8006190:	46bd      	mov	sp, r7
 8006192:	bdb0      	pop	{r4, r5, r7, pc}
 8006194:	40023800 	.word	0x40023800
 8006198:	00f42400 	.word	0x00f42400
 800619c:	017d7840 	.word	0x017d7840

080061a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061a0:	b480      	push	{r7}
 80061a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061a4:	4b03      	ldr	r3, [pc, #12]	; (80061b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80061a6:	681b      	ldr	r3, [r3, #0]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	20000000 	.word	0x20000000

080061b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80061bc:	f7ff fff0 	bl	80061a0 <HAL_RCC_GetHCLKFreq>
 80061c0:	4602      	mov	r2, r0
 80061c2:	4b05      	ldr	r3, [pc, #20]	; (80061d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	0a9b      	lsrs	r3, r3, #10
 80061c8:	f003 0307 	and.w	r3, r3, #7
 80061cc:	4903      	ldr	r1, [pc, #12]	; (80061dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80061ce:	5ccb      	ldrb	r3, [r1, r3]
 80061d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	40023800 	.word	0x40023800
 80061dc:	0800b498 	.word	0x0800b498

080061e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80061e4:	f7ff ffdc 	bl	80061a0 <HAL_RCC_GetHCLKFreq>
 80061e8:	4602      	mov	r2, r0
 80061ea:	4b05      	ldr	r3, [pc, #20]	; (8006200 <HAL_RCC_GetPCLK2Freq+0x20>)
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	0b5b      	lsrs	r3, r3, #13
 80061f0:	f003 0307 	and.w	r3, r3, #7
 80061f4:	4903      	ldr	r1, [pc, #12]	; (8006204 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061f6:	5ccb      	ldrb	r3, [r1, r3]
 80061f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	40023800 	.word	0x40023800
 8006204:	0800b498 	.word	0x0800b498

08006208 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d101      	bne.n	800621a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e041      	b.n	800629e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006220:	b2db      	uxtb	r3, r3
 8006222:	2b00      	cmp	r3, #0
 8006224:	d106      	bne.n	8006234 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f7fc fe8a 	bl	8002f48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2202      	movs	r2, #2
 8006238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	3304      	adds	r3, #4
 8006244:	4619      	mov	r1, r3
 8006246:	4610      	mov	r0, r2
 8006248:	f000 fac0 	bl	80067cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3708      	adds	r7, #8
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b082      	sub	sp, #8
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d101      	bne.n	80062b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e041      	b.n	800633c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d106      	bne.n	80062d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 f839 	bl	8006344 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2202      	movs	r2, #2
 80062d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	3304      	adds	r3, #4
 80062e2:	4619      	mov	r1, r3
 80062e4:	4610      	mov	r0, r2
 80062e6:	f000 fa71 	bl	80067cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2201      	movs	r2, #1
 80062ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2201      	movs	r2, #1
 80062f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2201      	movs	r2, #1
 800630e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2201      	movs	r2, #1
 8006316:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2201      	movs	r2, #1
 800631e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2201      	movs	r2, #1
 8006326:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2201      	movs	r2, #1
 800632e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3708      	adds	r7, #8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800634c:	bf00      	nop
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d109      	bne.n	800637c <HAL_TIM_PWM_Start+0x24>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800636e:	b2db      	uxtb	r3, r3
 8006370:	2b01      	cmp	r3, #1
 8006372:	bf14      	ite	ne
 8006374:	2301      	movne	r3, #1
 8006376:	2300      	moveq	r3, #0
 8006378:	b2db      	uxtb	r3, r3
 800637a:	e022      	b.n	80063c2 <HAL_TIM_PWM_Start+0x6a>
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	2b04      	cmp	r3, #4
 8006380:	d109      	bne.n	8006396 <HAL_TIM_PWM_Start+0x3e>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b01      	cmp	r3, #1
 800638c:	bf14      	ite	ne
 800638e:	2301      	movne	r3, #1
 8006390:	2300      	moveq	r3, #0
 8006392:	b2db      	uxtb	r3, r3
 8006394:	e015      	b.n	80063c2 <HAL_TIM_PWM_Start+0x6a>
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	2b08      	cmp	r3, #8
 800639a:	d109      	bne.n	80063b0 <HAL_TIM_PWM_Start+0x58>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	bf14      	ite	ne
 80063a8:	2301      	movne	r3, #1
 80063aa:	2300      	moveq	r3, #0
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	e008      	b.n	80063c2 <HAL_TIM_PWM_Start+0x6a>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	bf14      	ite	ne
 80063bc:	2301      	movne	r3, #1
 80063be:	2300      	moveq	r3, #0
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d001      	beq.n	80063ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e068      	b.n	800649c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d104      	bne.n	80063da <HAL_TIM_PWM_Start+0x82>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2202      	movs	r2, #2
 80063d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063d8:	e013      	b.n	8006402 <HAL_TIM_PWM_Start+0xaa>
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	2b04      	cmp	r3, #4
 80063de:	d104      	bne.n	80063ea <HAL_TIM_PWM_Start+0x92>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2202      	movs	r2, #2
 80063e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063e8:	e00b      	b.n	8006402 <HAL_TIM_PWM_Start+0xaa>
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	2b08      	cmp	r3, #8
 80063ee:	d104      	bne.n	80063fa <HAL_TIM_PWM_Start+0xa2>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2202      	movs	r2, #2
 80063f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063f8:	e003      	b.n	8006402 <HAL_TIM_PWM_Start+0xaa>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2202      	movs	r2, #2
 80063fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2201      	movs	r2, #1
 8006408:	6839      	ldr	r1, [r7, #0]
 800640a:	4618      	mov	r0, r3
 800640c:	f000 fc84 	bl	8006d18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a23      	ldr	r2, [pc, #140]	; (80064a4 <HAL_TIM_PWM_Start+0x14c>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d107      	bne.n	800642a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006428:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a1d      	ldr	r2, [pc, #116]	; (80064a4 <HAL_TIM_PWM_Start+0x14c>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d018      	beq.n	8006466 <HAL_TIM_PWM_Start+0x10e>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800643c:	d013      	beq.n	8006466 <HAL_TIM_PWM_Start+0x10e>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a19      	ldr	r2, [pc, #100]	; (80064a8 <HAL_TIM_PWM_Start+0x150>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d00e      	beq.n	8006466 <HAL_TIM_PWM_Start+0x10e>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a17      	ldr	r2, [pc, #92]	; (80064ac <HAL_TIM_PWM_Start+0x154>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d009      	beq.n	8006466 <HAL_TIM_PWM_Start+0x10e>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a16      	ldr	r2, [pc, #88]	; (80064b0 <HAL_TIM_PWM_Start+0x158>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d004      	beq.n	8006466 <HAL_TIM_PWM_Start+0x10e>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a14      	ldr	r2, [pc, #80]	; (80064b4 <HAL_TIM_PWM_Start+0x15c>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d111      	bne.n	800648a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	f003 0307 	and.w	r3, r3, #7
 8006470:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2b06      	cmp	r3, #6
 8006476:	d010      	beq.n	800649a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f042 0201 	orr.w	r2, r2, #1
 8006486:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006488:	e007      	b.n	800649a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f042 0201 	orr.w	r2, r2, #1
 8006498:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3710      	adds	r7, #16
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	40010000 	.word	0x40010000
 80064a8:	40000400 	.word	0x40000400
 80064ac:	40000800 	.word	0x40000800
 80064b0:	40000c00 	.word	0x40000c00
 80064b4:	40014000 	.word	0x40014000

080064b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b086      	sub	sp, #24
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064c4:	2300      	movs	r3, #0
 80064c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d101      	bne.n	80064d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80064d2:	2302      	movs	r3, #2
 80064d4:	e0ae      	b.n	8006634 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2201      	movs	r2, #1
 80064da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2b0c      	cmp	r3, #12
 80064e2:	f200 809f 	bhi.w	8006624 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80064e6:	a201      	add	r2, pc, #4	; (adr r2, 80064ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80064e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ec:	08006521 	.word	0x08006521
 80064f0:	08006625 	.word	0x08006625
 80064f4:	08006625 	.word	0x08006625
 80064f8:	08006625 	.word	0x08006625
 80064fc:	08006561 	.word	0x08006561
 8006500:	08006625 	.word	0x08006625
 8006504:	08006625 	.word	0x08006625
 8006508:	08006625 	.word	0x08006625
 800650c:	080065a3 	.word	0x080065a3
 8006510:	08006625 	.word	0x08006625
 8006514:	08006625 	.word	0x08006625
 8006518:	08006625 	.word	0x08006625
 800651c:	080065e3 	.word	0x080065e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68b9      	ldr	r1, [r7, #8]
 8006526:	4618      	mov	r0, r3
 8006528:	f000 f9d0 	bl	80068cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	699a      	ldr	r2, [r3, #24]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f042 0208 	orr.w	r2, r2, #8
 800653a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	699a      	ldr	r2, [r3, #24]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f022 0204 	bic.w	r2, r2, #4
 800654a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6999      	ldr	r1, [r3, #24]
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	691a      	ldr	r2, [r3, #16]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	430a      	orrs	r2, r1
 800655c:	619a      	str	r2, [r3, #24]
      break;
 800655e:	e064      	b.n	800662a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68b9      	ldr	r1, [r7, #8]
 8006566:	4618      	mov	r0, r3
 8006568:	f000 fa16 	bl	8006998 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	699a      	ldr	r2, [r3, #24]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800657a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	699a      	ldr	r2, [r3, #24]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800658a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	6999      	ldr	r1, [r3, #24]
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	021a      	lsls	r2, r3, #8
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	430a      	orrs	r2, r1
 800659e:	619a      	str	r2, [r3, #24]
      break;
 80065a0:	e043      	b.n	800662a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68b9      	ldr	r1, [r7, #8]
 80065a8:	4618      	mov	r0, r3
 80065aa:	f000 fa61 	bl	8006a70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	69da      	ldr	r2, [r3, #28]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f042 0208 	orr.w	r2, r2, #8
 80065bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	69da      	ldr	r2, [r3, #28]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f022 0204 	bic.w	r2, r2, #4
 80065cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	69d9      	ldr	r1, [r3, #28]
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	691a      	ldr	r2, [r3, #16]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	430a      	orrs	r2, r1
 80065de:	61da      	str	r2, [r3, #28]
      break;
 80065e0:	e023      	b.n	800662a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68b9      	ldr	r1, [r7, #8]
 80065e8:	4618      	mov	r0, r3
 80065ea:	f000 faab 	bl	8006b44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	69da      	ldr	r2, [r3, #28]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	69da      	ldr	r2, [r3, #28]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800660c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	69d9      	ldr	r1, [r3, #28]
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	021a      	lsls	r2, r3, #8
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	430a      	orrs	r2, r1
 8006620:	61da      	str	r2, [r3, #28]
      break;
 8006622:	e002      	b.n	800662a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	75fb      	strb	r3, [r7, #23]
      break;
 8006628:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006632:	7dfb      	ldrb	r3, [r7, #23]
}
 8006634:	4618      	mov	r0, r3
 8006636:	3718      	adds	r7, #24
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006646:	2300      	movs	r3, #0
 8006648:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006650:	2b01      	cmp	r3, #1
 8006652:	d101      	bne.n	8006658 <HAL_TIM_ConfigClockSource+0x1c>
 8006654:	2302      	movs	r3, #2
 8006656:	e0b4      	b.n	80067c2 <HAL_TIM_ConfigClockSource+0x186>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2202      	movs	r2, #2
 8006664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006676:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800667e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68ba      	ldr	r2, [r7, #8]
 8006686:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006690:	d03e      	beq.n	8006710 <HAL_TIM_ConfigClockSource+0xd4>
 8006692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006696:	f200 8087 	bhi.w	80067a8 <HAL_TIM_ConfigClockSource+0x16c>
 800669a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800669e:	f000 8086 	beq.w	80067ae <HAL_TIM_ConfigClockSource+0x172>
 80066a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066a6:	d87f      	bhi.n	80067a8 <HAL_TIM_ConfigClockSource+0x16c>
 80066a8:	2b70      	cmp	r3, #112	; 0x70
 80066aa:	d01a      	beq.n	80066e2 <HAL_TIM_ConfigClockSource+0xa6>
 80066ac:	2b70      	cmp	r3, #112	; 0x70
 80066ae:	d87b      	bhi.n	80067a8 <HAL_TIM_ConfigClockSource+0x16c>
 80066b0:	2b60      	cmp	r3, #96	; 0x60
 80066b2:	d050      	beq.n	8006756 <HAL_TIM_ConfigClockSource+0x11a>
 80066b4:	2b60      	cmp	r3, #96	; 0x60
 80066b6:	d877      	bhi.n	80067a8 <HAL_TIM_ConfigClockSource+0x16c>
 80066b8:	2b50      	cmp	r3, #80	; 0x50
 80066ba:	d03c      	beq.n	8006736 <HAL_TIM_ConfigClockSource+0xfa>
 80066bc:	2b50      	cmp	r3, #80	; 0x50
 80066be:	d873      	bhi.n	80067a8 <HAL_TIM_ConfigClockSource+0x16c>
 80066c0:	2b40      	cmp	r3, #64	; 0x40
 80066c2:	d058      	beq.n	8006776 <HAL_TIM_ConfigClockSource+0x13a>
 80066c4:	2b40      	cmp	r3, #64	; 0x40
 80066c6:	d86f      	bhi.n	80067a8 <HAL_TIM_ConfigClockSource+0x16c>
 80066c8:	2b30      	cmp	r3, #48	; 0x30
 80066ca:	d064      	beq.n	8006796 <HAL_TIM_ConfigClockSource+0x15a>
 80066cc:	2b30      	cmp	r3, #48	; 0x30
 80066ce:	d86b      	bhi.n	80067a8 <HAL_TIM_ConfigClockSource+0x16c>
 80066d0:	2b20      	cmp	r3, #32
 80066d2:	d060      	beq.n	8006796 <HAL_TIM_ConfigClockSource+0x15a>
 80066d4:	2b20      	cmp	r3, #32
 80066d6:	d867      	bhi.n	80067a8 <HAL_TIM_ConfigClockSource+0x16c>
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d05c      	beq.n	8006796 <HAL_TIM_ConfigClockSource+0x15a>
 80066dc:	2b10      	cmp	r3, #16
 80066de:	d05a      	beq.n	8006796 <HAL_TIM_ConfigClockSource+0x15a>
 80066e0:	e062      	b.n	80067a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6818      	ldr	r0, [r3, #0]
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	6899      	ldr	r1, [r3, #8]
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	685a      	ldr	r2, [r3, #4]
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	f000 faf1 	bl	8006cd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006704:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	609a      	str	r2, [r3, #8]
      break;
 800670e:	e04f      	b.n	80067b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6818      	ldr	r0, [r3, #0]
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	6899      	ldr	r1, [r3, #8]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	685a      	ldr	r2, [r3, #4]
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	f000 fada 	bl	8006cd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	689a      	ldr	r2, [r3, #8]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006732:	609a      	str	r2, [r3, #8]
      break;
 8006734:	e03c      	b.n	80067b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6818      	ldr	r0, [r3, #0]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	6859      	ldr	r1, [r3, #4]
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	461a      	mov	r2, r3
 8006744:	f000 fa4e 	bl	8006be4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2150      	movs	r1, #80	; 0x50
 800674e:	4618      	mov	r0, r3
 8006750:	f000 faa7 	bl	8006ca2 <TIM_ITRx_SetConfig>
      break;
 8006754:	e02c      	b.n	80067b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6818      	ldr	r0, [r3, #0]
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	6859      	ldr	r1, [r3, #4]
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	461a      	mov	r2, r3
 8006764:	f000 fa6d 	bl	8006c42 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2160      	movs	r1, #96	; 0x60
 800676e:	4618      	mov	r0, r3
 8006770:	f000 fa97 	bl	8006ca2 <TIM_ITRx_SetConfig>
      break;
 8006774:	e01c      	b.n	80067b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6818      	ldr	r0, [r3, #0]
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	6859      	ldr	r1, [r3, #4]
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	461a      	mov	r2, r3
 8006784:	f000 fa2e 	bl	8006be4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2140      	movs	r1, #64	; 0x40
 800678e:	4618      	mov	r0, r3
 8006790:	f000 fa87 	bl	8006ca2 <TIM_ITRx_SetConfig>
      break;
 8006794:	e00c      	b.n	80067b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4619      	mov	r1, r3
 80067a0:	4610      	mov	r0, r2
 80067a2:	f000 fa7e 	bl	8006ca2 <TIM_ITRx_SetConfig>
      break;
 80067a6:	e003      	b.n	80067b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	73fb      	strb	r3, [r7, #15]
      break;
 80067ac:	e000      	b.n	80067b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80067ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
	...

080067cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a34      	ldr	r2, [pc, #208]	; (80068b0 <TIM_Base_SetConfig+0xe4>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d00f      	beq.n	8006804 <TIM_Base_SetConfig+0x38>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ea:	d00b      	beq.n	8006804 <TIM_Base_SetConfig+0x38>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a31      	ldr	r2, [pc, #196]	; (80068b4 <TIM_Base_SetConfig+0xe8>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d007      	beq.n	8006804 <TIM_Base_SetConfig+0x38>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a30      	ldr	r2, [pc, #192]	; (80068b8 <TIM_Base_SetConfig+0xec>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d003      	beq.n	8006804 <TIM_Base_SetConfig+0x38>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a2f      	ldr	r2, [pc, #188]	; (80068bc <TIM_Base_SetConfig+0xf0>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d108      	bne.n	8006816 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800680a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	4313      	orrs	r3, r2
 8006814:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a25      	ldr	r2, [pc, #148]	; (80068b0 <TIM_Base_SetConfig+0xe4>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d01b      	beq.n	8006856 <TIM_Base_SetConfig+0x8a>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006824:	d017      	beq.n	8006856 <TIM_Base_SetConfig+0x8a>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a22      	ldr	r2, [pc, #136]	; (80068b4 <TIM_Base_SetConfig+0xe8>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d013      	beq.n	8006856 <TIM_Base_SetConfig+0x8a>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a21      	ldr	r2, [pc, #132]	; (80068b8 <TIM_Base_SetConfig+0xec>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d00f      	beq.n	8006856 <TIM_Base_SetConfig+0x8a>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a20      	ldr	r2, [pc, #128]	; (80068bc <TIM_Base_SetConfig+0xf0>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d00b      	beq.n	8006856 <TIM_Base_SetConfig+0x8a>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a1f      	ldr	r2, [pc, #124]	; (80068c0 <TIM_Base_SetConfig+0xf4>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d007      	beq.n	8006856 <TIM_Base_SetConfig+0x8a>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a1e      	ldr	r2, [pc, #120]	; (80068c4 <TIM_Base_SetConfig+0xf8>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d003      	beq.n	8006856 <TIM_Base_SetConfig+0x8a>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a1d      	ldr	r2, [pc, #116]	; (80068c8 <TIM_Base_SetConfig+0xfc>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d108      	bne.n	8006868 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800685c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	4313      	orrs	r3, r2
 8006866:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	695b      	ldr	r3, [r3, #20]
 8006872:	4313      	orrs	r3, r2
 8006874:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	689a      	ldr	r2, [r3, #8]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a08      	ldr	r2, [pc, #32]	; (80068b0 <TIM_Base_SetConfig+0xe4>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d103      	bne.n	800689c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	691a      	ldr	r2, [r3, #16]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	615a      	str	r2, [r3, #20]
}
 80068a2:	bf00      	nop
 80068a4:	3714      	adds	r7, #20
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	40010000 	.word	0x40010000
 80068b4:	40000400 	.word	0x40000400
 80068b8:	40000800 	.word	0x40000800
 80068bc:	40000c00 	.word	0x40000c00
 80068c0:	40014000 	.word	0x40014000
 80068c4:	40014400 	.word	0x40014400
 80068c8:	40014800 	.word	0x40014800

080068cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b087      	sub	sp, #28
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	f023 0201 	bic.w	r2, r3, #1
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	699b      	ldr	r3, [r3, #24]
 80068f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f023 0303 	bic.w	r3, r3, #3
 8006902:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	4313      	orrs	r3, r2
 800690c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	f023 0302 	bic.w	r3, r3, #2
 8006914:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	697a      	ldr	r2, [r7, #20]
 800691c:	4313      	orrs	r3, r2
 800691e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a1c      	ldr	r2, [pc, #112]	; (8006994 <TIM_OC1_SetConfig+0xc8>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d10c      	bne.n	8006942 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	f023 0308 	bic.w	r3, r3, #8
 800692e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	697a      	ldr	r2, [r7, #20]
 8006936:	4313      	orrs	r3, r2
 8006938:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	f023 0304 	bic.w	r3, r3, #4
 8006940:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a13      	ldr	r2, [pc, #76]	; (8006994 <TIM_OC1_SetConfig+0xc8>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d111      	bne.n	800696e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006950:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006958:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	695b      	ldr	r3, [r3, #20]
 800695e:	693a      	ldr	r2, [r7, #16]
 8006960:	4313      	orrs	r3, r2
 8006962:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	699b      	ldr	r3, [r3, #24]
 8006968:	693a      	ldr	r2, [r7, #16]
 800696a:	4313      	orrs	r3, r2
 800696c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	693a      	ldr	r2, [r7, #16]
 8006972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	685a      	ldr	r2, [r3, #4]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	697a      	ldr	r2, [r7, #20]
 8006986:	621a      	str	r2, [r3, #32]
}
 8006988:	bf00      	nop
 800698a:	371c      	adds	r7, #28
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	40010000 	.word	0x40010000

08006998 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006998:	b480      	push	{r7}
 800699a:	b087      	sub	sp, #28
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	f023 0210 	bic.w	r2, r3, #16
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a1b      	ldr	r3, [r3, #32]
 80069b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	699b      	ldr	r3, [r3, #24]
 80069be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	021b      	lsls	r3, r3, #8
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	4313      	orrs	r3, r2
 80069da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	f023 0320 	bic.w	r3, r3, #32
 80069e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	011b      	lsls	r3, r3, #4
 80069ea:	697a      	ldr	r2, [r7, #20]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a1e      	ldr	r2, [pc, #120]	; (8006a6c <TIM_OC2_SetConfig+0xd4>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d10d      	bne.n	8006a14 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	011b      	lsls	r3, r3, #4
 8006a06:	697a      	ldr	r2, [r7, #20]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a15      	ldr	r2, [pc, #84]	; (8006a6c <TIM_OC2_SetConfig+0xd4>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d113      	bne.n	8006a44 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	695b      	ldr	r3, [r3, #20]
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	693a      	ldr	r2, [r7, #16]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	699b      	ldr	r3, [r3, #24]
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	693a      	ldr	r2, [r7, #16]
 8006a48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	685a      	ldr	r2, [r3, #4]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	621a      	str	r2, [r3, #32]
}
 8006a5e:	bf00      	nop
 8006a60:	371c      	adds	r7, #28
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	40010000 	.word	0x40010000

08006a70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b087      	sub	sp, #28
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a1b      	ldr	r3, [r3, #32]
 8006a7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a1b      	ldr	r3, [r3, #32]
 8006a8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	69db      	ldr	r3, [r3, #28]
 8006a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f023 0303 	bic.w	r3, r3, #3
 8006aa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ab8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	021b      	lsls	r3, r3, #8
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a1d      	ldr	r2, [pc, #116]	; (8006b40 <TIM_OC3_SetConfig+0xd0>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d10d      	bne.n	8006aea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ad4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	021b      	lsls	r3, r3, #8
 8006adc:	697a      	ldr	r2, [r7, #20]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ae8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a14      	ldr	r2, [pc, #80]	; (8006b40 <TIM_OC3_SetConfig+0xd0>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d113      	bne.n	8006b1a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006af8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	695b      	ldr	r3, [r3, #20]
 8006b06:	011b      	lsls	r3, r3, #4
 8006b08:	693a      	ldr	r2, [r7, #16]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	699b      	ldr	r3, [r3, #24]
 8006b12:	011b      	lsls	r3, r3, #4
 8006b14:	693a      	ldr	r2, [r7, #16]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	693a      	ldr	r2, [r7, #16]
 8006b1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	685a      	ldr	r2, [r3, #4]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	697a      	ldr	r2, [r7, #20]
 8006b32:	621a      	str	r2, [r3, #32]
}
 8006b34:	bf00      	nop
 8006b36:	371c      	adds	r7, #28
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr
 8006b40:	40010000 	.word	0x40010000

08006b44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b087      	sub	sp, #28
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a1b      	ldr	r3, [r3, #32]
 8006b52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a1b      	ldr	r3, [r3, #32]
 8006b5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	69db      	ldr	r3, [r3, #28]
 8006b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	021b      	lsls	r3, r3, #8
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	031b      	lsls	r3, r3, #12
 8006b96:	693a      	ldr	r2, [r7, #16]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a10      	ldr	r2, [pc, #64]	; (8006be0 <TIM_OC4_SetConfig+0x9c>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d109      	bne.n	8006bb8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006baa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	695b      	ldr	r3, [r3, #20]
 8006bb0:	019b      	lsls	r3, r3, #6
 8006bb2:	697a      	ldr	r2, [r7, #20]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	697a      	ldr	r2, [r7, #20]
 8006bbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	685a      	ldr	r2, [r3, #4]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	693a      	ldr	r2, [r7, #16]
 8006bd0:	621a      	str	r2, [r3, #32]
}
 8006bd2:	bf00      	nop
 8006bd4:	371c      	adds	r7, #28
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr
 8006bde:	bf00      	nop
 8006be0:	40010000 	.word	0x40010000

08006be4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b087      	sub	sp, #28
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6a1b      	ldr	r3, [r3, #32]
 8006bf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6a1b      	ldr	r3, [r3, #32]
 8006bfa:	f023 0201 	bic.w	r2, r3, #1
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	699b      	ldr	r3, [r3, #24]
 8006c06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	011b      	lsls	r3, r3, #4
 8006c14:	693a      	ldr	r2, [r7, #16]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	f023 030a 	bic.w	r3, r3, #10
 8006c20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c22:	697a      	ldr	r2, [r7, #20]
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	693a      	ldr	r2, [r7, #16]
 8006c2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	697a      	ldr	r2, [r7, #20]
 8006c34:	621a      	str	r2, [r3, #32]
}
 8006c36:	bf00      	nop
 8006c38:	371c      	adds	r7, #28
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr

08006c42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c42:	b480      	push	{r7}
 8006c44:	b087      	sub	sp, #28
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	60f8      	str	r0, [r7, #12]
 8006c4a:	60b9      	str	r1, [r7, #8]
 8006c4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6a1b      	ldr	r3, [r3, #32]
 8006c52:	f023 0210 	bic.w	r2, r3, #16
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6a1b      	ldr	r3, [r3, #32]
 8006c64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	031b      	lsls	r3, r3, #12
 8006c72:	697a      	ldr	r2, [r7, #20]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	011b      	lsls	r3, r3, #4
 8006c84:	693a      	ldr	r2, [r7, #16]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	693a      	ldr	r2, [r7, #16]
 8006c94:	621a      	str	r2, [r3, #32]
}
 8006c96:	bf00      	nop
 8006c98:	371c      	adds	r7, #28
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr

08006ca2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ca2:	b480      	push	{r7}
 8006ca4:	b085      	sub	sp, #20
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
 8006caa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cba:	683a      	ldr	r2, [r7, #0]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	f043 0307 	orr.w	r3, r3, #7
 8006cc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	609a      	str	r2, [r3, #8]
}
 8006ccc:	bf00      	nop
 8006cce:	3714      	adds	r7, #20
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b087      	sub	sp, #28
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	607a      	str	r2, [r7, #4]
 8006ce4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cf2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	021a      	lsls	r2, r3, #8
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	431a      	orrs	r2, r3
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	697a      	ldr	r2, [r7, #20]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	697a      	ldr	r2, [r7, #20]
 8006d0a:	609a      	str	r2, [r3, #8]
}
 8006d0c:	bf00      	nop
 8006d0e:	371c      	adds	r7, #28
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b087      	sub	sp, #28
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	f003 031f 	and.w	r3, r3, #31
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6a1a      	ldr	r2, [r3, #32]
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	43db      	mvns	r3, r3
 8006d3a:	401a      	ands	r2, r3
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6a1a      	ldr	r2, [r3, #32]
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	f003 031f 	and.w	r3, r3, #31
 8006d4a:	6879      	ldr	r1, [r7, #4]
 8006d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d50:	431a      	orrs	r2, r3
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	621a      	str	r2, [r3, #32]
}
 8006d56:	bf00      	nop
 8006d58:	371c      	adds	r7, #28
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
	...

08006d64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b085      	sub	sp, #20
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d101      	bne.n	8006d7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d78:	2302      	movs	r3, #2
 8006d7a:	e050      	b.n	8006e1e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2202      	movs	r2, #2
 8006d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006da2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a1c      	ldr	r2, [pc, #112]	; (8006e2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d018      	beq.n	8006df2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dc8:	d013      	beq.n	8006df2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a18      	ldr	r2, [pc, #96]	; (8006e30 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d00e      	beq.n	8006df2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a16      	ldr	r2, [pc, #88]	; (8006e34 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d009      	beq.n	8006df2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a15      	ldr	r2, [pc, #84]	; (8006e38 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d004      	beq.n	8006df2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a13      	ldr	r2, [pc, #76]	; (8006e3c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d10c      	bne.n	8006e0c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006df8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68ba      	ldr	r2, [r7, #8]
 8006e0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3714      	adds	r7, #20
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	40010000 	.word	0x40010000
 8006e30:	40000400 	.word	0x40000400
 8006e34:	40000800 	.word	0x40000800
 8006e38:	40000c00 	.word	0x40000c00
 8006e3c:	40014000 	.word	0x40014000

08006e40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d101      	bne.n	8006e52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e03f      	b.n	8006ed2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d106      	bne.n	8006e6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f7fc f986 	bl	8003178 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2224      	movs	r2, #36	; 0x24
 8006e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	68da      	ldr	r2, [r3, #12]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 ffcf 	bl	8007e28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	691a      	ldr	r2, [r3, #16]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	695a      	ldr	r2, [r3, #20]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ea8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68da      	ldr	r2, [r3, #12]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006eb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2220      	movs	r2, #32
 8006ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2220      	movs	r2, #32
 8006ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3708      	adds	r7, #8
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b08a      	sub	sp, #40	; 0x28
 8006ede:	af02      	add	r7, sp, #8
 8006ee0:	60f8      	str	r0, [r7, #12]
 8006ee2:	60b9      	str	r1, [r7, #8]
 8006ee4:	603b      	str	r3, [r7, #0]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006eea:	2300      	movs	r3, #0
 8006eec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	2b20      	cmp	r3, #32
 8006ef8:	d17c      	bne.n	8006ff4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d002      	beq.n	8006f06 <HAL_UART_Transmit+0x2c>
 8006f00:	88fb      	ldrh	r3, [r7, #6]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d101      	bne.n	8006f0a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e075      	b.n	8006ff6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d101      	bne.n	8006f18 <HAL_UART_Transmit+0x3e>
 8006f14:	2302      	movs	r3, #2
 8006f16:	e06e      	b.n	8006ff6 <HAL_UART_Transmit+0x11c>
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2200      	movs	r2, #0
 8006f24:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2221      	movs	r2, #33	; 0x21
 8006f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f2e:	f7fc faa1 	bl	8003474 <HAL_GetTick>
 8006f32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	88fa      	ldrh	r2, [r7, #6]
 8006f38:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	88fa      	ldrh	r2, [r7, #6]
 8006f3e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f48:	d108      	bne.n	8006f5c <HAL_UART_Transmit+0x82>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d104      	bne.n	8006f5c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006f52:	2300      	movs	r3, #0
 8006f54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	61bb      	str	r3, [r7, #24]
 8006f5a:	e003      	b.n	8006f64 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f60:	2300      	movs	r3, #0
 8006f62:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006f6c:	e02a      	b.n	8006fc4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	9300      	str	r3, [sp, #0]
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	2200      	movs	r2, #0
 8006f76:	2180      	movs	r1, #128	; 0x80
 8006f78:	68f8      	ldr	r0, [r7, #12]
 8006f7a:	f000 fc51 	bl	8007820 <UART_WaitOnFlagUntilTimeout>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d001      	beq.n	8006f88 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006f84:	2303      	movs	r3, #3
 8006f86:	e036      	b.n	8006ff6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d10b      	bne.n	8006fa6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	881b      	ldrh	r3, [r3, #0]
 8006f92:	461a      	mov	r2, r3
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	3302      	adds	r3, #2
 8006fa2:	61bb      	str	r3, [r7, #24]
 8006fa4:	e007      	b.n	8006fb6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	781a      	ldrb	r2, [r3, #0]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d1cf      	bne.n	8006f6e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	9300      	str	r3, [sp, #0]
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	2140      	movs	r1, #64	; 0x40
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f000 fc21 	bl	8007820 <UART_WaitOnFlagUntilTimeout>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d001      	beq.n	8006fe8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006fe4:	2303      	movs	r3, #3
 8006fe6:	e006      	b.n	8006ff6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2220      	movs	r2, #32
 8006fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	e000      	b.n	8006ff6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006ff4:	2302      	movs	r3, #2
  }
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3720      	adds	r7, #32
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b084      	sub	sp, #16
 8007002:	af00      	add	r7, sp, #0
 8007004:	60f8      	str	r0, [r7, #12]
 8007006:	60b9      	str	r1, [r7, #8]
 8007008:	4613      	mov	r3, r2
 800700a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007012:	b2db      	uxtb	r3, r3
 8007014:	2b20      	cmp	r3, #32
 8007016:	d11d      	bne.n	8007054 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d002      	beq.n	8007024 <HAL_UART_Receive_IT+0x26>
 800701e:	88fb      	ldrh	r3, [r7, #6]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d101      	bne.n	8007028 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	e016      	b.n	8007056 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800702e:	2b01      	cmp	r3, #1
 8007030:	d101      	bne.n	8007036 <HAL_UART_Receive_IT+0x38>
 8007032:	2302      	movs	r3, #2
 8007034:	e00f      	b.n	8007056 <HAL_UART_Receive_IT+0x58>
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2201      	movs	r2, #1
 800703a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2200      	movs	r2, #0
 8007042:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007044:	88fb      	ldrh	r3, [r7, #6]
 8007046:	461a      	mov	r2, r3
 8007048:	68b9      	ldr	r1, [r7, #8]
 800704a:	68f8      	ldr	r0, [r7, #12]
 800704c:	f000 fc56 	bl	80078fc <UART_Start_Receive_IT>
 8007050:	4603      	mov	r3, r0
 8007052:	e000      	b.n	8007056 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007054:	2302      	movs	r3, #2
  }
}
 8007056:	4618      	mov	r0, r3
 8007058:	3710      	adds	r7, #16
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}

0800705e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800705e:	b580      	push	{r7, lr}
 8007060:	b084      	sub	sp, #16
 8007062:	af00      	add	r7, sp, #0
 8007064:	60f8      	str	r0, [r7, #12]
 8007066:	60b9      	str	r1, [r7, #8]
 8007068:	4613      	mov	r3, r2
 800706a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007072:	b2db      	uxtb	r3, r3
 8007074:	2b20      	cmp	r3, #32
 8007076:	d11d      	bne.n	80070b4 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d002      	beq.n	8007084 <HAL_UART_Receive_DMA+0x26>
 800707e:	88fb      	ldrh	r3, [r7, #6]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d101      	bne.n	8007088 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	e016      	b.n	80070b6 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800708e:	2b01      	cmp	r3, #1
 8007090:	d101      	bne.n	8007096 <HAL_UART_Receive_DMA+0x38>
 8007092:	2302      	movs	r3, #2
 8007094:	e00f      	b.n	80070b6 <HAL_UART_Receive_DMA+0x58>
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2201      	movs	r2, #1
 800709a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2200      	movs	r2, #0
 80070a2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80070a4:	88fb      	ldrh	r3, [r7, #6]
 80070a6:	461a      	mov	r2, r3
 80070a8:	68b9      	ldr	r1, [r7, #8]
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	f000 fc60 	bl	8007970 <UART_Start_Receive_DMA>
 80070b0:	4603      	mov	r3, r0
 80070b2:	e000      	b.n	80070b6 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80070b4:	2302      	movs	r3, #2
  }
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3710      	adds	r7, #16
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
	...

080070c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b0ba      	sub	sp, #232	; 0xe8
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	695b      	ldr	r3, [r3, #20]
 80070e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80070e6:	2300      	movs	r3, #0
 80070e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80070ec:	2300      	movs	r3, #0
 80070ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80070f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070f6:	f003 030f 	and.w	r3, r3, #15
 80070fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80070fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007102:	2b00      	cmp	r3, #0
 8007104:	d10f      	bne.n	8007126 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800710a:	f003 0320 	and.w	r3, r3, #32
 800710e:	2b00      	cmp	r3, #0
 8007110:	d009      	beq.n	8007126 <HAL_UART_IRQHandler+0x66>
 8007112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007116:	f003 0320 	and.w	r3, r3, #32
 800711a:	2b00      	cmp	r3, #0
 800711c:	d003      	beq.n	8007126 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 fdc7 	bl	8007cb2 <UART_Receive_IT>
      return;
 8007124:	e256      	b.n	80075d4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007126:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800712a:	2b00      	cmp	r3, #0
 800712c:	f000 80de 	beq.w	80072ec <HAL_UART_IRQHandler+0x22c>
 8007130:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007134:	f003 0301 	and.w	r3, r3, #1
 8007138:	2b00      	cmp	r3, #0
 800713a:	d106      	bne.n	800714a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800713c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007140:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007144:	2b00      	cmp	r3, #0
 8007146:	f000 80d1 	beq.w	80072ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800714a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800714e:	f003 0301 	and.w	r3, r3, #1
 8007152:	2b00      	cmp	r3, #0
 8007154:	d00b      	beq.n	800716e <HAL_UART_IRQHandler+0xae>
 8007156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800715a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800715e:	2b00      	cmp	r3, #0
 8007160:	d005      	beq.n	800716e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007166:	f043 0201 	orr.w	r2, r3, #1
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800716e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007172:	f003 0304 	and.w	r3, r3, #4
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00b      	beq.n	8007192 <HAL_UART_IRQHandler+0xd2>
 800717a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800717e:	f003 0301 	and.w	r3, r3, #1
 8007182:	2b00      	cmp	r3, #0
 8007184:	d005      	beq.n	8007192 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718a:	f043 0202 	orr.w	r2, r3, #2
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007196:	f003 0302 	and.w	r3, r3, #2
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00b      	beq.n	80071b6 <HAL_UART_IRQHandler+0xf6>
 800719e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071a2:	f003 0301 	and.w	r3, r3, #1
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d005      	beq.n	80071b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ae:	f043 0204 	orr.w	r2, r3, #4
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80071b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ba:	f003 0308 	and.w	r3, r3, #8
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d011      	beq.n	80071e6 <HAL_UART_IRQHandler+0x126>
 80071c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071c6:	f003 0320 	and.w	r3, r3, #32
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d105      	bne.n	80071da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80071ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071d2:	f003 0301 	and.w	r3, r3, #1
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d005      	beq.n	80071e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071de:	f043 0208 	orr.w	r2, r3, #8
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	f000 81ed 	beq.w	80075ca <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071f4:	f003 0320 	and.w	r3, r3, #32
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d008      	beq.n	800720e <HAL_UART_IRQHandler+0x14e>
 80071fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007200:	f003 0320 	and.w	r3, r3, #32
 8007204:	2b00      	cmp	r3, #0
 8007206:	d002      	beq.n	800720e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 fd52 	bl	8007cb2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	695b      	ldr	r3, [r3, #20]
 8007214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007218:	2b40      	cmp	r3, #64	; 0x40
 800721a:	bf0c      	ite	eq
 800721c:	2301      	moveq	r3, #1
 800721e:	2300      	movne	r3, #0
 8007220:	b2db      	uxtb	r3, r3
 8007222:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722a:	f003 0308 	and.w	r3, r3, #8
 800722e:	2b00      	cmp	r3, #0
 8007230:	d103      	bne.n	800723a <HAL_UART_IRQHandler+0x17a>
 8007232:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007236:	2b00      	cmp	r3, #0
 8007238:	d04f      	beq.n	80072da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 fc5a 	bl	8007af4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	695b      	ldr	r3, [r3, #20]
 8007246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800724a:	2b40      	cmp	r3, #64	; 0x40
 800724c:	d141      	bne.n	80072d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	3314      	adds	r3, #20
 8007254:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007258:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800725c:	e853 3f00 	ldrex	r3, [r3]
 8007260:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007264:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007268:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800726c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	3314      	adds	r3, #20
 8007276:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800727a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800727e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007282:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007286:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800728a:	e841 2300 	strex	r3, r2, [r1]
 800728e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007292:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d1d9      	bne.n	800724e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d013      	beq.n	80072ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a6:	4a7d      	ldr	r2, [pc, #500]	; (800749c <HAL_UART_IRQHandler+0x3dc>)
 80072a8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ae:	4618      	mov	r0, r3
 80072b0:	f7fc ff46 	bl	8004140 <HAL_DMA_Abort_IT>
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d016      	beq.n	80072e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80072c4:	4610      	mov	r0, r2
 80072c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072c8:	e00e      	b.n	80072e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 f99a 	bl	8007604 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072d0:	e00a      	b.n	80072e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 f996 	bl	8007604 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072d8:	e006      	b.n	80072e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 f992 	bl	8007604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80072e6:	e170      	b.n	80075ca <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072e8:	bf00      	nop
    return;
 80072ea:	e16e      	b.n	80075ca <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	f040 814a 	bne.w	800758a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80072f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072fa:	f003 0310 	and.w	r3, r3, #16
 80072fe:	2b00      	cmp	r3, #0
 8007300:	f000 8143 	beq.w	800758a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007308:	f003 0310 	and.w	r3, r3, #16
 800730c:	2b00      	cmp	r3, #0
 800730e:	f000 813c 	beq.w	800758a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007312:	2300      	movs	r3, #0
 8007314:	60bb      	str	r3, [r7, #8]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	60bb      	str	r3, [r7, #8]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	60bb      	str	r3, [r7, #8]
 8007326:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	695b      	ldr	r3, [r3, #20]
 800732e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007332:	2b40      	cmp	r3, #64	; 0x40
 8007334:	f040 80b4 	bne.w	80074a0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007344:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007348:	2b00      	cmp	r3, #0
 800734a:	f000 8140 	beq.w	80075ce <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007352:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007356:	429a      	cmp	r2, r3
 8007358:	f080 8139 	bcs.w	80075ce <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007362:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007368:	69db      	ldr	r3, [r3, #28]
 800736a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800736e:	f000 8088 	beq.w	8007482 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	330c      	adds	r3, #12
 8007378:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800737c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007380:	e853 3f00 	ldrex	r3, [r3]
 8007384:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007388:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800738c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007390:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	330c      	adds	r3, #12
 800739a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800739e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80073a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80073aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80073ae:	e841 2300 	strex	r3, r2, [r1]
 80073b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80073b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1d9      	bne.n	8007372 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	3314      	adds	r3, #20
 80073c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073c8:	e853 3f00 	ldrex	r3, [r3]
 80073cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80073ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073d0:	f023 0301 	bic.w	r3, r3, #1
 80073d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	3314      	adds	r3, #20
 80073de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80073e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80073e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80073ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80073ee:	e841 2300 	strex	r3, r2, [r1]
 80073f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80073f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d1e1      	bne.n	80073be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	3314      	adds	r3, #20
 8007400:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007402:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007404:	e853 3f00 	ldrex	r3, [r3]
 8007408:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800740a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800740c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007410:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	3314      	adds	r3, #20
 800741a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800741e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007420:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007422:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007424:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007426:	e841 2300 	strex	r3, r2, [r1]
 800742a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800742c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800742e:	2b00      	cmp	r3, #0
 8007430:	d1e3      	bne.n	80073fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2220      	movs	r2, #32
 8007436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	330c      	adds	r3, #12
 8007446:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800744a:	e853 3f00 	ldrex	r3, [r3]
 800744e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007452:	f023 0310 	bic.w	r3, r3, #16
 8007456:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	330c      	adds	r3, #12
 8007460:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007464:	65ba      	str	r2, [r7, #88]	; 0x58
 8007466:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007468:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800746a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800746c:	e841 2300 	strex	r3, r2, [r1]
 8007470:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007472:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007474:	2b00      	cmp	r3, #0
 8007476:	d1e3      	bne.n	8007440 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800747c:	4618      	mov	r0, r3
 800747e:	f7fc fdef 	bl	8004060 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800748a:	b29b      	uxth	r3, r3
 800748c:	1ad3      	subs	r3, r2, r3
 800748e:	b29b      	uxth	r3, r3
 8007490:	4619      	mov	r1, r3
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 f8c0 	bl	8007618 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007498:	e099      	b.n	80075ce <HAL_UART_IRQHandler+0x50e>
 800749a:	bf00      	nop
 800749c:	08007bbb 	.word	0x08007bbb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	1ad3      	subs	r3, r2, r3
 80074ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	f000 808b 	beq.w	80075d2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80074bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	f000 8086 	beq.w	80075d2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	330c      	adds	r3, #12
 80074cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d0:	e853 3f00 	ldrex	r3, [r3]
 80074d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80074d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	330c      	adds	r3, #12
 80074e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80074ea:	647a      	str	r2, [r7, #68]	; 0x44
 80074ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074f2:	e841 2300 	strex	r3, r2, [r1]
 80074f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d1e3      	bne.n	80074c6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	3314      	adds	r3, #20
 8007504:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007508:	e853 3f00 	ldrex	r3, [r3]
 800750c:	623b      	str	r3, [r7, #32]
   return(result);
 800750e:	6a3b      	ldr	r3, [r7, #32]
 8007510:	f023 0301 	bic.w	r3, r3, #1
 8007514:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	3314      	adds	r3, #20
 800751e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007522:	633a      	str	r2, [r7, #48]	; 0x30
 8007524:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007526:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800752a:	e841 2300 	strex	r3, r2, [r1]
 800752e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1e3      	bne.n	80074fe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2220      	movs	r2, #32
 800753a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	330c      	adds	r3, #12
 800754a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	e853 3f00 	ldrex	r3, [r3]
 8007552:	60fb      	str	r3, [r7, #12]
   return(result);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f023 0310 	bic.w	r3, r3, #16
 800755a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	330c      	adds	r3, #12
 8007564:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007568:	61fa      	str	r2, [r7, #28]
 800756a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756c:	69b9      	ldr	r1, [r7, #24]
 800756e:	69fa      	ldr	r2, [r7, #28]
 8007570:	e841 2300 	strex	r3, r2, [r1]
 8007574:	617b      	str	r3, [r7, #20]
   return(result);
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d1e3      	bne.n	8007544 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800757c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007580:	4619      	mov	r1, r3
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 f848 	bl	8007618 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007588:	e023      	b.n	80075d2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800758a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800758e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007592:	2b00      	cmp	r3, #0
 8007594:	d009      	beq.n	80075aa <HAL_UART_IRQHandler+0x4ea>
 8007596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800759a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d003      	beq.n	80075aa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 fb1d 	bl	8007be2 <UART_Transmit_IT>
    return;
 80075a8:	e014      	b.n	80075d4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80075aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00e      	beq.n	80075d4 <HAL_UART_IRQHandler+0x514>
 80075b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d008      	beq.n	80075d4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 fb5d 	bl	8007c82 <UART_EndTransmit_IT>
    return;
 80075c8:	e004      	b.n	80075d4 <HAL_UART_IRQHandler+0x514>
    return;
 80075ca:	bf00      	nop
 80075cc:	e002      	b.n	80075d4 <HAL_UART_IRQHandler+0x514>
      return;
 80075ce:	bf00      	nop
 80075d0:	e000      	b.n	80075d4 <HAL_UART_IRQHandler+0x514>
      return;
 80075d2:	bf00      	nop
  }
}
 80075d4:	37e8      	adds	r7, #232	; 0xe8
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop

080075dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80075e4:	bf00      	nop
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80075f8:	bf00      	nop
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800760c:	bf00      	nop
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	460b      	mov	r3, r1
 8007622:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007624:	bf00      	nop
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b09c      	sub	sp, #112	; 0x70
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800763c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007648:	2b00      	cmp	r3, #0
 800764a:	d172      	bne.n	8007732 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800764c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800764e:	2200      	movs	r2, #0
 8007650:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	330c      	adds	r3, #12
 8007658:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800765c:	e853 3f00 	ldrex	r3, [r3]
 8007660:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007664:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007668:	66bb      	str	r3, [r7, #104]	; 0x68
 800766a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	330c      	adds	r3, #12
 8007670:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007672:	65ba      	str	r2, [r7, #88]	; 0x58
 8007674:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007676:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007678:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800767a:	e841 2300 	strex	r3, r2, [r1]
 800767e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007680:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007682:	2b00      	cmp	r3, #0
 8007684:	d1e5      	bne.n	8007652 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	3314      	adds	r3, #20
 800768c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007690:	e853 3f00 	ldrex	r3, [r3]
 8007694:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007698:	f023 0301 	bic.w	r3, r3, #1
 800769c:	667b      	str	r3, [r7, #100]	; 0x64
 800769e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	3314      	adds	r3, #20
 80076a4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80076a6:	647a      	str	r2, [r7, #68]	; 0x44
 80076a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80076ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076ae:	e841 2300 	strex	r3, r2, [r1]
 80076b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80076b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1e5      	bne.n	8007686 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	3314      	adds	r3, #20
 80076c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c4:	e853 3f00 	ldrex	r3, [r3]
 80076c8:	623b      	str	r3, [r7, #32]
   return(result);
 80076ca:	6a3b      	ldr	r3, [r7, #32]
 80076cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076d0:	663b      	str	r3, [r7, #96]	; 0x60
 80076d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	3314      	adds	r3, #20
 80076d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80076da:	633a      	str	r2, [r7, #48]	; 0x30
 80076dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076e2:	e841 2300 	strex	r3, r2, [r1]
 80076e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d1e5      	bne.n	80076ba <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80076ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076f0:	2220      	movs	r2, #32
 80076f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d119      	bne.n	8007732 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	330c      	adds	r3, #12
 8007704:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	e853 3f00 	ldrex	r3, [r3]
 800770c:	60fb      	str	r3, [r7, #12]
   return(result);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f023 0310 	bic.w	r3, r3, #16
 8007714:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	330c      	adds	r3, #12
 800771c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800771e:	61fa      	str	r2, [r7, #28]
 8007720:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007722:	69b9      	ldr	r1, [r7, #24]
 8007724:	69fa      	ldr	r2, [r7, #28]
 8007726:	e841 2300 	strex	r3, r2, [r1]
 800772a:	617b      	str	r3, [r7, #20]
   return(result);
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d1e5      	bne.n	80076fe <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007736:	2b01      	cmp	r3, #1
 8007738:	d106      	bne.n	8007748 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800773a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800773c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800773e:	4619      	mov	r1, r3
 8007740:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007742:	f7ff ff69 	bl	8007618 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007746:	e002      	b.n	800774e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007748:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800774a:	f7fa fb89 	bl	8001e60 <HAL_UART_RxCpltCallback>
}
 800774e:	bf00      	nop
 8007750:	3770      	adds	r7, #112	; 0x70
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}

08007756 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007756:	b580      	push	{r7, lr}
 8007758:	b084      	sub	sp, #16
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007762:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007768:	2b01      	cmp	r3, #1
 800776a:	d108      	bne.n	800777e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007770:	085b      	lsrs	r3, r3, #1
 8007772:	b29b      	uxth	r3, r3
 8007774:	4619      	mov	r1, r3
 8007776:	68f8      	ldr	r0, [r7, #12]
 8007778:	f7ff ff4e 	bl	8007618 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800777c:	e002      	b.n	8007784 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800777e:	68f8      	ldr	r0, [r7, #12]
 8007780:	f7ff ff36 	bl	80075f0 <HAL_UART_RxHalfCpltCallback>
}
 8007784:	bf00      	nop
 8007786:	3710      	adds	r7, #16
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007794:	2300      	movs	r3, #0
 8007796:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800779c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	695b      	ldr	r3, [r3, #20]
 80077a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077a8:	2b80      	cmp	r3, #128	; 0x80
 80077aa:	bf0c      	ite	eq
 80077ac:	2301      	moveq	r3, #1
 80077ae:	2300      	movne	r3, #0
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	2b21      	cmp	r3, #33	; 0x21
 80077be:	d108      	bne.n	80077d2 <UART_DMAError+0x46>
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d005      	beq.n	80077d2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	2200      	movs	r2, #0
 80077ca:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80077cc:	68b8      	ldr	r0, [r7, #8]
 80077ce:	f000 f969 	bl	8007aa4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	695b      	ldr	r3, [r3, #20]
 80077d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077dc:	2b40      	cmp	r3, #64	; 0x40
 80077de:	bf0c      	ite	eq
 80077e0:	2301      	moveq	r3, #1
 80077e2:	2300      	movne	r3, #0
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	2b22      	cmp	r3, #34	; 0x22
 80077f2:	d108      	bne.n	8007806 <UART_DMAError+0x7a>
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d005      	beq.n	8007806 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	2200      	movs	r2, #0
 80077fe:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007800:	68b8      	ldr	r0, [r7, #8]
 8007802:	f000 f977 	bl	8007af4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780a:	f043 0210 	orr.w	r2, r3, #16
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007812:	68b8      	ldr	r0, [r7, #8]
 8007814:	f7ff fef6 	bl	8007604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007818:	bf00      	nop
 800781a:	3710      	adds	r7, #16
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b090      	sub	sp, #64	; 0x40
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	603b      	str	r3, [r7, #0]
 800782c:	4613      	mov	r3, r2
 800782e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007830:	e050      	b.n	80078d4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007832:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007838:	d04c      	beq.n	80078d4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800783a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800783c:	2b00      	cmp	r3, #0
 800783e:	d007      	beq.n	8007850 <UART_WaitOnFlagUntilTimeout+0x30>
 8007840:	f7fb fe18 	bl	8003474 <HAL_GetTick>
 8007844:	4602      	mov	r2, r0
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	1ad3      	subs	r3, r2, r3
 800784a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800784c:	429a      	cmp	r2, r3
 800784e:	d241      	bcs.n	80078d4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	330c      	adds	r3, #12
 8007856:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785a:	e853 3f00 	ldrex	r3, [r3]
 800785e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007862:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007866:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	330c      	adds	r3, #12
 800786e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007870:	637a      	str	r2, [r7, #52]	; 0x34
 8007872:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007874:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007876:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007878:	e841 2300 	strex	r3, r2, [r1]
 800787c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800787e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007880:	2b00      	cmp	r3, #0
 8007882:	d1e5      	bne.n	8007850 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	3314      	adds	r3, #20
 800788a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	e853 3f00 	ldrex	r3, [r3]
 8007892:	613b      	str	r3, [r7, #16]
   return(result);
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	f023 0301 	bic.w	r3, r3, #1
 800789a:	63bb      	str	r3, [r7, #56]	; 0x38
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	3314      	adds	r3, #20
 80078a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078a4:	623a      	str	r2, [r7, #32]
 80078a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a8:	69f9      	ldr	r1, [r7, #28]
 80078aa:	6a3a      	ldr	r2, [r7, #32]
 80078ac:	e841 2300 	strex	r3, r2, [r1]
 80078b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d1e5      	bne.n	8007884 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2220      	movs	r2, #32
 80078bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2220      	movs	r2, #32
 80078c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2200      	movs	r2, #0
 80078cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80078d0:	2303      	movs	r3, #3
 80078d2:	e00f      	b.n	80078f4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	4013      	ands	r3, r2
 80078de:	68ba      	ldr	r2, [r7, #8]
 80078e0:	429a      	cmp	r2, r3
 80078e2:	bf0c      	ite	eq
 80078e4:	2301      	moveq	r3, #1
 80078e6:	2300      	movne	r3, #0
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	461a      	mov	r2, r3
 80078ec:	79fb      	ldrb	r3, [r7, #7]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d09f      	beq.n	8007832 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80078f2:	2300      	movs	r3, #0
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3740      	adds	r7, #64	; 0x40
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b085      	sub	sp, #20
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	4613      	mov	r3, r2
 8007908:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	68ba      	ldr	r2, [r7, #8]
 800790e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	88fa      	ldrh	r2, [r7, #6]
 8007914:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	88fa      	ldrh	r2, [r7, #6]
 800791a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2200      	movs	r2, #0
 8007920:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2222      	movs	r2, #34	; 0x22
 8007926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	68da      	ldr	r2, [r3, #12]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007940:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	695a      	ldr	r2, [r3, #20]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f042 0201 	orr.w	r2, r2, #1
 8007950:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	68da      	ldr	r2, [r3, #12]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f042 0220 	orr.w	r2, r2, #32
 8007960:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007962:	2300      	movs	r3, #0
}
 8007964:	4618      	mov	r0, r3
 8007966:	3714      	adds	r7, #20
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b098      	sub	sp, #96	; 0x60
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	4613      	mov	r3, r2
 800797c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800797e:	68ba      	ldr	r2, [r7, #8]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	88fa      	ldrh	r2, [r7, #6]
 8007988:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2200      	movs	r2, #0
 800798e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2222      	movs	r2, #34	; 0x22
 8007994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800799c:	4a3e      	ldr	r2, [pc, #248]	; (8007a98 <UART_Start_Receive_DMA+0x128>)
 800799e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a4:	4a3d      	ldr	r2, [pc, #244]	; (8007a9c <UART_Start_Receive_DMA+0x12c>)
 80079a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ac:	4a3c      	ldr	r2, [pc, #240]	; (8007aa0 <UART_Start_Receive_DMA+0x130>)
 80079ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b4:	2200      	movs	r2, #0
 80079b6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80079b8:	f107 0308 	add.w	r3, r7, #8
 80079bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	3304      	adds	r3, #4
 80079c8:	4619      	mov	r1, r3
 80079ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	88fb      	ldrh	r3, [r7, #6]
 80079d0:	f7fc faee 	bl	8003fb0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80079d4:	2300      	movs	r3, #0
 80079d6:	613b      	str	r3, [r7, #16]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	613b      	str	r3, [r7, #16]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	613b      	str	r3, [r7, #16]
 80079e8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2200      	movs	r2, #0
 80079ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	330c      	adds	r3, #12
 80079f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079fc:	e853 3f00 	ldrex	r3, [r3]
 8007a00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a08:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	330c      	adds	r3, #12
 8007a10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a12:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007a14:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a16:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007a18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a1a:	e841 2300 	strex	r3, r2, [r1]
 8007a1e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d1e5      	bne.n	80079f2 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	3314      	adds	r3, #20
 8007a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a30:	e853 3f00 	ldrex	r3, [r3]
 8007a34:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a38:	f043 0301 	orr.w	r3, r3, #1
 8007a3c:	657b      	str	r3, [r7, #84]	; 0x54
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	3314      	adds	r3, #20
 8007a44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007a46:	63ba      	str	r2, [r7, #56]	; 0x38
 8007a48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007a4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a4e:	e841 2300 	strex	r3, r2, [r1]
 8007a52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d1e5      	bne.n	8007a26 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	3314      	adds	r3, #20
 8007a60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	e853 3f00 	ldrex	r3, [r3]
 8007a68:	617b      	str	r3, [r7, #20]
   return(result);
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a70:	653b      	str	r3, [r7, #80]	; 0x50
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	3314      	adds	r3, #20
 8007a78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007a7a:	627a      	str	r2, [r7, #36]	; 0x24
 8007a7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7e:	6a39      	ldr	r1, [r7, #32]
 8007a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a82:	e841 2300 	strex	r3, r2, [r1]
 8007a86:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1e5      	bne.n	8007a5a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007a8e:	2300      	movs	r3, #0
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3760      	adds	r7, #96	; 0x60
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	08007631 	.word	0x08007631
 8007a9c:	08007757 	.word	0x08007757
 8007aa0:	0800778d 	.word	0x0800778d

08007aa4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b089      	sub	sp, #36	; 0x24
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	330c      	adds	r3, #12
 8007ab2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	e853 3f00 	ldrex	r3, [r3]
 8007aba:	60bb      	str	r3, [r7, #8]
   return(result);
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007ac2:	61fb      	str	r3, [r7, #28]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	330c      	adds	r3, #12
 8007aca:	69fa      	ldr	r2, [r7, #28]
 8007acc:	61ba      	str	r2, [r7, #24]
 8007ace:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad0:	6979      	ldr	r1, [r7, #20]
 8007ad2:	69ba      	ldr	r2, [r7, #24]
 8007ad4:	e841 2300 	strex	r3, r2, [r1]
 8007ad8:	613b      	str	r3, [r7, #16]
   return(result);
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d1e5      	bne.n	8007aac <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2220      	movs	r2, #32
 8007ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007ae8:	bf00      	nop
 8007aea:	3724      	adds	r7, #36	; 0x24
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr

08007af4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b095      	sub	sp, #84	; 0x54
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	330c      	adds	r3, #12
 8007b02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b06:	e853 3f00 	ldrex	r3, [r3]
 8007b0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	330c      	adds	r3, #12
 8007b1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b1c:	643a      	str	r2, [r7, #64]	; 0x40
 8007b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b24:	e841 2300 	strex	r3, r2, [r1]
 8007b28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d1e5      	bne.n	8007afc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	3314      	adds	r3, #20
 8007b36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b38:	6a3b      	ldr	r3, [r7, #32]
 8007b3a:	e853 3f00 	ldrex	r3, [r3]
 8007b3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	f023 0301 	bic.w	r3, r3, #1
 8007b46:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	3314      	adds	r3, #20
 8007b4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b58:	e841 2300 	strex	r3, r2, [r1]
 8007b5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d1e5      	bne.n	8007b30 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d119      	bne.n	8007ba0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	330c      	adds	r3, #12
 8007b72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	e853 3f00 	ldrex	r3, [r3]
 8007b7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	f023 0310 	bic.w	r3, r3, #16
 8007b82:	647b      	str	r3, [r7, #68]	; 0x44
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	330c      	adds	r3, #12
 8007b8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b8c:	61ba      	str	r2, [r7, #24]
 8007b8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b90:	6979      	ldr	r1, [r7, #20]
 8007b92:	69ba      	ldr	r2, [r7, #24]
 8007b94:	e841 2300 	strex	r3, r2, [r1]
 8007b98:	613b      	str	r3, [r7, #16]
   return(result);
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d1e5      	bne.n	8007b6c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2220      	movs	r2, #32
 8007ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007bae:	bf00      	nop
 8007bb0:	3754      	adds	r7, #84	; 0x54
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr

08007bba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b084      	sub	sp, #16
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007bd4:	68f8      	ldr	r0, [r7, #12]
 8007bd6:	f7ff fd15 	bl	8007604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bda:	bf00      	nop
 8007bdc:	3710      	adds	r7, #16
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007be2:	b480      	push	{r7}
 8007be4:	b085      	sub	sp, #20
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	2b21      	cmp	r3, #33	; 0x21
 8007bf4:	d13e      	bne.n	8007c74 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bfe:	d114      	bne.n	8007c2a <UART_Transmit_IT+0x48>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	691b      	ldr	r3, [r3, #16]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d110      	bne.n	8007c2a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6a1b      	ldr	r3, [r3, #32]
 8007c0c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	881b      	ldrh	r3, [r3, #0]
 8007c12:	461a      	mov	r2, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c1c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a1b      	ldr	r3, [r3, #32]
 8007c22:	1c9a      	adds	r2, r3, #2
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	621a      	str	r2, [r3, #32]
 8007c28:	e008      	b.n	8007c3c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a1b      	ldr	r3, [r3, #32]
 8007c2e:	1c59      	adds	r1, r3, #1
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	6211      	str	r1, [r2, #32]
 8007c34:	781a      	ldrb	r2, [r3, #0]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	3b01      	subs	r3, #1
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	4619      	mov	r1, r3
 8007c4a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d10f      	bne.n	8007c70 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	68da      	ldr	r2, [r3, #12]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c5e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	68da      	ldr	r2, [r3, #12]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c6e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007c70:	2300      	movs	r3, #0
 8007c72:	e000      	b.n	8007c76 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007c74:	2302      	movs	r3, #2
  }
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3714      	adds	r7, #20
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr

08007c82 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c82:	b580      	push	{r7, lr}
 8007c84:	b082      	sub	sp, #8
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	68da      	ldr	r2, [r3, #12]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c98:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2220      	movs	r2, #32
 8007c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f7ff fc9a 	bl	80075dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3708      	adds	r7, #8
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b08c      	sub	sp, #48	; 0x30
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	2b22      	cmp	r3, #34	; 0x22
 8007cc4:	f040 80ab 	bne.w	8007e1e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cd0:	d117      	bne.n	8007d02 <UART_Receive_IT+0x50>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	691b      	ldr	r3, [r3, #16]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d113      	bne.n	8007d02 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cf0:	b29a      	uxth	r2, r3
 8007cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cfa:	1c9a      	adds	r2, r3, #2
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	629a      	str	r2, [r3, #40]	; 0x28
 8007d00:	e026      	b.n	8007d50 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d06:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d14:	d007      	beq.n	8007d26 <UART_Receive_IT+0x74>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d10a      	bne.n	8007d34 <UART_Receive_IT+0x82>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	691b      	ldr	r3, [r3, #16]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d106      	bne.n	8007d34 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	b2da      	uxtb	r2, r3
 8007d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d30:	701a      	strb	r2, [r3, #0]
 8007d32:	e008      	b.n	8007d46 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d40:	b2da      	uxtb	r2, r3
 8007d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d44:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d4a:	1c5a      	adds	r2, r3, #1
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	3b01      	subs	r3, #1
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d15a      	bne.n	8007e1a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	68da      	ldr	r2, [r3, #12]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f022 0220 	bic.w	r2, r2, #32
 8007d72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	68da      	ldr	r2, [r3, #12]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	695a      	ldr	r2, [r3, #20]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f022 0201 	bic.w	r2, r2, #1
 8007d92:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2220      	movs	r2, #32
 8007d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d135      	bne.n	8007e10 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	330c      	adds	r3, #12
 8007db0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	e853 3f00 	ldrex	r3, [r3]
 8007db8:	613b      	str	r3, [r7, #16]
   return(result);
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	f023 0310 	bic.w	r3, r3, #16
 8007dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	330c      	adds	r3, #12
 8007dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dca:	623a      	str	r2, [r7, #32]
 8007dcc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dce:	69f9      	ldr	r1, [r7, #28]
 8007dd0:	6a3a      	ldr	r2, [r7, #32]
 8007dd2:	e841 2300 	strex	r3, r2, [r1]
 8007dd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8007dd8:	69bb      	ldr	r3, [r7, #24]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d1e5      	bne.n	8007daa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f003 0310 	and.w	r3, r3, #16
 8007de8:	2b10      	cmp	r3, #16
 8007dea:	d10a      	bne.n	8007e02 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007dec:	2300      	movs	r3, #0
 8007dee:	60fb      	str	r3, [r7, #12]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	60fb      	str	r3, [r7, #12]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	60fb      	str	r3, [r7, #12]
 8007e00:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007e06:	4619      	mov	r1, r3
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f7ff fc05 	bl	8007618 <HAL_UARTEx_RxEventCallback>
 8007e0e:	e002      	b.n	8007e16 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f7fa f825 	bl	8001e60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007e16:	2300      	movs	r3, #0
 8007e18:	e002      	b.n	8007e20 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	e000      	b.n	8007e20 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007e1e:	2302      	movs	r3, #2
  }
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3730      	adds	r7, #48	; 0x30
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e2c:	b09f      	sub	sp, #124	; 0x7c
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	691b      	ldr	r3, [r3, #16]
 8007e38:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007e3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e3e:	68d9      	ldr	r1, [r3, #12]
 8007e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	ea40 0301 	orr.w	r3, r0, r1
 8007e48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007e4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e4c:	689a      	ldr	r2, [r3, #8]
 8007e4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e50:	691b      	ldr	r3, [r3, #16]
 8007e52:	431a      	orrs	r2, r3
 8007e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e56:	695b      	ldr	r3, [r3, #20]
 8007e58:	431a      	orrs	r2, r3
 8007e5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e5c:	69db      	ldr	r3, [r3, #28]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007e6c:	f021 010c 	bic.w	r1, r1, #12
 8007e70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e76:	430b      	orrs	r3, r1
 8007e78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	695b      	ldr	r3, [r3, #20]
 8007e80:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e86:	6999      	ldr	r1, [r3, #24]
 8007e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	ea40 0301 	orr.w	r3, r0, r1
 8007e90:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	4bc5      	ldr	r3, [pc, #788]	; (80081ac <UART_SetConfig+0x384>)
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d004      	beq.n	8007ea6 <UART_SetConfig+0x7e>
 8007e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	4bc3      	ldr	r3, [pc, #780]	; (80081b0 <UART_SetConfig+0x388>)
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d103      	bne.n	8007eae <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ea6:	f7fe f99b 	bl	80061e0 <HAL_RCC_GetPCLK2Freq>
 8007eaa:	6778      	str	r0, [r7, #116]	; 0x74
 8007eac:	e002      	b.n	8007eb4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007eae:	f7fe f983 	bl	80061b8 <HAL_RCC_GetPCLK1Freq>
 8007eb2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007eb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eb6:	69db      	ldr	r3, [r3, #28]
 8007eb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ebc:	f040 80b6 	bne.w	800802c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ec0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ec2:	461c      	mov	r4, r3
 8007ec4:	f04f 0500 	mov.w	r5, #0
 8007ec8:	4622      	mov	r2, r4
 8007eca:	462b      	mov	r3, r5
 8007ecc:	1891      	adds	r1, r2, r2
 8007ece:	6439      	str	r1, [r7, #64]	; 0x40
 8007ed0:	415b      	adcs	r3, r3
 8007ed2:	647b      	str	r3, [r7, #68]	; 0x44
 8007ed4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007ed8:	1912      	adds	r2, r2, r4
 8007eda:	eb45 0303 	adc.w	r3, r5, r3
 8007ede:	f04f 0000 	mov.w	r0, #0
 8007ee2:	f04f 0100 	mov.w	r1, #0
 8007ee6:	00d9      	lsls	r1, r3, #3
 8007ee8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007eec:	00d0      	lsls	r0, r2, #3
 8007eee:	4602      	mov	r2, r0
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	1911      	adds	r1, r2, r4
 8007ef4:	6639      	str	r1, [r7, #96]	; 0x60
 8007ef6:	416b      	adcs	r3, r5
 8007ef8:	667b      	str	r3, [r7, #100]	; 0x64
 8007efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	461a      	mov	r2, r3
 8007f00:	f04f 0300 	mov.w	r3, #0
 8007f04:	1891      	adds	r1, r2, r2
 8007f06:	63b9      	str	r1, [r7, #56]	; 0x38
 8007f08:	415b      	adcs	r3, r3
 8007f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007f10:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007f14:	f7f8 fea0 	bl	8000c58 <__aeabi_uldivmod>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	4ba5      	ldr	r3, [pc, #660]	; (80081b4 <UART_SetConfig+0x38c>)
 8007f1e:	fba3 2302 	umull	r2, r3, r3, r2
 8007f22:	095b      	lsrs	r3, r3, #5
 8007f24:	011e      	lsls	r6, r3, #4
 8007f26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f28:	461c      	mov	r4, r3
 8007f2a:	f04f 0500 	mov.w	r5, #0
 8007f2e:	4622      	mov	r2, r4
 8007f30:	462b      	mov	r3, r5
 8007f32:	1891      	adds	r1, r2, r2
 8007f34:	6339      	str	r1, [r7, #48]	; 0x30
 8007f36:	415b      	adcs	r3, r3
 8007f38:	637b      	str	r3, [r7, #52]	; 0x34
 8007f3a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007f3e:	1912      	adds	r2, r2, r4
 8007f40:	eb45 0303 	adc.w	r3, r5, r3
 8007f44:	f04f 0000 	mov.w	r0, #0
 8007f48:	f04f 0100 	mov.w	r1, #0
 8007f4c:	00d9      	lsls	r1, r3, #3
 8007f4e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007f52:	00d0      	lsls	r0, r2, #3
 8007f54:	4602      	mov	r2, r0
 8007f56:	460b      	mov	r3, r1
 8007f58:	1911      	adds	r1, r2, r4
 8007f5a:	65b9      	str	r1, [r7, #88]	; 0x58
 8007f5c:	416b      	adcs	r3, r5
 8007f5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	461a      	mov	r2, r3
 8007f66:	f04f 0300 	mov.w	r3, #0
 8007f6a:	1891      	adds	r1, r2, r2
 8007f6c:	62b9      	str	r1, [r7, #40]	; 0x28
 8007f6e:	415b      	adcs	r3, r3
 8007f70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f76:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007f7a:	f7f8 fe6d 	bl	8000c58 <__aeabi_uldivmod>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	460b      	mov	r3, r1
 8007f82:	4b8c      	ldr	r3, [pc, #560]	; (80081b4 <UART_SetConfig+0x38c>)
 8007f84:	fba3 1302 	umull	r1, r3, r3, r2
 8007f88:	095b      	lsrs	r3, r3, #5
 8007f8a:	2164      	movs	r1, #100	; 0x64
 8007f8c:	fb01 f303 	mul.w	r3, r1, r3
 8007f90:	1ad3      	subs	r3, r2, r3
 8007f92:	00db      	lsls	r3, r3, #3
 8007f94:	3332      	adds	r3, #50	; 0x32
 8007f96:	4a87      	ldr	r2, [pc, #540]	; (80081b4 <UART_SetConfig+0x38c>)
 8007f98:	fba2 2303 	umull	r2, r3, r2, r3
 8007f9c:	095b      	lsrs	r3, r3, #5
 8007f9e:	005b      	lsls	r3, r3, #1
 8007fa0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007fa4:	441e      	add	r6, r3
 8007fa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f04f 0100 	mov.w	r1, #0
 8007fae:	4602      	mov	r2, r0
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	1894      	adds	r4, r2, r2
 8007fb4:	623c      	str	r4, [r7, #32]
 8007fb6:	415b      	adcs	r3, r3
 8007fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8007fba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007fbe:	1812      	adds	r2, r2, r0
 8007fc0:	eb41 0303 	adc.w	r3, r1, r3
 8007fc4:	f04f 0400 	mov.w	r4, #0
 8007fc8:	f04f 0500 	mov.w	r5, #0
 8007fcc:	00dd      	lsls	r5, r3, #3
 8007fce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007fd2:	00d4      	lsls	r4, r2, #3
 8007fd4:	4622      	mov	r2, r4
 8007fd6:	462b      	mov	r3, r5
 8007fd8:	1814      	adds	r4, r2, r0
 8007fda:	653c      	str	r4, [r7, #80]	; 0x50
 8007fdc:	414b      	adcs	r3, r1
 8007fde:	657b      	str	r3, [r7, #84]	; 0x54
 8007fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	f04f 0300 	mov.w	r3, #0
 8007fea:	1891      	adds	r1, r2, r2
 8007fec:	61b9      	str	r1, [r7, #24]
 8007fee:	415b      	adcs	r3, r3
 8007ff0:	61fb      	str	r3, [r7, #28]
 8007ff2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ff6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007ffa:	f7f8 fe2d 	bl	8000c58 <__aeabi_uldivmod>
 8007ffe:	4602      	mov	r2, r0
 8008000:	460b      	mov	r3, r1
 8008002:	4b6c      	ldr	r3, [pc, #432]	; (80081b4 <UART_SetConfig+0x38c>)
 8008004:	fba3 1302 	umull	r1, r3, r3, r2
 8008008:	095b      	lsrs	r3, r3, #5
 800800a:	2164      	movs	r1, #100	; 0x64
 800800c:	fb01 f303 	mul.w	r3, r1, r3
 8008010:	1ad3      	subs	r3, r2, r3
 8008012:	00db      	lsls	r3, r3, #3
 8008014:	3332      	adds	r3, #50	; 0x32
 8008016:	4a67      	ldr	r2, [pc, #412]	; (80081b4 <UART_SetConfig+0x38c>)
 8008018:	fba2 2303 	umull	r2, r3, r2, r3
 800801c:	095b      	lsrs	r3, r3, #5
 800801e:	f003 0207 	and.w	r2, r3, #7
 8008022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4432      	add	r2, r6
 8008028:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800802a:	e0b9      	b.n	80081a0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800802c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800802e:	461c      	mov	r4, r3
 8008030:	f04f 0500 	mov.w	r5, #0
 8008034:	4622      	mov	r2, r4
 8008036:	462b      	mov	r3, r5
 8008038:	1891      	adds	r1, r2, r2
 800803a:	6139      	str	r1, [r7, #16]
 800803c:	415b      	adcs	r3, r3
 800803e:	617b      	str	r3, [r7, #20]
 8008040:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008044:	1912      	adds	r2, r2, r4
 8008046:	eb45 0303 	adc.w	r3, r5, r3
 800804a:	f04f 0000 	mov.w	r0, #0
 800804e:	f04f 0100 	mov.w	r1, #0
 8008052:	00d9      	lsls	r1, r3, #3
 8008054:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008058:	00d0      	lsls	r0, r2, #3
 800805a:	4602      	mov	r2, r0
 800805c:	460b      	mov	r3, r1
 800805e:	eb12 0804 	adds.w	r8, r2, r4
 8008062:	eb43 0905 	adc.w	r9, r3, r5
 8008066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	4618      	mov	r0, r3
 800806c:	f04f 0100 	mov.w	r1, #0
 8008070:	f04f 0200 	mov.w	r2, #0
 8008074:	f04f 0300 	mov.w	r3, #0
 8008078:	008b      	lsls	r3, r1, #2
 800807a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800807e:	0082      	lsls	r2, r0, #2
 8008080:	4640      	mov	r0, r8
 8008082:	4649      	mov	r1, r9
 8008084:	f7f8 fde8 	bl	8000c58 <__aeabi_uldivmod>
 8008088:	4602      	mov	r2, r0
 800808a:	460b      	mov	r3, r1
 800808c:	4b49      	ldr	r3, [pc, #292]	; (80081b4 <UART_SetConfig+0x38c>)
 800808e:	fba3 2302 	umull	r2, r3, r3, r2
 8008092:	095b      	lsrs	r3, r3, #5
 8008094:	011e      	lsls	r6, r3, #4
 8008096:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008098:	4618      	mov	r0, r3
 800809a:	f04f 0100 	mov.w	r1, #0
 800809e:	4602      	mov	r2, r0
 80080a0:	460b      	mov	r3, r1
 80080a2:	1894      	adds	r4, r2, r2
 80080a4:	60bc      	str	r4, [r7, #8]
 80080a6:	415b      	adcs	r3, r3
 80080a8:	60fb      	str	r3, [r7, #12]
 80080aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80080ae:	1812      	adds	r2, r2, r0
 80080b0:	eb41 0303 	adc.w	r3, r1, r3
 80080b4:	f04f 0400 	mov.w	r4, #0
 80080b8:	f04f 0500 	mov.w	r5, #0
 80080bc:	00dd      	lsls	r5, r3, #3
 80080be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80080c2:	00d4      	lsls	r4, r2, #3
 80080c4:	4622      	mov	r2, r4
 80080c6:	462b      	mov	r3, r5
 80080c8:	1814      	adds	r4, r2, r0
 80080ca:	64bc      	str	r4, [r7, #72]	; 0x48
 80080cc:	414b      	adcs	r3, r1
 80080ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	4618      	mov	r0, r3
 80080d6:	f04f 0100 	mov.w	r1, #0
 80080da:	f04f 0200 	mov.w	r2, #0
 80080de:	f04f 0300 	mov.w	r3, #0
 80080e2:	008b      	lsls	r3, r1, #2
 80080e4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80080e8:	0082      	lsls	r2, r0, #2
 80080ea:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80080ee:	f7f8 fdb3 	bl	8000c58 <__aeabi_uldivmod>
 80080f2:	4602      	mov	r2, r0
 80080f4:	460b      	mov	r3, r1
 80080f6:	4b2f      	ldr	r3, [pc, #188]	; (80081b4 <UART_SetConfig+0x38c>)
 80080f8:	fba3 1302 	umull	r1, r3, r3, r2
 80080fc:	095b      	lsrs	r3, r3, #5
 80080fe:	2164      	movs	r1, #100	; 0x64
 8008100:	fb01 f303 	mul.w	r3, r1, r3
 8008104:	1ad3      	subs	r3, r2, r3
 8008106:	011b      	lsls	r3, r3, #4
 8008108:	3332      	adds	r3, #50	; 0x32
 800810a:	4a2a      	ldr	r2, [pc, #168]	; (80081b4 <UART_SetConfig+0x38c>)
 800810c:	fba2 2303 	umull	r2, r3, r2, r3
 8008110:	095b      	lsrs	r3, r3, #5
 8008112:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008116:	441e      	add	r6, r3
 8008118:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800811a:	4618      	mov	r0, r3
 800811c:	f04f 0100 	mov.w	r1, #0
 8008120:	4602      	mov	r2, r0
 8008122:	460b      	mov	r3, r1
 8008124:	1894      	adds	r4, r2, r2
 8008126:	603c      	str	r4, [r7, #0]
 8008128:	415b      	adcs	r3, r3
 800812a:	607b      	str	r3, [r7, #4]
 800812c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008130:	1812      	adds	r2, r2, r0
 8008132:	eb41 0303 	adc.w	r3, r1, r3
 8008136:	f04f 0400 	mov.w	r4, #0
 800813a:	f04f 0500 	mov.w	r5, #0
 800813e:	00dd      	lsls	r5, r3, #3
 8008140:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008144:	00d4      	lsls	r4, r2, #3
 8008146:	4622      	mov	r2, r4
 8008148:	462b      	mov	r3, r5
 800814a:	eb12 0a00 	adds.w	sl, r2, r0
 800814e:	eb43 0b01 	adc.w	fp, r3, r1
 8008152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	4618      	mov	r0, r3
 8008158:	f04f 0100 	mov.w	r1, #0
 800815c:	f04f 0200 	mov.w	r2, #0
 8008160:	f04f 0300 	mov.w	r3, #0
 8008164:	008b      	lsls	r3, r1, #2
 8008166:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800816a:	0082      	lsls	r2, r0, #2
 800816c:	4650      	mov	r0, sl
 800816e:	4659      	mov	r1, fp
 8008170:	f7f8 fd72 	bl	8000c58 <__aeabi_uldivmod>
 8008174:	4602      	mov	r2, r0
 8008176:	460b      	mov	r3, r1
 8008178:	4b0e      	ldr	r3, [pc, #56]	; (80081b4 <UART_SetConfig+0x38c>)
 800817a:	fba3 1302 	umull	r1, r3, r3, r2
 800817e:	095b      	lsrs	r3, r3, #5
 8008180:	2164      	movs	r1, #100	; 0x64
 8008182:	fb01 f303 	mul.w	r3, r1, r3
 8008186:	1ad3      	subs	r3, r2, r3
 8008188:	011b      	lsls	r3, r3, #4
 800818a:	3332      	adds	r3, #50	; 0x32
 800818c:	4a09      	ldr	r2, [pc, #36]	; (80081b4 <UART_SetConfig+0x38c>)
 800818e:	fba2 2303 	umull	r2, r3, r2, r3
 8008192:	095b      	lsrs	r3, r3, #5
 8008194:	f003 020f 	and.w	r2, r3, #15
 8008198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4432      	add	r2, r6
 800819e:	609a      	str	r2, [r3, #8]
}
 80081a0:	bf00      	nop
 80081a2:	377c      	adds	r7, #124	; 0x7c
 80081a4:	46bd      	mov	sp, r7
 80081a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081aa:	bf00      	nop
 80081ac:	40011000 	.word	0x40011000
 80081b0:	40011400 	.word	0x40011400
 80081b4:	51eb851f 	.word	0x51eb851f

080081b8 <__errno>:
 80081b8:	4b01      	ldr	r3, [pc, #4]	; (80081c0 <__errno+0x8>)
 80081ba:	6818      	ldr	r0, [r3, #0]
 80081bc:	4770      	bx	lr
 80081be:	bf00      	nop
 80081c0:	2000000c 	.word	0x2000000c

080081c4 <__libc_init_array>:
 80081c4:	b570      	push	{r4, r5, r6, lr}
 80081c6:	4d0d      	ldr	r5, [pc, #52]	; (80081fc <__libc_init_array+0x38>)
 80081c8:	4c0d      	ldr	r4, [pc, #52]	; (8008200 <__libc_init_array+0x3c>)
 80081ca:	1b64      	subs	r4, r4, r5
 80081cc:	10a4      	asrs	r4, r4, #2
 80081ce:	2600      	movs	r6, #0
 80081d0:	42a6      	cmp	r6, r4
 80081d2:	d109      	bne.n	80081e8 <__libc_init_array+0x24>
 80081d4:	4d0b      	ldr	r5, [pc, #44]	; (8008204 <__libc_init_array+0x40>)
 80081d6:	4c0c      	ldr	r4, [pc, #48]	; (8008208 <__libc_init_array+0x44>)
 80081d8:	f003 f92c 	bl	800b434 <_init>
 80081dc:	1b64      	subs	r4, r4, r5
 80081de:	10a4      	asrs	r4, r4, #2
 80081e0:	2600      	movs	r6, #0
 80081e2:	42a6      	cmp	r6, r4
 80081e4:	d105      	bne.n	80081f2 <__libc_init_array+0x2e>
 80081e6:	bd70      	pop	{r4, r5, r6, pc}
 80081e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80081ec:	4798      	blx	r3
 80081ee:	3601      	adds	r6, #1
 80081f0:	e7ee      	b.n	80081d0 <__libc_init_array+0xc>
 80081f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80081f6:	4798      	blx	r3
 80081f8:	3601      	adds	r6, #1
 80081fa:	e7f2      	b.n	80081e2 <__libc_init_array+0x1e>
 80081fc:	0800b908 	.word	0x0800b908
 8008200:	0800b908 	.word	0x0800b908
 8008204:	0800b908 	.word	0x0800b908
 8008208:	0800b90c 	.word	0x0800b90c

0800820c <memset>:
 800820c:	4402      	add	r2, r0
 800820e:	4603      	mov	r3, r0
 8008210:	4293      	cmp	r3, r2
 8008212:	d100      	bne.n	8008216 <memset+0xa>
 8008214:	4770      	bx	lr
 8008216:	f803 1b01 	strb.w	r1, [r3], #1
 800821a:	e7f9      	b.n	8008210 <memset+0x4>

0800821c <__cvt>:
 800821c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008220:	ec55 4b10 	vmov	r4, r5, d0
 8008224:	2d00      	cmp	r5, #0
 8008226:	460e      	mov	r6, r1
 8008228:	4619      	mov	r1, r3
 800822a:	462b      	mov	r3, r5
 800822c:	bfbb      	ittet	lt
 800822e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008232:	461d      	movlt	r5, r3
 8008234:	2300      	movge	r3, #0
 8008236:	232d      	movlt	r3, #45	; 0x2d
 8008238:	700b      	strb	r3, [r1, #0]
 800823a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800823c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008240:	4691      	mov	r9, r2
 8008242:	f023 0820 	bic.w	r8, r3, #32
 8008246:	bfbc      	itt	lt
 8008248:	4622      	movlt	r2, r4
 800824a:	4614      	movlt	r4, r2
 800824c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008250:	d005      	beq.n	800825e <__cvt+0x42>
 8008252:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008256:	d100      	bne.n	800825a <__cvt+0x3e>
 8008258:	3601      	adds	r6, #1
 800825a:	2102      	movs	r1, #2
 800825c:	e000      	b.n	8008260 <__cvt+0x44>
 800825e:	2103      	movs	r1, #3
 8008260:	ab03      	add	r3, sp, #12
 8008262:	9301      	str	r3, [sp, #4]
 8008264:	ab02      	add	r3, sp, #8
 8008266:	9300      	str	r3, [sp, #0]
 8008268:	ec45 4b10 	vmov	d0, r4, r5
 800826c:	4653      	mov	r3, sl
 800826e:	4632      	mov	r2, r6
 8008270:	f000 fcea 	bl	8008c48 <_dtoa_r>
 8008274:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008278:	4607      	mov	r7, r0
 800827a:	d102      	bne.n	8008282 <__cvt+0x66>
 800827c:	f019 0f01 	tst.w	r9, #1
 8008280:	d022      	beq.n	80082c8 <__cvt+0xac>
 8008282:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008286:	eb07 0906 	add.w	r9, r7, r6
 800828a:	d110      	bne.n	80082ae <__cvt+0x92>
 800828c:	783b      	ldrb	r3, [r7, #0]
 800828e:	2b30      	cmp	r3, #48	; 0x30
 8008290:	d10a      	bne.n	80082a8 <__cvt+0x8c>
 8008292:	2200      	movs	r2, #0
 8008294:	2300      	movs	r3, #0
 8008296:	4620      	mov	r0, r4
 8008298:	4629      	mov	r1, r5
 800829a:	f7f8 fc1d 	bl	8000ad8 <__aeabi_dcmpeq>
 800829e:	b918      	cbnz	r0, 80082a8 <__cvt+0x8c>
 80082a0:	f1c6 0601 	rsb	r6, r6, #1
 80082a4:	f8ca 6000 	str.w	r6, [sl]
 80082a8:	f8da 3000 	ldr.w	r3, [sl]
 80082ac:	4499      	add	r9, r3
 80082ae:	2200      	movs	r2, #0
 80082b0:	2300      	movs	r3, #0
 80082b2:	4620      	mov	r0, r4
 80082b4:	4629      	mov	r1, r5
 80082b6:	f7f8 fc0f 	bl	8000ad8 <__aeabi_dcmpeq>
 80082ba:	b108      	cbz	r0, 80082c0 <__cvt+0xa4>
 80082bc:	f8cd 900c 	str.w	r9, [sp, #12]
 80082c0:	2230      	movs	r2, #48	; 0x30
 80082c2:	9b03      	ldr	r3, [sp, #12]
 80082c4:	454b      	cmp	r3, r9
 80082c6:	d307      	bcc.n	80082d8 <__cvt+0xbc>
 80082c8:	9b03      	ldr	r3, [sp, #12]
 80082ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082cc:	1bdb      	subs	r3, r3, r7
 80082ce:	4638      	mov	r0, r7
 80082d0:	6013      	str	r3, [r2, #0]
 80082d2:	b004      	add	sp, #16
 80082d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082d8:	1c59      	adds	r1, r3, #1
 80082da:	9103      	str	r1, [sp, #12]
 80082dc:	701a      	strb	r2, [r3, #0]
 80082de:	e7f0      	b.n	80082c2 <__cvt+0xa6>

080082e0 <__exponent>:
 80082e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082e2:	4603      	mov	r3, r0
 80082e4:	2900      	cmp	r1, #0
 80082e6:	bfb8      	it	lt
 80082e8:	4249      	neglt	r1, r1
 80082ea:	f803 2b02 	strb.w	r2, [r3], #2
 80082ee:	bfb4      	ite	lt
 80082f0:	222d      	movlt	r2, #45	; 0x2d
 80082f2:	222b      	movge	r2, #43	; 0x2b
 80082f4:	2909      	cmp	r1, #9
 80082f6:	7042      	strb	r2, [r0, #1]
 80082f8:	dd2a      	ble.n	8008350 <__exponent+0x70>
 80082fa:	f10d 0407 	add.w	r4, sp, #7
 80082fe:	46a4      	mov	ip, r4
 8008300:	270a      	movs	r7, #10
 8008302:	46a6      	mov	lr, r4
 8008304:	460a      	mov	r2, r1
 8008306:	fb91 f6f7 	sdiv	r6, r1, r7
 800830a:	fb07 1516 	mls	r5, r7, r6, r1
 800830e:	3530      	adds	r5, #48	; 0x30
 8008310:	2a63      	cmp	r2, #99	; 0x63
 8008312:	f104 34ff 	add.w	r4, r4, #4294967295
 8008316:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800831a:	4631      	mov	r1, r6
 800831c:	dcf1      	bgt.n	8008302 <__exponent+0x22>
 800831e:	3130      	adds	r1, #48	; 0x30
 8008320:	f1ae 0502 	sub.w	r5, lr, #2
 8008324:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008328:	1c44      	adds	r4, r0, #1
 800832a:	4629      	mov	r1, r5
 800832c:	4561      	cmp	r1, ip
 800832e:	d30a      	bcc.n	8008346 <__exponent+0x66>
 8008330:	f10d 0209 	add.w	r2, sp, #9
 8008334:	eba2 020e 	sub.w	r2, r2, lr
 8008338:	4565      	cmp	r5, ip
 800833a:	bf88      	it	hi
 800833c:	2200      	movhi	r2, #0
 800833e:	4413      	add	r3, r2
 8008340:	1a18      	subs	r0, r3, r0
 8008342:	b003      	add	sp, #12
 8008344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008346:	f811 2b01 	ldrb.w	r2, [r1], #1
 800834a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800834e:	e7ed      	b.n	800832c <__exponent+0x4c>
 8008350:	2330      	movs	r3, #48	; 0x30
 8008352:	3130      	adds	r1, #48	; 0x30
 8008354:	7083      	strb	r3, [r0, #2]
 8008356:	70c1      	strb	r1, [r0, #3]
 8008358:	1d03      	adds	r3, r0, #4
 800835a:	e7f1      	b.n	8008340 <__exponent+0x60>

0800835c <_printf_float>:
 800835c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008360:	ed2d 8b02 	vpush	{d8}
 8008364:	b08d      	sub	sp, #52	; 0x34
 8008366:	460c      	mov	r4, r1
 8008368:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800836c:	4616      	mov	r6, r2
 800836e:	461f      	mov	r7, r3
 8008370:	4605      	mov	r5, r0
 8008372:	f001 fa55 	bl	8009820 <_localeconv_r>
 8008376:	f8d0 a000 	ldr.w	sl, [r0]
 800837a:	4650      	mov	r0, sl
 800837c:	f7f7 ff30 	bl	80001e0 <strlen>
 8008380:	2300      	movs	r3, #0
 8008382:	930a      	str	r3, [sp, #40]	; 0x28
 8008384:	6823      	ldr	r3, [r4, #0]
 8008386:	9305      	str	r3, [sp, #20]
 8008388:	f8d8 3000 	ldr.w	r3, [r8]
 800838c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008390:	3307      	adds	r3, #7
 8008392:	f023 0307 	bic.w	r3, r3, #7
 8008396:	f103 0208 	add.w	r2, r3, #8
 800839a:	f8c8 2000 	str.w	r2, [r8]
 800839e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80083a6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80083aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80083ae:	9307      	str	r3, [sp, #28]
 80083b0:	f8cd 8018 	str.w	r8, [sp, #24]
 80083b4:	ee08 0a10 	vmov	s16, r0
 80083b8:	4b9f      	ldr	r3, [pc, #636]	; (8008638 <_printf_float+0x2dc>)
 80083ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083be:	f04f 32ff 	mov.w	r2, #4294967295
 80083c2:	f7f8 fbbb 	bl	8000b3c <__aeabi_dcmpun>
 80083c6:	bb88      	cbnz	r0, 800842c <_printf_float+0xd0>
 80083c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083cc:	4b9a      	ldr	r3, [pc, #616]	; (8008638 <_printf_float+0x2dc>)
 80083ce:	f04f 32ff 	mov.w	r2, #4294967295
 80083d2:	f7f8 fb95 	bl	8000b00 <__aeabi_dcmple>
 80083d6:	bb48      	cbnz	r0, 800842c <_printf_float+0xd0>
 80083d8:	2200      	movs	r2, #0
 80083da:	2300      	movs	r3, #0
 80083dc:	4640      	mov	r0, r8
 80083de:	4649      	mov	r1, r9
 80083e0:	f7f8 fb84 	bl	8000aec <__aeabi_dcmplt>
 80083e4:	b110      	cbz	r0, 80083ec <_printf_float+0x90>
 80083e6:	232d      	movs	r3, #45	; 0x2d
 80083e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083ec:	4b93      	ldr	r3, [pc, #588]	; (800863c <_printf_float+0x2e0>)
 80083ee:	4894      	ldr	r0, [pc, #592]	; (8008640 <_printf_float+0x2e4>)
 80083f0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80083f4:	bf94      	ite	ls
 80083f6:	4698      	movls	r8, r3
 80083f8:	4680      	movhi	r8, r0
 80083fa:	2303      	movs	r3, #3
 80083fc:	6123      	str	r3, [r4, #16]
 80083fe:	9b05      	ldr	r3, [sp, #20]
 8008400:	f023 0204 	bic.w	r2, r3, #4
 8008404:	6022      	str	r2, [r4, #0]
 8008406:	f04f 0900 	mov.w	r9, #0
 800840a:	9700      	str	r7, [sp, #0]
 800840c:	4633      	mov	r3, r6
 800840e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008410:	4621      	mov	r1, r4
 8008412:	4628      	mov	r0, r5
 8008414:	f000 f9d8 	bl	80087c8 <_printf_common>
 8008418:	3001      	adds	r0, #1
 800841a:	f040 8090 	bne.w	800853e <_printf_float+0x1e2>
 800841e:	f04f 30ff 	mov.w	r0, #4294967295
 8008422:	b00d      	add	sp, #52	; 0x34
 8008424:	ecbd 8b02 	vpop	{d8}
 8008428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800842c:	4642      	mov	r2, r8
 800842e:	464b      	mov	r3, r9
 8008430:	4640      	mov	r0, r8
 8008432:	4649      	mov	r1, r9
 8008434:	f7f8 fb82 	bl	8000b3c <__aeabi_dcmpun>
 8008438:	b140      	cbz	r0, 800844c <_printf_float+0xf0>
 800843a:	464b      	mov	r3, r9
 800843c:	2b00      	cmp	r3, #0
 800843e:	bfbc      	itt	lt
 8008440:	232d      	movlt	r3, #45	; 0x2d
 8008442:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008446:	487f      	ldr	r0, [pc, #508]	; (8008644 <_printf_float+0x2e8>)
 8008448:	4b7f      	ldr	r3, [pc, #508]	; (8008648 <_printf_float+0x2ec>)
 800844a:	e7d1      	b.n	80083f0 <_printf_float+0x94>
 800844c:	6863      	ldr	r3, [r4, #4]
 800844e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008452:	9206      	str	r2, [sp, #24]
 8008454:	1c5a      	adds	r2, r3, #1
 8008456:	d13f      	bne.n	80084d8 <_printf_float+0x17c>
 8008458:	2306      	movs	r3, #6
 800845a:	6063      	str	r3, [r4, #4]
 800845c:	9b05      	ldr	r3, [sp, #20]
 800845e:	6861      	ldr	r1, [r4, #4]
 8008460:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008464:	2300      	movs	r3, #0
 8008466:	9303      	str	r3, [sp, #12]
 8008468:	ab0a      	add	r3, sp, #40	; 0x28
 800846a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800846e:	ab09      	add	r3, sp, #36	; 0x24
 8008470:	ec49 8b10 	vmov	d0, r8, r9
 8008474:	9300      	str	r3, [sp, #0]
 8008476:	6022      	str	r2, [r4, #0]
 8008478:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800847c:	4628      	mov	r0, r5
 800847e:	f7ff fecd 	bl	800821c <__cvt>
 8008482:	9b06      	ldr	r3, [sp, #24]
 8008484:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008486:	2b47      	cmp	r3, #71	; 0x47
 8008488:	4680      	mov	r8, r0
 800848a:	d108      	bne.n	800849e <_printf_float+0x142>
 800848c:	1cc8      	adds	r0, r1, #3
 800848e:	db02      	blt.n	8008496 <_printf_float+0x13a>
 8008490:	6863      	ldr	r3, [r4, #4]
 8008492:	4299      	cmp	r1, r3
 8008494:	dd41      	ble.n	800851a <_printf_float+0x1be>
 8008496:	f1ab 0b02 	sub.w	fp, fp, #2
 800849a:	fa5f fb8b 	uxtb.w	fp, fp
 800849e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80084a2:	d820      	bhi.n	80084e6 <_printf_float+0x18a>
 80084a4:	3901      	subs	r1, #1
 80084a6:	465a      	mov	r2, fp
 80084a8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80084ac:	9109      	str	r1, [sp, #36]	; 0x24
 80084ae:	f7ff ff17 	bl	80082e0 <__exponent>
 80084b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084b4:	1813      	adds	r3, r2, r0
 80084b6:	2a01      	cmp	r2, #1
 80084b8:	4681      	mov	r9, r0
 80084ba:	6123      	str	r3, [r4, #16]
 80084bc:	dc02      	bgt.n	80084c4 <_printf_float+0x168>
 80084be:	6822      	ldr	r2, [r4, #0]
 80084c0:	07d2      	lsls	r2, r2, #31
 80084c2:	d501      	bpl.n	80084c8 <_printf_float+0x16c>
 80084c4:	3301      	adds	r3, #1
 80084c6:	6123      	str	r3, [r4, #16]
 80084c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d09c      	beq.n	800840a <_printf_float+0xae>
 80084d0:	232d      	movs	r3, #45	; 0x2d
 80084d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084d6:	e798      	b.n	800840a <_printf_float+0xae>
 80084d8:	9a06      	ldr	r2, [sp, #24]
 80084da:	2a47      	cmp	r2, #71	; 0x47
 80084dc:	d1be      	bne.n	800845c <_printf_float+0x100>
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d1bc      	bne.n	800845c <_printf_float+0x100>
 80084e2:	2301      	movs	r3, #1
 80084e4:	e7b9      	b.n	800845a <_printf_float+0xfe>
 80084e6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80084ea:	d118      	bne.n	800851e <_printf_float+0x1c2>
 80084ec:	2900      	cmp	r1, #0
 80084ee:	6863      	ldr	r3, [r4, #4]
 80084f0:	dd0b      	ble.n	800850a <_printf_float+0x1ae>
 80084f2:	6121      	str	r1, [r4, #16]
 80084f4:	b913      	cbnz	r3, 80084fc <_printf_float+0x1a0>
 80084f6:	6822      	ldr	r2, [r4, #0]
 80084f8:	07d0      	lsls	r0, r2, #31
 80084fa:	d502      	bpl.n	8008502 <_printf_float+0x1a6>
 80084fc:	3301      	adds	r3, #1
 80084fe:	440b      	add	r3, r1
 8008500:	6123      	str	r3, [r4, #16]
 8008502:	65a1      	str	r1, [r4, #88]	; 0x58
 8008504:	f04f 0900 	mov.w	r9, #0
 8008508:	e7de      	b.n	80084c8 <_printf_float+0x16c>
 800850a:	b913      	cbnz	r3, 8008512 <_printf_float+0x1b6>
 800850c:	6822      	ldr	r2, [r4, #0]
 800850e:	07d2      	lsls	r2, r2, #31
 8008510:	d501      	bpl.n	8008516 <_printf_float+0x1ba>
 8008512:	3302      	adds	r3, #2
 8008514:	e7f4      	b.n	8008500 <_printf_float+0x1a4>
 8008516:	2301      	movs	r3, #1
 8008518:	e7f2      	b.n	8008500 <_printf_float+0x1a4>
 800851a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800851e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008520:	4299      	cmp	r1, r3
 8008522:	db05      	blt.n	8008530 <_printf_float+0x1d4>
 8008524:	6823      	ldr	r3, [r4, #0]
 8008526:	6121      	str	r1, [r4, #16]
 8008528:	07d8      	lsls	r0, r3, #31
 800852a:	d5ea      	bpl.n	8008502 <_printf_float+0x1a6>
 800852c:	1c4b      	adds	r3, r1, #1
 800852e:	e7e7      	b.n	8008500 <_printf_float+0x1a4>
 8008530:	2900      	cmp	r1, #0
 8008532:	bfd4      	ite	le
 8008534:	f1c1 0202 	rsble	r2, r1, #2
 8008538:	2201      	movgt	r2, #1
 800853a:	4413      	add	r3, r2
 800853c:	e7e0      	b.n	8008500 <_printf_float+0x1a4>
 800853e:	6823      	ldr	r3, [r4, #0]
 8008540:	055a      	lsls	r2, r3, #21
 8008542:	d407      	bmi.n	8008554 <_printf_float+0x1f8>
 8008544:	6923      	ldr	r3, [r4, #16]
 8008546:	4642      	mov	r2, r8
 8008548:	4631      	mov	r1, r6
 800854a:	4628      	mov	r0, r5
 800854c:	47b8      	blx	r7
 800854e:	3001      	adds	r0, #1
 8008550:	d12c      	bne.n	80085ac <_printf_float+0x250>
 8008552:	e764      	b.n	800841e <_printf_float+0xc2>
 8008554:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008558:	f240 80e0 	bls.w	800871c <_printf_float+0x3c0>
 800855c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008560:	2200      	movs	r2, #0
 8008562:	2300      	movs	r3, #0
 8008564:	f7f8 fab8 	bl	8000ad8 <__aeabi_dcmpeq>
 8008568:	2800      	cmp	r0, #0
 800856a:	d034      	beq.n	80085d6 <_printf_float+0x27a>
 800856c:	4a37      	ldr	r2, [pc, #220]	; (800864c <_printf_float+0x2f0>)
 800856e:	2301      	movs	r3, #1
 8008570:	4631      	mov	r1, r6
 8008572:	4628      	mov	r0, r5
 8008574:	47b8      	blx	r7
 8008576:	3001      	adds	r0, #1
 8008578:	f43f af51 	beq.w	800841e <_printf_float+0xc2>
 800857c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008580:	429a      	cmp	r2, r3
 8008582:	db02      	blt.n	800858a <_printf_float+0x22e>
 8008584:	6823      	ldr	r3, [r4, #0]
 8008586:	07d8      	lsls	r0, r3, #31
 8008588:	d510      	bpl.n	80085ac <_printf_float+0x250>
 800858a:	ee18 3a10 	vmov	r3, s16
 800858e:	4652      	mov	r2, sl
 8008590:	4631      	mov	r1, r6
 8008592:	4628      	mov	r0, r5
 8008594:	47b8      	blx	r7
 8008596:	3001      	adds	r0, #1
 8008598:	f43f af41 	beq.w	800841e <_printf_float+0xc2>
 800859c:	f04f 0800 	mov.w	r8, #0
 80085a0:	f104 091a 	add.w	r9, r4, #26
 80085a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085a6:	3b01      	subs	r3, #1
 80085a8:	4543      	cmp	r3, r8
 80085aa:	dc09      	bgt.n	80085c0 <_printf_float+0x264>
 80085ac:	6823      	ldr	r3, [r4, #0]
 80085ae:	079b      	lsls	r3, r3, #30
 80085b0:	f100 8105 	bmi.w	80087be <_printf_float+0x462>
 80085b4:	68e0      	ldr	r0, [r4, #12]
 80085b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085b8:	4298      	cmp	r0, r3
 80085ba:	bfb8      	it	lt
 80085bc:	4618      	movlt	r0, r3
 80085be:	e730      	b.n	8008422 <_printf_float+0xc6>
 80085c0:	2301      	movs	r3, #1
 80085c2:	464a      	mov	r2, r9
 80085c4:	4631      	mov	r1, r6
 80085c6:	4628      	mov	r0, r5
 80085c8:	47b8      	blx	r7
 80085ca:	3001      	adds	r0, #1
 80085cc:	f43f af27 	beq.w	800841e <_printf_float+0xc2>
 80085d0:	f108 0801 	add.w	r8, r8, #1
 80085d4:	e7e6      	b.n	80085a4 <_printf_float+0x248>
 80085d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085d8:	2b00      	cmp	r3, #0
 80085da:	dc39      	bgt.n	8008650 <_printf_float+0x2f4>
 80085dc:	4a1b      	ldr	r2, [pc, #108]	; (800864c <_printf_float+0x2f0>)
 80085de:	2301      	movs	r3, #1
 80085e0:	4631      	mov	r1, r6
 80085e2:	4628      	mov	r0, r5
 80085e4:	47b8      	blx	r7
 80085e6:	3001      	adds	r0, #1
 80085e8:	f43f af19 	beq.w	800841e <_printf_float+0xc2>
 80085ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085f0:	4313      	orrs	r3, r2
 80085f2:	d102      	bne.n	80085fa <_printf_float+0x29e>
 80085f4:	6823      	ldr	r3, [r4, #0]
 80085f6:	07d9      	lsls	r1, r3, #31
 80085f8:	d5d8      	bpl.n	80085ac <_printf_float+0x250>
 80085fa:	ee18 3a10 	vmov	r3, s16
 80085fe:	4652      	mov	r2, sl
 8008600:	4631      	mov	r1, r6
 8008602:	4628      	mov	r0, r5
 8008604:	47b8      	blx	r7
 8008606:	3001      	adds	r0, #1
 8008608:	f43f af09 	beq.w	800841e <_printf_float+0xc2>
 800860c:	f04f 0900 	mov.w	r9, #0
 8008610:	f104 0a1a 	add.w	sl, r4, #26
 8008614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008616:	425b      	negs	r3, r3
 8008618:	454b      	cmp	r3, r9
 800861a:	dc01      	bgt.n	8008620 <_printf_float+0x2c4>
 800861c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800861e:	e792      	b.n	8008546 <_printf_float+0x1ea>
 8008620:	2301      	movs	r3, #1
 8008622:	4652      	mov	r2, sl
 8008624:	4631      	mov	r1, r6
 8008626:	4628      	mov	r0, r5
 8008628:	47b8      	blx	r7
 800862a:	3001      	adds	r0, #1
 800862c:	f43f aef7 	beq.w	800841e <_printf_float+0xc2>
 8008630:	f109 0901 	add.w	r9, r9, #1
 8008634:	e7ee      	b.n	8008614 <_printf_float+0x2b8>
 8008636:	bf00      	nop
 8008638:	7fefffff 	.word	0x7fefffff
 800863c:	0800b4ac 	.word	0x0800b4ac
 8008640:	0800b4b0 	.word	0x0800b4b0
 8008644:	0800b4b8 	.word	0x0800b4b8
 8008648:	0800b4b4 	.word	0x0800b4b4
 800864c:	0800b4bc 	.word	0x0800b4bc
 8008650:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008652:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008654:	429a      	cmp	r2, r3
 8008656:	bfa8      	it	ge
 8008658:	461a      	movge	r2, r3
 800865a:	2a00      	cmp	r2, #0
 800865c:	4691      	mov	r9, r2
 800865e:	dc37      	bgt.n	80086d0 <_printf_float+0x374>
 8008660:	f04f 0b00 	mov.w	fp, #0
 8008664:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008668:	f104 021a 	add.w	r2, r4, #26
 800866c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800866e:	9305      	str	r3, [sp, #20]
 8008670:	eba3 0309 	sub.w	r3, r3, r9
 8008674:	455b      	cmp	r3, fp
 8008676:	dc33      	bgt.n	80086e0 <_printf_float+0x384>
 8008678:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800867c:	429a      	cmp	r2, r3
 800867e:	db3b      	blt.n	80086f8 <_printf_float+0x39c>
 8008680:	6823      	ldr	r3, [r4, #0]
 8008682:	07da      	lsls	r2, r3, #31
 8008684:	d438      	bmi.n	80086f8 <_printf_float+0x39c>
 8008686:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008688:	9b05      	ldr	r3, [sp, #20]
 800868a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800868c:	1ad3      	subs	r3, r2, r3
 800868e:	eba2 0901 	sub.w	r9, r2, r1
 8008692:	4599      	cmp	r9, r3
 8008694:	bfa8      	it	ge
 8008696:	4699      	movge	r9, r3
 8008698:	f1b9 0f00 	cmp.w	r9, #0
 800869c:	dc35      	bgt.n	800870a <_printf_float+0x3ae>
 800869e:	f04f 0800 	mov.w	r8, #0
 80086a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80086a6:	f104 0a1a 	add.w	sl, r4, #26
 80086aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086ae:	1a9b      	subs	r3, r3, r2
 80086b0:	eba3 0309 	sub.w	r3, r3, r9
 80086b4:	4543      	cmp	r3, r8
 80086b6:	f77f af79 	ble.w	80085ac <_printf_float+0x250>
 80086ba:	2301      	movs	r3, #1
 80086bc:	4652      	mov	r2, sl
 80086be:	4631      	mov	r1, r6
 80086c0:	4628      	mov	r0, r5
 80086c2:	47b8      	blx	r7
 80086c4:	3001      	adds	r0, #1
 80086c6:	f43f aeaa 	beq.w	800841e <_printf_float+0xc2>
 80086ca:	f108 0801 	add.w	r8, r8, #1
 80086ce:	e7ec      	b.n	80086aa <_printf_float+0x34e>
 80086d0:	4613      	mov	r3, r2
 80086d2:	4631      	mov	r1, r6
 80086d4:	4642      	mov	r2, r8
 80086d6:	4628      	mov	r0, r5
 80086d8:	47b8      	blx	r7
 80086da:	3001      	adds	r0, #1
 80086dc:	d1c0      	bne.n	8008660 <_printf_float+0x304>
 80086de:	e69e      	b.n	800841e <_printf_float+0xc2>
 80086e0:	2301      	movs	r3, #1
 80086e2:	4631      	mov	r1, r6
 80086e4:	4628      	mov	r0, r5
 80086e6:	9205      	str	r2, [sp, #20]
 80086e8:	47b8      	blx	r7
 80086ea:	3001      	adds	r0, #1
 80086ec:	f43f ae97 	beq.w	800841e <_printf_float+0xc2>
 80086f0:	9a05      	ldr	r2, [sp, #20]
 80086f2:	f10b 0b01 	add.w	fp, fp, #1
 80086f6:	e7b9      	b.n	800866c <_printf_float+0x310>
 80086f8:	ee18 3a10 	vmov	r3, s16
 80086fc:	4652      	mov	r2, sl
 80086fe:	4631      	mov	r1, r6
 8008700:	4628      	mov	r0, r5
 8008702:	47b8      	blx	r7
 8008704:	3001      	adds	r0, #1
 8008706:	d1be      	bne.n	8008686 <_printf_float+0x32a>
 8008708:	e689      	b.n	800841e <_printf_float+0xc2>
 800870a:	9a05      	ldr	r2, [sp, #20]
 800870c:	464b      	mov	r3, r9
 800870e:	4442      	add	r2, r8
 8008710:	4631      	mov	r1, r6
 8008712:	4628      	mov	r0, r5
 8008714:	47b8      	blx	r7
 8008716:	3001      	adds	r0, #1
 8008718:	d1c1      	bne.n	800869e <_printf_float+0x342>
 800871a:	e680      	b.n	800841e <_printf_float+0xc2>
 800871c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800871e:	2a01      	cmp	r2, #1
 8008720:	dc01      	bgt.n	8008726 <_printf_float+0x3ca>
 8008722:	07db      	lsls	r3, r3, #31
 8008724:	d538      	bpl.n	8008798 <_printf_float+0x43c>
 8008726:	2301      	movs	r3, #1
 8008728:	4642      	mov	r2, r8
 800872a:	4631      	mov	r1, r6
 800872c:	4628      	mov	r0, r5
 800872e:	47b8      	blx	r7
 8008730:	3001      	adds	r0, #1
 8008732:	f43f ae74 	beq.w	800841e <_printf_float+0xc2>
 8008736:	ee18 3a10 	vmov	r3, s16
 800873a:	4652      	mov	r2, sl
 800873c:	4631      	mov	r1, r6
 800873e:	4628      	mov	r0, r5
 8008740:	47b8      	blx	r7
 8008742:	3001      	adds	r0, #1
 8008744:	f43f ae6b 	beq.w	800841e <_printf_float+0xc2>
 8008748:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800874c:	2200      	movs	r2, #0
 800874e:	2300      	movs	r3, #0
 8008750:	f7f8 f9c2 	bl	8000ad8 <__aeabi_dcmpeq>
 8008754:	b9d8      	cbnz	r0, 800878e <_printf_float+0x432>
 8008756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008758:	f108 0201 	add.w	r2, r8, #1
 800875c:	3b01      	subs	r3, #1
 800875e:	4631      	mov	r1, r6
 8008760:	4628      	mov	r0, r5
 8008762:	47b8      	blx	r7
 8008764:	3001      	adds	r0, #1
 8008766:	d10e      	bne.n	8008786 <_printf_float+0x42a>
 8008768:	e659      	b.n	800841e <_printf_float+0xc2>
 800876a:	2301      	movs	r3, #1
 800876c:	4652      	mov	r2, sl
 800876e:	4631      	mov	r1, r6
 8008770:	4628      	mov	r0, r5
 8008772:	47b8      	blx	r7
 8008774:	3001      	adds	r0, #1
 8008776:	f43f ae52 	beq.w	800841e <_printf_float+0xc2>
 800877a:	f108 0801 	add.w	r8, r8, #1
 800877e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008780:	3b01      	subs	r3, #1
 8008782:	4543      	cmp	r3, r8
 8008784:	dcf1      	bgt.n	800876a <_printf_float+0x40e>
 8008786:	464b      	mov	r3, r9
 8008788:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800878c:	e6dc      	b.n	8008548 <_printf_float+0x1ec>
 800878e:	f04f 0800 	mov.w	r8, #0
 8008792:	f104 0a1a 	add.w	sl, r4, #26
 8008796:	e7f2      	b.n	800877e <_printf_float+0x422>
 8008798:	2301      	movs	r3, #1
 800879a:	4642      	mov	r2, r8
 800879c:	e7df      	b.n	800875e <_printf_float+0x402>
 800879e:	2301      	movs	r3, #1
 80087a0:	464a      	mov	r2, r9
 80087a2:	4631      	mov	r1, r6
 80087a4:	4628      	mov	r0, r5
 80087a6:	47b8      	blx	r7
 80087a8:	3001      	adds	r0, #1
 80087aa:	f43f ae38 	beq.w	800841e <_printf_float+0xc2>
 80087ae:	f108 0801 	add.w	r8, r8, #1
 80087b2:	68e3      	ldr	r3, [r4, #12]
 80087b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80087b6:	1a5b      	subs	r3, r3, r1
 80087b8:	4543      	cmp	r3, r8
 80087ba:	dcf0      	bgt.n	800879e <_printf_float+0x442>
 80087bc:	e6fa      	b.n	80085b4 <_printf_float+0x258>
 80087be:	f04f 0800 	mov.w	r8, #0
 80087c2:	f104 0919 	add.w	r9, r4, #25
 80087c6:	e7f4      	b.n	80087b2 <_printf_float+0x456>

080087c8 <_printf_common>:
 80087c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087cc:	4616      	mov	r6, r2
 80087ce:	4699      	mov	r9, r3
 80087d0:	688a      	ldr	r2, [r1, #8]
 80087d2:	690b      	ldr	r3, [r1, #16]
 80087d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80087d8:	4293      	cmp	r3, r2
 80087da:	bfb8      	it	lt
 80087dc:	4613      	movlt	r3, r2
 80087de:	6033      	str	r3, [r6, #0]
 80087e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80087e4:	4607      	mov	r7, r0
 80087e6:	460c      	mov	r4, r1
 80087e8:	b10a      	cbz	r2, 80087ee <_printf_common+0x26>
 80087ea:	3301      	adds	r3, #1
 80087ec:	6033      	str	r3, [r6, #0]
 80087ee:	6823      	ldr	r3, [r4, #0]
 80087f0:	0699      	lsls	r1, r3, #26
 80087f2:	bf42      	ittt	mi
 80087f4:	6833      	ldrmi	r3, [r6, #0]
 80087f6:	3302      	addmi	r3, #2
 80087f8:	6033      	strmi	r3, [r6, #0]
 80087fa:	6825      	ldr	r5, [r4, #0]
 80087fc:	f015 0506 	ands.w	r5, r5, #6
 8008800:	d106      	bne.n	8008810 <_printf_common+0x48>
 8008802:	f104 0a19 	add.w	sl, r4, #25
 8008806:	68e3      	ldr	r3, [r4, #12]
 8008808:	6832      	ldr	r2, [r6, #0]
 800880a:	1a9b      	subs	r3, r3, r2
 800880c:	42ab      	cmp	r3, r5
 800880e:	dc26      	bgt.n	800885e <_printf_common+0x96>
 8008810:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008814:	1e13      	subs	r3, r2, #0
 8008816:	6822      	ldr	r2, [r4, #0]
 8008818:	bf18      	it	ne
 800881a:	2301      	movne	r3, #1
 800881c:	0692      	lsls	r2, r2, #26
 800881e:	d42b      	bmi.n	8008878 <_printf_common+0xb0>
 8008820:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008824:	4649      	mov	r1, r9
 8008826:	4638      	mov	r0, r7
 8008828:	47c0      	blx	r8
 800882a:	3001      	adds	r0, #1
 800882c:	d01e      	beq.n	800886c <_printf_common+0xa4>
 800882e:	6823      	ldr	r3, [r4, #0]
 8008830:	68e5      	ldr	r5, [r4, #12]
 8008832:	6832      	ldr	r2, [r6, #0]
 8008834:	f003 0306 	and.w	r3, r3, #6
 8008838:	2b04      	cmp	r3, #4
 800883a:	bf08      	it	eq
 800883c:	1aad      	subeq	r5, r5, r2
 800883e:	68a3      	ldr	r3, [r4, #8]
 8008840:	6922      	ldr	r2, [r4, #16]
 8008842:	bf0c      	ite	eq
 8008844:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008848:	2500      	movne	r5, #0
 800884a:	4293      	cmp	r3, r2
 800884c:	bfc4      	itt	gt
 800884e:	1a9b      	subgt	r3, r3, r2
 8008850:	18ed      	addgt	r5, r5, r3
 8008852:	2600      	movs	r6, #0
 8008854:	341a      	adds	r4, #26
 8008856:	42b5      	cmp	r5, r6
 8008858:	d11a      	bne.n	8008890 <_printf_common+0xc8>
 800885a:	2000      	movs	r0, #0
 800885c:	e008      	b.n	8008870 <_printf_common+0xa8>
 800885e:	2301      	movs	r3, #1
 8008860:	4652      	mov	r2, sl
 8008862:	4649      	mov	r1, r9
 8008864:	4638      	mov	r0, r7
 8008866:	47c0      	blx	r8
 8008868:	3001      	adds	r0, #1
 800886a:	d103      	bne.n	8008874 <_printf_common+0xac>
 800886c:	f04f 30ff 	mov.w	r0, #4294967295
 8008870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008874:	3501      	adds	r5, #1
 8008876:	e7c6      	b.n	8008806 <_printf_common+0x3e>
 8008878:	18e1      	adds	r1, r4, r3
 800887a:	1c5a      	adds	r2, r3, #1
 800887c:	2030      	movs	r0, #48	; 0x30
 800887e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008882:	4422      	add	r2, r4
 8008884:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008888:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800888c:	3302      	adds	r3, #2
 800888e:	e7c7      	b.n	8008820 <_printf_common+0x58>
 8008890:	2301      	movs	r3, #1
 8008892:	4622      	mov	r2, r4
 8008894:	4649      	mov	r1, r9
 8008896:	4638      	mov	r0, r7
 8008898:	47c0      	blx	r8
 800889a:	3001      	adds	r0, #1
 800889c:	d0e6      	beq.n	800886c <_printf_common+0xa4>
 800889e:	3601      	adds	r6, #1
 80088a0:	e7d9      	b.n	8008856 <_printf_common+0x8e>
	...

080088a4 <_printf_i>:
 80088a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088a8:	460c      	mov	r4, r1
 80088aa:	4691      	mov	r9, r2
 80088ac:	7e27      	ldrb	r7, [r4, #24]
 80088ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 80088b0:	2f78      	cmp	r7, #120	; 0x78
 80088b2:	4680      	mov	r8, r0
 80088b4:	469a      	mov	sl, r3
 80088b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80088ba:	d807      	bhi.n	80088cc <_printf_i+0x28>
 80088bc:	2f62      	cmp	r7, #98	; 0x62
 80088be:	d80a      	bhi.n	80088d6 <_printf_i+0x32>
 80088c0:	2f00      	cmp	r7, #0
 80088c2:	f000 80d8 	beq.w	8008a76 <_printf_i+0x1d2>
 80088c6:	2f58      	cmp	r7, #88	; 0x58
 80088c8:	f000 80a3 	beq.w	8008a12 <_printf_i+0x16e>
 80088cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80088d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80088d4:	e03a      	b.n	800894c <_printf_i+0xa8>
 80088d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80088da:	2b15      	cmp	r3, #21
 80088dc:	d8f6      	bhi.n	80088cc <_printf_i+0x28>
 80088de:	a001      	add	r0, pc, #4	; (adr r0, 80088e4 <_printf_i+0x40>)
 80088e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80088e4:	0800893d 	.word	0x0800893d
 80088e8:	08008951 	.word	0x08008951
 80088ec:	080088cd 	.word	0x080088cd
 80088f0:	080088cd 	.word	0x080088cd
 80088f4:	080088cd 	.word	0x080088cd
 80088f8:	080088cd 	.word	0x080088cd
 80088fc:	08008951 	.word	0x08008951
 8008900:	080088cd 	.word	0x080088cd
 8008904:	080088cd 	.word	0x080088cd
 8008908:	080088cd 	.word	0x080088cd
 800890c:	080088cd 	.word	0x080088cd
 8008910:	08008a5d 	.word	0x08008a5d
 8008914:	08008981 	.word	0x08008981
 8008918:	08008a3f 	.word	0x08008a3f
 800891c:	080088cd 	.word	0x080088cd
 8008920:	080088cd 	.word	0x080088cd
 8008924:	08008a7f 	.word	0x08008a7f
 8008928:	080088cd 	.word	0x080088cd
 800892c:	08008981 	.word	0x08008981
 8008930:	080088cd 	.word	0x080088cd
 8008934:	080088cd 	.word	0x080088cd
 8008938:	08008a47 	.word	0x08008a47
 800893c:	680b      	ldr	r3, [r1, #0]
 800893e:	1d1a      	adds	r2, r3, #4
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	600a      	str	r2, [r1, #0]
 8008944:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008948:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800894c:	2301      	movs	r3, #1
 800894e:	e0a3      	b.n	8008a98 <_printf_i+0x1f4>
 8008950:	6825      	ldr	r5, [r4, #0]
 8008952:	6808      	ldr	r0, [r1, #0]
 8008954:	062e      	lsls	r6, r5, #24
 8008956:	f100 0304 	add.w	r3, r0, #4
 800895a:	d50a      	bpl.n	8008972 <_printf_i+0xce>
 800895c:	6805      	ldr	r5, [r0, #0]
 800895e:	600b      	str	r3, [r1, #0]
 8008960:	2d00      	cmp	r5, #0
 8008962:	da03      	bge.n	800896c <_printf_i+0xc8>
 8008964:	232d      	movs	r3, #45	; 0x2d
 8008966:	426d      	negs	r5, r5
 8008968:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800896c:	485e      	ldr	r0, [pc, #376]	; (8008ae8 <_printf_i+0x244>)
 800896e:	230a      	movs	r3, #10
 8008970:	e019      	b.n	80089a6 <_printf_i+0x102>
 8008972:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008976:	6805      	ldr	r5, [r0, #0]
 8008978:	600b      	str	r3, [r1, #0]
 800897a:	bf18      	it	ne
 800897c:	b22d      	sxthne	r5, r5
 800897e:	e7ef      	b.n	8008960 <_printf_i+0xbc>
 8008980:	680b      	ldr	r3, [r1, #0]
 8008982:	6825      	ldr	r5, [r4, #0]
 8008984:	1d18      	adds	r0, r3, #4
 8008986:	6008      	str	r0, [r1, #0]
 8008988:	0628      	lsls	r0, r5, #24
 800898a:	d501      	bpl.n	8008990 <_printf_i+0xec>
 800898c:	681d      	ldr	r5, [r3, #0]
 800898e:	e002      	b.n	8008996 <_printf_i+0xf2>
 8008990:	0669      	lsls	r1, r5, #25
 8008992:	d5fb      	bpl.n	800898c <_printf_i+0xe8>
 8008994:	881d      	ldrh	r5, [r3, #0]
 8008996:	4854      	ldr	r0, [pc, #336]	; (8008ae8 <_printf_i+0x244>)
 8008998:	2f6f      	cmp	r7, #111	; 0x6f
 800899a:	bf0c      	ite	eq
 800899c:	2308      	moveq	r3, #8
 800899e:	230a      	movne	r3, #10
 80089a0:	2100      	movs	r1, #0
 80089a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80089a6:	6866      	ldr	r6, [r4, #4]
 80089a8:	60a6      	str	r6, [r4, #8]
 80089aa:	2e00      	cmp	r6, #0
 80089ac:	bfa2      	ittt	ge
 80089ae:	6821      	ldrge	r1, [r4, #0]
 80089b0:	f021 0104 	bicge.w	r1, r1, #4
 80089b4:	6021      	strge	r1, [r4, #0]
 80089b6:	b90d      	cbnz	r5, 80089bc <_printf_i+0x118>
 80089b8:	2e00      	cmp	r6, #0
 80089ba:	d04d      	beq.n	8008a58 <_printf_i+0x1b4>
 80089bc:	4616      	mov	r6, r2
 80089be:	fbb5 f1f3 	udiv	r1, r5, r3
 80089c2:	fb03 5711 	mls	r7, r3, r1, r5
 80089c6:	5dc7      	ldrb	r7, [r0, r7]
 80089c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80089cc:	462f      	mov	r7, r5
 80089ce:	42bb      	cmp	r3, r7
 80089d0:	460d      	mov	r5, r1
 80089d2:	d9f4      	bls.n	80089be <_printf_i+0x11a>
 80089d4:	2b08      	cmp	r3, #8
 80089d6:	d10b      	bne.n	80089f0 <_printf_i+0x14c>
 80089d8:	6823      	ldr	r3, [r4, #0]
 80089da:	07df      	lsls	r7, r3, #31
 80089dc:	d508      	bpl.n	80089f0 <_printf_i+0x14c>
 80089de:	6923      	ldr	r3, [r4, #16]
 80089e0:	6861      	ldr	r1, [r4, #4]
 80089e2:	4299      	cmp	r1, r3
 80089e4:	bfde      	ittt	le
 80089e6:	2330      	movle	r3, #48	; 0x30
 80089e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80089ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80089f0:	1b92      	subs	r2, r2, r6
 80089f2:	6122      	str	r2, [r4, #16]
 80089f4:	f8cd a000 	str.w	sl, [sp]
 80089f8:	464b      	mov	r3, r9
 80089fa:	aa03      	add	r2, sp, #12
 80089fc:	4621      	mov	r1, r4
 80089fe:	4640      	mov	r0, r8
 8008a00:	f7ff fee2 	bl	80087c8 <_printf_common>
 8008a04:	3001      	adds	r0, #1
 8008a06:	d14c      	bne.n	8008aa2 <_printf_i+0x1fe>
 8008a08:	f04f 30ff 	mov.w	r0, #4294967295
 8008a0c:	b004      	add	sp, #16
 8008a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a12:	4835      	ldr	r0, [pc, #212]	; (8008ae8 <_printf_i+0x244>)
 8008a14:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008a18:	6823      	ldr	r3, [r4, #0]
 8008a1a:	680e      	ldr	r6, [r1, #0]
 8008a1c:	061f      	lsls	r7, r3, #24
 8008a1e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008a22:	600e      	str	r6, [r1, #0]
 8008a24:	d514      	bpl.n	8008a50 <_printf_i+0x1ac>
 8008a26:	07d9      	lsls	r1, r3, #31
 8008a28:	bf44      	itt	mi
 8008a2a:	f043 0320 	orrmi.w	r3, r3, #32
 8008a2e:	6023      	strmi	r3, [r4, #0]
 8008a30:	b91d      	cbnz	r5, 8008a3a <_printf_i+0x196>
 8008a32:	6823      	ldr	r3, [r4, #0]
 8008a34:	f023 0320 	bic.w	r3, r3, #32
 8008a38:	6023      	str	r3, [r4, #0]
 8008a3a:	2310      	movs	r3, #16
 8008a3c:	e7b0      	b.n	80089a0 <_printf_i+0xfc>
 8008a3e:	6823      	ldr	r3, [r4, #0]
 8008a40:	f043 0320 	orr.w	r3, r3, #32
 8008a44:	6023      	str	r3, [r4, #0]
 8008a46:	2378      	movs	r3, #120	; 0x78
 8008a48:	4828      	ldr	r0, [pc, #160]	; (8008aec <_printf_i+0x248>)
 8008a4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a4e:	e7e3      	b.n	8008a18 <_printf_i+0x174>
 8008a50:	065e      	lsls	r6, r3, #25
 8008a52:	bf48      	it	mi
 8008a54:	b2ad      	uxthmi	r5, r5
 8008a56:	e7e6      	b.n	8008a26 <_printf_i+0x182>
 8008a58:	4616      	mov	r6, r2
 8008a5a:	e7bb      	b.n	80089d4 <_printf_i+0x130>
 8008a5c:	680b      	ldr	r3, [r1, #0]
 8008a5e:	6826      	ldr	r6, [r4, #0]
 8008a60:	6960      	ldr	r0, [r4, #20]
 8008a62:	1d1d      	adds	r5, r3, #4
 8008a64:	600d      	str	r5, [r1, #0]
 8008a66:	0635      	lsls	r5, r6, #24
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	d501      	bpl.n	8008a70 <_printf_i+0x1cc>
 8008a6c:	6018      	str	r0, [r3, #0]
 8008a6e:	e002      	b.n	8008a76 <_printf_i+0x1d2>
 8008a70:	0671      	lsls	r1, r6, #25
 8008a72:	d5fb      	bpl.n	8008a6c <_printf_i+0x1c8>
 8008a74:	8018      	strh	r0, [r3, #0]
 8008a76:	2300      	movs	r3, #0
 8008a78:	6123      	str	r3, [r4, #16]
 8008a7a:	4616      	mov	r6, r2
 8008a7c:	e7ba      	b.n	80089f4 <_printf_i+0x150>
 8008a7e:	680b      	ldr	r3, [r1, #0]
 8008a80:	1d1a      	adds	r2, r3, #4
 8008a82:	600a      	str	r2, [r1, #0]
 8008a84:	681e      	ldr	r6, [r3, #0]
 8008a86:	6862      	ldr	r2, [r4, #4]
 8008a88:	2100      	movs	r1, #0
 8008a8a:	4630      	mov	r0, r6
 8008a8c:	f7f7 fbb0 	bl	80001f0 <memchr>
 8008a90:	b108      	cbz	r0, 8008a96 <_printf_i+0x1f2>
 8008a92:	1b80      	subs	r0, r0, r6
 8008a94:	6060      	str	r0, [r4, #4]
 8008a96:	6863      	ldr	r3, [r4, #4]
 8008a98:	6123      	str	r3, [r4, #16]
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008aa0:	e7a8      	b.n	80089f4 <_printf_i+0x150>
 8008aa2:	6923      	ldr	r3, [r4, #16]
 8008aa4:	4632      	mov	r2, r6
 8008aa6:	4649      	mov	r1, r9
 8008aa8:	4640      	mov	r0, r8
 8008aaa:	47d0      	blx	sl
 8008aac:	3001      	adds	r0, #1
 8008aae:	d0ab      	beq.n	8008a08 <_printf_i+0x164>
 8008ab0:	6823      	ldr	r3, [r4, #0]
 8008ab2:	079b      	lsls	r3, r3, #30
 8008ab4:	d413      	bmi.n	8008ade <_printf_i+0x23a>
 8008ab6:	68e0      	ldr	r0, [r4, #12]
 8008ab8:	9b03      	ldr	r3, [sp, #12]
 8008aba:	4298      	cmp	r0, r3
 8008abc:	bfb8      	it	lt
 8008abe:	4618      	movlt	r0, r3
 8008ac0:	e7a4      	b.n	8008a0c <_printf_i+0x168>
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	4632      	mov	r2, r6
 8008ac6:	4649      	mov	r1, r9
 8008ac8:	4640      	mov	r0, r8
 8008aca:	47d0      	blx	sl
 8008acc:	3001      	adds	r0, #1
 8008ace:	d09b      	beq.n	8008a08 <_printf_i+0x164>
 8008ad0:	3501      	adds	r5, #1
 8008ad2:	68e3      	ldr	r3, [r4, #12]
 8008ad4:	9903      	ldr	r1, [sp, #12]
 8008ad6:	1a5b      	subs	r3, r3, r1
 8008ad8:	42ab      	cmp	r3, r5
 8008ada:	dcf2      	bgt.n	8008ac2 <_printf_i+0x21e>
 8008adc:	e7eb      	b.n	8008ab6 <_printf_i+0x212>
 8008ade:	2500      	movs	r5, #0
 8008ae0:	f104 0619 	add.w	r6, r4, #25
 8008ae4:	e7f5      	b.n	8008ad2 <_printf_i+0x22e>
 8008ae6:	bf00      	nop
 8008ae8:	0800b4be 	.word	0x0800b4be
 8008aec:	0800b4cf 	.word	0x0800b4cf

08008af0 <siprintf>:
 8008af0:	b40e      	push	{r1, r2, r3}
 8008af2:	b500      	push	{lr}
 8008af4:	b09c      	sub	sp, #112	; 0x70
 8008af6:	ab1d      	add	r3, sp, #116	; 0x74
 8008af8:	9002      	str	r0, [sp, #8]
 8008afa:	9006      	str	r0, [sp, #24]
 8008afc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008b00:	4809      	ldr	r0, [pc, #36]	; (8008b28 <siprintf+0x38>)
 8008b02:	9107      	str	r1, [sp, #28]
 8008b04:	9104      	str	r1, [sp, #16]
 8008b06:	4909      	ldr	r1, [pc, #36]	; (8008b2c <siprintf+0x3c>)
 8008b08:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b0c:	9105      	str	r1, [sp, #20]
 8008b0e:	6800      	ldr	r0, [r0, #0]
 8008b10:	9301      	str	r3, [sp, #4]
 8008b12:	a902      	add	r1, sp, #8
 8008b14:	f001 fb32 	bl	800a17c <_svfiprintf_r>
 8008b18:	9b02      	ldr	r3, [sp, #8]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	701a      	strb	r2, [r3, #0]
 8008b1e:	b01c      	add	sp, #112	; 0x70
 8008b20:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b24:	b003      	add	sp, #12
 8008b26:	4770      	bx	lr
 8008b28:	2000000c 	.word	0x2000000c
 8008b2c:	ffff0208 	.word	0xffff0208

08008b30 <quorem>:
 8008b30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b34:	6903      	ldr	r3, [r0, #16]
 8008b36:	690c      	ldr	r4, [r1, #16]
 8008b38:	42a3      	cmp	r3, r4
 8008b3a:	4607      	mov	r7, r0
 8008b3c:	f2c0 8081 	blt.w	8008c42 <quorem+0x112>
 8008b40:	3c01      	subs	r4, #1
 8008b42:	f101 0814 	add.w	r8, r1, #20
 8008b46:	f100 0514 	add.w	r5, r0, #20
 8008b4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b4e:	9301      	str	r3, [sp, #4]
 8008b50:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008b54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b58:	3301      	adds	r3, #1
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008b60:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008b64:	fbb2 f6f3 	udiv	r6, r2, r3
 8008b68:	d331      	bcc.n	8008bce <quorem+0x9e>
 8008b6a:	f04f 0e00 	mov.w	lr, #0
 8008b6e:	4640      	mov	r0, r8
 8008b70:	46ac      	mov	ip, r5
 8008b72:	46f2      	mov	sl, lr
 8008b74:	f850 2b04 	ldr.w	r2, [r0], #4
 8008b78:	b293      	uxth	r3, r2
 8008b7a:	fb06 e303 	mla	r3, r6, r3, lr
 8008b7e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	ebaa 0303 	sub.w	r3, sl, r3
 8008b88:	0c12      	lsrs	r2, r2, #16
 8008b8a:	f8dc a000 	ldr.w	sl, [ip]
 8008b8e:	fb06 e202 	mla	r2, r6, r2, lr
 8008b92:	fa13 f38a 	uxtah	r3, r3, sl
 8008b96:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008b9a:	fa1f fa82 	uxth.w	sl, r2
 8008b9e:	f8dc 2000 	ldr.w	r2, [ip]
 8008ba2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008ba6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008bb0:	4581      	cmp	r9, r0
 8008bb2:	f84c 3b04 	str.w	r3, [ip], #4
 8008bb6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008bba:	d2db      	bcs.n	8008b74 <quorem+0x44>
 8008bbc:	f855 300b 	ldr.w	r3, [r5, fp]
 8008bc0:	b92b      	cbnz	r3, 8008bce <quorem+0x9e>
 8008bc2:	9b01      	ldr	r3, [sp, #4]
 8008bc4:	3b04      	subs	r3, #4
 8008bc6:	429d      	cmp	r5, r3
 8008bc8:	461a      	mov	r2, r3
 8008bca:	d32e      	bcc.n	8008c2a <quorem+0xfa>
 8008bcc:	613c      	str	r4, [r7, #16]
 8008bce:	4638      	mov	r0, r7
 8008bd0:	f001 f8be 	bl	8009d50 <__mcmp>
 8008bd4:	2800      	cmp	r0, #0
 8008bd6:	db24      	blt.n	8008c22 <quorem+0xf2>
 8008bd8:	3601      	adds	r6, #1
 8008bda:	4628      	mov	r0, r5
 8008bdc:	f04f 0c00 	mov.w	ip, #0
 8008be0:	f858 2b04 	ldr.w	r2, [r8], #4
 8008be4:	f8d0 e000 	ldr.w	lr, [r0]
 8008be8:	b293      	uxth	r3, r2
 8008bea:	ebac 0303 	sub.w	r3, ip, r3
 8008bee:	0c12      	lsrs	r2, r2, #16
 8008bf0:	fa13 f38e 	uxtah	r3, r3, lr
 8008bf4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008bf8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c02:	45c1      	cmp	r9, r8
 8008c04:	f840 3b04 	str.w	r3, [r0], #4
 8008c08:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008c0c:	d2e8      	bcs.n	8008be0 <quorem+0xb0>
 8008c0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c16:	b922      	cbnz	r2, 8008c22 <quorem+0xf2>
 8008c18:	3b04      	subs	r3, #4
 8008c1a:	429d      	cmp	r5, r3
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	d30a      	bcc.n	8008c36 <quorem+0x106>
 8008c20:	613c      	str	r4, [r7, #16]
 8008c22:	4630      	mov	r0, r6
 8008c24:	b003      	add	sp, #12
 8008c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c2a:	6812      	ldr	r2, [r2, #0]
 8008c2c:	3b04      	subs	r3, #4
 8008c2e:	2a00      	cmp	r2, #0
 8008c30:	d1cc      	bne.n	8008bcc <quorem+0x9c>
 8008c32:	3c01      	subs	r4, #1
 8008c34:	e7c7      	b.n	8008bc6 <quorem+0x96>
 8008c36:	6812      	ldr	r2, [r2, #0]
 8008c38:	3b04      	subs	r3, #4
 8008c3a:	2a00      	cmp	r2, #0
 8008c3c:	d1f0      	bne.n	8008c20 <quorem+0xf0>
 8008c3e:	3c01      	subs	r4, #1
 8008c40:	e7eb      	b.n	8008c1a <quorem+0xea>
 8008c42:	2000      	movs	r0, #0
 8008c44:	e7ee      	b.n	8008c24 <quorem+0xf4>
	...

08008c48 <_dtoa_r>:
 8008c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c4c:	ed2d 8b02 	vpush	{d8}
 8008c50:	ec57 6b10 	vmov	r6, r7, d0
 8008c54:	b095      	sub	sp, #84	; 0x54
 8008c56:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008c58:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008c5c:	9105      	str	r1, [sp, #20]
 8008c5e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008c62:	4604      	mov	r4, r0
 8008c64:	9209      	str	r2, [sp, #36]	; 0x24
 8008c66:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c68:	b975      	cbnz	r5, 8008c88 <_dtoa_r+0x40>
 8008c6a:	2010      	movs	r0, #16
 8008c6c:	f000 fddc 	bl	8009828 <malloc>
 8008c70:	4602      	mov	r2, r0
 8008c72:	6260      	str	r0, [r4, #36]	; 0x24
 8008c74:	b920      	cbnz	r0, 8008c80 <_dtoa_r+0x38>
 8008c76:	4bb2      	ldr	r3, [pc, #712]	; (8008f40 <_dtoa_r+0x2f8>)
 8008c78:	21ea      	movs	r1, #234	; 0xea
 8008c7a:	48b2      	ldr	r0, [pc, #712]	; (8008f44 <_dtoa_r+0x2fc>)
 8008c7c:	f001 fb8e 	bl	800a39c <__assert_func>
 8008c80:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008c84:	6005      	str	r5, [r0, #0]
 8008c86:	60c5      	str	r5, [r0, #12]
 8008c88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c8a:	6819      	ldr	r1, [r3, #0]
 8008c8c:	b151      	cbz	r1, 8008ca4 <_dtoa_r+0x5c>
 8008c8e:	685a      	ldr	r2, [r3, #4]
 8008c90:	604a      	str	r2, [r1, #4]
 8008c92:	2301      	movs	r3, #1
 8008c94:	4093      	lsls	r3, r2
 8008c96:	608b      	str	r3, [r1, #8]
 8008c98:	4620      	mov	r0, r4
 8008c9a:	f000 fe1b 	bl	80098d4 <_Bfree>
 8008c9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	601a      	str	r2, [r3, #0]
 8008ca4:	1e3b      	subs	r3, r7, #0
 8008ca6:	bfb9      	ittee	lt
 8008ca8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008cac:	9303      	strlt	r3, [sp, #12]
 8008cae:	2300      	movge	r3, #0
 8008cb0:	f8c8 3000 	strge.w	r3, [r8]
 8008cb4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008cb8:	4ba3      	ldr	r3, [pc, #652]	; (8008f48 <_dtoa_r+0x300>)
 8008cba:	bfbc      	itt	lt
 8008cbc:	2201      	movlt	r2, #1
 8008cbe:	f8c8 2000 	strlt.w	r2, [r8]
 8008cc2:	ea33 0309 	bics.w	r3, r3, r9
 8008cc6:	d11b      	bne.n	8008d00 <_dtoa_r+0xb8>
 8008cc8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008cca:	f242 730f 	movw	r3, #9999	; 0x270f
 8008cce:	6013      	str	r3, [r2, #0]
 8008cd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008cd4:	4333      	orrs	r3, r6
 8008cd6:	f000 857a 	beq.w	80097ce <_dtoa_r+0xb86>
 8008cda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cdc:	b963      	cbnz	r3, 8008cf8 <_dtoa_r+0xb0>
 8008cde:	4b9b      	ldr	r3, [pc, #620]	; (8008f4c <_dtoa_r+0x304>)
 8008ce0:	e024      	b.n	8008d2c <_dtoa_r+0xe4>
 8008ce2:	4b9b      	ldr	r3, [pc, #620]	; (8008f50 <_dtoa_r+0x308>)
 8008ce4:	9300      	str	r3, [sp, #0]
 8008ce6:	3308      	adds	r3, #8
 8008ce8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008cea:	6013      	str	r3, [r2, #0]
 8008cec:	9800      	ldr	r0, [sp, #0]
 8008cee:	b015      	add	sp, #84	; 0x54
 8008cf0:	ecbd 8b02 	vpop	{d8}
 8008cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cf8:	4b94      	ldr	r3, [pc, #592]	; (8008f4c <_dtoa_r+0x304>)
 8008cfa:	9300      	str	r3, [sp, #0]
 8008cfc:	3303      	adds	r3, #3
 8008cfe:	e7f3      	b.n	8008ce8 <_dtoa_r+0xa0>
 8008d00:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008d04:	2200      	movs	r2, #0
 8008d06:	ec51 0b17 	vmov	r0, r1, d7
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008d10:	f7f7 fee2 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d14:	4680      	mov	r8, r0
 8008d16:	b158      	cbz	r0, 8008d30 <_dtoa_r+0xe8>
 8008d18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	6013      	str	r3, [r2, #0]
 8008d1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	f000 8551 	beq.w	80097c8 <_dtoa_r+0xb80>
 8008d26:	488b      	ldr	r0, [pc, #556]	; (8008f54 <_dtoa_r+0x30c>)
 8008d28:	6018      	str	r0, [r3, #0]
 8008d2a:	1e43      	subs	r3, r0, #1
 8008d2c:	9300      	str	r3, [sp, #0]
 8008d2e:	e7dd      	b.n	8008cec <_dtoa_r+0xa4>
 8008d30:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008d34:	aa12      	add	r2, sp, #72	; 0x48
 8008d36:	a913      	add	r1, sp, #76	; 0x4c
 8008d38:	4620      	mov	r0, r4
 8008d3a:	f001 f8ad 	bl	8009e98 <__d2b>
 8008d3e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008d42:	4683      	mov	fp, r0
 8008d44:	2d00      	cmp	r5, #0
 8008d46:	d07c      	beq.n	8008e42 <_dtoa_r+0x1fa>
 8008d48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d4a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008d4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d52:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008d56:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008d5a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008d5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008d62:	4b7d      	ldr	r3, [pc, #500]	; (8008f58 <_dtoa_r+0x310>)
 8008d64:	2200      	movs	r2, #0
 8008d66:	4630      	mov	r0, r6
 8008d68:	4639      	mov	r1, r7
 8008d6a:	f7f7 fa95 	bl	8000298 <__aeabi_dsub>
 8008d6e:	a36e      	add	r3, pc, #440	; (adr r3, 8008f28 <_dtoa_r+0x2e0>)
 8008d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d74:	f7f7 fc48 	bl	8000608 <__aeabi_dmul>
 8008d78:	a36d      	add	r3, pc, #436	; (adr r3, 8008f30 <_dtoa_r+0x2e8>)
 8008d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d7e:	f7f7 fa8d 	bl	800029c <__adddf3>
 8008d82:	4606      	mov	r6, r0
 8008d84:	4628      	mov	r0, r5
 8008d86:	460f      	mov	r7, r1
 8008d88:	f7f7 fbd4 	bl	8000534 <__aeabi_i2d>
 8008d8c:	a36a      	add	r3, pc, #424	; (adr r3, 8008f38 <_dtoa_r+0x2f0>)
 8008d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d92:	f7f7 fc39 	bl	8000608 <__aeabi_dmul>
 8008d96:	4602      	mov	r2, r0
 8008d98:	460b      	mov	r3, r1
 8008d9a:	4630      	mov	r0, r6
 8008d9c:	4639      	mov	r1, r7
 8008d9e:	f7f7 fa7d 	bl	800029c <__adddf3>
 8008da2:	4606      	mov	r6, r0
 8008da4:	460f      	mov	r7, r1
 8008da6:	f7f7 fedf 	bl	8000b68 <__aeabi_d2iz>
 8008daa:	2200      	movs	r2, #0
 8008dac:	4682      	mov	sl, r0
 8008dae:	2300      	movs	r3, #0
 8008db0:	4630      	mov	r0, r6
 8008db2:	4639      	mov	r1, r7
 8008db4:	f7f7 fe9a 	bl	8000aec <__aeabi_dcmplt>
 8008db8:	b148      	cbz	r0, 8008dce <_dtoa_r+0x186>
 8008dba:	4650      	mov	r0, sl
 8008dbc:	f7f7 fbba 	bl	8000534 <__aeabi_i2d>
 8008dc0:	4632      	mov	r2, r6
 8008dc2:	463b      	mov	r3, r7
 8008dc4:	f7f7 fe88 	bl	8000ad8 <__aeabi_dcmpeq>
 8008dc8:	b908      	cbnz	r0, 8008dce <_dtoa_r+0x186>
 8008dca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008dce:	f1ba 0f16 	cmp.w	sl, #22
 8008dd2:	d854      	bhi.n	8008e7e <_dtoa_r+0x236>
 8008dd4:	4b61      	ldr	r3, [pc, #388]	; (8008f5c <_dtoa_r+0x314>)
 8008dd6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dde:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008de2:	f7f7 fe83 	bl	8000aec <__aeabi_dcmplt>
 8008de6:	2800      	cmp	r0, #0
 8008de8:	d04b      	beq.n	8008e82 <_dtoa_r+0x23a>
 8008dea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008dee:	2300      	movs	r3, #0
 8008df0:	930e      	str	r3, [sp, #56]	; 0x38
 8008df2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008df4:	1b5d      	subs	r5, r3, r5
 8008df6:	1e6b      	subs	r3, r5, #1
 8008df8:	9304      	str	r3, [sp, #16]
 8008dfa:	bf43      	ittte	mi
 8008dfc:	2300      	movmi	r3, #0
 8008dfe:	f1c5 0801 	rsbmi	r8, r5, #1
 8008e02:	9304      	strmi	r3, [sp, #16]
 8008e04:	f04f 0800 	movpl.w	r8, #0
 8008e08:	f1ba 0f00 	cmp.w	sl, #0
 8008e0c:	db3b      	blt.n	8008e86 <_dtoa_r+0x23e>
 8008e0e:	9b04      	ldr	r3, [sp, #16]
 8008e10:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008e14:	4453      	add	r3, sl
 8008e16:	9304      	str	r3, [sp, #16]
 8008e18:	2300      	movs	r3, #0
 8008e1a:	9306      	str	r3, [sp, #24]
 8008e1c:	9b05      	ldr	r3, [sp, #20]
 8008e1e:	2b09      	cmp	r3, #9
 8008e20:	d869      	bhi.n	8008ef6 <_dtoa_r+0x2ae>
 8008e22:	2b05      	cmp	r3, #5
 8008e24:	bfc4      	itt	gt
 8008e26:	3b04      	subgt	r3, #4
 8008e28:	9305      	strgt	r3, [sp, #20]
 8008e2a:	9b05      	ldr	r3, [sp, #20]
 8008e2c:	f1a3 0302 	sub.w	r3, r3, #2
 8008e30:	bfcc      	ite	gt
 8008e32:	2500      	movgt	r5, #0
 8008e34:	2501      	movle	r5, #1
 8008e36:	2b03      	cmp	r3, #3
 8008e38:	d869      	bhi.n	8008f0e <_dtoa_r+0x2c6>
 8008e3a:	e8df f003 	tbb	[pc, r3]
 8008e3e:	4e2c      	.short	0x4e2c
 8008e40:	5a4c      	.short	0x5a4c
 8008e42:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008e46:	441d      	add	r5, r3
 8008e48:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008e4c:	2b20      	cmp	r3, #32
 8008e4e:	bfc1      	itttt	gt
 8008e50:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008e54:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008e58:	fa09 f303 	lslgt.w	r3, r9, r3
 8008e5c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008e60:	bfda      	itte	le
 8008e62:	f1c3 0320 	rsble	r3, r3, #32
 8008e66:	fa06 f003 	lslle.w	r0, r6, r3
 8008e6a:	4318      	orrgt	r0, r3
 8008e6c:	f7f7 fb52 	bl	8000514 <__aeabi_ui2d>
 8008e70:	2301      	movs	r3, #1
 8008e72:	4606      	mov	r6, r0
 8008e74:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008e78:	3d01      	subs	r5, #1
 8008e7a:	9310      	str	r3, [sp, #64]	; 0x40
 8008e7c:	e771      	b.n	8008d62 <_dtoa_r+0x11a>
 8008e7e:	2301      	movs	r3, #1
 8008e80:	e7b6      	b.n	8008df0 <_dtoa_r+0x1a8>
 8008e82:	900e      	str	r0, [sp, #56]	; 0x38
 8008e84:	e7b5      	b.n	8008df2 <_dtoa_r+0x1aa>
 8008e86:	f1ca 0300 	rsb	r3, sl, #0
 8008e8a:	9306      	str	r3, [sp, #24]
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	eba8 080a 	sub.w	r8, r8, sl
 8008e92:	930d      	str	r3, [sp, #52]	; 0x34
 8008e94:	e7c2      	b.n	8008e1c <_dtoa_r+0x1d4>
 8008e96:	2300      	movs	r3, #0
 8008e98:	9308      	str	r3, [sp, #32]
 8008e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	dc39      	bgt.n	8008f14 <_dtoa_r+0x2cc>
 8008ea0:	f04f 0901 	mov.w	r9, #1
 8008ea4:	f8cd 9004 	str.w	r9, [sp, #4]
 8008ea8:	464b      	mov	r3, r9
 8008eaa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008eae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	6042      	str	r2, [r0, #4]
 8008eb4:	2204      	movs	r2, #4
 8008eb6:	f102 0614 	add.w	r6, r2, #20
 8008eba:	429e      	cmp	r6, r3
 8008ebc:	6841      	ldr	r1, [r0, #4]
 8008ebe:	d92f      	bls.n	8008f20 <_dtoa_r+0x2d8>
 8008ec0:	4620      	mov	r0, r4
 8008ec2:	f000 fcc7 	bl	8009854 <_Balloc>
 8008ec6:	9000      	str	r0, [sp, #0]
 8008ec8:	2800      	cmp	r0, #0
 8008eca:	d14b      	bne.n	8008f64 <_dtoa_r+0x31c>
 8008ecc:	4b24      	ldr	r3, [pc, #144]	; (8008f60 <_dtoa_r+0x318>)
 8008ece:	4602      	mov	r2, r0
 8008ed0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008ed4:	e6d1      	b.n	8008c7a <_dtoa_r+0x32>
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	e7de      	b.n	8008e98 <_dtoa_r+0x250>
 8008eda:	2300      	movs	r3, #0
 8008edc:	9308      	str	r3, [sp, #32]
 8008ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ee0:	eb0a 0903 	add.w	r9, sl, r3
 8008ee4:	f109 0301 	add.w	r3, r9, #1
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	9301      	str	r3, [sp, #4]
 8008eec:	bfb8      	it	lt
 8008eee:	2301      	movlt	r3, #1
 8008ef0:	e7dd      	b.n	8008eae <_dtoa_r+0x266>
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	e7f2      	b.n	8008edc <_dtoa_r+0x294>
 8008ef6:	2501      	movs	r5, #1
 8008ef8:	2300      	movs	r3, #0
 8008efa:	9305      	str	r3, [sp, #20]
 8008efc:	9508      	str	r5, [sp, #32]
 8008efe:	f04f 39ff 	mov.w	r9, #4294967295
 8008f02:	2200      	movs	r2, #0
 8008f04:	f8cd 9004 	str.w	r9, [sp, #4]
 8008f08:	2312      	movs	r3, #18
 8008f0a:	9209      	str	r2, [sp, #36]	; 0x24
 8008f0c:	e7cf      	b.n	8008eae <_dtoa_r+0x266>
 8008f0e:	2301      	movs	r3, #1
 8008f10:	9308      	str	r3, [sp, #32]
 8008f12:	e7f4      	b.n	8008efe <_dtoa_r+0x2b6>
 8008f14:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008f18:	f8cd 9004 	str.w	r9, [sp, #4]
 8008f1c:	464b      	mov	r3, r9
 8008f1e:	e7c6      	b.n	8008eae <_dtoa_r+0x266>
 8008f20:	3101      	adds	r1, #1
 8008f22:	6041      	str	r1, [r0, #4]
 8008f24:	0052      	lsls	r2, r2, #1
 8008f26:	e7c6      	b.n	8008eb6 <_dtoa_r+0x26e>
 8008f28:	636f4361 	.word	0x636f4361
 8008f2c:	3fd287a7 	.word	0x3fd287a7
 8008f30:	8b60c8b3 	.word	0x8b60c8b3
 8008f34:	3fc68a28 	.word	0x3fc68a28
 8008f38:	509f79fb 	.word	0x509f79fb
 8008f3c:	3fd34413 	.word	0x3fd34413
 8008f40:	0800b4ed 	.word	0x0800b4ed
 8008f44:	0800b504 	.word	0x0800b504
 8008f48:	7ff00000 	.word	0x7ff00000
 8008f4c:	0800b4e9 	.word	0x0800b4e9
 8008f50:	0800b4e0 	.word	0x0800b4e0
 8008f54:	0800b4bd 	.word	0x0800b4bd
 8008f58:	3ff80000 	.word	0x3ff80000
 8008f5c:	0800b600 	.word	0x0800b600
 8008f60:	0800b563 	.word	0x0800b563
 8008f64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f66:	9a00      	ldr	r2, [sp, #0]
 8008f68:	601a      	str	r2, [r3, #0]
 8008f6a:	9b01      	ldr	r3, [sp, #4]
 8008f6c:	2b0e      	cmp	r3, #14
 8008f6e:	f200 80ad 	bhi.w	80090cc <_dtoa_r+0x484>
 8008f72:	2d00      	cmp	r5, #0
 8008f74:	f000 80aa 	beq.w	80090cc <_dtoa_r+0x484>
 8008f78:	f1ba 0f00 	cmp.w	sl, #0
 8008f7c:	dd36      	ble.n	8008fec <_dtoa_r+0x3a4>
 8008f7e:	4ac3      	ldr	r2, [pc, #780]	; (800928c <_dtoa_r+0x644>)
 8008f80:	f00a 030f 	and.w	r3, sl, #15
 8008f84:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008f88:	ed93 7b00 	vldr	d7, [r3]
 8008f8c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008f90:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008f94:	eeb0 8a47 	vmov.f32	s16, s14
 8008f98:	eef0 8a67 	vmov.f32	s17, s15
 8008f9c:	d016      	beq.n	8008fcc <_dtoa_r+0x384>
 8008f9e:	4bbc      	ldr	r3, [pc, #752]	; (8009290 <_dtoa_r+0x648>)
 8008fa0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008fa4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008fa8:	f7f7 fc58 	bl	800085c <__aeabi_ddiv>
 8008fac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fb0:	f007 070f 	and.w	r7, r7, #15
 8008fb4:	2503      	movs	r5, #3
 8008fb6:	4eb6      	ldr	r6, [pc, #728]	; (8009290 <_dtoa_r+0x648>)
 8008fb8:	b957      	cbnz	r7, 8008fd0 <_dtoa_r+0x388>
 8008fba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fbe:	ec53 2b18 	vmov	r2, r3, d8
 8008fc2:	f7f7 fc4b 	bl	800085c <__aeabi_ddiv>
 8008fc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fca:	e029      	b.n	8009020 <_dtoa_r+0x3d8>
 8008fcc:	2502      	movs	r5, #2
 8008fce:	e7f2      	b.n	8008fb6 <_dtoa_r+0x36e>
 8008fd0:	07f9      	lsls	r1, r7, #31
 8008fd2:	d508      	bpl.n	8008fe6 <_dtoa_r+0x39e>
 8008fd4:	ec51 0b18 	vmov	r0, r1, d8
 8008fd8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008fdc:	f7f7 fb14 	bl	8000608 <__aeabi_dmul>
 8008fe0:	ec41 0b18 	vmov	d8, r0, r1
 8008fe4:	3501      	adds	r5, #1
 8008fe6:	107f      	asrs	r7, r7, #1
 8008fe8:	3608      	adds	r6, #8
 8008fea:	e7e5      	b.n	8008fb8 <_dtoa_r+0x370>
 8008fec:	f000 80a6 	beq.w	800913c <_dtoa_r+0x4f4>
 8008ff0:	f1ca 0600 	rsb	r6, sl, #0
 8008ff4:	4ba5      	ldr	r3, [pc, #660]	; (800928c <_dtoa_r+0x644>)
 8008ff6:	4fa6      	ldr	r7, [pc, #664]	; (8009290 <_dtoa_r+0x648>)
 8008ff8:	f006 020f 	and.w	r2, r6, #15
 8008ffc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009004:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009008:	f7f7 fafe 	bl	8000608 <__aeabi_dmul>
 800900c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009010:	1136      	asrs	r6, r6, #4
 8009012:	2300      	movs	r3, #0
 8009014:	2502      	movs	r5, #2
 8009016:	2e00      	cmp	r6, #0
 8009018:	f040 8085 	bne.w	8009126 <_dtoa_r+0x4de>
 800901c:	2b00      	cmp	r3, #0
 800901e:	d1d2      	bne.n	8008fc6 <_dtoa_r+0x37e>
 8009020:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009022:	2b00      	cmp	r3, #0
 8009024:	f000 808c 	beq.w	8009140 <_dtoa_r+0x4f8>
 8009028:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800902c:	4b99      	ldr	r3, [pc, #612]	; (8009294 <_dtoa_r+0x64c>)
 800902e:	2200      	movs	r2, #0
 8009030:	4630      	mov	r0, r6
 8009032:	4639      	mov	r1, r7
 8009034:	f7f7 fd5a 	bl	8000aec <__aeabi_dcmplt>
 8009038:	2800      	cmp	r0, #0
 800903a:	f000 8081 	beq.w	8009140 <_dtoa_r+0x4f8>
 800903e:	9b01      	ldr	r3, [sp, #4]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d07d      	beq.n	8009140 <_dtoa_r+0x4f8>
 8009044:	f1b9 0f00 	cmp.w	r9, #0
 8009048:	dd3c      	ble.n	80090c4 <_dtoa_r+0x47c>
 800904a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800904e:	9307      	str	r3, [sp, #28]
 8009050:	2200      	movs	r2, #0
 8009052:	4b91      	ldr	r3, [pc, #580]	; (8009298 <_dtoa_r+0x650>)
 8009054:	4630      	mov	r0, r6
 8009056:	4639      	mov	r1, r7
 8009058:	f7f7 fad6 	bl	8000608 <__aeabi_dmul>
 800905c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009060:	3501      	adds	r5, #1
 8009062:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009066:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800906a:	4628      	mov	r0, r5
 800906c:	f7f7 fa62 	bl	8000534 <__aeabi_i2d>
 8009070:	4632      	mov	r2, r6
 8009072:	463b      	mov	r3, r7
 8009074:	f7f7 fac8 	bl	8000608 <__aeabi_dmul>
 8009078:	4b88      	ldr	r3, [pc, #544]	; (800929c <_dtoa_r+0x654>)
 800907a:	2200      	movs	r2, #0
 800907c:	f7f7 f90e 	bl	800029c <__adddf3>
 8009080:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009084:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009088:	9303      	str	r3, [sp, #12]
 800908a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800908c:	2b00      	cmp	r3, #0
 800908e:	d15c      	bne.n	800914a <_dtoa_r+0x502>
 8009090:	4b83      	ldr	r3, [pc, #524]	; (80092a0 <_dtoa_r+0x658>)
 8009092:	2200      	movs	r2, #0
 8009094:	4630      	mov	r0, r6
 8009096:	4639      	mov	r1, r7
 8009098:	f7f7 f8fe 	bl	8000298 <__aeabi_dsub>
 800909c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090a0:	4606      	mov	r6, r0
 80090a2:	460f      	mov	r7, r1
 80090a4:	f7f7 fd40 	bl	8000b28 <__aeabi_dcmpgt>
 80090a8:	2800      	cmp	r0, #0
 80090aa:	f040 8296 	bne.w	80095da <_dtoa_r+0x992>
 80090ae:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80090b2:	4630      	mov	r0, r6
 80090b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80090b8:	4639      	mov	r1, r7
 80090ba:	f7f7 fd17 	bl	8000aec <__aeabi_dcmplt>
 80090be:	2800      	cmp	r0, #0
 80090c0:	f040 8288 	bne.w	80095d4 <_dtoa_r+0x98c>
 80090c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80090c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80090cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	f2c0 8158 	blt.w	8009384 <_dtoa_r+0x73c>
 80090d4:	f1ba 0f0e 	cmp.w	sl, #14
 80090d8:	f300 8154 	bgt.w	8009384 <_dtoa_r+0x73c>
 80090dc:	4b6b      	ldr	r3, [pc, #428]	; (800928c <_dtoa_r+0x644>)
 80090de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80090e2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80090e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	f280 80e3 	bge.w	80092b4 <_dtoa_r+0x66c>
 80090ee:	9b01      	ldr	r3, [sp, #4]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	f300 80df 	bgt.w	80092b4 <_dtoa_r+0x66c>
 80090f6:	f040 826d 	bne.w	80095d4 <_dtoa_r+0x98c>
 80090fa:	4b69      	ldr	r3, [pc, #420]	; (80092a0 <_dtoa_r+0x658>)
 80090fc:	2200      	movs	r2, #0
 80090fe:	4640      	mov	r0, r8
 8009100:	4649      	mov	r1, r9
 8009102:	f7f7 fa81 	bl	8000608 <__aeabi_dmul>
 8009106:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800910a:	f7f7 fd03 	bl	8000b14 <__aeabi_dcmpge>
 800910e:	9e01      	ldr	r6, [sp, #4]
 8009110:	4637      	mov	r7, r6
 8009112:	2800      	cmp	r0, #0
 8009114:	f040 8243 	bne.w	800959e <_dtoa_r+0x956>
 8009118:	9d00      	ldr	r5, [sp, #0]
 800911a:	2331      	movs	r3, #49	; 0x31
 800911c:	f805 3b01 	strb.w	r3, [r5], #1
 8009120:	f10a 0a01 	add.w	sl, sl, #1
 8009124:	e23f      	b.n	80095a6 <_dtoa_r+0x95e>
 8009126:	07f2      	lsls	r2, r6, #31
 8009128:	d505      	bpl.n	8009136 <_dtoa_r+0x4ee>
 800912a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800912e:	f7f7 fa6b 	bl	8000608 <__aeabi_dmul>
 8009132:	3501      	adds	r5, #1
 8009134:	2301      	movs	r3, #1
 8009136:	1076      	asrs	r6, r6, #1
 8009138:	3708      	adds	r7, #8
 800913a:	e76c      	b.n	8009016 <_dtoa_r+0x3ce>
 800913c:	2502      	movs	r5, #2
 800913e:	e76f      	b.n	8009020 <_dtoa_r+0x3d8>
 8009140:	9b01      	ldr	r3, [sp, #4]
 8009142:	f8cd a01c 	str.w	sl, [sp, #28]
 8009146:	930c      	str	r3, [sp, #48]	; 0x30
 8009148:	e78d      	b.n	8009066 <_dtoa_r+0x41e>
 800914a:	9900      	ldr	r1, [sp, #0]
 800914c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800914e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009150:	4b4e      	ldr	r3, [pc, #312]	; (800928c <_dtoa_r+0x644>)
 8009152:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009156:	4401      	add	r1, r0
 8009158:	9102      	str	r1, [sp, #8]
 800915a:	9908      	ldr	r1, [sp, #32]
 800915c:	eeb0 8a47 	vmov.f32	s16, s14
 8009160:	eef0 8a67 	vmov.f32	s17, s15
 8009164:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009168:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800916c:	2900      	cmp	r1, #0
 800916e:	d045      	beq.n	80091fc <_dtoa_r+0x5b4>
 8009170:	494c      	ldr	r1, [pc, #304]	; (80092a4 <_dtoa_r+0x65c>)
 8009172:	2000      	movs	r0, #0
 8009174:	f7f7 fb72 	bl	800085c <__aeabi_ddiv>
 8009178:	ec53 2b18 	vmov	r2, r3, d8
 800917c:	f7f7 f88c 	bl	8000298 <__aeabi_dsub>
 8009180:	9d00      	ldr	r5, [sp, #0]
 8009182:	ec41 0b18 	vmov	d8, r0, r1
 8009186:	4639      	mov	r1, r7
 8009188:	4630      	mov	r0, r6
 800918a:	f7f7 fced 	bl	8000b68 <__aeabi_d2iz>
 800918e:	900c      	str	r0, [sp, #48]	; 0x30
 8009190:	f7f7 f9d0 	bl	8000534 <__aeabi_i2d>
 8009194:	4602      	mov	r2, r0
 8009196:	460b      	mov	r3, r1
 8009198:	4630      	mov	r0, r6
 800919a:	4639      	mov	r1, r7
 800919c:	f7f7 f87c 	bl	8000298 <__aeabi_dsub>
 80091a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091a2:	3330      	adds	r3, #48	; 0x30
 80091a4:	f805 3b01 	strb.w	r3, [r5], #1
 80091a8:	ec53 2b18 	vmov	r2, r3, d8
 80091ac:	4606      	mov	r6, r0
 80091ae:	460f      	mov	r7, r1
 80091b0:	f7f7 fc9c 	bl	8000aec <__aeabi_dcmplt>
 80091b4:	2800      	cmp	r0, #0
 80091b6:	d165      	bne.n	8009284 <_dtoa_r+0x63c>
 80091b8:	4632      	mov	r2, r6
 80091ba:	463b      	mov	r3, r7
 80091bc:	4935      	ldr	r1, [pc, #212]	; (8009294 <_dtoa_r+0x64c>)
 80091be:	2000      	movs	r0, #0
 80091c0:	f7f7 f86a 	bl	8000298 <__aeabi_dsub>
 80091c4:	ec53 2b18 	vmov	r2, r3, d8
 80091c8:	f7f7 fc90 	bl	8000aec <__aeabi_dcmplt>
 80091cc:	2800      	cmp	r0, #0
 80091ce:	f040 80b9 	bne.w	8009344 <_dtoa_r+0x6fc>
 80091d2:	9b02      	ldr	r3, [sp, #8]
 80091d4:	429d      	cmp	r5, r3
 80091d6:	f43f af75 	beq.w	80090c4 <_dtoa_r+0x47c>
 80091da:	4b2f      	ldr	r3, [pc, #188]	; (8009298 <_dtoa_r+0x650>)
 80091dc:	ec51 0b18 	vmov	r0, r1, d8
 80091e0:	2200      	movs	r2, #0
 80091e2:	f7f7 fa11 	bl	8000608 <__aeabi_dmul>
 80091e6:	4b2c      	ldr	r3, [pc, #176]	; (8009298 <_dtoa_r+0x650>)
 80091e8:	ec41 0b18 	vmov	d8, r0, r1
 80091ec:	2200      	movs	r2, #0
 80091ee:	4630      	mov	r0, r6
 80091f0:	4639      	mov	r1, r7
 80091f2:	f7f7 fa09 	bl	8000608 <__aeabi_dmul>
 80091f6:	4606      	mov	r6, r0
 80091f8:	460f      	mov	r7, r1
 80091fa:	e7c4      	b.n	8009186 <_dtoa_r+0x53e>
 80091fc:	ec51 0b17 	vmov	r0, r1, d7
 8009200:	f7f7 fa02 	bl	8000608 <__aeabi_dmul>
 8009204:	9b02      	ldr	r3, [sp, #8]
 8009206:	9d00      	ldr	r5, [sp, #0]
 8009208:	930c      	str	r3, [sp, #48]	; 0x30
 800920a:	ec41 0b18 	vmov	d8, r0, r1
 800920e:	4639      	mov	r1, r7
 8009210:	4630      	mov	r0, r6
 8009212:	f7f7 fca9 	bl	8000b68 <__aeabi_d2iz>
 8009216:	9011      	str	r0, [sp, #68]	; 0x44
 8009218:	f7f7 f98c 	bl	8000534 <__aeabi_i2d>
 800921c:	4602      	mov	r2, r0
 800921e:	460b      	mov	r3, r1
 8009220:	4630      	mov	r0, r6
 8009222:	4639      	mov	r1, r7
 8009224:	f7f7 f838 	bl	8000298 <__aeabi_dsub>
 8009228:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800922a:	3330      	adds	r3, #48	; 0x30
 800922c:	f805 3b01 	strb.w	r3, [r5], #1
 8009230:	9b02      	ldr	r3, [sp, #8]
 8009232:	429d      	cmp	r5, r3
 8009234:	4606      	mov	r6, r0
 8009236:	460f      	mov	r7, r1
 8009238:	f04f 0200 	mov.w	r2, #0
 800923c:	d134      	bne.n	80092a8 <_dtoa_r+0x660>
 800923e:	4b19      	ldr	r3, [pc, #100]	; (80092a4 <_dtoa_r+0x65c>)
 8009240:	ec51 0b18 	vmov	r0, r1, d8
 8009244:	f7f7 f82a 	bl	800029c <__adddf3>
 8009248:	4602      	mov	r2, r0
 800924a:	460b      	mov	r3, r1
 800924c:	4630      	mov	r0, r6
 800924e:	4639      	mov	r1, r7
 8009250:	f7f7 fc6a 	bl	8000b28 <__aeabi_dcmpgt>
 8009254:	2800      	cmp	r0, #0
 8009256:	d175      	bne.n	8009344 <_dtoa_r+0x6fc>
 8009258:	ec53 2b18 	vmov	r2, r3, d8
 800925c:	4911      	ldr	r1, [pc, #68]	; (80092a4 <_dtoa_r+0x65c>)
 800925e:	2000      	movs	r0, #0
 8009260:	f7f7 f81a 	bl	8000298 <__aeabi_dsub>
 8009264:	4602      	mov	r2, r0
 8009266:	460b      	mov	r3, r1
 8009268:	4630      	mov	r0, r6
 800926a:	4639      	mov	r1, r7
 800926c:	f7f7 fc3e 	bl	8000aec <__aeabi_dcmplt>
 8009270:	2800      	cmp	r0, #0
 8009272:	f43f af27 	beq.w	80090c4 <_dtoa_r+0x47c>
 8009276:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009278:	1e6b      	subs	r3, r5, #1
 800927a:	930c      	str	r3, [sp, #48]	; 0x30
 800927c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009280:	2b30      	cmp	r3, #48	; 0x30
 8009282:	d0f8      	beq.n	8009276 <_dtoa_r+0x62e>
 8009284:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009288:	e04a      	b.n	8009320 <_dtoa_r+0x6d8>
 800928a:	bf00      	nop
 800928c:	0800b600 	.word	0x0800b600
 8009290:	0800b5d8 	.word	0x0800b5d8
 8009294:	3ff00000 	.word	0x3ff00000
 8009298:	40240000 	.word	0x40240000
 800929c:	401c0000 	.word	0x401c0000
 80092a0:	40140000 	.word	0x40140000
 80092a4:	3fe00000 	.word	0x3fe00000
 80092a8:	4baf      	ldr	r3, [pc, #700]	; (8009568 <_dtoa_r+0x920>)
 80092aa:	f7f7 f9ad 	bl	8000608 <__aeabi_dmul>
 80092ae:	4606      	mov	r6, r0
 80092b0:	460f      	mov	r7, r1
 80092b2:	e7ac      	b.n	800920e <_dtoa_r+0x5c6>
 80092b4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80092b8:	9d00      	ldr	r5, [sp, #0]
 80092ba:	4642      	mov	r2, r8
 80092bc:	464b      	mov	r3, r9
 80092be:	4630      	mov	r0, r6
 80092c0:	4639      	mov	r1, r7
 80092c2:	f7f7 facb 	bl	800085c <__aeabi_ddiv>
 80092c6:	f7f7 fc4f 	bl	8000b68 <__aeabi_d2iz>
 80092ca:	9002      	str	r0, [sp, #8]
 80092cc:	f7f7 f932 	bl	8000534 <__aeabi_i2d>
 80092d0:	4642      	mov	r2, r8
 80092d2:	464b      	mov	r3, r9
 80092d4:	f7f7 f998 	bl	8000608 <__aeabi_dmul>
 80092d8:	4602      	mov	r2, r0
 80092da:	460b      	mov	r3, r1
 80092dc:	4630      	mov	r0, r6
 80092de:	4639      	mov	r1, r7
 80092e0:	f7f6 ffda 	bl	8000298 <__aeabi_dsub>
 80092e4:	9e02      	ldr	r6, [sp, #8]
 80092e6:	9f01      	ldr	r7, [sp, #4]
 80092e8:	3630      	adds	r6, #48	; 0x30
 80092ea:	f805 6b01 	strb.w	r6, [r5], #1
 80092ee:	9e00      	ldr	r6, [sp, #0]
 80092f0:	1bae      	subs	r6, r5, r6
 80092f2:	42b7      	cmp	r7, r6
 80092f4:	4602      	mov	r2, r0
 80092f6:	460b      	mov	r3, r1
 80092f8:	d137      	bne.n	800936a <_dtoa_r+0x722>
 80092fa:	f7f6 ffcf 	bl	800029c <__adddf3>
 80092fe:	4642      	mov	r2, r8
 8009300:	464b      	mov	r3, r9
 8009302:	4606      	mov	r6, r0
 8009304:	460f      	mov	r7, r1
 8009306:	f7f7 fc0f 	bl	8000b28 <__aeabi_dcmpgt>
 800930a:	b9c8      	cbnz	r0, 8009340 <_dtoa_r+0x6f8>
 800930c:	4642      	mov	r2, r8
 800930e:	464b      	mov	r3, r9
 8009310:	4630      	mov	r0, r6
 8009312:	4639      	mov	r1, r7
 8009314:	f7f7 fbe0 	bl	8000ad8 <__aeabi_dcmpeq>
 8009318:	b110      	cbz	r0, 8009320 <_dtoa_r+0x6d8>
 800931a:	9b02      	ldr	r3, [sp, #8]
 800931c:	07d9      	lsls	r1, r3, #31
 800931e:	d40f      	bmi.n	8009340 <_dtoa_r+0x6f8>
 8009320:	4620      	mov	r0, r4
 8009322:	4659      	mov	r1, fp
 8009324:	f000 fad6 	bl	80098d4 <_Bfree>
 8009328:	2300      	movs	r3, #0
 800932a:	702b      	strb	r3, [r5, #0]
 800932c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800932e:	f10a 0001 	add.w	r0, sl, #1
 8009332:	6018      	str	r0, [r3, #0]
 8009334:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009336:	2b00      	cmp	r3, #0
 8009338:	f43f acd8 	beq.w	8008cec <_dtoa_r+0xa4>
 800933c:	601d      	str	r5, [r3, #0]
 800933e:	e4d5      	b.n	8008cec <_dtoa_r+0xa4>
 8009340:	f8cd a01c 	str.w	sl, [sp, #28]
 8009344:	462b      	mov	r3, r5
 8009346:	461d      	mov	r5, r3
 8009348:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800934c:	2a39      	cmp	r2, #57	; 0x39
 800934e:	d108      	bne.n	8009362 <_dtoa_r+0x71a>
 8009350:	9a00      	ldr	r2, [sp, #0]
 8009352:	429a      	cmp	r2, r3
 8009354:	d1f7      	bne.n	8009346 <_dtoa_r+0x6fe>
 8009356:	9a07      	ldr	r2, [sp, #28]
 8009358:	9900      	ldr	r1, [sp, #0]
 800935a:	3201      	adds	r2, #1
 800935c:	9207      	str	r2, [sp, #28]
 800935e:	2230      	movs	r2, #48	; 0x30
 8009360:	700a      	strb	r2, [r1, #0]
 8009362:	781a      	ldrb	r2, [r3, #0]
 8009364:	3201      	adds	r2, #1
 8009366:	701a      	strb	r2, [r3, #0]
 8009368:	e78c      	b.n	8009284 <_dtoa_r+0x63c>
 800936a:	4b7f      	ldr	r3, [pc, #508]	; (8009568 <_dtoa_r+0x920>)
 800936c:	2200      	movs	r2, #0
 800936e:	f7f7 f94b 	bl	8000608 <__aeabi_dmul>
 8009372:	2200      	movs	r2, #0
 8009374:	2300      	movs	r3, #0
 8009376:	4606      	mov	r6, r0
 8009378:	460f      	mov	r7, r1
 800937a:	f7f7 fbad 	bl	8000ad8 <__aeabi_dcmpeq>
 800937e:	2800      	cmp	r0, #0
 8009380:	d09b      	beq.n	80092ba <_dtoa_r+0x672>
 8009382:	e7cd      	b.n	8009320 <_dtoa_r+0x6d8>
 8009384:	9a08      	ldr	r2, [sp, #32]
 8009386:	2a00      	cmp	r2, #0
 8009388:	f000 80c4 	beq.w	8009514 <_dtoa_r+0x8cc>
 800938c:	9a05      	ldr	r2, [sp, #20]
 800938e:	2a01      	cmp	r2, #1
 8009390:	f300 80a8 	bgt.w	80094e4 <_dtoa_r+0x89c>
 8009394:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009396:	2a00      	cmp	r2, #0
 8009398:	f000 80a0 	beq.w	80094dc <_dtoa_r+0x894>
 800939c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80093a0:	9e06      	ldr	r6, [sp, #24]
 80093a2:	4645      	mov	r5, r8
 80093a4:	9a04      	ldr	r2, [sp, #16]
 80093a6:	2101      	movs	r1, #1
 80093a8:	441a      	add	r2, r3
 80093aa:	4620      	mov	r0, r4
 80093ac:	4498      	add	r8, r3
 80093ae:	9204      	str	r2, [sp, #16]
 80093b0:	f000 fb4c 	bl	8009a4c <__i2b>
 80093b4:	4607      	mov	r7, r0
 80093b6:	2d00      	cmp	r5, #0
 80093b8:	dd0b      	ble.n	80093d2 <_dtoa_r+0x78a>
 80093ba:	9b04      	ldr	r3, [sp, #16]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	dd08      	ble.n	80093d2 <_dtoa_r+0x78a>
 80093c0:	42ab      	cmp	r3, r5
 80093c2:	9a04      	ldr	r2, [sp, #16]
 80093c4:	bfa8      	it	ge
 80093c6:	462b      	movge	r3, r5
 80093c8:	eba8 0803 	sub.w	r8, r8, r3
 80093cc:	1aed      	subs	r5, r5, r3
 80093ce:	1ad3      	subs	r3, r2, r3
 80093d0:	9304      	str	r3, [sp, #16]
 80093d2:	9b06      	ldr	r3, [sp, #24]
 80093d4:	b1fb      	cbz	r3, 8009416 <_dtoa_r+0x7ce>
 80093d6:	9b08      	ldr	r3, [sp, #32]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	f000 809f 	beq.w	800951c <_dtoa_r+0x8d4>
 80093de:	2e00      	cmp	r6, #0
 80093e0:	dd11      	ble.n	8009406 <_dtoa_r+0x7be>
 80093e2:	4639      	mov	r1, r7
 80093e4:	4632      	mov	r2, r6
 80093e6:	4620      	mov	r0, r4
 80093e8:	f000 fbec 	bl	8009bc4 <__pow5mult>
 80093ec:	465a      	mov	r2, fp
 80093ee:	4601      	mov	r1, r0
 80093f0:	4607      	mov	r7, r0
 80093f2:	4620      	mov	r0, r4
 80093f4:	f000 fb40 	bl	8009a78 <__multiply>
 80093f8:	4659      	mov	r1, fp
 80093fa:	9007      	str	r0, [sp, #28]
 80093fc:	4620      	mov	r0, r4
 80093fe:	f000 fa69 	bl	80098d4 <_Bfree>
 8009402:	9b07      	ldr	r3, [sp, #28]
 8009404:	469b      	mov	fp, r3
 8009406:	9b06      	ldr	r3, [sp, #24]
 8009408:	1b9a      	subs	r2, r3, r6
 800940a:	d004      	beq.n	8009416 <_dtoa_r+0x7ce>
 800940c:	4659      	mov	r1, fp
 800940e:	4620      	mov	r0, r4
 8009410:	f000 fbd8 	bl	8009bc4 <__pow5mult>
 8009414:	4683      	mov	fp, r0
 8009416:	2101      	movs	r1, #1
 8009418:	4620      	mov	r0, r4
 800941a:	f000 fb17 	bl	8009a4c <__i2b>
 800941e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009420:	2b00      	cmp	r3, #0
 8009422:	4606      	mov	r6, r0
 8009424:	dd7c      	ble.n	8009520 <_dtoa_r+0x8d8>
 8009426:	461a      	mov	r2, r3
 8009428:	4601      	mov	r1, r0
 800942a:	4620      	mov	r0, r4
 800942c:	f000 fbca 	bl	8009bc4 <__pow5mult>
 8009430:	9b05      	ldr	r3, [sp, #20]
 8009432:	2b01      	cmp	r3, #1
 8009434:	4606      	mov	r6, r0
 8009436:	dd76      	ble.n	8009526 <_dtoa_r+0x8de>
 8009438:	2300      	movs	r3, #0
 800943a:	9306      	str	r3, [sp, #24]
 800943c:	6933      	ldr	r3, [r6, #16]
 800943e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009442:	6918      	ldr	r0, [r3, #16]
 8009444:	f000 fab2 	bl	80099ac <__hi0bits>
 8009448:	f1c0 0020 	rsb	r0, r0, #32
 800944c:	9b04      	ldr	r3, [sp, #16]
 800944e:	4418      	add	r0, r3
 8009450:	f010 001f 	ands.w	r0, r0, #31
 8009454:	f000 8086 	beq.w	8009564 <_dtoa_r+0x91c>
 8009458:	f1c0 0320 	rsb	r3, r0, #32
 800945c:	2b04      	cmp	r3, #4
 800945e:	dd7f      	ble.n	8009560 <_dtoa_r+0x918>
 8009460:	f1c0 001c 	rsb	r0, r0, #28
 8009464:	9b04      	ldr	r3, [sp, #16]
 8009466:	4403      	add	r3, r0
 8009468:	4480      	add	r8, r0
 800946a:	4405      	add	r5, r0
 800946c:	9304      	str	r3, [sp, #16]
 800946e:	f1b8 0f00 	cmp.w	r8, #0
 8009472:	dd05      	ble.n	8009480 <_dtoa_r+0x838>
 8009474:	4659      	mov	r1, fp
 8009476:	4642      	mov	r2, r8
 8009478:	4620      	mov	r0, r4
 800947a:	f000 fbfd 	bl	8009c78 <__lshift>
 800947e:	4683      	mov	fp, r0
 8009480:	9b04      	ldr	r3, [sp, #16]
 8009482:	2b00      	cmp	r3, #0
 8009484:	dd05      	ble.n	8009492 <_dtoa_r+0x84a>
 8009486:	4631      	mov	r1, r6
 8009488:	461a      	mov	r2, r3
 800948a:	4620      	mov	r0, r4
 800948c:	f000 fbf4 	bl	8009c78 <__lshift>
 8009490:	4606      	mov	r6, r0
 8009492:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009494:	2b00      	cmp	r3, #0
 8009496:	d069      	beq.n	800956c <_dtoa_r+0x924>
 8009498:	4631      	mov	r1, r6
 800949a:	4658      	mov	r0, fp
 800949c:	f000 fc58 	bl	8009d50 <__mcmp>
 80094a0:	2800      	cmp	r0, #0
 80094a2:	da63      	bge.n	800956c <_dtoa_r+0x924>
 80094a4:	2300      	movs	r3, #0
 80094a6:	4659      	mov	r1, fp
 80094a8:	220a      	movs	r2, #10
 80094aa:	4620      	mov	r0, r4
 80094ac:	f000 fa34 	bl	8009918 <__multadd>
 80094b0:	9b08      	ldr	r3, [sp, #32]
 80094b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80094b6:	4683      	mov	fp, r0
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	f000 818f 	beq.w	80097dc <_dtoa_r+0xb94>
 80094be:	4639      	mov	r1, r7
 80094c0:	2300      	movs	r3, #0
 80094c2:	220a      	movs	r2, #10
 80094c4:	4620      	mov	r0, r4
 80094c6:	f000 fa27 	bl	8009918 <__multadd>
 80094ca:	f1b9 0f00 	cmp.w	r9, #0
 80094ce:	4607      	mov	r7, r0
 80094d0:	f300 808e 	bgt.w	80095f0 <_dtoa_r+0x9a8>
 80094d4:	9b05      	ldr	r3, [sp, #20]
 80094d6:	2b02      	cmp	r3, #2
 80094d8:	dc50      	bgt.n	800957c <_dtoa_r+0x934>
 80094da:	e089      	b.n	80095f0 <_dtoa_r+0x9a8>
 80094dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80094de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80094e2:	e75d      	b.n	80093a0 <_dtoa_r+0x758>
 80094e4:	9b01      	ldr	r3, [sp, #4]
 80094e6:	1e5e      	subs	r6, r3, #1
 80094e8:	9b06      	ldr	r3, [sp, #24]
 80094ea:	42b3      	cmp	r3, r6
 80094ec:	bfbf      	itttt	lt
 80094ee:	9b06      	ldrlt	r3, [sp, #24]
 80094f0:	9606      	strlt	r6, [sp, #24]
 80094f2:	1af2      	sublt	r2, r6, r3
 80094f4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80094f6:	bfb6      	itet	lt
 80094f8:	189b      	addlt	r3, r3, r2
 80094fa:	1b9e      	subge	r6, r3, r6
 80094fc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80094fe:	9b01      	ldr	r3, [sp, #4]
 8009500:	bfb8      	it	lt
 8009502:	2600      	movlt	r6, #0
 8009504:	2b00      	cmp	r3, #0
 8009506:	bfb5      	itete	lt
 8009508:	eba8 0503 	sublt.w	r5, r8, r3
 800950c:	9b01      	ldrge	r3, [sp, #4]
 800950e:	2300      	movlt	r3, #0
 8009510:	4645      	movge	r5, r8
 8009512:	e747      	b.n	80093a4 <_dtoa_r+0x75c>
 8009514:	9e06      	ldr	r6, [sp, #24]
 8009516:	9f08      	ldr	r7, [sp, #32]
 8009518:	4645      	mov	r5, r8
 800951a:	e74c      	b.n	80093b6 <_dtoa_r+0x76e>
 800951c:	9a06      	ldr	r2, [sp, #24]
 800951e:	e775      	b.n	800940c <_dtoa_r+0x7c4>
 8009520:	9b05      	ldr	r3, [sp, #20]
 8009522:	2b01      	cmp	r3, #1
 8009524:	dc18      	bgt.n	8009558 <_dtoa_r+0x910>
 8009526:	9b02      	ldr	r3, [sp, #8]
 8009528:	b9b3      	cbnz	r3, 8009558 <_dtoa_r+0x910>
 800952a:	9b03      	ldr	r3, [sp, #12]
 800952c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009530:	b9a3      	cbnz	r3, 800955c <_dtoa_r+0x914>
 8009532:	9b03      	ldr	r3, [sp, #12]
 8009534:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009538:	0d1b      	lsrs	r3, r3, #20
 800953a:	051b      	lsls	r3, r3, #20
 800953c:	b12b      	cbz	r3, 800954a <_dtoa_r+0x902>
 800953e:	9b04      	ldr	r3, [sp, #16]
 8009540:	3301      	adds	r3, #1
 8009542:	9304      	str	r3, [sp, #16]
 8009544:	f108 0801 	add.w	r8, r8, #1
 8009548:	2301      	movs	r3, #1
 800954a:	9306      	str	r3, [sp, #24]
 800954c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800954e:	2b00      	cmp	r3, #0
 8009550:	f47f af74 	bne.w	800943c <_dtoa_r+0x7f4>
 8009554:	2001      	movs	r0, #1
 8009556:	e779      	b.n	800944c <_dtoa_r+0x804>
 8009558:	2300      	movs	r3, #0
 800955a:	e7f6      	b.n	800954a <_dtoa_r+0x902>
 800955c:	9b02      	ldr	r3, [sp, #8]
 800955e:	e7f4      	b.n	800954a <_dtoa_r+0x902>
 8009560:	d085      	beq.n	800946e <_dtoa_r+0x826>
 8009562:	4618      	mov	r0, r3
 8009564:	301c      	adds	r0, #28
 8009566:	e77d      	b.n	8009464 <_dtoa_r+0x81c>
 8009568:	40240000 	.word	0x40240000
 800956c:	9b01      	ldr	r3, [sp, #4]
 800956e:	2b00      	cmp	r3, #0
 8009570:	dc38      	bgt.n	80095e4 <_dtoa_r+0x99c>
 8009572:	9b05      	ldr	r3, [sp, #20]
 8009574:	2b02      	cmp	r3, #2
 8009576:	dd35      	ble.n	80095e4 <_dtoa_r+0x99c>
 8009578:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800957c:	f1b9 0f00 	cmp.w	r9, #0
 8009580:	d10d      	bne.n	800959e <_dtoa_r+0x956>
 8009582:	4631      	mov	r1, r6
 8009584:	464b      	mov	r3, r9
 8009586:	2205      	movs	r2, #5
 8009588:	4620      	mov	r0, r4
 800958a:	f000 f9c5 	bl	8009918 <__multadd>
 800958e:	4601      	mov	r1, r0
 8009590:	4606      	mov	r6, r0
 8009592:	4658      	mov	r0, fp
 8009594:	f000 fbdc 	bl	8009d50 <__mcmp>
 8009598:	2800      	cmp	r0, #0
 800959a:	f73f adbd 	bgt.w	8009118 <_dtoa_r+0x4d0>
 800959e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095a0:	9d00      	ldr	r5, [sp, #0]
 80095a2:	ea6f 0a03 	mvn.w	sl, r3
 80095a6:	f04f 0800 	mov.w	r8, #0
 80095aa:	4631      	mov	r1, r6
 80095ac:	4620      	mov	r0, r4
 80095ae:	f000 f991 	bl	80098d4 <_Bfree>
 80095b2:	2f00      	cmp	r7, #0
 80095b4:	f43f aeb4 	beq.w	8009320 <_dtoa_r+0x6d8>
 80095b8:	f1b8 0f00 	cmp.w	r8, #0
 80095bc:	d005      	beq.n	80095ca <_dtoa_r+0x982>
 80095be:	45b8      	cmp	r8, r7
 80095c0:	d003      	beq.n	80095ca <_dtoa_r+0x982>
 80095c2:	4641      	mov	r1, r8
 80095c4:	4620      	mov	r0, r4
 80095c6:	f000 f985 	bl	80098d4 <_Bfree>
 80095ca:	4639      	mov	r1, r7
 80095cc:	4620      	mov	r0, r4
 80095ce:	f000 f981 	bl	80098d4 <_Bfree>
 80095d2:	e6a5      	b.n	8009320 <_dtoa_r+0x6d8>
 80095d4:	2600      	movs	r6, #0
 80095d6:	4637      	mov	r7, r6
 80095d8:	e7e1      	b.n	800959e <_dtoa_r+0x956>
 80095da:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80095dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80095e0:	4637      	mov	r7, r6
 80095e2:	e599      	b.n	8009118 <_dtoa_r+0x4d0>
 80095e4:	9b08      	ldr	r3, [sp, #32]
 80095e6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	f000 80fd 	beq.w	80097ea <_dtoa_r+0xba2>
 80095f0:	2d00      	cmp	r5, #0
 80095f2:	dd05      	ble.n	8009600 <_dtoa_r+0x9b8>
 80095f4:	4639      	mov	r1, r7
 80095f6:	462a      	mov	r2, r5
 80095f8:	4620      	mov	r0, r4
 80095fa:	f000 fb3d 	bl	8009c78 <__lshift>
 80095fe:	4607      	mov	r7, r0
 8009600:	9b06      	ldr	r3, [sp, #24]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d05c      	beq.n	80096c0 <_dtoa_r+0xa78>
 8009606:	6879      	ldr	r1, [r7, #4]
 8009608:	4620      	mov	r0, r4
 800960a:	f000 f923 	bl	8009854 <_Balloc>
 800960e:	4605      	mov	r5, r0
 8009610:	b928      	cbnz	r0, 800961e <_dtoa_r+0x9d6>
 8009612:	4b80      	ldr	r3, [pc, #512]	; (8009814 <_dtoa_r+0xbcc>)
 8009614:	4602      	mov	r2, r0
 8009616:	f240 21ea 	movw	r1, #746	; 0x2ea
 800961a:	f7ff bb2e 	b.w	8008c7a <_dtoa_r+0x32>
 800961e:	693a      	ldr	r2, [r7, #16]
 8009620:	3202      	adds	r2, #2
 8009622:	0092      	lsls	r2, r2, #2
 8009624:	f107 010c 	add.w	r1, r7, #12
 8009628:	300c      	adds	r0, #12
 800962a:	f000 f905 	bl	8009838 <memcpy>
 800962e:	2201      	movs	r2, #1
 8009630:	4629      	mov	r1, r5
 8009632:	4620      	mov	r0, r4
 8009634:	f000 fb20 	bl	8009c78 <__lshift>
 8009638:	9b00      	ldr	r3, [sp, #0]
 800963a:	3301      	adds	r3, #1
 800963c:	9301      	str	r3, [sp, #4]
 800963e:	9b00      	ldr	r3, [sp, #0]
 8009640:	444b      	add	r3, r9
 8009642:	9307      	str	r3, [sp, #28]
 8009644:	9b02      	ldr	r3, [sp, #8]
 8009646:	f003 0301 	and.w	r3, r3, #1
 800964a:	46b8      	mov	r8, r7
 800964c:	9306      	str	r3, [sp, #24]
 800964e:	4607      	mov	r7, r0
 8009650:	9b01      	ldr	r3, [sp, #4]
 8009652:	4631      	mov	r1, r6
 8009654:	3b01      	subs	r3, #1
 8009656:	4658      	mov	r0, fp
 8009658:	9302      	str	r3, [sp, #8]
 800965a:	f7ff fa69 	bl	8008b30 <quorem>
 800965e:	4603      	mov	r3, r0
 8009660:	3330      	adds	r3, #48	; 0x30
 8009662:	9004      	str	r0, [sp, #16]
 8009664:	4641      	mov	r1, r8
 8009666:	4658      	mov	r0, fp
 8009668:	9308      	str	r3, [sp, #32]
 800966a:	f000 fb71 	bl	8009d50 <__mcmp>
 800966e:	463a      	mov	r2, r7
 8009670:	4681      	mov	r9, r0
 8009672:	4631      	mov	r1, r6
 8009674:	4620      	mov	r0, r4
 8009676:	f000 fb87 	bl	8009d88 <__mdiff>
 800967a:	68c2      	ldr	r2, [r0, #12]
 800967c:	9b08      	ldr	r3, [sp, #32]
 800967e:	4605      	mov	r5, r0
 8009680:	bb02      	cbnz	r2, 80096c4 <_dtoa_r+0xa7c>
 8009682:	4601      	mov	r1, r0
 8009684:	4658      	mov	r0, fp
 8009686:	f000 fb63 	bl	8009d50 <__mcmp>
 800968a:	9b08      	ldr	r3, [sp, #32]
 800968c:	4602      	mov	r2, r0
 800968e:	4629      	mov	r1, r5
 8009690:	4620      	mov	r0, r4
 8009692:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009696:	f000 f91d 	bl	80098d4 <_Bfree>
 800969a:	9b05      	ldr	r3, [sp, #20]
 800969c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800969e:	9d01      	ldr	r5, [sp, #4]
 80096a0:	ea43 0102 	orr.w	r1, r3, r2
 80096a4:	9b06      	ldr	r3, [sp, #24]
 80096a6:	430b      	orrs	r3, r1
 80096a8:	9b08      	ldr	r3, [sp, #32]
 80096aa:	d10d      	bne.n	80096c8 <_dtoa_r+0xa80>
 80096ac:	2b39      	cmp	r3, #57	; 0x39
 80096ae:	d029      	beq.n	8009704 <_dtoa_r+0xabc>
 80096b0:	f1b9 0f00 	cmp.w	r9, #0
 80096b4:	dd01      	ble.n	80096ba <_dtoa_r+0xa72>
 80096b6:	9b04      	ldr	r3, [sp, #16]
 80096b8:	3331      	adds	r3, #49	; 0x31
 80096ba:	9a02      	ldr	r2, [sp, #8]
 80096bc:	7013      	strb	r3, [r2, #0]
 80096be:	e774      	b.n	80095aa <_dtoa_r+0x962>
 80096c0:	4638      	mov	r0, r7
 80096c2:	e7b9      	b.n	8009638 <_dtoa_r+0x9f0>
 80096c4:	2201      	movs	r2, #1
 80096c6:	e7e2      	b.n	800968e <_dtoa_r+0xa46>
 80096c8:	f1b9 0f00 	cmp.w	r9, #0
 80096cc:	db06      	blt.n	80096dc <_dtoa_r+0xa94>
 80096ce:	9905      	ldr	r1, [sp, #20]
 80096d0:	ea41 0909 	orr.w	r9, r1, r9
 80096d4:	9906      	ldr	r1, [sp, #24]
 80096d6:	ea59 0101 	orrs.w	r1, r9, r1
 80096da:	d120      	bne.n	800971e <_dtoa_r+0xad6>
 80096dc:	2a00      	cmp	r2, #0
 80096de:	ddec      	ble.n	80096ba <_dtoa_r+0xa72>
 80096e0:	4659      	mov	r1, fp
 80096e2:	2201      	movs	r2, #1
 80096e4:	4620      	mov	r0, r4
 80096e6:	9301      	str	r3, [sp, #4]
 80096e8:	f000 fac6 	bl	8009c78 <__lshift>
 80096ec:	4631      	mov	r1, r6
 80096ee:	4683      	mov	fp, r0
 80096f0:	f000 fb2e 	bl	8009d50 <__mcmp>
 80096f4:	2800      	cmp	r0, #0
 80096f6:	9b01      	ldr	r3, [sp, #4]
 80096f8:	dc02      	bgt.n	8009700 <_dtoa_r+0xab8>
 80096fa:	d1de      	bne.n	80096ba <_dtoa_r+0xa72>
 80096fc:	07da      	lsls	r2, r3, #31
 80096fe:	d5dc      	bpl.n	80096ba <_dtoa_r+0xa72>
 8009700:	2b39      	cmp	r3, #57	; 0x39
 8009702:	d1d8      	bne.n	80096b6 <_dtoa_r+0xa6e>
 8009704:	9a02      	ldr	r2, [sp, #8]
 8009706:	2339      	movs	r3, #57	; 0x39
 8009708:	7013      	strb	r3, [r2, #0]
 800970a:	462b      	mov	r3, r5
 800970c:	461d      	mov	r5, r3
 800970e:	3b01      	subs	r3, #1
 8009710:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009714:	2a39      	cmp	r2, #57	; 0x39
 8009716:	d050      	beq.n	80097ba <_dtoa_r+0xb72>
 8009718:	3201      	adds	r2, #1
 800971a:	701a      	strb	r2, [r3, #0]
 800971c:	e745      	b.n	80095aa <_dtoa_r+0x962>
 800971e:	2a00      	cmp	r2, #0
 8009720:	dd03      	ble.n	800972a <_dtoa_r+0xae2>
 8009722:	2b39      	cmp	r3, #57	; 0x39
 8009724:	d0ee      	beq.n	8009704 <_dtoa_r+0xabc>
 8009726:	3301      	adds	r3, #1
 8009728:	e7c7      	b.n	80096ba <_dtoa_r+0xa72>
 800972a:	9a01      	ldr	r2, [sp, #4]
 800972c:	9907      	ldr	r1, [sp, #28]
 800972e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009732:	428a      	cmp	r2, r1
 8009734:	d02a      	beq.n	800978c <_dtoa_r+0xb44>
 8009736:	4659      	mov	r1, fp
 8009738:	2300      	movs	r3, #0
 800973a:	220a      	movs	r2, #10
 800973c:	4620      	mov	r0, r4
 800973e:	f000 f8eb 	bl	8009918 <__multadd>
 8009742:	45b8      	cmp	r8, r7
 8009744:	4683      	mov	fp, r0
 8009746:	f04f 0300 	mov.w	r3, #0
 800974a:	f04f 020a 	mov.w	r2, #10
 800974e:	4641      	mov	r1, r8
 8009750:	4620      	mov	r0, r4
 8009752:	d107      	bne.n	8009764 <_dtoa_r+0xb1c>
 8009754:	f000 f8e0 	bl	8009918 <__multadd>
 8009758:	4680      	mov	r8, r0
 800975a:	4607      	mov	r7, r0
 800975c:	9b01      	ldr	r3, [sp, #4]
 800975e:	3301      	adds	r3, #1
 8009760:	9301      	str	r3, [sp, #4]
 8009762:	e775      	b.n	8009650 <_dtoa_r+0xa08>
 8009764:	f000 f8d8 	bl	8009918 <__multadd>
 8009768:	4639      	mov	r1, r7
 800976a:	4680      	mov	r8, r0
 800976c:	2300      	movs	r3, #0
 800976e:	220a      	movs	r2, #10
 8009770:	4620      	mov	r0, r4
 8009772:	f000 f8d1 	bl	8009918 <__multadd>
 8009776:	4607      	mov	r7, r0
 8009778:	e7f0      	b.n	800975c <_dtoa_r+0xb14>
 800977a:	f1b9 0f00 	cmp.w	r9, #0
 800977e:	9a00      	ldr	r2, [sp, #0]
 8009780:	bfcc      	ite	gt
 8009782:	464d      	movgt	r5, r9
 8009784:	2501      	movle	r5, #1
 8009786:	4415      	add	r5, r2
 8009788:	f04f 0800 	mov.w	r8, #0
 800978c:	4659      	mov	r1, fp
 800978e:	2201      	movs	r2, #1
 8009790:	4620      	mov	r0, r4
 8009792:	9301      	str	r3, [sp, #4]
 8009794:	f000 fa70 	bl	8009c78 <__lshift>
 8009798:	4631      	mov	r1, r6
 800979a:	4683      	mov	fp, r0
 800979c:	f000 fad8 	bl	8009d50 <__mcmp>
 80097a0:	2800      	cmp	r0, #0
 80097a2:	dcb2      	bgt.n	800970a <_dtoa_r+0xac2>
 80097a4:	d102      	bne.n	80097ac <_dtoa_r+0xb64>
 80097a6:	9b01      	ldr	r3, [sp, #4]
 80097a8:	07db      	lsls	r3, r3, #31
 80097aa:	d4ae      	bmi.n	800970a <_dtoa_r+0xac2>
 80097ac:	462b      	mov	r3, r5
 80097ae:	461d      	mov	r5, r3
 80097b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80097b4:	2a30      	cmp	r2, #48	; 0x30
 80097b6:	d0fa      	beq.n	80097ae <_dtoa_r+0xb66>
 80097b8:	e6f7      	b.n	80095aa <_dtoa_r+0x962>
 80097ba:	9a00      	ldr	r2, [sp, #0]
 80097bc:	429a      	cmp	r2, r3
 80097be:	d1a5      	bne.n	800970c <_dtoa_r+0xac4>
 80097c0:	f10a 0a01 	add.w	sl, sl, #1
 80097c4:	2331      	movs	r3, #49	; 0x31
 80097c6:	e779      	b.n	80096bc <_dtoa_r+0xa74>
 80097c8:	4b13      	ldr	r3, [pc, #76]	; (8009818 <_dtoa_r+0xbd0>)
 80097ca:	f7ff baaf 	b.w	8008d2c <_dtoa_r+0xe4>
 80097ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	f47f aa86 	bne.w	8008ce2 <_dtoa_r+0x9a>
 80097d6:	4b11      	ldr	r3, [pc, #68]	; (800981c <_dtoa_r+0xbd4>)
 80097d8:	f7ff baa8 	b.w	8008d2c <_dtoa_r+0xe4>
 80097dc:	f1b9 0f00 	cmp.w	r9, #0
 80097e0:	dc03      	bgt.n	80097ea <_dtoa_r+0xba2>
 80097e2:	9b05      	ldr	r3, [sp, #20]
 80097e4:	2b02      	cmp	r3, #2
 80097e6:	f73f aec9 	bgt.w	800957c <_dtoa_r+0x934>
 80097ea:	9d00      	ldr	r5, [sp, #0]
 80097ec:	4631      	mov	r1, r6
 80097ee:	4658      	mov	r0, fp
 80097f0:	f7ff f99e 	bl	8008b30 <quorem>
 80097f4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80097f8:	f805 3b01 	strb.w	r3, [r5], #1
 80097fc:	9a00      	ldr	r2, [sp, #0]
 80097fe:	1aaa      	subs	r2, r5, r2
 8009800:	4591      	cmp	r9, r2
 8009802:	ddba      	ble.n	800977a <_dtoa_r+0xb32>
 8009804:	4659      	mov	r1, fp
 8009806:	2300      	movs	r3, #0
 8009808:	220a      	movs	r2, #10
 800980a:	4620      	mov	r0, r4
 800980c:	f000 f884 	bl	8009918 <__multadd>
 8009810:	4683      	mov	fp, r0
 8009812:	e7eb      	b.n	80097ec <_dtoa_r+0xba4>
 8009814:	0800b563 	.word	0x0800b563
 8009818:	0800b4bc 	.word	0x0800b4bc
 800981c:	0800b4e0 	.word	0x0800b4e0

08009820 <_localeconv_r>:
 8009820:	4800      	ldr	r0, [pc, #0]	; (8009824 <_localeconv_r+0x4>)
 8009822:	4770      	bx	lr
 8009824:	20000160 	.word	0x20000160

08009828 <malloc>:
 8009828:	4b02      	ldr	r3, [pc, #8]	; (8009834 <malloc+0xc>)
 800982a:	4601      	mov	r1, r0
 800982c:	6818      	ldr	r0, [r3, #0]
 800982e:	f000 bbef 	b.w	800a010 <_malloc_r>
 8009832:	bf00      	nop
 8009834:	2000000c 	.word	0x2000000c

08009838 <memcpy>:
 8009838:	440a      	add	r2, r1
 800983a:	4291      	cmp	r1, r2
 800983c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009840:	d100      	bne.n	8009844 <memcpy+0xc>
 8009842:	4770      	bx	lr
 8009844:	b510      	push	{r4, lr}
 8009846:	f811 4b01 	ldrb.w	r4, [r1], #1
 800984a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800984e:	4291      	cmp	r1, r2
 8009850:	d1f9      	bne.n	8009846 <memcpy+0xe>
 8009852:	bd10      	pop	{r4, pc}

08009854 <_Balloc>:
 8009854:	b570      	push	{r4, r5, r6, lr}
 8009856:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009858:	4604      	mov	r4, r0
 800985a:	460d      	mov	r5, r1
 800985c:	b976      	cbnz	r6, 800987c <_Balloc+0x28>
 800985e:	2010      	movs	r0, #16
 8009860:	f7ff ffe2 	bl	8009828 <malloc>
 8009864:	4602      	mov	r2, r0
 8009866:	6260      	str	r0, [r4, #36]	; 0x24
 8009868:	b920      	cbnz	r0, 8009874 <_Balloc+0x20>
 800986a:	4b18      	ldr	r3, [pc, #96]	; (80098cc <_Balloc+0x78>)
 800986c:	4818      	ldr	r0, [pc, #96]	; (80098d0 <_Balloc+0x7c>)
 800986e:	2166      	movs	r1, #102	; 0x66
 8009870:	f000 fd94 	bl	800a39c <__assert_func>
 8009874:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009878:	6006      	str	r6, [r0, #0]
 800987a:	60c6      	str	r6, [r0, #12]
 800987c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800987e:	68f3      	ldr	r3, [r6, #12]
 8009880:	b183      	cbz	r3, 80098a4 <_Balloc+0x50>
 8009882:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009884:	68db      	ldr	r3, [r3, #12]
 8009886:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800988a:	b9b8      	cbnz	r0, 80098bc <_Balloc+0x68>
 800988c:	2101      	movs	r1, #1
 800988e:	fa01 f605 	lsl.w	r6, r1, r5
 8009892:	1d72      	adds	r2, r6, #5
 8009894:	0092      	lsls	r2, r2, #2
 8009896:	4620      	mov	r0, r4
 8009898:	f000 fb5a 	bl	8009f50 <_calloc_r>
 800989c:	b160      	cbz	r0, 80098b8 <_Balloc+0x64>
 800989e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80098a2:	e00e      	b.n	80098c2 <_Balloc+0x6e>
 80098a4:	2221      	movs	r2, #33	; 0x21
 80098a6:	2104      	movs	r1, #4
 80098a8:	4620      	mov	r0, r4
 80098aa:	f000 fb51 	bl	8009f50 <_calloc_r>
 80098ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098b0:	60f0      	str	r0, [r6, #12]
 80098b2:	68db      	ldr	r3, [r3, #12]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d1e4      	bne.n	8009882 <_Balloc+0x2e>
 80098b8:	2000      	movs	r0, #0
 80098ba:	bd70      	pop	{r4, r5, r6, pc}
 80098bc:	6802      	ldr	r2, [r0, #0]
 80098be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80098c2:	2300      	movs	r3, #0
 80098c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80098c8:	e7f7      	b.n	80098ba <_Balloc+0x66>
 80098ca:	bf00      	nop
 80098cc:	0800b4ed 	.word	0x0800b4ed
 80098d0:	0800b574 	.word	0x0800b574

080098d4 <_Bfree>:
 80098d4:	b570      	push	{r4, r5, r6, lr}
 80098d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80098d8:	4605      	mov	r5, r0
 80098da:	460c      	mov	r4, r1
 80098dc:	b976      	cbnz	r6, 80098fc <_Bfree+0x28>
 80098de:	2010      	movs	r0, #16
 80098e0:	f7ff ffa2 	bl	8009828 <malloc>
 80098e4:	4602      	mov	r2, r0
 80098e6:	6268      	str	r0, [r5, #36]	; 0x24
 80098e8:	b920      	cbnz	r0, 80098f4 <_Bfree+0x20>
 80098ea:	4b09      	ldr	r3, [pc, #36]	; (8009910 <_Bfree+0x3c>)
 80098ec:	4809      	ldr	r0, [pc, #36]	; (8009914 <_Bfree+0x40>)
 80098ee:	218a      	movs	r1, #138	; 0x8a
 80098f0:	f000 fd54 	bl	800a39c <__assert_func>
 80098f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098f8:	6006      	str	r6, [r0, #0]
 80098fa:	60c6      	str	r6, [r0, #12]
 80098fc:	b13c      	cbz	r4, 800990e <_Bfree+0x3a>
 80098fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009900:	6862      	ldr	r2, [r4, #4]
 8009902:	68db      	ldr	r3, [r3, #12]
 8009904:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009908:	6021      	str	r1, [r4, #0]
 800990a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800990e:	bd70      	pop	{r4, r5, r6, pc}
 8009910:	0800b4ed 	.word	0x0800b4ed
 8009914:	0800b574 	.word	0x0800b574

08009918 <__multadd>:
 8009918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800991c:	690e      	ldr	r6, [r1, #16]
 800991e:	4607      	mov	r7, r0
 8009920:	4698      	mov	r8, r3
 8009922:	460c      	mov	r4, r1
 8009924:	f101 0014 	add.w	r0, r1, #20
 8009928:	2300      	movs	r3, #0
 800992a:	6805      	ldr	r5, [r0, #0]
 800992c:	b2a9      	uxth	r1, r5
 800992e:	fb02 8101 	mla	r1, r2, r1, r8
 8009932:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009936:	0c2d      	lsrs	r5, r5, #16
 8009938:	fb02 c505 	mla	r5, r2, r5, ip
 800993c:	b289      	uxth	r1, r1
 800993e:	3301      	adds	r3, #1
 8009940:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009944:	429e      	cmp	r6, r3
 8009946:	f840 1b04 	str.w	r1, [r0], #4
 800994a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800994e:	dcec      	bgt.n	800992a <__multadd+0x12>
 8009950:	f1b8 0f00 	cmp.w	r8, #0
 8009954:	d022      	beq.n	800999c <__multadd+0x84>
 8009956:	68a3      	ldr	r3, [r4, #8]
 8009958:	42b3      	cmp	r3, r6
 800995a:	dc19      	bgt.n	8009990 <__multadd+0x78>
 800995c:	6861      	ldr	r1, [r4, #4]
 800995e:	4638      	mov	r0, r7
 8009960:	3101      	adds	r1, #1
 8009962:	f7ff ff77 	bl	8009854 <_Balloc>
 8009966:	4605      	mov	r5, r0
 8009968:	b928      	cbnz	r0, 8009976 <__multadd+0x5e>
 800996a:	4602      	mov	r2, r0
 800996c:	4b0d      	ldr	r3, [pc, #52]	; (80099a4 <__multadd+0x8c>)
 800996e:	480e      	ldr	r0, [pc, #56]	; (80099a8 <__multadd+0x90>)
 8009970:	21b5      	movs	r1, #181	; 0xb5
 8009972:	f000 fd13 	bl	800a39c <__assert_func>
 8009976:	6922      	ldr	r2, [r4, #16]
 8009978:	3202      	adds	r2, #2
 800997a:	f104 010c 	add.w	r1, r4, #12
 800997e:	0092      	lsls	r2, r2, #2
 8009980:	300c      	adds	r0, #12
 8009982:	f7ff ff59 	bl	8009838 <memcpy>
 8009986:	4621      	mov	r1, r4
 8009988:	4638      	mov	r0, r7
 800998a:	f7ff ffa3 	bl	80098d4 <_Bfree>
 800998e:	462c      	mov	r4, r5
 8009990:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009994:	3601      	adds	r6, #1
 8009996:	f8c3 8014 	str.w	r8, [r3, #20]
 800999a:	6126      	str	r6, [r4, #16]
 800999c:	4620      	mov	r0, r4
 800999e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099a2:	bf00      	nop
 80099a4:	0800b563 	.word	0x0800b563
 80099a8:	0800b574 	.word	0x0800b574

080099ac <__hi0bits>:
 80099ac:	0c03      	lsrs	r3, r0, #16
 80099ae:	041b      	lsls	r3, r3, #16
 80099b0:	b9d3      	cbnz	r3, 80099e8 <__hi0bits+0x3c>
 80099b2:	0400      	lsls	r0, r0, #16
 80099b4:	2310      	movs	r3, #16
 80099b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80099ba:	bf04      	itt	eq
 80099bc:	0200      	lsleq	r0, r0, #8
 80099be:	3308      	addeq	r3, #8
 80099c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80099c4:	bf04      	itt	eq
 80099c6:	0100      	lsleq	r0, r0, #4
 80099c8:	3304      	addeq	r3, #4
 80099ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80099ce:	bf04      	itt	eq
 80099d0:	0080      	lsleq	r0, r0, #2
 80099d2:	3302      	addeq	r3, #2
 80099d4:	2800      	cmp	r0, #0
 80099d6:	db05      	blt.n	80099e4 <__hi0bits+0x38>
 80099d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80099dc:	f103 0301 	add.w	r3, r3, #1
 80099e0:	bf08      	it	eq
 80099e2:	2320      	moveq	r3, #32
 80099e4:	4618      	mov	r0, r3
 80099e6:	4770      	bx	lr
 80099e8:	2300      	movs	r3, #0
 80099ea:	e7e4      	b.n	80099b6 <__hi0bits+0xa>

080099ec <__lo0bits>:
 80099ec:	6803      	ldr	r3, [r0, #0]
 80099ee:	f013 0207 	ands.w	r2, r3, #7
 80099f2:	4601      	mov	r1, r0
 80099f4:	d00b      	beq.n	8009a0e <__lo0bits+0x22>
 80099f6:	07da      	lsls	r2, r3, #31
 80099f8:	d424      	bmi.n	8009a44 <__lo0bits+0x58>
 80099fa:	0798      	lsls	r0, r3, #30
 80099fc:	bf49      	itett	mi
 80099fe:	085b      	lsrmi	r3, r3, #1
 8009a00:	089b      	lsrpl	r3, r3, #2
 8009a02:	2001      	movmi	r0, #1
 8009a04:	600b      	strmi	r3, [r1, #0]
 8009a06:	bf5c      	itt	pl
 8009a08:	600b      	strpl	r3, [r1, #0]
 8009a0a:	2002      	movpl	r0, #2
 8009a0c:	4770      	bx	lr
 8009a0e:	b298      	uxth	r0, r3
 8009a10:	b9b0      	cbnz	r0, 8009a40 <__lo0bits+0x54>
 8009a12:	0c1b      	lsrs	r3, r3, #16
 8009a14:	2010      	movs	r0, #16
 8009a16:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009a1a:	bf04      	itt	eq
 8009a1c:	0a1b      	lsreq	r3, r3, #8
 8009a1e:	3008      	addeq	r0, #8
 8009a20:	071a      	lsls	r2, r3, #28
 8009a22:	bf04      	itt	eq
 8009a24:	091b      	lsreq	r3, r3, #4
 8009a26:	3004      	addeq	r0, #4
 8009a28:	079a      	lsls	r2, r3, #30
 8009a2a:	bf04      	itt	eq
 8009a2c:	089b      	lsreq	r3, r3, #2
 8009a2e:	3002      	addeq	r0, #2
 8009a30:	07da      	lsls	r2, r3, #31
 8009a32:	d403      	bmi.n	8009a3c <__lo0bits+0x50>
 8009a34:	085b      	lsrs	r3, r3, #1
 8009a36:	f100 0001 	add.w	r0, r0, #1
 8009a3a:	d005      	beq.n	8009a48 <__lo0bits+0x5c>
 8009a3c:	600b      	str	r3, [r1, #0]
 8009a3e:	4770      	bx	lr
 8009a40:	4610      	mov	r0, r2
 8009a42:	e7e8      	b.n	8009a16 <__lo0bits+0x2a>
 8009a44:	2000      	movs	r0, #0
 8009a46:	4770      	bx	lr
 8009a48:	2020      	movs	r0, #32
 8009a4a:	4770      	bx	lr

08009a4c <__i2b>:
 8009a4c:	b510      	push	{r4, lr}
 8009a4e:	460c      	mov	r4, r1
 8009a50:	2101      	movs	r1, #1
 8009a52:	f7ff feff 	bl	8009854 <_Balloc>
 8009a56:	4602      	mov	r2, r0
 8009a58:	b928      	cbnz	r0, 8009a66 <__i2b+0x1a>
 8009a5a:	4b05      	ldr	r3, [pc, #20]	; (8009a70 <__i2b+0x24>)
 8009a5c:	4805      	ldr	r0, [pc, #20]	; (8009a74 <__i2b+0x28>)
 8009a5e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009a62:	f000 fc9b 	bl	800a39c <__assert_func>
 8009a66:	2301      	movs	r3, #1
 8009a68:	6144      	str	r4, [r0, #20]
 8009a6a:	6103      	str	r3, [r0, #16]
 8009a6c:	bd10      	pop	{r4, pc}
 8009a6e:	bf00      	nop
 8009a70:	0800b563 	.word	0x0800b563
 8009a74:	0800b574 	.word	0x0800b574

08009a78 <__multiply>:
 8009a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a7c:	4614      	mov	r4, r2
 8009a7e:	690a      	ldr	r2, [r1, #16]
 8009a80:	6923      	ldr	r3, [r4, #16]
 8009a82:	429a      	cmp	r2, r3
 8009a84:	bfb8      	it	lt
 8009a86:	460b      	movlt	r3, r1
 8009a88:	460d      	mov	r5, r1
 8009a8a:	bfbc      	itt	lt
 8009a8c:	4625      	movlt	r5, r4
 8009a8e:	461c      	movlt	r4, r3
 8009a90:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009a94:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009a98:	68ab      	ldr	r3, [r5, #8]
 8009a9a:	6869      	ldr	r1, [r5, #4]
 8009a9c:	eb0a 0709 	add.w	r7, sl, r9
 8009aa0:	42bb      	cmp	r3, r7
 8009aa2:	b085      	sub	sp, #20
 8009aa4:	bfb8      	it	lt
 8009aa6:	3101      	addlt	r1, #1
 8009aa8:	f7ff fed4 	bl	8009854 <_Balloc>
 8009aac:	b930      	cbnz	r0, 8009abc <__multiply+0x44>
 8009aae:	4602      	mov	r2, r0
 8009ab0:	4b42      	ldr	r3, [pc, #264]	; (8009bbc <__multiply+0x144>)
 8009ab2:	4843      	ldr	r0, [pc, #268]	; (8009bc0 <__multiply+0x148>)
 8009ab4:	f240 115d 	movw	r1, #349	; 0x15d
 8009ab8:	f000 fc70 	bl	800a39c <__assert_func>
 8009abc:	f100 0614 	add.w	r6, r0, #20
 8009ac0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009ac4:	4633      	mov	r3, r6
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	4543      	cmp	r3, r8
 8009aca:	d31e      	bcc.n	8009b0a <__multiply+0x92>
 8009acc:	f105 0c14 	add.w	ip, r5, #20
 8009ad0:	f104 0314 	add.w	r3, r4, #20
 8009ad4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009ad8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009adc:	9202      	str	r2, [sp, #8]
 8009ade:	ebac 0205 	sub.w	r2, ip, r5
 8009ae2:	3a15      	subs	r2, #21
 8009ae4:	f022 0203 	bic.w	r2, r2, #3
 8009ae8:	3204      	adds	r2, #4
 8009aea:	f105 0115 	add.w	r1, r5, #21
 8009aee:	458c      	cmp	ip, r1
 8009af0:	bf38      	it	cc
 8009af2:	2204      	movcc	r2, #4
 8009af4:	9201      	str	r2, [sp, #4]
 8009af6:	9a02      	ldr	r2, [sp, #8]
 8009af8:	9303      	str	r3, [sp, #12]
 8009afa:	429a      	cmp	r2, r3
 8009afc:	d808      	bhi.n	8009b10 <__multiply+0x98>
 8009afe:	2f00      	cmp	r7, #0
 8009b00:	dc55      	bgt.n	8009bae <__multiply+0x136>
 8009b02:	6107      	str	r7, [r0, #16]
 8009b04:	b005      	add	sp, #20
 8009b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b0a:	f843 2b04 	str.w	r2, [r3], #4
 8009b0e:	e7db      	b.n	8009ac8 <__multiply+0x50>
 8009b10:	f8b3 a000 	ldrh.w	sl, [r3]
 8009b14:	f1ba 0f00 	cmp.w	sl, #0
 8009b18:	d020      	beq.n	8009b5c <__multiply+0xe4>
 8009b1a:	f105 0e14 	add.w	lr, r5, #20
 8009b1e:	46b1      	mov	r9, r6
 8009b20:	2200      	movs	r2, #0
 8009b22:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009b26:	f8d9 b000 	ldr.w	fp, [r9]
 8009b2a:	b2a1      	uxth	r1, r4
 8009b2c:	fa1f fb8b 	uxth.w	fp, fp
 8009b30:	fb0a b101 	mla	r1, sl, r1, fp
 8009b34:	4411      	add	r1, r2
 8009b36:	f8d9 2000 	ldr.w	r2, [r9]
 8009b3a:	0c24      	lsrs	r4, r4, #16
 8009b3c:	0c12      	lsrs	r2, r2, #16
 8009b3e:	fb0a 2404 	mla	r4, sl, r4, r2
 8009b42:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009b46:	b289      	uxth	r1, r1
 8009b48:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009b4c:	45f4      	cmp	ip, lr
 8009b4e:	f849 1b04 	str.w	r1, [r9], #4
 8009b52:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009b56:	d8e4      	bhi.n	8009b22 <__multiply+0xaa>
 8009b58:	9901      	ldr	r1, [sp, #4]
 8009b5a:	5072      	str	r2, [r6, r1]
 8009b5c:	9a03      	ldr	r2, [sp, #12]
 8009b5e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009b62:	3304      	adds	r3, #4
 8009b64:	f1b9 0f00 	cmp.w	r9, #0
 8009b68:	d01f      	beq.n	8009baa <__multiply+0x132>
 8009b6a:	6834      	ldr	r4, [r6, #0]
 8009b6c:	f105 0114 	add.w	r1, r5, #20
 8009b70:	46b6      	mov	lr, r6
 8009b72:	f04f 0a00 	mov.w	sl, #0
 8009b76:	880a      	ldrh	r2, [r1, #0]
 8009b78:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009b7c:	fb09 b202 	mla	r2, r9, r2, fp
 8009b80:	4492      	add	sl, r2
 8009b82:	b2a4      	uxth	r4, r4
 8009b84:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009b88:	f84e 4b04 	str.w	r4, [lr], #4
 8009b8c:	f851 4b04 	ldr.w	r4, [r1], #4
 8009b90:	f8be 2000 	ldrh.w	r2, [lr]
 8009b94:	0c24      	lsrs	r4, r4, #16
 8009b96:	fb09 2404 	mla	r4, r9, r4, r2
 8009b9a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009b9e:	458c      	cmp	ip, r1
 8009ba0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009ba4:	d8e7      	bhi.n	8009b76 <__multiply+0xfe>
 8009ba6:	9a01      	ldr	r2, [sp, #4]
 8009ba8:	50b4      	str	r4, [r6, r2]
 8009baa:	3604      	adds	r6, #4
 8009bac:	e7a3      	b.n	8009af6 <__multiply+0x7e>
 8009bae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d1a5      	bne.n	8009b02 <__multiply+0x8a>
 8009bb6:	3f01      	subs	r7, #1
 8009bb8:	e7a1      	b.n	8009afe <__multiply+0x86>
 8009bba:	bf00      	nop
 8009bbc:	0800b563 	.word	0x0800b563
 8009bc0:	0800b574 	.word	0x0800b574

08009bc4 <__pow5mult>:
 8009bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bc8:	4615      	mov	r5, r2
 8009bca:	f012 0203 	ands.w	r2, r2, #3
 8009bce:	4606      	mov	r6, r0
 8009bd0:	460f      	mov	r7, r1
 8009bd2:	d007      	beq.n	8009be4 <__pow5mult+0x20>
 8009bd4:	4c25      	ldr	r4, [pc, #148]	; (8009c6c <__pow5mult+0xa8>)
 8009bd6:	3a01      	subs	r2, #1
 8009bd8:	2300      	movs	r3, #0
 8009bda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009bde:	f7ff fe9b 	bl	8009918 <__multadd>
 8009be2:	4607      	mov	r7, r0
 8009be4:	10ad      	asrs	r5, r5, #2
 8009be6:	d03d      	beq.n	8009c64 <__pow5mult+0xa0>
 8009be8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009bea:	b97c      	cbnz	r4, 8009c0c <__pow5mult+0x48>
 8009bec:	2010      	movs	r0, #16
 8009bee:	f7ff fe1b 	bl	8009828 <malloc>
 8009bf2:	4602      	mov	r2, r0
 8009bf4:	6270      	str	r0, [r6, #36]	; 0x24
 8009bf6:	b928      	cbnz	r0, 8009c04 <__pow5mult+0x40>
 8009bf8:	4b1d      	ldr	r3, [pc, #116]	; (8009c70 <__pow5mult+0xac>)
 8009bfa:	481e      	ldr	r0, [pc, #120]	; (8009c74 <__pow5mult+0xb0>)
 8009bfc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009c00:	f000 fbcc 	bl	800a39c <__assert_func>
 8009c04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c08:	6004      	str	r4, [r0, #0]
 8009c0a:	60c4      	str	r4, [r0, #12]
 8009c0c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009c10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009c14:	b94c      	cbnz	r4, 8009c2a <__pow5mult+0x66>
 8009c16:	f240 2171 	movw	r1, #625	; 0x271
 8009c1a:	4630      	mov	r0, r6
 8009c1c:	f7ff ff16 	bl	8009a4c <__i2b>
 8009c20:	2300      	movs	r3, #0
 8009c22:	f8c8 0008 	str.w	r0, [r8, #8]
 8009c26:	4604      	mov	r4, r0
 8009c28:	6003      	str	r3, [r0, #0]
 8009c2a:	f04f 0900 	mov.w	r9, #0
 8009c2e:	07eb      	lsls	r3, r5, #31
 8009c30:	d50a      	bpl.n	8009c48 <__pow5mult+0x84>
 8009c32:	4639      	mov	r1, r7
 8009c34:	4622      	mov	r2, r4
 8009c36:	4630      	mov	r0, r6
 8009c38:	f7ff ff1e 	bl	8009a78 <__multiply>
 8009c3c:	4639      	mov	r1, r7
 8009c3e:	4680      	mov	r8, r0
 8009c40:	4630      	mov	r0, r6
 8009c42:	f7ff fe47 	bl	80098d4 <_Bfree>
 8009c46:	4647      	mov	r7, r8
 8009c48:	106d      	asrs	r5, r5, #1
 8009c4a:	d00b      	beq.n	8009c64 <__pow5mult+0xa0>
 8009c4c:	6820      	ldr	r0, [r4, #0]
 8009c4e:	b938      	cbnz	r0, 8009c60 <__pow5mult+0x9c>
 8009c50:	4622      	mov	r2, r4
 8009c52:	4621      	mov	r1, r4
 8009c54:	4630      	mov	r0, r6
 8009c56:	f7ff ff0f 	bl	8009a78 <__multiply>
 8009c5a:	6020      	str	r0, [r4, #0]
 8009c5c:	f8c0 9000 	str.w	r9, [r0]
 8009c60:	4604      	mov	r4, r0
 8009c62:	e7e4      	b.n	8009c2e <__pow5mult+0x6a>
 8009c64:	4638      	mov	r0, r7
 8009c66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c6a:	bf00      	nop
 8009c6c:	0800b6c8 	.word	0x0800b6c8
 8009c70:	0800b4ed 	.word	0x0800b4ed
 8009c74:	0800b574 	.word	0x0800b574

08009c78 <__lshift>:
 8009c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c7c:	460c      	mov	r4, r1
 8009c7e:	6849      	ldr	r1, [r1, #4]
 8009c80:	6923      	ldr	r3, [r4, #16]
 8009c82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009c86:	68a3      	ldr	r3, [r4, #8]
 8009c88:	4607      	mov	r7, r0
 8009c8a:	4691      	mov	r9, r2
 8009c8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c90:	f108 0601 	add.w	r6, r8, #1
 8009c94:	42b3      	cmp	r3, r6
 8009c96:	db0b      	blt.n	8009cb0 <__lshift+0x38>
 8009c98:	4638      	mov	r0, r7
 8009c9a:	f7ff fddb 	bl	8009854 <_Balloc>
 8009c9e:	4605      	mov	r5, r0
 8009ca0:	b948      	cbnz	r0, 8009cb6 <__lshift+0x3e>
 8009ca2:	4602      	mov	r2, r0
 8009ca4:	4b28      	ldr	r3, [pc, #160]	; (8009d48 <__lshift+0xd0>)
 8009ca6:	4829      	ldr	r0, [pc, #164]	; (8009d4c <__lshift+0xd4>)
 8009ca8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009cac:	f000 fb76 	bl	800a39c <__assert_func>
 8009cb0:	3101      	adds	r1, #1
 8009cb2:	005b      	lsls	r3, r3, #1
 8009cb4:	e7ee      	b.n	8009c94 <__lshift+0x1c>
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	f100 0114 	add.w	r1, r0, #20
 8009cbc:	f100 0210 	add.w	r2, r0, #16
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	4553      	cmp	r3, sl
 8009cc4:	db33      	blt.n	8009d2e <__lshift+0xb6>
 8009cc6:	6920      	ldr	r0, [r4, #16]
 8009cc8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ccc:	f104 0314 	add.w	r3, r4, #20
 8009cd0:	f019 091f 	ands.w	r9, r9, #31
 8009cd4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009cd8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009cdc:	d02b      	beq.n	8009d36 <__lshift+0xbe>
 8009cde:	f1c9 0e20 	rsb	lr, r9, #32
 8009ce2:	468a      	mov	sl, r1
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	6818      	ldr	r0, [r3, #0]
 8009ce8:	fa00 f009 	lsl.w	r0, r0, r9
 8009cec:	4302      	orrs	r2, r0
 8009cee:	f84a 2b04 	str.w	r2, [sl], #4
 8009cf2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cf6:	459c      	cmp	ip, r3
 8009cf8:	fa22 f20e 	lsr.w	r2, r2, lr
 8009cfc:	d8f3      	bhi.n	8009ce6 <__lshift+0x6e>
 8009cfe:	ebac 0304 	sub.w	r3, ip, r4
 8009d02:	3b15      	subs	r3, #21
 8009d04:	f023 0303 	bic.w	r3, r3, #3
 8009d08:	3304      	adds	r3, #4
 8009d0a:	f104 0015 	add.w	r0, r4, #21
 8009d0e:	4584      	cmp	ip, r0
 8009d10:	bf38      	it	cc
 8009d12:	2304      	movcc	r3, #4
 8009d14:	50ca      	str	r2, [r1, r3]
 8009d16:	b10a      	cbz	r2, 8009d1c <__lshift+0xa4>
 8009d18:	f108 0602 	add.w	r6, r8, #2
 8009d1c:	3e01      	subs	r6, #1
 8009d1e:	4638      	mov	r0, r7
 8009d20:	612e      	str	r6, [r5, #16]
 8009d22:	4621      	mov	r1, r4
 8009d24:	f7ff fdd6 	bl	80098d4 <_Bfree>
 8009d28:	4628      	mov	r0, r5
 8009d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d2e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009d32:	3301      	adds	r3, #1
 8009d34:	e7c5      	b.n	8009cc2 <__lshift+0x4a>
 8009d36:	3904      	subs	r1, #4
 8009d38:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d3c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009d40:	459c      	cmp	ip, r3
 8009d42:	d8f9      	bhi.n	8009d38 <__lshift+0xc0>
 8009d44:	e7ea      	b.n	8009d1c <__lshift+0xa4>
 8009d46:	bf00      	nop
 8009d48:	0800b563 	.word	0x0800b563
 8009d4c:	0800b574 	.word	0x0800b574

08009d50 <__mcmp>:
 8009d50:	b530      	push	{r4, r5, lr}
 8009d52:	6902      	ldr	r2, [r0, #16]
 8009d54:	690c      	ldr	r4, [r1, #16]
 8009d56:	1b12      	subs	r2, r2, r4
 8009d58:	d10e      	bne.n	8009d78 <__mcmp+0x28>
 8009d5a:	f100 0314 	add.w	r3, r0, #20
 8009d5e:	3114      	adds	r1, #20
 8009d60:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009d64:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009d68:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009d6c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009d70:	42a5      	cmp	r5, r4
 8009d72:	d003      	beq.n	8009d7c <__mcmp+0x2c>
 8009d74:	d305      	bcc.n	8009d82 <__mcmp+0x32>
 8009d76:	2201      	movs	r2, #1
 8009d78:	4610      	mov	r0, r2
 8009d7a:	bd30      	pop	{r4, r5, pc}
 8009d7c:	4283      	cmp	r3, r0
 8009d7e:	d3f3      	bcc.n	8009d68 <__mcmp+0x18>
 8009d80:	e7fa      	b.n	8009d78 <__mcmp+0x28>
 8009d82:	f04f 32ff 	mov.w	r2, #4294967295
 8009d86:	e7f7      	b.n	8009d78 <__mcmp+0x28>

08009d88 <__mdiff>:
 8009d88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d8c:	460c      	mov	r4, r1
 8009d8e:	4606      	mov	r6, r0
 8009d90:	4611      	mov	r1, r2
 8009d92:	4620      	mov	r0, r4
 8009d94:	4617      	mov	r7, r2
 8009d96:	f7ff ffdb 	bl	8009d50 <__mcmp>
 8009d9a:	1e05      	subs	r5, r0, #0
 8009d9c:	d110      	bne.n	8009dc0 <__mdiff+0x38>
 8009d9e:	4629      	mov	r1, r5
 8009da0:	4630      	mov	r0, r6
 8009da2:	f7ff fd57 	bl	8009854 <_Balloc>
 8009da6:	b930      	cbnz	r0, 8009db6 <__mdiff+0x2e>
 8009da8:	4b39      	ldr	r3, [pc, #228]	; (8009e90 <__mdiff+0x108>)
 8009daa:	4602      	mov	r2, r0
 8009dac:	f240 2132 	movw	r1, #562	; 0x232
 8009db0:	4838      	ldr	r0, [pc, #224]	; (8009e94 <__mdiff+0x10c>)
 8009db2:	f000 faf3 	bl	800a39c <__assert_func>
 8009db6:	2301      	movs	r3, #1
 8009db8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009dbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dc0:	bfa4      	itt	ge
 8009dc2:	463b      	movge	r3, r7
 8009dc4:	4627      	movge	r7, r4
 8009dc6:	4630      	mov	r0, r6
 8009dc8:	6879      	ldr	r1, [r7, #4]
 8009dca:	bfa6      	itte	ge
 8009dcc:	461c      	movge	r4, r3
 8009dce:	2500      	movge	r5, #0
 8009dd0:	2501      	movlt	r5, #1
 8009dd2:	f7ff fd3f 	bl	8009854 <_Balloc>
 8009dd6:	b920      	cbnz	r0, 8009de2 <__mdiff+0x5a>
 8009dd8:	4b2d      	ldr	r3, [pc, #180]	; (8009e90 <__mdiff+0x108>)
 8009dda:	4602      	mov	r2, r0
 8009ddc:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009de0:	e7e6      	b.n	8009db0 <__mdiff+0x28>
 8009de2:	693e      	ldr	r6, [r7, #16]
 8009de4:	60c5      	str	r5, [r0, #12]
 8009de6:	6925      	ldr	r5, [r4, #16]
 8009de8:	f107 0114 	add.w	r1, r7, #20
 8009dec:	f104 0914 	add.w	r9, r4, #20
 8009df0:	f100 0e14 	add.w	lr, r0, #20
 8009df4:	f107 0210 	add.w	r2, r7, #16
 8009df8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009dfc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009e00:	46f2      	mov	sl, lr
 8009e02:	2700      	movs	r7, #0
 8009e04:	f859 3b04 	ldr.w	r3, [r9], #4
 8009e08:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009e0c:	fa1f f883 	uxth.w	r8, r3
 8009e10:	fa17 f78b 	uxtah	r7, r7, fp
 8009e14:	0c1b      	lsrs	r3, r3, #16
 8009e16:	eba7 0808 	sub.w	r8, r7, r8
 8009e1a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009e1e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009e22:	fa1f f888 	uxth.w	r8, r8
 8009e26:	141f      	asrs	r7, r3, #16
 8009e28:	454d      	cmp	r5, r9
 8009e2a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009e2e:	f84a 3b04 	str.w	r3, [sl], #4
 8009e32:	d8e7      	bhi.n	8009e04 <__mdiff+0x7c>
 8009e34:	1b2b      	subs	r3, r5, r4
 8009e36:	3b15      	subs	r3, #21
 8009e38:	f023 0303 	bic.w	r3, r3, #3
 8009e3c:	3304      	adds	r3, #4
 8009e3e:	3415      	adds	r4, #21
 8009e40:	42a5      	cmp	r5, r4
 8009e42:	bf38      	it	cc
 8009e44:	2304      	movcc	r3, #4
 8009e46:	4419      	add	r1, r3
 8009e48:	4473      	add	r3, lr
 8009e4a:	469e      	mov	lr, r3
 8009e4c:	460d      	mov	r5, r1
 8009e4e:	4565      	cmp	r5, ip
 8009e50:	d30e      	bcc.n	8009e70 <__mdiff+0xe8>
 8009e52:	f10c 0203 	add.w	r2, ip, #3
 8009e56:	1a52      	subs	r2, r2, r1
 8009e58:	f022 0203 	bic.w	r2, r2, #3
 8009e5c:	3903      	subs	r1, #3
 8009e5e:	458c      	cmp	ip, r1
 8009e60:	bf38      	it	cc
 8009e62:	2200      	movcc	r2, #0
 8009e64:	441a      	add	r2, r3
 8009e66:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009e6a:	b17b      	cbz	r3, 8009e8c <__mdiff+0x104>
 8009e6c:	6106      	str	r6, [r0, #16]
 8009e6e:	e7a5      	b.n	8009dbc <__mdiff+0x34>
 8009e70:	f855 8b04 	ldr.w	r8, [r5], #4
 8009e74:	fa17 f488 	uxtah	r4, r7, r8
 8009e78:	1422      	asrs	r2, r4, #16
 8009e7a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009e7e:	b2a4      	uxth	r4, r4
 8009e80:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009e84:	f84e 4b04 	str.w	r4, [lr], #4
 8009e88:	1417      	asrs	r7, r2, #16
 8009e8a:	e7e0      	b.n	8009e4e <__mdiff+0xc6>
 8009e8c:	3e01      	subs	r6, #1
 8009e8e:	e7ea      	b.n	8009e66 <__mdiff+0xde>
 8009e90:	0800b563 	.word	0x0800b563
 8009e94:	0800b574 	.word	0x0800b574

08009e98 <__d2b>:
 8009e98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009e9c:	4689      	mov	r9, r1
 8009e9e:	2101      	movs	r1, #1
 8009ea0:	ec57 6b10 	vmov	r6, r7, d0
 8009ea4:	4690      	mov	r8, r2
 8009ea6:	f7ff fcd5 	bl	8009854 <_Balloc>
 8009eaa:	4604      	mov	r4, r0
 8009eac:	b930      	cbnz	r0, 8009ebc <__d2b+0x24>
 8009eae:	4602      	mov	r2, r0
 8009eb0:	4b25      	ldr	r3, [pc, #148]	; (8009f48 <__d2b+0xb0>)
 8009eb2:	4826      	ldr	r0, [pc, #152]	; (8009f4c <__d2b+0xb4>)
 8009eb4:	f240 310a 	movw	r1, #778	; 0x30a
 8009eb8:	f000 fa70 	bl	800a39c <__assert_func>
 8009ebc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009ec0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009ec4:	bb35      	cbnz	r5, 8009f14 <__d2b+0x7c>
 8009ec6:	2e00      	cmp	r6, #0
 8009ec8:	9301      	str	r3, [sp, #4]
 8009eca:	d028      	beq.n	8009f1e <__d2b+0x86>
 8009ecc:	4668      	mov	r0, sp
 8009ece:	9600      	str	r6, [sp, #0]
 8009ed0:	f7ff fd8c 	bl	80099ec <__lo0bits>
 8009ed4:	9900      	ldr	r1, [sp, #0]
 8009ed6:	b300      	cbz	r0, 8009f1a <__d2b+0x82>
 8009ed8:	9a01      	ldr	r2, [sp, #4]
 8009eda:	f1c0 0320 	rsb	r3, r0, #32
 8009ede:	fa02 f303 	lsl.w	r3, r2, r3
 8009ee2:	430b      	orrs	r3, r1
 8009ee4:	40c2      	lsrs	r2, r0
 8009ee6:	6163      	str	r3, [r4, #20]
 8009ee8:	9201      	str	r2, [sp, #4]
 8009eea:	9b01      	ldr	r3, [sp, #4]
 8009eec:	61a3      	str	r3, [r4, #24]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	bf14      	ite	ne
 8009ef2:	2202      	movne	r2, #2
 8009ef4:	2201      	moveq	r2, #1
 8009ef6:	6122      	str	r2, [r4, #16]
 8009ef8:	b1d5      	cbz	r5, 8009f30 <__d2b+0x98>
 8009efa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009efe:	4405      	add	r5, r0
 8009f00:	f8c9 5000 	str.w	r5, [r9]
 8009f04:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009f08:	f8c8 0000 	str.w	r0, [r8]
 8009f0c:	4620      	mov	r0, r4
 8009f0e:	b003      	add	sp, #12
 8009f10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f18:	e7d5      	b.n	8009ec6 <__d2b+0x2e>
 8009f1a:	6161      	str	r1, [r4, #20]
 8009f1c:	e7e5      	b.n	8009eea <__d2b+0x52>
 8009f1e:	a801      	add	r0, sp, #4
 8009f20:	f7ff fd64 	bl	80099ec <__lo0bits>
 8009f24:	9b01      	ldr	r3, [sp, #4]
 8009f26:	6163      	str	r3, [r4, #20]
 8009f28:	2201      	movs	r2, #1
 8009f2a:	6122      	str	r2, [r4, #16]
 8009f2c:	3020      	adds	r0, #32
 8009f2e:	e7e3      	b.n	8009ef8 <__d2b+0x60>
 8009f30:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009f34:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009f38:	f8c9 0000 	str.w	r0, [r9]
 8009f3c:	6918      	ldr	r0, [r3, #16]
 8009f3e:	f7ff fd35 	bl	80099ac <__hi0bits>
 8009f42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009f46:	e7df      	b.n	8009f08 <__d2b+0x70>
 8009f48:	0800b563 	.word	0x0800b563
 8009f4c:	0800b574 	.word	0x0800b574

08009f50 <_calloc_r>:
 8009f50:	b513      	push	{r0, r1, r4, lr}
 8009f52:	434a      	muls	r2, r1
 8009f54:	4611      	mov	r1, r2
 8009f56:	9201      	str	r2, [sp, #4]
 8009f58:	f000 f85a 	bl	800a010 <_malloc_r>
 8009f5c:	4604      	mov	r4, r0
 8009f5e:	b118      	cbz	r0, 8009f68 <_calloc_r+0x18>
 8009f60:	9a01      	ldr	r2, [sp, #4]
 8009f62:	2100      	movs	r1, #0
 8009f64:	f7fe f952 	bl	800820c <memset>
 8009f68:	4620      	mov	r0, r4
 8009f6a:	b002      	add	sp, #8
 8009f6c:	bd10      	pop	{r4, pc}
	...

08009f70 <_free_r>:
 8009f70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f72:	2900      	cmp	r1, #0
 8009f74:	d048      	beq.n	800a008 <_free_r+0x98>
 8009f76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f7a:	9001      	str	r0, [sp, #4]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	f1a1 0404 	sub.w	r4, r1, #4
 8009f82:	bfb8      	it	lt
 8009f84:	18e4      	addlt	r4, r4, r3
 8009f86:	f000 fa65 	bl	800a454 <__malloc_lock>
 8009f8a:	4a20      	ldr	r2, [pc, #128]	; (800a00c <_free_r+0x9c>)
 8009f8c:	9801      	ldr	r0, [sp, #4]
 8009f8e:	6813      	ldr	r3, [r2, #0]
 8009f90:	4615      	mov	r5, r2
 8009f92:	b933      	cbnz	r3, 8009fa2 <_free_r+0x32>
 8009f94:	6063      	str	r3, [r4, #4]
 8009f96:	6014      	str	r4, [r2, #0]
 8009f98:	b003      	add	sp, #12
 8009f9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f9e:	f000 ba5f 	b.w	800a460 <__malloc_unlock>
 8009fa2:	42a3      	cmp	r3, r4
 8009fa4:	d90b      	bls.n	8009fbe <_free_r+0x4e>
 8009fa6:	6821      	ldr	r1, [r4, #0]
 8009fa8:	1862      	adds	r2, r4, r1
 8009faa:	4293      	cmp	r3, r2
 8009fac:	bf04      	itt	eq
 8009fae:	681a      	ldreq	r2, [r3, #0]
 8009fb0:	685b      	ldreq	r3, [r3, #4]
 8009fb2:	6063      	str	r3, [r4, #4]
 8009fb4:	bf04      	itt	eq
 8009fb6:	1852      	addeq	r2, r2, r1
 8009fb8:	6022      	streq	r2, [r4, #0]
 8009fba:	602c      	str	r4, [r5, #0]
 8009fbc:	e7ec      	b.n	8009f98 <_free_r+0x28>
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	685b      	ldr	r3, [r3, #4]
 8009fc2:	b10b      	cbz	r3, 8009fc8 <_free_r+0x58>
 8009fc4:	42a3      	cmp	r3, r4
 8009fc6:	d9fa      	bls.n	8009fbe <_free_r+0x4e>
 8009fc8:	6811      	ldr	r1, [r2, #0]
 8009fca:	1855      	adds	r5, r2, r1
 8009fcc:	42a5      	cmp	r5, r4
 8009fce:	d10b      	bne.n	8009fe8 <_free_r+0x78>
 8009fd0:	6824      	ldr	r4, [r4, #0]
 8009fd2:	4421      	add	r1, r4
 8009fd4:	1854      	adds	r4, r2, r1
 8009fd6:	42a3      	cmp	r3, r4
 8009fd8:	6011      	str	r1, [r2, #0]
 8009fda:	d1dd      	bne.n	8009f98 <_free_r+0x28>
 8009fdc:	681c      	ldr	r4, [r3, #0]
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	6053      	str	r3, [r2, #4]
 8009fe2:	4421      	add	r1, r4
 8009fe4:	6011      	str	r1, [r2, #0]
 8009fe6:	e7d7      	b.n	8009f98 <_free_r+0x28>
 8009fe8:	d902      	bls.n	8009ff0 <_free_r+0x80>
 8009fea:	230c      	movs	r3, #12
 8009fec:	6003      	str	r3, [r0, #0]
 8009fee:	e7d3      	b.n	8009f98 <_free_r+0x28>
 8009ff0:	6825      	ldr	r5, [r4, #0]
 8009ff2:	1961      	adds	r1, r4, r5
 8009ff4:	428b      	cmp	r3, r1
 8009ff6:	bf04      	itt	eq
 8009ff8:	6819      	ldreq	r1, [r3, #0]
 8009ffa:	685b      	ldreq	r3, [r3, #4]
 8009ffc:	6063      	str	r3, [r4, #4]
 8009ffe:	bf04      	itt	eq
 800a000:	1949      	addeq	r1, r1, r5
 800a002:	6021      	streq	r1, [r4, #0]
 800a004:	6054      	str	r4, [r2, #4]
 800a006:	e7c7      	b.n	8009f98 <_free_r+0x28>
 800a008:	b003      	add	sp, #12
 800a00a:	bd30      	pop	{r4, r5, pc}
 800a00c:	20000270 	.word	0x20000270

0800a010 <_malloc_r>:
 800a010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a012:	1ccd      	adds	r5, r1, #3
 800a014:	f025 0503 	bic.w	r5, r5, #3
 800a018:	3508      	adds	r5, #8
 800a01a:	2d0c      	cmp	r5, #12
 800a01c:	bf38      	it	cc
 800a01e:	250c      	movcc	r5, #12
 800a020:	2d00      	cmp	r5, #0
 800a022:	4606      	mov	r6, r0
 800a024:	db01      	blt.n	800a02a <_malloc_r+0x1a>
 800a026:	42a9      	cmp	r1, r5
 800a028:	d903      	bls.n	800a032 <_malloc_r+0x22>
 800a02a:	230c      	movs	r3, #12
 800a02c:	6033      	str	r3, [r6, #0]
 800a02e:	2000      	movs	r0, #0
 800a030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a032:	f000 fa0f 	bl	800a454 <__malloc_lock>
 800a036:	4921      	ldr	r1, [pc, #132]	; (800a0bc <_malloc_r+0xac>)
 800a038:	680a      	ldr	r2, [r1, #0]
 800a03a:	4614      	mov	r4, r2
 800a03c:	b99c      	cbnz	r4, 800a066 <_malloc_r+0x56>
 800a03e:	4f20      	ldr	r7, [pc, #128]	; (800a0c0 <_malloc_r+0xb0>)
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	b923      	cbnz	r3, 800a04e <_malloc_r+0x3e>
 800a044:	4621      	mov	r1, r4
 800a046:	4630      	mov	r0, r6
 800a048:	f000 f998 	bl	800a37c <_sbrk_r>
 800a04c:	6038      	str	r0, [r7, #0]
 800a04e:	4629      	mov	r1, r5
 800a050:	4630      	mov	r0, r6
 800a052:	f000 f993 	bl	800a37c <_sbrk_r>
 800a056:	1c43      	adds	r3, r0, #1
 800a058:	d123      	bne.n	800a0a2 <_malloc_r+0x92>
 800a05a:	230c      	movs	r3, #12
 800a05c:	6033      	str	r3, [r6, #0]
 800a05e:	4630      	mov	r0, r6
 800a060:	f000 f9fe 	bl	800a460 <__malloc_unlock>
 800a064:	e7e3      	b.n	800a02e <_malloc_r+0x1e>
 800a066:	6823      	ldr	r3, [r4, #0]
 800a068:	1b5b      	subs	r3, r3, r5
 800a06a:	d417      	bmi.n	800a09c <_malloc_r+0x8c>
 800a06c:	2b0b      	cmp	r3, #11
 800a06e:	d903      	bls.n	800a078 <_malloc_r+0x68>
 800a070:	6023      	str	r3, [r4, #0]
 800a072:	441c      	add	r4, r3
 800a074:	6025      	str	r5, [r4, #0]
 800a076:	e004      	b.n	800a082 <_malloc_r+0x72>
 800a078:	6863      	ldr	r3, [r4, #4]
 800a07a:	42a2      	cmp	r2, r4
 800a07c:	bf0c      	ite	eq
 800a07e:	600b      	streq	r3, [r1, #0]
 800a080:	6053      	strne	r3, [r2, #4]
 800a082:	4630      	mov	r0, r6
 800a084:	f000 f9ec 	bl	800a460 <__malloc_unlock>
 800a088:	f104 000b 	add.w	r0, r4, #11
 800a08c:	1d23      	adds	r3, r4, #4
 800a08e:	f020 0007 	bic.w	r0, r0, #7
 800a092:	1ac2      	subs	r2, r0, r3
 800a094:	d0cc      	beq.n	800a030 <_malloc_r+0x20>
 800a096:	1a1b      	subs	r3, r3, r0
 800a098:	50a3      	str	r3, [r4, r2]
 800a09a:	e7c9      	b.n	800a030 <_malloc_r+0x20>
 800a09c:	4622      	mov	r2, r4
 800a09e:	6864      	ldr	r4, [r4, #4]
 800a0a0:	e7cc      	b.n	800a03c <_malloc_r+0x2c>
 800a0a2:	1cc4      	adds	r4, r0, #3
 800a0a4:	f024 0403 	bic.w	r4, r4, #3
 800a0a8:	42a0      	cmp	r0, r4
 800a0aa:	d0e3      	beq.n	800a074 <_malloc_r+0x64>
 800a0ac:	1a21      	subs	r1, r4, r0
 800a0ae:	4630      	mov	r0, r6
 800a0b0:	f000 f964 	bl	800a37c <_sbrk_r>
 800a0b4:	3001      	adds	r0, #1
 800a0b6:	d1dd      	bne.n	800a074 <_malloc_r+0x64>
 800a0b8:	e7cf      	b.n	800a05a <_malloc_r+0x4a>
 800a0ba:	bf00      	nop
 800a0bc:	20000270 	.word	0x20000270
 800a0c0:	20000274 	.word	0x20000274

0800a0c4 <__ssputs_r>:
 800a0c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0c8:	688e      	ldr	r6, [r1, #8]
 800a0ca:	429e      	cmp	r6, r3
 800a0cc:	4682      	mov	sl, r0
 800a0ce:	460c      	mov	r4, r1
 800a0d0:	4690      	mov	r8, r2
 800a0d2:	461f      	mov	r7, r3
 800a0d4:	d838      	bhi.n	800a148 <__ssputs_r+0x84>
 800a0d6:	898a      	ldrh	r2, [r1, #12]
 800a0d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a0dc:	d032      	beq.n	800a144 <__ssputs_r+0x80>
 800a0de:	6825      	ldr	r5, [r4, #0]
 800a0e0:	6909      	ldr	r1, [r1, #16]
 800a0e2:	eba5 0901 	sub.w	r9, r5, r1
 800a0e6:	6965      	ldr	r5, [r4, #20]
 800a0e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a0ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a0f0:	3301      	adds	r3, #1
 800a0f2:	444b      	add	r3, r9
 800a0f4:	106d      	asrs	r5, r5, #1
 800a0f6:	429d      	cmp	r5, r3
 800a0f8:	bf38      	it	cc
 800a0fa:	461d      	movcc	r5, r3
 800a0fc:	0553      	lsls	r3, r2, #21
 800a0fe:	d531      	bpl.n	800a164 <__ssputs_r+0xa0>
 800a100:	4629      	mov	r1, r5
 800a102:	f7ff ff85 	bl	800a010 <_malloc_r>
 800a106:	4606      	mov	r6, r0
 800a108:	b950      	cbnz	r0, 800a120 <__ssputs_r+0x5c>
 800a10a:	230c      	movs	r3, #12
 800a10c:	f8ca 3000 	str.w	r3, [sl]
 800a110:	89a3      	ldrh	r3, [r4, #12]
 800a112:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a116:	81a3      	strh	r3, [r4, #12]
 800a118:	f04f 30ff 	mov.w	r0, #4294967295
 800a11c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a120:	6921      	ldr	r1, [r4, #16]
 800a122:	464a      	mov	r2, r9
 800a124:	f7ff fb88 	bl	8009838 <memcpy>
 800a128:	89a3      	ldrh	r3, [r4, #12]
 800a12a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a12e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a132:	81a3      	strh	r3, [r4, #12]
 800a134:	6126      	str	r6, [r4, #16]
 800a136:	6165      	str	r5, [r4, #20]
 800a138:	444e      	add	r6, r9
 800a13a:	eba5 0509 	sub.w	r5, r5, r9
 800a13e:	6026      	str	r6, [r4, #0]
 800a140:	60a5      	str	r5, [r4, #8]
 800a142:	463e      	mov	r6, r7
 800a144:	42be      	cmp	r6, r7
 800a146:	d900      	bls.n	800a14a <__ssputs_r+0x86>
 800a148:	463e      	mov	r6, r7
 800a14a:	4632      	mov	r2, r6
 800a14c:	6820      	ldr	r0, [r4, #0]
 800a14e:	4641      	mov	r1, r8
 800a150:	f000 f966 	bl	800a420 <memmove>
 800a154:	68a3      	ldr	r3, [r4, #8]
 800a156:	6822      	ldr	r2, [r4, #0]
 800a158:	1b9b      	subs	r3, r3, r6
 800a15a:	4432      	add	r2, r6
 800a15c:	60a3      	str	r3, [r4, #8]
 800a15e:	6022      	str	r2, [r4, #0]
 800a160:	2000      	movs	r0, #0
 800a162:	e7db      	b.n	800a11c <__ssputs_r+0x58>
 800a164:	462a      	mov	r2, r5
 800a166:	f000 f981 	bl	800a46c <_realloc_r>
 800a16a:	4606      	mov	r6, r0
 800a16c:	2800      	cmp	r0, #0
 800a16e:	d1e1      	bne.n	800a134 <__ssputs_r+0x70>
 800a170:	6921      	ldr	r1, [r4, #16]
 800a172:	4650      	mov	r0, sl
 800a174:	f7ff fefc 	bl	8009f70 <_free_r>
 800a178:	e7c7      	b.n	800a10a <__ssputs_r+0x46>
	...

0800a17c <_svfiprintf_r>:
 800a17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a180:	4698      	mov	r8, r3
 800a182:	898b      	ldrh	r3, [r1, #12]
 800a184:	061b      	lsls	r3, r3, #24
 800a186:	b09d      	sub	sp, #116	; 0x74
 800a188:	4607      	mov	r7, r0
 800a18a:	460d      	mov	r5, r1
 800a18c:	4614      	mov	r4, r2
 800a18e:	d50e      	bpl.n	800a1ae <_svfiprintf_r+0x32>
 800a190:	690b      	ldr	r3, [r1, #16]
 800a192:	b963      	cbnz	r3, 800a1ae <_svfiprintf_r+0x32>
 800a194:	2140      	movs	r1, #64	; 0x40
 800a196:	f7ff ff3b 	bl	800a010 <_malloc_r>
 800a19a:	6028      	str	r0, [r5, #0]
 800a19c:	6128      	str	r0, [r5, #16]
 800a19e:	b920      	cbnz	r0, 800a1aa <_svfiprintf_r+0x2e>
 800a1a0:	230c      	movs	r3, #12
 800a1a2:	603b      	str	r3, [r7, #0]
 800a1a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1a8:	e0d1      	b.n	800a34e <_svfiprintf_r+0x1d2>
 800a1aa:	2340      	movs	r3, #64	; 0x40
 800a1ac:	616b      	str	r3, [r5, #20]
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	9309      	str	r3, [sp, #36]	; 0x24
 800a1b2:	2320      	movs	r3, #32
 800a1b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a1b8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1bc:	2330      	movs	r3, #48	; 0x30
 800a1be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a368 <_svfiprintf_r+0x1ec>
 800a1c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a1c6:	f04f 0901 	mov.w	r9, #1
 800a1ca:	4623      	mov	r3, r4
 800a1cc:	469a      	mov	sl, r3
 800a1ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1d2:	b10a      	cbz	r2, 800a1d8 <_svfiprintf_r+0x5c>
 800a1d4:	2a25      	cmp	r2, #37	; 0x25
 800a1d6:	d1f9      	bne.n	800a1cc <_svfiprintf_r+0x50>
 800a1d8:	ebba 0b04 	subs.w	fp, sl, r4
 800a1dc:	d00b      	beq.n	800a1f6 <_svfiprintf_r+0x7a>
 800a1de:	465b      	mov	r3, fp
 800a1e0:	4622      	mov	r2, r4
 800a1e2:	4629      	mov	r1, r5
 800a1e4:	4638      	mov	r0, r7
 800a1e6:	f7ff ff6d 	bl	800a0c4 <__ssputs_r>
 800a1ea:	3001      	adds	r0, #1
 800a1ec:	f000 80aa 	beq.w	800a344 <_svfiprintf_r+0x1c8>
 800a1f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1f2:	445a      	add	r2, fp
 800a1f4:	9209      	str	r2, [sp, #36]	; 0x24
 800a1f6:	f89a 3000 	ldrb.w	r3, [sl]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	f000 80a2 	beq.w	800a344 <_svfiprintf_r+0x1c8>
 800a200:	2300      	movs	r3, #0
 800a202:	f04f 32ff 	mov.w	r2, #4294967295
 800a206:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a20a:	f10a 0a01 	add.w	sl, sl, #1
 800a20e:	9304      	str	r3, [sp, #16]
 800a210:	9307      	str	r3, [sp, #28]
 800a212:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a216:	931a      	str	r3, [sp, #104]	; 0x68
 800a218:	4654      	mov	r4, sl
 800a21a:	2205      	movs	r2, #5
 800a21c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a220:	4851      	ldr	r0, [pc, #324]	; (800a368 <_svfiprintf_r+0x1ec>)
 800a222:	f7f5 ffe5 	bl	80001f0 <memchr>
 800a226:	9a04      	ldr	r2, [sp, #16]
 800a228:	b9d8      	cbnz	r0, 800a262 <_svfiprintf_r+0xe6>
 800a22a:	06d0      	lsls	r0, r2, #27
 800a22c:	bf44      	itt	mi
 800a22e:	2320      	movmi	r3, #32
 800a230:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a234:	0711      	lsls	r1, r2, #28
 800a236:	bf44      	itt	mi
 800a238:	232b      	movmi	r3, #43	; 0x2b
 800a23a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a23e:	f89a 3000 	ldrb.w	r3, [sl]
 800a242:	2b2a      	cmp	r3, #42	; 0x2a
 800a244:	d015      	beq.n	800a272 <_svfiprintf_r+0xf6>
 800a246:	9a07      	ldr	r2, [sp, #28]
 800a248:	4654      	mov	r4, sl
 800a24a:	2000      	movs	r0, #0
 800a24c:	f04f 0c0a 	mov.w	ip, #10
 800a250:	4621      	mov	r1, r4
 800a252:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a256:	3b30      	subs	r3, #48	; 0x30
 800a258:	2b09      	cmp	r3, #9
 800a25a:	d94e      	bls.n	800a2fa <_svfiprintf_r+0x17e>
 800a25c:	b1b0      	cbz	r0, 800a28c <_svfiprintf_r+0x110>
 800a25e:	9207      	str	r2, [sp, #28]
 800a260:	e014      	b.n	800a28c <_svfiprintf_r+0x110>
 800a262:	eba0 0308 	sub.w	r3, r0, r8
 800a266:	fa09 f303 	lsl.w	r3, r9, r3
 800a26a:	4313      	orrs	r3, r2
 800a26c:	9304      	str	r3, [sp, #16]
 800a26e:	46a2      	mov	sl, r4
 800a270:	e7d2      	b.n	800a218 <_svfiprintf_r+0x9c>
 800a272:	9b03      	ldr	r3, [sp, #12]
 800a274:	1d19      	adds	r1, r3, #4
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	9103      	str	r1, [sp, #12]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	bfbb      	ittet	lt
 800a27e:	425b      	neglt	r3, r3
 800a280:	f042 0202 	orrlt.w	r2, r2, #2
 800a284:	9307      	strge	r3, [sp, #28]
 800a286:	9307      	strlt	r3, [sp, #28]
 800a288:	bfb8      	it	lt
 800a28a:	9204      	strlt	r2, [sp, #16]
 800a28c:	7823      	ldrb	r3, [r4, #0]
 800a28e:	2b2e      	cmp	r3, #46	; 0x2e
 800a290:	d10c      	bne.n	800a2ac <_svfiprintf_r+0x130>
 800a292:	7863      	ldrb	r3, [r4, #1]
 800a294:	2b2a      	cmp	r3, #42	; 0x2a
 800a296:	d135      	bne.n	800a304 <_svfiprintf_r+0x188>
 800a298:	9b03      	ldr	r3, [sp, #12]
 800a29a:	1d1a      	adds	r2, r3, #4
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	9203      	str	r2, [sp, #12]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	bfb8      	it	lt
 800a2a4:	f04f 33ff 	movlt.w	r3, #4294967295
 800a2a8:	3402      	adds	r4, #2
 800a2aa:	9305      	str	r3, [sp, #20]
 800a2ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a378 <_svfiprintf_r+0x1fc>
 800a2b0:	7821      	ldrb	r1, [r4, #0]
 800a2b2:	2203      	movs	r2, #3
 800a2b4:	4650      	mov	r0, sl
 800a2b6:	f7f5 ff9b 	bl	80001f0 <memchr>
 800a2ba:	b140      	cbz	r0, 800a2ce <_svfiprintf_r+0x152>
 800a2bc:	2340      	movs	r3, #64	; 0x40
 800a2be:	eba0 000a 	sub.w	r0, r0, sl
 800a2c2:	fa03 f000 	lsl.w	r0, r3, r0
 800a2c6:	9b04      	ldr	r3, [sp, #16]
 800a2c8:	4303      	orrs	r3, r0
 800a2ca:	3401      	adds	r4, #1
 800a2cc:	9304      	str	r3, [sp, #16]
 800a2ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2d2:	4826      	ldr	r0, [pc, #152]	; (800a36c <_svfiprintf_r+0x1f0>)
 800a2d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a2d8:	2206      	movs	r2, #6
 800a2da:	f7f5 ff89 	bl	80001f0 <memchr>
 800a2de:	2800      	cmp	r0, #0
 800a2e0:	d038      	beq.n	800a354 <_svfiprintf_r+0x1d8>
 800a2e2:	4b23      	ldr	r3, [pc, #140]	; (800a370 <_svfiprintf_r+0x1f4>)
 800a2e4:	bb1b      	cbnz	r3, 800a32e <_svfiprintf_r+0x1b2>
 800a2e6:	9b03      	ldr	r3, [sp, #12]
 800a2e8:	3307      	adds	r3, #7
 800a2ea:	f023 0307 	bic.w	r3, r3, #7
 800a2ee:	3308      	adds	r3, #8
 800a2f0:	9303      	str	r3, [sp, #12]
 800a2f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2f4:	4433      	add	r3, r6
 800a2f6:	9309      	str	r3, [sp, #36]	; 0x24
 800a2f8:	e767      	b.n	800a1ca <_svfiprintf_r+0x4e>
 800a2fa:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2fe:	460c      	mov	r4, r1
 800a300:	2001      	movs	r0, #1
 800a302:	e7a5      	b.n	800a250 <_svfiprintf_r+0xd4>
 800a304:	2300      	movs	r3, #0
 800a306:	3401      	adds	r4, #1
 800a308:	9305      	str	r3, [sp, #20]
 800a30a:	4619      	mov	r1, r3
 800a30c:	f04f 0c0a 	mov.w	ip, #10
 800a310:	4620      	mov	r0, r4
 800a312:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a316:	3a30      	subs	r2, #48	; 0x30
 800a318:	2a09      	cmp	r2, #9
 800a31a:	d903      	bls.n	800a324 <_svfiprintf_r+0x1a8>
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d0c5      	beq.n	800a2ac <_svfiprintf_r+0x130>
 800a320:	9105      	str	r1, [sp, #20]
 800a322:	e7c3      	b.n	800a2ac <_svfiprintf_r+0x130>
 800a324:	fb0c 2101 	mla	r1, ip, r1, r2
 800a328:	4604      	mov	r4, r0
 800a32a:	2301      	movs	r3, #1
 800a32c:	e7f0      	b.n	800a310 <_svfiprintf_r+0x194>
 800a32e:	ab03      	add	r3, sp, #12
 800a330:	9300      	str	r3, [sp, #0]
 800a332:	462a      	mov	r2, r5
 800a334:	4b0f      	ldr	r3, [pc, #60]	; (800a374 <_svfiprintf_r+0x1f8>)
 800a336:	a904      	add	r1, sp, #16
 800a338:	4638      	mov	r0, r7
 800a33a:	f7fe f80f 	bl	800835c <_printf_float>
 800a33e:	1c42      	adds	r2, r0, #1
 800a340:	4606      	mov	r6, r0
 800a342:	d1d6      	bne.n	800a2f2 <_svfiprintf_r+0x176>
 800a344:	89ab      	ldrh	r3, [r5, #12]
 800a346:	065b      	lsls	r3, r3, #25
 800a348:	f53f af2c 	bmi.w	800a1a4 <_svfiprintf_r+0x28>
 800a34c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a34e:	b01d      	add	sp, #116	; 0x74
 800a350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a354:	ab03      	add	r3, sp, #12
 800a356:	9300      	str	r3, [sp, #0]
 800a358:	462a      	mov	r2, r5
 800a35a:	4b06      	ldr	r3, [pc, #24]	; (800a374 <_svfiprintf_r+0x1f8>)
 800a35c:	a904      	add	r1, sp, #16
 800a35e:	4638      	mov	r0, r7
 800a360:	f7fe faa0 	bl	80088a4 <_printf_i>
 800a364:	e7eb      	b.n	800a33e <_svfiprintf_r+0x1c2>
 800a366:	bf00      	nop
 800a368:	0800b6d4 	.word	0x0800b6d4
 800a36c:	0800b6de 	.word	0x0800b6de
 800a370:	0800835d 	.word	0x0800835d
 800a374:	0800a0c5 	.word	0x0800a0c5
 800a378:	0800b6da 	.word	0x0800b6da

0800a37c <_sbrk_r>:
 800a37c:	b538      	push	{r3, r4, r5, lr}
 800a37e:	4d06      	ldr	r5, [pc, #24]	; (800a398 <_sbrk_r+0x1c>)
 800a380:	2300      	movs	r3, #0
 800a382:	4604      	mov	r4, r0
 800a384:	4608      	mov	r0, r1
 800a386:	602b      	str	r3, [r5, #0]
 800a388:	f7f8 fcc8 	bl	8002d1c <_sbrk>
 800a38c:	1c43      	adds	r3, r0, #1
 800a38e:	d102      	bne.n	800a396 <_sbrk_r+0x1a>
 800a390:	682b      	ldr	r3, [r5, #0]
 800a392:	b103      	cbz	r3, 800a396 <_sbrk_r+0x1a>
 800a394:	6023      	str	r3, [r4, #0]
 800a396:	bd38      	pop	{r3, r4, r5, pc}
 800a398:	20000524 	.word	0x20000524

0800a39c <__assert_func>:
 800a39c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a39e:	4614      	mov	r4, r2
 800a3a0:	461a      	mov	r2, r3
 800a3a2:	4b09      	ldr	r3, [pc, #36]	; (800a3c8 <__assert_func+0x2c>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4605      	mov	r5, r0
 800a3a8:	68d8      	ldr	r0, [r3, #12]
 800a3aa:	b14c      	cbz	r4, 800a3c0 <__assert_func+0x24>
 800a3ac:	4b07      	ldr	r3, [pc, #28]	; (800a3cc <__assert_func+0x30>)
 800a3ae:	9100      	str	r1, [sp, #0]
 800a3b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a3b4:	4906      	ldr	r1, [pc, #24]	; (800a3d0 <__assert_func+0x34>)
 800a3b6:	462b      	mov	r3, r5
 800a3b8:	f000 f80e 	bl	800a3d8 <fiprintf>
 800a3bc:	f000 faa4 	bl	800a908 <abort>
 800a3c0:	4b04      	ldr	r3, [pc, #16]	; (800a3d4 <__assert_func+0x38>)
 800a3c2:	461c      	mov	r4, r3
 800a3c4:	e7f3      	b.n	800a3ae <__assert_func+0x12>
 800a3c6:	bf00      	nop
 800a3c8:	2000000c 	.word	0x2000000c
 800a3cc:	0800b6e5 	.word	0x0800b6e5
 800a3d0:	0800b6f2 	.word	0x0800b6f2
 800a3d4:	0800b720 	.word	0x0800b720

0800a3d8 <fiprintf>:
 800a3d8:	b40e      	push	{r1, r2, r3}
 800a3da:	b503      	push	{r0, r1, lr}
 800a3dc:	4601      	mov	r1, r0
 800a3de:	ab03      	add	r3, sp, #12
 800a3e0:	4805      	ldr	r0, [pc, #20]	; (800a3f8 <fiprintf+0x20>)
 800a3e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3e6:	6800      	ldr	r0, [r0, #0]
 800a3e8:	9301      	str	r3, [sp, #4]
 800a3ea:	f000 f88f 	bl	800a50c <_vfiprintf_r>
 800a3ee:	b002      	add	sp, #8
 800a3f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3f4:	b003      	add	sp, #12
 800a3f6:	4770      	bx	lr
 800a3f8:	2000000c 	.word	0x2000000c

0800a3fc <__ascii_mbtowc>:
 800a3fc:	b082      	sub	sp, #8
 800a3fe:	b901      	cbnz	r1, 800a402 <__ascii_mbtowc+0x6>
 800a400:	a901      	add	r1, sp, #4
 800a402:	b142      	cbz	r2, 800a416 <__ascii_mbtowc+0x1a>
 800a404:	b14b      	cbz	r3, 800a41a <__ascii_mbtowc+0x1e>
 800a406:	7813      	ldrb	r3, [r2, #0]
 800a408:	600b      	str	r3, [r1, #0]
 800a40a:	7812      	ldrb	r2, [r2, #0]
 800a40c:	1e10      	subs	r0, r2, #0
 800a40e:	bf18      	it	ne
 800a410:	2001      	movne	r0, #1
 800a412:	b002      	add	sp, #8
 800a414:	4770      	bx	lr
 800a416:	4610      	mov	r0, r2
 800a418:	e7fb      	b.n	800a412 <__ascii_mbtowc+0x16>
 800a41a:	f06f 0001 	mvn.w	r0, #1
 800a41e:	e7f8      	b.n	800a412 <__ascii_mbtowc+0x16>

0800a420 <memmove>:
 800a420:	4288      	cmp	r0, r1
 800a422:	b510      	push	{r4, lr}
 800a424:	eb01 0402 	add.w	r4, r1, r2
 800a428:	d902      	bls.n	800a430 <memmove+0x10>
 800a42a:	4284      	cmp	r4, r0
 800a42c:	4623      	mov	r3, r4
 800a42e:	d807      	bhi.n	800a440 <memmove+0x20>
 800a430:	1e43      	subs	r3, r0, #1
 800a432:	42a1      	cmp	r1, r4
 800a434:	d008      	beq.n	800a448 <memmove+0x28>
 800a436:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a43a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a43e:	e7f8      	b.n	800a432 <memmove+0x12>
 800a440:	4402      	add	r2, r0
 800a442:	4601      	mov	r1, r0
 800a444:	428a      	cmp	r2, r1
 800a446:	d100      	bne.n	800a44a <memmove+0x2a>
 800a448:	bd10      	pop	{r4, pc}
 800a44a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a44e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a452:	e7f7      	b.n	800a444 <memmove+0x24>

0800a454 <__malloc_lock>:
 800a454:	4801      	ldr	r0, [pc, #4]	; (800a45c <__malloc_lock+0x8>)
 800a456:	f000 bc17 	b.w	800ac88 <__retarget_lock_acquire_recursive>
 800a45a:	bf00      	nop
 800a45c:	2000052c 	.word	0x2000052c

0800a460 <__malloc_unlock>:
 800a460:	4801      	ldr	r0, [pc, #4]	; (800a468 <__malloc_unlock+0x8>)
 800a462:	f000 bc12 	b.w	800ac8a <__retarget_lock_release_recursive>
 800a466:	bf00      	nop
 800a468:	2000052c 	.word	0x2000052c

0800a46c <_realloc_r>:
 800a46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a46e:	4607      	mov	r7, r0
 800a470:	4614      	mov	r4, r2
 800a472:	460e      	mov	r6, r1
 800a474:	b921      	cbnz	r1, 800a480 <_realloc_r+0x14>
 800a476:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a47a:	4611      	mov	r1, r2
 800a47c:	f7ff bdc8 	b.w	800a010 <_malloc_r>
 800a480:	b922      	cbnz	r2, 800a48c <_realloc_r+0x20>
 800a482:	f7ff fd75 	bl	8009f70 <_free_r>
 800a486:	4625      	mov	r5, r4
 800a488:	4628      	mov	r0, r5
 800a48a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a48c:	f000 fc62 	bl	800ad54 <_malloc_usable_size_r>
 800a490:	42a0      	cmp	r0, r4
 800a492:	d20f      	bcs.n	800a4b4 <_realloc_r+0x48>
 800a494:	4621      	mov	r1, r4
 800a496:	4638      	mov	r0, r7
 800a498:	f7ff fdba 	bl	800a010 <_malloc_r>
 800a49c:	4605      	mov	r5, r0
 800a49e:	2800      	cmp	r0, #0
 800a4a0:	d0f2      	beq.n	800a488 <_realloc_r+0x1c>
 800a4a2:	4631      	mov	r1, r6
 800a4a4:	4622      	mov	r2, r4
 800a4a6:	f7ff f9c7 	bl	8009838 <memcpy>
 800a4aa:	4631      	mov	r1, r6
 800a4ac:	4638      	mov	r0, r7
 800a4ae:	f7ff fd5f 	bl	8009f70 <_free_r>
 800a4b2:	e7e9      	b.n	800a488 <_realloc_r+0x1c>
 800a4b4:	4635      	mov	r5, r6
 800a4b6:	e7e7      	b.n	800a488 <_realloc_r+0x1c>

0800a4b8 <__sfputc_r>:
 800a4b8:	6893      	ldr	r3, [r2, #8]
 800a4ba:	3b01      	subs	r3, #1
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	b410      	push	{r4}
 800a4c0:	6093      	str	r3, [r2, #8]
 800a4c2:	da08      	bge.n	800a4d6 <__sfputc_r+0x1e>
 800a4c4:	6994      	ldr	r4, [r2, #24]
 800a4c6:	42a3      	cmp	r3, r4
 800a4c8:	db01      	blt.n	800a4ce <__sfputc_r+0x16>
 800a4ca:	290a      	cmp	r1, #10
 800a4cc:	d103      	bne.n	800a4d6 <__sfputc_r+0x1e>
 800a4ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4d2:	f000 b94b 	b.w	800a76c <__swbuf_r>
 800a4d6:	6813      	ldr	r3, [r2, #0]
 800a4d8:	1c58      	adds	r0, r3, #1
 800a4da:	6010      	str	r0, [r2, #0]
 800a4dc:	7019      	strb	r1, [r3, #0]
 800a4de:	4608      	mov	r0, r1
 800a4e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4e4:	4770      	bx	lr

0800a4e6 <__sfputs_r>:
 800a4e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4e8:	4606      	mov	r6, r0
 800a4ea:	460f      	mov	r7, r1
 800a4ec:	4614      	mov	r4, r2
 800a4ee:	18d5      	adds	r5, r2, r3
 800a4f0:	42ac      	cmp	r4, r5
 800a4f2:	d101      	bne.n	800a4f8 <__sfputs_r+0x12>
 800a4f4:	2000      	movs	r0, #0
 800a4f6:	e007      	b.n	800a508 <__sfputs_r+0x22>
 800a4f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4fc:	463a      	mov	r2, r7
 800a4fe:	4630      	mov	r0, r6
 800a500:	f7ff ffda 	bl	800a4b8 <__sfputc_r>
 800a504:	1c43      	adds	r3, r0, #1
 800a506:	d1f3      	bne.n	800a4f0 <__sfputs_r+0xa>
 800a508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a50c <_vfiprintf_r>:
 800a50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a510:	460d      	mov	r5, r1
 800a512:	b09d      	sub	sp, #116	; 0x74
 800a514:	4614      	mov	r4, r2
 800a516:	4698      	mov	r8, r3
 800a518:	4606      	mov	r6, r0
 800a51a:	b118      	cbz	r0, 800a524 <_vfiprintf_r+0x18>
 800a51c:	6983      	ldr	r3, [r0, #24]
 800a51e:	b90b      	cbnz	r3, 800a524 <_vfiprintf_r+0x18>
 800a520:	f000 fb14 	bl	800ab4c <__sinit>
 800a524:	4b89      	ldr	r3, [pc, #548]	; (800a74c <_vfiprintf_r+0x240>)
 800a526:	429d      	cmp	r5, r3
 800a528:	d11b      	bne.n	800a562 <_vfiprintf_r+0x56>
 800a52a:	6875      	ldr	r5, [r6, #4]
 800a52c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a52e:	07d9      	lsls	r1, r3, #31
 800a530:	d405      	bmi.n	800a53e <_vfiprintf_r+0x32>
 800a532:	89ab      	ldrh	r3, [r5, #12]
 800a534:	059a      	lsls	r2, r3, #22
 800a536:	d402      	bmi.n	800a53e <_vfiprintf_r+0x32>
 800a538:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a53a:	f000 fba5 	bl	800ac88 <__retarget_lock_acquire_recursive>
 800a53e:	89ab      	ldrh	r3, [r5, #12]
 800a540:	071b      	lsls	r3, r3, #28
 800a542:	d501      	bpl.n	800a548 <_vfiprintf_r+0x3c>
 800a544:	692b      	ldr	r3, [r5, #16]
 800a546:	b9eb      	cbnz	r3, 800a584 <_vfiprintf_r+0x78>
 800a548:	4629      	mov	r1, r5
 800a54a:	4630      	mov	r0, r6
 800a54c:	f000 f96e 	bl	800a82c <__swsetup_r>
 800a550:	b1c0      	cbz	r0, 800a584 <_vfiprintf_r+0x78>
 800a552:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a554:	07dc      	lsls	r4, r3, #31
 800a556:	d50e      	bpl.n	800a576 <_vfiprintf_r+0x6a>
 800a558:	f04f 30ff 	mov.w	r0, #4294967295
 800a55c:	b01d      	add	sp, #116	; 0x74
 800a55e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a562:	4b7b      	ldr	r3, [pc, #492]	; (800a750 <_vfiprintf_r+0x244>)
 800a564:	429d      	cmp	r5, r3
 800a566:	d101      	bne.n	800a56c <_vfiprintf_r+0x60>
 800a568:	68b5      	ldr	r5, [r6, #8]
 800a56a:	e7df      	b.n	800a52c <_vfiprintf_r+0x20>
 800a56c:	4b79      	ldr	r3, [pc, #484]	; (800a754 <_vfiprintf_r+0x248>)
 800a56e:	429d      	cmp	r5, r3
 800a570:	bf08      	it	eq
 800a572:	68f5      	ldreq	r5, [r6, #12]
 800a574:	e7da      	b.n	800a52c <_vfiprintf_r+0x20>
 800a576:	89ab      	ldrh	r3, [r5, #12]
 800a578:	0598      	lsls	r0, r3, #22
 800a57a:	d4ed      	bmi.n	800a558 <_vfiprintf_r+0x4c>
 800a57c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a57e:	f000 fb84 	bl	800ac8a <__retarget_lock_release_recursive>
 800a582:	e7e9      	b.n	800a558 <_vfiprintf_r+0x4c>
 800a584:	2300      	movs	r3, #0
 800a586:	9309      	str	r3, [sp, #36]	; 0x24
 800a588:	2320      	movs	r3, #32
 800a58a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a58e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a592:	2330      	movs	r3, #48	; 0x30
 800a594:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a758 <_vfiprintf_r+0x24c>
 800a598:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a59c:	f04f 0901 	mov.w	r9, #1
 800a5a0:	4623      	mov	r3, r4
 800a5a2:	469a      	mov	sl, r3
 800a5a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5a8:	b10a      	cbz	r2, 800a5ae <_vfiprintf_r+0xa2>
 800a5aa:	2a25      	cmp	r2, #37	; 0x25
 800a5ac:	d1f9      	bne.n	800a5a2 <_vfiprintf_r+0x96>
 800a5ae:	ebba 0b04 	subs.w	fp, sl, r4
 800a5b2:	d00b      	beq.n	800a5cc <_vfiprintf_r+0xc0>
 800a5b4:	465b      	mov	r3, fp
 800a5b6:	4622      	mov	r2, r4
 800a5b8:	4629      	mov	r1, r5
 800a5ba:	4630      	mov	r0, r6
 800a5bc:	f7ff ff93 	bl	800a4e6 <__sfputs_r>
 800a5c0:	3001      	adds	r0, #1
 800a5c2:	f000 80aa 	beq.w	800a71a <_vfiprintf_r+0x20e>
 800a5c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5c8:	445a      	add	r2, fp
 800a5ca:	9209      	str	r2, [sp, #36]	; 0x24
 800a5cc:	f89a 3000 	ldrb.w	r3, [sl]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	f000 80a2 	beq.w	800a71a <_vfiprintf_r+0x20e>
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	f04f 32ff 	mov.w	r2, #4294967295
 800a5dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5e0:	f10a 0a01 	add.w	sl, sl, #1
 800a5e4:	9304      	str	r3, [sp, #16]
 800a5e6:	9307      	str	r3, [sp, #28]
 800a5e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a5ec:	931a      	str	r3, [sp, #104]	; 0x68
 800a5ee:	4654      	mov	r4, sl
 800a5f0:	2205      	movs	r2, #5
 800a5f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5f6:	4858      	ldr	r0, [pc, #352]	; (800a758 <_vfiprintf_r+0x24c>)
 800a5f8:	f7f5 fdfa 	bl	80001f0 <memchr>
 800a5fc:	9a04      	ldr	r2, [sp, #16]
 800a5fe:	b9d8      	cbnz	r0, 800a638 <_vfiprintf_r+0x12c>
 800a600:	06d1      	lsls	r1, r2, #27
 800a602:	bf44      	itt	mi
 800a604:	2320      	movmi	r3, #32
 800a606:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a60a:	0713      	lsls	r3, r2, #28
 800a60c:	bf44      	itt	mi
 800a60e:	232b      	movmi	r3, #43	; 0x2b
 800a610:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a614:	f89a 3000 	ldrb.w	r3, [sl]
 800a618:	2b2a      	cmp	r3, #42	; 0x2a
 800a61a:	d015      	beq.n	800a648 <_vfiprintf_r+0x13c>
 800a61c:	9a07      	ldr	r2, [sp, #28]
 800a61e:	4654      	mov	r4, sl
 800a620:	2000      	movs	r0, #0
 800a622:	f04f 0c0a 	mov.w	ip, #10
 800a626:	4621      	mov	r1, r4
 800a628:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a62c:	3b30      	subs	r3, #48	; 0x30
 800a62e:	2b09      	cmp	r3, #9
 800a630:	d94e      	bls.n	800a6d0 <_vfiprintf_r+0x1c4>
 800a632:	b1b0      	cbz	r0, 800a662 <_vfiprintf_r+0x156>
 800a634:	9207      	str	r2, [sp, #28]
 800a636:	e014      	b.n	800a662 <_vfiprintf_r+0x156>
 800a638:	eba0 0308 	sub.w	r3, r0, r8
 800a63c:	fa09 f303 	lsl.w	r3, r9, r3
 800a640:	4313      	orrs	r3, r2
 800a642:	9304      	str	r3, [sp, #16]
 800a644:	46a2      	mov	sl, r4
 800a646:	e7d2      	b.n	800a5ee <_vfiprintf_r+0xe2>
 800a648:	9b03      	ldr	r3, [sp, #12]
 800a64a:	1d19      	adds	r1, r3, #4
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	9103      	str	r1, [sp, #12]
 800a650:	2b00      	cmp	r3, #0
 800a652:	bfbb      	ittet	lt
 800a654:	425b      	neglt	r3, r3
 800a656:	f042 0202 	orrlt.w	r2, r2, #2
 800a65a:	9307      	strge	r3, [sp, #28]
 800a65c:	9307      	strlt	r3, [sp, #28]
 800a65e:	bfb8      	it	lt
 800a660:	9204      	strlt	r2, [sp, #16]
 800a662:	7823      	ldrb	r3, [r4, #0]
 800a664:	2b2e      	cmp	r3, #46	; 0x2e
 800a666:	d10c      	bne.n	800a682 <_vfiprintf_r+0x176>
 800a668:	7863      	ldrb	r3, [r4, #1]
 800a66a:	2b2a      	cmp	r3, #42	; 0x2a
 800a66c:	d135      	bne.n	800a6da <_vfiprintf_r+0x1ce>
 800a66e:	9b03      	ldr	r3, [sp, #12]
 800a670:	1d1a      	adds	r2, r3, #4
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	9203      	str	r2, [sp, #12]
 800a676:	2b00      	cmp	r3, #0
 800a678:	bfb8      	it	lt
 800a67a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a67e:	3402      	adds	r4, #2
 800a680:	9305      	str	r3, [sp, #20]
 800a682:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a768 <_vfiprintf_r+0x25c>
 800a686:	7821      	ldrb	r1, [r4, #0]
 800a688:	2203      	movs	r2, #3
 800a68a:	4650      	mov	r0, sl
 800a68c:	f7f5 fdb0 	bl	80001f0 <memchr>
 800a690:	b140      	cbz	r0, 800a6a4 <_vfiprintf_r+0x198>
 800a692:	2340      	movs	r3, #64	; 0x40
 800a694:	eba0 000a 	sub.w	r0, r0, sl
 800a698:	fa03 f000 	lsl.w	r0, r3, r0
 800a69c:	9b04      	ldr	r3, [sp, #16]
 800a69e:	4303      	orrs	r3, r0
 800a6a0:	3401      	adds	r4, #1
 800a6a2:	9304      	str	r3, [sp, #16]
 800a6a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6a8:	482c      	ldr	r0, [pc, #176]	; (800a75c <_vfiprintf_r+0x250>)
 800a6aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a6ae:	2206      	movs	r2, #6
 800a6b0:	f7f5 fd9e 	bl	80001f0 <memchr>
 800a6b4:	2800      	cmp	r0, #0
 800a6b6:	d03f      	beq.n	800a738 <_vfiprintf_r+0x22c>
 800a6b8:	4b29      	ldr	r3, [pc, #164]	; (800a760 <_vfiprintf_r+0x254>)
 800a6ba:	bb1b      	cbnz	r3, 800a704 <_vfiprintf_r+0x1f8>
 800a6bc:	9b03      	ldr	r3, [sp, #12]
 800a6be:	3307      	adds	r3, #7
 800a6c0:	f023 0307 	bic.w	r3, r3, #7
 800a6c4:	3308      	adds	r3, #8
 800a6c6:	9303      	str	r3, [sp, #12]
 800a6c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6ca:	443b      	add	r3, r7
 800a6cc:	9309      	str	r3, [sp, #36]	; 0x24
 800a6ce:	e767      	b.n	800a5a0 <_vfiprintf_r+0x94>
 800a6d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6d4:	460c      	mov	r4, r1
 800a6d6:	2001      	movs	r0, #1
 800a6d8:	e7a5      	b.n	800a626 <_vfiprintf_r+0x11a>
 800a6da:	2300      	movs	r3, #0
 800a6dc:	3401      	adds	r4, #1
 800a6de:	9305      	str	r3, [sp, #20]
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	f04f 0c0a 	mov.w	ip, #10
 800a6e6:	4620      	mov	r0, r4
 800a6e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6ec:	3a30      	subs	r2, #48	; 0x30
 800a6ee:	2a09      	cmp	r2, #9
 800a6f0:	d903      	bls.n	800a6fa <_vfiprintf_r+0x1ee>
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d0c5      	beq.n	800a682 <_vfiprintf_r+0x176>
 800a6f6:	9105      	str	r1, [sp, #20]
 800a6f8:	e7c3      	b.n	800a682 <_vfiprintf_r+0x176>
 800a6fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6fe:	4604      	mov	r4, r0
 800a700:	2301      	movs	r3, #1
 800a702:	e7f0      	b.n	800a6e6 <_vfiprintf_r+0x1da>
 800a704:	ab03      	add	r3, sp, #12
 800a706:	9300      	str	r3, [sp, #0]
 800a708:	462a      	mov	r2, r5
 800a70a:	4b16      	ldr	r3, [pc, #88]	; (800a764 <_vfiprintf_r+0x258>)
 800a70c:	a904      	add	r1, sp, #16
 800a70e:	4630      	mov	r0, r6
 800a710:	f7fd fe24 	bl	800835c <_printf_float>
 800a714:	4607      	mov	r7, r0
 800a716:	1c78      	adds	r0, r7, #1
 800a718:	d1d6      	bne.n	800a6c8 <_vfiprintf_r+0x1bc>
 800a71a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a71c:	07d9      	lsls	r1, r3, #31
 800a71e:	d405      	bmi.n	800a72c <_vfiprintf_r+0x220>
 800a720:	89ab      	ldrh	r3, [r5, #12]
 800a722:	059a      	lsls	r2, r3, #22
 800a724:	d402      	bmi.n	800a72c <_vfiprintf_r+0x220>
 800a726:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a728:	f000 faaf 	bl	800ac8a <__retarget_lock_release_recursive>
 800a72c:	89ab      	ldrh	r3, [r5, #12]
 800a72e:	065b      	lsls	r3, r3, #25
 800a730:	f53f af12 	bmi.w	800a558 <_vfiprintf_r+0x4c>
 800a734:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a736:	e711      	b.n	800a55c <_vfiprintf_r+0x50>
 800a738:	ab03      	add	r3, sp, #12
 800a73a:	9300      	str	r3, [sp, #0]
 800a73c:	462a      	mov	r2, r5
 800a73e:	4b09      	ldr	r3, [pc, #36]	; (800a764 <_vfiprintf_r+0x258>)
 800a740:	a904      	add	r1, sp, #16
 800a742:	4630      	mov	r0, r6
 800a744:	f7fe f8ae 	bl	80088a4 <_printf_i>
 800a748:	e7e4      	b.n	800a714 <_vfiprintf_r+0x208>
 800a74a:	bf00      	nop
 800a74c:	0800b84c 	.word	0x0800b84c
 800a750:	0800b86c 	.word	0x0800b86c
 800a754:	0800b82c 	.word	0x0800b82c
 800a758:	0800b6d4 	.word	0x0800b6d4
 800a75c:	0800b6de 	.word	0x0800b6de
 800a760:	0800835d 	.word	0x0800835d
 800a764:	0800a4e7 	.word	0x0800a4e7
 800a768:	0800b6da 	.word	0x0800b6da

0800a76c <__swbuf_r>:
 800a76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a76e:	460e      	mov	r6, r1
 800a770:	4614      	mov	r4, r2
 800a772:	4605      	mov	r5, r0
 800a774:	b118      	cbz	r0, 800a77e <__swbuf_r+0x12>
 800a776:	6983      	ldr	r3, [r0, #24]
 800a778:	b90b      	cbnz	r3, 800a77e <__swbuf_r+0x12>
 800a77a:	f000 f9e7 	bl	800ab4c <__sinit>
 800a77e:	4b21      	ldr	r3, [pc, #132]	; (800a804 <__swbuf_r+0x98>)
 800a780:	429c      	cmp	r4, r3
 800a782:	d12b      	bne.n	800a7dc <__swbuf_r+0x70>
 800a784:	686c      	ldr	r4, [r5, #4]
 800a786:	69a3      	ldr	r3, [r4, #24]
 800a788:	60a3      	str	r3, [r4, #8]
 800a78a:	89a3      	ldrh	r3, [r4, #12]
 800a78c:	071a      	lsls	r2, r3, #28
 800a78e:	d52f      	bpl.n	800a7f0 <__swbuf_r+0x84>
 800a790:	6923      	ldr	r3, [r4, #16]
 800a792:	b36b      	cbz	r3, 800a7f0 <__swbuf_r+0x84>
 800a794:	6923      	ldr	r3, [r4, #16]
 800a796:	6820      	ldr	r0, [r4, #0]
 800a798:	1ac0      	subs	r0, r0, r3
 800a79a:	6963      	ldr	r3, [r4, #20]
 800a79c:	b2f6      	uxtb	r6, r6
 800a79e:	4283      	cmp	r3, r0
 800a7a0:	4637      	mov	r7, r6
 800a7a2:	dc04      	bgt.n	800a7ae <__swbuf_r+0x42>
 800a7a4:	4621      	mov	r1, r4
 800a7a6:	4628      	mov	r0, r5
 800a7a8:	f000 f93c 	bl	800aa24 <_fflush_r>
 800a7ac:	bb30      	cbnz	r0, 800a7fc <__swbuf_r+0x90>
 800a7ae:	68a3      	ldr	r3, [r4, #8]
 800a7b0:	3b01      	subs	r3, #1
 800a7b2:	60a3      	str	r3, [r4, #8]
 800a7b4:	6823      	ldr	r3, [r4, #0]
 800a7b6:	1c5a      	adds	r2, r3, #1
 800a7b8:	6022      	str	r2, [r4, #0]
 800a7ba:	701e      	strb	r6, [r3, #0]
 800a7bc:	6963      	ldr	r3, [r4, #20]
 800a7be:	3001      	adds	r0, #1
 800a7c0:	4283      	cmp	r3, r0
 800a7c2:	d004      	beq.n	800a7ce <__swbuf_r+0x62>
 800a7c4:	89a3      	ldrh	r3, [r4, #12]
 800a7c6:	07db      	lsls	r3, r3, #31
 800a7c8:	d506      	bpl.n	800a7d8 <__swbuf_r+0x6c>
 800a7ca:	2e0a      	cmp	r6, #10
 800a7cc:	d104      	bne.n	800a7d8 <__swbuf_r+0x6c>
 800a7ce:	4621      	mov	r1, r4
 800a7d0:	4628      	mov	r0, r5
 800a7d2:	f000 f927 	bl	800aa24 <_fflush_r>
 800a7d6:	b988      	cbnz	r0, 800a7fc <__swbuf_r+0x90>
 800a7d8:	4638      	mov	r0, r7
 800a7da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7dc:	4b0a      	ldr	r3, [pc, #40]	; (800a808 <__swbuf_r+0x9c>)
 800a7de:	429c      	cmp	r4, r3
 800a7e0:	d101      	bne.n	800a7e6 <__swbuf_r+0x7a>
 800a7e2:	68ac      	ldr	r4, [r5, #8]
 800a7e4:	e7cf      	b.n	800a786 <__swbuf_r+0x1a>
 800a7e6:	4b09      	ldr	r3, [pc, #36]	; (800a80c <__swbuf_r+0xa0>)
 800a7e8:	429c      	cmp	r4, r3
 800a7ea:	bf08      	it	eq
 800a7ec:	68ec      	ldreq	r4, [r5, #12]
 800a7ee:	e7ca      	b.n	800a786 <__swbuf_r+0x1a>
 800a7f0:	4621      	mov	r1, r4
 800a7f2:	4628      	mov	r0, r5
 800a7f4:	f000 f81a 	bl	800a82c <__swsetup_r>
 800a7f8:	2800      	cmp	r0, #0
 800a7fa:	d0cb      	beq.n	800a794 <__swbuf_r+0x28>
 800a7fc:	f04f 37ff 	mov.w	r7, #4294967295
 800a800:	e7ea      	b.n	800a7d8 <__swbuf_r+0x6c>
 800a802:	bf00      	nop
 800a804:	0800b84c 	.word	0x0800b84c
 800a808:	0800b86c 	.word	0x0800b86c
 800a80c:	0800b82c 	.word	0x0800b82c

0800a810 <__ascii_wctomb>:
 800a810:	b149      	cbz	r1, 800a826 <__ascii_wctomb+0x16>
 800a812:	2aff      	cmp	r2, #255	; 0xff
 800a814:	bf85      	ittet	hi
 800a816:	238a      	movhi	r3, #138	; 0x8a
 800a818:	6003      	strhi	r3, [r0, #0]
 800a81a:	700a      	strbls	r2, [r1, #0]
 800a81c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a820:	bf98      	it	ls
 800a822:	2001      	movls	r0, #1
 800a824:	4770      	bx	lr
 800a826:	4608      	mov	r0, r1
 800a828:	4770      	bx	lr
	...

0800a82c <__swsetup_r>:
 800a82c:	4b32      	ldr	r3, [pc, #200]	; (800a8f8 <__swsetup_r+0xcc>)
 800a82e:	b570      	push	{r4, r5, r6, lr}
 800a830:	681d      	ldr	r5, [r3, #0]
 800a832:	4606      	mov	r6, r0
 800a834:	460c      	mov	r4, r1
 800a836:	b125      	cbz	r5, 800a842 <__swsetup_r+0x16>
 800a838:	69ab      	ldr	r3, [r5, #24]
 800a83a:	b913      	cbnz	r3, 800a842 <__swsetup_r+0x16>
 800a83c:	4628      	mov	r0, r5
 800a83e:	f000 f985 	bl	800ab4c <__sinit>
 800a842:	4b2e      	ldr	r3, [pc, #184]	; (800a8fc <__swsetup_r+0xd0>)
 800a844:	429c      	cmp	r4, r3
 800a846:	d10f      	bne.n	800a868 <__swsetup_r+0x3c>
 800a848:	686c      	ldr	r4, [r5, #4]
 800a84a:	89a3      	ldrh	r3, [r4, #12]
 800a84c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a850:	0719      	lsls	r1, r3, #28
 800a852:	d42c      	bmi.n	800a8ae <__swsetup_r+0x82>
 800a854:	06dd      	lsls	r5, r3, #27
 800a856:	d411      	bmi.n	800a87c <__swsetup_r+0x50>
 800a858:	2309      	movs	r3, #9
 800a85a:	6033      	str	r3, [r6, #0]
 800a85c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a860:	81a3      	strh	r3, [r4, #12]
 800a862:	f04f 30ff 	mov.w	r0, #4294967295
 800a866:	e03e      	b.n	800a8e6 <__swsetup_r+0xba>
 800a868:	4b25      	ldr	r3, [pc, #148]	; (800a900 <__swsetup_r+0xd4>)
 800a86a:	429c      	cmp	r4, r3
 800a86c:	d101      	bne.n	800a872 <__swsetup_r+0x46>
 800a86e:	68ac      	ldr	r4, [r5, #8]
 800a870:	e7eb      	b.n	800a84a <__swsetup_r+0x1e>
 800a872:	4b24      	ldr	r3, [pc, #144]	; (800a904 <__swsetup_r+0xd8>)
 800a874:	429c      	cmp	r4, r3
 800a876:	bf08      	it	eq
 800a878:	68ec      	ldreq	r4, [r5, #12]
 800a87a:	e7e6      	b.n	800a84a <__swsetup_r+0x1e>
 800a87c:	0758      	lsls	r0, r3, #29
 800a87e:	d512      	bpl.n	800a8a6 <__swsetup_r+0x7a>
 800a880:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a882:	b141      	cbz	r1, 800a896 <__swsetup_r+0x6a>
 800a884:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a888:	4299      	cmp	r1, r3
 800a88a:	d002      	beq.n	800a892 <__swsetup_r+0x66>
 800a88c:	4630      	mov	r0, r6
 800a88e:	f7ff fb6f 	bl	8009f70 <_free_r>
 800a892:	2300      	movs	r3, #0
 800a894:	6363      	str	r3, [r4, #52]	; 0x34
 800a896:	89a3      	ldrh	r3, [r4, #12]
 800a898:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a89c:	81a3      	strh	r3, [r4, #12]
 800a89e:	2300      	movs	r3, #0
 800a8a0:	6063      	str	r3, [r4, #4]
 800a8a2:	6923      	ldr	r3, [r4, #16]
 800a8a4:	6023      	str	r3, [r4, #0]
 800a8a6:	89a3      	ldrh	r3, [r4, #12]
 800a8a8:	f043 0308 	orr.w	r3, r3, #8
 800a8ac:	81a3      	strh	r3, [r4, #12]
 800a8ae:	6923      	ldr	r3, [r4, #16]
 800a8b0:	b94b      	cbnz	r3, 800a8c6 <__swsetup_r+0x9a>
 800a8b2:	89a3      	ldrh	r3, [r4, #12]
 800a8b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a8b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8bc:	d003      	beq.n	800a8c6 <__swsetup_r+0x9a>
 800a8be:	4621      	mov	r1, r4
 800a8c0:	4630      	mov	r0, r6
 800a8c2:	f000 fa07 	bl	800acd4 <__smakebuf_r>
 800a8c6:	89a0      	ldrh	r0, [r4, #12]
 800a8c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a8cc:	f010 0301 	ands.w	r3, r0, #1
 800a8d0:	d00a      	beq.n	800a8e8 <__swsetup_r+0xbc>
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	60a3      	str	r3, [r4, #8]
 800a8d6:	6963      	ldr	r3, [r4, #20]
 800a8d8:	425b      	negs	r3, r3
 800a8da:	61a3      	str	r3, [r4, #24]
 800a8dc:	6923      	ldr	r3, [r4, #16]
 800a8de:	b943      	cbnz	r3, 800a8f2 <__swsetup_r+0xc6>
 800a8e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a8e4:	d1ba      	bne.n	800a85c <__swsetup_r+0x30>
 800a8e6:	bd70      	pop	{r4, r5, r6, pc}
 800a8e8:	0781      	lsls	r1, r0, #30
 800a8ea:	bf58      	it	pl
 800a8ec:	6963      	ldrpl	r3, [r4, #20]
 800a8ee:	60a3      	str	r3, [r4, #8]
 800a8f0:	e7f4      	b.n	800a8dc <__swsetup_r+0xb0>
 800a8f2:	2000      	movs	r0, #0
 800a8f4:	e7f7      	b.n	800a8e6 <__swsetup_r+0xba>
 800a8f6:	bf00      	nop
 800a8f8:	2000000c 	.word	0x2000000c
 800a8fc:	0800b84c 	.word	0x0800b84c
 800a900:	0800b86c 	.word	0x0800b86c
 800a904:	0800b82c 	.word	0x0800b82c

0800a908 <abort>:
 800a908:	b508      	push	{r3, lr}
 800a90a:	2006      	movs	r0, #6
 800a90c:	f000 fa52 	bl	800adb4 <raise>
 800a910:	2001      	movs	r0, #1
 800a912:	f7f8 f98b 	bl	8002c2c <_exit>
	...

0800a918 <__sflush_r>:
 800a918:	898a      	ldrh	r2, [r1, #12]
 800a91a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a91e:	4605      	mov	r5, r0
 800a920:	0710      	lsls	r0, r2, #28
 800a922:	460c      	mov	r4, r1
 800a924:	d458      	bmi.n	800a9d8 <__sflush_r+0xc0>
 800a926:	684b      	ldr	r3, [r1, #4]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	dc05      	bgt.n	800a938 <__sflush_r+0x20>
 800a92c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a92e:	2b00      	cmp	r3, #0
 800a930:	dc02      	bgt.n	800a938 <__sflush_r+0x20>
 800a932:	2000      	movs	r0, #0
 800a934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a938:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a93a:	2e00      	cmp	r6, #0
 800a93c:	d0f9      	beq.n	800a932 <__sflush_r+0x1a>
 800a93e:	2300      	movs	r3, #0
 800a940:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a944:	682f      	ldr	r7, [r5, #0]
 800a946:	602b      	str	r3, [r5, #0]
 800a948:	d032      	beq.n	800a9b0 <__sflush_r+0x98>
 800a94a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a94c:	89a3      	ldrh	r3, [r4, #12]
 800a94e:	075a      	lsls	r2, r3, #29
 800a950:	d505      	bpl.n	800a95e <__sflush_r+0x46>
 800a952:	6863      	ldr	r3, [r4, #4]
 800a954:	1ac0      	subs	r0, r0, r3
 800a956:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a958:	b10b      	cbz	r3, 800a95e <__sflush_r+0x46>
 800a95a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a95c:	1ac0      	subs	r0, r0, r3
 800a95e:	2300      	movs	r3, #0
 800a960:	4602      	mov	r2, r0
 800a962:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a964:	6a21      	ldr	r1, [r4, #32]
 800a966:	4628      	mov	r0, r5
 800a968:	47b0      	blx	r6
 800a96a:	1c43      	adds	r3, r0, #1
 800a96c:	89a3      	ldrh	r3, [r4, #12]
 800a96e:	d106      	bne.n	800a97e <__sflush_r+0x66>
 800a970:	6829      	ldr	r1, [r5, #0]
 800a972:	291d      	cmp	r1, #29
 800a974:	d82c      	bhi.n	800a9d0 <__sflush_r+0xb8>
 800a976:	4a2a      	ldr	r2, [pc, #168]	; (800aa20 <__sflush_r+0x108>)
 800a978:	40ca      	lsrs	r2, r1
 800a97a:	07d6      	lsls	r6, r2, #31
 800a97c:	d528      	bpl.n	800a9d0 <__sflush_r+0xb8>
 800a97e:	2200      	movs	r2, #0
 800a980:	6062      	str	r2, [r4, #4]
 800a982:	04d9      	lsls	r1, r3, #19
 800a984:	6922      	ldr	r2, [r4, #16]
 800a986:	6022      	str	r2, [r4, #0]
 800a988:	d504      	bpl.n	800a994 <__sflush_r+0x7c>
 800a98a:	1c42      	adds	r2, r0, #1
 800a98c:	d101      	bne.n	800a992 <__sflush_r+0x7a>
 800a98e:	682b      	ldr	r3, [r5, #0]
 800a990:	b903      	cbnz	r3, 800a994 <__sflush_r+0x7c>
 800a992:	6560      	str	r0, [r4, #84]	; 0x54
 800a994:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a996:	602f      	str	r7, [r5, #0]
 800a998:	2900      	cmp	r1, #0
 800a99a:	d0ca      	beq.n	800a932 <__sflush_r+0x1a>
 800a99c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9a0:	4299      	cmp	r1, r3
 800a9a2:	d002      	beq.n	800a9aa <__sflush_r+0x92>
 800a9a4:	4628      	mov	r0, r5
 800a9a6:	f7ff fae3 	bl	8009f70 <_free_r>
 800a9aa:	2000      	movs	r0, #0
 800a9ac:	6360      	str	r0, [r4, #52]	; 0x34
 800a9ae:	e7c1      	b.n	800a934 <__sflush_r+0x1c>
 800a9b0:	6a21      	ldr	r1, [r4, #32]
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	4628      	mov	r0, r5
 800a9b6:	47b0      	blx	r6
 800a9b8:	1c41      	adds	r1, r0, #1
 800a9ba:	d1c7      	bne.n	800a94c <__sflush_r+0x34>
 800a9bc:	682b      	ldr	r3, [r5, #0]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d0c4      	beq.n	800a94c <__sflush_r+0x34>
 800a9c2:	2b1d      	cmp	r3, #29
 800a9c4:	d001      	beq.n	800a9ca <__sflush_r+0xb2>
 800a9c6:	2b16      	cmp	r3, #22
 800a9c8:	d101      	bne.n	800a9ce <__sflush_r+0xb6>
 800a9ca:	602f      	str	r7, [r5, #0]
 800a9cc:	e7b1      	b.n	800a932 <__sflush_r+0x1a>
 800a9ce:	89a3      	ldrh	r3, [r4, #12]
 800a9d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9d4:	81a3      	strh	r3, [r4, #12]
 800a9d6:	e7ad      	b.n	800a934 <__sflush_r+0x1c>
 800a9d8:	690f      	ldr	r7, [r1, #16]
 800a9da:	2f00      	cmp	r7, #0
 800a9dc:	d0a9      	beq.n	800a932 <__sflush_r+0x1a>
 800a9de:	0793      	lsls	r3, r2, #30
 800a9e0:	680e      	ldr	r6, [r1, #0]
 800a9e2:	bf08      	it	eq
 800a9e4:	694b      	ldreq	r3, [r1, #20]
 800a9e6:	600f      	str	r7, [r1, #0]
 800a9e8:	bf18      	it	ne
 800a9ea:	2300      	movne	r3, #0
 800a9ec:	eba6 0807 	sub.w	r8, r6, r7
 800a9f0:	608b      	str	r3, [r1, #8]
 800a9f2:	f1b8 0f00 	cmp.w	r8, #0
 800a9f6:	dd9c      	ble.n	800a932 <__sflush_r+0x1a>
 800a9f8:	6a21      	ldr	r1, [r4, #32]
 800a9fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a9fc:	4643      	mov	r3, r8
 800a9fe:	463a      	mov	r2, r7
 800aa00:	4628      	mov	r0, r5
 800aa02:	47b0      	blx	r6
 800aa04:	2800      	cmp	r0, #0
 800aa06:	dc06      	bgt.n	800aa16 <__sflush_r+0xfe>
 800aa08:	89a3      	ldrh	r3, [r4, #12]
 800aa0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa0e:	81a3      	strh	r3, [r4, #12]
 800aa10:	f04f 30ff 	mov.w	r0, #4294967295
 800aa14:	e78e      	b.n	800a934 <__sflush_r+0x1c>
 800aa16:	4407      	add	r7, r0
 800aa18:	eba8 0800 	sub.w	r8, r8, r0
 800aa1c:	e7e9      	b.n	800a9f2 <__sflush_r+0xda>
 800aa1e:	bf00      	nop
 800aa20:	20400001 	.word	0x20400001

0800aa24 <_fflush_r>:
 800aa24:	b538      	push	{r3, r4, r5, lr}
 800aa26:	690b      	ldr	r3, [r1, #16]
 800aa28:	4605      	mov	r5, r0
 800aa2a:	460c      	mov	r4, r1
 800aa2c:	b913      	cbnz	r3, 800aa34 <_fflush_r+0x10>
 800aa2e:	2500      	movs	r5, #0
 800aa30:	4628      	mov	r0, r5
 800aa32:	bd38      	pop	{r3, r4, r5, pc}
 800aa34:	b118      	cbz	r0, 800aa3e <_fflush_r+0x1a>
 800aa36:	6983      	ldr	r3, [r0, #24]
 800aa38:	b90b      	cbnz	r3, 800aa3e <_fflush_r+0x1a>
 800aa3a:	f000 f887 	bl	800ab4c <__sinit>
 800aa3e:	4b14      	ldr	r3, [pc, #80]	; (800aa90 <_fflush_r+0x6c>)
 800aa40:	429c      	cmp	r4, r3
 800aa42:	d11b      	bne.n	800aa7c <_fflush_r+0x58>
 800aa44:	686c      	ldr	r4, [r5, #4]
 800aa46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d0ef      	beq.n	800aa2e <_fflush_r+0xa>
 800aa4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aa50:	07d0      	lsls	r0, r2, #31
 800aa52:	d404      	bmi.n	800aa5e <_fflush_r+0x3a>
 800aa54:	0599      	lsls	r1, r3, #22
 800aa56:	d402      	bmi.n	800aa5e <_fflush_r+0x3a>
 800aa58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa5a:	f000 f915 	bl	800ac88 <__retarget_lock_acquire_recursive>
 800aa5e:	4628      	mov	r0, r5
 800aa60:	4621      	mov	r1, r4
 800aa62:	f7ff ff59 	bl	800a918 <__sflush_r>
 800aa66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa68:	07da      	lsls	r2, r3, #31
 800aa6a:	4605      	mov	r5, r0
 800aa6c:	d4e0      	bmi.n	800aa30 <_fflush_r+0xc>
 800aa6e:	89a3      	ldrh	r3, [r4, #12]
 800aa70:	059b      	lsls	r3, r3, #22
 800aa72:	d4dd      	bmi.n	800aa30 <_fflush_r+0xc>
 800aa74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa76:	f000 f908 	bl	800ac8a <__retarget_lock_release_recursive>
 800aa7a:	e7d9      	b.n	800aa30 <_fflush_r+0xc>
 800aa7c:	4b05      	ldr	r3, [pc, #20]	; (800aa94 <_fflush_r+0x70>)
 800aa7e:	429c      	cmp	r4, r3
 800aa80:	d101      	bne.n	800aa86 <_fflush_r+0x62>
 800aa82:	68ac      	ldr	r4, [r5, #8]
 800aa84:	e7df      	b.n	800aa46 <_fflush_r+0x22>
 800aa86:	4b04      	ldr	r3, [pc, #16]	; (800aa98 <_fflush_r+0x74>)
 800aa88:	429c      	cmp	r4, r3
 800aa8a:	bf08      	it	eq
 800aa8c:	68ec      	ldreq	r4, [r5, #12]
 800aa8e:	e7da      	b.n	800aa46 <_fflush_r+0x22>
 800aa90:	0800b84c 	.word	0x0800b84c
 800aa94:	0800b86c 	.word	0x0800b86c
 800aa98:	0800b82c 	.word	0x0800b82c

0800aa9c <std>:
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	b510      	push	{r4, lr}
 800aaa0:	4604      	mov	r4, r0
 800aaa2:	e9c0 3300 	strd	r3, r3, [r0]
 800aaa6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aaaa:	6083      	str	r3, [r0, #8]
 800aaac:	8181      	strh	r1, [r0, #12]
 800aaae:	6643      	str	r3, [r0, #100]	; 0x64
 800aab0:	81c2      	strh	r2, [r0, #14]
 800aab2:	6183      	str	r3, [r0, #24]
 800aab4:	4619      	mov	r1, r3
 800aab6:	2208      	movs	r2, #8
 800aab8:	305c      	adds	r0, #92	; 0x5c
 800aaba:	f7fd fba7 	bl	800820c <memset>
 800aabe:	4b05      	ldr	r3, [pc, #20]	; (800aad4 <std+0x38>)
 800aac0:	6263      	str	r3, [r4, #36]	; 0x24
 800aac2:	4b05      	ldr	r3, [pc, #20]	; (800aad8 <std+0x3c>)
 800aac4:	62a3      	str	r3, [r4, #40]	; 0x28
 800aac6:	4b05      	ldr	r3, [pc, #20]	; (800aadc <std+0x40>)
 800aac8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aaca:	4b05      	ldr	r3, [pc, #20]	; (800aae0 <std+0x44>)
 800aacc:	6224      	str	r4, [r4, #32]
 800aace:	6323      	str	r3, [r4, #48]	; 0x30
 800aad0:	bd10      	pop	{r4, pc}
 800aad2:	bf00      	nop
 800aad4:	0800aded 	.word	0x0800aded
 800aad8:	0800ae0f 	.word	0x0800ae0f
 800aadc:	0800ae47 	.word	0x0800ae47
 800aae0:	0800ae6b 	.word	0x0800ae6b

0800aae4 <_cleanup_r>:
 800aae4:	4901      	ldr	r1, [pc, #4]	; (800aaec <_cleanup_r+0x8>)
 800aae6:	f000 b8af 	b.w	800ac48 <_fwalk_reent>
 800aaea:	bf00      	nop
 800aaec:	0800aa25 	.word	0x0800aa25

0800aaf0 <__sfmoreglue>:
 800aaf0:	b570      	push	{r4, r5, r6, lr}
 800aaf2:	1e4a      	subs	r2, r1, #1
 800aaf4:	2568      	movs	r5, #104	; 0x68
 800aaf6:	4355      	muls	r5, r2
 800aaf8:	460e      	mov	r6, r1
 800aafa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aafe:	f7ff fa87 	bl	800a010 <_malloc_r>
 800ab02:	4604      	mov	r4, r0
 800ab04:	b140      	cbz	r0, 800ab18 <__sfmoreglue+0x28>
 800ab06:	2100      	movs	r1, #0
 800ab08:	e9c0 1600 	strd	r1, r6, [r0]
 800ab0c:	300c      	adds	r0, #12
 800ab0e:	60a0      	str	r0, [r4, #8]
 800ab10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ab14:	f7fd fb7a 	bl	800820c <memset>
 800ab18:	4620      	mov	r0, r4
 800ab1a:	bd70      	pop	{r4, r5, r6, pc}

0800ab1c <__sfp_lock_acquire>:
 800ab1c:	4801      	ldr	r0, [pc, #4]	; (800ab24 <__sfp_lock_acquire+0x8>)
 800ab1e:	f000 b8b3 	b.w	800ac88 <__retarget_lock_acquire_recursive>
 800ab22:	bf00      	nop
 800ab24:	20000530 	.word	0x20000530

0800ab28 <__sfp_lock_release>:
 800ab28:	4801      	ldr	r0, [pc, #4]	; (800ab30 <__sfp_lock_release+0x8>)
 800ab2a:	f000 b8ae 	b.w	800ac8a <__retarget_lock_release_recursive>
 800ab2e:	bf00      	nop
 800ab30:	20000530 	.word	0x20000530

0800ab34 <__sinit_lock_acquire>:
 800ab34:	4801      	ldr	r0, [pc, #4]	; (800ab3c <__sinit_lock_acquire+0x8>)
 800ab36:	f000 b8a7 	b.w	800ac88 <__retarget_lock_acquire_recursive>
 800ab3a:	bf00      	nop
 800ab3c:	2000052b 	.word	0x2000052b

0800ab40 <__sinit_lock_release>:
 800ab40:	4801      	ldr	r0, [pc, #4]	; (800ab48 <__sinit_lock_release+0x8>)
 800ab42:	f000 b8a2 	b.w	800ac8a <__retarget_lock_release_recursive>
 800ab46:	bf00      	nop
 800ab48:	2000052b 	.word	0x2000052b

0800ab4c <__sinit>:
 800ab4c:	b510      	push	{r4, lr}
 800ab4e:	4604      	mov	r4, r0
 800ab50:	f7ff fff0 	bl	800ab34 <__sinit_lock_acquire>
 800ab54:	69a3      	ldr	r3, [r4, #24]
 800ab56:	b11b      	cbz	r3, 800ab60 <__sinit+0x14>
 800ab58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab5c:	f7ff bff0 	b.w	800ab40 <__sinit_lock_release>
 800ab60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ab64:	6523      	str	r3, [r4, #80]	; 0x50
 800ab66:	4b13      	ldr	r3, [pc, #76]	; (800abb4 <__sinit+0x68>)
 800ab68:	4a13      	ldr	r2, [pc, #76]	; (800abb8 <__sinit+0x6c>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ab6e:	42a3      	cmp	r3, r4
 800ab70:	bf04      	itt	eq
 800ab72:	2301      	moveq	r3, #1
 800ab74:	61a3      	streq	r3, [r4, #24]
 800ab76:	4620      	mov	r0, r4
 800ab78:	f000 f820 	bl	800abbc <__sfp>
 800ab7c:	6060      	str	r0, [r4, #4]
 800ab7e:	4620      	mov	r0, r4
 800ab80:	f000 f81c 	bl	800abbc <__sfp>
 800ab84:	60a0      	str	r0, [r4, #8]
 800ab86:	4620      	mov	r0, r4
 800ab88:	f000 f818 	bl	800abbc <__sfp>
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	60e0      	str	r0, [r4, #12]
 800ab90:	2104      	movs	r1, #4
 800ab92:	6860      	ldr	r0, [r4, #4]
 800ab94:	f7ff ff82 	bl	800aa9c <std>
 800ab98:	68a0      	ldr	r0, [r4, #8]
 800ab9a:	2201      	movs	r2, #1
 800ab9c:	2109      	movs	r1, #9
 800ab9e:	f7ff ff7d 	bl	800aa9c <std>
 800aba2:	68e0      	ldr	r0, [r4, #12]
 800aba4:	2202      	movs	r2, #2
 800aba6:	2112      	movs	r1, #18
 800aba8:	f7ff ff78 	bl	800aa9c <std>
 800abac:	2301      	movs	r3, #1
 800abae:	61a3      	str	r3, [r4, #24]
 800abb0:	e7d2      	b.n	800ab58 <__sinit+0xc>
 800abb2:	bf00      	nop
 800abb4:	0800b4a8 	.word	0x0800b4a8
 800abb8:	0800aae5 	.word	0x0800aae5

0800abbc <__sfp>:
 800abbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abbe:	4607      	mov	r7, r0
 800abc0:	f7ff ffac 	bl	800ab1c <__sfp_lock_acquire>
 800abc4:	4b1e      	ldr	r3, [pc, #120]	; (800ac40 <__sfp+0x84>)
 800abc6:	681e      	ldr	r6, [r3, #0]
 800abc8:	69b3      	ldr	r3, [r6, #24]
 800abca:	b913      	cbnz	r3, 800abd2 <__sfp+0x16>
 800abcc:	4630      	mov	r0, r6
 800abce:	f7ff ffbd 	bl	800ab4c <__sinit>
 800abd2:	3648      	adds	r6, #72	; 0x48
 800abd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800abd8:	3b01      	subs	r3, #1
 800abda:	d503      	bpl.n	800abe4 <__sfp+0x28>
 800abdc:	6833      	ldr	r3, [r6, #0]
 800abde:	b30b      	cbz	r3, 800ac24 <__sfp+0x68>
 800abe0:	6836      	ldr	r6, [r6, #0]
 800abe2:	e7f7      	b.n	800abd4 <__sfp+0x18>
 800abe4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800abe8:	b9d5      	cbnz	r5, 800ac20 <__sfp+0x64>
 800abea:	4b16      	ldr	r3, [pc, #88]	; (800ac44 <__sfp+0x88>)
 800abec:	60e3      	str	r3, [r4, #12]
 800abee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800abf2:	6665      	str	r5, [r4, #100]	; 0x64
 800abf4:	f000 f847 	bl	800ac86 <__retarget_lock_init_recursive>
 800abf8:	f7ff ff96 	bl	800ab28 <__sfp_lock_release>
 800abfc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ac00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ac04:	6025      	str	r5, [r4, #0]
 800ac06:	61a5      	str	r5, [r4, #24]
 800ac08:	2208      	movs	r2, #8
 800ac0a:	4629      	mov	r1, r5
 800ac0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ac10:	f7fd fafc 	bl	800820c <memset>
 800ac14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ac18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ac1c:	4620      	mov	r0, r4
 800ac1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac20:	3468      	adds	r4, #104	; 0x68
 800ac22:	e7d9      	b.n	800abd8 <__sfp+0x1c>
 800ac24:	2104      	movs	r1, #4
 800ac26:	4638      	mov	r0, r7
 800ac28:	f7ff ff62 	bl	800aaf0 <__sfmoreglue>
 800ac2c:	4604      	mov	r4, r0
 800ac2e:	6030      	str	r0, [r6, #0]
 800ac30:	2800      	cmp	r0, #0
 800ac32:	d1d5      	bne.n	800abe0 <__sfp+0x24>
 800ac34:	f7ff ff78 	bl	800ab28 <__sfp_lock_release>
 800ac38:	230c      	movs	r3, #12
 800ac3a:	603b      	str	r3, [r7, #0]
 800ac3c:	e7ee      	b.n	800ac1c <__sfp+0x60>
 800ac3e:	bf00      	nop
 800ac40:	0800b4a8 	.word	0x0800b4a8
 800ac44:	ffff0001 	.word	0xffff0001

0800ac48 <_fwalk_reent>:
 800ac48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac4c:	4606      	mov	r6, r0
 800ac4e:	4688      	mov	r8, r1
 800ac50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ac54:	2700      	movs	r7, #0
 800ac56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac5a:	f1b9 0901 	subs.w	r9, r9, #1
 800ac5e:	d505      	bpl.n	800ac6c <_fwalk_reent+0x24>
 800ac60:	6824      	ldr	r4, [r4, #0]
 800ac62:	2c00      	cmp	r4, #0
 800ac64:	d1f7      	bne.n	800ac56 <_fwalk_reent+0xe>
 800ac66:	4638      	mov	r0, r7
 800ac68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac6c:	89ab      	ldrh	r3, [r5, #12]
 800ac6e:	2b01      	cmp	r3, #1
 800ac70:	d907      	bls.n	800ac82 <_fwalk_reent+0x3a>
 800ac72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac76:	3301      	adds	r3, #1
 800ac78:	d003      	beq.n	800ac82 <_fwalk_reent+0x3a>
 800ac7a:	4629      	mov	r1, r5
 800ac7c:	4630      	mov	r0, r6
 800ac7e:	47c0      	blx	r8
 800ac80:	4307      	orrs	r7, r0
 800ac82:	3568      	adds	r5, #104	; 0x68
 800ac84:	e7e9      	b.n	800ac5a <_fwalk_reent+0x12>

0800ac86 <__retarget_lock_init_recursive>:
 800ac86:	4770      	bx	lr

0800ac88 <__retarget_lock_acquire_recursive>:
 800ac88:	4770      	bx	lr

0800ac8a <__retarget_lock_release_recursive>:
 800ac8a:	4770      	bx	lr

0800ac8c <__swhatbuf_r>:
 800ac8c:	b570      	push	{r4, r5, r6, lr}
 800ac8e:	460e      	mov	r6, r1
 800ac90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac94:	2900      	cmp	r1, #0
 800ac96:	b096      	sub	sp, #88	; 0x58
 800ac98:	4614      	mov	r4, r2
 800ac9a:	461d      	mov	r5, r3
 800ac9c:	da07      	bge.n	800acae <__swhatbuf_r+0x22>
 800ac9e:	2300      	movs	r3, #0
 800aca0:	602b      	str	r3, [r5, #0]
 800aca2:	89b3      	ldrh	r3, [r6, #12]
 800aca4:	061a      	lsls	r2, r3, #24
 800aca6:	d410      	bmi.n	800acca <__swhatbuf_r+0x3e>
 800aca8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acac:	e00e      	b.n	800accc <__swhatbuf_r+0x40>
 800acae:	466a      	mov	r2, sp
 800acb0:	f000 f902 	bl	800aeb8 <_fstat_r>
 800acb4:	2800      	cmp	r0, #0
 800acb6:	dbf2      	blt.n	800ac9e <__swhatbuf_r+0x12>
 800acb8:	9a01      	ldr	r2, [sp, #4]
 800acba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800acbe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800acc2:	425a      	negs	r2, r3
 800acc4:	415a      	adcs	r2, r3
 800acc6:	602a      	str	r2, [r5, #0]
 800acc8:	e7ee      	b.n	800aca8 <__swhatbuf_r+0x1c>
 800acca:	2340      	movs	r3, #64	; 0x40
 800accc:	2000      	movs	r0, #0
 800acce:	6023      	str	r3, [r4, #0]
 800acd0:	b016      	add	sp, #88	; 0x58
 800acd2:	bd70      	pop	{r4, r5, r6, pc}

0800acd4 <__smakebuf_r>:
 800acd4:	898b      	ldrh	r3, [r1, #12]
 800acd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800acd8:	079d      	lsls	r5, r3, #30
 800acda:	4606      	mov	r6, r0
 800acdc:	460c      	mov	r4, r1
 800acde:	d507      	bpl.n	800acf0 <__smakebuf_r+0x1c>
 800ace0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ace4:	6023      	str	r3, [r4, #0]
 800ace6:	6123      	str	r3, [r4, #16]
 800ace8:	2301      	movs	r3, #1
 800acea:	6163      	str	r3, [r4, #20]
 800acec:	b002      	add	sp, #8
 800acee:	bd70      	pop	{r4, r5, r6, pc}
 800acf0:	ab01      	add	r3, sp, #4
 800acf2:	466a      	mov	r2, sp
 800acf4:	f7ff ffca 	bl	800ac8c <__swhatbuf_r>
 800acf8:	9900      	ldr	r1, [sp, #0]
 800acfa:	4605      	mov	r5, r0
 800acfc:	4630      	mov	r0, r6
 800acfe:	f7ff f987 	bl	800a010 <_malloc_r>
 800ad02:	b948      	cbnz	r0, 800ad18 <__smakebuf_r+0x44>
 800ad04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad08:	059a      	lsls	r2, r3, #22
 800ad0a:	d4ef      	bmi.n	800acec <__smakebuf_r+0x18>
 800ad0c:	f023 0303 	bic.w	r3, r3, #3
 800ad10:	f043 0302 	orr.w	r3, r3, #2
 800ad14:	81a3      	strh	r3, [r4, #12]
 800ad16:	e7e3      	b.n	800ace0 <__smakebuf_r+0xc>
 800ad18:	4b0d      	ldr	r3, [pc, #52]	; (800ad50 <__smakebuf_r+0x7c>)
 800ad1a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ad1c:	89a3      	ldrh	r3, [r4, #12]
 800ad1e:	6020      	str	r0, [r4, #0]
 800ad20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad24:	81a3      	strh	r3, [r4, #12]
 800ad26:	9b00      	ldr	r3, [sp, #0]
 800ad28:	6163      	str	r3, [r4, #20]
 800ad2a:	9b01      	ldr	r3, [sp, #4]
 800ad2c:	6120      	str	r0, [r4, #16]
 800ad2e:	b15b      	cbz	r3, 800ad48 <__smakebuf_r+0x74>
 800ad30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad34:	4630      	mov	r0, r6
 800ad36:	f000 f8d1 	bl	800aedc <_isatty_r>
 800ad3a:	b128      	cbz	r0, 800ad48 <__smakebuf_r+0x74>
 800ad3c:	89a3      	ldrh	r3, [r4, #12]
 800ad3e:	f023 0303 	bic.w	r3, r3, #3
 800ad42:	f043 0301 	orr.w	r3, r3, #1
 800ad46:	81a3      	strh	r3, [r4, #12]
 800ad48:	89a0      	ldrh	r0, [r4, #12]
 800ad4a:	4305      	orrs	r5, r0
 800ad4c:	81a5      	strh	r5, [r4, #12]
 800ad4e:	e7cd      	b.n	800acec <__smakebuf_r+0x18>
 800ad50:	0800aae5 	.word	0x0800aae5

0800ad54 <_malloc_usable_size_r>:
 800ad54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad58:	1f18      	subs	r0, r3, #4
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	bfbc      	itt	lt
 800ad5e:	580b      	ldrlt	r3, [r1, r0]
 800ad60:	18c0      	addlt	r0, r0, r3
 800ad62:	4770      	bx	lr

0800ad64 <_raise_r>:
 800ad64:	291f      	cmp	r1, #31
 800ad66:	b538      	push	{r3, r4, r5, lr}
 800ad68:	4604      	mov	r4, r0
 800ad6a:	460d      	mov	r5, r1
 800ad6c:	d904      	bls.n	800ad78 <_raise_r+0x14>
 800ad6e:	2316      	movs	r3, #22
 800ad70:	6003      	str	r3, [r0, #0]
 800ad72:	f04f 30ff 	mov.w	r0, #4294967295
 800ad76:	bd38      	pop	{r3, r4, r5, pc}
 800ad78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ad7a:	b112      	cbz	r2, 800ad82 <_raise_r+0x1e>
 800ad7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ad80:	b94b      	cbnz	r3, 800ad96 <_raise_r+0x32>
 800ad82:	4620      	mov	r0, r4
 800ad84:	f000 f830 	bl	800ade8 <_getpid_r>
 800ad88:	462a      	mov	r2, r5
 800ad8a:	4601      	mov	r1, r0
 800ad8c:	4620      	mov	r0, r4
 800ad8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad92:	f000 b817 	b.w	800adc4 <_kill_r>
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	d00a      	beq.n	800adb0 <_raise_r+0x4c>
 800ad9a:	1c59      	adds	r1, r3, #1
 800ad9c:	d103      	bne.n	800ada6 <_raise_r+0x42>
 800ad9e:	2316      	movs	r3, #22
 800ada0:	6003      	str	r3, [r0, #0]
 800ada2:	2001      	movs	r0, #1
 800ada4:	e7e7      	b.n	800ad76 <_raise_r+0x12>
 800ada6:	2400      	movs	r4, #0
 800ada8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800adac:	4628      	mov	r0, r5
 800adae:	4798      	blx	r3
 800adb0:	2000      	movs	r0, #0
 800adb2:	e7e0      	b.n	800ad76 <_raise_r+0x12>

0800adb4 <raise>:
 800adb4:	4b02      	ldr	r3, [pc, #8]	; (800adc0 <raise+0xc>)
 800adb6:	4601      	mov	r1, r0
 800adb8:	6818      	ldr	r0, [r3, #0]
 800adba:	f7ff bfd3 	b.w	800ad64 <_raise_r>
 800adbe:	bf00      	nop
 800adc0:	2000000c 	.word	0x2000000c

0800adc4 <_kill_r>:
 800adc4:	b538      	push	{r3, r4, r5, lr}
 800adc6:	4d07      	ldr	r5, [pc, #28]	; (800ade4 <_kill_r+0x20>)
 800adc8:	2300      	movs	r3, #0
 800adca:	4604      	mov	r4, r0
 800adcc:	4608      	mov	r0, r1
 800adce:	4611      	mov	r1, r2
 800add0:	602b      	str	r3, [r5, #0]
 800add2:	f7f7 ff1b 	bl	8002c0c <_kill>
 800add6:	1c43      	adds	r3, r0, #1
 800add8:	d102      	bne.n	800ade0 <_kill_r+0x1c>
 800adda:	682b      	ldr	r3, [r5, #0]
 800addc:	b103      	cbz	r3, 800ade0 <_kill_r+0x1c>
 800adde:	6023      	str	r3, [r4, #0]
 800ade0:	bd38      	pop	{r3, r4, r5, pc}
 800ade2:	bf00      	nop
 800ade4:	20000524 	.word	0x20000524

0800ade8 <_getpid_r>:
 800ade8:	f7f7 bf08 	b.w	8002bfc <_getpid>

0800adec <__sread>:
 800adec:	b510      	push	{r4, lr}
 800adee:	460c      	mov	r4, r1
 800adf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adf4:	f000 f894 	bl	800af20 <_read_r>
 800adf8:	2800      	cmp	r0, #0
 800adfa:	bfab      	itete	ge
 800adfc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800adfe:	89a3      	ldrhlt	r3, [r4, #12]
 800ae00:	181b      	addge	r3, r3, r0
 800ae02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ae06:	bfac      	ite	ge
 800ae08:	6563      	strge	r3, [r4, #84]	; 0x54
 800ae0a:	81a3      	strhlt	r3, [r4, #12]
 800ae0c:	bd10      	pop	{r4, pc}

0800ae0e <__swrite>:
 800ae0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae12:	461f      	mov	r7, r3
 800ae14:	898b      	ldrh	r3, [r1, #12]
 800ae16:	05db      	lsls	r3, r3, #23
 800ae18:	4605      	mov	r5, r0
 800ae1a:	460c      	mov	r4, r1
 800ae1c:	4616      	mov	r6, r2
 800ae1e:	d505      	bpl.n	800ae2c <__swrite+0x1e>
 800ae20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae24:	2302      	movs	r3, #2
 800ae26:	2200      	movs	r2, #0
 800ae28:	f000 f868 	bl	800aefc <_lseek_r>
 800ae2c:	89a3      	ldrh	r3, [r4, #12]
 800ae2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae36:	81a3      	strh	r3, [r4, #12]
 800ae38:	4632      	mov	r2, r6
 800ae3a:	463b      	mov	r3, r7
 800ae3c:	4628      	mov	r0, r5
 800ae3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae42:	f000 b817 	b.w	800ae74 <_write_r>

0800ae46 <__sseek>:
 800ae46:	b510      	push	{r4, lr}
 800ae48:	460c      	mov	r4, r1
 800ae4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae4e:	f000 f855 	bl	800aefc <_lseek_r>
 800ae52:	1c43      	adds	r3, r0, #1
 800ae54:	89a3      	ldrh	r3, [r4, #12]
 800ae56:	bf15      	itete	ne
 800ae58:	6560      	strne	r0, [r4, #84]	; 0x54
 800ae5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ae5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ae62:	81a3      	strheq	r3, [r4, #12]
 800ae64:	bf18      	it	ne
 800ae66:	81a3      	strhne	r3, [r4, #12]
 800ae68:	bd10      	pop	{r4, pc}

0800ae6a <__sclose>:
 800ae6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae6e:	f000 b813 	b.w	800ae98 <_close_r>
	...

0800ae74 <_write_r>:
 800ae74:	b538      	push	{r3, r4, r5, lr}
 800ae76:	4d07      	ldr	r5, [pc, #28]	; (800ae94 <_write_r+0x20>)
 800ae78:	4604      	mov	r4, r0
 800ae7a:	4608      	mov	r0, r1
 800ae7c:	4611      	mov	r1, r2
 800ae7e:	2200      	movs	r2, #0
 800ae80:	602a      	str	r2, [r5, #0]
 800ae82:	461a      	mov	r2, r3
 800ae84:	f7f7 fef9 	bl	8002c7a <_write>
 800ae88:	1c43      	adds	r3, r0, #1
 800ae8a:	d102      	bne.n	800ae92 <_write_r+0x1e>
 800ae8c:	682b      	ldr	r3, [r5, #0]
 800ae8e:	b103      	cbz	r3, 800ae92 <_write_r+0x1e>
 800ae90:	6023      	str	r3, [r4, #0]
 800ae92:	bd38      	pop	{r3, r4, r5, pc}
 800ae94:	20000524 	.word	0x20000524

0800ae98 <_close_r>:
 800ae98:	b538      	push	{r3, r4, r5, lr}
 800ae9a:	4d06      	ldr	r5, [pc, #24]	; (800aeb4 <_close_r+0x1c>)
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	4604      	mov	r4, r0
 800aea0:	4608      	mov	r0, r1
 800aea2:	602b      	str	r3, [r5, #0]
 800aea4:	f7f7 ff05 	bl	8002cb2 <_close>
 800aea8:	1c43      	adds	r3, r0, #1
 800aeaa:	d102      	bne.n	800aeb2 <_close_r+0x1a>
 800aeac:	682b      	ldr	r3, [r5, #0]
 800aeae:	b103      	cbz	r3, 800aeb2 <_close_r+0x1a>
 800aeb0:	6023      	str	r3, [r4, #0]
 800aeb2:	bd38      	pop	{r3, r4, r5, pc}
 800aeb4:	20000524 	.word	0x20000524

0800aeb8 <_fstat_r>:
 800aeb8:	b538      	push	{r3, r4, r5, lr}
 800aeba:	4d07      	ldr	r5, [pc, #28]	; (800aed8 <_fstat_r+0x20>)
 800aebc:	2300      	movs	r3, #0
 800aebe:	4604      	mov	r4, r0
 800aec0:	4608      	mov	r0, r1
 800aec2:	4611      	mov	r1, r2
 800aec4:	602b      	str	r3, [r5, #0]
 800aec6:	f7f7 ff00 	bl	8002cca <_fstat>
 800aeca:	1c43      	adds	r3, r0, #1
 800aecc:	d102      	bne.n	800aed4 <_fstat_r+0x1c>
 800aece:	682b      	ldr	r3, [r5, #0]
 800aed0:	b103      	cbz	r3, 800aed4 <_fstat_r+0x1c>
 800aed2:	6023      	str	r3, [r4, #0]
 800aed4:	bd38      	pop	{r3, r4, r5, pc}
 800aed6:	bf00      	nop
 800aed8:	20000524 	.word	0x20000524

0800aedc <_isatty_r>:
 800aedc:	b538      	push	{r3, r4, r5, lr}
 800aede:	4d06      	ldr	r5, [pc, #24]	; (800aef8 <_isatty_r+0x1c>)
 800aee0:	2300      	movs	r3, #0
 800aee2:	4604      	mov	r4, r0
 800aee4:	4608      	mov	r0, r1
 800aee6:	602b      	str	r3, [r5, #0]
 800aee8:	f7f7 feff 	bl	8002cea <_isatty>
 800aeec:	1c43      	adds	r3, r0, #1
 800aeee:	d102      	bne.n	800aef6 <_isatty_r+0x1a>
 800aef0:	682b      	ldr	r3, [r5, #0]
 800aef2:	b103      	cbz	r3, 800aef6 <_isatty_r+0x1a>
 800aef4:	6023      	str	r3, [r4, #0]
 800aef6:	bd38      	pop	{r3, r4, r5, pc}
 800aef8:	20000524 	.word	0x20000524

0800aefc <_lseek_r>:
 800aefc:	b538      	push	{r3, r4, r5, lr}
 800aefe:	4d07      	ldr	r5, [pc, #28]	; (800af1c <_lseek_r+0x20>)
 800af00:	4604      	mov	r4, r0
 800af02:	4608      	mov	r0, r1
 800af04:	4611      	mov	r1, r2
 800af06:	2200      	movs	r2, #0
 800af08:	602a      	str	r2, [r5, #0]
 800af0a:	461a      	mov	r2, r3
 800af0c:	f7f7 fef8 	bl	8002d00 <_lseek>
 800af10:	1c43      	adds	r3, r0, #1
 800af12:	d102      	bne.n	800af1a <_lseek_r+0x1e>
 800af14:	682b      	ldr	r3, [r5, #0]
 800af16:	b103      	cbz	r3, 800af1a <_lseek_r+0x1e>
 800af18:	6023      	str	r3, [r4, #0]
 800af1a:	bd38      	pop	{r3, r4, r5, pc}
 800af1c:	20000524 	.word	0x20000524

0800af20 <_read_r>:
 800af20:	b538      	push	{r3, r4, r5, lr}
 800af22:	4d07      	ldr	r5, [pc, #28]	; (800af40 <_read_r+0x20>)
 800af24:	4604      	mov	r4, r0
 800af26:	4608      	mov	r0, r1
 800af28:	4611      	mov	r1, r2
 800af2a:	2200      	movs	r2, #0
 800af2c:	602a      	str	r2, [r5, #0]
 800af2e:	461a      	mov	r2, r3
 800af30:	f7f7 fe86 	bl	8002c40 <_read>
 800af34:	1c43      	adds	r3, r0, #1
 800af36:	d102      	bne.n	800af3e <_read_r+0x1e>
 800af38:	682b      	ldr	r3, [r5, #0]
 800af3a:	b103      	cbz	r3, 800af3e <_read_r+0x1e>
 800af3c:	6023      	str	r3, [r4, #0]
 800af3e:	bd38      	pop	{r3, r4, r5, pc}
 800af40:	20000524 	.word	0x20000524

0800af44 <atan2>:
 800af44:	f000 b800 	b.w	800af48 <__ieee754_atan2>

0800af48 <__ieee754_atan2>:
 800af48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af4c:	ec57 6b11 	vmov	r6, r7, d1
 800af50:	4273      	negs	r3, r6
 800af52:	f8df e184 	ldr.w	lr, [pc, #388]	; 800b0d8 <__ieee754_atan2+0x190>
 800af56:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800af5a:	4333      	orrs	r3, r6
 800af5c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800af60:	4573      	cmp	r3, lr
 800af62:	ec51 0b10 	vmov	r0, r1, d0
 800af66:	ee11 8a10 	vmov	r8, s2
 800af6a:	d80a      	bhi.n	800af82 <__ieee754_atan2+0x3a>
 800af6c:	4244      	negs	r4, r0
 800af6e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800af72:	4304      	orrs	r4, r0
 800af74:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800af78:	4574      	cmp	r4, lr
 800af7a:	ee10 9a10 	vmov	r9, s0
 800af7e:	468c      	mov	ip, r1
 800af80:	d907      	bls.n	800af92 <__ieee754_atan2+0x4a>
 800af82:	4632      	mov	r2, r6
 800af84:	463b      	mov	r3, r7
 800af86:	f7f5 f989 	bl	800029c <__adddf3>
 800af8a:	ec41 0b10 	vmov	d0, r0, r1
 800af8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af92:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800af96:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800af9a:	4334      	orrs	r4, r6
 800af9c:	d103      	bne.n	800afa6 <__ieee754_atan2+0x5e>
 800af9e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afa2:	f000 b89d 	b.w	800b0e0 <atan>
 800afa6:	17bc      	asrs	r4, r7, #30
 800afa8:	f004 0402 	and.w	r4, r4, #2
 800afac:	ea53 0909 	orrs.w	r9, r3, r9
 800afb0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800afb4:	d107      	bne.n	800afc6 <__ieee754_atan2+0x7e>
 800afb6:	2c02      	cmp	r4, #2
 800afb8:	d060      	beq.n	800b07c <__ieee754_atan2+0x134>
 800afba:	2c03      	cmp	r4, #3
 800afbc:	d1e5      	bne.n	800af8a <__ieee754_atan2+0x42>
 800afbe:	a142      	add	r1, pc, #264	; (adr r1, 800b0c8 <__ieee754_atan2+0x180>)
 800afc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afc4:	e7e1      	b.n	800af8a <__ieee754_atan2+0x42>
 800afc6:	ea52 0808 	orrs.w	r8, r2, r8
 800afca:	d106      	bne.n	800afda <__ieee754_atan2+0x92>
 800afcc:	f1bc 0f00 	cmp.w	ip, #0
 800afd0:	da5f      	bge.n	800b092 <__ieee754_atan2+0x14a>
 800afd2:	a13f      	add	r1, pc, #252	; (adr r1, 800b0d0 <__ieee754_atan2+0x188>)
 800afd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afd8:	e7d7      	b.n	800af8a <__ieee754_atan2+0x42>
 800afda:	4572      	cmp	r2, lr
 800afdc:	d10f      	bne.n	800affe <__ieee754_atan2+0xb6>
 800afde:	4293      	cmp	r3, r2
 800afe0:	f104 34ff 	add.w	r4, r4, #4294967295
 800afe4:	d107      	bne.n	800aff6 <__ieee754_atan2+0xae>
 800afe6:	2c02      	cmp	r4, #2
 800afe8:	d84c      	bhi.n	800b084 <__ieee754_atan2+0x13c>
 800afea:	4b35      	ldr	r3, [pc, #212]	; (800b0c0 <__ieee754_atan2+0x178>)
 800afec:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800aff0:	e9d4 0100 	ldrd	r0, r1, [r4]
 800aff4:	e7c9      	b.n	800af8a <__ieee754_atan2+0x42>
 800aff6:	2c02      	cmp	r4, #2
 800aff8:	d848      	bhi.n	800b08c <__ieee754_atan2+0x144>
 800affa:	4b32      	ldr	r3, [pc, #200]	; (800b0c4 <__ieee754_atan2+0x17c>)
 800affc:	e7f6      	b.n	800afec <__ieee754_atan2+0xa4>
 800affe:	4573      	cmp	r3, lr
 800b000:	d0e4      	beq.n	800afcc <__ieee754_atan2+0x84>
 800b002:	1a9b      	subs	r3, r3, r2
 800b004:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800b008:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b00c:	da1e      	bge.n	800b04c <__ieee754_atan2+0x104>
 800b00e:	2f00      	cmp	r7, #0
 800b010:	da01      	bge.n	800b016 <__ieee754_atan2+0xce>
 800b012:	323c      	adds	r2, #60	; 0x3c
 800b014:	db1e      	blt.n	800b054 <__ieee754_atan2+0x10c>
 800b016:	4632      	mov	r2, r6
 800b018:	463b      	mov	r3, r7
 800b01a:	f7f5 fc1f 	bl	800085c <__aeabi_ddiv>
 800b01e:	ec41 0b10 	vmov	d0, r0, r1
 800b022:	f000 f9fd 	bl	800b420 <fabs>
 800b026:	f000 f85b 	bl	800b0e0 <atan>
 800b02a:	ec51 0b10 	vmov	r0, r1, d0
 800b02e:	2c01      	cmp	r4, #1
 800b030:	d013      	beq.n	800b05a <__ieee754_atan2+0x112>
 800b032:	2c02      	cmp	r4, #2
 800b034:	d015      	beq.n	800b062 <__ieee754_atan2+0x11a>
 800b036:	2c00      	cmp	r4, #0
 800b038:	d0a7      	beq.n	800af8a <__ieee754_atan2+0x42>
 800b03a:	a319      	add	r3, pc, #100	; (adr r3, 800b0a0 <__ieee754_atan2+0x158>)
 800b03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b040:	f7f5 f92a 	bl	8000298 <__aeabi_dsub>
 800b044:	a318      	add	r3, pc, #96	; (adr r3, 800b0a8 <__ieee754_atan2+0x160>)
 800b046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b04a:	e014      	b.n	800b076 <__ieee754_atan2+0x12e>
 800b04c:	a118      	add	r1, pc, #96	; (adr r1, 800b0b0 <__ieee754_atan2+0x168>)
 800b04e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b052:	e7ec      	b.n	800b02e <__ieee754_atan2+0xe6>
 800b054:	2000      	movs	r0, #0
 800b056:	2100      	movs	r1, #0
 800b058:	e7e9      	b.n	800b02e <__ieee754_atan2+0xe6>
 800b05a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b05e:	4619      	mov	r1, r3
 800b060:	e793      	b.n	800af8a <__ieee754_atan2+0x42>
 800b062:	a30f      	add	r3, pc, #60	; (adr r3, 800b0a0 <__ieee754_atan2+0x158>)
 800b064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b068:	f7f5 f916 	bl	8000298 <__aeabi_dsub>
 800b06c:	4602      	mov	r2, r0
 800b06e:	460b      	mov	r3, r1
 800b070:	a10d      	add	r1, pc, #52	; (adr r1, 800b0a8 <__ieee754_atan2+0x160>)
 800b072:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b076:	f7f5 f90f 	bl	8000298 <__aeabi_dsub>
 800b07a:	e786      	b.n	800af8a <__ieee754_atan2+0x42>
 800b07c:	a10a      	add	r1, pc, #40	; (adr r1, 800b0a8 <__ieee754_atan2+0x160>)
 800b07e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b082:	e782      	b.n	800af8a <__ieee754_atan2+0x42>
 800b084:	a10c      	add	r1, pc, #48	; (adr r1, 800b0b8 <__ieee754_atan2+0x170>)
 800b086:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b08a:	e77e      	b.n	800af8a <__ieee754_atan2+0x42>
 800b08c:	2000      	movs	r0, #0
 800b08e:	2100      	movs	r1, #0
 800b090:	e77b      	b.n	800af8a <__ieee754_atan2+0x42>
 800b092:	a107      	add	r1, pc, #28	; (adr r1, 800b0b0 <__ieee754_atan2+0x168>)
 800b094:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b098:	e777      	b.n	800af8a <__ieee754_atan2+0x42>
 800b09a:	bf00      	nop
 800b09c:	f3af 8000 	nop.w
 800b0a0:	33145c07 	.word	0x33145c07
 800b0a4:	3ca1a626 	.word	0x3ca1a626
 800b0a8:	54442d18 	.word	0x54442d18
 800b0ac:	400921fb 	.word	0x400921fb
 800b0b0:	54442d18 	.word	0x54442d18
 800b0b4:	3ff921fb 	.word	0x3ff921fb
 800b0b8:	54442d18 	.word	0x54442d18
 800b0bc:	3fe921fb 	.word	0x3fe921fb
 800b0c0:	0800b890 	.word	0x0800b890
 800b0c4:	0800b8a8 	.word	0x0800b8a8
 800b0c8:	54442d18 	.word	0x54442d18
 800b0cc:	c00921fb 	.word	0xc00921fb
 800b0d0:	54442d18 	.word	0x54442d18
 800b0d4:	bff921fb 	.word	0xbff921fb
 800b0d8:	7ff00000 	.word	0x7ff00000
 800b0dc:	00000000 	.word	0x00000000

0800b0e0 <atan>:
 800b0e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0e4:	ec55 4b10 	vmov	r4, r5, d0
 800b0e8:	4bc3      	ldr	r3, [pc, #780]	; (800b3f8 <atan+0x318>)
 800b0ea:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b0ee:	429e      	cmp	r6, r3
 800b0f0:	46ab      	mov	fp, r5
 800b0f2:	dd18      	ble.n	800b126 <atan+0x46>
 800b0f4:	4bc1      	ldr	r3, [pc, #772]	; (800b3fc <atan+0x31c>)
 800b0f6:	429e      	cmp	r6, r3
 800b0f8:	dc01      	bgt.n	800b0fe <atan+0x1e>
 800b0fa:	d109      	bne.n	800b110 <atan+0x30>
 800b0fc:	b144      	cbz	r4, 800b110 <atan+0x30>
 800b0fe:	4622      	mov	r2, r4
 800b100:	462b      	mov	r3, r5
 800b102:	4620      	mov	r0, r4
 800b104:	4629      	mov	r1, r5
 800b106:	f7f5 f8c9 	bl	800029c <__adddf3>
 800b10a:	4604      	mov	r4, r0
 800b10c:	460d      	mov	r5, r1
 800b10e:	e006      	b.n	800b11e <atan+0x3e>
 800b110:	f1bb 0f00 	cmp.w	fp, #0
 800b114:	f300 8131 	bgt.w	800b37a <atan+0x29a>
 800b118:	a59b      	add	r5, pc, #620	; (adr r5, 800b388 <atan+0x2a8>)
 800b11a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b11e:	ec45 4b10 	vmov	d0, r4, r5
 800b122:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b126:	4bb6      	ldr	r3, [pc, #728]	; (800b400 <atan+0x320>)
 800b128:	429e      	cmp	r6, r3
 800b12a:	dc14      	bgt.n	800b156 <atan+0x76>
 800b12c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b130:	429e      	cmp	r6, r3
 800b132:	dc0d      	bgt.n	800b150 <atan+0x70>
 800b134:	a396      	add	r3, pc, #600	; (adr r3, 800b390 <atan+0x2b0>)
 800b136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b13a:	ee10 0a10 	vmov	r0, s0
 800b13e:	4629      	mov	r1, r5
 800b140:	f7f5 f8ac 	bl	800029c <__adddf3>
 800b144:	4baf      	ldr	r3, [pc, #700]	; (800b404 <atan+0x324>)
 800b146:	2200      	movs	r2, #0
 800b148:	f7f5 fcee 	bl	8000b28 <__aeabi_dcmpgt>
 800b14c:	2800      	cmp	r0, #0
 800b14e:	d1e6      	bne.n	800b11e <atan+0x3e>
 800b150:	f04f 3aff 	mov.w	sl, #4294967295
 800b154:	e02b      	b.n	800b1ae <atan+0xce>
 800b156:	f000 f963 	bl	800b420 <fabs>
 800b15a:	4bab      	ldr	r3, [pc, #684]	; (800b408 <atan+0x328>)
 800b15c:	429e      	cmp	r6, r3
 800b15e:	ec55 4b10 	vmov	r4, r5, d0
 800b162:	f300 80bf 	bgt.w	800b2e4 <atan+0x204>
 800b166:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b16a:	429e      	cmp	r6, r3
 800b16c:	f300 80a0 	bgt.w	800b2b0 <atan+0x1d0>
 800b170:	ee10 2a10 	vmov	r2, s0
 800b174:	ee10 0a10 	vmov	r0, s0
 800b178:	462b      	mov	r3, r5
 800b17a:	4629      	mov	r1, r5
 800b17c:	f7f5 f88e 	bl	800029c <__adddf3>
 800b180:	4ba0      	ldr	r3, [pc, #640]	; (800b404 <atan+0x324>)
 800b182:	2200      	movs	r2, #0
 800b184:	f7f5 f888 	bl	8000298 <__aeabi_dsub>
 800b188:	2200      	movs	r2, #0
 800b18a:	4606      	mov	r6, r0
 800b18c:	460f      	mov	r7, r1
 800b18e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b192:	4620      	mov	r0, r4
 800b194:	4629      	mov	r1, r5
 800b196:	f7f5 f881 	bl	800029c <__adddf3>
 800b19a:	4602      	mov	r2, r0
 800b19c:	460b      	mov	r3, r1
 800b19e:	4630      	mov	r0, r6
 800b1a0:	4639      	mov	r1, r7
 800b1a2:	f7f5 fb5b 	bl	800085c <__aeabi_ddiv>
 800b1a6:	f04f 0a00 	mov.w	sl, #0
 800b1aa:	4604      	mov	r4, r0
 800b1ac:	460d      	mov	r5, r1
 800b1ae:	4622      	mov	r2, r4
 800b1b0:	462b      	mov	r3, r5
 800b1b2:	4620      	mov	r0, r4
 800b1b4:	4629      	mov	r1, r5
 800b1b6:	f7f5 fa27 	bl	8000608 <__aeabi_dmul>
 800b1ba:	4602      	mov	r2, r0
 800b1bc:	460b      	mov	r3, r1
 800b1be:	4680      	mov	r8, r0
 800b1c0:	4689      	mov	r9, r1
 800b1c2:	f7f5 fa21 	bl	8000608 <__aeabi_dmul>
 800b1c6:	a374      	add	r3, pc, #464	; (adr r3, 800b398 <atan+0x2b8>)
 800b1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1cc:	4606      	mov	r6, r0
 800b1ce:	460f      	mov	r7, r1
 800b1d0:	f7f5 fa1a 	bl	8000608 <__aeabi_dmul>
 800b1d4:	a372      	add	r3, pc, #456	; (adr r3, 800b3a0 <atan+0x2c0>)
 800b1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1da:	f7f5 f85f 	bl	800029c <__adddf3>
 800b1de:	4632      	mov	r2, r6
 800b1e0:	463b      	mov	r3, r7
 800b1e2:	f7f5 fa11 	bl	8000608 <__aeabi_dmul>
 800b1e6:	a370      	add	r3, pc, #448	; (adr r3, 800b3a8 <atan+0x2c8>)
 800b1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ec:	f7f5 f856 	bl	800029c <__adddf3>
 800b1f0:	4632      	mov	r2, r6
 800b1f2:	463b      	mov	r3, r7
 800b1f4:	f7f5 fa08 	bl	8000608 <__aeabi_dmul>
 800b1f8:	a36d      	add	r3, pc, #436	; (adr r3, 800b3b0 <atan+0x2d0>)
 800b1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1fe:	f7f5 f84d 	bl	800029c <__adddf3>
 800b202:	4632      	mov	r2, r6
 800b204:	463b      	mov	r3, r7
 800b206:	f7f5 f9ff 	bl	8000608 <__aeabi_dmul>
 800b20a:	a36b      	add	r3, pc, #428	; (adr r3, 800b3b8 <atan+0x2d8>)
 800b20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b210:	f7f5 f844 	bl	800029c <__adddf3>
 800b214:	4632      	mov	r2, r6
 800b216:	463b      	mov	r3, r7
 800b218:	f7f5 f9f6 	bl	8000608 <__aeabi_dmul>
 800b21c:	a368      	add	r3, pc, #416	; (adr r3, 800b3c0 <atan+0x2e0>)
 800b21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b222:	f7f5 f83b 	bl	800029c <__adddf3>
 800b226:	4642      	mov	r2, r8
 800b228:	464b      	mov	r3, r9
 800b22a:	f7f5 f9ed 	bl	8000608 <__aeabi_dmul>
 800b22e:	a366      	add	r3, pc, #408	; (adr r3, 800b3c8 <atan+0x2e8>)
 800b230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b234:	4680      	mov	r8, r0
 800b236:	4689      	mov	r9, r1
 800b238:	4630      	mov	r0, r6
 800b23a:	4639      	mov	r1, r7
 800b23c:	f7f5 f9e4 	bl	8000608 <__aeabi_dmul>
 800b240:	a363      	add	r3, pc, #396	; (adr r3, 800b3d0 <atan+0x2f0>)
 800b242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b246:	f7f5 f827 	bl	8000298 <__aeabi_dsub>
 800b24a:	4632      	mov	r2, r6
 800b24c:	463b      	mov	r3, r7
 800b24e:	f7f5 f9db 	bl	8000608 <__aeabi_dmul>
 800b252:	a361      	add	r3, pc, #388	; (adr r3, 800b3d8 <atan+0x2f8>)
 800b254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b258:	f7f5 f81e 	bl	8000298 <__aeabi_dsub>
 800b25c:	4632      	mov	r2, r6
 800b25e:	463b      	mov	r3, r7
 800b260:	f7f5 f9d2 	bl	8000608 <__aeabi_dmul>
 800b264:	a35e      	add	r3, pc, #376	; (adr r3, 800b3e0 <atan+0x300>)
 800b266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b26a:	f7f5 f815 	bl	8000298 <__aeabi_dsub>
 800b26e:	4632      	mov	r2, r6
 800b270:	463b      	mov	r3, r7
 800b272:	f7f5 f9c9 	bl	8000608 <__aeabi_dmul>
 800b276:	a35c      	add	r3, pc, #368	; (adr r3, 800b3e8 <atan+0x308>)
 800b278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b27c:	f7f5 f80c 	bl	8000298 <__aeabi_dsub>
 800b280:	4632      	mov	r2, r6
 800b282:	463b      	mov	r3, r7
 800b284:	f7f5 f9c0 	bl	8000608 <__aeabi_dmul>
 800b288:	4602      	mov	r2, r0
 800b28a:	460b      	mov	r3, r1
 800b28c:	4640      	mov	r0, r8
 800b28e:	4649      	mov	r1, r9
 800b290:	f7f5 f804 	bl	800029c <__adddf3>
 800b294:	4622      	mov	r2, r4
 800b296:	462b      	mov	r3, r5
 800b298:	f7f5 f9b6 	bl	8000608 <__aeabi_dmul>
 800b29c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b2a0:	4602      	mov	r2, r0
 800b2a2:	460b      	mov	r3, r1
 800b2a4:	d14b      	bne.n	800b33e <atan+0x25e>
 800b2a6:	4620      	mov	r0, r4
 800b2a8:	4629      	mov	r1, r5
 800b2aa:	f7f4 fff5 	bl	8000298 <__aeabi_dsub>
 800b2ae:	e72c      	b.n	800b10a <atan+0x2a>
 800b2b0:	ee10 0a10 	vmov	r0, s0
 800b2b4:	4b53      	ldr	r3, [pc, #332]	; (800b404 <atan+0x324>)
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	4629      	mov	r1, r5
 800b2ba:	f7f4 ffed 	bl	8000298 <__aeabi_dsub>
 800b2be:	4b51      	ldr	r3, [pc, #324]	; (800b404 <atan+0x324>)
 800b2c0:	4606      	mov	r6, r0
 800b2c2:	460f      	mov	r7, r1
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	4620      	mov	r0, r4
 800b2c8:	4629      	mov	r1, r5
 800b2ca:	f7f4 ffe7 	bl	800029c <__adddf3>
 800b2ce:	4602      	mov	r2, r0
 800b2d0:	460b      	mov	r3, r1
 800b2d2:	4630      	mov	r0, r6
 800b2d4:	4639      	mov	r1, r7
 800b2d6:	f7f5 fac1 	bl	800085c <__aeabi_ddiv>
 800b2da:	f04f 0a01 	mov.w	sl, #1
 800b2de:	4604      	mov	r4, r0
 800b2e0:	460d      	mov	r5, r1
 800b2e2:	e764      	b.n	800b1ae <atan+0xce>
 800b2e4:	4b49      	ldr	r3, [pc, #292]	; (800b40c <atan+0x32c>)
 800b2e6:	429e      	cmp	r6, r3
 800b2e8:	da1d      	bge.n	800b326 <atan+0x246>
 800b2ea:	ee10 0a10 	vmov	r0, s0
 800b2ee:	4b48      	ldr	r3, [pc, #288]	; (800b410 <atan+0x330>)
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	4629      	mov	r1, r5
 800b2f4:	f7f4 ffd0 	bl	8000298 <__aeabi_dsub>
 800b2f8:	4b45      	ldr	r3, [pc, #276]	; (800b410 <atan+0x330>)
 800b2fa:	4606      	mov	r6, r0
 800b2fc:	460f      	mov	r7, r1
 800b2fe:	2200      	movs	r2, #0
 800b300:	4620      	mov	r0, r4
 800b302:	4629      	mov	r1, r5
 800b304:	f7f5 f980 	bl	8000608 <__aeabi_dmul>
 800b308:	4b3e      	ldr	r3, [pc, #248]	; (800b404 <atan+0x324>)
 800b30a:	2200      	movs	r2, #0
 800b30c:	f7f4 ffc6 	bl	800029c <__adddf3>
 800b310:	4602      	mov	r2, r0
 800b312:	460b      	mov	r3, r1
 800b314:	4630      	mov	r0, r6
 800b316:	4639      	mov	r1, r7
 800b318:	f7f5 faa0 	bl	800085c <__aeabi_ddiv>
 800b31c:	f04f 0a02 	mov.w	sl, #2
 800b320:	4604      	mov	r4, r0
 800b322:	460d      	mov	r5, r1
 800b324:	e743      	b.n	800b1ae <atan+0xce>
 800b326:	462b      	mov	r3, r5
 800b328:	ee10 2a10 	vmov	r2, s0
 800b32c:	4939      	ldr	r1, [pc, #228]	; (800b414 <atan+0x334>)
 800b32e:	2000      	movs	r0, #0
 800b330:	f7f5 fa94 	bl	800085c <__aeabi_ddiv>
 800b334:	f04f 0a03 	mov.w	sl, #3
 800b338:	4604      	mov	r4, r0
 800b33a:	460d      	mov	r5, r1
 800b33c:	e737      	b.n	800b1ae <atan+0xce>
 800b33e:	4b36      	ldr	r3, [pc, #216]	; (800b418 <atan+0x338>)
 800b340:	4e36      	ldr	r6, [pc, #216]	; (800b41c <atan+0x33c>)
 800b342:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b346:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800b34a:	e9da 2300 	ldrd	r2, r3, [sl]
 800b34e:	f7f4 ffa3 	bl	8000298 <__aeabi_dsub>
 800b352:	4622      	mov	r2, r4
 800b354:	462b      	mov	r3, r5
 800b356:	f7f4 ff9f 	bl	8000298 <__aeabi_dsub>
 800b35a:	4602      	mov	r2, r0
 800b35c:	460b      	mov	r3, r1
 800b35e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b362:	f7f4 ff99 	bl	8000298 <__aeabi_dsub>
 800b366:	f1bb 0f00 	cmp.w	fp, #0
 800b36a:	4604      	mov	r4, r0
 800b36c:	460d      	mov	r5, r1
 800b36e:	f6bf aed6 	bge.w	800b11e <atan+0x3e>
 800b372:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b376:	461d      	mov	r5, r3
 800b378:	e6d1      	b.n	800b11e <atan+0x3e>
 800b37a:	a51d      	add	r5, pc, #116	; (adr r5, 800b3f0 <atan+0x310>)
 800b37c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b380:	e6cd      	b.n	800b11e <atan+0x3e>
 800b382:	bf00      	nop
 800b384:	f3af 8000 	nop.w
 800b388:	54442d18 	.word	0x54442d18
 800b38c:	bff921fb 	.word	0xbff921fb
 800b390:	8800759c 	.word	0x8800759c
 800b394:	7e37e43c 	.word	0x7e37e43c
 800b398:	e322da11 	.word	0xe322da11
 800b39c:	3f90ad3a 	.word	0x3f90ad3a
 800b3a0:	24760deb 	.word	0x24760deb
 800b3a4:	3fa97b4b 	.word	0x3fa97b4b
 800b3a8:	a0d03d51 	.word	0xa0d03d51
 800b3ac:	3fb10d66 	.word	0x3fb10d66
 800b3b0:	c54c206e 	.word	0xc54c206e
 800b3b4:	3fb745cd 	.word	0x3fb745cd
 800b3b8:	920083ff 	.word	0x920083ff
 800b3bc:	3fc24924 	.word	0x3fc24924
 800b3c0:	5555550d 	.word	0x5555550d
 800b3c4:	3fd55555 	.word	0x3fd55555
 800b3c8:	2c6a6c2f 	.word	0x2c6a6c2f
 800b3cc:	bfa2b444 	.word	0xbfa2b444
 800b3d0:	52defd9a 	.word	0x52defd9a
 800b3d4:	3fadde2d 	.word	0x3fadde2d
 800b3d8:	af749a6d 	.word	0xaf749a6d
 800b3dc:	3fb3b0f2 	.word	0x3fb3b0f2
 800b3e0:	fe231671 	.word	0xfe231671
 800b3e4:	3fbc71c6 	.word	0x3fbc71c6
 800b3e8:	9998ebc4 	.word	0x9998ebc4
 800b3ec:	3fc99999 	.word	0x3fc99999
 800b3f0:	54442d18 	.word	0x54442d18
 800b3f4:	3ff921fb 	.word	0x3ff921fb
 800b3f8:	440fffff 	.word	0x440fffff
 800b3fc:	7ff00000 	.word	0x7ff00000
 800b400:	3fdbffff 	.word	0x3fdbffff
 800b404:	3ff00000 	.word	0x3ff00000
 800b408:	3ff2ffff 	.word	0x3ff2ffff
 800b40c:	40038000 	.word	0x40038000
 800b410:	3ff80000 	.word	0x3ff80000
 800b414:	bff00000 	.word	0xbff00000
 800b418:	0800b8e0 	.word	0x0800b8e0
 800b41c:	0800b8c0 	.word	0x0800b8c0

0800b420 <fabs>:
 800b420:	ec51 0b10 	vmov	r0, r1, d0
 800b424:	ee10 2a10 	vmov	r2, s0
 800b428:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b42c:	ec43 2b10 	vmov	d0, r2, r3
 800b430:	4770      	bx	lr
	...

0800b434 <_init>:
 800b434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b436:	bf00      	nop
 800b438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b43a:	bc08      	pop	{r3}
 800b43c:	469e      	mov	lr, r3
 800b43e:	4770      	bx	lr

0800b440 <_fini>:
 800b440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b442:	bf00      	nop
 800b444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b446:	bc08      	pop	{r3}
 800b448:	469e      	mov	lr, r3
 800b44a:	4770      	bx	lr
