
balans.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000887c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  08008a20  08008a20  00018a20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ee0  08008ee0  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08008ee0  08008ee0  00018ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ee8  08008ee8  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ee8  08008ee8  00018ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008eec  08008eec  00018eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008ef0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  200001e4  080090d4  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000044c  080090d4  0002044c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000113da  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000262e  00000000  00000000  000315ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b20  00000000  00000000  00033c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a68  00000000  00000000  00034740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001797d  00000000  00000000  000351a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa93  00000000  00000000  0004cb25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089add  00000000  00000000  0005c5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e6095  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f1c  00000000  00000000  000e60e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008a04 	.word	0x08008a04

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	08008a04 	.word	0x08008a04

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08a      	sub	sp, #40	; 0x28
 8000f54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]
 8000f64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	613b      	str	r3, [r7, #16]
 8000f6a:	4b32      	ldr	r3, [pc, #200]	; (8001034 <MX_GPIO_Init+0xe4>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	4a31      	ldr	r2, [pc, #196]	; (8001034 <MX_GPIO_Init+0xe4>)
 8000f70:	f043 0304 	orr.w	r3, r3, #4
 8000f74:	6313      	str	r3, [r2, #48]	; 0x30
 8000f76:	4b2f      	ldr	r3, [pc, #188]	; (8001034 <MX_GPIO_Init+0xe4>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	f003 0304 	and.w	r3, r3, #4
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	4b2b      	ldr	r3, [pc, #172]	; (8001034 <MX_GPIO_Init+0xe4>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a2a      	ldr	r2, [pc, #168]	; (8001034 <MX_GPIO_Init+0xe4>)
 8000f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	4b28      	ldr	r3, [pc, #160]	; (8001034 <MX_GPIO_Init+0xe4>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	4b24      	ldr	r3, [pc, #144]	; (8001034 <MX_GPIO_Init+0xe4>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a23      	ldr	r2, [pc, #140]	; (8001034 <MX_GPIO_Init+0xe4>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b21      	ldr	r3, [pc, #132]	; (8001034 <MX_GPIO_Init+0xe4>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	607b      	str	r3, [r7, #4]
 8000fbe:	4b1d      	ldr	r3, [pc, #116]	; (8001034 <MX_GPIO_Init+0xe4>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a1c      	ldr	r2, [pc, #112]	; (8001034 <MX_GPIO_Init+0xe4>)
 8000fc4:	f043 0302 	orr.w	r3, r3, #2
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <MX_GPIO_Init+0xe4>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f003 0302 	and.w	r3, r3, #2
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fdc:	4816      	ldr	r0, [pc, #88]	; (8001038 <MX_GPIO_Init+0xe8>)
 8000fde:	f001 ffb5 	bl	8002f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000fe2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fe6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	480f      	ldr	r0, [pc, #60]	; (8001038 <MX_GPIO_Init+0xe8>)
 8000ffc:	f001 fe0a 	bl	8002c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PPM_EXTI_Pin;
 8001000:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001004:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001006:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800100a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800100c:	2301      	movs	r3, #1
 800100e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PPM_EXTI_GPIO_Port, &GPIO_InitStruct);
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	4619      	mov	r1, r3
 8001016:	4809      	ldr	r0, [pc, #36]	; (800103c <MX_GPIO_Init+0xec>)
 8001018:	f001 fdfc 	bl	8002c14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800101c:	2200      	movs	r2, #0
 800101e:	2100      	movs	r1, #0
 8001020:	2028      	movs	r0, #40	; 0x28
 8001022:	f001 fd2e 	bl	8002a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f001 fd47 	bl	8002aba <HAL_NVIC_EnableIRQ>

}
 800102c:	bf00      	nop
 800102e:	3728      	adds	r7, #40	; 0x28
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40023800 	.word	0x40023800
 8001038:	40020800 	.word	0x40020800
 800103c:	40020400 	.word	0x40020400

08001040 <Send>:



// ########################## SEND ##########################
void Send(int16_t uSteer, int16_t uSpeed)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	460a      	mov	r2, r1
 800104a:	80fb      	strh	r3, [r7, #6]
 800104c:	4613      	mov	r3, r2
 800104e:	80bb      	strh	r3, [r7, #4]
  // Create command
  Command.start    = (uint16_t)START_FRAME;
 8001050:	4b11      	ldr	r3, [pc, #68]	; (8001098 <Send+0x58>)
 8001052:	f64a 32cd 	movw	r2, #43981	; 0xabcd
 8001056:	801a      	strh	r2, [r3, #0]
  Command.steer    = (int16_t)uSteer;
 8001058:	4a0f      	ldr	r2, [pc, #60]	; (8001098 <Send+0x58>)
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	8053      	strh	r3, [r2, #2]
  Command.speed    = (int16_t)uSpeed;
 800105e:	4a0e      	ldr	r2, [pc, #56]	; (8001098 <Send+0x58>)
 8001060:	88bb      	ldrh	r3, [r7, #4]
 8001062:	8093      	strh	r3, [r2, #4]
  Command.checksum = (uint16_t)(Command.start ^ Command.steer ^ Command.speed);
 8001064:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <Send+0x58>)
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	b21a      	sxth	r2, r3
 800106a:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <Send+0x58>)
 800106c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001070:	4053      	eors	r3, r2
 8001072:	b21a      	sxth	r2, r3
 8001074:	4b08      	ldr	r3, [pc, #32]	; (8001098 <Send+0x58>)
 8001076:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800107a:	4053      	eors	r3, r2
 800107c:	b21b      	sxth	r3, r3
 800107e:	b29a      	uxth	r2, r3
 8001080:	4b05      	ldr	r3, [pc, #20]	; (8001098 <Send+0x58>)
 8001082:	80da      	strh	r2, [r3, #6]

  // Write to Serial
  //HoverSerial.write((uint8_t *) &Command, sizeof(Command));
  HAL_UART_Transmit(&huart2, (uint8_t*) &Command, sizeof(Command), 100);
 8001084:	2364      	movs	r3, #100	; 0x64
 8001086:	2208      	movs	r2, #8
 8001088:	4903      	ldr	r1, [pc, #12]	; (8001098 <Send+0x58>)
 800108a:	4804      	ldr	r0, [pc, #16]	; (800109c <Send+0x5c>)
 800108c:	f003 fbff 	bl	800488e <HAL_UART_Transmit>
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	2000029c 	.word	0x2000029c
 800109c:	200003f4 	.word	0x200003f4

080010a0 <Receive>:

// ########################## RECEIVE ##########################
void Receive(uint8_t* byte)
{
 80010a0:	b5b0      	push	{r4, r5, r7, lr}
 80010a2:	b08a      	sub	sp, #40	; 0x28
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	char buffer[30];

	if(data_available)
 80010a8:	4bad      	ldr	r3, [pc, #692]	; (8001360 <Receive+0x2c0>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d01b      	beq.n	80010e8 <Receive+0x48>
	{
		incomingByte = *byte;             // Read the incoming byte
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	781a      	ldrb	r2, [r3, #0]
 80010b4:	4bab      	ldr	r3, [pc, #684]	; (8001364 <Receive+0x2c4>)
 80010b6:	701a      	strb	r2, [r3, #0]
		bufStartFrame = ((uint16_t) (incomingByte) << 8) | incomingBytePrev; // Construct the start frame
 80010b8:	4baa      	ldr	r3, [pc, #680]	; (8001364 <Receive+0x2c4>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	021b      	lsls	r3, r3, #8
 80010be:	b21a      	sxth	r2, r3
 80010c0:	4ba9      	ldr	r3, [pc, #676]	; (8001368 <Receive+0x2c8>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	b21b      	sxth	r3, r3
 80010c6:	4313      	orrs	r3, r2
 80010c8:	b21b      	sxth	r3, r3
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	4ba7      	ldr	r3, [pc, #668]	; (800136c <Receive+0x2cc>)
 80010ce:	801a      	strh	r2, [r3, #0]
		incomingBytePrev = incomingByte;
 80010d0:	4ba4      	ldr	r3, [pc, #656]	; (8001364 <Receive+0x2c4>)
 80010d2:	781a      	ldrb	r2, [r3, #0]
 80010d4:	4ba4      	ldr	r3, [pc, #656]	; (8001368 <Receive+0x2c8>)
 80010d6:	701a      	strb	r2, [r3, #0]
		data_available = 0;
 80010d8:	4ba1      	ldr	r3, [pc, #644]	; (8001360 <Receive+0x2c0>)
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, byte, sizeof(*byte)); //ponowne oczekiwanie na przerwanie
 80010de:	2201      	movs	r2, #1
 80010e0:	6879      	ldr	r1, [r7, #4]
 80010e2:	48a3      	ldr	r0, [pc, #652]	; (8001370 <Receive+0x2d0>)
 80010e4:	f003 fc65 	bl	80049b2 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart1, (uint8_t*) &bufStartFrame, sizeof(bufStartFrame),100);
        return;
    #endif

    // Copy received data
    if (bufStartFrame == START_FRAME) {	                    // Initialize if new data is detected
 80010e8:	4ba0      	ldr	r3, [pc, #640]	; (800136c <Receive+0x2cc>)
 80010ea:	881b      	ldrh	r3, [r3, #0]
 80010ec:	f64a 32cd 	movw	r2, #43981	; 0xabcd
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d116      	bne.n	8001122 <Receive+0x82>
        p       = (uint8_t *)&NewFeedback;
 80010f4:	4b9f      	ldr	r3, [pc, #636]	; (8001374 <Receive+0x2d4>)
 80010f6:	4aa0      	ldr	r2, [pc, #640]	; (8001378 <Receive+0x2d8>)
 80010f8:	601a      	str	r2, [r3, #0]
        *p++    = incomingBytePrev;
 80010fa:	4b9e      	ldr	r3, [pc, #632]	; (8001374 <Receive+0x2d4>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	1c5a      	adds	r2, r3, #1
 8001100:	499c      	ldr	r1, [pc, #624]	; (8001374 <Receive+0x2d4>)
 8001102:	600a      	str	r2, [r1, #0]
 8001104:	4a98      	ldr	r2, [pc, #608]	; (8001368 <Receive+0x2c8>)
 8001106:	7812      	ldrb	r2, [r2, #0]
 8001108:	701a      	strb	r2, [r3, #0]
        *p++    = incomingByte;
 800110a:	4b9a      	ldr	r3, [pc, #616]	; (8001374 <Receive+0x2d4>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	1c5a      	adds	r2, r3, #1
 8001110:	4998      	ldr	r1, [pc, #608]	; (8001374 <Receive+0x2d4>)
 8001112:	600a      	str	r2, [r1, #0]
 8001114:	4a93      	ldr	r2, [pc, #588]	; (8001364 <Receive+0x2c4>)
 8001116:	7812      	ldrb	r2, [r2, #0]
 8001118:	701a      	strb	r2, [r3, #0]
        idx     = 2;
 800111a:	4b98      	ldr	r3, [pc, #608]	; (800137c <Receive+0x2dc>)
 800111c:	2202      	movs	r2, #2
 800111e:	701a      	strb	r2, [r3, #0]
 8001120:	e015      	b.n	800114e <Receive+0xae>
    } else if (idx >= 2 && idx < sizeof(SerialFeedback)) {  // Save the new received data
 8001122:	4b96      	ldr	r3, [pc, #600]	; (800137c <Receive+0x2dc>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d911      	bls.n	800114e <Receive+0xae>
 800112a:	4b94      	ldr	r3, [pc, #592]	; (800137c <Receive+0x2dc>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b11      	cmp	r3, #17
 8001130:	d80d      	bhi.n	800114e <Receive+0xae>
        *p++    = incomingByte;
 8001132:	4b90      	ldr	r3, [pc, #576]	; (8001374 <Receive+0x2d4>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	1c5a      	adds	r2, r3, #1
 8001138:	498e      	ldr	r1, [pc, #568]	; (8001374 <Receive+0x2d4>)
 800113a:	600a      	str	r2, [r1, #0]
 800113c:	4a89      	ldr	r2, [pc, #548]	; (8001364 <Receive+0x2c4>)
 800113e:	7812      	ldrb	r2, [r2, #0]
 8001140:	701a      	strb	r2, [r3, #0]
        idx++;
 8001142:	4b8e      	ldr	r3, [pc, #568]	; (800137c <Receive+0x2dc>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	3301      	adds	r3, #1
 8001148:	b2da      	uxtb	r2, r3
 800114a:	4b8c      	ldr	r3, [pc, #560]	; (800137c <Receive+0x2dc>)
 800114c:	701a      	strb	r2, [r3, #0]
    }

    // Check if we reached the end of the package
    if (idx == sizeof(SerialFeedback)) {
 800114e:	4b8b      	ldr	r3, [pc, #556]	; (800137c <Receive+0x2dc>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b12      	cmp	r3, #18
 8001154:	f040 815d 	bne.w	8001412 <Receive+0x372>
        uint16_t checksum;
        checksum = (uint16_t)(NewFeedback.start ^ NewFeedback.cmd1 ^ NewFeedback.cmd2 ^ NewFeedback.speedR_meas ^ NewFeedback.speedL_meas
 8001158:	4b87      	ldr	r3, [pc, #540]	; (8001378 <Receive+0x2d8>)
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	b21a      	sxth	r2, r3
 800115e:	4b86      	ldr	r3, [pc, #536]	; (8001378 <Receive+0x2d8>)
 8001160:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001164:	4053      	eors	r3, r2
 8001166:	b21a      	sxth	r2, r3
 8001168:	4b83      	ldr	r3, [pc, #524]	; (8001378 <Receive+0x2d8>)
 800116a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800116e:	4053      	eors	r3, r2
 8001170:	b21a      	sxth	r2, r3
 8001172:	4b81      	ldr	r3, [pc, #516]	; (8001378 <Receive+0x2d8>)
 8001174:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001178:	4053      	eors	r3, r2
 800117a:	b21a      	sxth	r2, r3
 800117c:	4b7e      	ldr	r3, [pc, #504]	; (8001378 <Receive+0x2d8>)
 800117e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001182:	4053      	eors	r3, r2
 8001184:	b21a      	sxth	r2, r3
                            ^ NewFeedback.batVoltage ^ NewFeedback.boardTemp ^ NewFeedback.cmdLed);
 8001186:	4b7c      	ldr	r3, [pc, #496]	; (8001378 <Receive+0x2d8>)
 8001188:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800118c:	4053      	eors	r3, r2
 800118e:	b21a      	sxth	r2, r3
 8001190:	4b79      	ldr	r3, [pc, #484]	; (8001378 <Receive+0x2d8>)
 8001192:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001196:	4053      	eors	r3, r2
 8001198:	b21a      	sxth	r2, r3
 800119a:	4b77      	ldr	r3, [pc, #476]	; (8001378 <Receive+0x2d8>)
 800119c:	89db      	ldrh	r3, [r3, #14]
 800119e:	b21b      	sxth	r3, r3
 80011a0:	4053      	eors	r3, r2
 80011a2:	b21b      	sxth	r3, r3
        checksum = (uint16_t)(NewFeedback.start ^ NewFeedback.cmd1 ^ NewFeedback.cmd2 ^ NewFeedback.speedR_meas ^ NewFeedback.speedL_meas
 80011a4:	84fb      	strh	r3, [r7, #38]	; 0x26

        // Check validity of the new data
        if (NewFeedback.start == START_FRAME && checksum == NewFeedback.checksum) {
 80011a6:	4b74      	ldr	r3, [pc, #464]	; (8001378 <Receive+0x2d8>)
 80011a8:	881b      	ldrh	r3, [r3, #0]
 80011aa:	f64a 32cd 	movw	r2, #43981	; 0xabcd
 80011ae:	4293      	cmp	r3, r2
 80011b0:	f040 8106 	bne.w	80013c0 <Receive+0x320>
 80011b4:	4b70      	ldr	r3, [pc, #448]	; (8001378 <Receive+0x2d8>)
 80011b6:	8a1b      	ldrh	r3, [r3, #16]
 80011b8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80011ba:	429a      	cmp	r2, r3
 80011bc:	f040 8100 	bne.w	80013c0 <Receive+0x320>
            // Copy the new data
            memcpy(&Feedback, &NewFeedback, sizeof(SerialFeedback));
 80011c0:	4b6f      	ldr	r3, [pc, #444]	; (8001380 <Receive+0x2e0>)
 80011c2:	4a6d      	ldr	r2, [pc, #436]	; (8001378 <Receive+0x2d8>)
 80011c4:	6815      	ldr	r5, [r2, #0]
 80011c6:	6854      	ldr	r4, [r2, #4]
 80011c8:	6890      	ldr	r0, [r2, #8]
 80011ca:	68d1      	ldr	r1, [r2, #12]
 80011cc:	601d      	str	r5, [r3, #0]
 80011ce:	605c      	str	r4, [r3, #4]
 80011d0:	6098      	str	r0, [r3, #8]
 80011d2:	60d9      	str	r1, [r3, #12]
 80011d4:	8a12      	ldrh	r2, [r2, #16]
 80011d6:	821a      	strh	r2, [r3, #16]

            // Print data to built-in Serial
            sprintf(buffer, "1: ");
 80011d8:	f107 0308 	add.w	r3, r7, #8
 80011dc:	4969      	ldr	r1, [pc, #420]	; (8001384 <Receive+0x2e4>)
 80011de:	4618      	mov	r0, r3
 80011e0:	f004 ff6c 	bl	80060bc <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*) &buffer, strlen(buffer), 100);
 80011e4:	f107 0308 	add.w	r3, r7, #8
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7fe fff9 	bl	80001e0 <strlen>
 80011ee:	4603      	mov	r3, r0
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	f107 0108 	add.w	r1, r7, #8
 80011f6:	2364      	movs	r3, #100	; 0x64
 80011f8:	485d      	ldr	r0, [pc, #372]	; (8001370 <Receive+0x2d0>)
 80011fa:	f003 fb48 	bl	800488e <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, (uint8_t*) &Feedback.cmd1, sizeof(Feedback.cmd1), 100);
 80011fe:	2364      	movs	r3, #100	; 0x64
 8001200:	2202      	movs	r2, #2
 8001202:	4961      	ldr	r1, [pc, #388]	; (8001388 <Receive+0x2e8>)
 8001204:	485a      	ldr	r0, [pc, #360]	; (8001370 <Receive+0x2d0>)
 8001206:	f003 fb42 	bl	800488e <HAL_UART_Transmit>
            sprintf(buffer, "2: ");
 800120a:	f107 0308 	add.w	r3, r7, #8
 800120e:	495f      	ldr	r1, [pc, #380]	; (800138c <Receive+0x2ec>)
 8001210:	4618      	mov	r0, r3
 8001212:	f004 ff53 	bl	80060bc <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*) &buffer, strlen(buffer), 100);
 8001216:	f107 0308 	add.w	r3, r7, #8
 800121a:	4618      	mov	r0, r3
 800121c:	f7fe ffe0 	bl	80001e0 <strlen>
 8001220:	4603      	mov	r3, r0
 8001222:	b29a      	uxth	r2, r3
 8001224:	f107 0108 	add.w	r1, r7, #8
 8001228:	2364      	movs	r3, #100	; 0x64
 800122a:	4851      	ldr	r0, [pc, #324]	; (8001370 <Receive+0x2d0>)
 800122c:	f003 fb2f 	bl	800488e <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, (uint8_t*) &Feedback.cmd2, sizeof(Feedback.cmd2), 100);
 8001230:	2364      	movs	r3, #100	; 0x64
 8001232:	2202      	movs	r2, #2
 8001234:	4956      	ldr	r1, [pc, #344]	; (8001390 <Receive+0x2f0>)
 8001236:	484e      	ldr	r0, [pc, #312]	; (8001370 <Receive+0x2d0>)
 8001238:	f003 fb29 	bl	800488e <HAL_UART_Transmit>
            sprintf(buffer, "3: ");
 800123c:	f107 0308 	add.w	r3, r7, #8
 8001240:	4954      	ldr	r1, [pc, #336]	; (8001394 <Receive+0x2f4>)
 8001242:	4618      	mov	r0, r3
 8001244:	f004 ff3a 	bl	80060bc <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*) &buffer, strlen(buffer), 100);
 8001248:	f107 0308 	add.w	r3, r7, #8
 800124c:	4618      	mov	r0, r3
 800124e:	f7fe ffc7 	bl	80001e0 <strlen>
 8001252:	4603      	mov	r3, r0
 8001254:	b29a      	uxth	r2, r3
 8001256:	f107 0108 	add.w	r1, r7, #8
 800125a:	2364      	movs	r3, #100	; 0x64
 800125c:	4844      	ldr	r0, [pc, #272]	; (8001370 <Receive+0x2d0>)
 800125e:	f003 fb16 	bl	800488e <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, (uint8_t*) &Feedback.speedR_meas, sizeof(Feedback.speedR_meas), 100);
 8001262:	2364      	movs	r3, #100	; 0x64
 8001264:	2202      	movs	r2, #2
 8001266:	494c      	ldr	r1, [pc, #304]	; (8001398 <Receive+0x2f8>)
 8001268:	4841      	ldr	r0, [pc, #260]	; (8001370 <Receive+0x2d0>)
 800126a:	f003 fb10 	bl	800488e <HAL_UART_Transmit>
            sprintf(buffer, "4: ");
 800126e:	f107 0308 	add.w	r3, r7, #8
 8001272:	494a      	ldr	r1, [pc, #296]	; (800139c <Receive+0x2fc>)
 8001274:	4618      	mov	r0, r3
 8001276:	f004 ff21 	bl	80060bc <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*) &buffer, strlen(buffer), 100);
 800127a:	f107 0308 	add.w	r3, r7, #8
 800127e:	4618      	mov	r0, r3
 8001280:	f7fe ffae 	bl	80001e0 <strlen>
 8001284:	4603      	mov	r3, r0
 8001286:	b29a      	uxth	r2, r3
 8001288:	f107 0108 	add.w	r1, r7, #8
 800128c:	2364      	movs	r3, #100	; 0x64
 800128e:	4838      	ldr	r0, [pc, #224]	; (8001370 <Receive+0x2d0>)
 8001290:	f003 fafd 	bl	800488e <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, (uint8_t*) &Feedback.speedL_meas, sizeof(Feedback.speedL_meas), 100);
 8001294:	2364      	movs	r3, #100	; 0x64
 8001296:	2202      	movs	r2, #2
 8001298:	4941      	ldr	r1, [pc, #260]	; (80013a0 <Receive+0x300>)
 800129a:	4835      	ldr	r0, [pc, #212]	; (8001370 <Receive+0x2d0>)
 800129c:	f003 faf7 	bl	800488e <HAL_UART_Transmit>
            sprintf(buffer, "5: ");
 80012a0:	f107 0308 	add.w	r3, r7, #8
 80012a4:	493f      	ldr	r1, [pc, #252]	; (80013a4 <Receive+0x304>)
 80012a6:	4618      	mov	r0, r3
 80012a8:	f004 ff08 	bl	80060bc <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*) &buffer, strlen(buffer), 100);
 80012ac:	f107 0308 	add.w	r3, r7, #8
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7fe ff95 	bl	80001e0 <strlen>
 80012b6:	4603      	mov	r3, r0
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	f107 0108 	add.w	r1, r7, #8
 80012be:	2364      	movs	r3, #100	; 0x64
 80012c0:	482b      	ldr	r0, [pc, #172]	; (8001370 <Receive+0x2d0>)
 80012c2:	f003 fae4 	bl	800488e <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, (uint8_t*) &Feedback.batVoltage, sizeof(Feedback.batVoltage), 100);
 80012c6:	2364      	movs	r3, #100	; 0x64
 80012c8:	2202      	movs	r2, #2
 80012ca:	4937      	ldr	r1, [pc, #220]	; (80013a8 <Receive+0x308>)
 80012cc:	4828      	ldr	r0, [pc, #160]	; (8001370 <Receive+0x2d0>)
 80012ce:	f003 fade 	bl	800488e <HAL_UART_Transmit>
            sprintf(buffer, "6: ");
 80012d2:	f107 0308 	add.w	r3, r7, #8
 80012d6:	4935      	ldr	r1, [pc, #212]	; (80013ac <Receive+0x30c>)
 80012d8:	4618      	mov	r0, r3
 80012da:	f004 feef 	bl	80060bc <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*) &buffer, strlen(buffer), 100);
 80012de:	f107 0308 	add.w	r3, r7, #8
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7fe ff7c 	bl	80001e0 <strlen>
 80012e8:	4603      	mov	r3, r0
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	f107 0108 	add.w	r1, r7, #8
 80012f0:	2364      	movs	r3, #100	; 0x64
 80012f2:	481f      	ldr	r0, [pc, #124]	; (8001370 <Receive+0x2d0>)
 80012f4:	f003 facb 	bl	800488e <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, (uint8_t*) &Feedback.boardTemp, sizeof(Feedback.boardTemp), 100);
 80012f8:	2364      	movs	r3, #100	; 0x64
 80012fa:	2202      	movs	r2, #2
 80012fc:	492c      	ldr	r1, [pc, #176]	; (80013b0 <Receive+0x310>)
 80012fe:	481c      	ldr	r0, [pc, #112]	; (8001370 <Receive+0x2d0>)
 8001300:	f003 fac5 	bl	800488e <HAL_UART_Transmit>
            sprintf(buffer, "7: ");
 8001304:	f107 0308 	add.w	r3, r7, #8
 8001308:	492a      	ldr	r1, [pc, #168]	; (80013b4 <Receive+0x314>)
 800130a:	4618      	mov	r0, r3
 800130c:	f004 fed6 	bl	80060bc <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*) &buffer, strlen(buffer), 100);
 8001310:	f107 0308 	add.w	r3, r7, #8
 8001314:	4618      	mov	r0, r3
 8001316:	f7fe ff63 	bl	80001e0 <strlen>
 800131a:	4603      	mov	r3, r0
 800131c:	b29a      	uxth	r2, r3
 800131e:	f107 0108 	add.w	r1, r7, #8
 8001322:	2364      	movs	r3, #100	; 0x64
 8001324:	4812      	ldr	r0, [pc, #72]	; (8001370 <Receive+0x2d0>)
 8001326:	f003 fab2 	bl	800488e <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, (uint8_t*) &Feedback.cmdLed, sizeof(Feedback.cmdLed), 100);
 800132a:	2364      	movs	r3, #100	; 0x64
 800132c:	2202      	movs	r2, #2
 800132e:	4922      	ldr	r1, [pc, #136]	; (80013b8 <Receive+0x318>)
 8001330:	480f      	ldr	r0, [pc, #60]	; (8001370 <Receive+0x2d0>)
 8001332:	f003 faac 	bl	800488e <HAL_UART_Transmit>
            sprintf(buffer, "\n\r");
 8001336:	f107 0308 	add.w	r3, r7, #8
 800133a:	4920      	ldr	r1, [pc, #128]	; (80013bc <Receive+0x31c>)
 800133c:	4618      	mov	r0, r3
 800133e:	f004 febd 	bl	80060bc <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*) &buffer, strlen(buffer), 100);
 8001342:	f107 0308 	add.w	r3, r7, #8
 8001346:	4618      	mov	r0, r3
 8001348:	f7fe ff4a 	bl	80001e0 <strlen>
 800134c:	4603      	mov	r3, r0
 800134e:	b29a      	uxth	r2, r3
 8001350:	f107 0108 	add.w	r1, r7, #8
 8001354:	2364      	movs	r3, #100	; 0x64
 8001356:	4806      	ldr	r0, [pc, #24]	; (8001370 <Receive+0x2d0>)
 8001358:	f003 fa99 	bl	800488e <HAL_UART_Transmit>
 800135c:	e056      	b.n	800140c <Receive+0x36c>
 800135e:	bf00      	nop
 8001360:	20000284 	.word	0x20000284
 8001364:	20000201 	.word	0x20000201
 8001368:	20000202 	.word	0x20000202
 800136c:	20000282 	.word	0x20000282
 8001370:	200003f4 	.word	0x200003f4
 8001374:	2000026c 	.word	0x2000026c
 8001378:	20000270 	.word	0x20000270
 800137c:	20000200 	.word	0x20000200
 8001380:	20000288 	.word	0x20000288
 8001384:	08008a20 	.word	0x08008a20
 8001388:	2000028a 	.word	0x2000028a
 800138c:	08008a24 	.word	0x08008a24
 8001390:	2000028c 	.word	0x2000028c
 8001394:	08008a28 	.word	0x08008a28
 8001398:	2000028e 	.word	0x2000028e
 800139c:	08008a2c 	.word	0x08008a2c
 80013a0:	20000290 	.word	0x20000290
 80013a4:	08008a30 	.word	0x08008a30
 80013a8:	20000292 	.word	0x20000292
 80013ac:	08008a34 	.word	0x08008a34
 80013b0:	20000294 	.word	0x20000294
 80013b4:	08008a38 	.word	0x08008a38
 80013b8:	20000296 	.word	0x20000296
 80013bc:	08008a3c 	.word	0x08008a3c
            Serial.print(" 4: ");  Serial.print(Feedback.speedL_meas);
            Serial.print(" 5: ");  Serial.print(Feedback.batVoltage);
            Serial.print(" 6: ");  Serial.print(Feedback.boardTemp);
            Serial.print(" 7: ");  Serial.println(Feedback.cmdLed);*/
        } else {
        	sprintf(buffer, "Non-valid data skipped");
 80013c0:	f107 0308 	add.w	r3, r7, #8
 80013c4:	4917      	ldr	r1, [pc, #92]	; (8001424 <Receive+0x384>)
 80013c6:	4618      	mov	r0, r3
 80013c8:	f004 fe78 	bl	80060bc <siprintf>
        	HAL_UART_Transmit(&huart2, (uint8_t*) &buffer, strlen(buffer), 100);
 80013cc:	f107 0308 	add.w	r3, r7, #8
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7fe ff05 	bl	80001e0 <strlen>
 80013d6:	4603      	mov	r3, r0
 80013d8:	b29a      	uxth	r2, r3
 80013da:	f107 0108 	add.w	r1, r7, #8
 80013de:	2364      	movs	r3, #100	; 0x64
 80013e0:	4811      	ldr	r0, [pc, #68]	; (8001428 <Receive+0x388>)
 80013e2:	f003 fa54 	bl	800488e <HAL_UART_Transmit>
        	sprintf(buffer, "\n\r");
 80013e6:	f107 0308 	add.w	r3, r7, #8
 80013ea:	4910      	ldr	r1, [pc, #64]	; (800142c <Receive+0x38c>)
 80013ec:	4618      	mov	r0, r3
 80013ee:	f004 fe65 	bl	80060bc <siprintf>
        	HAL_UART_Transmit(&huart2, (uint8_t*) &buffer, strlen(buffer), 100);
 80013f2:	f107 0308 	add.w	r3, r7, #8
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7fe fef2 	bl	80001e0 <strlen>
 80013fc:	4603      	mov	r3, r0
 80013fe:	b29a      	uxth	r2, r3
 8001400:	f107 0108 	add.w	r1, r7, #8
 8001404:	2364      	movs	r3, #100	; 0x64
 8001406:	4808      	ldr	r0, [pc, #32]	; (8001428 <Receive+0x388>)
 8001408:	f003 fa41 	bl	800488e <HAL_UART_Transmit>
          //Serial.println("Non-valid data skipped");
        }
        idx = 0;    // Reset the index (it prevents to enter in this if condition in the next cycle)
 800140c:	4b08      	ldr	r3, [pc, #32]	; (8001430 <Receive+0x390>)
 800140e:	2200      	movs	r2, #0
 8001410:	701a      	strb	r2, [r3, #0]
    }

    // Update previous states
    incomingBytePrev = incomingByte;
 8001412:	4b08      	ldr	r3, [pc, #32]	; (8001434 <Receive+0x394>)
 8001414:	781a      	ldrb	r2, [r3, #0]
 8001416:	4b08      	ldr	r3, [pc, #32]	; (8001438 <Receive+0x398>)
 8001418:	701a      	strb	r2, [r3, #0]
}
 800141a:	bf00      	nop
 800141c:	3728      	adds	r7, #40	; 0x28
 800141e:	46bd      	mov	sp, r7
 8001420:	bdb0      	pop	{r4, r5, r7, pc}
 8001422:	bf00      	nop
 8001424:	08008a40 	.word	0x08008a40
 8001428:	200003f4 	.word	0x200003f4
 800142c:	08008a3c 	.word	0x08008a3c
 8001430:	20000200 	.word	0x20000200
 8001434:	20000201 	.word	0x20000201
 8001438:	20000202 	.word	0x20000202

0800143c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001440:	4b12      	ldr	r3, [pc, #72]	; (800148c <MX_I2C1_Init+0x50>)
 8001442:	4a13      	ldr	r2, [pc, #76]	; (8001490 <MX_I2C1_Init+0x54>)
 8001444:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001446:	4b11      	ldr	r3, [pc, #68]	; (800148c <MX_I2C1_Init+0x50>)
 8001448:	4a12      	ldr	r2, [pc, #72]	; (8001494 <MX_I2C1_Init+0x58>)
 800144a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800144c:	4b0f      	ldr	r3, [pc, #60]	; (800148c <MX_I2C1_Init+0x50>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001452:	4b0e      	ldr	r3, [pc, #56]	; (800148c <MX_I2C1_Init+0x50>)
 8001454:	2200      	movs	r2, #0
 8001456:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001458:	4b0c      	ldr	r3, [pc, #48]	; (800148c <MX_I2C1_Init+0x50>)
 800145a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800145e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001460:	4b0a      	ldr	r3, [pc, #40]	; (800148c <MX_I2C1_Init+0x50>)
 8001462:	2200      	movs	r2, #0
 8001464:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <MX_I2C1_Init+0x50>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800146c:	4b07      	ldr	r3, [pc, #28]	; (800148c <MX_I2C1_Init+0x50>)
 800146e:	2200      	movs	r2, #0
 8001470:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001472:	4b06      	ldr	r3, [pc, #24]	; (800148c <MX_I2C1_Init+0x50>)
 8001474:	2200      	movs	r2, #0
 8001476:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001478:	4804      	ldr	r0, [pc, #16]	; (800148c <MX_I2C1_Init+0x50>)
 800147a:	f001 fdb3 	bl	8002fe4 <HAL_I2C_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001484:	f000 fd04 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}
 800148c:	200002a4 	.word	0x200002a4
 8001490:	40005400 	.word	0x40005400
 8001494:	00061a80 	.word	0x00061a80

08001498 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08a      	sub	sp, #40	; 0x28
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a19      	ldr	r2, [pc, #100]	; (800151c <HAL_I2C_MspInit+0x84>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d12b      	bne.n	8001512 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
 80014be:	4b18      	ldr	r3, [pc, #96]	; (8001520 <HAL_I2C_MspInit+0x88>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a17      	ldr	r2, [pc, #92]	; (8001520 <HAL_I2C_MspInit+0x88>)
 80014c4:	f043 0302 	orr.w	r3, r3, #2
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b15      	ldr	r3, [pc, #84]	; (8001520 <HAL_I2C_MspInit+0x88>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	613b      	str	r3, [r7, #16]
 80014d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014d6:	23c0      	movs	r3, #192	; 0xc0
 80014d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014da:	2312      	movs	r3, #18
 80014dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e2:	2303      	movs	r3, #3
 80014e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014e6:	2304      	movs	r3, #4
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ea:	f107 0314 	add.w	r3, r7, #20
 80014ee:	4619      	mov	r1, r3
 80014f0:	480c      	ldr	r0, [pc, #48]	; (8001524 <HAL_I2C_MspInit+0x8c>)
 80014f2:	f001 fb8f 	bl	8002c14 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	4b09      	ldr	r3, [pc, #36]	; (8001520 <HAL_I2C_MspInit+0x88>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	4a08      	ldr	r2, [pc, #32]	; (8001520 <HAL_I2C_MspInit+0x88>)
 8001500:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001504:	6413      	str	r3, [r2, #64]	; 0x40
 8001506:	4b06      	ldr	r3, [pc, #24]	; (8001520 <HAL_I2C_MspInit+0x88>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001512:	bf00      	nop
 8001514:	3728      	adds	r7, #40	; 0x28
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40005400 	.word	0x40005400
 8001520:	40023800 	.word	0x40023800
 8001524:	40020400 	.word	0x40020400

08001528 <getChannelValuePPM>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void getChannelValuePPM(uint8_t pointer) {
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
	channels[pointer - 1] = timers[pointer] - timers[pointer - 1];
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	4a17      	ldr	r2, [pc, #92]	; (8001594 <getChannelValuePPM+0x6c>)
 8001536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800153a:	b299      	uxth	r1, r3
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	3b01      	subs	r3, #1
 8001540:	4a14      	ldr	r2, [pc, #80]	; (8001594 <getChannelValuePPM+0x6c>)
 8001542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001546:	b29a      	uxth	r2, r3
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	3b01      	subs	r3, #1
 800154c:	1a8a      	subs	r2, r1, r2
 800154e:	b291      	uxth	r1, r2
 8001550:	4a11      	ldr	r2, [pc, #68]	; (8001598 <getChannelValuePPM+0x70>)
 8001552:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	if (channels[pointer - 1] > 3000) {
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	3b01      	subs	r3, #1
 800155a:	4a0f      	ldr	r2, [pc, #60]	; (8001598 <getChannelValuePPM+0x70>)
 800155c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001560:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001564:	4293      	cmp	r3, r2
 8001566:	d909      	bls.n	800157c <getChannelValuePPM+0x54>
		timers[0] = timers[pointer];
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <getChannelValuePPM+0x6c>)
 800156c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001570:	4a08      	ldr	r2, [pc, #32]	; (8001594 <getChannelValuePPM+0x6c>)
 8001572:	6013      	str	r3, [r2, #0]
		pulse = 1;
 8001574:	4b09      	ldr	r3, [pc, #36]	; (800159c <getChannelValuePPM+0x74>)
 8001576:	2201      	movs	r2, #1
 8001578:	701a      	strb	r2, [r3, #0]
	} else
		pulse++;
}
 800157a:	e005      	b.n	8001588 <getChannelValuePPM+0x60>
		pulse++;
 800157c:	4b07      	ldr	r3, [pc, #28]	; (800159c <getChannelValuePPM+0x74>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	3301      	adds	r3, #1
 8001582:	b2da      	uxtb	r2, r3
 8001584:	4b05      	ldr	r3, [pc, #20]	; (800159c <getChannelValuePPM+0x74>)
 8001586:	701a      	strb	r2, [r3, #0]
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	200002f8 	.word	0x200002f8
 8001598:	2000038c 	.word	0x2000038c
 800159c:	2000024a 	.word	0x2000024a

080015a0 <getValuePPM>:

uint32_t getValuePPM(uint8_t channel) {
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]
	return channels[channel - 1];
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	3b01      	subs	r3, #1
 80015ae:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <getValuePPM+0x20>)
 80015b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	2000038c 	.word	0x2000038c

080015c4 <LL_SYSTICK_IsActiveCounterFlag>:

static inline uint32_t LL_SYSTICK_IsActiveCounterFlag(void) {
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
	return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)
 80015c8:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
			== (SysTick_CTRL_COUNTFLAG_Msk));
 80015d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015d4:	bf0c      	ite	eq
 80015d6:	2301      	moveq	r3, #1
 80015d8:	2300      	movne	r3, #0
 80015da:	b2db      	uxtb	r3, r3
}
 80015dc:	4618      	mov	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	e000e010 	.word	0xe000e010

080015ec <getCurrentMicros>:

uint32_t getCurrentMicros(void) {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
	/* Ensure COUNTFLAG is reset by reading SysTick control and status register */
	LL_SYSTICK_IsActiveCounterFlag();
 80015f2:	f7ff ffe7 	bl	80015c4 <LL_SYSTICK_IsActiveCounterFlag>
	uint32_t m = HAL_GetTick();
 80015f6:	f001 f95d 	bl	80028b4 <HAL_GetTick>
 80015fa:	60f8      	str	r0, [r7, #12]
	const uint32_t tms = SysTick->LOAD + 1;
 80015fc:	4b13      	ldr	r3, [pc, #76]	; (800164c <getCurrentMicros+0x60>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	3301      	adds	r3, #1
 8001602:	60bb      	str	r3, [r7, #8]
	__IO uint32_t u = tms - SysTick->VAL;
 8001604:	4b11      	ldr	r3, [pc, #68]	; (800164c <getCurrentMicros+0x60>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	68ba      	ldr	r2, [r7, #8]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	607b      	str	r3, [r7, #4]
	if (LL_SYSTICK_IsActiveCounterFlag()) {
 800160e:	f7ff ffd9 	bl	80015c4 <LL_SYSTICK_IsActiveCounterFlag>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d007      	beq.n	8001628 <getCurrentMicros+0x3c>
		m = HAL_GetTick();
 8001618:	f001 f94c 	bl	80028b4 <HAL_GetTick>
 800161c:	60f8      	str	r0, [r7, #12]
		u = tms - SysTick->VAL;
 800161e:	4b0b      	ldr	r3, [pc, #44]	; (800164c <getCurrentMicros+0x60>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	68ba      	ldr	r2, [r7, #8]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	607b      	str	r3, [r7, #4]
	}
	return (m * 1000 + (u * 1000) / tms);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800162e:	fb02 f203 	mul.w	r2, r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001638:	fb01 f103 	mul.w	r1, r1, r3
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001642:	4413      	add	r3, r2
}
 8001644:	4618      	mov	r0, r3
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	e000e010 	.word	0xe000e010

08001650 <map>:

int32_t map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min,
		int32_t out_max) {
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
 800165c:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	69b9      	ldr	r1, [r7, #24]
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	1a8a      	subs	r2, r1, r2
 800166a:	fb02 f203 	mul.w	r2, r2, r3
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	1acb      	subs	r3, r1, r3
 8001674:	fb92 f2f3 	sdiv	r2, r2, r3
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	4413      	add	r3, r2
}
 800167c:	4618      	mov	r0, r3
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <mapfloat>:
float mapfloat(float x, float in_min, float in_max, float out_min,
		float out_max) {
 8001688:	b480      	push	{r7}
 800168a:	b087      	sub	sp, #28
 800168c:	af00      	add	r7, sp, #0
 800168e:	ed87 0a05 	vstr	s0, [r7, #20]
 8001692:	edc7 0a04 	vstr	s1, [r7, #16]
 8001696:	ed87 1a03 	vstr	s2, [r7, #12]
 800169a:	edc7 1a02 	vstr	s3, [r7, #8]
 800169e:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80016a2:	ed97 7a05 	vldr	s14, [r7, #20]
 80016a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80016aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016ae:	edd7 6a01 	vldr	s13, [r7, #4]
 80016b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80016b6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80016ba:	ee67 6a27 	vmul.f32	s13, s14, s15
 80016be:	ed97 7a03 	vldr	s14, [r7, #12]
 80016c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80016c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80016d2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80016d6:	eeb0 0a67 	vmov.f32	s0, s15
 80016da:	371c      	adds	r7, #28
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	0000      	movs	r0, r0
	...

080016e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016e8:	b5b0      	push	{r4, r5, r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016ee:	f001 f87b 	bl	80027e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016f2:	f000 fb23 	bl	8001d3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016f6:	f7ff fc2b 	bl	8000f50 <MX_GPIO_Init>
  MX_I2C1_Init();
 80016fa:	f7ff fe9f 	bl	800143c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80016fe:	f000 ff71 	bl	80025e4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001702:	f000 ff99 	bl	8002638 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	MPU6050_Init();				//może podmienić rezystory na I2C bo musiałem dać pullup software'owy
 8001706:	f000 fbc9 	bl	8001e9c <MPU6050_Init>

	HAL_UART_Receive_IT(&huart2, &byte, sizeof(byte)); //oczekiwanie na przerwanie
 800170a:	2201      	movs	r2, #1
 800170c:	4989      	ldr	r1, [pc, #548]	; (8001934 <main+0x24c>)
 800170e:	488a      	ldr	r0, [pc, #552]	; (8001938 <main+0x250>)
 8001710:	f003 f94f 	bl	80049b2 <HAL_UART_Receive_IT>
	loop_timer = getCurrentMicros();
 8001714:	f7ff ff6a 	bl	80015ec <getCurrentMicros>
 8001718:	4603      	mov	r3, r0
 800171a:	4a88      	ldr	r2, [pc, #544]	; (800193c <main+0x254>)
 800171c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {

		// Check for new received data
		Receive(&byte);
 800171e:	4885      	ldr	r0, [pc, #532]	; (8001934 <main+0x24c>)
 8001720:	f7ff fcbe 	bl	80010a0 <Receive>

		float x, y;
		//		Coordinates point = Coordinates();

		V_bok_apar = getValuePPM(1);
 8001724:	2001      	movs	r0, #1
 8001726:	f7ff ff3b 	bl	80015a0 <getValuePPM>
 800172a:	4603      	mov	r3, r0
 800172c:	b21a      	sxth	r2, r3
 800172e:	4b84      	ldr	r3, [pc, #528]	; (8001940 <main+0x258>)
 8001730:	801a      	strh	r2, [r3, #0]
		V_apar = getValuePPM(2);   //predkosc
 8001732:	2002      	movs	r0, #2
 8001734:	f7ff ff34 	bl	80015a0 <getValuePPM>
 8001738:	4603      	mov	r3, r0
 800173a:	b21a      	sxth	r2, r3
 800173c:	4b81      	ldr	r3, [pc, #516]	; (8001944 <main+0x25c>)
 800173e:	801a      	strh	r2, [r3, #0]
		Funkcja_SW = getValuePPM(7);
 8001740:	2007      	movs	r0, #7
 8001742:	f7ff ff2d 	bl	80015a0 <getValuePPM>
 8001746:	4603      	mov	r3, r0
 8001748:	b21a      	sxth	r2, r3
 800174a:	4b7f      	ldr	r3, [pc, #508]	; (8001948 <main+0x260>)
 800174c:	801a      	strh	r2, [r3, #0]
		Relay_SW = getValuePPM(6);
 800174e:	2006      	movs	r0, #6
 8001750:	f7ff ff26 	bl	80015a0 <getValuePPM>
 8001754:	4603      	mov	r3, r0
 8001756:	b21a      	sxth	r2, r3
 8001758:	4b7c      	ldr	r3, [pc, #496]	; (800194c <main+0x264>)
 800175a:	801a      	strh	r2, [r3, #0]
		V_max_apar = getValuePPM(5);
 800175c:	2005      	movs	r0, #5
 800175e:	f7ff ff1f 	bl	80015a0 <getValuePPM>
 8001762:	4603      	mov	r3, r0
 8001764:	b21a      	sxth	r2, r3
 8001766:	4b7a      	ldr	r3, [pc, #488]	; (8001950 <main+0x268>)
 8001768:	801a      	strh	r2, [r3, #0]
		Fi_max_apar = getValuePPM(8);
 800176a:	2008      	movs	r0, #8
 800176c:	f7ff ff18 	bl	80015a0 <getValuePPM>
 8001770:	4603      	mov	r3, r0
 8001772:	b21a      	sxth	r2, r3
 8001774:	4b77      	ldr	r3, [pc, #476]	; (8001954 <main+0x26c>)
 8001776:	801a      	strh	r2, [r3, #0]
//			HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 100);
//		}
//		sprintf(buffer, "\n\r");
//		HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 100);

		V_max = map(V_max_apar, 1000, 2000, 0, 400);
 8001778:	4b75      	ldr	r3, [pc, #468]	; (8001950 <main+0x268>)
 800177a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800177e:	4618      	mov	r0, r3
 8001780:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001784:	9300      	str	r3, [sp, #0]
 8001786:	2300      	movs	r3, #0
 8001788:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800178c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001790:	f7ff ff5e 	bl	8001650 <map>
 8001794:	4603      	mov	r3, r0
 8001796:	b21a      	sxth	r2, r3
 8001798:	4b6f      	ldr	r3, [pc, #444]	; (8001958 <main+0x270>)
 800179a:	801a      	strh	r2, [r3, #0]
		//                                      / tu jest wartocm maskymalnej rotacji
		Fi_max = map(Fi_max_apar, 1000, 2000, 0, 400);
 800179c:	4b6d      	ldr	r3, [pc, #436]	; (8001954 <main+0x26c>)
 800179e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	2300      	movs	r3, #0
 80017ac:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80017b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017b4:	f7ff ff4c 	bl	8001650 <map>
 80017b8:	4603      	mov	r3, r0
 80017ba:	b21a      	sxth	r2, r3
 80017bc:	4b67      	ldr	r3, [pc, #412]	; (800195c <main+0x274>)
 80017be:	801a      	strh	r2, [r3, #0]

		y = mapfloat(V_bok_apar, RC_CH1_MIN, RC_CH1_MAX, -1.0, 1.0);
 80017c0:	4b5f      	ldr	r3, [pc, #380]	; (8001940 <main+0x258>)
 80017c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c6:	ee07 3a90 	vmov	s15, r3
 80017ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ce:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 80017d2:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 80017d6:	ed9f 1a62 	vldr	s2, [pc, #392]	; 8001960 <main+0x278>
 80017da:	eddf 0a62 	vldr	s1, [pc, #392]	; 8001964 <main+0x27c>
 80017de:	eeb0 0a67 	vmov.f32	s0, s15
 80017e2:	f7ff ff51 	bl	8001688 <mapfloat>
 80017e6:	ed87 0a01 	vstr	s0, [r7, #4]
		x = mapfloat(V_apar, RC_CH2_MIN, RC_CH2_MAX, -1.0, 1.0);
 80017ea:	4b56      	ldr	r3, [pc, #344]	; (8001944 <main+0x25c>)
 80017ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017f0:	ee07 3a90 	vmov	s15, r3
 80017f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017f8:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 80017fc:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 8001800:	ed9f 1a57 	vldr	s2, [pc, #348]	; 8001960 <main+0x278>
 8001804:	eddf 0a57 	vldr	s1, [pc, #348]	; 8001964 <main+0x27c>
 8001808:	eeb0 0a67 	vmov.f32	s0, s15
 800180c:	f7ff ff3c 	bl	8001688 <mapfloat>
 8001810:	ed87 0a00 	vstr	s0, [r7]
		//		y *= SQRT_2;

		//		x = fmax(-1.0, fmin(x, 1.0));
		//		y = fmax(-1.0, fmin(y, 1.0));

		if ((Relay_SW > 1600) && (Relay_SW < 2100)) {
 8001814:	4b4d      	ldr	r3, [pc, #308]	; (800194c <main+0x264>)
 8001816:	f9b3 3000 	ldrsh.w	r3, [r3]
 800181a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800181e:	dd0a      	ble.n	8001836 <main+0x14e>
 8001820:	4b4a      	ldr	r3, [pc, #296]	; (800194c <main+0x264>)
 8001822:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001826:	f640 0233 	movw	r2, #2099	; 0x833
 800182a:	4293      	cmp	r3, r2
 800182c:	dc03      	bgt.n	8001836 <main+0x14e>
			//digitalWrite(Relay,HIGH);
			Jazda = 1;
 800182e:	4b4e      	ldr	r3, [pc, #312]	; (8001968 <main+0x280>)
 8001830:	2201      	movs	r2, #1
 8001832:	801a      	strh	r2, [r3, #0]
 8001834:	e002      	b.n	800183c <main+0x154>
		} else {
			//digitalWrite(Relay,LOW);
			Jazda = 0;
 8001836:	4b4c      	ldr	r3, [pc, #304]	; (8001968 <main+0x280>)
 8001838:	2200      	movs	r2, #0
 800183a:	801a      	strh	r2, [r3, #0]
		}

		if (Jazda == 1) {
 800183c:	4b4a      	ldr	r3, [pc, #296]	; (8001968 <main+0x280>)
 800183e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001842:	2b01      	cmp	r3, #1
 8001844:	f040 809a 	bne.w	800197c <main+0x294>
			VR = mapfloat(x, -1.0, 1.0, -V_max, V_max);
 8001848:	4b43      	ldr	r3, [pc, #268]	; (8001958 <main+0x270>)
 800184a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800184e:	425b      	negs	r3, r3
 8001850:	ee07 3a90 	vmov	s15, r3
 8001854:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001858:	4b3f      	ldr	r3, [pc, #252]	; (8001958 <main+0x270>)
 800185a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800185e:	ee07 3a10 	vmov	s14, r3
 8001862:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001866:	eeb0 2a47 	vmov.f32	s4, s14
 800186a:	eef0 1a67 	vmov.f32	s3, s15
 800186e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001872:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8001876:	ed97 0a00 	vldr	s0, [r7]
 800187a:	f7ff ff05 	bl	8001688 <mapfloat>
 800187e:	eef0 7a40 	vmov.f32	s15, s0
 8001882:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001886:	ee17 3a90 	vmov	r3, s15
 800188a:	b21a      	sxth	r2, r3
 800188c:	4b37      	ldr	r3, [pc, #220]	; (800196c <main+0x284>)
 800188e:	801a      	strh	r2, [r3, #0]
			VL = mapfloat(y, -1.0, 1.0, -V_max, V_max);
 8001890:	4b31      	ldr	r3, [pc, #196]	; (8001958 <main+0x270>)
 8001892:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001896:	425b      	negs	r3, r3
 8001898:	ee07 3a90 	vmov	s15, r3
 800189c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018a0:	4b2d      	ldr	r3, [pc, #180]	; (8001958 <main+0x270>)
 80018a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018a6:	ee07 3a10 	vmov	s14, r3
 80018aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80018ae:	eeb0 2a47 	vmov.f32	s4, s14
 80018b2:	eef0 1a67 	vmov.f32	s3, s15
 80018b6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80018ba:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80018be:	ed97 0a01 	vldr	s0, [r7, #4]
 80018c2:	f7ff fee1 	bl	8001688 <mapfloat>
 80018c6:	eef0 7a40 	vmov.f32	s15, s0
 80018ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018ce:	ee17 3a90 	vmov	r3, s15
 80018d2:	b21a      	sxth	r2, r3
 80018d4:	4b26      	ldr	r3, [pc, #152]	; (8001970 <main+0x288>)
 80018d6:	801a      	strh	r2, [r3, #0]
			Robot_V = map(V_apar, 1000, 2000, -V_max, V_max);
 80018d8:	4b1a      	ldr	r3, [pc, #104]	; (8001944 <main+0x25c>)
 80018da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018de:	4618      	mov	r0, r3
 80018e0:	4b1d      	ldr	r3, [pc, #116]	; (8001958 <main+0x270>)
 80018e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018e6:	425b      	negs	r3, r3
 80018e8:	4a1b      	ldr	r2, [pc, #108]	; (8001958 <main+0x270>)
 80018ea:	f9b2 2000 	ldrsh.w	r2, [r2]
 80018ee:	9200      	str	r2, [sp, #0]
 80018f0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80018f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80018f8:	f7ff feaa 	bl	8001650 <map>
 80018fc:	4603      	mov	r3, r0
 80018fe:	b21a      	sxth	r2, r3
 8001900:	4b1c      	ldr	r3, [pc, #112]	; (8001974 <main+0x28c>)
 8001902:	801a      	strh	r2, [r3, #0]
			Robot_Fi = map(V_bok_apar, 1000, 2000, -Fi_max, Fi_max);
 8001904:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <main+0x258>)
 8001906:	f9b3 3000 	ldrsh.w	r3, [r3]
 800190a:	4618      	mov	r0, r3
 800190c:	4b13      	ldr	r3, [pc, #76]	; (800195c <main+0x274>)
 800190e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001912:	425b      	negs	r3, r3
 8001914:	4a11      	ldr	r2, [pc, #68]	; (800195c <main+0x274>)
 8001916:	f9b2 2000 	ldrsh.w	r2, [r2]
 800191a:	9200      	str	r2, [sp, #0]
 800191c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001920:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001924:	f7ff fe94 	bl	8001650 <map>
 8001928:	4603      	mov	r3, r0
 800192a:	b21a      	sxth	r2, r3
 800192c:	4b12      	ldr	r3, [pc, #72]	; (8001978 <main+0x290>)
 800192e:	801a      	strh	r2, [r3, #0]
 8001930:	e030      	b.n	8001994 <main+0x2ac>
 8001932:	bf00      	nop
 8001934:	20000388 	.word	0x20000388
 8001938:	200003f4 	.word	0x200003f4
 800193c:	200003a0 	.word	0x200003a0
 8001940:	20000238 	.word	0x20000238
 8001944:	20000236 	.word	0x20000236
 8001948:	20000248 	.word	0x20000248
 800194c:	20000246 	.word	0x20000246
 8001950:	2000023a 	.word	0x2000023a
 8001954:	2000023c 	.word	0x2000023c
 8001958:	2000023e 	.word	0x2000023e
 800195c:	20000240 	.word	0x20000240
 8001960:	44fa0000 	.word	0x44fa0000
 8001964:	447a0000 	.word	0x447a0000
 8001968:	20000230 	.word	0x20000230
 800196c:	20000244 	.word	0x20000244
 8001970:	20000242 	.word	0x20000242
 8001974:	20000232 	.word	0x20000232
 8001978:	20000234 	.word	0x20000234

		} else {
			//Serial.println("Jazda 0");
			VL = 0;
 800197c:	4b92      	ldr	r3, [pc, #584]	; (8001bc8 <main+0x4e0>)
 800197e:	2200      	movs	r2, #0
 8001980:	801a      	strh	r2, [r3, #0]
			VR = 0;
 8001982:	4b92      	ldr	r3, [pc, #584]	; (8001bcc <main+0x4e4>)
 8001984:	2200      	movs	r2, #0
 8001986:	801a      	strh	r2, [r3, #0]
			Robot_V = 0;
 8001988:	4b91      	ldr	r3, [pc, #580]	; (8001bd0 <main+0x4e8>)
 800198a:	2200      	movs	r2, #0
 800198c:	801a      	strh	r2, [r3, #0]
			Robot_Fi = 0;
 800198e:	4b91      	ldr	r3, [pc, #580]	; (8001bd4 <main+0x4ec>)
 8001990:	2200      	movs	r2, #0
 8001992:	801a      	strh	r2, [r3, #0]
		}

		if ((VL < 5) && (VL > -5))
 8001994:	4b8c      	ldr	r3, [pc, #560]	; (8001bc8 <main+0x4e0>)
 8001996:	f9b3 3000 	ldrsh.w	r3, [r3]
 800199a:	2b04      	cmp	r3, #4
 800199c:	dc08      	bgt.n	80019b0 <main+0x2c8>
 800199e:	4b8a      	ldr	r3, [pc, #552]	; (8001bc8 <main+0x4e0>)
 80019a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019a4:	f113 0f04 	cmn.w	r3, #4
 80019a8:	db02      	blt.n	80019b0 <main+0x2c8>
			VL = 0;
 80019aa:	4b87      	ldr	r3, [pc, #540]	; (8001bc8 <main+0x4e0>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	801a      	strh	r2, [r3, #0]
		if ((VR < 5) && (VR > -5))
 80019b0:	4b86      	ldr	r3, [pc, #536]	; (8001bcc <main+0x4e4>)
 80019b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	dc08      	bgt.n	80019cc <main+0x2e4>
 80019ba:	4b84      	ldr	r3, [pc, #528]	; (8001bcc <main+0x4e4>)
 80019bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019c0:	f113 0f04 	cmn.w	r3, #4
 80019c4:	db02      	blt.n	80019cc <main+0x2e4>
			VR = 0;
 80019c6:	4b81      	ldr	r3, [pc, #516]	; (8001bcc <main+0x4e4>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	801a      	strh	r2, [r3, #0]
		if ((Robot_V < 5) && (Robot_V > -5))
 80019cc:	4b80      	ldr	r3, [pc, #512]	; (8001bd0 <main+0x4e8>)
 80019ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	dc08      	bgt.n	80019e8 <main+0x300>
 80019d6:	4b7e      	ldr	r3, [pc, #504]	; (8001bd0 <main+0x4e8>)
 80019d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019dc:	f113 0f04 	cmn.w	r3, #4
 80019e0:	db02      	blt.n	80019e8 <main+0x300>
			Robot_V = 0;
 80019e2:	4b7b      	ldr	r3, [pc, #492]	; (8001bd0 <main+0x4e8>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	801a      	strh	r2, [r3, #0]
		if ((Robot_Fi < 5) && (Robot_Fi > -5))
 80019e8:	4b7a      	ldr	r3, [pc, #488]	; (8001bd4 <main+0x4ec>)
 80019ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	dc08      	bgt.n	8001a04 <main+0x31c>
 80019f2:	4b78      	ldr	r3, [pc, #480]	; (8001bd4 <main+0x4ec>)
 80019f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019f8:	f113 0f04 	cmn.w	r3, #4
 80019fc:	db02      	blt.n	8001a04 <main+0x31c>
			Robot_Fi = 0;
 80019fe:	4b75      	ldr	r3, [pc, #468]	; (8001bd4 <main+0x4ec>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	801a      	strh	r2, [r3, #0]

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		/////////////testy MPU6050/////////////////////////////////
		acctheta = MPU6050_Read_Accel();
 8001a04:	f000 fab8 	bl	8001f78 <MPU6050_Read_Accel>
 8001a08:	eef0 7a40 	vmov.f32	s15, s0
 8001a0c:	4b72      	ldr	r3, [pc, #456]	; (8001bd8 <main+0x4f0>)
 8001a0e:	edc3 7a00 	vstr	s15, [r3]
		gyrotheta = MPU6050_Read_Gyro(time);
 8001a12:	4b72      	ldr	r3, [pc, #456]	; (8001bdc <main+0x4f4>)
 8001a14:	edd3 7a00 	vldr	s15, [r3]
 8001a18:	eeb0 0a67 	vmov.f32	s0, s15
 8001a1c:	f000 fb32 	bl	8002084 <MPU6050_Read_Gyro>
 8001a20:	eef0 7a40 	vmov.f32	s15, s0
 8001a24:	4b6e      	ldr	r3, [pc, #440]	; (8001be0 <main+0x4f8>)
 8001a26:	edc3 7a00 	vstr	s15, [r3]
		gyrotesttheta += (gyrotheta * time);
 8001a2a:	4b6d      	ldr	r3, [pc, #436]	; (8001be0 <main+0x4f8>)
 8001a2c:	ed93 7a00 	vldr	s14, [r3]
 8001a30:	4b6a      	ldr	r3, [pc, #424]	; (8001bdc <main+0x4f4>)
 8001a32:	edd3 7a00 	vldr	s15, [r3]
 8001a36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a3a:	4b6a      	ldr	r3, [pc, #424]	; (8001be4 <main+0x4fc>)
 8001a3c:	edd3 7a00 	vldr	s15, [r3]
 8001a40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a44:	4b67      	ldr	r3, [pc, #412]	; (8001be4 <main+0x4fc>)
 8001a46:	edc3 7a00 	vstr	s15, [r3]
		theta = 0.9995 * (theta + gyrotheta * time) + (1 - 0.9995) * acctheta;
 8001a4a:	4b65      	ldr	r3, [pc, #404]	; (8001be0 <main+0x4f8>)
 8001a4c:	ed93 7a00 	vldr	s14, [r3]
 8001a50:	4b62      	ldr	r3, [pc, #392]	; (8001bdc <main+0x4f4>)
 8001a52:	edd3 7a00 	vldr	s15, [r3]
 8001a56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a5a:	4b63      	ldr	r3, [pc, #396]	; (8001be8 <main+0x500>)
 8001a5c:	edd3 7a00 	vldr	s15, [r3]
 8001a60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a64:	ee17 0a90 	vmov	r0, s15
 8001a68:	f7fe fd76 	bl	8000558 <__aeabi_f2d>
 8001a6c:	a352      	add	r3, pc, #328	; (adr r3, 8001bb8 <main+0x4d0>)
 8001a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a72:	f7fe fdc9 	bl	8000608 <__aeabi_dmul>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	4614      	mov	r4, r2
 8001a7c:	461d      	mov	r5, r3
 8001a7e:	4b56      	ldr	r3, [pc, #344]	; (8001bd8 <main+0x4f0>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7fe fd68 	bl	8000558 <__aeabi_f2d>
 8001a88:	a34d      	add	r3, pc, #308	; (adr r3, 8001bc0 <main+0x4d8>)
 8001a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8e:	f7fe fdbb 	bl	8000608 <__aeabi_dmul>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	4620      	mov	r0, r4
 8001a98:	4629      	mov	r1, r5
 8001a9a:	f7fe fbff 	bl	800029c <__adddf3>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f7ff f887 	bl	8000bb8 <__aeabi_d2f>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	4a4e      	ldr	r2, [pc, #312]	; (8001be8 <main+0x500>)
 8001aae:	6013      	str	r3, [r2, #0]
//		sprintf(buffer, "%3.2f, %3.2f, %3.2f\n\r", acctheta, gyrotesttheta, theta);
//		HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 100);

		//definicja uchybu - aktualny kat odjac kat zadany
		e_n = theta_ref - theta;
 8001ab0:	4b4e      	ldr	r3, [pc, #312]	; (8001bec <main+0x504>)
 8001ab2:	ed93 7a00 	vldr	s14, [r3]
 8001ab6:	4b4c      	ldr	r3, [pc, #304]	; (8001be8 <main+0x500>)
 8001ab8:	edd3 7a00 	vldr	s15, [r3]
 8001abc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ac0:	4b4b      	ldr	r3, [pc, #300]	; (8001bf0 <main+0x508>)
 8001ac2:	edc3 7a00 	vstr	s15, [r3]

		//Obliczenie i ograniczenie sumy wszystkich błędów
		suma_e_n += e_n;
 8001ac6:	4b4b      	ldr	r3, [pc, #300]	; (8001bf4 <main+0x50c>)
 8001ac8:	ed93 7a00 	vldr	s14, [r3]
 8001acc:	4b48      	ldr	r3, [pc, #288]	; (8001bf0 <main+0x508>)
 8001ace:	edd3 7a00 	vldr	s15, [r3]
 8001ad2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ad6:	4b47      	ldr	r3, [pc, #284]	; (8001bf4 <main+0x50c>)
 8001ad8:	edc3 7a00 	vstr	s15, [r3]
		if (suma_e_n > ograniczenie_regulatora)
 8001adc:	4b46      	ldr	r3, [pc, #280]	; (8001bf8 <main+0x510>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	ee07 3a90 	vmov	s15, r3
 8001ae4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ae8:	4b42      	ldr	r3, [pc, #264]	; (8001bf4 <main+0x50c>)
 8001aea:	edd3 7a00 	vldr	s15, [r3]
 8001aee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af6:	d509      	bpl.n	8001b0c <main+0x424>
			suma_e_n = ograniczenie_regulatora;
 8001af8:	4b3f      	ldr	r3, [pc, #252]	; (8001bf8 <main+0x510>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	ee07 3a90 	vmov	s15, r3
 8001b00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b04:	4b3b      	ldr	r3, [pc, #236]	; (8001bf4 <main+0x50c>)
 8001b06:	edc3 7a00 	vstr	s15, [r3]
 8001b0a:	e018      	b.n	8001b3e <main+0x456>
		else if (suma_e_n < -ograniczenie_regulatora)
 8001b0c:	4b3a      	ldr	r3, [pc, #232]	; (8001bf8 <main+0x510>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	425b      	negs	r3, r3
 8001b12:	ee07 3a90 	vmov	s15, r3
 8001b16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b1a:	4b36      	ldr	r3, [pc, #216]	; (8001bf4 <main+0x50c>)
 8001b1c:	edd3 7a00 	vldr	s15, [r3]
 8001b20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b28:	dd09      	ble.n	8001b3e <main+0x456>
			suma_e_n = -ograniczenie_regulatora;
 8001b2a:	4b33      	ldr	r3, [pc, #204]	; (8001bf8 <main+0x510>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	425b      	negs	r3, r3
 8001b30:	ee07 3a90 	vmov	s15, r3
 8001b34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b38:	4b2e      	ldr	r3, [pc, #184]	; (8001bf4 <main+0x50c>)
 8001b3a:	edc3 7a00 	vstr	s15, [r3]
		//PID
		pid_output = k_p * e_n + k_i * suma_e_n + k_d * (e_n - poprzedni_e_n);
 8001b3e:	4b2f      	ldr	r3, [pc, #188]	; (8001bfc <main+0x514>)
 8001b40:	ed93 7a00 	vldr	s14, [r3]
 8001b44:	4b2a      	ldr	r3, [pc, #168]	; (8001bf0 <main+0x508>)
 8001b46:	edd3 7a00 	vldr	s15, [r3]
 8001b4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b4e:	4b2c      	ldr	r3, [pc, #176]	; (8001c00 <main+0x518>)
 8001b50:	edd3 6a00 	vldr	s13, [r3]
 8001b54:	4b27      	ldr	r3, [pc, #156]	; (8001bf4 <main+0x50c>)
 8001b56:	edd3 7a00 	vldr	s15, [r3]
 8001b5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b62:	4b23      	ldr	r3, [pc, #140]	; (8001bf0 <main+0x508>)
 8001b64:	edd3 6a00 	vldr	s13, [r3]
 8001b68:	4b26      	ldr	r3, [pc, #152]	; (8001c04 <main+0x51c>)
 8001b6a:	edd3 7a00 	vldr	s15, [r3]
 8001b6e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001b72:	4b25      	ldr	r3, [pc, #148]	; (8001c08 <main+0x520>)
 8001b74:	edd3 7a00 	vldr	s15, [r3]
 8001b78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b80:	4b22      	ldr	r3, [pc, #136]	; (8001c0c <main+0x524>)
 8001b82:	edc3 7a00 	vstr	s15, [r3]

		//ograniczenie wyjścia PID
		if (pid_output > ograniczenie_regulatora)
 8001b86:	4b1c      	ldr	r3, [pc, #112]	; (8001bf8 <main+0x510>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	ee07 3a90 	vmov	s15, r3
 8001b8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b92:	4b1e      	ldr	r3, [pc, #120]	; (8001c0c <main+0x524>)
 8001b94:	edd3 7a00 	vldr	s15, [r3]
 8001b98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba0:	d536      	bpl.n	8001c10 <main+0x528>
			pid_output = ograniczenie_regulatora;
 8001ba2:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <main+0x510>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	ee07 3a90 	vmov	s15, r3
 8001baa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bae:	4b17      	ldr	r3, [pc, #92]	; (8001c0c <main+0x524>)
 8001bb0:	edc3 7a00 	vstr	s15, [r3]
 8001bb4:	e045      	b.n	8001c42 <main+0x55a>
 8001bb6:	bf00      	nop
 8001bb8:	6c8b4396 	.word	0x6c8b4396
 8001bbc:	3feffbe7 	.word	0x3feffbe7
 8001bc0:	d2f1a800 	.word	0xd2f1a800
 8001bc4:	3f40624d 	.word	0x3f40624d
 8001bc8:	20000242 	.word	0x20000242
 8001bcc:	20000244 	.word	0x20000244
 8001bd0:	20000232 	.word	0x20000232
 8001bd4:	20000234 	.word	0x20000234
 8001bd8:	20000204 	.word	0x20000204
 8001bdc:	20000214 	.word	0x20000214
 8001be0:	20000208 	.word	0x20000208
 8001be4:	20000210 	.word	0x20000210
 8001be8:	2000020c 	.word	0x2000020c
 8001bec:	20000224 	.word	0x20000224
 8001bf0:	20000320 	.word	0x20000320
 8001bf4:	20000220 	.word	0x20000220
 8001bf8:	20000000 	.word	0x20000000
 8001bfc:	20000004 	.word	0x20000004
 8001c00:	20000218 	.word	0x20000218
 8001c04:	2000022c 	.word	0x2000022c
 8001c08:	2000021c 	.word	0x2000021c
 8001c0c:	20000228 	.word	0x20000228
		else if (pid_output < -ograniczenie_regulatora)
 8001c10:	4b3f      	ldr	r3, [pc, #252]	; (8001d10 <main+0x628>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	425b      	negs	r3, r3
 8001c16:	ee07 3a90 	vmov	s15, r3
 8001c1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c1e:	4b3d      	ldr	r3, [pc, #244]	; (8001d14 <main+0x62c>)
 8001c20:	edd3 7a00 	vldr	s15, [r3]
 8001c24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c2c:	dd09      	ble.n	8001c42 <main+0x55a>
			pid_output = -ograniczenie_regulatora;
 8001c2e:	4b38      	ldr	r3, [pc, #224]	; (8001d10 <main+0x628>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	425b      	negs	r3, r3
 8001c34:	ee07 3a90 	vmov	s15, r3
 8001c38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c3c:	4b35      	ldr	r3, [pc, #212]	; (8001d14 <main+0x62c>)
 8001c3e:	edc3 7a00 	vstr	s15, [r3]

		//Zapamiętanie ostatniego błędu
		poprzedni_e_n = e_n;
 8001c42:	4b35      	ldr	r3, [pc, #212]	; (8001d18 <main+0x630>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a35      	ldr	r2, [pc, #212]	; (8001d1c <main+0x634>)
 8001c48:	6013      	str	r3, [r2, #0]

		//przełącznik histerezowy (zapobiega ciągłym próbom regulacji w pobliżu theta_ref)
		if (pid_output < 10 && pid_output > -10)
 8001c4a:	4b32      	ldr	r3, [pc, #200]	; (8001d14 <main+0x62c>)
 8001c4c:	edd3 7a00 	vldr	s15, [r3]
 8001c50:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5c:	d50d      	bpl.n	8001c7a <main+0x592>
 8001c5e:	4b2d      	ldr	r3, [pc, #180]	; (8001d14 <main+0x62c>)
 8001c60:	edd3 7a00 	vldr	s15, [r3]
 8001c64:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8001c68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c70:	dd03      	ble.n	8001c7a <main+0x592>
			pid_output = 0;
 8001c72:	4b28      	ldr	r3, [pc, #160]	; (8001d14 <main+0x62c>)
 8001c74:	f04f 0200 	mov.w	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]

		Robot_V = pid_output;
 8001c7a:	4b26      	ldr	r3, [pc, #152]	; (8001d14 <main+0x62c>)
 8001c7c:	edd3 7a00 	vldr	s15, [r3]
 8001c80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c84:	ee17 3a90 	vmov	r3, s15
 8001c88:	b21a      	sxth	r2, r3
 8001c8a:	4b25      	ldr	r3, [pc, #148]	; (8001d20 <main+0x638>)
 8001c8c:	801a      	strh	r2, [r3, #0]

		Send(Robot_Fi, Robot_V);
 8001c8e:	4b25      	ldr	r3, [pc, #148]	; (8001d24 <main+0x63c>)
 8001c90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c94:	4a22      	ldr	r2, [pc, #136]	; (8001d20 <main+0x638>)
 8001c96:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001c9a:	4611      	mov	r1, r2
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff f9cf 	bl	8001040 <Send>
		sprintf(buffer, "Robot_Fi: %d Robot_V: %d\n\r", Robot_Fi, Robot_V);
 8001ca2:	4b20      	ldr	r3, [pc, #128]	; (8001d24 <main+0x63c>)
 8001ca4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4b1d      	ldr	r3, [pc, #116]	; (8001d20 <main+0x638>)
 8001cac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cb0:	491d      	ldr	r1, [pc, #116]	; (8001d28 <main+0x640>)
 8001cb2:	481e      	ldr	r0, [pc, #120]	; (8001d2c <main+0x644>)
 8001cb4:	f004 fa02 	bl	80060bc <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 100);
 8001cb8:	481c      	ldr	r0, [pc, #112]	; (8001d2c <main+0x644>)
 8001cba:	f7fe fa91 	bl	80001e0 <strlen>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	2364      	movs	r3, #100	; 0x64
 8001cc4:	4919      	ldr	r1, [pc, #100]	; (8001d2c <main+0x644>)
 8001cc6:	481a      	ldr	r0, [pc, #104]	; (8001d30 <main+0x648>)
 8001cc8:	f002 fde1 	bl	800488e <HAL_UART_Transmit>

		time = (getCurrentMicros() - loop_timer) * 1e-6;
 8001ccc:	f7ff fc8e 	bl	80015ec <getCurrentMicros>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	4b18      	ldr	r3, [pc, #96]	; (8001d34 <main+0x64c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7fe fc1b 	bl	8000514 <__aeabi_ui2d>
 8001cde:	a30a      	add	r3, pc, #40	; (adr r3, 8001d08 <main+0x620>)
 8001ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce4:	f7fe fc90 	bl	8000608 <__aeabi_dmul>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	4610      	mov	r0, r2
 8001cee:	4619      	mov	r1, r3
 8001cf0:	f7fe ff62 	bl	8000bb8 <__aeabi_d2f>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	4a10      	ldr	r2, [pc, #64]	; (8001d38 <main+0x650>)
 8001cf8:	6013      	str	r3, [r2, #0]
		loop_timer = getCurrentMicros();
 8001cfa:	f7ff fc77 	bl	80015ec <getCurrentMicros>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	4a0c      	ldr	r2, [pc, #48]	; (8001d34 <main+0x64c>)
 8001d02:	6013      	str	r3, [r2, #0]
  {
 8001d04:	e50b      	b.n	800171e <main+0x36>
 8001d06:	bf00      	nop
 8001d08:	a0b5ed8d 	.word	0xa0b5ed8d
 8001d0c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001d10:	20000000 	.word	0x20000000
 8001d14:	20000228 	.word	0x20000228
 8001d18:	20000320 	.word	0x20000320
 8001d1c:	2000022c 	.word	0x2000022c
 8001d20:	20000232 	.word	0x20000232
 8001d24:	20000234 	.word	0x20000234
 8001d28:	08008a58 	.word	0x08008a58
 8001d2c:	20000324 	.word	0x20000324
 8001d30:	200003b0 	.word	0x200003b0
 8001d34:	200003a0 	.word	0x200003a0
 8001d38:	20000214 	.word	0x20000214

08001d3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b094      	sub	sp, #80	; 0x50
 8001d40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d42:	f107 0320 	add.w	r3, r7, #32
 8001d46:	2230      	movs	r2, #48	; 0x30
 8001d48:	2100      	movs	r1, #0
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f003 fd44 	bl	80057d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d50:	f107 030c 	add.w	r3, r7, #12
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d60:	2300      	movs	r3, #0
 8001d62:	60bb      	str	r3, [r7, #8]
 8001d64:	4b22      	ldr	r3, [pc, #136]	; (8001df0 <SystemClock_Config+0xb4>)
 8001d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d68:	4a21      	ldr	r2, [pc, #132]	; (8001df0 <SystemClock_Config+0xb4>)
 8001d6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d6e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d70:	4b1f      	ldr	r3, [pc, #124]	; (8001df0 <SystemClock_Config+0xb4>)
 8001d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d78:	60bb      	str	r3, [r7, #8]
 8001d7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	607b      	str	r3, [r7, #4]
 8001d80:	4b1c      	ldr	r3, [pc, #112]	; (8001df4 <SystemClock_Config+0xb8>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d88:	4a1a      	ldr	r2, [pc, #104]	; (8001df4 <SystemClock_Config+0xb8>)
 8001d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d8e:	6013      	str	r3, [r2, #0]
 8001d90:	4b18      	ldr	r3, [pc, #96]	; (8001df4 <SystemClock_Config+0xb8>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d98:	607b      	str	r3, [r7, #4]
 8001d9a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001da0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001da6:	2300      	movs	r3, #0
 8001da8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001daa:	f107 0320 	add.w	r3, r7, #32
 8001dae:	4618      	mov	r0, r3
 8001db0:	f002 f8d8 	bl	8003f64 <HAL_RCC_OscConfig>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001dba:	f000 f869 	bl	8001e90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dbe:	230f      	movs	r3, #15
 8001dc0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001dd2:	f107 030c 	add.w	r3, r7, #12
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f002 fb3b 	bl	8004454 <HAL_RCC_ClockConfig>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001de4:	f000 f854 	bl	8001e90 <Error_Handler>
  }
}
 8001de8:	bf00      	nop
 8001dea:	3750      	adds	r7, #80	; 0x50
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40023800 	.word	0x40023800
 8001df4:	40007000 	.word	0x40007000

08001df8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) { //sprawdzenie czy przyszło z właściwego usarta
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a05      	ldr	r2, [pc, #20]	; (8001e1c <HAL_UART_RxCpltCallback+0x24>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d102      	bne.n	8001e10 <HAL_UART_RxCpltCallback+0x18>
		data_available = 1;
 8001e0a:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <HAL_UART_RxCpltCallback+0x28>)
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	701a      	strb	r2, [r3, #0]
		//ponowne wywołanie oczekiwania na przerwania dzieje się po przetworzeniu danych w hoverserial.c
	}
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	40004400 	.word	0x40004400
 8001e20:	20000284 	.word	0x20000284

08001e24 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001e24:	b590      	push	{r4, r7, lr}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == PPM_EXTI_Pin) { //sprawdzenie czy właściwy PIN (uwaga, aktualnie ustawiony sprzętowy pullup)
 8001e2e:	88fb      	ldrh	r3, [r7, #6]
 8001e30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e34:	d122      	bne.n	8001e7c <HAL_GPIO_EXTI_Callback+0x58>
		//		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);

		uint8_t state_now = HAL_GPIO_ReadPin(PPM_EXTI_GPIO_Port, PPM_EXTI_Pin); //tylko port C w tym momencie
 8001e36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e3a:	4812      	ldr	r0, [pc, #72]	; (8001e84 <HAL_GPIO_EXTI_Callback+0x60>)
 8001e3c:	f001 f86e 	bl	8002f1c <HAL_GPIO_ReadPin>
 8001e40:	4603      	mov	r3, r0
 8001e42:	73fb      	strb	r3, [r7, #15]
		if (state_now == 1) {
 8001e44:	7bfb      	ldrb	r3, [r7, #15]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d118      	bne.n	8001e7c <HAL_GPIO_EXTI_Callback+0x58>
			timers[pulse] = getCurrentMicros();
 8001e4a:	4b0f      	ldr	r3, [pc, #60]	; (8001e88 <HAL_GPIO_EXTI_Callback+0x64>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	461c      	mov	r4, r3
 8001e50:	f7ff fbcc 	bl	80015ec <getCurrentMicros>
 8001e54:	4603      	mov	r3, r0
 8001e56:	4a0d      	ldr	r2, [pc, #52]	; (8001e8c <HAL_GPIO_EXTI_Callback+0x68>)
 8001e58:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			if (pulse > 0) {
 8001e5c:	4b0a      	ldr	r3, [pc, #40]	; (8001e88 <HAL_GPIO_EXTI_Callback+0x64>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d005      	beq.n	8001e70 <HAL_GPIO_EXTI_Callback+0x4c>
				getChannelValuePPM(pulse);
 8001e64:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <HAL_GPIO_EXTI_Callback+0x64>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff fb5d 	bl	8001528 <getChannelValuePPM>
			} else
				pulse++;
		}
	}
}
 8001e6e:	e005      	b.n	8001e7c <HAL_GPIO_EXTI_Callback+0x58>
				pulse++;
 8001e70:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <HAL_GPIO_EXTI_Callback+0x64>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	3301      	adds	r3, #1
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	4b03      	ldr	r3, [pc, #12]	; (8001e88 <HAL_GPIO_EXTI_Callback+0x64>)
 8001e7a:	701a      	strb	r2, [r3, #0]
}
 8001e7c:	bf00      	nop
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd90      	pop	{r4, r7, pc}
 8001e84:	40020400 	.word	0x40020400
 8001e88:	2000024a 	.word	0x2000024a
 8001e8c:	200002f8 	.word	0x200002f8

08001e90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e94:	b672      	cpsid	i
}
 8001e96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e98:	e7fe      	b.n	8001e98 <Error_Handler+0x8>
	...

08001e9c <MPU6050_Init>:
uint32_t loop_timer;
float gyro_calibr = 0, acc_calibr = 0;

float angle_acc, Gx = 0, Gy, Gz;

void MPU6050_Init(void) {
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// sprawdzenie czy to MPU6050

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I, 1, &check, 1, 1000);
 8001ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ea6:	9302      	str	r3, [sp, #8]
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	9301      	str	r3, [sp, #4]
 8001eac:	1dfb      	adds	r3, r7, #7
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	2275      	movs	r2, #117	; 0x75
 8001eb4:	21d0      	movs	r1, #208	; 0xd0
 8001eb6:	482c      	ldr	r0, [pc, #176]	; (8001f68 <MPU6050_Init+0xcc>)
 8001eb8:	f001 fad2 	bl	8003460 <HAL_I2C_Mem_Read>

	if (check == 0x72) // powinno być 0x68 ale w tym przypadku to jakiś klon
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
 8001ebe:	2b72      	cmp	r3, #114	; 0x72
 8001ec0:	d149      	bne.n	8001f56 <MPU6050_Init+0xba>
			{
		// power management register: brak resetu, wyłączone tryby sleep i cycle, wyłączony czujnik temp. (bit wysoki), wewnętrzny zegar 8MHz
		Data = 0b00001000;
 8001ec2:	2308      	movs	r3, #8
 8001ec4:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1, 1, &Data, 1, 1000);
 8001ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eca:	9302      	str	r3, [sp, #8]
 8001ecc:	2301      	movs	r3, #1
 8001ece:	9301      	str	r3, [sp, #4]
 8001ed0:	1dbb      	adds	r3, r7, #6
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	226b      	movs	r2, #107	; 0x6b
 8001ed8:	21d0      	movs	r1, #208	; 0xd0
 8001eda:	4823      	ldr	r0, [pc, #140]	; (8001f68 <MPU6050_Init+0xcc>)
 8001edc:	f001 f9c6 	bl	800326c <HAL_I2C_Mem_Write>
		//Data = 0x07;
		//HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV, 1, &Data, 1, 1000);

		// konfiguracja akcelerometru
		// bity 3 = 0; 4 = 0 - zakres akcelerometru na +-0g, pozostałe bity to selftest bądź zastrzeżone (oba nieistotne)
		Data = 0x00;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG, 1, &Data, 1,
 8001ee4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ee8:	9302      	str	r3, [sp, #8]
 8001eea:	2301      	movs	r3, #1
 8001eec:	9301      	str	r3, [sp, #4]
 8001eee:	1dbb      	adds	r3, r7, #6
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	221c      	movs	r2, #28
 8001ef6:	21d0      	movs	r1, #208	; 0xd0
 8001ef8:	481b      	ldr	r0, [pc, #108]	; (8001f68 <MPU6050_Init+0xcc>)
 8001efa:	f001 f9b7 	bl	800326c <HAL_I2C_Mem_Write>
				1000);

		// konfiguracja żyroskopu
		// bity 3 = 0; 4 = 0 - zakres żyroskopu na +-250 deg/s, pozostałe bity to selftest bądź zastrzeżone (oba nieistotne)
		Data = 0x00;
 8001efe:	2300      	movs	r3, #0
 8001f00:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG, 1, &Data, 1, 1000);
 8001f02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f06:	9302      	str	r3, [sp, #8]
 8001f08:	2301      	movs	r3, #1
 8001f0a:	9301      	str	r3, [sp, #4]
 8001f0c:	1dbb      	adds	r3, r7, #6
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	2301      	movs	r3, #1
 8001f12:	221b      	movs	r2, #27
 8001f14:	21d0      	movs	r1, #208	; 0xd0
 8001f16:	4814      	ldr	r0, [pc, #80]	; (8001f68 <MPU6050_Init+0xcc>)
 8001f18:	f001 f9a8 	bl	800326c <HAL_I2C_Mem_Write>

		Data = 0b00000101;	////ostatnie 3 bity to filtr LPF, 43Hz 011
 8001f1c:	2305      	movs	r3, #5
 8001f1e:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x1A, 1, &Data, 1, 1000);
 8001f20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f24:	9302      	str	r3, [sp, #8]
 8001f26:	2301      	movs	r3, #1
 8001f28:	9301      	str	r3, [sp, #4]
 8001f2a:	1dbb      	adds	r3, r7, #6
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	2301      	movs	r3, #1
 8001f30:	221a      	movs	r2, #26
 8001f32:	21d0      	movs	r1, #208	; 0xd0
 8001f34:	480c      	ldr	r0, [pc, #48]	; (8001f68 <MPU6050_Init+0xcc>)
 8001f36:	f001 f999 	bl	800326c <HAL_I2C_Mem_Write>

		gyro_calibr = kalibracja_gyro();
 8001f3a:	f000 f9b3 	bl	80022a4 <kalibracja_gyro>
 8001f3e:	eef0 7a40 	vmov.f32	s15, s0
 8001f42:	4b0a      	ldr	r3, [pc, #40]	; (8001f6c <MPU6050_Init+0xd0>)
 8001f44:	edc3 7a00 	vstr	s15, [r3]
		acc_calibr = kalibracja_acc();
 8001f48:	f000 f8f2 	bl	8002130 <kalibracja_acc>
 8001f4c:	eef0 7a40 	vmov.f32	s15, s0
 8001f50:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <MPU6050_Init+0xd4>)
 8001f52:	edc3 7a00 	vstr	s15, [r3]
	}
	loop_timer = HAL_GetTick();
 8001f56:	f000 fcad 	bl	80028b4 <HAL_GetTick>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	4a05      	ldr	r2, [pc, #20]	; (8001f74 <MPU6050_Init+0xd8>)
 8001f5e:	6013      	str	r3, [r2, #0]

}
 8001f60:	bf00      	nop
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	200002a4 	.word	0x200002a4
 8001f6c:	20000254 	.word	0x20000254
 8001f70:	20000258 	.word	0x20000258
 8001f74:	200003a0 	.word	0x200003a0

08001f78 <MPU6050_Read_Accel>:

float MPU6050_Read_Accel(void) {
 8001f78:	b5b0      	push	{r4, r5, r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// odczytanie 6 bajtów począwszy od rejestru ACCEL_XOUT_H, wymagane dwa do obliczeń

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H, 1, Rec_Data, 6, 1000);
 8001f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f82:	9302      	str	r3, [sp, #8]
 8001f84:	2306      	movs	r3, #6
 8001f86:	9301      	str	r3, [sp, #4]
 8001f88:	463b      	mov	r3, r7
 8001f8a:	9300      	str	r3, [sp, #0]
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	223b      	movs	r2, #59	; 0x3b
 8001f90:	21d0      	movs	r1, #208	; 0xd0
 8001f92:	4835      	ldr	r0, [pc, #212]	; (8002068 <MPU6050_Read_Accel+0xf0>)
 8001f94:	f001 fa64 	bl	8003460 <HAL_I2C_Mem_Read>

	acc_rawX = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8001f98:	783b      	ldrb	r3, [r7, #0]
 8001f9a:	021b      	lsls	r3, r3, #8
 8001f9c:	b21a      	sxth	r2, r3
 8001f9e:	787b      	ldrb	r3, [r7, #1]
 8001fa0:	b21b      	sxth	r3, r3
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	b21a      	sxth	r2, r3
 8001fa6:	4b31      	ldr	r3, [pc, #196]	; (800206c <MPU6050_Read_Accel+0xf4>)
 8001fa8:	801a      	strh	r2, [r3, #0]
	acc_rawY = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001faa:	78bb      	ldrb	r3, [r7, #2]
 8001fac:	021b      	lsls	r3, r3, #8
 8001fae:	b21a      	sxth	r2, r3
 8001fb0:	78fb      	ldrb	r3, [r7, #3]
 8001fb2:	b21b      	sxth	r3, r3
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	b21a      	sxth	r2, r3
 8001fb8:	4b2d      	ldr	r3, [pc, #180]	; (8002070 <MPU6050_Read_Accel+0xf8>)
 8001fba:	801a      	strh	r2, [r3, #0]
	acc_rawZ = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8001fbc:	793b      	ldrb	r3, [r7, #4]
 8001fbe:	021b      	lsls	r3, r3, #8
 8001fc0:	b21a      	sxth	r2, r3
 8001fc2:	797b      	ldrb	r3, [r7, #5]
 8001fc4:	b21b      	sxth	r3, r3
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	b21a      	sxth	r2, r3
 8001fca:	4b2a      	ldr	r3, [pc, #168]	; (8002074 <MPU6050_Read_Accel+0xfc>)
 8001fcc:	801a      	strh	r2, [r3, #0]

	//kąt jest atanem ilorazu przyspieszeń zatem nie trzeba konwertować do g

	angle_acc = atan2((float) acc_rawY, (float) acc_rawZ) * 180 / M_PI;
 8001fce:	4b28      	ldr	r3, [pc, #160]	; (8002070 <MPU6050_Read_Accel+0xf8>)
 8001fd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fd4:	ee07 3a90 	vmov	s15, r3
 8001fd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fdc:	ee17 0a90 	vmov	r0, s15
 8001fe0:	f7fe faba 	bl	8000558 <__aeabi_f2d>
 8001fe4:	4604      	mov	r4, r0
 8001fe6:	460d      	mov	r5, r1
 8001fe8:	4b22      	ldr	r3, [pc, #136]	; (8002074 <MPU6050_Read_Accel+0xfc>)
 8001fea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fee:	ee07 3a90 	vmov	s15, r3
 8001ff2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ff6:	ee17 0a90 	vmov	r0, s15
 8001ffa:	f7fe faad 	bl	8000558 <__aeabi_f2d>
 8001ffe:	4602      	mov	r2, r0
 8002000:	460b      	mov	r3, r1
 8002002:	ec43 2b11 	vmov	d1, r2, r3
 8002006:	ec45 4b10 	vmov	d0, r4, r5
 800200a:	f006 fa83 	bl	8008514 <atan2>
 800200e:	ec51 0b10 	vmov	r0, r1, d0
 8002012:	f04f 0200 	mov.w	r2, #0
 8002016:	4b18      	ldr	r3, [pc, #96]	; (8002078 <MPU6050_Read_Accel+0x100>)
 8002018:	f7fe faf6 	bl	8000608 <__aeabi_dmul>
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	4610      	mov	r0, r2
 8002022:	4619      	mov	r1, r3
 8002024:	a30e      	add	r3, pc, #56	; (adr r3, 8002060 <MPU6050_Read_Accel+0xe8>)
 8002026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202a:	f7fe fc17 	bl	800085c <__aeabi_ddiv>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	4610      	mov	r0, r2
 8002034:	4619      	mov	r1, r3
 8002036:	f7fe fdbf 	bl	8000bb8 <__aeabi_d2f>
 800203a:	4603      	mov	r3, r0
 800203c:	4a0f      	ldr	r2, [pc, #60]	; (800207c <MPU6050_Read_Accel+0x104>)
 800203e:	6013      	str	r3, [r2, #0]

	return angle_acc - acc_calibr;
 8002040:	4b0e      	ldr	r3, [pc, #56]	; (800207c <MPU6050_Read_Accel+0x104>)
 8002042:	ed93 7a00 	vldr	s14, [r3]
 8002046:	4b0e      	ldr	r3, [pc, #56]	; (8002080 <MPU6050_Read_Accel+0x108>)
 8002048:	edd3 7a00 	vldr	s15, [r3]
 800204c:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8002050:	eeb0 0a67 	vmov.f32	s0, s15
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bdb0      	pop	{r4, r5, r7, pc}
 800205a:	bf00      	nop
 800205c:	f3af 8000 	nop.w
 8002060:	54442d18 	.word	0x54442d18
 8002064:	400921fb 	.word	0x400921fb
 8002068:	200002a4 	.word	0x200002a4
 800206c:	2000024c 	.word	0x2000024c
 8002070:	2000024e 	.word	0x2000024e
 8002074:	20000250 	.word	0x20000250
 8002078:	40668000 	.word	0x40668000
 800207c:	200003a4 	.word	0x200003a4
 8002080:	20000258 	.word	0x20000258

08002084 <MPU6050_Read_Gyro>:

float MPU6050_Read_Gyro(float time) {
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af04      	add	r7, sp, #16
 800208a:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t Rec_Data[2];	//odczytanie rejestru GYRO_XOUT_H
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H, 1, Rec_Data, 2, 1000);
 800208e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002092:	9302      	str	r3, [sp, #8]
 8002094:	2302      	movs	r3, #2
 8002096:	9301      	str	r3, [sp, #4]
 8002098:	f107 030c 	add.w	r3, r7, #12
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	2301      	movs	r3, #1
 80020a0:	2243      	movs	r2, #67	; 0x43
 80020a2:	21d0      	movs	r1, #208	; 0xd0
 80020a4:	481c      	ldr	r0, [pc, #112]	; (8002118 <MPU6050_Read_Gyro+0x94>)
 80020a6:	f001 f9db 	bl	8003460 <HAL_I2C_Mem_Read>
	Gyro_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 80020aa:	7b3b      	ldrb	r3, [r7, #12]
 80020ac:	021b      	lsls	r3, r3, #8
 80020ae:	b21a      	sxth	r2, r3
 80020b0:	7b7b      	ldrb	r3, [r7, #13]
 80020b2:	b21b      	sxth	r3, r3
 80020b4:	4313      	orrs	r3, r2
 80020b6:	b21a      	sxth	r2, r3
 80020b8:	4b18      	ldr	r3, [pc, #96]	; (800211c <MPU6050_Read_Gyro+0x98>)
 80020ba:	801a      	strh	r2, [r3, #0]

	Gyro_X_RAW -= gyro_calibr;          //uwzględnienie odczytu kalibracyjnego
 80020bc:	4b17      	ldr	r3, [pc, #92]	; (800211c <MPU6050_Read_Gyro+0x98>)
 80020be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020c2:	ee07 3a90 	vmov	s15, r3
 80020c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020ca:	4b15      	ldr	r3, [pc, #84]	; (8002120 <MPU6050_Read_Gyro+0x9c>)
 80020cc:	edd3 7a00 	vldr	s15, [r3]
 80020d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020d8:	ee17 3a90 	vmov	r3, s15
 80020dc:	b21a      	sxth	r2, r3
 80020de:	4b0f      	ldr	r3, [pc, #60]	; (800211c <MPU6050_Read_Gyro+0x98>)
 80020e0:	801a      	strh	r2, [r3, #0]
	Gx = Gyro_X_RAW/131;
 80020e2:	4b0e      	ldr	r3, [pc, #56]	; (800211c <MPU6050_Read_Gyro+0x98>)
 80020e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020e8:	4a0e      	ldr	r2, [pc, #56]	; (8002124 <MPU6050_Read_Gyro+0xa0>)
 80020ea:	fb82 1203 	smull	r1, r2, r2, r3
 80020ee:	1152      	asrs	r2, r2, #5
 80020f0:	17db      	asrs	r3, r3, #31
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	b21b      	sxth	r3, r3
 80020f6:	ee07 3a90 	vmov	s15, r3
 80020fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020fe:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <MPU6050_Read_Gyro+0xa4>)
 8002100:	edc3 7a00 	vstr	s15, [r3]
	//Gx += Gyro_X_RAW * time / 131; //kąt z poprzedniej pętli + kąt przebyty w tej pętli - 131 LSB dla 1deg/s, czas petli wynosi 0.004s, zatem pokonana droga wyniesie 131/0.004 deg
	return Gx;
 8002104:	4b08      	ldr	r3, [pc, #32]	; (8002128 <MPU6050_Read_Gyro+0xa4>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	ee07 3a90 	vmov	s15, r3
}
 800210c:	eeb0 0a67 	vmov.f32	s0, s15
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	200002a4 	.word	0x200002a4
 800211c:	20000252 	.word	0x20000252
 8002120:	20000254 	.word	0x20000254
 8002124:	3e88cb3d 	.word	0x3e88cb3d
 8002128:	2000025c 	.word	0x2000025c
 800212c:	00000000 	.word	0x00000000

08002130 <kalibracja_acc>:

float kalibracja_acc(void) {
 8002130:	b5b0      	push	{r4, r5, r7, lr}
 8002132:	b088      	sub	sp, #32
 8002134:	af04      	add	r7, sp, #16
	for (int i = 0; i < 10000; i++) {
 8002136:	2300      	movs	r3, #0
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	e084      	b.n	8002246 <kalibracja_acc+0x116>
		if (i % 200 == 0)
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	4b50      	ldr	r3, [pc, #320]	; (8002280 <kalibracja_acc+0x150>)
 8002140:	fb83 1302 	smull	r1, r3, r3, r2
 8002144:	1199      	asrs	r1, r3, #6
 8002146:	17d3      	asrs	r3, r2, #31
 8002148:	1acb      	subs	r3, r1, r3
 800214a:	21c8      	movs	r1, #200	; 0xc8
 800214c:	fb01 f303 	mul.w	r3, r1, r3
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d104      	bne.n	8002160 <kalibracja_acc+0x30>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002156:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800215a:	484a      	ldr	r0, [pc, #296]	; (8002284 <kalibracja_acc+0x154>)
 800215c:	f000 ff0f 	bl	8002f7e <HAL_GPIO_TogglePin>

		uint8_t Rec_Data[6];
		HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H, 1, Rec_Data, 6,
 8002160:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002164:	9302      	str	r3, [sp, #8]
 8002166:	2306      	movs	r3, #6
 8002168:	9301      	str	r3, [sp, #4]
 800216a:	1d3b      	adds	r3, r7, #4
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	2301      	movs	r3, #1
 8002170:	223b      	movs	r2, #59	; 0x3b
 8002172:	21d0      	movs	r1, #208	; 0xd0
 8002174:	4844      	ldr	r0, [pc, #272]	; (8002288 <kalibracja_acc+0x158>)
 8002176:	f001 f973 	bl	8003460 <HAL_I2C_Mem_Read>
				1000);
		acc_rawX = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 800217a:	793b      	ldrb	r3, [r7, #4]
 800217c:	021b      	lsls	r3, r3, #8
 800217e:	b21a      	sxth	r2, r3
 8002180:	797b      	ldrb	r3, [r7, #5]
 8002182:	b21b      	sxth	r3, r3
 8002184:	4313      	orrs	r3, r2
 8002186:	b21a      	sxth	r2, r3
 8002188:	4b40      	ldr	r3, [pc, #256]	; (800228c <kalibracja_acc+0x15c>)
 800218a:	801a      	strh	r2, [r3, #0]
		acc_rawY = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 800218c:	79bb      	ldrb	r3, [r7, #6]
 800218e:	021b      	lsls	r3, r3, #8
 8002190:	b21a      	sxth	r2, r3
 8002192:	79fb      	ldrb	r3, [r7, #7]
 8002194:	b21b      	sxth	r3, r3
 8002196:	4313      	orrs	r3, r2
 8002198:	b21a      	sxth	r2, r3
 800219a:	4b3d      	ldr	r3, [pc, #244]	; (8002290 <kalibracja_acc+0x160>)
 800219c:	801a      	strh	r2, [r3, #0]
		acc_rawZ = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 800219e:	7a3b      	ldrb	r3, [r7, #8]
 80021a0:	021b      	lsls	r3, r3, #8
 80021a2:	b21a      	sxth	r2, r3
 80021a4:	7a7b      	ldrb	r3, [r7, #9]
 80021a6:	b21b      	sxth	r3, r3
 80021a8:	4313      	orrs	r3, r2
 80021aa:	b21a      	sxth	r2, r3
 80021ac:	4b39      	ldr	r3, [pc, #228]	; (8002294 <kalibracja_acc+0x164>)
 80021ae:	801a      	strh	r2, [r3, #0]

		//kąt jest atanem ilorazu przyspieszeń zatem nie trzeba konwertować do g

		acc_calibr += atan2((float) acc_rawY, (float) acc_rawZ) * 180 / M_PI;
 80021b0:	4b37      	ldr	r3, [pc, #220]	; (8002290 <kalibracja_acc+0x160>)
 80021b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021b6:	ee07 3a90 	vmov	s15, r3
 80021ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021be:	ee17 0a90 	vmov	r0, s15
 80021c2:	f7fe f9c9 	bl	8000558 <__aeabi_f2d>
 80021c6:	4604      	mov	r4, r0
 80021c8:	460d      	mov	r5, r1
 80021ca:	4b32      	ldr	r3, [pc, #200]	; (8002294 <kalibracja_acc+0x164>)
 80021cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021d0:	ee07 3a90 	vmov	s15, r3
 80021d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021d8:	ee17 0a90 	vmov	r0, s15
 80021dc:	f7fe f9bc 	bl	8000558 <__aeabi_f2d>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	ec43 2b11 	vmov	d1, r2, r3
 80021e8:	ec45 4b10 	vmov	d0, r4, r5
 80021ec:	f006 f992 	bl	8008514 <atan2>
 80021f0:	ec51 0b10 	vmov	r0, r1, d0
 80021f4:	f04f 0200 	mov.w	r2, #0
 80021f8:	4b27      	ldr	r3, [pc, #156]	; (8002298 <kalibracja_acc+0x168>)
 80021fa:	f7fe fa05 	bl	8000608 <__aeabi_dmul>
 80021fe:	4602      	mov	r2, r0
 8002200:	460b      	mov	r3, r1
 8002202:	4610      	mov	r0, r2
 8002204:	4619      	mov	r1, r3
 8002206:	a31c      	add	r3, pc, #112	; (adr r3, 8002278 <kalibracja_acc+0x148>)
 8002208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220c:	f7fe fb26 	bl	800085c <__aeabi_ddiv>
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4614      	mov	r4, r2
 8002216:	461d      	mov	r5, r3
 8002218:	4b20      	ldr	r3, [pc, #128]	; (800229c <kalibracja_acc+0x16c>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f7fe f99b 	bl	8000558 <__aeabi_f2d>
 8002222:	4602      	mov	r2, r0
 8002224:	460b      	mov	r3, r1
 8002226:	4620      	mov	r0, r4
 8002228:	4629      	mov	r1, r5
 800222a:	f7fe f837 	bl	800029c <__adddf3>
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	4610      	mov	r0, r2
 8002234:	4619      	mov	r1, r3
 8002236:	f7fe fcbf 	bl	8000bb8 <__aeabi_d2f>
 800223a:	4603      	mov	r3, r0
 800223c:	4a17      	ldr	r2, [pc, #92]	; (800229c <kalibracja_acc+0x16c>)
 800223e:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 10000; i++) {
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	3301      	adds	r3, #1
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f242 720f 	movw	r2, #9999	; 0x270f
 800224c:	4293      	cmp	r3, r2
 800224e:	f77f af75 	ble.w	800213c <kalibracja_acc+0xc>
	}
	acc_calibr /= 10000;
 8002252:	4b12      	ldr	r3, [pc, #72]	; (800229c <kalibracja_acc+0x16c>)
 8002254:	ed93 7a00 	vldr	s14, [r3]
 8002258:	eddf 6a11 	vldr	s13, [pc, #68]	; 80022a0 <kalibracja_acc+0x170>
 800225c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002260:	4b0e      	ldr	r3, [pc, #56]	; (800229c <kalibracja_acc+0x16c>)
 8002262:	edc3 7a00 	vstr	s15, [r3]

	return acc_calibr;
 8002266:	4b0d      	ldr	r3, [pc, #52]	; (800229c <kalibracja_acc+0x16c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	ee07 3a90 	vmov	s15, r3
}
 800226e:	eeb0 0a67 	vmov.f32	s0, s15
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bdb0      	pop	{r4, r5, r7, pc}
 8002278:	54442d18 	.word	0x54442d18
 800227c:	400921fb 	.word	0x400921fb
 8002280:	51eb851f 	.word	0x51eb851f
 8002284:	40020800 	.word	0x40020800
 8002288:	200002a4 	.word	0x200002a4
 800228c:	2000024c 	.word	0x2000024c
 8002290:	2000024e 	.word	0x2000024e
 8002294:	20000250 	.word	0x20000250
 8002298:	40668000 	.word	0x40668000
 800229c:	20000258 	.word	0x20000258
 80022a0:	461c4000 	.word	0x461c4000

080022a4 <kalibracja_gyro>:

float kalibracja_gyro(void) {
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af04      	add	r7, sp, #16
	for (int i = 0; i < 10000; i++) {
 80022aa:	2300      	movs	r3, #0
 80022ac:	607b      	str	r3, [r7, #4]
 80022ae:	e039      	b.n	8002324 <kalibracja_gyro+0x80>
		if (i % 200 == 0)
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	4b28      	ldr	r3, [pc, #160]	; (8002354 <kalibracja_gyro+0xb0>)
 80022b4:	fb83 1302 	smull	r1, r3, r3, r2
 80022b8:	1199      	asrs	r1, r3, #6
 80022ba:	17d3      	asrs	r3, r2, #31
 80022bc:	1acb      	subs	r3, r1, r3
 80022be:	21c8      	movs	r1, #200	; 0xc8
 80022c0:	fb01 f303 	mul.w	r3, r1, r3
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d104      	bne.n	80022d4 <kalibracja_gyro+0x30>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); //migająca dioda - informacja o procesie kalibracji
 80022ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022ce:	4822      	ldr	r0, [pc, #136]	; (8002358 <kalibracja_gyro+0xb4>)
 80022d0:	f000 fe55 	bl	8002f7e <HAL_GPIO_TogglePin>
		uint8_t Rec_Data[2];
		HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H, 1, Rec_Data, 2,
 80022d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022d8:	9302      	str	r3, [sp, #8]
 80022da:	2302      	movs	r3, #2
 80022dc:	9301      	str	r3, [sp, #4]
 80022de:	463b      	mov	r3, r7
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	2301      	movs	r3, #1
 80022e4:	2243      	movs	r2, #67	; 0x43
 80022e6:	21d0      	movs	r1, #208	; 0xd0
 80022e8:	481c      	ldr	r0, [pc, #112]	; (800235c <kalibracja_gyro+0xb8>)
 80022ea:	f001 f8b9 	bl	8003460 <HAL_I2C_Mem_Read>
				1000);

		Gyro_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 80022ee:	783b      	ldrb	r3, [r7, #0]
 80022f0:	021b      	lsls	r3, r3, #8
 80022f2:	b21a      	sxth	r2, r3
 80022f4:	787b      	ldrb	r3, [r7, #1]
 80022f6:	b21b      	sxth	r3, r3
 80022f8:	4313      	orrs	r3, r2
 80022fa:	b21a      	sxth	r2, r3
 80022fc:	4b18      	ldr	r3, [pc, #96]	; (8002360 <kalibracja_gyro+0xbc>)
 80022fe:	801a      	strh	r2, [r3, #0]
		gyro_calibr += Gyro_X_RAW;
 8002300:	4b17      	ldr	r3, [pc, #92]	; (8002360 <kalibracja_gyro+0xbc>)
 8002302:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002306:	ee07 3a90 	vmov	s15, r3
 800230a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800230e:	4b15      	ldr	r3, [pc, #84]	; (8002364 <kalibracja_gyro+0xc0>)
 8002310:	edd3 7a00 	vldr	s15, [r3]
 8002314:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002318:	4b12      	ldr	r3, [pc, #72]	; (8002364 <kalibracja_gyro+0xc0>)
 800231a:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 10000; i++) {
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	3301      	adds	r3, #1
 8002322:	607b      	str	r3, [r7, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f242 720f 	movw	r2, #9999	; 0x270f
 800232a:	4293      	cmp	r3, r2
 800232c:	ddc0      	ble.n	80022b0 <kalibracja_gyro+0xc>

	}
	gyro_calibr /= 10000;                                      //wartosc srednia
 800232e:	4b0d      	ldr	r3, [pc, #52]	; (8002364 <kalibracja_gyro+0xc0>)
 8002330:	ed93 7a00 	vldr	s14, [r3]
 8002334:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002368 <kalibracja_gyro+0xc4>
 8002338:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800233c:	4b09      	ldr	r3, [pc, #36]	; (8002364 <kalibracja_gyro+0xc0>)
 800233e:	edc3 7a00 	vstr	s15, [r3]

	return gyro_calibr;
 8002342:	4b08      	ldr	r3, [pc, #32]	; (8002364 <kalibracja_gyro+0xc0>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	ee07 3a90 	vmov	s15, r3
}
 800234a:	eeb0 0a67 	vmov.f32	s0, s15
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	51eb851f 	.word	0x51eb851f
 8002358:	40020800 	.word	0x40020800
 800235c:	200002a4 	.word	0x200002a4
 8002360:	20000252 	.word	0x20000252
 8002364:	20000254 	.word	0x20000254
 8002368:	461c4000 	.word	0x461c4000

0800236c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	607b      	str	r3, [r7, #4]
 8002376:	4b10      	ldr	r3, [pc, #64]	; (80023b8 <HAL_MspInit+0x4c>)
 8002378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237a:	4a0f      	ldr	r2, [pc, #60]	; (80023b8 <HAL_MspInit+0x4c>)
 800237c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002380:	6453      	str	r3, [r2, #68]	; 0x44
 8002382:	4b0d      	ldr	r3, [pc, #52]	; (80023b8 <HAL_MspInit+0x4c>)
 8002384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800238a:	607b      	str	r3, [r7, #4]
 800238c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	603b      	str	r3, [r7, #0]
 8002392:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <HAL_MspInit+0x4c>)
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	4a08      	ldr	r2, [pc, #32]	; (80023b8 <HAL_MspInit+0x4c>)
 8002398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800239c:	6413      	str	r3, [r2, #64]	; 0x40
 800239e:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <HAL_MspInit+0x4c>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a6:	603b      	str	r3, [r7, #0]
 80023a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	40023800 	.word	0x40023800

080023bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023c0:	e7fe      	b.n	80023c0 <NMI_Handler+0x4>

080023c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023c2:	b480      	push	{r7}
 80023c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023c6:	e7fe      	b.n	80023c6 <HardFault_Handler+0x4>

080023c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023cc:	e7fe      	b.n	80023cc <MemManage_Handler+0x4>

080023ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023ce:	b480      	push	{r7}
 80023d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023d2:	e7fe      	b.n	80023d2 <BusFault_Handler+0x4>

080023d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023d8:	e7fe      	b.n	80023d8 <UsageFault_Handler+0x4>

080023da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023da:	b480      	push	{r7}
 80023dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023ec:	bf00      	nop
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023f6:	b480      	push	{r7}
 80023f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023fa:	bf00      	nop
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002408:	f000 fa40 	bl	800288c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800240c:	bf00      	nop
 800240e:	bd80      	pop	{r7, pc}

08002410 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002414:	4802      	ldr	r0, [pc, #8]	; (8002420 <USART2_IRQHandler+0x10>)
 8002416:	f002 fafd 	bl	8004a14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	200003f4 	.word	0x200003f4

08002424 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002428:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800242c:	f000 fdc2 	bl	8002fb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002430:	bf00      	nop
 8002432:	bd80      	pop	{r7, pc}

08002434 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
	return 1;
 8002438:	2301      	movs	r3, #1
}
 800243a:	4618      	mov	r0, r3
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <_kill>:

int _kill(int pid, int sig)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800244e:	f003 f999 	bl	8005784 <__errno>
 8002452:	4603      	mov	r3, r0
 8002454:	2216      	movs	r2, #22
 8002456:	601a      	str	r2, [r3, #0]
	return -1;
 8002458:	f04f 33ff 	mov.w	r3, #4294967295
}
 800245c:	4618      	mov	r0, r3
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <_exit>:

void _exit (int status)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800246c:	f04f 31ff 	mov.w	r1, #4294967295
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f7ff ffe7 	bl	8002444 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002476:	e7fe      	b.n	8002476 <_exit+0x12>

08002478 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]
 8002488:	e00a      	b.n	80024a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800248a:	f3af 8000 	nop.w
 800248e:	4601      	mov	r1, r0
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	1c5a      	adds	r2, r3, #1
 8002494:	60ba      	str	r2, [r7, #8]
 8002496:	b2ca      	uxtb	r2, r1
 8002498:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	3301      	adds	r3, #1
 800249e:	617b      	str	r3, [r7, #20]
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	dbf0      	blt.n	800248a <_read+0x12>
	}

return len;
 80024a8:	687b      	ldr	r3, [r7, #4]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3718      	adds	r7, #24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b086      	sub	sp, #24
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	60f8      	str	r0, [r7, #12]
 80024ba:	60b9      	str	r1, [r7, #8]
 80024bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]
 80024c2:	e009      	b.n	80024d8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	1c5a      	adds	r2, r3, #1
 80024c8:	60ba      	str	r2, [r7, #8]
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	3301      	adds	r3, #1
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	697a      	ldr	r2, [r7, #20]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	429a      	cmp	r2, r3
 80024de:	dbf1      	blt.n	80024c4 <_write+0x12>
	}
	return len;
 80024e0:	687b      	ldr	r3, [r7, #4]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3718      	adds	r7, #24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <_close>:

int _close(int file)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b083      	sub	sp, #12
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
	return -1;
 80024f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
 800250a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002512:	605a      	str	r2, [r3, #4]
	return 0;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <_isatty>:

int _isatty(int file)
{
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
	return 1;
 800252a:	2301      	movs	r3, #1
}
 800252c:	4618      	mov	r0, r3
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
	return 0;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
	...

08002554 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800255c:	4a14      	ldr	r2, [pc, #80]	; (80025b0 <_sbrk+0x5c>)
 800255e:	4b15      	ldr	r3, [pc, #84]	; (80025b4 <_sbrk+0x60>)
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002568:	4b13      	ldr	r3, [pc, #76]	; (80025b8 <_sbrk+0x64>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d102      	bne.n	8002576 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002570:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <_sbrk+0x64>)
 8002572:	4a12      	ldr	r2, [pc, #72]	; (80025bc <_sbrk+0x68>)
 8002574:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002576:	4b10      	ldr	r3, [pc, #64]	; (80025b8 <_sbrk+0x64>)
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4413      	add	r3, r2
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	429a      	cmp	r2, r3
 8002582:	d207      	bcs.n	8002594 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002584:	f003 f8fe 	bl	8005784 <__errno>
 8002588:	4603      	mov	r3, r0
 800258a:	220c      	movs	r2, #12
 800258c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800258e:	f04f 33ff 	mov.w	r3, #4294967295
 8002592:	e009      	b.n	80025a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002594:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <_sbrk+0x64>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800259a:	4b07      	ldr	r3, [pc, #28]	; (80025b8 <_sbrk+0x64>)
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4413      	add	r3, r2
 80025a2:	4a05      	ldr	r2, [pc, #20]	; (80025b8 <_sbrk+0x64>)
 80025a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025a6:	68fb      	ldr	r3, [r7, #12]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	20010000 	.word	0x20010000
 80025b4:	00000400 	.word	0x00000400
 80025b8:	20000260 	.word	0x20000260
 80025bc:	20000450 	.word	0x20000450

080025c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025c4:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <SystemInit+0x20>)
 80025c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ca:	4a05      	ldr	r2, [pc, #20]	; (80025e0 <SystemInit+0x20>)
 80025cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025d4:	bf00      	nop
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	e000ed00 	.word	0xe000ed00

080025e4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80025e8:	4b11      	ldr	r3, [pc, #68]	; (8002630 <MX_USART1_UART_Init+0x4c>)
 80025ea:	4a12      	ldr	r2, [pc, #72]	; (8002634 <MX_USART1_UART_Init+0x50>)
 80025ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80025ee:	4b10      	ldr	r3, [pc, #64]	; (8002630 <MX_USART1_UART_Init+0x4c>)
 80025f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025f6:	4b0e      	ldr	r3, [pc, #56]	; (8002630 <MX_USART1_UART_Init+0x4c>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025fc:	4b0c      	ldr	r3, [pc, #48]	; (8002630 <MX_USART1_UART_Init+0x4c>)
 80025fe:	2200      	movs	r2, #0
 8002600:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002602:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <MX_USART1_UART_Init+0x4c>)
 8002604:	2200      	movs	r2, #0
 8002606:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002608:	4b09      	ldr	r3, [pc, #36]	; (8002630 <MX_USART1_UART_Init+0x4c>)
 800260a:	220c      	movs	r2, #12
 800260c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800260e:	4b08      	ldr	r3, [pc, #32]	; (8002630 <MX_USART1_UART_Init+0x4c>)
 8002610:	2200      	movs	r2, #0
 8002612:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002614:	4b06      	ldr	r3, [pc, #24]	; (8002630 <MX_USART1_UART_Init+0x4c>)
 8002616:	2200      	movs	r2, #0
 8002618:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800261a:	4805      	ldr	r0, [pc, #20]	; (8002630 <MX_USART1_UART_Init+0x4c>)
 800261c:	f002 f8ea 	bl	80047f4 <HAL_UART_Init>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002626:	f7ff fc33 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	200003b0 	.word	0x200003b0
 8002634:	40011000 	.word	0x40011000

08002638 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800263c:	4b11      	ldr	r3, [pc, #68]	; (8002684 <MX_USART2_UART_Init+0x4c>)
 800263e:	4a12      	ldr	r2, [pc, #72]	; (8002688 <MX_USART2_UART_Init+0x50>)
 8002640:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002642:	4b10      	ldr	r3, [pc, #64]	; (8002684 <MX_USART2_UART_Init+0x4c>)
 8002644:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002648:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800264a:	4b0e      	ldr	r3, [pc, #56]	; (8002684 <MX_USART2_UART_Init+0x4c>)
 800264c:	2200      	movs	r2, #0
 800264e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002650:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <MX_USART2_UART_Init+0x4c>)
 8002652:	2200      	movs	r2, #0
 8002654:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002656:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <MX_USART2_UART_Init+0x4c>)
 8002658:	2200      	movs	r2, #0
 800265a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800265c:	4b09      	ldr	r3, [pc, #36]	; (8002684 <MX_USART2_UART_Init+0x4c>)
 800265e:	220c      	movs	r2, #12
 8002660:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002662:	4b08      	ldr	r3, [pc, #32]	; (8002684 <MX_USART2_UART_Init+0x4c>)
 8002664:	2200      	movs	r2, #0
 8002666:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002668:	4b06      	ldr	r3, [pc, #24]	; (8002684 <MX_USART2_UART_Init+0x4c>)
 800266a:	2200      	movs	r2, #0
 800266c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800266e:	4805      	ldr	r0, [pc, #20]	; (8002684 <MX_USART2_UART_Init+0x4c>)
 8002670:	f002 f8c0 	bl	80047f4 <HAL_UART_Init>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800267a:	f7ff fc09 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	200003f4 	.word	0x200003f4
 8002688:	40004400 	.word	0x40004400

0800268c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b08c      	sub	sp, #48	; 0x30
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002694:	f107 031c 	add.w	r3, r7, #28
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	605a      	str	r2, [r3, #4]
 800269e:	609a      	str	r2, [r3, #8]
 80026a0:	60da      	str	r2, [r3, #12]
 80026a2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a36      	ldr	r2, [pc, #216]	; (8002784 <HAL_UART_MspInit+0xf8>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d12d      	bne.n	800270a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026ae:	2300      	movs	r3, #0
 80026b0:	61bb      	str	r3, [r7, #24]
 80026b2:	4b35      	ldr	r3, [pc, #212]	; (8002788 <HAL_UART_MspInit+0xfc>)
 80026b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b6:	4a34      	ldr	r2, [pc, #208]	; (8002788 <HAL_UART_MspInit+0xfc>)
 80026b8:	f043 0310 	orr.w	r3, r3, #16
 80026bc:	6453      	str	r3, [r2, #68]	; 0x44
 80026be:	4b32      	ldr	r3, [pc, #200]	; (8002788 <HAL_UART_MspInit+0xfc>)
 80026c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c2:	f003 0310 	and.w	r3, r3, #16
 80026c6:	61bb      	str	r3, [r7, #24]
 80026c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	617b      	str	r3, [r7, #20]
 80026ce:	4b2e      	ldr	r3, [pc, #184]	; (8002788 <HAL_UART_MspInit+0xfc>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	4a2d      	ldr	r2, [pc, #180]	; (8002788 <HAL_UART_MspInit+0xfc>)
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	6313      	str	r3, [r2, #48]	; 0x30
 80026da:	4b2b      	ldr	r3, [pc, #172]	; (8002788 <HAL_UART_MspInit+0xfc>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	617b      	str	r3, [r7, #20]
 80026e4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80026e6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80026ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ec:	2302      	movs	r3, #2
 80026ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f0:	2300      	movs	r3, #0
 80026f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f4:	2303      	movs	r3, #3
 80026f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026f8:	2307      	movs	r3, #7
 80026fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026fc:	f107 031c 	add.w	r3, r7, #28
 8002700:	4619      	mov	r1, r3
 8002702:	4822      	ldr	r0, [pc, #136]	; (800278c <HAL_UART_MspInit+0x100>)
 8002704:	f000 fa86 	bl	8002c14 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002708:	e038      	b.n	800277c <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a20      	ldr	r2, [pc, #128]	; (8002790 <HAL_UART_MspInit+0x104>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d133      	bne.n	800277c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002714:	2300      	movs	r3, #0
 8002716:	613b      	str	r3, [r7, #16]
 8002718:	4b1b      	ldr	r3, [pc, #108]	; (8002788 <HAL_UART_MspInit+0xfc>)
 800271a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271c:	4a1a      	ldr	r2, [pc, #104]	; (8002788 <HAL_UART_MspInit+0xfc>)
 800271e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002722:	6413      	str	r3, [r2, #64]	; 0x40
 8002724:	4b18      	ldr	r3, [pc, #96]	; (8002788 <HAL_UART_MspInit+0xfc>)
 8002726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272c:	613b      	str	r3, [r7, #16]
 800272e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002730:	2300      	movs	r3, #0
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	4b14      	ldr	r3, [pc, #80]	; (8002788 <HAL_UART_MspInit+0xfc>)
 8002736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002738:	4a13      	ldr	r2, [pc, #76]	; (8002788 <HAL_UART_MspInit+0xfc>)
 800273a:	f043 0301 	orr.w	r3, r3, #1
 800273e:	6313      	str	r3, [r2, #48]	; 0x30
 8002740:	4b11      	ldr	r3, [pc, #68]	; (8002788 <HAL_UART_MspInit+0xfc>)
 8002742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800274c:	230c      	movs	r3, #12
 800274e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002750:	2302      	movs	r3, #2
 8002752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002754:	2300      	movs	r3, #0
 8002756:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002758:	2303      	movs	r3, #3
 800275a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800275c:	2307      	movs	r3, #7
 800275e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002760:	f107 031c 	add.w	r3, r7, #28
 8002764:	4619      	mov	r1, r3
 8002766:	4809      	ldr	r0, [pc, #36]	; (800278c <HAL_UART_MspInit+0x100>)
 8002768:	f000 fa54 	bl	8002c14 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800276c:	2200      	movs	r2, #0
 800276e:	2100      	movs	r1, #0
 8002770:	2026      	movs	r0, #38	; 0x26
 8002772:	f000 f986 	bl	8002a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002776:	2026      	movs	r0, #38	; 0x26
 8002778:	f000 f99f 	bl	8002aba <HAL_NVIC_EnableIRQ>
}
 800277c:	bf00      	nop
 800277e:	3730      	adds	r7, #48	; 0x30
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40011000 	.word	0x40011000
 8002788:	40023800 	.word	0x40023800
 800278c:	40020000 	.word	0x40020000
 8002790:	40004400 	.word	0x40004400

08002794 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002794:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002798:	480d      	ldr	r0, [pc, #52]	; (80027d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800279a:	490e      	ldr	r1, [pc, #56]	; (80027d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800279c:	4a0e      	ldr	r2, [pc, #56]	; (80027d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800279e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027a0:	e002      	b.n	80027a8 <LoopCopyDataInit>

080027a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027a6:	3304      	adds	r3, #4

080027a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027ac:	d3f9      	bcc.n	80027a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ae:	4a0b      	ldr	r2, [pc, #44]	; (80027dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80027b0:	4c0b      	ldr	r4, [pc, #44]	; (80027e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80027b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027b4:	e001      	b.n	80027ba <LoopFillZerobss>

080027b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027b8:	3204      	adds	r2, #4

080027ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027bc:	d3fb      	bcc.n	80027b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80027be:	f7ff feff 	bl	80025c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027c2:	f002 ffe5 	bl	8005790 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027c6:	f7fe ff8f 	bl	80016e8 <main>
  bx  lr    
 80027ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027cc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80027d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027d4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80027d8:	08008ef0 	.word	0x08008ef0
  ldr r2, =_sbss
 80027dc:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80027e0:	2000044c 	.word	0x2000044c

080027e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027e4:	e7fe      	b.n	80027e4 <ADC_IRQHandler>
	...

080027e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027ec:	4b0e      	ldr	r3, [pc, #56]	; (8002828 <HAL_Init+0x40>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a0d      	ldr	r2, [pc, #52]	; (8002828 <HAL_Init+0x40>)
 80027f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027f8:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <HAL_Init+0x40>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a0a      	ldr	r2, [pc, #40]	; (8002828 <HAL_Init+0x40>)
 80027fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002802:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002804:	4b08      	ldr	r3, [pc, #32]	; (8002828 <HAL_Init+0x40>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a07      	ldr	r2, [pc, #28]	; (8002828 <HAL_Init+0x40>)
 800280a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800280e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002810:	2003      	movs	r0, #3
 8002812:	f000 f92b 	bl	8002a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002816:	200f      	movs	r0, #15
 8002818:	f000 f808 	bl	800282c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800281c:	f7ff fda6 	bl	800236c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40023c00 	.word	0x40023c00

0800282c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002834:	4b12      	ldr	r3, [pc, #72]	; (8002880 <HAL_InitTick+0x54>)
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	4b12      	ldr	r3, [pc, #72]	; (8002884 <HAL_InitTick+0x58>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	4619      	mov	r1, r3
 800283e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002842:	fbb3 f3f1 	udiv	r3, r3, r1
 8002846:	fbb2 f3f3 	udiv	r3, r2, r3
 800284a:	4618      	mov	r0, r3
 800284c:	f000 f943 	bl	8002ad6 <HAL_SYSTICK_Config>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e00e      	b.n	8002878 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b0f      	cmp	r3, #15
 800285e:	d80a      	bhi.n	8002876 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002860:	2200      	movs	r2, #0
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	f04f 30ff 	mov.w	r0, #4294967295
 8002868:	f000 f90b 	bl	8002a82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800286c:	4a06      	ldr	r2, [pc, #24]	; (8002888 <HAL_InitTick+0x5c>)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002872:	2300      	movs	r3, #0
 8002874:	e000      	b.n	8002878 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
}
 8002878:	4618      	mov	r0, r3
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	20000008 	.word	0x20000008
 8002884:	20000010 	.word	0x20000010
 8002888:	2000000c 	.word	0x2000000c

0800288c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002890:	4b06      	ldr	r3, [pc, #24]	; (80028ac <HAL_IncTick+0x20>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	461a      	mov	r2, r3
 8002896:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <HAL_IncTick+0x24>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4413      	add	r3, r2
 800289c:	4a04      	ldr	r2, [pc, #16]	; (80028b0 <HAL_IncTick+0x24>)
 800289e:	6013      	str	r3, [r2, #0]
}
 80028a0:	bf00      	nop
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	20000010 	.word	0x20000010
 80028b0:	20000438 	.word	0x20000438

080028b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  return uwTick;
 80028b8:	4b03      	ldr	r3, [pc, #12]	; (80028c8 <HAL_GetTick+0x14>)
 80028ba:	681b      	ldr	r3, [r3, #0]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	20000438 	.word	0x20000438

080028cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028dc:	4b0c      	ldr	r3, [pc, #48]	; (8002910 <__NVIC_SetPriorityGrouping+0x44>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028e2:	68ba      	ldr	r2, [r7, #8]
 80028e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028e8:	4013      	ands	r3, r2
 80028ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028fe:	4a04      	ldr	r2, [pc, #16]	; (8002910 <__NVIC_SetPriorityGrouping+0x44>)
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	60d3      	str	r3, [r2, #12]
}
 8002904:	bf00      	nop
 8002906:	3714      	adds	r7, #20
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	e000ed00 	.word	0xe000ed00

08002914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002918:	4b04      	ldr	r3, [pc, #16]	; (800292c <__NVIC_GetPriorityGrouping+0x18>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	0a1b      	lsrs	r3, r3, #8
 800291e:	f003 0307 	and.w	r3, r3, #7
}
 8002922:	4618      	mov	r0, r3
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	e000ed00 	.word	0xe000ed00

08002930 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800293a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293e:	2b00      	cmp	r3, #0
 8002940:	db0b      	blt.n	800295a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002942:	79fb      	ldrb	r3, [r7, #7]
 8002944:	f003 021f 	and.w	r2, r3, #31
 8002948:	4907      	ldr	r1, [pc, #28]	; (8002968 <__NVIC_EnableIRQ+0x38>)
 800294a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294e:	095b      	lsrs	r3, r3, #5
 8002950:	2001      	movs	r0, #1
 8002952:	fa00 f202 	lsl.w	r2, r0, r2
 8002956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	e000e100 	.word	0xe000e100

0800296c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	4603      	mov	r3, r0
 8002974:	6039      	str	r1, [r7, #0]
 8002976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297c:	2b00      	cmp	r3, #0
 800297e:	db0a      	blt.n	8002996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	b2da      	uxtb	r2, r3
 8002984:	490c      	ldr	r1, [pc, #48]	; (80029b8 <__NVIC_SetPriority+0x4c>)
 8002986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298a:	0112      	lsls	r2, r2, #4
 800298c:	b2d2      	uxtb	r2, r2
 800298e:	440b      	add	r3, r1
 8002990:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002994:	e00a      	b.n	80029ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	b2da      	uxtb	r2, r3
 800299a:	4908      	ldr	r1, [pc, #32]	; (80029bc <__NVIC_SetPriority+0x50>)
 800299c:	79fb      	ldrb	r3, [r7, #7]
 800299e:	f003 030f 	and.w	r3, r3, #15
 80029a2:	3b04      	subs	r3, #4
 80029a4:	0112      	lsls	r2, r2, #4
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	440b      	add	r3, r1
 80029aa:	761a      	strb	r2, [r3, #24]
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	e000e100 	.word	0xe000e100
 80029bc:	e000ed00 	.word	0xe000ed00

080029c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b089      	sub	sp, #36	; 0x24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	f1c3 0307 	rsb	r3, r3, #7
 80029da:	2b04      	cmp	r3, #4
 80029dc:	bf28      	it	cs
 80029de:	2304      	movcs	r3, #4
 80029e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	3304      	adds	r3, #4
 80029e6:	2b06      	cmp	r3, #6
 80029e8:	d902      	bls.n	80029f0 <NVIC_EncodePriority+0x30>
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	3b03      	subs	r3, #3
 80029ee:	e000      	b.n	80029f2 <NVIC_EncodePriority+0x32>
 80029f0:	2300      	movs	r3, #0
 80029f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f4:	f04f 32ff 	mov.w	r2, #4294967295
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	43da      	mvns	r2, r3
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	401a      	ands	r2, r3
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a08:	f04f 31ff 	mov.w	r1, #4294967295
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a12:	43d9      	mvns	r1, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a18:	4313      	orrs	r3, r2
         );
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3724      	adds	r7, #36	; 0x24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
	...

08002a28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3b01      	subs	r3, #1
 8002a34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a38:	d301      	bcc.n	8002a3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e00f      	b.n	8002a5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a3e:	4a0a      	ldr	r2, [pc, #40]	; (8002a68 <SysTick_Config+0x40>)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3b01      	subs	r3, #1
 8002a44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a46:	210f      	movs	r1, #15
 8002a48:	f04f 30ff 	mov.w	r0, #4294967295
 8002a4c:	f7ff ff8e 	bl	800296c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a50:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <SysTick_Config+0x40>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a56:	4b04      	ldr	r3, [pc, #16]	; (8002a68 <SysTick_Config+0x40>)
 8002a58:	2207      	movs	r2, #7
 8002a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	e000e010 	.word	0xe000e010

08002a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f7ff ff29 	bl	80028cc <__NVIC_SetPriorityGrouping>
}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b086      	sub	sp, #24
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	4603      	mov	r3, r0
 8002a8a:	60b9      	str	r1, [r7, #8]
 8002a8c:	607a      	str	r2, [r7, #4]
 8002a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a94:	f7ff ff3e 	bl	8002914 <__NVIC_GetPriorityGrouping>
 8002a98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	68b9      	ldr	r1, [r7, #8]
 8002a9e:	6978      	ldr	r0, [r7, #20]
 8002aa0:	f7ff ff8e 	bl	80029c0 <NVIC_EncodePriority>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aaa:	4611      	mov	r1, r2
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff ff5d 	bl	800296c <__NVIC_SetPriority>
}
 8002ab2:	bf00      	nop
 8002ab4:	3718      	adds	r7, #24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b082      	sub	sp, #8
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff ff31 	bl	8002930 <__NVIC_EnableIRQ>
}
 8002ace:	bf00      	nop
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b082      	sub	sp, #8
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f7ff ffa2 	bl	8002a28 <SysTick_Config>
 8002ae4:	4603      	mov	r3, r0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b084      	sub	sp, #16
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002afc:	f7ff feda 	bl	80028b4 <HAL_GetTick>
 8002b00:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d008      	beq.n	8002b20 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2280      	movs	r2, #128	; 0x80
 8002b12:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e052      	b.n	8002bc6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 0216 	bic.w	r2, r2, #22
 8002b2e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	695a      	ldr	r2, [r3, #20]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b3e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d103      	bne.n	8002b50 <HAL_DMA_Abort+0x62>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d007      	beq.n	8002b60 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 0208 	bic.w	r2, r2, #8
 8002b5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 0201 	bic.w	r2, r2, #1
 8002b6e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b70:	e013      	b.n	8002b9a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b72:	f7ff fe9f 	bl	80028b4 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b05      	cmp	r3, #5
 8002b7e:	d90c      	bls.n	8002b9a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2220      	movs	r2, #32
 8002b84:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2203      	movs	r2, #3
 8002b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e015      	b.n	8002bc6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1e4      	bne.n	8002b72 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bac:	223f      	movs	r2, #63	; 0x3f
 8002bae:	409a      	lsls	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b083      	sub	sp, #12
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d004      	beq.n	8002bec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2280      	movs	r2, #128	; 0x80
 8002be6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e00c      	b.n	8002c06 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2205      	movs	r2, #5
 8002bf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 0201 	bic.w	r2, r2, #1
 8002c02:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
	...

08002c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b089      	sub	sp, #36	; 0x24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c22:	2300      	movs	r3, #0
 8002c24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61fb      	str	r3, [r7, #28]
 8002c2e:	e159      	b.n	8002ee4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c30:	2201      	movs	r2, #1
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	4013      	ands	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	f040 8148 	bne.w	8002ede <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f003 0303 	and.w	r3, r3, #3
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d005      	beq.n	8002c66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d130      	bne.n	8002cc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	2203      	movs	r2, #3
 8002c72:	fa02 f303 	lsl.w	r3, r2, r3
 8002c76:	43db      	mvns	r3, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	68da      	ldr	r2, [r3, #12]
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	091b      	lsrs	r3, r3, #4
 8002cb2:	f003 0201 	and.w	r2, r3, #1
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f003 0303 	and.w	r3, r3, #3
 8002cd0:	2b03      	cmp	r3, #3
 8002cd2:	d017      	beq.n	8002d04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	2203      	movs	r2, #3
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f003 0303 	and.w	r3, r3, #3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d123      	bne.n	8002d58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	08da      	lsrs	r2, r3, #3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3208      	adds	r2, #8
 8002d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	f003 0307 	and.w	r3, r3, #7
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	220f      	movs	r2, #15
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4013      	ands	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	691a      	ldr	r2, [r3, #16]
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	08da      	lsrs	r2, r3, #3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	3208      	adds	r2, #8
 8002d52:	69b9      	ldr	r1, [r7, #24]
 8002d54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	2203      	movs	r2, #3
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f003 0203 	and.w	r2, r3, #3
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 80a2 	beq.w	8002ede <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	4b57      	ldr	r3, [pc, #348]	; (8002efc <HAL_GPIO_Init+0x2e8>)
 8002da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da2:	4a56      	ldr	r2, [pc, #344]	; (8002efc <HAL_GPIO_Init+0x2e8>)
 8002da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002da8:	6453      	str	r3, [r2, #68]	; 0x44
 8002daa:	4b54      	ldr	r3, [pc, #336]	; (8002efc <HAL_GPIO_Init+0x2e8>)
 8002dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002db6:	4a52      	ldr	r2, [pc, #328]	; (8002f00 <HAL_GPIO_Init+0x2ec>)
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	089b      	lsrs	r3, r3, #2
 8002dbc:	3302      	adds	r3, #2
 8002dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	f003 0303 	and.w	r3, r3, #3
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	220f      	movs	r2, #15
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a49      	ldr	r2, [pc, #292]	; (8002f04 <HAL_GPIO_Init+0x2f0>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d019      	beq.n	8002e16 <HAL_GPIO_Init+0x202>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a48      	ldr	r2, [pc, #288]	; (8002f08 <HAL_GPIO_Init+0x2f4>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d013      	beq.n	8002e12 <HAL_GPIO_Init+0x1fe>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a47      	ldr	r2, [pc, #284]	; (8002f0c <HAL_GPIO_Init+0x2f8>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d00d      	beq.n	8002e0e <HAL_GPIO_Init+0x1fa>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a46      	ldr	r2, [pc, #280]	; (8002f10 <HAL_GPIO_Init+0x2fc>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d007      	beq.n	8002e0a <HAL_GPIO_Init+0x1f6>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a45      	ldr	r2, [pc, #276]	; (8002f14 <HAL_GPIO_Init+0x300>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d101      	bne.n	8002e06 <HAL_GPIO_Init+0x1f2>
 8002e02:	2304      	movs	r3, #4
 8002e04:	e008      	b.n	8002e18 <HAL_GPIO_Init+0x204>
 8002e06:	2307      	movs	r3, #7
 8002e08:	e006      	b.n	8002e18 <HAL_GPIO_Init+0x204>
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e004      	b.n	8002e18 <HAL_GPIO_Init+0x204>
 8002e0e:	2302      	movs	r3, #2
 8002e10:	e002      	b.n	8002e18 <HAL_GPIO_Init+0x204>
 8002e12:	2301      	movs	r3, #1
 8002e14:	e000      	b.n	8002e18 <HAL_GPIO_Init+0x204>
 8002e16:	2300      	movs	r3, #0
 8002e18:	69fa      	ldr	r2, [r7, #28]
 8002e1a:	f002 0203 	and.w	r2, r2, #3
 8002e1e:	0092      	lsls	r2, r2, #2
 8002e20:	4093      	lsls	r3, r2
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e28:	4935      	ldr	r1, [pc, #212]	; (8002f00 <HAL_GPIO_Init+0x2ec>)
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	089b      	lsrs	r3, r3, #2
 8002e2e:	3302      	adds	r3, #2
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e36:	4b38      	ldr	r3, [pc, #224]	; (8002f18 <HAL_GPIO_Init+0x304>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4013      	ands	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e5a:	4a2f      	ldr	r2, [pc, #188]	; (8002f18 <HAL_GPIO_Init+0x304>)
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e60:	4b2d      	ldr	r3, [pc, #180]	; (8002f18 <HAL_GPIO_Init+0x304>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d003      	beq.n	8002e84 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e84:	4a24      	ldr	r2, [pc, #144]	; (8002f18 <HAL_GPIO_Init+0x304>)
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e8a:	4b23      	ldr	r3, [pc, #140]	; (8002f18 <HAL_GPIO_Init+0x304>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	43db      	mvns	r3, r3
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	4013      	ands	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002eae:	4a1a      	ldr	r2, [pc, #104]	; (8002f18 <HAL_GPIO_Init+0x304>)
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002eb4:	4b18      	ldr	r3, [pc, #96]	; (8002f18 <HAL_GPIO_Init+0x304>)
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d003      	beq.n	8002ed8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ed8:	4a0f      	ldr	r2, [pc, #60]	; (8002f18 <HAL_GPIO_Init+0x304>)
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	61fb      	str	r3, [r7, #28]
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	2b0f      	cmp	r3, #15
 8002ee8:	f67f aea2 	bls.w	8002c30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002eec:	bf00      	nop
 8002eee:	bf00      	nop
 8002ef0:	3724      	adds	r7, #36	; 0x24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	40023800 	.word	0x40023800
 8002f00:	40013800 	.word	0x40013800
 8002f04:	40020000 	.word	0x40020000
 8002f08:	40020400 	.word	0x40020400
 8002f0c:	40020800 	.word	0x40020800
 8002f10:	40020c00 	.word	0x40020c00
 8002f14:	40021000 	.word	0x40021000
 8002f18:	40013c00 	.word	0x40013c00

08002f1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	460b      	mov	r3, r1
 8002f26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691a      	ldr	r2, [r3, #16]
 8002f2c:	887b      	ldrh	r3, [r7, #2]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d002      	beq.n	8002f3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f34:	2301      	movs	r3, #1
 8002f36:	73fb      	strb	r3, [r7, #15]
 8002f38:	e001      	b.n	8002f3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3714      	adds	r7, #20
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	460b      	mov	r3, r1
 8002f56:	807b      	strh	r3, [r7, #2]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f5c:	787b      	ldrb	r3, [r7, #1]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f62:	887a      	ldrh	r2, [r7, #2]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f68:	e003      	b.n	8002f72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f6a:	887b      	ldrh	r3, [r7, #2]
 8002f6c:	041a      	lsls	r2, r3, #16
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	619a      	str	r2, [r3, #24]
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b085      	sub	sp, #20
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
 8002f86:	460b      	mov	r3, r1
 8002f88:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f90:	887a      	ldrh	r2, [r7, #2]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	4013      	ands	r3, r2
 8002f96:	041a      	lsls	r2, r3, #16
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	43d9      	mvns	r1, r3
 8002f9c:	887b      	ldrh	r3, [r7, #2]
 8002f9e:	400b      	ands	r3, r1
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	619a      	str	r2, [r3, #24]
}
 8002fa6:	bf00      	nop
 8002fa8:	3714      	adds	r7, #20
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
	...

08002fb4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	4603      	mov	r3, r0
 8002fbc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002fbe:	4b08      	ldr	r3, [pc, #32]	; (8002fe0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fc0:	695a      	ldr	r2, [r3, #20]
 8002fc2:	88fb      	ldrh	r3, [r7, #6]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d006      	beq.n	8002fd8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fca:	4a05      	ldr	r2, [pc, #20]	; (8002fe0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fcc:	88fb      	ldrh	r3, [r7, #6]
 8002fce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fd0:	88fb      	ldrh	r3, [r7, #6]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fe ff26 	bl	8001e24 <HAL_GPIO_EXTI_Callback>
  }
}
 8002fd8:	bf00      	nop
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	40013c00 	.word	0x40013c00

08002fe4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e12b      	b.n	800324e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d106      	bne.n	8003010 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7fe fa44 	bl	8001498 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2224      	movs	r2, #36	; 0x24
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0201 	bic.w	r2, r2, #1
 8003026:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003036:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003046:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003048:	f001 fbac 	bl	80047a4 <HAL_RCC_GetPCLK1Freq>
 800304c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	4a81      	ldr	r2, [pc, #516]	; (8003258 <HAL_I2C_Init+0x274>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d807      	bhi.n	8003068 <HAL_I2C_Init+0x84>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4a80      	ldr	r2, [pc, #512]	; (800325c <HAL_I2C_Init+0x278>)
 800305c:	4293      	cmp	r3, r2
 800305e:	bf94      	ite	ls
 8003060:	2301      	movls	r3, #1
 8003062:	2300      	movhi	r3, #0
 8003064:	b2db      	uxtb	r3, r3
 8003066:	e006      	b.n	8003076 <HAL_I2C_Init+0x92>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	4a7d      	ldr	r2, [pc, #500]	; (8003260 <HAL_I2C_Init+0x27c>)
 800306c:	4293      	cmp	r3, r2
 800306e:	bf94      	ite	ls
 8003070:	2301      	movls	r3, #1
 8003072:	2300      	movhi	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e0e7      	b.n	800324e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	4a78      	ldr	r2, [pc, #480]	; (8003264 <HAL_I2C_Init+0x280>)
 8003082:	fba2 2303 	umull	r2, r3, r2, r3
 8003086:	0c9b      	lsrs	r3, r3, #18
 8003088:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68ba      	ldr	r2, [r7, #8]
 800309a:	430a      	orrs	r2, r1
 800309c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	4a6a      	ldr	r2, [pc, #424]	; (8003258 <HAL_I2C_Init+0x274>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d802      	bhi.n	80030b8 <HAL_I2C_Init+0xd4>
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	3301      	adds	r3, #1
 80030b6:	e009      	b.n	80030cc <HAL_I2C_Init+0xe8>
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030be:	fb02 f303 	mul.w	r3, r2, r3
 80030c2:	4a69      	ldr	r2, [pc, #420]	; (8003268 <HAL_I2C_Init+0x284>)
 80030c4:	fba2 2303 	umull	r2, r3, r2, r3
 80030c8:	099b      	lsrs	r3, r3, #6
 80030ca:	3301      	adds	r3, #1
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	6812      	ldr	r2, [r2, #0]
 80030d0:	430b      	orrs	r3, r1
 80030d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	495c      	ldr	r1, [pc, #368]	; (8003258 <HAL_I2C_Init+0x274>)
 80030e8:	428b      	cmp	r3, r1
 80030ea:	d819      	bhi.n	8003120 <HAL_I2C_Init+0x13c>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	1e59      	subs	r1, r3, #1
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80030fa:	1c59      	adds	r1, r3, #1
 80030fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003100:	400b      	ands	r3, r1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00a      	beq.n	800311c <HAL_I2C_Init+0x138>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	1e59      	subs	r1, r3, #1
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	fbb1 f3f3 	udiv	r3, r1, r3
 8003114:	3301      	adds	r3, #1
 8003116:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800311a:	e051      	b.n	80031c0 <HAL_I2C_Init+0x1dc>
 800311c:	2304      	movs	r3, #4
 800311e:	e04f      	b.n	80031c0 <HAL_I2C_Init+0x1dc>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d111      	bne.n	800314c <HAL_I2C_Init+0x168>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	1e58      	subs	r0, r3, #1
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6859      	ldr	r1, [r3, #4]
 8003130:	460b      	mov	r3, r1
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	440b      	add	r3, r1
 8003136:	fbb0 f3f3 	udiv	r3, r0, r3
 800313a:	3301      	adds	r3, #1
 800313c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003140:	2b00      	cmp	r3, #0
 8003142:	bf0c      	ite	eq
 8003144:	2301      	moveq	r3, #1
 8003146:	2300      	movne	r3, #0
 8003148:	b2db      	uxtb	r3, r3
 800314a:	e012      	b.n	8003172 <HAL_I2C_Init+0x18e>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	1e58      	subs	r0, r3, #1
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6859      	ldr	r1, [r3, #4]
 8003154:	460b      	mov	r3, r1
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	0099      	lsls	r1, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003162:	3301      	adds	r3, #1
 8003164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003168:	2b00      	cmp	r3, #0
 800316a:	bf0c      	ite	eq
 800316c:	2301      	moveq	r3, #1
 800316e:	2300      	movne	r3, #0
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <HAL_I2C_Init+0x196>
 8003176:	2301      	movs	r3, #1
 8003178:	e022      	b.n	80031c0 <HAL_I2C_Init+0x1dc>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10e      	bne.n	80031a0 <HAL_I2C_Init+0x1bc>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	1e58      	subs	r0, r3, #1
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6859      	ldr	r1, [r3, #4]
 800318a:	460b      	mov	r3, r1
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	440b      	add	r3, r1
 8003190:	fbb0 f3f3 	udiv	r3, r0, r3
 8003194:	3301      	adds	r3, #1
 8003196:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800319a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800319e:	e00f      	b.n	80031c0 <HAL_I2C_Init+0x1dc>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	1e58      	subs	r0, r3, #1
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6859      	ldr	r1, [r3, #4]
 80031a8:	460b      	mov	r3, r1
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	0099      	lsls	r1, r3, #2
 80031b0:	440b      	add	r3, r1
 80031b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80031b6:	3301      	adds	r3, #1
 80031b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	6809      	ldr	r1, [r1, #0]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69da      	ldr	r2, [r3, #28]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	6911      	ldr	r1, [r2, #16]
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	68d2      	ldr	r2, [r2, #12]
 80031fa:	4311      	orrs	r1, r2
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	6812      	ldr	r2, [r2, #0]
 8003200:	430b      	orrs	r3, r1
 8003202:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	695a      	ldr	r2, [r3, #20]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f042 0201 	orr.w	r2, r2, #1
 800322e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2220      	movs	r2, #32
 800323a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	000186a0 	.word	0x000186a0
 800325c:	001e847f 	.word	0x001e847f
 8003260:	003d08ff 	.word	0x003d08ff
 8003264:	431bde83 	.word	0x431bde83
 8003268:	10624dd3 	.word	0x10624dd3

0800326c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b088      	sub	sp, #32
 8003270:	af02      	add	r7, sp, #8
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	4608      	mov	r0, r1
 8003276:	4611      	mov	r1, r2
 8003278:	461a      	mov	r2, r3
 800327a:	4603      	mov	r3, r0
 800327c:	817b      	strh	r3, [r7, #10]
 800327e:	460b      	mov	r3, r1
 8003280:	813b      	strh	r3, [r7, #8]
 8003282:	4613      	mov	r3, r2
 8003284:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003286:	f7ff fb15 	bl	80028b4 <HAL_GetTick>
 800328a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b20      	cmp	r3, #32
 8003296:	f040 80d9 	bne.w	800344c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	2319      	movs	r3, #25
 80032a0:	2201      	movs	r2, #1
 80032a2:	496d      	ldr	r1, [pc, #436]	; (8003458 <HAL_I2C_Mem_Write+0x1ec>)
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f000 fc7f 	bl	8003ba8 <I2C_WaitOnFlagUntilTimeout>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80032b0:	2302      	movs	r3, #2
 80032b2:	e0cc      	b.n	800344e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d101      	bne.n	80032c2 <HAL_I2C_Mem_Write+0x56>
 80032be:	2302      	movs	r3, #2
 80032c0:	e0c5      	b.n	800344e <HAL_I2C_Mem_Write+0x1e2>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d007      	beq.n	80032e8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0201 	orr.w	r2, r2, #1
 80032e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2221      	movs	r2, #33	; 0x21
 80032fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2240      	movs	r2, #64	; 0x40
 8003304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6a3a      	ldr	r2, [r7, #32]
 8003312:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003318:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331e:	b29a      	uxth	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4a4d      	ldr	r2, [pc, #308]	; (800345c <HAL_I2C_Mem_Write+0x1f0>)
 8003328:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800332a:	88f8      	ldrh	r0, [r7, #6]
 800332c:	893a      	ldrh	r2, [r7, #8]
 800332e:	8979      	ldrh	r1, [r7, #10]
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	9301      	str	r3, [sp, #4]
 8003334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	4603      	mov	r3, r0
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f000 fab6 	bl	80038ac <I2C_RequestMemoryWrite>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d052      	beq.n	80033ec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e081      	b.n	800344e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 fd00 	bl	8003d54 <I2C_WaitOnTXEFlagUntilTimeout>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00d      	beq.n	8003376 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	2b04      	cmp	r3, #4
 8003360:	d107      	bne.n	8003372 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003370:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e06b      	b.n	800344e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	781a      	ldrb	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003386:	1c5a      	adds	r2, r3, #1
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003390:	3b01      	subs	r3, #1
 8003392:	b29a      	uxth	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800339c:	b29b      	uxth	r3, r3
 800339e:	3b01      	subs	r3, #1
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	2b04      	cmp	r3, #4
 80033b2:	d11b      	bne.n	80033ec <HAL_I2C_Mem_Write+0x180>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d017      	beq.n	80033ec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	781a      	ldrb	r2, [r3, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	1c5a      	adds	r2, r3, #1
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d6:	3b01      	subs	r3, #1
 80033d8:	b29a      	uxth	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	3b01      	subs	r3, #1
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1aa      	bne.n	800334a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 fcec 	bl	8003dd6 <I2C_WaitOnBTFFlagUntilTimeout>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00d      	beq.n	8003420 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003408:	2b04      	cmp	r3, #4
 800340a:	d107      	bne.n	800341c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800341a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e016      	b.n	800344e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800342e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2220      	movs	r2, #32
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003448:	2300      	movs	r3, #0
 800344a:	e000      	b.n	800344e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800344c:	2302      	movs	r3, #2
  }
}
 800344e:	4618      	mov	r0, r3
 8003450:	3718      	adds	r7, #24
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	00100002 	.word	0x00100002
 800345c:	ffff0000 	.word	0xffff0000

08003460 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b08c      	sub	sp, #48	; 0x30
 8003464:	af02      	add	r7, sp, #8
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	4608      	mov	r0, r1
 800346a:	4611      	mov	r1, r2
 800346c:	461a      	mov	r2, r3
 800346e:	4603      	mov	r3, r0
 8003470:	817b      	strh	r3, [r7, #10]
 8003472:	460b      	mov	r3, r1
 8003474:	813b      	strh	r3, [r7, #8]
 8003476:	4613      	mov	r3, r2
 8003478:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800347a:	f7ff fa1b 	bl	80028b4 <HAL_GetTick>
 800347e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b20      	cmp	r3, #32
 800348a:	f040 8208 	bne.w	800389e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	2319      	movs	r3, #25
 8003494:	2201      	movs	r2, #1
 8003496:	497b      	ldr	r1, [pc, #492]	; (8003684 <HAL_I2C_Mem_Read+0x224>)
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 fb85 	bl	8003ba8 <I2C_WaitOnFlagUntilTimeout>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80034a4:	2302      	movs	r3, #2
 80034a6:	e1fb      	b.n	80038a0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d101      	bne.n	80034b6 <HAL_I2C_Mem_Read+0x56>
 80034b2:	2302      	movs	r3, #2
 80034b4:	e1f4      	b.n	80038a0 <HAL_I2C_Mem_Read+0x440>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d007      	beq.n	80034dc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0201 	orr.w	r2, r2, #1
 80034da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2222      	movs	r2, #34	; 0x22
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2240      	movs	r2, #64	; 0x40
 80034f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003506:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800350c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003512:	b29a      	uxth	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4a5b      	ldr	r2, [pc, #364]	; (8003688 <HAL_I2C_Mem_Read+0x228>)
 800351c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800351e:	88f8      	ldrh	r0, [r7, #6]
 8003520:	893a      	ldrh	r2, [r7, #8]
 8003522:	8979      	ldrh	r1, [r7, #10]
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	9301      	str	r3, [sp, #4]
 8003528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	4603      	mov	r3, r0
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f000 fa52 	bl	80039d8 <I2C_RequestMemoryRead>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e1b0      	b.n	80038a0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003542:	2b00      	cmp	r3, #0
 8003544:	d113      	bne.n	800356e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003546:	2300      	movs	r3, #0
 8003548:	623b      	str	r3, [r7, #32]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	623b      	str	r3, [r7, #32]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	623b      	str	r3, [r7, #32]
 800355a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800356a:	601a      	str	r2, [r3, #0]
 800356c:	e184      	b.n	8003878 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003572:	2b01      	cmp	r3, #1
 8003574:	d11b      	bne.n	80035ae <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003584:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003586:	2300      	movs	r3, #0
 8003588:	61fb      	str	r3, [r7, #28]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	61fb      	str	r3, [r7, #28]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	61fb      	str	r3, [r7, #28]
 800359a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	e164      	b.n	8003878 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d11b      	bne.n	80035ee <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035c4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035d6:	2300      	movs	r3, #0
 80035d8:	61bb      	str	r3, [r7, #24]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	61bb      	str	r3, [r7, #24]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	61bb      	str	r3, [r7, #24]
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	e144      	b.n	8003878 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ee:	2300      	movs	r3, #0
 80035f0:	617b      	str	r3, [r7, #20]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	617b      	str	r3, [r7, #20]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	617b      	str	r3, [r7, #20]
 8003602:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003604:	e138      	b.n	8003878 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360a:	2b03      	cmp	r3, #3
 800360c:	f200 80f1 	bhi.w	80037f2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003614:	2b01      	cmp	r3, #1
 8003616:	d123      	bne.n	8003660 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800361a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f000 fc1b 	bl	8003e58 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e139      	b.n	80038a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	691a      	ldr	r2, [r3, #16]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	b2d2      	uxtb	r2, r2
 8003638:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	1c5a      	adds	r2, r3, #1
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003648:	3b01      	subs	r3, #1
 800364a:	b29a      	uxth	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003654:	b29b      	uxth	r3, r3
 8003656:	3b01      	subs	r3, #1
 8003658:	b29a      	uxth	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800365e:	e10b      	b.n	8003878 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003664:	2b02      	cmp	r3, #2
 8003666:	d14e      	bne.n	8003706 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366e:	2200      	movs	r2, #0
 8003670:	4906      	ldr	r1, [pc, #24]	; (800368c <HAL_I2C_Mem_Read+0x22c>)
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f000 fa98 	bl	8003ba8 <I2C_WaitOnFlagUntilTimeout>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d008      	beq.n	8003690 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e10e      	b.n	80038a0 <HAL_I2C_Mem_Read+0x440>
 8003682:	bf00      	nop
 8003684:	00100002 	.word	0x00100002
 8003688:	ffff0000 	.word	0xffff0000
 800368c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800369e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	691a      	ldr	r2, [r3, #16]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b2:	1c5a      	adds	r2, r3, #1
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036bc:	3b01      	subs	r3, #1
 80036be:	b29a      	uxth	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	3b01      	subs	r3, #1
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	691a      	ldr	r2, [r3, #16]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036dc:	b2d2      	uxtb	r2, r2
 80036de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e4:	1c5a      	adds	r2, r3, #1
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ee:	3b01      	subs	r3, #1
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	3b01      	subs	r3, #1
 80036fe:	b29a      	uxth	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003704:	e0b8      	b.n	8003878 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003708:	9300      	str	r3, [sp, #0]
 800370a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370c:	2200      	movs	r2, #0
 800370e:	4966      	ldr	r1, [pc, #408]	; (80038a8 <HAL_I2C_Mem_Read+0x448>)
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f000 fa49 	bl	8003ba8 <I2C_WaitOnFlagUntilTimeout>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e0bf      	b.n	80038a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800372e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	691a      	ldr	r2, [r3, #16]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373a:	b2d2      	uxtb	r2, r2
 800373c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003742:	1c5a      	adds	r2, r3, #1
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800374c:	3b01      	subs	r3, #1
 800374e:	b29a      	uxth	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003758:	b29b      	uxth	r3, r3
 800375a:	3b01      	subs	r3, #1
 800375c:	b29a      	uxth	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003768:	2200      	movs	r2, #0
 800376a:	494f      	ldr	r1, [pc, #316]	; (80038a8 <HAL_I2C_Mem_Read+0x448>)
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 fa1b 	bl	8003ba8 <I2C_WaitOnFlagUntilTimeout>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e091      	b.n	80038a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800378a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	691a      	ldr	r2, [r3, #16]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	b2d2      	uxtb	r2, r2
 8003798:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	1c5a      	adds	r2, r3, #1
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a8:	3b01      	subs	r3, #1
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	3b01      	subs	r3, #1
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	691a      	ldr	r2, [r3, #16]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c8:	b2d2      	uxtb	r2, r2
 80037ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	1c5a      	adds	r2, r3, #1
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037da:	3b01      	subs	r3, #1
 80037dc:	b29a      	uxth	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	3b01      	subs	r3, #1
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037f0:	e042      	b.n	8003878 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 fb2e 	bl	8003e58 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e04c      	b.n	80038a0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	691a      	ldr	r2, [r3, #16]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	b2d2      	uxtb	r2, r2
 8003812:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003818:	1c5a      	adds	r2, r3, #1
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003822:	3b01      	subs	r3, #1
 8003824:	b29a      	uxth	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382e:	b29b      	uxth	r3, r3
 8003830:	3b01      	subs	r3, #1
 8003832:	b29a      	uxth	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	f003 0304 	and.w	r3, r3, #4
 8003842:	2b04      	cmp	r3, #4
 8003844:	d118      	bne.n	8003878 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	691a      	ldr	r2, [r3, #16]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	b2d2      	uxtb	r2, r2
 8003852:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003858:	1c5a      	adds	r2, r3, #1
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003862:	3b01      	subs	r3, #1
 8003864:	b29a      	uxth	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386e:	b29b      	uxth	r3, r3
 8003870:	3b01      	subs	r3, #1
 8003872:	b29a      	uxth	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800387c:	2b00      	cmp	r3, #0
 800387e:	f47f aec2 	bne.w	8003606 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2220      	movs	r2, #32
 8003886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800389a:	2300      	movs	r3, #0
 800389c:	e000      	b.n	80038a0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800389e:	2302      	movs	r3, #2
  }
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3728      	adds	r7, #40	; 0x28
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	00010004 	.word	0x00010004

080038ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b088      	sub	sp, #32
 80038b0:	af02      	add	r7, sp, #8
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	4608      	mov	r0, r1
 80038b6:	4611      	mov	r1, r2
 80038b8:	461a      	mov	r2, r3
 80038ba:	4603      	mov	r3, r0
 80038bc:	817b      	strh	r3, [r7, #10]
 80038be:	460b      	mov	r3, r1
 80038c0:	813b      	strh	r3, [r7, #8]
 80038c2:	4613      	mov	r3, r2
 80038c4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	6a3b      	ldr	r3, [r7, #32]
 80038dc:	2200      	movs	r2, #0
 80038de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 f960 	bl	8003ba8 <I2C_WaitOnFlagUntilTimeout>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00d      	beq.n	800390a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038fc:	d103      	bne.n	8003906 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003904:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e05f      	b.n	80039ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800390a:	897b      	ldrh	r3, [r7, #10]
 800390c:	b2db      	uxtb	r3, r3
 800390e:	461a      	mov	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003918:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	6a3a      	ldr	r2, [r7, #32]
 800391e:	492d      	ldr	r1, [pc, #180]	; (80039d4 <I2C_RequestMemoryWrite+0x128>)
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 f998 	bl	8003c56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e04c      	b.n	80039ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003930:	2300      	movs	r3, #0
 8003932:	617b      	str	r3, [r7, #20]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	617b      	str	r3, [r7, #20]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	617b      	str	r3, [r7, #20]
 8003944:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003948:	6a39      	ldr	r1, [r7, #32]
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f000 fa02 	bl	8003d54 <I2C_WaitOnTXEFlagUntilTimeout>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00d      	beq.n	8003972 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	2b04      	cmp	r3, #4
 800395c:	d107      	bne.n	800396e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800396c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e02b      	b.n	80039ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003972:	88fb      	ldrh	r3, [r7, #6]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d105      	bne.n	8003984 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003978:	893b      	ldrh	r3, [r7, #8]
 800397a:	b2da      	uxtb	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	611a      	str	r2, [r3, #16]
 8003982:	e021      	b.n	80039c8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003984:	893b      	ldrh	r3, [r7, #8]
 8003986:	0a1b      	lsrs	r3, r3, #8
 8003988:	b29b      	uxth	r3, r3
 800398a:	b2da      	uxtb	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003994:	6a39      	ldr	r1, [r7, #32]
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f000 f9dc 	bl	8003d54 <I2C_WaitOnTXEFlagUntilTimeout>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00d      	beq.n	80039be <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	d107      	bne.n	80039ba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e005      	b.n	80039ca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039be:	893b      	ldrh	r3, [r7, #8]
 80039c0:	b2da      	uxtb	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3718      	adds	r7, #24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	00010002 	.word	0x00010002

080039d8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b088      	sub	sp, #32
 80039dc:	af02      	add	r7, sp, #8
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	4608      	mov	r0, r1
 80039e2:	4611      	mov	r1, r2
 80039e4:	461a      	mov	r2, r3
 80039e6:	4603      	mov	r3, r0
 80039e8:	817b      	strh	r3, [r7, #10]
 80039ea:	460b      	mov	r3, r1
 80039ec:	813b      	strh	r3, [r7, #8]
 80039ee:	4613      	mov	r3, r2
 80039f0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a00:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	6a3b      	ldr	r3, [r7, #32]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f000 f8c2 	bl	8003ba8 <I2C_WaitOnFlagUntilTimeout>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00d      	beq.n	8003a46 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a38:	d103      	bne.n	8003a42 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e0aa      	b.n	8003b9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a46:	897b      	ldrh	r3, [r7, #10]
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	6a3a      	ldr	r2, [r7, #32]
 8003a5a:	4952      	ldr	r1, [pc, #328]	; (8003ba4 <I2C_RequestMemoryRead+0x1cc>)
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f000 f8fa 	bl	8003c56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e097      	b.n	8003b9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	617b      	str	r3, [r7, #20]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	617b      	str	r3, [r7, #20]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	617b      	str	r3, [r7, #20]
 8003a80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a84:	6a39      	ldr	r1, [r7, #32]
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 f964 	bl	8003d54 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00d      	beq.n	8003aae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	d107      	bne.n	8003aaa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aa8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e076      	b.n	8003b9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003aae:	88fb      	ldrh	r3, [r7, #6]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d105      	bne.n	8003ac0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ab4:	893b      	ldrh	r3, [r7, #8]
 8003ab6:	b2da      	uxtb	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	611a      	str	r2, [r3, #16]
 8003abe:	e021      	b.n	8003b04 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ac0:	893b      	ldrh	r3, [r7, #8]
 8003ac2:	0a1b      	lsrs	r3, r3, #8
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad0:	6a39      	ldr	r1, [r7, #32]
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 f93e 	bl	8003d54 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00d      	beq.n	8003afa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d107      	bne.n	8003af6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e050      	b.n	8003b9c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003afa:	893b      	ldrh	r3, [r7, #8]
 8003afc:	b2da      	uxtb	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b06:	6a39      	ldr	r1, [r7, #32]
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f000 f923 	bl	8003d54 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00d      	beq.n	8003b30 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b18:	2b04      	cmp	r3, #4
 8003b1a:	d107      	bne.n	8003b2c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b2a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e035      	b.n	8003b9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b3e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	6a3b      	ldr	r3, [r7, #32]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f000 f82b 	bl	8003ba8 <I2C_WaitOnFlagUntilTimeout>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00d      	beq.n	8003b74 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b66:	d103      	bne.n	8003b70 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e013      	b.n	8003b9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b74:	897b      	ldrh	r3, [r7, #10]
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	f043 0301 	orr.w	r3, r3, #1
 8003b7c:	b2da      	uxtb	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b86:	6a3a      	ldr	r2, [r7, #32]
 8003b88:	4906      	ldr	r1, [pc, #24]	; (8003ba4 <I2C_RequestMemoryRead+0x1cc>)
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 f863 	bl	8003c56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e000      	b.n	8003b9c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3718      	adds	r7, #24
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	00010002 	.word	0x00010002

08003ba8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	603b      	str	r3, [r7, #0]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bb8:	e025      	b.n	8003c06 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc0:	d021      	beq.n	8003c06 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bc2:	f7fe fe77 	bl	80028b4 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d302      	bcc.n	8003bd8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d116      	bne.n	8003c06 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2220      	movs	r2, #32
 8003be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	f043 0220 	orr.w	r2, r3, #32
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e023      	b.n	8003c4e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	0c1b      	lsrs	r3, r3, #16
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d10d      	bne.n	8003c2c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	43da      	mvns	r2, r3
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	bf0c      	ite	eq
 8003c22:	2301      	moveq	r3, #1
 8003c24:	2300      	movne	r3, #0
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	461a      	mov	r2, r3
 8003c2a:	e00c      	b.n	8003c46 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	43da      	mvns	r2, r3
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	4013      	ands	r3, r2
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	bf0c      	ite	eq
 8003c3e:	2301      	moveq	r3, #1
 8003c40:	2300      	movne	r3, #0
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	461a      	mov	r2, r3
 8003c46:	79fb      	ldrb	r3, [r7, #7]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d0b6      	beq.n	8003bba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b084      	sub	sp, #16
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	60f8      	str	r0, [r7, #12]
 8003c5e:	60b9      	str	r1, [r7, #8]
 8003c60:	607a      	str	r2, [r7, #4]
 8003c62:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c64:	e051      	b.n	8003d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c74:	d123      	bne.n	8003cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c84:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c8e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2220      	movs	r2, #32
 8003c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	f043 0204 	orr.w	r2, r3, #4
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e046      	b.n	8003d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc4:	d021      	beq.n	8003d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cc6:	f7fe fdf5 	bl	80028b4 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d302      	bcc.n	8003cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d116      	bne.n	8003d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	f043 0220 	orr.w	r2, r3, #32
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e020      	b.n	8003d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	0c1b      	lsrs	r3, r3, #16
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d10c      	bne.n	8003d2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	43da      	mvns	r2, r3
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	4013      	ands	r3, r2
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	bf14      	ite	ne
 8003d26:	2301      	movne	r3, #1
 8003d28:	2300      	moveq	r3, #0
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	e00b      	b.n	8003d46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	43da      	mvns	r2, r3
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	bf14      	ite	ne
 8003d40:	2301      	movne	r3, #1
 8003d42:	2300      	moveq	r3, #0
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d18d      	bne.n	8003c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d60:	e02d      	b.n	8003dbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f000 f8ce 	bl	8003f04 <I2C_IsAcknowledgeFailed>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e02d      	b.n	8003dce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d78:	d021      	beq.n	8003dbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d7a:	f7fe fd9b 	bl	80028b4 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d302      	bcc.n	8003d90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d116      	bne.n	8003dbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2220      	movs	r2, #32
 8003d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	f043 0220 	orr.w	r2, r3, #32
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e007      	b.n	8003dce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc8:	2b80      	cmp	r3, #128	; 0x80
 8003dca:	d1ca      	bne.n	8003d62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b084      	sub	sp, #16
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	60f8      	str	r0, [r7, #12]
 8003dde:	60b9      	str	r1, [r7, #8]
 8003de0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003de2:	e02d      	b.n	8003e40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f000 f88d 	bl	8003f04 <I2C_IsAcknowledgeFailed>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e02d      	b.n	8003e50 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dfa:	d021      	beq.n	8003e40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dfc:	f7fe fd5a 	bl	80028b4 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d302      	bcc.n	8003e12 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d116      	bne.n	8003e40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2c:	f043 0220 	orr.w	r2, r3, #32
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e007      	b.n	8003e50 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	f003 0304 	and.w	r3, r3, #4
 8003e4a:	2b04      	cmp	r3, #4
 8003e4c:	d1ca      	bne.n	8003de4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e64:	e042      	b.n	8003eec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	f003 0310 	and.w	r3, r3, #16
 8003e70:	2b10      	cmp	r3, #16
 8003e72:	d119      	bne.n	8003ea8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f06f 0210 	mvn.w	r2, #16
 8003e7c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2220      	movs	r2, #32
 8003e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e029      	b.n	8003efc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ea8:	f7fe fd04 	bl	80028b4 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d302      	bcc.n	8003ebe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d116      	bne.n	8003eec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed8:	f043 0220 	orr.w	r2, r3, #32
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e007      	b.n	8003efc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef6:	2b40      	cmp	r3, #64	; 0x40
 8003ef8:	d1b5      	bne.n	8003e66 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f1a:	d11b      	bne.n	8003f54 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f24:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f40:	f043 0204 	orr.w	r2, r3, #4
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e000      	b.n	8003f56 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
	...

08003f64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e264      	b.n	8004440 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d075      	beq.n	800406e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f82:	4ba3      	ldr	r3, [pc, #652]	; (8004210 <HAL_RCC_OscConfig+0x2ac>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f003 030c 	and.w	r3, r3, #12
 8003f8a:	2b04      	cmp	r3, #4
 8003f8c:	d00c      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f8e:	4ba0      	ldr	r3, [pc, #640]	; (8004210 <HAL_RCC_OscConfig+0x2ac>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f96:	2b08      	cmp	r3, #8
 8003f98:	d112      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f9a:	4b9d      	ldr	r3, [pc, #628]	; (8004210 <HAL_RCC_OscConfig+0x2ac>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fa6:	d10b      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa8:	4b99      	ldr	r3, [pc, #612]	; (8004210 <HAL_RCC_OscConfig+0x2ac>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d05b      	beq.n	800406c <HAL_RCC_OscConfig+0x108>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d157      	bne.n	800406c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e23f      	b.n	8004440 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc8:	d106      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x74>
 8003fca:	4b91      	ldr	r3, [pc, #580]	; (8004210 <HAL_RCC_OscConfig+0x2ac>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a90      	ldr	r2, [pc, #576]	; (8004210 <HAL_RCC_OscConfig+0x2ac>)
 8003fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd4:	6013      	str	r3, [r2, #0]
 8003fd6:	e01d      	b.n	8004014 <HAL_RCC_OscConfig+0xb0>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fe0:	d10c      	bne.n	8003ffc <HAL_RCC_OscConfig+0x98>
 8003fe2:	4b8b      	ldr	r3, [pc, #556]	; (8004210 <HAL_RCC_OscConfig+0x2ac>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a8a      	ldr	r2, [pc, #552]	; (8004210 <HAL_RCC_OscConfig+0x2ac>)
 8003fe8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fec:	6013      	str	r3, [r2, #0]
 8003fee:	4b88      	ldr	r3, [pc, #544]	; (8004210 <HAL_RCC_OscConfig+0x2ac>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a87      	ldr	r2, [pc, #540]	; (8004210 <HAL_RCC_OscConfig+0x2ac>)
 8003ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ff8:	6013      	str	r3, [r2, #0]
 8003ffa:	e00b      	b.n	8004014 <HAL_RCC_OscConfig+0xb0>
 8003ffc:	4b84      	ldr	r3, [pc, #528]	; (8004210 <HAL_RCC_OscConfig+0x2ac>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a83      	ldr	r2, [pc, #524]	; (8004210 <HAL_RCC_OscConfig+0x2ac>)
 8004002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004006:	6013      	str	r3, [r2, #0]
 8004008:	4b81      	ldr	r3, [pc, #516]	; (8004210 <HAL_RCC_OscConfig+0x2ac>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a80      	ldr	r2, [pc, #512]	; (8004210 <HAL_RCC_OscConfig+0x2ac>)
 800400e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004012:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d013      	beq.n	8004044 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800401c:	f7fe fc4a 	bl	80028b4 <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004024:	f7fe fc46 	bl	80028b4 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b64      	cmp	r3, #100	; 0x64
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e204      	b.n	8004440 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004036:	4b76      	ldr	r3, [pc, #472]	; (8004210 <HAL_RCC_OscConfig+0x2ac>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d0f0      	beq.n	8004024 <HAL_RCC_OscConfig+0xc0>
 8004042:	e014      	b.n	800406e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004044:	f7fe fc36 	bl	80028b4 <HAL_GetTick>
 8004048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800404a:	e008      	b.n	800405e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800404c:	f7fe fc32 	bl	80028b4 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b64      	cmp	r3, #100	; 0x64
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e1f0      	b.n	8004440 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800405e:	4b6c      	ldr	r3, [pc, #432]	; (8004210 <HAL_RCC_OscConfig+0x2ac>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1f0      	bne.n	800404c <HAL_RCC_OscConfig+0xe8>
 800406a:	e000      	b.n	800406e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800406c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d063      	beq.n	8004142 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800407a:	4b65      	ldr	r3, [pc, #404]	; (8004210 <HAL_RCC_OscConfig+0x2ac>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 030c 	and.w	r3, r3, #12
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00b      	beq.n	800409e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004086:	4b62      	ldr	r3, [pc, #392]	; (8004210 <HAL_RCC_OscConfig+0x2ac>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800408e:	2b08      	cmp	r3, #8
 8004090:	d11c      	bne.n	80040cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004092:	4b5f      	ldr	r3, [pc, #380]	; (8004210 <HAL_RCC_OscConfig+0x2ac>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d116      	bne.n	80040cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800409e:	4b5c      	ldr	r3, [pc, #368]	; (8004210 <HAL_RCC_OscConfig+0x2ac>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d005      	beq.n	80040b6 <HAL_RCC_OscConfig+0x152>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d001      	beq.n	80040b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e1c4      	b.n	8004440 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040b6:	4b56      	ldr	r3, [pc, #344]	; (8004210 <HAL_RCC_OscConfig+0x2ac>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	00db      	lsls	r3, r3, #3
 80040c4:	4952      	ldr	r1, [pc, #328]	; (8004210 <HAL_RCC_OscConfig+0x2ac>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ca:	e03a      	b.n	8004142 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d020      	beq.n	8004116 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040d4:	4b4f      	ldr	r3, [pc, #316]	; (8004214 <HAL_RCC_OscConfig+0x2b0>)
 80040d6:	2201      	movs	r2, #1
 80040d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040da:	f7fe fbeb 	bl	80028b4 <HAL_GetTick>
 80040de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e0:	e008      	b.n	80040f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040e2:	f7fe fbe7 	bl	80028b4 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d901      	bls.n	80040f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e1a5      	b.n	8004440 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f4:	4b46      	ldr	r3, [pc, #280]	; (8004210 <HAL_RCC_OscConfig+0x2ac>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d0f0      	beq.n	80040e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004100:	4b43      	ldr	r3, [pc, #268]	; (8004210 <HAL_RCC_OscConfig+0x2ac>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	4940      	ldr	r1, [pc, #256]	; (8004210 <HAL_RCC_OscConfig+0x2ac>)
 8004110:	4313      	orrs	r3, r2
 8004112:	600b      	str	r3, [r1, #0]
 8004114:	e015      	b.n	8004142 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004116:	4b3f      	ldr	r3, [pc, #252]	; (8004214 <HAL_RCC_OscConfig+0x2b0>)
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411c:	f7fe fbca 	bl	80028b4 <HAL_GetTick>
 8004120:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004122:	e008      	b.n	8004136 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004124:	f7fe fbc6 	bl	80028b4 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e184      	b.n	8004440 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004136:	4b36      	ldr	r3, [pc, #216]	; (8004210 <HAL_RCC_OscConfig+0x2ac>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1f0      	bne.n	8004124 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0308 	and.w	r3, r3, #8
 800414a:	2b00      	cmp	r3, #0
 800414c:	d030      	beq.n	80041b0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d016      	beq.n	8004184 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004156:	4b30      	ldr	r3, [pc, #192]	; (8004218 <HAL_RCC_OscConfig+0x2b4>)
 8004158:	2201      	movs	r2, #1
 800415a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800415c:	f7fe fbaa 	bl	80028b4 <HAL_GetTick>
 8004160:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004162:	e008      	b.n	8004176 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004164:	f7fe fba6 	bl	80028b4 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b02      	cmp	r3, #2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e164      	b.n	8004440 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004176:	4b26      	ldr	r3, [pc, #152]	; (8004210 <HAL_RCC_OscConfig+0x2ac>)
 8004178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d0f0      	beq.n	8004164 <HAL_RCC_OscConfig+0x200>
 8004182:	e015      	b.n	80041b0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004184:	4b24      	ldr	r3, [pc, #144]	; (8004218 <HAL_RCC_OscConfig+0x2b4>)
 8004186:	2200      	movs	r2, #0
 8004188:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800418a:	f7fe fb93 	bl	80028b4 <HAL_GetTick>
 800418e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004190:	e008      	b.n	80041a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004192:	f7fe fb8f 	bl	80028b4 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e14d      	b.n	8004440 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041a4:	4b1a      	ldr	r3, [pc, #104]	; (8004210 <HAL_RCC_OscConfig+0x2ac>)
 80041a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1f0      	bne.n	8004192 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0304 	and.w	r3, r3, #4
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f000 80a0 	beq.w	80042fe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041be:	2300      	movs	r3, #0
 80041c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041c2:	4b13      	ldr	r3, [pc, #76]	; (8004210 <HAL_RCC_OscConfig+0x2ac>)
 80041c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10f      	bne.n	80041ee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ce:	2300      	movs	r3, #0
 80041d0:	60bb      	str	r3, [r7, #8]
 80041d2:	4b0f      	ldr	r3, [pc, #60]	; (8004210 <HAL_RCC_OscConfig+0x2ac>)
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	4a0e      	ldr	r2, [pc, #56]	; (8004210 <HAL_RCC_OscConfig+0x2ac>)
 80041d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041dc:	6413      	str	r3, [r2, #64]	; 0x40
 80041de:	4b0c      	ldr	r3, [pc, #48]	; (8004210 <HAL_RCC_OscConfig+0x2ac>)
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e6:	60bb      	str	r3, [r7, #8]
 80041e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041ea:	2301      	movs	r3, #1
 80041ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ee:	4b0b      	ldr	r3, [pc, #44]	; (800421c <HAL_RCC_OscConfig+0x2b8>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d121      	bne.n	800423e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041fa:	4b08      	ldr	r3, [pc, #32]	; (800421c <HAL_RCC_OscConfig+0x2b8>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a07      	ldr	r2, [pc, #28]	; (800421c <HAL_RCC_OscConfig+0x2b8>)
 8004200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004204:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004206:	f7fe fb55 	bl	80028b4 <HAL_GetTick>
 800420a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800420c:	e011      	b.n	8004232 <HAL_RCC_OscConfig+0x2ce>
 800420e:	bf00      	nop
 8004210:	40023800 	.word	0x40023800
 8004214:	42470000 	.word	0x42470000
 8004218:	42470e80 	.word	0x42470e80
 800421c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004220:	f7fe fb48 	bl	80028b4 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e106      	b.n	8004440 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004232:	4b85      	ldr	r3, [pc, #532]	; (8004448 <HAL_RCC_OscConfig+0x4e4>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423a:	2b00      	cmp	r3, #0
 800423c:	d0f0      	beq.n	8004220 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d106      	bne.n	8004254 <HAL_RCC_OscConfig+0x2f0>
 8004246:	4b81      	ldr	r3, [pc, #516]	; (800444c <HAL_RCC_OscConfig+0x4e8>)
 8004248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424a:	4a80      	ldr	r2, [pc, #512]	; (800444c <HAL_RCC_OscConfig+0x4e8>)
 800424c:	f043 0301 	orr.w	r3, r3, #1
 8004250:	6713      	str	r3, [r2, #112]	; 0x70
 8004252:	e01c      	b.n	800428e <HAL_RCC_OscConfig+0x32a>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	2b05      	cmp	r3, #5
 800425a:	d10c      	bne.n	8004276 <HAL_RCC_OscConfig+0x312>
 800425c:	4b7b      	ldr	r3, [pc, #492]	; (800444c <HAL_RCC_OscConfig+0x4e8>)
 800425e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004260:	4a7a      	ldr	r2, [pc, #488]	; (800444c <HAL_RCC_OscConfig+0x4e8>)
 8004262:	f043 0304 	orr.w	r3, r3, #4
 8004266:	6713      	str	r3, [r2, #112]	; 0x70
 8004268:	4b78      	ldr	r3, [pc, #480]	; (800444c <HAL_RCC_OscConfig+0x4e8>)
 800426a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426c:	4a77      	ldr	r2, [pc, #476]	; (800444c <HAL_RCC_OscConfig+0x4e8>)
 800426e:	f043 0301 	orr.w	r3, r3, #1
 8004272:	6713      	str	r3, [r2, #112]	; 0x70
 8004274:	e00b      	b.n	800428e <HAL_RCC_OscConfig+0x32a>
 8004276:	4b75      	ldr	r3, [pc, #468]	; (800444c <HAL_RCC_OscConfig+0x4e8>)
 8004278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427a:	4a74      	ldr	r2, [pc, #464]	; (800444c <HAL_RCC_OscConfig+0x4e8>)
 800427c:	f023 0301 	bic.w	r3, r3, #1
 8004280:	6713      	str	r3, [r2, #112]	; 0x70
 8004282:	4b72      	ldr	r3, [pc, #456]	; (800444c <HAL_RCC_OscConfig+0x4e8>)
 8004284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004286:	4a71      	ldr	r2, [pc, #452]	; (800444c <HAL_RCC_OscConfig+0x4e8>)
 8004288:	f023 0304 	bic.w	r3, r3, #4
 800428c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d015      	beq.n	80042c2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004296:	f7fe fb0d 	bl	80028b4 <HAL_GetTick>
 800429a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800429c:	e00a      	b.n	80042b4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800429e:	f7fe fb09 	bl	80028b4 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d901      	bls.n	80042b4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e0c5      	b.n	8004440 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042b4:	4b65      	ldr	r3, [pc, #404]	; (800444c <HAL_RCC_OscConfig+0x4e8>)
 80042b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d0ee      	beq.n	800429e <HAL_RCC_OscConfig+0x33a>
 80042c0:	e014      	b.n	80042ec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042c2:	f7fe faf7 	bl	80028b4 <HAL_GetTick>
 80042c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042c8:	e00a      	b.n	80042e0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042ca:	f7fe faf3 	bl	80028b4 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d8:	4293      	cmp	r3, r2
 80042da:	d901      	bls.n	80042e0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e0af      	b.n	8004440 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042e0:	4b5a      	ldr	r3, [pc, #360]	; (800444c <HAL_RCC_OscConfig+0x4e8>)
 80042e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1ee      	bne.n	80042ca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042ec:	7dfb      	ldrb	r3, [r7, #23]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d105      	bne.n	80042fe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042f2:	4b56      	ldr	r3, [pc, #344]	; (800444c <HAL_RCC_OscConfig+0x4e8>)
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	4a55      	ldr	r2, [pc, #340]	; (800444c <HAL_RCC_OscConfig+0x4e8>)
 80042f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	2b00      	cmp	r3, #0
 8004304:	f000 809b 	beq.w	800443e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004308:	4b50      	ldr	r3, [pc, #320]	; (800444c <HAL_RCC_OscConfig+0x4e8>)
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f003 030c 	and.w	r3, r3, #12
 8004310:	2b08      	cmp	r3, #8
 8004312:	d05c      	beq.n	80043ce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	2b02      	cmp	r3, #2
 800431a:	d141      	bne.n	80043a0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800431c:	4b4c      	ldr	r3, [pc, #304]	; (8004450 <HAL_RCC_OscConfig+0x4ec>)
 800431e:	2200      	movs	r2, #0
 8004320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004322:	f7fe fac7 	bl	80028b4 <HAL_GetTick>
 8004326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004328:	e008      	b.n	800433c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800432a:	f7fe fac3 	bl	80028b4 <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	2b02      	cmp	r3, #2
 8004336:	d901      	bls.n	800433c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e081      	b.n	8004440 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800433c:	4b43      	ldr	r3, [pc, #268]	; (800444c <HAL_RCC_OscConfig+0x4e8>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1f0      	bne.n	800432a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	69da      	ldr	r2, [r3, #28]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a1b      	ldr	r3, [r3, #32]
 8004350:	431a      	orrs	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004356:	019b      	lsls	r3, r3, #6
 8004358:	431a      	orrs	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435e:	085b      	lsrs	r3, r3, #1
 8004360:	3b01      	subs	r3, #1
 8004362:	041b      	lsls	r3, r3, #16
 8004364:	431a      	orrs	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436a:	061b      	lsls	r3, r3, #24
 800436c:	4937      	ldr	r1, [pc, #220]	; (800444c <HAL_RCC_OscConfig+0x4e8>)
 800436e:	4313      	orrs	r3, r2
 8004370:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004372:	4b37      	ldr	r3, [pc, #220]	; (8004450 <HAL_RCC_OscConfig+0x4ec>)
 8004374:	2201      	movs	r2, #1
 8004376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004378:	f7fe fa9c 	bl	80028b4 <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004380:	f7fe fa98 	bl	80028b4 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b02      	cmp	r3, #2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e056      	b.n	8004440 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004392:	4b2e      	ldr	r3, [pc, #184]	; (800444c <HAL_RCC_OscConfig+0x4e8>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d0f0      	beq.n	8004380 <HAL_RCC_OscConfig+0x41c>
 800439e:	e04e      	b.n	800443e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043a0:	4b2b      	ldr	r3, [pc, #172]	; (8004450 <HAL_RCC_OscConfig+0x4ec>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a6:	f7fe fa85 	bl	80028b4 <HAL_GetTick>
 80043aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ac:	e008      	b.n	80043c0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043ae:	f7fe fa81 	bl	80028b4 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d901      	bls.n	80043c0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e03f      	b.n	8004440 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043c0:	4b22      	ldr	r3, [pc, #136]	; (800444c <HAL_RCC_OscConfig+0x4e8>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1f0      	bne.n	80043ae <HAL_RCC_OscConfig+0x44a>
 80043cc:	e037      	b.n	800443e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d101      	bne.n	80043da <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e032      	b.n	8004440 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043da:	4b1c      	ldr	r3, [pc, #112]	; (800444c <HAL_RCC_OscConfig+0x4e8>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d028      	beq.n	800443a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d121      	bne.n	800443a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004400:	429a      	cmp	r2, r3
 8004402:	d11a      	bne.n	800443a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800440a:	4013      	ands	r3, r2
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004410:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004412:	4293      	cmp	r3, r2
 8004414:	d111      	bne.n	800443a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004420:	085b      	lsrs	r3, r3, #1
 8004422:	3b01      	subs	r3, #1
 8004424:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004426:	429a      	cmp	r2, r3
 8004428:	d107      	bne.n	800443a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004434:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004436:	429a      	cmp	r2, r3
 8004438:	d001      	beq.n	800443e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e000      	b.n	8004440 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3718      	adds	r7, #24
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	40007000 	.word	0x40007000
 800444c:	40023800 	.word	0x40023800
 8004450:	42470060 	.word	0x42470060

08004454 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d101      	bne.n	8004468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e0cc      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004468:	4b68      	ldr	r3, [pc, #416]	; (800460c <HAL_RCC_ClockConfig+0x1b8>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	429a      	cmp	r2, r3
 8004474:	d90c      	bls.n	8004490 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004476:	4b65      	ldr	r3, [pc, #404]	; (800460c <HAL_RCC_ClockConfig+0x1b8>)
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	b2d2      	uxtb	r2, r2
 800447c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800447e:	4b63      	ldr	r3, [pc, #396]	; (800460c <HAL_RCC_ClockConfig+0x1b8>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0307 	and.w	r3, r3, #7
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	429a      	cmp	r2, r3
 800448a:	d001      	beq.n	8004490 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e0b8      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d020      	beq.n	80044de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0304 	and.w	r3, r3, #4
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d005      	beq.n	80044b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044a8:	4b59      	ldr	r3, [pc, #356]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	4a58      	ldr	r2, [pc, #352]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0308 	and.w	r3, r3, #8
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d005      	beq.n	80044cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044c0:	4b53      	ldr	r3, [pc, #332]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	4a52      	ldr	r2, [pc, #328]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044cc:	4b50      	ldr	r3, [pc, #320]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	494d      	ldr	r1, [pc, #308]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d044      	beq.n	8004574 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d107      	bne.n	8004502 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044f2:	4b47      	ldr	r3, [pc, #284]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d119      	bne.n	8004532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e07f      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	2b02      	cmp	r3, #2
 8004508:	d003      	beq.n	8004512 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800450e:	2b03      	cmp	r3, #3
 8004510:	d107      	bne.n	8004522 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004512:	4b3f      	ldr	r3, [pc, #252]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d109      	bne.n	8004532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e06f      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004522:	4b3b      	ldr	r3, [pc, #236]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e067      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004532:	4b37      	ldr	r3, [pc, #220]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f023 0203 	bic.w	r2, r3, #3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	4934      	ldr	r1, [pc, #208]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 8004540:	4313      	orrs	r3, r2
 8004542:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004544:	f7fe f9b6 	bl	80028b4 <HAL_GetTick>
 8004548:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800454a:	e00a      	b.n	8004562 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800454c:	f7fe f9b2 	bl	80028b4 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	f241 3288 	movw	r2, #5000	; 0x1388
 800455a:	4293      	cmp	r3, r2
 800455c:	d901      	bls.n	8004562 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e04f      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004562:	4b2b      	ldr	r3, [pc, #172]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 020c 	and.w	r2, r3, #12
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	429a      	cmp	r2, r3
 8004572:	d1eb      	bne.n	800454c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004574:	4b25      	ldr	r3, [pc, #148]	; (800460c <HAL_RCC_ClockConfig+0x1b8>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	429a      	cmp	r2, r3
 8004580:	d20c      	bcs.n	800459c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004582:	4b22      	ldr	r3, [pc, #136]	; (800460c <HAL_RCC_ClockConfig+0x1b8>)
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800458a:	4b20      	ldr	r3, [pc, #128]	; (800460c <HAL_RCC_ClockConfig+0x1b8>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0307 	and.w	r3, r3, #7
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	429a      	cmp	r2, r3
 8004596:	d001      	beq.n	800459c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e032      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0304 	and.w	r3, r3, #4
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d008      	beq.n	80045ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045a8:	4b19      	ldr	r3, [pc, #100]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	4916      	ldr	r1, [pc, #88]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0308 	and.w	r3, r3, #8
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d009      	beq.n	80045da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045c6:	4b12      	ldr	r3, [pc, #72]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	00db      	lsls	r3, r3, #3
 80045d4:	490e      	ldr	r1, [pc, #56]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045da:	f000 f821 	bl	8004620 <HAL_RCC_GetSysClockFreq>
 80045de:	4602      	mov	r2, r0
 80045e0:	4b0b      	ldr	r3, [pc, #44]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	091b      	lsrs	r3, r3, #4
 80045e6:	f003 030f 	and.w	r3, r3, #15
 80045ea:	490a      	ldr	r1, [pc, #40]	; (8004614 <HAL_RCC_ClockConfig+0x1c0>)
 80045ec:	5ccb      	ldrb	r3, [r1, r3]
 80045ee:	fa22 f303 	lsr.w	r3, r2, r3
 80045f2:	4a09      	ldr	r2, [pc, #36]	; (8004618 <HAL_RCC_ClockConfig+0x1c4>)
 80045f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045f6:	4b09      	ldr	r3, [pc, #36]	; (800461c <HAL_RCC_ClockConfig+0x1c8>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7fe f916 	bl	800282c <HAL_InitTick>

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	40023c00 	.word	0x40023c00
 8004610:	40023800 	.word	0x40023800
 8004614:	08008a74 	.word	0x08008a74
 8004618:	20000008 	.word	0x20000008
 800461c:	2000000c 	.word	0x2000000c

08004620 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004620:	b5b0      	push	{r4, r5, r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004626:	2100      	movs	r1, #0
 8004628:	6079      	str	r1, [r7, #4]
 800462a:	2100      	movs	r1, #0
 800462c:	60f9      	str	r1, [r7, #12]
 800462e:	2100      	movs	r1, #0
 8004630:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004632:	2100      	movs	r1, #0
 8004634:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004636:	4952      	ldr	r1, [pc, #328]	; (8004780 <HAL_RCC_GetSysClockFreq+0x160>)
 8004638:	6889      	ldr	r1, [r1, #8]
 800463a:	f001 010c 	and.w	r1, r1, #12
 800463e:	2908      	cmp	r1, #8
 8004640:	d00d      	beq.n	800465e <HAL_RCC_GetSysClockFreq+0x3e>
 8004642:	2908      	cmp	r1, #8
 8004644:	f200 8094 	bhi.w	8004770 <HAL_RCC_GetSysClockFreq+0x150>
 8004648:	2900      	cmp	r1, #0
 800464a:	d002      	beq.n	8004652 <HAL_RCC_GetSysClockFreq+0x32>
 800464c:	2904      	cmp	r1, #4
 800464e:	d003      	beq.n	8004658 <HAL_RCC_GetSysClockFreq+0x38>
 8004650:	e08e      	b.n	8004770 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004652:	4b4c      	ldr	r3, [pc, #304]	; (8004784 <HAL_RCC_GetSysClockFreq+0x164>)
 8004654:	60bb      	str	r3, [r7, #8]
       break;
 8004656:	e08e      	b.n	8004776 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004658:	4b4b      	ldr	r3, [pc, #300]	; (8004788 <HAL_RCC_GetSysClockFreq+0x168>)
 800465a:	60bb      	str	r3, [r7, #8]
      break;
 800465c:	e08b      	b.n	8004776 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800465e:	4948      	ldr	r1, [pc, #288]	; (8004780 <HAL_RCC_GetSysClockFreq+0x160>)
 8004660:	6849      	ldr	r1, [r1, #4]
 8004662:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004666:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004668:	4945      	ldr	r1, [pc, #276]	; (8004780 <HAL_RCC_GetSysClockFreq+0x160>)
 800466a:	6849      	ldr	r1, [r1, #4]
 800466c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004670:	2900      	cmp	r1, #0
 8004672:	d024      	beq.n	80046be <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004674:	4942      	ldr	r1, [pc, #264]	; (8004780 <HAL_RCC_GetSysClockFreq+0x160>)
 8004676:	6849      	ldr	r1, [r1, #4]
 8004678:	0989      	lsrs	r1, r1, #6
 800467a:	4608      	mov	r0, r1
 800467c:	f04f 0100 	mov.w	r1, #0
 8004680:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004684:	f04f 0500 	mov.w	r5, #0
 8004688:	ea00 0204 	and.w	r2, r0, r4
 800468c:	ea01 0305 	and.w	r3, r1, r5
 8004690:	493d      	ldr	r1, [pc, #244]	; (8004788 <HAL_RCC_GetSysClockFreq+0x168>)
 8004692:	fb01 f003 	mul.w	r0, r1, r3
 8004696:	2100      	movs	r1, #0
 8004698:	fb01 f102 	mul.w	r1, r1, r2
 800469c:	1844      	adds	r4, r0, r1
 800469e:	493a      	ldr	r1, [pc, #232]	; (8004788 <HAL_RCC_GetSysClockFreq+0x168>)
 80046a0:	fba2 0101 	umull	r0, r1, r2, r1
 80046a4:	1863      	adds	r3, r4, r1
 80046a6:	4619      	mov	r1, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	461a      	mov	r2, r3
 80046ac:	f04f 0300 	mov.w	r3, #0
 80046b0:	f7fc fad2 	bl	8000c58 <__aeabi_uldivmod>
 80046b4:	4602      	mov	r2, r0
 80046b6:	460b      	mov	r3, r1
 80046b8:	4613      	mov	r3, r2
 80046ba:	60fb      	str	r3, [r7, #12]
 80046bc:	e04a      	b.n	8004754 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046be:	4b30      	ldr	r3, [pc, #192]	; (8004780 <HAL_RCC_GetSysClockFreq+0x160>)
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	099b      	lsrs	r3, r3, #6
 80046c4:	461a      	mov	r2, r3
 80046c6:	f04f 0300 	mov.w	r3, #0
 80046ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80046ce:	f04f 0100 	mov.w	r1, #0
 80046d2:	ea02 0400 	and.w	r4, r2, r0
 80046d6:	ea03 0501 	and.w	r5, r3, r1
 80046da:	4620      	mov	r0, r4
 80046dc:	4629      	mov	r1, r5
 80046de:	f04f 0200 	mov.w	r2, #0
 80046e2:	f04f 0300 	mov.w	r3, #0
 80046e6:	014b      	lsls	r3, r1, #5
 80046e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80046ec:	0142      	lsls	r2, r0, #5
 80046ee:	4610      	mov	r0, r2
 80046f0:	4619      	mov	r1, r3
 80046f2:	1b00      	subs	r0, r0, r4
 80046f4:	eb61 0105 	sbc.w	r1, r1, r5
 80046f8:	f04f 0200 	mov.w	r2, #0
 80046fc:	f04f 0300 	mov.w	r3, #0
 8004700:	018b      	lsls	r3, r1, #6
 8004702:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004706:	0182      	lsls	r2, r0, #6
 8004708:	1a12      	subs	r2, r2, r0
 800470a:	eb63 0301 	sbc.w	r3, r3, r1
 800470e:	f04f 0000 	mov.w	r0, #0
 8004712:	f04f 0100 	mov.w	r1, #0
 8004716:	00d9      	lsls	r1, r3, #3
 8004718:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800471c:	00d0      	lsls	r0, r2, #3
 800471e:	4602      	mov	r2, r0
 8004720:	460b      	mov	r3, r1
 8004722:	1912      	adds	r2, r2, r4
 8004724:	eb45 0303 	adc.w	r3, r5, r3
 8004728:	f04f 0000 	mov.w	r0, #0
 800472c:	f04f 0100 	mov.w	r1, #0
 8004730:	0299      	lsls	r1, r3, #10
 8004732:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004736:	0290      	lsls	r0, r2, #10
 8004738:	4602      	mov	r2, r0
 800473a:	460b      	mov	r3, r1
 800473c:	4610      	mov	r0, r2
 800473e:	4619      	mov	r1, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	461a      	mov	r2, r3
 8004744:	f04f 0300 	mov.w	r3, #0
 8004748:	f7fc fa86 	bl	8000c58 <__aeabi_uldivmod>
 800474c:	4602      	mov	r2, r0
 800474e:	460b      	mov	r3, r1
 8004750:	4613      	mov	r3, r2
 8004752:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004754:	4b0a      	ldr	r3, [pc, #40]	; (8004780 <HAL_RCC_GetSysClockFreq+0x160>)
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	0c1b      	lsrs	r3, r3, #16
 800475a:	f003 0303 	and.w	r3, r3, #3
 800475e:	3301      	adds	r3, #1
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	fbb2 f3f3 	udiv	r3, r2, r3
 800476c:	60bb      	str	r3, [r7, #8]
      break;
 800476e:	e002      	b.n	8004776 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004770:	4b04      	ldr	r3, [pc, #16]	; (8004784 <HAL_RCC_GetSysClockFreq+0x164>)
 8004772:	60bb      	str	r3, [r7, #8]
      break;
 8004774:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004776:	68bb      	ldr	r3, [r7, #8]
}
 8004778:	4618      	mov	r0, r3
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bdb0      	pop	{r4, r5, r7, pc}
 8004780:	40023800 	.word	0x40023800
 8004784:	00f42400 	.word	0x00f42400
 8004788:	017d7840 	.word	0x017d7840

0800478c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004790:	4b03      	ldr	r3, [pc, #12]	; (80047a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004792:	681b      	ldr	r3, [r3, #0]
}
 8004794:	4618      	mov	r0, r3
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	20000008 	.word	0x20000008

080047a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047a8:	f7ff fff0 	bl	800478c <HAL_RCC_GetHCLKFreq>
 80047ac:	4602      	mov	r2, r0
 80047ae:	4b05      	ldr	r3, [pc, #20]	; (80047c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	0a9b      	lsrs	r3, r3, #10
 80047b4:	f003 0307 	and.w	r3, r3, #7
 80047b8:	4903      	ldr	r1, [pc, #12]	; (80047c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047ba:	5ccb      	ldrb	r3, [r1, r3]
 80047bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	40023800 	.word	0x40023800
 80047c8:	08008a84 	.word	0x08008a84

080047cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80047d0:	f7ff ffdc 	bl	800478c <HAL_RCC_GetHCLKFreq>
 80047d4:	4602      	mov	r2, r0
 80047d6:	4b05      	ldr	r3, [pc, #20]	; (80047ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	0b5b      	lsrs	r3, r3, #13
 80047dc:	f003 0307 	and.w	r3, r3, #7
 80047e0:	4903      	ldr	r1, [pc, #12]	; (80047f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047e2:	5ccb      	ldrb	r3, [r1, r3]
 80047e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	40023800 	.word	0x40023800
 80047f0:	08008a84 	.word	0x08008a84

080047f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e03f      	b.n	8004886 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d106      	bne.n	8004820 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7fd ff36 	bl	800268c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2224      	movs	r2, #36	; 0x24
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68da      	ldr	r2, [r3, #12]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004836:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 fddb 	bl	80053f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	691a      	ldr	r2, [r3, #16]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800484c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	695a      	ldr	r2, [r3, #20]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800485c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68da      	ldr	r2, [r3, #12]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800486c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2220      	movs	r2, #32
 8004878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2220      	movs	r2, #32
 8004880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3708      	adds	r7, #8
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b08a      	sub	sp, #40	; 0x28
 8004892:	af02      	add	r7, sp, #8
 8004894:	60f8      	str	r0, [r7, #12]
 8004896:	60b9      	str	r1, [r7, #8]
 8004898:	603b      	str	r3, [r7, #0]
 800489a:	4613      	mov	r3, r2
 800489c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800489e:	2300      	movs	r3, #0
 80048a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b20      	cmp	r3, #32
 80048ac:	d17c      	bne.n	80049a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d002      	beq.n	80048ba <HAL_UART_Transmit+0x2c>
 80048b4:	88fb      	ldrh	r3, [r7, #6]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e075      	b.n	80049aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d101      	bne.n	80048cc <HAL_UART_Transmit+0x3e>
 80048c8:	2302      	movs	r3, #2
 80048ca:	e06e      	b.n	80049aa <HAL_UART_Transmit+0x11c>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2221      	movs	r2, #33	; 0x21
 80048de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048e2:	f7fd ffe7 	bl	80028b4 <HAL_GetTick>
 80048e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	88fa      	ldrh	r2, [r7, #6]
 80048ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	88fa      	ldrh	r2, [r7, #6]
 80048f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048fc:	d108      	bne.n	8004910 <HAL_UART_Transmit+0x82>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d104      	bne.n	8004910 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004906:	2300      	movs	r3, #0
 8004908:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	61bb      	str	r3, [r7, #24]
 800490e:	e003      	b.n	8004918 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004914:	2300      	movs	r3, #0
 8004916:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004920:	e02a      	b.n	8004978 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	9300      	str	r3, [sp, #0]
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	2200      	movs	r2, #0
 800492a:	2180      	movs	r1, #128	; 0x80
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f000 fb1f 	bl	8004f70 <UART_WaitOnFlagUntilTimeout>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d001      	beq.n	800493c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e036      	b.n	80049aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10b      	bne.n	800495a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	881b      	ldrh	r3, [r3, #0]
 8004946:	461a      	mov	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004950:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	3302      	adds	r3, #2
 8004956:	61bb      	str	r3, [r7, #24]
 8004958:	e007      	b.n	800496a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	781a      	ldrb	r2, [r3, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	3301      	adds	r3, #1
 8004968:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800496e:	b29b      	uxth	r3, r3
 8004970:	3b01      	subs	r3, #1
 8004972:	b29a      	uxth	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800497c:	b29b      	uxth	r3, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1cf      	bne.n	8004922 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	2200      	movs	r2, #0
 800498a:	2140      	movs	r1, #64	; 0x40
 800498c:	68f8      	ldr	r0, [r7, #12]
 800498e:	f000 faef 	bl	8004f70 <UART_WaitOnFlagUntilTimeout>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d001      	beq.n	800499c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e006      	b.n	80049aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2220      	movs	r2, #32
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80049a4:	2300      	movs	r3, #0
 80049a6:	e000      	b.n	80049aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80049a8:	2302      	movs	r3, #2
  }
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3720      	adds	r7, #32
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b084      	sub	sp, #16
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	60f8      	str	r0, [r7, #12]
 80049ba:	60b9      	str	r1, [r7, #8]
 80049bc:	4613      	mov	r3, r2
 80049be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	2b20      	cmp	r3, #32
 80049ca:	d11d      	bne.n	8004a08 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d002      	beq.n	80049d8 <HAL_UART_Receive_IT+0x26>
 80049d2:	88fb      	ldrh	r3, [r7, #6]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d101      	bne.n	80049dc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e016      	b.n	8004a0a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d101      	bne.n	80049ea <HAL_UART_Receive_IT+0x38>
 80049e6:	2302      	movs	r3, #2
 80049e8:	e00f      	b.n	8004a0a <HAL_UART_Receive_IT+0x58>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80049f8:	88fb      	ldrh	r3, [r7, #6]
 80049fa:	461a      	mov	r2, r3
 80049fc:	68b9      	ldr	r1, [r7, #8]
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f000 fb24 	bl	800504c <UART_Start_Receive_IT>
 8004a04:	4603      	mov	r3, r0
 8004a06:	e000      	b.n	8004a0a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004a08:	2302      	movs	r3, #2
  }
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
	...

08004a14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b0ba      	sub	sp, #232	; 0xe8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004a40:	2300      	movs	r3, #0
 8004a42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a4a:	f003 030f 	and.w	r3, r3, #15
 8004a4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004a52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10f      	bne.n	8004a7a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a5e:	f003 0320 	and.w	r3, r3, #32
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d009      	beq.n	8004a7a <HAL_UART_IRQHandler+0x66>
 8004a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a6a:	f003 0320 	and.w	r3, r3, #32
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d003      	beq.n	8004a7a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 fc03 	bl	800527e <UART_Receive_IT>
      return;
 8004a78:	e256      	b.n	8004f28 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004a7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f000 80de 	beq.w	8004c40 <HAL_UART_IRQHandler+0x22c>
 8004a84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d106      	bne.n	8004a9e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a94:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 80d1 	beq.w	8004c40 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00b      	beq.n	8004ac2 <HAL_UART_IRQHandler+0xae>
 8004aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d005      	beq.n	8004ac2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aba:	f043 0201 	orr.w	r2, r3, #1
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ac6:	f003 0304 	and.w	r3, r3, #4
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00b      	beq.n	8004ae6 <HAL_UART_IRQHandler+0xd2>
 8004ace:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d005      	beq.n	8004ae6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ade:	f043 0202 	orr.w	r2, r3, #2
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00b      	beq.n	8004b0a <HAL_UART_IRQHandler+0xf6>
 8004af2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d005      	beq.n	8004b0a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b02:	f043 0204 	orr.w	r2, r3, #4
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b0e:	f003 0308 	and.w	r3, r3, #8
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d011      	beq.n	8004b3a <HAL_UART_IRQHandler+0x126>
 8004b16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b1a:	f003 0320 	and.w	r3, r3, #32
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d105      	bne.n	8004b2e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d005      	beq.n	8004b3a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b32:	f043 0208 	orr.w	r2, r3, #8
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f000 81ed 	beq.w	8004f1e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b48:	f003 0320 	and.w	r3, r3, #32
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d008      	beq.n	8004b62 <HAL_UART_IRQHandler+0x14e>
 8004b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b54:	f003 0320 	and.w	r3, r3, #32
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d002      	beq.n	8004b62 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 fb8e 	bl	800527e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	695b      	ldr	r3, [r3, #20]
 8004b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6c:	2b40      	cmp	r3, #64	; 0x40
 8004b6e:	bf0c      	ite	eq
 8004b70:	2301      	moveq	r3, #1
 8004b72:	2300      	movne	r3, #0
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7e:	f003 0308 	and.w	r3, r3, #8
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d103      	bne.n	8004b8e <HAL_UART_IRQHandler+0x17a>
 8004b86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d04f      	beq.n	8004c2e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 fa96 	bl	80050c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9e:	2b40      	cmp	r3, #64	; 0x40
 8004ba0:	d141      	bne.n	8004c26 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	3314      	adds	r3, #20
 8004ba8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004bb0:	e853 3f00 	ldrex	r3, [r3]
 8004bb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004bb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004bbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	3314      	adds	r3, #20
 8004bca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004bce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004bd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004bda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004bde:	e841 2300 	strex	r3, r2, [r1]
 8004be2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004be6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1d9      	bne.n	8004ba2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d013      	beq.n	8004c1e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfa:	4a7d      	ldr	r2, [pc, #500]	; (8004df0 <HAL_UART_IRQHandler+0x3dc>)
 8004bfc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7fd ffe3 	bl	8002bce <HAL_DMA_Abort_IT>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d016      	beq.n	8004c3c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c18:	4610      	mov	r0, r2
 8004c1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c1c:	e00e      	b.n	8004c3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f990 	bl	8004f44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c24:	e00a      	b.n	8004c3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f98c 	bl	8004f44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c2c:	e006      	b.n	8004c3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f988 	bl	8004f44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004c3a:	e170      	b.n	8004f1e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c3c:	bf00      	nop
    return;
 8004c3e:	e16e      	b.n	8004f1e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	f040 814a 	bne.w	8004ede <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c4e:	f003 0310 	and.w	r3, r3, #16
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f000 8143 	beq.w	8004ede <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c5c:	f003 0310 	and.w	r3, r3, #16
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f000 813c 	beq.w	8004ede <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c66:	2300      	movs	r3, #0
 8004c68:	60bb      	str	r3, [r7, #8]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	60bb      	str	r3, [r7, #8]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	60bb      	str	r3, [r7, #8]
 8004c7a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c86:	2b40      	cmp	r3, #64	; 0x40
 8004c88:	f040 80b4 	bne.w	8004df4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f000 8140 	beq.w	8004f22 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ca6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004caa:	429a      	cmp	r2, r3
 8004cac:	f080 8139 	bcs.w	8004f22 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cb6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cc2:	f000 8088 	beq.w	8004dd6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	330c      	adds	r3, #12
 8004ccc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cd4:	e853 3f00 	ldrex	r3, [r3]
 8004cd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004cdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ce0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ce4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	330c      	adds	r3, #12
 8004cee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004cf2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004cf6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004cfe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d02:	e841 2300 	strex	r3, r2, [r1]
 8004d06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1d9      	bne.n	8004cc6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	3314      	adds	r3, #20
 8004d18:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d1c:	e853 3f00 	ldrex	r3, [r3]
 8004d20:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d24:	f023 0301 	bic.w	r3, r3, #1
 8004d28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	3314      	adds	r3, #20
 8004d32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d36:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d3a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d42:	e841 2300 	strex	r3, r2, [r1]
 8004d46:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1e1      	bne.n	8004d12 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	3314      	adds	r3, #20
 8004d54:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d58:	e853 3f00 	ldrex	r3, [r3]
 8004d5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	3314      	adds	r3, #20
 8004d6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d72:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d74:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d76:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d78:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d7a:	e841 2300 	strex	r3, r2, [r1]
 8004d7e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1e3      	bne.n	8004d4e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2220      	movs	r2, #32
 8004d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	330c      	adds	r3, #12
 8004d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d9e:	e853 3f00 	ldrex	r3, [r3]
 8004da2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004da4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004da6:	f023 0310 	bic.w	r3, r3, #16
 8004daa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	330c      	adds	r3, #12
 8004db4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004db8:	65ba      	str	r2, [r7, #88]	; 0x58
 8004dba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dbc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004dbe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004dc0:	e841 2300 	strex	r3, r2, [r1]
 8004dc4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004dc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1e3      	bne.n	8004d94 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f7fd fe8c 	bl	8002aee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	4619      	mov	r1, r3
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f8b6 	bl	8004f58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004dec:	e099      	b.n	8004f22 <HAL_UART_IRQHandler+0x50e>
 8004dee:	bf00      	nop
 8004df0:	08005187 	.word	0x08005187
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f000 808b 	beq.w	8004f26 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004e10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f000 8086 	beq.w	8004f26 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	330c      	adds	r3, #12
 8004e20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e24:	e853 3f00 	ldrex	r3, [r3]
 8004e28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	330c      	adds	r3, #12
 8004e3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004e3e:	647a      	str	r2, [r7, #68]	; 0x44
 8004e40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e46:	e841 2300 	strex	r3, r2, [r1]
 8004e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1e3      	bne.n	8004e1a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	3314      	adds	r3, #20
 8004e58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5c:	e853 3f00 	ldrex	r3, [r3]
 8004e60:	623b      	str	r3, [r7, #32]
   return(result);
 8004e62:	6a3b      	ldr	r3, [r7, #32]
 8004e64:	f023 0301 	bic.w	r3, r3, #1
 8004e68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	3314      	adds	r3, #20
 8004e72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e76:	633a      	str	r2, [r7, #48]	; 0x30
 8004e78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e7e:	e841 2300 	strex	r3, r2, [r1]
 8004e82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1e3      	bne.n	8004e52 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	330c      	adds	r3, #12
 8004e9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	e853 3f00 	ldrex	r3, [r3]
 8004ea6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f023 0310 	bic.w	r3, r3, #16
 8004eae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	330c      	adds	r3, #12
 8004eb8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004ebc:	61fa      	str	r2, [r7, #28]
 8004ebe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec0:	69b9      	ldr	r1, [r7, #24]
 8004ec2:	69fa      	ldr	r2, [r7, #28]
 8004ec4:	e841 2300 	strex	r3, r2, [r1]
 8004ec8:	617b      	str	r3, [r7, #20]
   return(result);
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1e3      	bne.n	8004e98 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ed0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 f83e 	bl	8004f58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004edc:	e023      	b.n	8004f26 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d009      	beq.n	8004efe <HAL_UART_IRQHandler+0x4ea>
 8004eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f959 	bl	80051ae <UART_Transmit_IT>
    return;
 8004efc:	e014      	b.n	8004f28 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00e      	beq.n	8004f28 <HAL_UART_IRQHandler+0x514>
 8004f0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d008      	beq.n	8004f28 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f999 	bl	800524e <UART_EndTransmit_IT>
    return;
 8004f1c:	e004      	b.n	8004f28 <HAL_UART_IRQHandler+0x514>
    return;
 8004f1e:	bf00      	nop
 8004f20:	e002      	b.n	8004f28 <HAL_UART_IRQHandler+0x514>
      return;
 8004f22:	bf00      	nop
 8004f24:	e000      	b.n	8004f28 <HAL_UART_IRQHandler+0x514>
      return;
 8004f26:	bf00      	nop
  }
}
 8004f28:	37e8      	adds	r7, #232	; 0xe8
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop

08004f30 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f38:	bf00      	nop
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	460b      	mov	r3, r1
 8004f62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b090      	sub	sp, #64	; 0x40
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	603b      	str	r3, [r7, #0]
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f80:	e050      	b.n	8005024 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f88:	d04c      	beq.n	8005024 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d007      	beq.n	8004fa0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f90:	f7fd fc90 	bl	80028b4 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d241      	bcs.n	8005024 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	330c      	adds	r3, #12
 8004fa6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004faa:	e853 3f00 	ldrex	r3, [r3]
 8004fae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	330c      	adds	r3, #12
 8004fbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fc0:	637a      	str	r2, [r7, #52]	; 0x34
 8004fc2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fc8:	e841 2300 	strex	r3, r2, [r1]
 8004fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1e5      	bne.n	8004fa0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	3314      	adds	r3, #20
 8004fda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	e853 3f00 	ldrex	r3, [r3]
 8004fe2:	613b      	str	r3, [r7, #16]
   return(result);
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	f023 0301 	bic.w	r3, r3, #1
 8004fea:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	3314      	adds	r3, #20
 8004ff2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ff4:	623a      	str	r2, [r7, #32]
 8004ff6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff8:	69f9      	ldr	r1, [r7, #28]
 8004ffa:	6a3a      	ldr	r2, [r7, #32]
 8004ffc:	e841 2300 	strex	r3, r2, [r1]
 8005000:	61bb      	str	r3, [r7, #24]
   return(result);
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1e5      	bne.n	8004fd4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2220      	movs	r2, #32
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2220      	movs	r2, #32
 8005014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e00f      	b.n	8005044 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	4013      	ands	r3, r2
 800502e:	68ba      	ldr	r2, [r7, #8]
 8005030:	429a      	cmp	r2, r3
 8005032:	bf0c      	ite	eq
 8005034:	2301      	moveq	r3, #1
 8005036:	2300      	movne	r3, #0
 8005038:	b2db      	uxtb	r3, r3
 800503a:	461a      	mov	r2, r3
 800503c:	79fb      	ldrb	r3, [r7, #7]
 800503e:	429a      	cmp	r2, r3
 8005040:	d09f      	beq.n	8004f82 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3740      	adds	r7, #64	; 0x40
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	4613      	mov	r3, r2
 8005058:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	88fa      	ldrh	r2, [r7, #6]
 8005064:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	88fa      	ldrh	r2, [r7, #6]
 800506a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2222      	movs	r2, #34	; 0x22
 8005076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68da      	ldr	r2, [r3, #12]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005090:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	695a      	ldr	r2, [r3, #20]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f042 0201 	orr.w	r2, r2, #1
 80050a0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68da      	ldr	r2, [r3, #12]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f042 0220 	orr.w	r2, r2, #32
 80050b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3714      	adds	r7, #20
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b095      	sub	sp, #84	; 0x54
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	330c      	adds	r3, #12
 80050ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050d2:	e853 3f00 	ldrex	r3, [r3]
 80050d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80050d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	330c      	adds	r3, #12
 80050e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050e8:	643a      	str	r2, [r7, #64]	; 0x40
 80050ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80050ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050f0:	e841 2300 	strex	r3, r2, [r1]
 80050f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1e5      	bne.n	80050c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	3314      	adds	r3, #20
 8005102:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005104:	6a3b      	ldr	r3, [r7, #32]
 8005106:	e853 3f00 	ldrex	r3, [r3]
 800510a:	61fb      	str	r3, [r7, #28]
   return(result);
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	f023 0301 	bic.w	r3, r3, #1
 8005112:	64bb      	str	r3, [r7, #72]	; 0x48
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	3314      	adds	r3, #20
 800511a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800511c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800511e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005120:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005122:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005124:	e841 2300 	strex	r3, r2, [r1]
 8005128:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1e5      	bne.n	80050fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005134:	2b01      	cmp	r3, #1
 8005136:	d119      	bne.n	800516c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	330c      	adds	r3, #12
 800513e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	e853 3f00 	ldrex	r3, [r3]
 8005146:	60bb      	str	r3, [r7, #8]
   return(result);
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	f023 0310 	bic.w	r3, r3, #16
 800514e:	647b      	str	r3, [r7, #68]	; 0x44
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	330c      	adds	r3, #12
 8005156:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005158:	61ba      	str	r2, [r7, #24]
 800515a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515c:	6979      	ldr	r1, [r7, #20]
 800515e:	69ba      	ldr	r2, [r7, #24]
 8005160:	e841 2300 	strex	r3, r2, [r1]
 8005164:	613b      	str	r3, [r7, #16]
   return(result);
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1e5      	bne.n	8005138 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2220      	movs	r2, #32
 8005170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	631a      	str	r2, [r3, #48]	; 0x30
}
 800517a:	bf00      	nop
 800517c:	3754      	adds	r7, #84	; 0x54
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr

08005186 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b084      	sub	sp, #16
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005192:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	f7ff fecf 	bl	8004f44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051a6:	bf00      	nop
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b085      	sub	sp, #20
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b21      	cmp	r3, #33	; 0x21
 80051c0:	d13e      	bne.n	8005240 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ca:	d114      	bne.n	80051f6 <UART_Transmit_IT+0x48>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d110      	bne.n	80051f6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a1b      	ldr	r3, [r3, #32]
 80051d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	881b      	ldrh	r3, [r3, #0]
 80051de:	461a      	mov	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	1c9a      	adds	r2, r3, #2
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	621a      	str	r2, [r3, #32]
 80051f4:	e008      	b.n	8005208 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	1c59      	adds	r1, r3, #1
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	6211      	str	r1, [r2, #32]
 8005200:	781a      	ldrb	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800520c:	b29b      	uxth	r3, r3
 800520e:	3b01      	subs	r3, #1
 8005210:	b29b      	uxth	r3, r3
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	4619      	mov	r1, r3
 8005216:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10f      	bne.n	800523c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68da      	ldr	r2, [r3, #12]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800522a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68da      	ldr	r2, [r3, #12]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800523a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800523c:	2300      	movs	r3, #0
 800523e:	e000      	b.n	8005242 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005240:	2302      	movs	r3, #2
  }
}
 8005242:	4618      	mov	r0, r3
 8005244:	3714      	adds	r7, #20
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr

0800524e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b082      	sub	sp, #8
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68da      	ldr	r2, [r3, #12]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005264:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2220      	movs	r2, #32
 800526a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f7ff fe5e 	bl	8004f30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800527e:	b580      	push	{r7, lr}
 8005280:	b08c      	sub	sp, #48	; 0x30
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b22      	cmp	r3, #34	; 0x22
 8005290:	f040 80ab 	bne.w	80053ea <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800529c:	d117      	bne.n	80052ce <UART_Receive_IT+0x50>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d113      	bne.n	80052ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80052a6:	2300      	movs	r3, #0
 80052a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052bc:	b29a      	uxth	r2, r3
 80052be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c6:	1c9a      	adds	r2, r3, #2
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	629a      	str	r2, [r3, #40]	; 0x28
 80052cc:	e026      	b.n	800531c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80052d4:	2300      	movs	r3, #0
 80052d6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052e0:	d007      	beq.n	80052f2 <UART_Receive_IT+0x74>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10a      	bne.n	8005300 <UART_Receive_IT+0x82>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d106      	bne.n	8005300 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	b2da      	uxtb	r2, r3
 80052fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052fc:	701a      	strb	r2, [r3, #0]
 80052fe:	e008      	b.n	8005312 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	b2db      	uxtb	r3, r3
 8005308:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800530c:	b2da      	uxtb	r2, r3
 800530e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005310:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005316:	1c5a      	adds	r2, r3, #1
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005320:	b29b      	uxth	r3, r3
 8005322:	3b01      	subs	r3, #1
 8005324:	b29b      	uxth	r3, r3
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	4619      	mov	r1, r3
 800532a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800532c:	2b00      	cmp	r3, #0
 800532e:	d15a      	bne.n	80053e6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68da      	ldr	r2, [r3, #12]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f022 0220 	bic.w	r2, r2, #32
 800533e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68da      	ldr	r2, [r3, #12]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800534e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	695a      	ldr	r2, [r3, #20]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f022 0201 	bic.w	r2, r2, #1
 800535e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2220      	movs	r2, #32
 8005364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536c:	2b01      	cmp	r3, #1
 800536e:	d135      	bne.n	80053dc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	330c      	adds	r3, #12
 800537c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	e853 3f00 	ldrex	r3, [r3]
 8005384:	613b      	str	r3, [r7, #16]
   return(result);
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	f023 0310 	bic.w	r3, r3, #16
 800538c:	627b      	str	r3, [r7, #36]	; 0x24
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	330c      	adds	r3, #12
 8005394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005396:	623a      	str	r2, [r7, #32]
 8005398:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539a:	69f9      	ldr	r1, [r7, #28]
 800539c:	6a3a      	ldr	r2, [r7, #32]
 800539e:	e841 2300 	strex	r3, r2, [r1]
 80053a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1e5      	bne.n	8005376 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0310 	and.w	r3, r3, #16
 80053b4:	2b10      	cmp	r3, #16
 80053b6:	d10a      	bne.n	80053ce <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053b8:	2300      	movs	r3, #0
 80053ba:	60fb      	str	r3, [r7, #12]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	60fb      	str	r3, [r7, #12]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80053d2:	4619      	mov	r1, r3
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f7ff fdbf 	bl	8004f58 <HAL_UARTEx_RxEventCallback>
 80053da:	e002      	b.n	80053e2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f7fc fd0b 	bl	8001df8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80053e2:	2300      	movs	r3, #0
 80053e4:	e002      	b.n	80053ec <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80053e6:	2300      	movs	r3, #0
 80053e8:	e000      	b.n	80053ec <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80053ea:	2302      	movs	r3, #2
  }
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3730      	adds	r7, #48	; 0x30
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053f8:	b09f      	sub	sp, #124	; 0x7c
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005408:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800540a:	68d9      	ldr	r1, [r3, #12]
 800540c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	ea40 0301 	orr.w	r3, r0, r1
 8005414:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005416:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005418:	689a      	ldr	r2, [r3, #8]
 800541a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	431a      	orrs	r2, r3
 8005420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005422:	695b      	ldr	r3, [r3, #20]
 8005424:	431a      	orrs	r2, r3
 8005426:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005428:	69db      	ldr	r3, [r3, #28]
 800542a:	4313      	orrs	r3, r2
 800542c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800542e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005438:	f021 010c 	bic.w	r1, r1, #12
 800543c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005442:	430b      	orrs	r3, r1
 8005444:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	695b      	ldr	r3, [r3, #20]
 800544c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005452:	6999      	ldr	r1, [r3, #24]
 8005454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	ea40 0301 	orr.w	r3, r0, r1
 800545c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800545e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	4bc5      	ldr	r3, [pc, #788]	; (8005778 <UART_SetConfig+0x384>)
 8005464:	429a      	cmp	r2, r3
 8005466:	d004      	beq.n	8005472 <UART_SetConfig+0x7e>
 8005468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	4bc3      	ldr	r3, [pc, #780]	; (800577c <UART_SetConfig+0x388>)
 800546e:	429a      	cmp	r2, r3
 8005470:	d103      	bne.n	800547a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005472:	f7ff f9ab 	bl	80047cc <HAL_RCC_GetPCLK2Freq>
 8005476:	6778      	str	r0, [r7, #116]	; 0x74
 8005478:	e002      	b.n	8005480 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800547a:	f7ff f993 	bl	80047a4 <HAL_RCC_GetPCLK1Freq>
 800547e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005480:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005482:	69db      	ldr	r3, [r3, #28]
 8005484:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005488:	f040 80b6 	bne.w	80055f8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800548c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800548e:	461c      	mov	r4, r3
 8005490:	f04f 0500 	mov.w	r5, #0
 8005494:	4622      	mov	r2, r4
 8005496:	462b      	mov	r3, r5
 8005498:	1891      	adds	r1, r2, r2
 800549a:	6439      	str	r1, [r7, #64]	; 0x40
 800549c:	415b      	adcs	r3, r3
 800549e:	647b      	str	r3, [r7, #68]	; 0x44
 80054a0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80054a4:	1912      	adds	r2, r2, r4
 80054a6:	eb45 0303 	adc.w	r3, r5, r3
 80054aa:	f04f 0000 	mov.w	r0, #0
 80054ae:	f04f 0100 	mov.w	r1, #0
 80054b2:	00d9      	lsls	r1, r3, #3
 80054b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80054b8:	00d0      	lsls	r0, r2, #3
 80054ba:	4602      	mov	r2, r0
 80054bc:	460b      	mov	r3, r1
 80054be:	1911      	adds	r1, r2, r4
 80054c0:	6639      	str	r1, [r7, #96]	; 0x60
 80054c2:	416b      	adcs	r3, r5
 80054c4:	667b      	str	r3, [r7, #100]	; 0x64
 80054c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	461a      	mov	r2, r3
 80054cc:	f04f 0300 	mov.w	r3, #0
 80054d0:	1891      	adds	r1, r2, r2
 80054d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80054d4:	415b      	adcs	r3, r3
 80054d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80054dc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80054e0:	f7fb fbba 	bl	8000c58 <__aeabi_uldivmod>
 80054e4:	4602      	mov	r2, r0
 80054e6:	460b      	mov	r3, r1
 80054e8:	4ba5      	ldr	r3, [pc, #660]	; (8005780 <UART_SetConfig+0x38c>)
 80054ea:	fba3 2302 	umull	r2, r3, r3, r2
 80054ee:	095b      	lsrs	r3, r3, #5
 80054f0:	011e      	lsls	r6, r3, #4
 80054f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054f4:	461c      	mov	r4, r3
 80054f6:	f04f 0500 	mov.w	r5, #0
 80054fa:	4622      	mov	r2, r4
 80054fc:	462b      	mov	r3, r5
 80054fe:	1891      	adds	r1, r2, r2
 8005500:	6339      	str	r1, [r7, #48]	; 0x30
 8005502:	415b      	adcs	r3, r3
 8005504:	637b      	str	r3, [r7, #52]	; 0x34
 8005506:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800550a:	1912      	adds	r2, r2, r4
 800550c:	eb45 0303 	adc.w	r3, r5, r3
 8005510:	f04f 0000 	mov.w	r0, #0
 8005514:	f04f 0100 	mov.w	r1, #0
 8005518:	00d9      	lsls	r1, r3, #3
 800551a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800551e:	00d0      	lsls	r0, r2, #3
 8005520:	4602      	mov	r2, r0
 8005522:	460b      	mov	r3, r1
 8005524:	1911      	adds	r1, r2, r4
 8005526:	65b9      	str	r1, [r7, #88]	; 0x58
 8005528:	416b      	adcs	r3, r5
 800552a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800552c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	461a      	mov	r2, r3
 8005532:	f04f 0300 	mov.w	r3, #0
 8005536:	1891      	adds	r1, r2, r2
 8005538:	62b9      	str	r1, [r7, #40]	; 0x28
 800553a:	415b      	adcs	r3, r3
 800553c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800553e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005542:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005546:	f7fb fb87 	bl	8000c58 <__aeabi_uldivmod>
 800554a:	4602      	mov	r2, r0
 800554c:	460b      	mov	r3, r1
 800554e:	4b8c      	ldr	r3, [pc, #560]	; (8005780 <UART_SetConfig+0x38c>)
 8005550:	fba3 1302 	umull	r1, r3, r3, r2
 8005554:	095b      	lsrs	r3, r3, #5
 8005556:	2164      	movs	r1, #100	; 0x64
 8005558:	fb01 f303 	mul.w	r3, r1, r3
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	00db      	lsls	r3, r3, #3
 8005560:	3332      	adds	r3, #50	; 0x32
 8005562:	4a87      	ldr	r2, [pc, #540]	; (8005780 <UART_SetConfig+0x38c>)
 8005564:	fba2 2303 	umull	r2, r3, r2, r3
 8005568:	095b      	lsrs	r3, r3, #5
 800556a:	005b      	lsls	r3, r3, #1
 800556c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005570:	441e      	add	r6, r3
 8005572:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005574:	4618      	mov	r0, r3
 8005576:	f04f 0100 	mov.w	r1, #0
 800557a:	4602      	mov	r2, r0
 800557c:	460b      	mov	r3, r1
 800557e:	1894      	adds	r4, r2, r2
 8005580:	623c      	str	r4, [r7, #32]
 8005582:	415b      	adcs	r3, r3
 8005584:	627b      	str	r3, [r7, #36]	; 0x24
 8005586:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800558a:	1812      	adds	r2, r2, r0
 800558c:	eb41 0303 	adc.w	r3, r1, r3
 8005590:	f04f 0400 	mov.w	r4, #0
 8005594:	f04f 0500 	mov.w	r5, #0
 8005598:	00dd      	lsls	r5, r3, #3
 800559a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800559e:	00d4      	lsls	r4, r2, #3
 80055a0:	4622      	mov	r2, r4
 80055a2:	462b      	mov	r3, r5
 80055a4:	1814      	adds	r4, r2, r0
 80055a6:	653c      	str	r4, [r7, #80]	; 0x50
 80055a8:	414b      	adcs	r3, r1
 80055aa:	657b      	str	r3, [r7, #84]	; 0x54
 80055ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	461a      	mov	r2, r3
 80055b2:	f04f 0300 	mov.w	r3, #0
 80055b6:	1891      	adds	r1, r2, r2
 80055b8:	61b9      	str	r1, [r7, #24]
 80055ba:	415b      	adcs	r3, r3
 80055bc:	61fb      	str	r3, [r7, #28]
 80055be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055c2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80055c6:	f7fb fb47 	bl	8000c58 <__aeabi_uldivmod>
 80055ca:	4602      	mov	r2, r0
 80055cc:	460b      	mov	r3, r1
 80055ce:	4b6c      	ldr	r3, [pc, #432]	; (8005780 <UART_SetConfig+0x38c>)
 80055d0:	fba3 1302 	umull	r1, r3, r3, r2
 80055d4:	095b      	lsrs	r3, r3, #5
 80055d6:	2164      	movs	r1, #100	; 0x64
 80055d8:	fb01 f303 	mul.w	r3, r1, r3
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	00db      	lsls	r3, r3, #3
 80055e0:	3332      	adds	r3, #50	; 0x32
 80055e2:	4a67      	ldr	r2, [pc, #412]	; (8005780 <UART_SetConfig+0x38c>)
 80055e4:	fba2 2303 	umull	r2, r3, r2, r3
 80055e8:	095b      	lsrs	r3, r3, #5
 80055ea:	f003 0207 	and.w	r2, r3, #7
 80055ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4432      	add	r2, r6
 80055f4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055f6:	e0b9      	b.n	800576c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055fa:	461c      	mov	r4, r3
 80055fc:	f04f 0500 	mov.w	r5, #0
 8005600:	4622      	mov	r2, r4
 8005602:	462b      	mov	r3, r5
 8005604:	1891      	adds	r1, r2, r2
 8005606:	6139      	str	r1, [r7, #16]
 8005608:	415b      	adcs	r3, r3
 800560a:	617b      	str	r3, [r7, #20]
 800560c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005610:	1912      	adds	r2, r2, r4
 8005612:	eb45 0303 	adc.w	r3, r5, r3
 8005616:	f04f 0000 	mov.w	r0, #0
 800561a:	f04f 0100 	mov.w	r1, #0
 800561e:	00d9      	lsls	r1, r3, #3
 8005620:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005624:	00d0      	lsls	r0, r2, #3
 8005626:	4602      	mov	r2, r0
 8005628:	460b      	mov	r3, r1
 800562a:	eb12 0804 	adds.w	r8, r2, r4
 800562e:	eb43 0905 	adc.w	r9, r3, r5
 8005632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	4618      	mov	r0, r3
 8005638:	f04f 0100 	mov.w	r1, #0
 800563c:	f04f 0200 	mov.w	r2, #0
 8005640:	f04f 0300 	mov.w	r3, #0
 8005644:	008b      	lsls	r3, r1, #2
 8005646:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800564a:	0082      	lsls	r2, r0, #2
 800564c:	4640      	mov	r0, r8
 800564e:	4649      	mov	r1, r9
 8005650:	f7fb fb02 	bl	8000c58 <__aeabi_uldivmod>
 8005654:	4602      	mov	r2, r0
 8005656:	460b      	mov	r3, r1
 8005658:	4b49      	ldr	r3, [pc, #292]	; (8005780 <UART_SetConfig+0x38c>)
 800565a:	fba3 2302 	umull	r2, r3, r3, r2
 800565e:	095b      	lsrs	r3, r3, #5
 8005660:	011e      	lsls	r6, r3, #4
 8005662:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005664:	4618      	mov	r0, r3
 8005666:	f04f 0100 	mov.w	r1, #0
 800566a:	4602      	mov	r2, r0
 800566c:	460b      	mov	r3, r1
 800566e:	1894      	adds	r4, r2, r2
 8005670:	60bc      	str	r4, [r7, #8]
 8005672:	415b      	adcs	r3, r3
 8005674:	60fb      	str	r3, [r7, #12]
 8005676:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800567a:	1812      	adds	r2, r2, r0
 800567c:	eb41 0303 	adc.w	r3, r1, r3
 8005680:	f04f 0400 	mov.w	r4, #0
 8005684:	f04f 0500 	mov.w	r5, #0
 8005688:	00dd      	lsls	r5, r3, #3
 800568a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800568e:	00d4      	lsls	r4, r2, #3
 8005690:	4622      	mov	r2, r4
 8005692:	462b      	mov	r3, r5
 8005694:	1814      	adds	r4, r2, r0
 8005696:	64bc      	str	r4, [r7, #72]	; 0x48
 8005698:	414b      	adcs	r3, r1
 800569a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800569c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	4618      	mov	r0, r3
 80056a2:	f04f 0100 	mov.w	r1, #0
 80056a6:	f04f 0200 	mov.w	r2, #0
 80056aa:	f04f 0300 	mov.w	r3, #0
 80056ae:	008b      	lsls	r3, r1, #2
 80056b0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80056b4:	0082      	lsls	r2, r0, #2
 80056b6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80056ba:	f7fb facd 	bl	8000c58 <__aeabi_uldivmod>
 80056be:	4602      	mov	r2, r0
 80056c0:	460b      	mov	r3, r1
 80056c2:	4b2f      	ldr	r3, [pc, #188]	; (8005780 <UART_SetConfig+0x38c>)
 80056c4:	fba3 1302 	umull	r1, r3, r3, r2
 80056c8:	095b      	lsrs	r3, r3, #5
 80056ca:	2164      	movs	r1, #100	; 0x64
 80056cc:	fb01 f303 	mul.w	r3, r1, r3
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	011b      	lsls	r3, r3, #4
 80056d4:	3332      	adds	r3, #50	; 0x32
 80056d6:	4a2a      	ldr	r2, [pc, #168]	; (8005780 <UART_SetConfig+0x38c>)
 80056d8:	fba2 2303 	umull	r2, r3, r2, r3
 80056dc:	095b      	lsrs	r3, r3, #5
 80056de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056e2:	441e      	add	r6, r3
 80056e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056e6:	4618      	mov	r0, r3
 80056e8:	f04f 0100 	mov.w	r1, #0
 80056ec:	4602      	mov	r2, r0
 80056ee:	460b      	mov	r3, r1
 80056f0:	1894      	adds	r4, r2, r2
 80056f2:	603c      	str	r4, [r7, #0]
 80056f4:	415b      	adcs	r3, r3
 80056f6:	607b      	str	r3, [r7, #4]
 80056f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056fc:	1812      	adds	r2, r2, r0
 80056fe:	eb41 0303 	adc.w	r3, r1, r3
 8005702:	f04f 0400 	mov.w	r4, #0
 8005706:	f04f 0500 	mov.w	r5, #0
 800570a:	00dd      	lsls	r5, r3, #3
 800570c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005710:	00d4      	lsls	r4, r2, #3
 8005712:	4622      	mov	r2, r4
 8005714:	462b      	mov	r3, r5
 8005716:	eb12 0a00 	adds.w	sl, r2, r0
 800571a:	eb43 0b01 	adc.w	fp, r3, r1
 800571e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	4618      	mov	r0, r3
 8005724:	f04f 0100 	mov.w	r1, #0
 8005728:	f04f 0200 	mov.w	r2, #0
 800572c:	f04f 0300 	mov.w	r3, #0
 8005730:	008b      	lsls	r3, r1, #2
 8005732:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005736:	0082      	lsls	r2, r0, #2
 8005738:	4650      	mov	r0, sl
 800573a:	4659      	mov	r1, fp
 800573c:	f7fb fa8c 	bl	8000c58 <__aeabi_uldivmod>
 8005740:	4602      	mov	r2, r0
 8005742:	460b      	mov	r3, r1
 8005744:	4b0e      	ldr	r3, [pc, #56]	; (8005780 <UART_SetConfig+0x38c>)
 8005746:	fba3 1302 	umull	r1, r3, r3, r2
 800574a:	095b      	lsrs	r3, r3, #5
 800574c:	2164      	movs	r1, #100	; 0x64
 800574e:	fb01 f303 	mul.w	r3, r1, r3
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	011b      	lsls	r3, r3, #4
 8005756:	3332      	adds	r3, #50	; 0x32
 8005758:	4a09      	ldr	r2, [pc, #36]	; (8005780 <UART_SetConfig+0x38c>)
 800575a:	fba2 2303 	umull	r2, r3, r2, r3
 800575e:	095b      	lsrs	r3, r3, #5
 8005760:	f003 020f 	and.w	r2, r3, #15
 8005764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4432      	add	r2, r6
 800576a:	609a      	str	r2, [r3, #8]
}
 800576c:	bf00      	nop
 800576e:	377c      	adds	r7, #124	; 0x7c
 8005770:	46bd      	mov	sp, r7
 8005772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005776:	bf00      	nop
 8005778:	40011000 	.word	0x40011000
 800577c:	40011400 	.word	0x40011400
 8005780:	51eb851f 	.word	0x51eb851f

08005784 <__errno>:
 8005784:	4b01      	ldr	r3, [pc, #4]	; (800578c <__errno+0x8>)
 8005786:	6818      	ldr	r0, [r3, #0]
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	20000014 	.word	0x20000014

08005790 <__libc_init_array>:
 8005790:	b570      	push	{r4, r5, r6, lr}
 8005792:	4d0d      	ldr	r5, [pc, #52]	; (80057c8 <__libc_init_array+0x38>)
 8005794:	4c0d      	ldr	r4, [pc, #52]	; (80057cc <__libc_init_array+0x3c>)
 8005796:	1b64      	subs	r4, r4, r5
 8005798:	10a4      	asrs	r4, r4, #2
 800579a:	2600      	movs	r6, #0
 800579c:	42a6      	cmp	r6, r4
 800579e:	d109      	bne.n	80057b4 <__libc_init_array+0x24>
 80057a0:	4d0b      	ldr	r5, [pc, #44]	; (80057d0 <__libc_init_array+0x40>)
 80057a2:	4c0c      	ldr	r4, [pc, #48]	; (80057d4 <__libc_init_array+0x44>)
 80057a4:	f003 f92e 	bl	8008a04 <_init>
 80057a8:	1b64      	subs	r4, r4, r5
 80057aa:	10a4      	asrs	r4, r4, #2
 80057ac:	2600      	movs	r6, #0
 80057ae:	42a6      	cmp	r6, r4
 80057b0:	d105      	bne.n	80057be <__libc_init_array+0x2e>
 80057b2:	bd70      	pop	{r4, r5, r6, pc}
 80057b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80057b8:	4798      	blx	r3
 80057ba:	3601      	adds	r6, #1
 80057bc:	e7ee      	b.n	800579c <__libc_init_array+0xc>
 80057be:	f855 3b04 	ldr.w	r3, [r5], #4
 80057c2:	4798      	blx	r3
 80057c4:	3601      	adds	r6, #1
 80057c6:	e7f2      	b.n	80057ae <__libc_init_array+0x1e>
 80057c8:	08008ee8 	.word	0x08008ee8
 80057cc:	08008ee8 	.word	0x08008ee8
 80057d0:	08008ee8 	.word	0x08008ee8
 80057d4:	08008eec 	.word	0x08008eec

080057d8 <memset>:
 80057d8:	4402      	add	r2, r0
 80057da:	4603      	mov	r3, r0
 80057dc:	4293      	cmp	r3, r2
 80057de:	d100      	bne.n	80057e2 <memset+0xa>
 80057e0:	4770      	bx	lr
 80057e2:	f803 1b01 	strb.w	r1, [r3], #1
 80057e6:	e7f9      	b.n	80057dc <memset+0x4>

080057e8 <__cvt>:
 80057e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057ec:	ec55 4b10 	vmov	r4, r5, d0
 80057f0:	2d00      	cmp	r5, #0
 80057f2:	460e      	mov	r6, r1
 80057f4:	4619      	mov	r1, r3
 80057f6:	462b      	mov	r3, r5
 80057f8:	bfbb      	ittet	lt
 80057fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80057fe:	461d      	movlt	r5, r3
 8005800:	2300      	movge	r3, #0
 8005802:	232d      	movlt	r3, #45	; 0x2d
 8005804:	700b      	strb	r3, [r1, #0]
 8005806:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005808:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800580c:	4691      	mov	r9, r2
 800580e:	f023 0820 	bic.w	r8, r3, #32
 8005812:	bfbc      	itt	lt
 8005814:	4622      	movlt	r2, r4
 8005816:	4614      	movlt	r4, r2
 8005818:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800581c:	d005      	beq.n	800582a <__cvt+0x42>
 800581e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005822:	d100      	bne.n	8005826 <__cvt+0x3e>
 8005824:	3601      	adds	r6, #1
 8005826:	2102      	movs	r1, #2
 8005828:	e000      	b.n	800582c <__cvt+0x44>
 800582a:	2103      	movs	r1, #3
 800582c:	ab03      	add	r3, sp, #12
 800582e:	9301      	str	r3, [sp, #4]
 8005830:	ab02      	add	r3, sp, #8
 8005832:	9300      	str	r3, [sp, #0]
 8005834:	ec45 4b10 	vmov	d0, r4, r5
 8005838:	4653      	mov	r3, sl
 800583a:	4632      	mov	r2, r6
 800583c:	f000 fcec 	bl	8006218 <_dtoa_r>
 8005840:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005844:	4607      	mov	r7, r0
 8005846:	d102      	bne.n	800584e <__cvt+0x66>
 8005848:	f019 0f01 	tst.w	r9, #1
 800584c:	d022      	beq.n	8005894 <__cvt+0xac>
 800584e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005852:	eb07 0906 	add.w	r9, r7, r6
 8005856:	d110      	bne.n	800587a <__cvt+0x92>
 8005858:	783b      	ldrb	r3, [r7, #0]
 800585a:	2b30      	cmp	r3, #48	; 0x30
 800585c:	d10a      	bne.n	8005874 <__cvt+0x8c>
 800585e:	2200      	movs	r2, #0
 8005860:	2300      	movs	r3, #0
 8005862:	4620      	mov	r0, r4
 8005864:	4629      	mov	r1, r5
 8005866:	f7fb f937 	bl	8000ad8 <__aeabi_dcmpeq>
 800586a:	b918      	cbnz	r0, 8005874 <__cvt+0x8c>
 800586c:	f1c6 0601 	rsb	r6, r6, #1
 8005870:	f8ca 6000 	str.w	r6, [sl]
 8005874:	f8da 3000 	ldr.w	r3, [sl]
 8005878:	4499      	add	r9, r3
 800587a:	2200      	movs	r2, #0
 800587c:	2300      	movs	r3, #0
 800587e:	4620      	mov	r0, r4
 8005880:	4629      	mov	r1, r5
 8005882:	f7fb f929 	bl	8000ad8 <__aeabi_dcmpeq>
 8005886:	b108      	cbz	r0, 800588c <__cvt+0xa4>
 8005888:	f8cd 900c 	str.w	r9, [sp, #12]
 800588c:	2230      	movs	r2, #48	; 0x30
 800588e:	9b03      	ldr	r3, [sp, #12]
 8005890:	454b      	cmp	r3, r9
 8005892:	d307      	bcc.n	80058a4 <__cvt+0xbc>
 8005894:	9b03      	ldr	r3, [sp, #12]
 8005896:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005898:	1bdb      	subs	r3, r3, r7
 800589a:	4638      	mov	r0, r7
 800589c:	6013      	str	r3, [r2, #0]
 800589e:	b004      	add	sp, #16
 80058a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058a4:	1c59      	adds	r1, r3, #1
 80058a6:	9103      	str	r1, [sp, #12]
 80058a8:	701a      	strb	r2, [r3, #0]
 80058aa:	e7f0      	b.n	800588e <__cvt+0xa6>

080058ac <__exponent>:
 80058ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058ae:	4603      	mov	r3, r0
 80058b0:	2900      	cmp	r1, #0
 80058b2:	bfb8      	it	lt
 80058b4:	4249      	neglt	r1, r1
 80058b6:	f803 2b02 	strb.w	r2, [r3], #2
 80058ba:	bfb4      	ite	lt
 80058bc:	222d      	movlt	r2, #45	; 0x2d
 80058be:	222b      	movge	r2, #43	; 0x2b
 80058c0:	2909      	cmp	r1, #9
 80058c2:	7042      	strb	r2, [r0, #1]
 80058c4:	dd2a      	ble.n	800591c <__exponent+0x70>
 80058c6:	f10d 0407 	add.w	r4, sp, #7
 80058ca:	46a4      	mov	ip, r4
 80058cc:	270a      	movs	r7, #10
 80058ce:	46a6      	mov	lr, r4
 80058d0:	460a      	mov	r2, r1
 80058d2:	fb91 f6f7 	sdiv	r6, r1, r7
 80058d6:	fb07 1516 	mls	r5, r7, r6, r1
 80058da:	3530      	adds	r5, #48	; 0x30
 80058dc:	2a63      	cmp	r2, #99	; 0x63
 80058de:	f104 34ff 	add.w	r4, r4, #4294967295
 80058e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80058e6:	4631      	mov	r1, r6
 80058e8:	dcf1      	bgt.n	80058ce <__exponent+0x22>
 80058ea:	3130      	adds	r1, #48	; 0x30
 80058ec:	f1ae 0502 	sub.w	r5, lr, #2
 80058f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80058f4:	1c44      	adds	r4, r0, #1
 80058f6:	4629      	mov	r1, r5
 80058f8:	4561      	cmp	r1, ip
 80058fa:	d30a      	bcc.n	8005912 <__exponent+0x66>
 80058fc:	f10d 0209 	add.w	r2, sp, #9
 8005900:	eba2 020e 	sub.w	r2, r2, lr
 8005904:	4565      	cmp	r5, ip
 8005906:	bf88      	it	hi
 8005908:	2200      	movhi	r2, #0
 800590a:	4413      	add	r3, r2
 800590c:	1a18      	subs	r0, r3, r0
 800590e:	b003      	add	sp, #12
 8005910:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005912:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005916:	f804 2f01 	strb.w	r2, [r4, #1]!
 800591a:	e7ed      	b.n	80058f8 <__exponent+0x4c>
 800591c:	2330      	movs	r3, #48	; 0x30
 800591e:	3130      	adds	r1, #48	; 0x30
 8005920:	7083      	strb	r3, [r0, #2]
 8005922:	70c1      	strb	r1, [r0, #3]
 8005924:	1d03      	adds	r3, r0, #4
 8005926:	e7f1      	b.n	800590c <__exponent+0x60>

08005928 <_printf_float>:
 8005928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800592c:	ed2d 8b02 	vpush	{d8}
 8005930:	b08d      	sub	sp, #52	; 0x34
 8005932:	460c      	mov	r4, r1
 8005934:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005938:	4616      	mov	r6, r2
 800593a:	461f      	mov	r7, r3
 800593c:	4605      	mov	r5, r0
 800593e:	f001 fa57 	bl	8006df0 <_localeconv_r>
 8005942:	f8d0 a000 	ldr.w	sl, [r0]
 8005946:	4650      	mov	r0, sl
 8005948:	f7fa fc4a 	bl	80001e0 <strlen>
 800594c:	2300      	movs	r3, #0
 800594e:	930a      	str	r3, [sp, #40]	; 0x28
 8005950:	6823      	ldr	r3, [r4, #0]
 8005952:	9305      	str	r3, [sp, #20]
 8005954:	f8d8 3000 	ldr.w	r3, [r8]
 8005958:	f894 b018 	ldrb.w	fp, [r4, #24]
 800595c:	3307      	adds	r3, #7
 800595e:	f023 0307 	bic.w	r3, r3, #7
 8005962:	f103 0208 	add.w	r2, r3, #8
 8005966:	f8c8 2000 	str.w	r2, [r8]
 800596a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005972:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005976:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800597a:	9307      	str	r3, [sp, #28]
 800597c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005980:	ee08 0a10 	vmov	s16, r0
 8005984:	4b9f      	ldr	r3, [pc, #636]	; (8005c04 <_printf_float+0x2dc>)
 8005986:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800598a:	f04f 32ff 	mov.w	r2, #4294967295
 800598e:	f7fb f8d5 	bl	8000b3c <__aeabi_dcmpun>
 8005992:	bb88      	cbnz	r0, 80059f8 <_printf_float+0xd0>
 8005994:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005998:	4b9a      	ldr	r3, [pc, #616]	; (8005c04 <_printf_float+0x2dc>)
 800599a:	f04f 32ff 	mov.w	r2, #4294967295
 800599e:	f7fb f8af 	bl	8000b00 <__aeabi_dcmple>
 80059a2:	bb48      	cbnz	r0, 80059f8 <_printf_float+0xd0>
 80059a4:	2200      	movs	r2, #0
 80059a6:	2300      	movs	r3, #0
 80059a8:	4640      	mov	r0, r8
 80059aa:	4649      	mov	r1, r9
 80059ac:	f7fb f89e 	bl	8000aec <__aeabi_dcmplt>
 80059b0:	b110      	cbz	r0, 80059b8 <_printf_float+0x90>
 80059b2:	232d      	movs	r3, #45	; 0x2d
 80059b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059b8:	4b93      	ldr	r3, [pc, #588]	; (8005c08 <_printf_float+0x2e0>)
 80059ba:	4894      	ldr	r0, [pc, #592]	; (8005c0c <_printf_float+0x2e4>)
 80059bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80059c0:	bf94      	ite	ls
 80059c2:	4698      	movls	r8, r3
 80059c4:	4680      	movhi	r8, r0
 80059c6:	2303      	movs	r3, #3
 80059c8:	6123      	str	r3, [r4, #16]
 80059ca:	9b05      	ldr	r3, [sp, #20]
 80059cc:	f023 0204 	bic.w	r2, r3, #4
 80059d0:	6022      	str	r2, [r4, #0]
 80059d2:	f04f 0900 	mov.w	r9, #0
 80059d6:	9700      	str	r7, [sp, #0]
 80059d8:	4633      	mov	r3, r6
 80059da:	aa0b      	add	r2, sp, #44	; 0x2c
 80059dc:	4621      	mov	r1, r4
 80059de:	4628      	mov	r0, r5
 80059e0:	f000 f9d8 	bl	8005d94 <_printf_common>
 80059e4:	3001      	adds	r0, #1
 80059e6:	f040 8090 	bne.w	8005b0a <_printf_float+0x1e2>
 80059ea:	f04f 30ff 	mov.w	r0, #4294967295
 80059ee:	b00d      	add	sp, #52	; 0x34
 80059f0:	ecbd 8b02 	vpop	{d8}
 80059f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059f8:	4642      	mov	r2, r8
 80059fa:	464b      	mov	r3, r9
 80059fc:	4640      	mov	r0, r8
 80059fe:	4649      	mov	r1, r9
 8005a00:	f7fb f89c 	bl	8000b3c <__aeabi_dcmpun>
 8005a04:	b140      	cbz	r0, 8005a18 <_printf_float+0xf0>
 8005a06:	464b      	mov	r3, r9
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	bfbc      	itt	lt
 8005a0c:	232d      	movlt	r3, #45	; 0x2d
 8005a0e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005a12:	487f      	ldr	r0, [pc, #508]	; (8005c10 <_printf_float+0x2e8>)
 8005a14:	4b7f      	ldr	r3, [pc, #508]	; (8005c14 <_printf_float+0x2ec>)
 8005a16:	e7d1      	b.n	80059bc <_printf_float+0x94>
 8005a18:	6863      	ldr	r3, [r4, #4]
 8005a1a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005a1e:	9206      	str	r2, [sp, #24]
 8005a20:	1c5a      	adds	r2, r3, #1
 8005a22:	d13f      	bne.n	8005aa4 <_printf_float+0x17c>
 8005a24:	2306      	movs	r3, #6
 8005a26:	6063      	str	r3, [r4, #4]
 8005a28:	9b05      	ldr	r3, [sp, #20]
 8005a2a:	6861      	ldr	r1, [r4, #4]
 8005a2c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005a30:	2300      	movs	r3, #0
 8005a32:	9303      	str	r3, [sp, #12]
 8005a34:	ab0a      	add	r3, sp, #40	; 0x28
 8005a36:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005a3a:	ab09      	add	r3, sp, #36	; 0x24
 8005a3c:	ec49 8b10 	vmov	d0, r8, r9
 8005a40:	9300      	str	r3, [sp, #0]
 8005a42:	6022      	str	r2, [r4, #0]
 8005a44:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005a48:	4628      	mov	r0, r5
 8005a4a:	f7ff fecd 	bl	80057e8 <__cvt>
 8005a4e:	9b06      	ldr	r3, [sp, #24]
 8005a50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a52:	2b47      	cmp	r3, #71	; 0x47
 8005a54:	4680      	mov	r8, r0
 8005a56:	d108      	bne.n	8005a6a <_printf_float+0x142>
 8005a58:	1cc8      	adds	r0, r1, #3
 8005a5a:	db02      	blt.n	8005a62 <_printf_float+0x13a>
 8005a5c:	6863      	ldr	r3, [r4, #4]
 8005a5e:	4299      	cmp	r1, r3
 8005a60:	dd41      	ble.n	8005ae6 <_printf_float+0x1be>
 8005a62:	f1ab 0b02 	sub.w	fp, fp, #2
 8005a66:	fa5f fb8b 	uxtb.w	fp, fp
 8005a6a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005a6e:	d820      	bhi.n	8005ab2 <_printf_float+0x18a>
 8005a70:	3901      	subs	r1, #1
 8005a72:	465a      	mov	r2, fp
 8005a74:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005a78:	9109      	str	r1, [sp, #36]	; 0x24
 8005a7a:	f7ff ff17 	bl	80058ac <__exponent>
 8005a7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a80:	1813      	adds	r3, r2, r0
 8005a82:	2a01      	cmp	r2, #1
 8005a84:	4681      	mov	r9, r0
 8005a86:	6123      	str	r3, [r4, #16]
 8005a88:	dc02      	bgt.n	8005a90 <_printf_float+0x168>
 8005a8a:	6822      	ldr	r2, [r4, #0]
 8005a8c:	07d2      	lsls	r2, r2, #31
 8005a8e:	d501      	bpl.n	8005a94 <_printf_float+0x16c>
 8005a90:	3301      	adds	r3, #1
 8005a92:	6123      	str	r3, [r4, #16]
 8005a94:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d09c      	beq.n	80059d6 <_printf_float+0xae>
 8005a9c:	232d      	movs	r3, #45	; 0x2d
 8005a9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005aa2:	e798      	b.n	80059d6 <_printf_float+0xae>
 8005aa4:	9a06      	ldr	r2, [sp, #24]
 8005aa6:	2a47      	cmp	r2, #71	; 0x47
 8005aa8:	d1be      	bne.n	8005a28 <_printf_float+0x100>
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1bc      	bne.n	8005a28 <_printf_float+0x100>
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e7b9      	b.n	8005a26 <_printf_float+0xfe>
 8005ab2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005ab6:	d118      	bne.n	8005aea <_printf_float+0x1c2>
 8005ab8:	2900      	cmp	r1, #0
 8005aba:	6863      	ldr	r3, [r4, #4]
 8005abc:	dd0b      	ble.n	8005ad6 <_printf_float+0x1ae>
 8005abe:	6121      	str	r1, [r4, #16]
 8005ac0:	b913      	cbnz	r3, 8005ac8 <_printf_float+0x1a0>
 8005ac2:	6822      	ldr	r2, [r4, #0]
 8005ac4:	07d0      	lsls	r0, r2, #31
 8005ac6:	d502      	bpl.n	8005ace <_printf_float+0x1a6>
 8005ac8:	3301      	adds	r3, #1
 8005aca:	440b      	add	r3, r1
 8005acc:	6123      	str	r3, [r4, #16]
 8005ace:	65a1      	str	r1, [r4, #88]	; 0x58
 8005ad0:	f04f 0900 	mov.w	r9, #0
 8005ad4:	e7de      	b.n	8005a94 <_printf_float+0x16c>
 8005ad6:	b913      	cbnz	r3, 8005ade <_printf_float+0x1b6>
 8005ad8:	6822      	ldr	r2, [r4, #0]
 8005ada:	07d2      	lsls	r2, r2, #31
 8005adc:	d501      	bpl.n	8005ae2 <_printf_float+0x1ba>
 8005ade:	3302      	adds	r3, #2
 8005ae0:	e7f4      	b.n	8005acc <_printf_float+0x1a4>
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e7f2      	b.n	8005acc <_printf_float+0x1a4>
 8005ae6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005aea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005aec:	4299      	cmp	r1, r3
 8005aee:	db05      	blt.n	8005afc <_printf_float+0x1d4>
 8005af0:	6823      	ldr	r3, [r4, #0]
 8005af2:	6121      	str	r1, [r4, #16]
 8005af4:	07d8      	lsls	r0, r3, #31
 8005af6:	d5ea      	bpl.n	8005ace <_printf_float+0x1a6>
 8005af8:	1c4b      	adds	r3, r1, #1
 8005afa:	e7e7      	b.n	8005acc <_printf_float+0x1a4>
 8005afc:	2900      	cmp	r1, #0
 8005afe:	bfd4      	ite	le
 8005b00:	f1c1 0202 	rsble	r2, r1, #2
 8005b04:	2201      	movgt	r2, #1
 8005b06:	4413      	add	r3, r2
 8005b08:	e7e0      	b.n	8005acc <_printf_float+0x1a4>
 8005b0a:	6823      	ldr	r3, [r4, #0]
 8005b0c:	055a      	lsls	r2, r3, #21
 8005b0e:	d407      	bmi.n	8005b20 <_printf_float+0x1f8>
 8005b10:	6923      	ldr	r3, [r4, #16]
 8005b12:	4642      	mov	r2, r8
 8005b14:	4631      	mov	r1, r6
 8005b16:	4628      	mov	r0, r5
 8005b18:	47b8      	blx	r7
 8005b1a:	3001      	adds	r0, #1
 8005b1c:	d12c      	bne.n	8005b78 <_printf_float+0x250>
 8005b1e:	e764      	b.n	80059ea <_printf_float+0xc2>
 8005b20:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005b24:	f240 80e0 	bls.w	8005ce8 <_printf_float+0x3c0>
 8005b28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	2300      	movs	r3, #0
 8005b30:	f7fa ffd2 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b34:	2800      	cmp	r0, #0
 8005b36:	d034      	beq.n	8005ba2 <_printf_float+0x27a>
 8005b38:	4a37      	ldr	r2, [pc, #220]	; (8005c18 <_printf_float+0x2f0>)
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	4631      	mov	r1, r6
 8005b3e:	4628      	mov	r0, r5
 8005b40:	47b8      	blx	r7
 8005b42:	3001      	adds	r0, #1
 8005b44:	f43f af51 	beq.w	80059ea <_printf_float+0xc2>
 8005b48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	db02      	blt.n	8005b56 <_printf_float+0x22e>
 8005b50:	6823      	ldr	r3, [r4, #0]
 8005b52:	07d8      	lsls	r0, r3, #31
 8005b54:	d510      	bpl.n	8005b78 <_printf_float+0x250>
 8005b56:	ee18 3a10 	vmov	r3, s16
 8005b5a:	4652      	mov	r2, sl
 8005b5c:	4631      	mov	r1, r6
 8005b5e:	4628      	mov	r0, r5
 8005b60:	47b8      	blx	r7
 8005b62:	3001      	adds	r0, #1
 8005b64:	f43f af41 	beq.w	80059ea <_printf_float+0xc2>
 8005b68:	f04f 0800 	mov.w	r8, #0
 8005b6c:	f104 091a 	add.w	r9, r4, #26
 8005b70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b72:	3b01      	subs	r3, #1
 8005b74:	4543      	cmp	r3, r8
 8005b76:	dc09      	bgt.n	8005b8c <_printf_float+0x264>
 8005b78:	6823      	ldr	r3, [r4, #0]
 8005b7a:	079b      	lsls	r3, r3, #30
 8005b7c:	f100 8105 	bmi.w	8005d8a <_printf_float+0x462>
 8005b80:	68e0      	ldr	r0, [r4, #12]
 8005b82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b84:	4298      	cmp	r0, r3
 8005b86:	bfb8      	it	lt
 8005b88:	4618      	movlt	r0, r3
 8005b8a:	e730      	b.n	80059ee <_printf_float+0xc6>
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	464a      	mov	r2, r9
 8005b90:	4631      	mov	r1, r6
 8005b92:	4628      	mov	r0, r5
 8005b94:	47b8      	blx	r7
 8005b96:	3001      	adds	r0, #1
 8005b98:	f43f af27 	beq.w	80059ea <_printf_float+0xc2>
 8005b9c:	f108 0801 	add.w	r8, r8, #1
 8005ba0:	e7e6      	b.n	8005b70 <_printf_float+0x248>
 8005ba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	dc39      	bgt.n	8005c1c <_printf_float+0x2f4>
 8005ba8:	4a1b      	ldr	r2, [pc, #108]	; (8005c18 <_printf_float+0x2f0>)
 8005baa:	2301      	movs	r3, #1
 8005bac:	4631      	mov	r1, r6
 8005bae:	4628      	mov	r0, r5
 8005bb0:	47b8      	blx	r7
 8005bb2:	3001      	adds	r0, #1
 8005bb4:	f43f af19 	beq.w	80059ea <_printf_float+0xc2>
 8005bb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	d102      	bne.n	8005bc6 <_printf_float+0x29e>
 8005bc0:	6823      	ldr	r3, [r4, #0]
 8005bc2:	07d9      	lsls	r1, r3, #31
 8005bc4:	d5d8      	bpl.n	8005b78 <_printf_float+0x250>
 8005bc6:	ee18 3a10 	vmov	r3, s16
 8005bca:	4652      	mov	r2, sl
 8005bcc:	4631      	mov	r1, r6
 8005bce:	4628      	mov	r0, r5
 8005bd0:	47b8      	blx	r7
 8005bd2:	3001      	adds	r0, #1
 8005bd4:	f43f af09 	beq.w	80059ea <_printf_float+0xc2>
 8005bd8:	f04f 0900 	mov.w	r9, #0
 8005bdc:	f104 0a1a 	add.w	sl, r4, #26
 8005be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005be2:	425b      	negs	r3, r3
 8005be4:	454b      	cmp	r3, r9
 8005be6:	dc01      	bgt.n	8005bec <_printf_float+0x2c4>
 8005be8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bea:	e792      	b.n	8005b12 <_printf_float+0x1ea>
 8005bec:	2301      	movs	r3, #1
 8005bee:	4652      	mov	r2, sl
 8005bf0:	4631      	mov	r1, r6
 8005bf2:	4628      	mov	r0, r5
 8005bf4:	47b8      	blx	r7
 8005bf6:	3001      	adds	r0, #1
 8005bf8:	f43f aef7 	beq.w	80059ea <_printf_float+0xc2>
 8005bfc:	f109 0901 	add.w	r9, r9, #1
 8005c00:	e7ee      	b.n	8005be0 <_printf_float+0x2b8>
 8005c02:	bf00      	nop
 8005c04:	7fefffff 	.word	0x7fefffff
 8005c08:	08008a90 	.word	0x08008a90
 8005c0c:	08008a94 	.word	0x08008a94
 8005c10:	08008a9c 	.word	0x08008a9c
 8005c14:	08008a98 	.word	0x08008a98
 8005c18:	08008aa0 	.word	0x08008aa0
 8005c1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c20:	429a      	cmp	r2, r3
 8005c22:	bfa8      	it	ge
 8005c24:	461a      	movge	r2, r3
 8005c26:	2a00      	cmp	r2, #0
 8005c28:	4691      	mov	r9, r2
 8005c2a:	dc37      	bgt.n	8005c9c <_printf_float+0x374>
 8005c2c:	f04f 0b00 	mov.w	fp, #0
 8005c30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c34:	f104 021a 	add.w	r2, r4, #26
 8005c38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c3a:	9305      	str	r3, [sp, #20]
 8005c3c:	eba3 0309 	sub.w	r3, r3, r9
 8005c40:	455b      	cmp	r3, fp
 8005c42:	dc33      	bgt.n	8005cac <_printf_float+0x384>
 8005c44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	db3b      	blt.n	8005cc4 <_printf_float+0x39c>
 8005c4c:	6823      	ldr	r3, [r4, #0]
 8005c4e:	07da      	lsls	r2, r3, #31
 8005c50:	d438      	bmi.n	8005cc4 <_printf_float+0x39c>
 8005c52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c54:	9b05      	ldr	r3, [sp, #20]
 8005c56:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	eba2 0901 	sub.w	r9, r2, r1
 8005c5e:	4599      	cmp	r9, r3
 8005c60:	bfa8      	it	ge
 8005c62:	4699      	movge	r9, r3
 8005c64:	f1b9 0f00 	cmp.w	r9, #0
 8005c68:	dc35      	bgt.n	8005cd6 <_printf_float+0x3ae>
 8005c6a:	f04f 0800 	mov.w	r8, #0
 8005c6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c72:	f104 0a1a 	add.w	sl, r4, #26
 8005c76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c7a:	1a9b      	subs	r3, r3, r2
 8005c7c:	eba3 0309 	sub.w	r3, r3, r9
 8005c80:	4543      	cmp	r3, r8
 8005c82:	f77f af79 	ble.w	8005b78 <_printf_float+0x250>
 8005c86:	2301      	movs	r3, #1
 8005c88:	4652      	mov	r2, sl
 8005c8a:	4631      	mov	r1, r6
 8005c8c:	4628      	mov	r0, r5
 8005c8e:	47b8      	blx	r7
 8005c90:	3001      	adds	r0, #1
 8005c92:	f43f aeaa 	beq.w	80059ea <_printf_float+0xc2>
 8005c96:	f108 0801 	add.w	r8, r8, #1
 8005c9a:	e7ec      	b.n	8005c76 <_printf_float+0x34e>
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	4631      	mov	r1, r6
 8005ca0:	4642      	mov	r2, r8
 8005ca2:	4628      	mov	r0, r5
 8005ca4:	47b8      	blx	r7
 8005ca6:	3001      	adds	r0, #1
 8005ca8:	d1c0      	bne.n	8005c2c <_printf_float+0x304>
 8005caa:	e69e      	b.n	80059ea <_printf_float+0xc2>
 8005cac:	2301      	movs	r3, #1
 8005cae:	4631      	mov	r1, r6
 8005cb0:	4628      	mov	r0, r5
 8005cb2:	9205      	str	r2, [sp, #20]
 8005cb4:	47b8      	blx	r7
 8005cb6:	3001      	adds	r0, #1
 8005cb8:	f43f ae97 	beq.w	80059ea <_printf_float+0xc2>
 8005cbc:	9a05      	ldr	r2, [sp, #20]
 8005cbe:	f10b 0b01 	add.w	fp, fp, #1
 8005cc2:	e7b9      	b.n	8005c38 <_printf_float+0x310>
 8005cc4:	ee18 3a10 	vmov	r3, s16
 8005cc8:	4652      	mov	r2, sl
 8005cca:	4631      	mov	r1, r6
 8005ccc:	4628      	mov	r0, r5
 8005cce:	47b8      	blx	r7
 8005cd0:	3001      	adds	r0, #1
 8005cd2:	d1be      	bne.n	8005c52 <_printf_float+0x32a>
 8005cd4:	e689      	b.n	80059ea <_printf_float+0xc2>
 8005cd6:	9a05      	ldr	r2, [sp, #20]
 8005cd8:	464b      	mov	r3, r9
 8005cda:	4442      	add	r2, r8
 8005cdc:	4631      	mov	r1, r6
 8005cde:	4628      	mov	r0, r5
 8005ce0:	47b8      	blx	r7
 8005ce2:	3001      	adds	r0, #1
 8005ce4:	d1c1      	bne.n	8005c6a <_printf_float+0x342>
 8005ce6:	e680      	b.n	80059ea <_printf_float+0xc2>
 8005ce8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cea:	2a01      	cmp	r2, #1
 8005cec:	dc01      	bgt.n	8005cf2 <_printf_float+0x3ca>
 8005cee:	07db      	lsls	r3, r3, #31
 8005cf0:	d538      	bpl.n	8005d64 <_printf_float+0x43c>
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	4642      	mov	r2, r8
 8005cf6:	4631      	mov	r1, r6
 8005cf8:	4628      	mov	r0, r5
 8005cfa:	47b8      	blx	r7
 8005cfc:	3001      	adds	r0, #1
 8005cfe:	f43f ae74 	beq.w	80059ea <_printf_float+0xc2>
 8005d02:	ee18 3a10 	vmov	r3, s16
 8005d06:	4652      	mov	r2, sl
 8005d08:	4631      	mov	r1, r6
 8005d0a:	4628      	mov	r0, r5
 8005d0c:	47b8      	blx	r7
 8005d0e:	3001      	adds	r0, #1
 8005d10:	f43f ae6b 	beq.w	80059ea <_printf_float+0xc2>
 8005d14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d18:	2200      	movs	r2, #0
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	f7fa fedc 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d20:	b9d8      	cbnz	r0, 8005d5a <_printf_float+0x432>
 8005d22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d24:	f108 0201 	add.w	r2, r8, #1
 8005d28:	3b01      	subs	r3, #1
 8005d2a:	4631      	mov	r1, r6
 8005d2c:	4628      	mov	r0, r5
 8005d2e:	47b8      	blx	r7
 8005d30:	3001      	adds	r0, #1
 8005d32:	d10e      	bne.n	8005d52 <_printf_float+0x42a>
 8005d34:	e659      	b.n	80059ea <_printf_float+0xc2>
 8005d36:	2301      	movs	r3, #1
 8005d38:	4652      	mov	r2, sl
 8005d3a:	4631      	mov	r1, r6
 8005d3c:	4628      	mov	r0, r5
 8005d3e:	47b8      	blx	r7
 8005d40:	3001      	adds	r0, #1
 8005d42:	f43f ae52 	beq.w	80059ea <_printf_float+0xc2>
 8005d46:	f108 0801 	add.w	r8, r8, #1
 8005d4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	4543      	cmp	r3, r8
 8005d50:	dcf1      	bgt.n	8005d36 <_printf_float+0x40e>
 8005d52:	464b      	mov	r3, r9
 8005d54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005d58:	e6dc      	b.n	8005b14 <_printf_float+0x1ec>
 8005d5a:	f04f 0800 	mov.w	r8, #0
 8005d5e:	f104 0a1a 	add.w	sl, r4, #26
 8005d62:	e7f2      	b.n	8005d4a <_printf_float+0x422>
 8005d64:	2301      	movs	r3, #1
 8005d66:	4642      	mov	r2, r8
 8005d68:	e7df      	b.n	8005d2a <_printf_float+0x402>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	464a      	mov	r2, r9
 8005d6e:	4631      	mov	r1, r6
 8005d70:	4628      	mov	r0, r5
 8005d72:	47b8      	blx	r7
 8005d74:	3001      	adds	r0, #1
 8005d76:	f43f ae38 	beq.w	80059ea <_printf_float+0xc2>
 8005d7a:	f108 0801 	add.w	r8, r8, #1
 8005d7e:	68e3      	ldr	r3, [r4, #12]
 8005d80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d82:	1a5b      	subs	r3, r3, r1
 8005d84:	4543      	cmp	r3, r8
 8005d86:	dcf0      	bgt.n	8005d6a <_printf_float+0x442>
 8005d88:	e6fa      	b.n	8005b80 <_printf_float+0x258>
 8005d8a:	f04f 0800 	mov.w	r8, #0
 8005d8e:	f104 0919 	add.w	r9, r4, #25
 8005d92:	e7f4      	b.n	8005d7e <_printf_float+0x456>

08005d94 <_printf_common>:
 8005d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d98:	4616      	mov	r6, r2
 8005d9a:	4699      	mov	r9, r3
 8005d9c:	688a      	ldr	r2, [r1, #8]
 8005d9e:	690b      	ldr	r3, [r1, #16]
 8005da0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005da4:	4293      	cmp	r3, r2
 8005da6:	bfb8      	it	lt
 8005da8:	4613      	movlt	r3, r2
 8005daa:	6033      	str	r3, [r6, #0]
 8005dac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005db0:	4607      	mov	r7, r0
 8005db2:	460c      	mov	r4, r1
 8005db4:	b10a      	cbz	r2, 8005dba <_printf_common+0x26>
 8005db6:	3301      	adds	r3, #1
 8005db8:	6033      	str	r3, [r6, #0]
 8005dba:	6823      	ldr	r3, [r4, #0]
 8005dbc:	0699      	lsls	r1, r3, #26
 8005dbe:	bf42      	ittt	mi
 8005dc0:	6833      	ldrmi	r3, [r6, #0]
 8005dc2:	3302      	addmi	r3, #2
 8005dc4:	6033      	strmi	r3, [r6, #0]
 8005dc6:	6825      	ldr	r5, [r4, #0]
 8005dc8:	f015 0506 	ands.w	r5, r5, #6
 8005dcc:	d106      	bne.n	8005ddc <_printf_common+0x48>
 8005dce:	f104 0a19 	add.w	sl, r4, #25
 8005dd2:	68e3      	ldr	r3, [r4, #12]
 8005dd4:	6832      	ldr	r2, [r6, #0]
 8005dd6:	1a9b      	subs	r3, r3, r2
 8005dd8:	42ab      	cmp	r3, r5
 8005dda:	dc26      	bgt.n	8005e2a <_printf_common+0x96>
 8005ddc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005de0:	1e13      	subs	r3, r2, #0
 8005de2:	6822      	ldr	r2, [r4, #0]
 8005de4:	bf18      	it	ne
 8005de6:	2301      	movne	r3, #1
 8005de8:	0692      	lsls	r2, r2, #26
 8005dea:	d42b      	bmi.n	8005e44 <_printf_common+0xb0>
 8005dec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005df0:	4649      	mov	r1, r9
 8005df2:	4638      	mov	r0, r7
 8005df4:	47c0      	blx	r8
 8005df6:	3001      	adds	r0, #1
 8005df8:	d01e      	beq.n	8005e38 <_printf_common+0xa4>
 8005dfa:	6823      	ldr	r3, [r4, #0]
 8005dfc:	68e5      	ldr	r5, [r4, #12]
 8005dfe:	6832      	ldr	r2, [r6, #0]
 8005e00:	f003 0306 	and.w	r3, r3, #6
 8005e04:	2b04      	cmp	r3, #4
 8005e06:	bf08      	it	eq
 8005e08:	1aad      	subeq	r5, r5, r2
 8005e0a:	68a3      	ldr	r3, [r4, #8]
 8005e0c:	6922      	ldr	r2, [r4, #16]
 8005e0e:	bf0c      	ite	eq
 8005e10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e14:	2500      	movne	r5, #0
 8005e16:	4293      	cmp	r3, r2
 8005e18:	bfc4      	itt	gt
 8005e1a:	1a9b      	subgt	r3, r3, r2
 8005e1c:	18ed      	addgt	r5, r5, r3
 8005e1e:	2600      	movs	r6, #0
 8005e20:	341a      	adds	r4, #26
 8005e22:	42b5      	cmp	r5, r6
 8005e24:	d11a      	bne.n	8005e5c <_printf_common+0xc8>
 8005e26:	2000      	movs	r0, #0
 8005e28:	e008      	b.n	8005e3c <_printf_common+0xa8>
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	4652      	mov	r2, sl
 8005e2e:	4649      	mov	r1, r9
 8005e30:	4638      	mov	r0, r7
 8005e32:	47c0      	blx	r8
 8005e34:	3001      	adds	r0, #1
 8005e36:	d103      	bne.n	8005e40 <_printf_common+0xac>
 8005e38:	f04f 30ff 	mov.w	r0, #4294967295
 8005e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e40:	3501      	adds	r5, #1
 8005e42:	e7c6      	b.n	8005dd2 <_printf_common+0x3e>
 8005e44:	18e1      	adds	r1, r4, r3
 8005e46:	1c5a      	adds	r2, r3, #1
 8005e48:	2030      	movs	r0, #48	; 0x30
 8005e4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e4e:	4422      	add	r2, r4
 8005e50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e58:	3302      	adds	r3, #2
 8005e5a:	e7c7      	b.n	8005dec <_printf_common+0x58>
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	4622      	mov	r2, r4
 8005e60:	4649      	mov	r1, r9
 8005e62:	4638      	mov	r0, r7
 8005e64:	47c0      	blx	r8
 8005e66:	3001      	adds	r0, #1
 8005e68:	d0e6      	beq.n	8005e38 <_printf_common+0xa4>
 8005e6a:	3601      	adds	r6, #1
 8005e6c:	e7d9      	b.n	8005e22 <_printf_common+0x8e>
	...

08005e70 <_printf_i>:
 8005e70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e74:	460c      	mov	r4, r1
 8005e76:	4691      	mov	r9, r2
 8005e78:	7e27      	ldrb	r7, [r4, #24]
 8005e7a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005e7c:	2f78      	cmp	r7, #120	; 0x78
 8005e7e:	4680      	mov	r8, r0
 8005e80:	469a      	mov	sl, r3
 8005e82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e86:	d807      	bhi.n	8005e98 <_printf_i+0x28>
 8005e88:	2f62      	cmp	r7, #98	; 0x62
 8005e8a:	d80a      	bhi.n	8005ea2 <_printf_i+0x32>
 8005e8c:	2f00      	cmp	r7, #0
 8005e8e:	f000 80d8 	beq.w	8006042 <_printf_i+0x1d2>
 8005e92:	2f58      	cmp	r7, #88	; 0x58
 8005e94:	f000 80a3 	beq.w	8005fde <_printf_i+0x16e>
 8005e98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005e9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ea0:	e03a      	b.n	8005f18 <_printf_i+0xa8>
 8005ea2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ea6:	2b15      	cmp	r3, #21
 8005ea8:	d8f6      	bhi.n	8005e98 <_printf_i+0x28>
 8005eaa:	a001      	add	r0, pc, #4	; (adr r0, 8005eb0 <_printf_i+0x40>)
 8005eac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005eb0:	08005f09 	.word	0x08005f09
 8005eb4:	08005f1d 	.word	0x08005f1d
 8005eb8:	08005e99 	.word	0x08005e99
 8005ebc:	08005e99 	.word	0x08005e99
 8005ec0:	08005e99 	.word	0x08005e99
 8005ec4:	08005e99 	.word	0x08005e99
 8005ec8:	08005f1d 	.word	0x08005f1d
 8005ecc:	08005e99 	.word	0x08005e99
 8005ed0:	08005e99 	.word	0x08005e99
 8005ed4:	08005e99 	.word	0x08005e99
 8005ed8:	08005e99 	.word	0x08005e99
 8005edc:	08006029 	.word	0x08006029
 8005ee0:	08005f4d 	.word	0x08005f4d
 8005ee4:	0800600b 	.word	0x0800600b
 8005ee8:	08005e99 	.word	0x08005e99
 8005eec:	08005e99 	.word	0x08005e99
 8005ef0:	0800604b 	.word	0x0800604b
 8005ef4:	08005e99 	.word	0x08005e99
 8005ef8:	08005f4d 	.word	0x08005f4d
 8005efc:	08005e99 	.word	0x08005e99
 8005f00:	08005e99 	.word	0x08005e99
 8005f04:	08006013 	.word	0x08006013
 8005f08:	680b      	ldr	r3, [r1, #0]
 8005f0a:	1d1a      	adds	r2, r3, #4
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	600a      	str	r2, [r1, #0]
 8005f10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005f14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e0a3      	b.n	8006064 <_printf_i+0x1f4>
 8005f1c:	6825      	ldr	r5, [r4, #0]
 8005f1e:	6808      	ldr	r0, [r1, #0]
 8005f20:	062e      	lsls	r6, r5, #24
 8005f22:	f100 0304 	add.w	r3, r0, #4
 8005f26:	d50a      	bpl.n	8005f3e <_printf_i+0xce>
 8005f28:	6805      	ldr	r5, [r0, #0]
 8005f2a:	600b      	str	r3, [r1, #0]
 8005f2c:	2d00      	cmp	r5, #0
 8005f2e:	da03      	bge.n	8005f38 <_printf_i+0xc8>
 8005f30:	232d      	movs	r3, #45	; 0x2d
 8005f32:	426d      	negs	r5, r5
 8005f34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f38:	485e      	ldr	r0, [pc, #376]	; (80060b4 <_printf_i+0x244>)
 8005f3a:	230a      	movs	r3, #10
 8005f3c:	e019      	b.n	8005f72 <_printf_i+0x102>
 8005f3e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005f42:	6805      	ldr	r5, [r0, #0]
 8005f44:	600b      	str	r3, [r1, #0]
 8005f46:	bf18      	it	ne
 8005f48:	b22d      	sxthne	r5, r5
 8005f4a:	e7ef      	b.n	8005f2c <_printf_i+0xbc>
 8005f4c:	680b      	ldr	r3, [r1, #0]
 8005f4e:	6825      	ldr	r5, [r4, #0]
 8005f50:	1d18      	adds	r0, r3, #4
 8005f52:	6008      	str	r0, [r1, #0]
 8005f54:	0628      	lsls	r0, r5, #24
 8005f56:	d501      	bpl.n	8005f5c <_printf_i+0xec>
 8005f58:	681d      	ldr	r5, [r3, #0]
 8005f5a:	e002      	b.n	8005f62 <_printf_i+0xf2>
 8005f5c:	0669      	lsls	r1, r5, #25
 8005f5e:	d5fb      	bpl.n	8005f58 <_printf_i+0xe8>
 8005f60:	881d      	ldrh	r5, [r3, #0]
 8005f62:	4854      	ldr	r0, [pc, #336]	; (80060b4 <_printf_i+0x244>)
 8005f64:	2f6f      	cmp	r7, #111	; 0x6f
 8005f66:	bf0c      	ite	eq
 8005f68:	2308      	moveq	r3, #8
 8005f6a:	230a      	movne	r3, #10
 8005f6c:	2100      	movs	r1, #0
 8005f6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f72:	6866      	ldr	r6, [r4, #4]
 8005f74:	60a6      	str	r6, [r4, #8]
 8005f76:	2e00      	cmp	r6, #0
 8005f78:	bfa2      	ittt	ge
 8005f7a:	6821      	ldrge	r1, [r4, #0]
 8005f7c:	f021 0104 	bicge.w	r1, r1, #4
 8005f80:	6021      	strge	r1, [r4, #0]
 8005f82:	b90d      	cbnz	r5, 8005f88 <_printf_i+0x118>
 8005f84:	2e00      	cmp	r6, #0
 8005f86:	d04d      	beq.n	8006024 <_printf_i+0x1b4>
 8005f88:	4616      	mov	r6, r2
 8005f8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f8e:	fb03 5711 	mls	r7, r3, r1, r5
 8005f92:	5dc7      	ldrb	r7, [r0, r7]
 8005f94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f98:	462f      	mov	r7, r5
 8005f9a:	42bb      	cmp	r3, r7
 8005f9c:	460d      	mov	r5, r1
 8005f9e:	d9f4      	bls.n	8005f8a <_printf_i+0x11a>
 8005fa0:	2b08      	cmp	r3, #8
 8005fa2:	d10b      	bne.n	8005fbc <_printf_i+0x14c>
 8005fa4:	6823      	ldr	r3, [r4, #0]
 8005fa6:	07df      	lsls	r7, r3, #31
 8005fa8:	d508      	bpl.n	8005fbc <_printf_i+0x14c>
 8005faa:	6923      	ldr	r3, [r4, #16]
 8005fac:	6861      	ldr	r1, [r4, #4]
 8005fae:	4299      	cmp	r1, r3
 8005fb0:	bfde      	ittt	le
 8005fb2:	2330      	movle	r3, #48	; 0x30
 8005fb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005fb8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005fbc:	1b92      	subs	r2, r2, r6
 8005fbe:	6122      	str	r2, [r4, #16]
 8005fc0:	f8cd a000 	str.w	sl, [sp]
 8005fc4:	464b      	mov	r3, r9
 8005fc6:	aa03      	add	r2, sp, #12
 8005fc8:	4621      	mov	r1, r4
 8005fca:	4640      	mov	r0, r8
 8005fcc:	f7ff fee2 	bl	8005d94 <_printf_common>
 8005fd0:	3001      	adds	r0, #1
 8005fd2:	d14c      	bne.n	800606e <_printf_i+0x1fe>
 8005fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fd8:	b004      	add	sp, #16
 8005fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fde:	4835      	ldr	r0, [pc, #212]	; (80060b4 <_printf_i+0x244>)
 8005fe0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005fe4:	6823      	ldr	r3, [r4, #0]
 8005fe6:	680e      	ldr	r6, [r1, #0]
 8005fe8:	061f      	lsls	r7, r3, #24
 8005fea:	f856 5b04 	ldr.w	r5, [r6], #4
 8005fee:	600e      	str	r6, [r1, #0]
 8005ff0:	d514      	bpl.n	800601c <_printf_i+0x1ac>
 8005ff2:	07d9      	lsls	r1, r3, #31
 8005ff4:	bf44      	itt	mi
 8005ff6:	f043 0320 	orrmi.w	r3, r3, #32
 8005ffa:	6023      	strmi	r3, [r4, #0]
 8005ffc:	b91d      	cbnz	r5, 8006006 <_printf_i+0x196>
 8005ffe:	6823      	ldr	r3, [r4, #0]
 8006000:	f023 0320 	bic.w	r3, r3, #32
 8006004:	6023      	str	r3, [r4, #0]
 8006006:	2310      	movs	r3, #16
 8006008:	e7b0      	b.n	8005f6c <_printf_i+0xfc>
 800600a:	6823      	ldr	r3, [r4, #0]
 800600c:	f043 0320 	orr.w	r3, r3, #32
 8006010:	6023      	str	r3, [r4, #0]
 8006012:	2378      	movs	r3, #120	; 0x78
 8006014:	4828      	ldr	r0, [pc, #160]	; (80060b8 <_printf_i+0x248>)
 8006016:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800601a:	e7e3      	b.n	8005fe4 <_printf_i+0x174>
 800601c:	065e      	lsls	r6, r3, #25
 800601e:	bf48      	it	mi
 8006020:	b2ad      	uxthmi	r5, r5
 8006022:	e7e6      	b.n	8005ff2 <_printf_i+0x182>
 8006024:	4616      	mov	r6, r2
 8006026:	e7bb      	b.n	8005fa0 <_printf_i+0x130>
 8006028:	680b      	ldr	r3, [r1, #0]
 800602a:	6826      	ldr	r6, [r4, #0]
 800602c:	6960      	ldr	r0, [r4, #20]
 800602e:	1d1d      	adds	r5, r3, #4
 8006030:	600d      	str	r5, [r1, #0]
 8006032:	0635      	lsls	r5, r6, #24
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	d501      	bpl.n	800603c <_printf_i+0x1cc>
 8006038:	6018      	str	r0, [r3, #0]
 800603a:	e002      	b.n	8006042 <_printf_i+0x1d2>
 800603c:	0671      	lsls	r1, r6, #25
 800603e:	d5fb      	bpl.n	8006038 <_printf_i+0x1c8>
 8006040:	8018      	strh	r0, [r3, #0]
 8006042:	2300      	movs	r3, #0
 8006044:	6123      	str	r3, [r4, #16]
 8006046:	4616      	mov	r6, r2
 8006048:	e7ba      	b.n	8005fc0 <_printf_i+0x150>
 800604a:	680b      	ldr	r3, [r1, #0]
 800604c:	1d1a      	adds	r2, r3, #4
 800604e:	600a      	str	r2, [r1, #0]
 8006050:	681e      	ldr	r6, [r3, #0]
 8006052:	6862      	ldr	r2, [r4, #4]
 8006054:	2100      	movs	r1, #0
 8006056:	4630      	mov	r0, r6
 8006058:	f7fa f8ca 	bl	80001f0 <memchr>
 800605c:	b108      	cbz	r0, 8006062 <_printf_i+0x1f2>
 800605e:	1b80      	subs	r0, r0, r6
 8006060:	6060      	str	r0, [r4, #4]
 8006062:	6863      	ldr	r3, [r4, #4]
 8006064:	6123      	str	r3, [r4, #16]
 8006066:	2300      	movs	r3, #0
 8006068:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800606c:	e7a8      	b.n	8005fc0 <_printf_i+0x150>
 800606e:	6923      	ldr	r3, [r4, #16]
 8006070:	4632      	mov	r2, r6
 8006072:	4649      	mov	r1, r9
 8006074:	4640      	mov	r0, r8
 8006076:	47d0      	blx	sl
 8006078:	3001      	adds	r0, #1
 800607a:	d0ab      	beq.n	8005fd4 <_printf_i+0x164>
 800607c:	6823      	ldr	r3, [r4, #0]
 800607e:	079b      	lsls	r3, r3, #30
 8006080:	d413      	bmi.n	80060aa <_printf_i+0x23a>
 8006082:	68e0      	ldr	r0, [r4, #12]
 8006084:	9b03      	ldr	r3, [sp, #12]
 8006086:	4298      	cmp	r0, r3
 8006088:	bfb8      	it	lt
 800608a:	4618      	movlt	r0, r3
 800608c:	e7a4      	b.n	8005fd8 <_printf_i+0x168>
 800608e:	2301      	movs	r3, #1
 8006090:	4632      	mov	r2, r6
 8006092:	4649      	mov	r1, r9
 8006094:	4640      	mov	r0, r8
 8006096:	47d0      	blx	sl
 8006098:	3001      	adds	r0, #1
 800609a:	d09b      	beq.n	8005fd4 <_printf_i+0x164>
 800609c:	3501      	adds	r5, #1
 800609e:	68e3      	ldr	r3, [r4, #12]
 80060a0:	9903      	ldr	r1, [sp, #12]
 80060a2:	1a5b      	subs	r3, r3, r1
 80060a4:	42ab      	cmp	r3, r5
 80060a6:	dcf2      	bgt.n	800608e <_printf_i+0x21e>
 80060a8:	e7eb      	b.n	8006082 <_printf_i+0x212>
 80060aa:	2500      	movs	r5, #0
 80060ac:	f104 0619 	add.w	r6, r4, #25
 80060b0:	e7f5      	b.n	800609e <_printf_i+0x22e>
 80060b2:	bf00      	nop
 80060b4:	08008aa2 	.word	0x08008aa2
 80060b8:	08008ab3 	.word	0x08008ab3

080060bc <siprintf>:
 80060bc:	b40e      	push	{r1, r2, r3}
 80060be:	b500      	push	{lr}
 80060c0:	b09c      	sub	sp, #112	; 0x70
 80060c2:	ab1d      	add	r3, sp, #116	; 0x74
 80060c4:	9002      	str	r0, [sp, #8]
 80060c6:	9006      	str	r0, [sp, #24]
 80060c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80060cc:	4809      	ldr	r0, [pc, #36]	; (80060f4 <siprintf+0x38>)
 80060ce:	9107      	str	r1, [sp, #28]
 80060d0:	9104      	str	r1, [sp, #16]
 80060d2:	4909      	ldr	r1, [pc, #36]	; (80060f8 <siprintf+0x3c>)
 80060d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80060d8:	9105      	str	r1, [sp, #20]
 80060da:	6800      	ldr	r0, [r0, #0]
 80060dc:	9301      	str	r3, [sp, #4]
 80060de:	a902      	add	r1, sp, #8
 80060e0:	f001 fb34 	bl	800774c <_svfiprintf_r>
 80060e4:	9b02      	ldr	r3, [sp, #8]
 80060e6:	2200      	movs	r2, #0
 80060e8:	701a      	strb	r2, [r3, #0]
 80060ea:	b01c      	add	sp, #112	; 0x70
 80060ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80060f0:	b003      	add	sp, #12
 80060f2:	4770      	bx	lr
 80060f4:	20000014 	.word	0x20000014
 80060f8:	ffff0208 	.word	0xffff0208

080060fc <quorem>:
 80060fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006100:	6903      	ldr	r3, [r0, #16]
 8006102:	690c      	ldr	r4, [r1, #16]
 8006104:	42a3      	cmp	r3, r4
 8006106:	4607      	mov	r7, r0
 8006108:	f2c0 8081 	blt.w	800620e <quorem+0x112>
 800610c:	3c01      	subs	r4, #1
 800610e:	f101 0814 	add.w	r8, r1, #20
 8006112:	f100 0514 	add.w	r5, r0, #20
 8006116:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800611a:	9301      	str	r3, [sp, #4]
 800611c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006120:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006124:	3301      	adds	r3, #1
 8006126:	429a      	cmp	r2, r3
 8006128:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800612c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006130:	fbb2 f6f3 	udiv	r6, r2, r3
 8006134:	d331      	bcc.n	800619a <quorem+0x9e>
 8006136:	f04f 0e00 	mov.w	lr, #0
 800613a:	4640      	mov	r0, r8
 800613c:	46ac      	mov	ip, r5
 800613e:	46f2      	mov	sl, lr
 8006140:	f850 2b04 	ldr.w	r2, [r0], #4
 8006144:	b293      	uxth	r3, r2
 8006146:	fb06 e303 	mla	r3, r6, r3, lr
 800614a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800614e:	b29b      	uxth	r3, r3
 8006150:	ebaa 0303 	sub.w	r3, sl, r3
 8006154:	0c12      	lsrs	r2, r2, #16
 8006156:	f8dc a000 	ldr.w	sl, [ip]
 800615a:	fb06 e202 	mla	r2, r6, r2, lr
 800615e:	fa13 f38a 	uxtah	r3, r3, sl
 8006162:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006166:	fa1f fa82 	uxth.w	sl, r2
 800616a:	f8dc 2000 	ldr.w	r2, [ip]
 800616e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006172:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006176:	b29b      	uxth	r3, r3
 8006178:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800617c:	4581      	cmp	r9, r0
 800617e:	f84c 3b04 	str.w	r3, [ip], #4
 8006182:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006186:	d2db      	bcs.n	8006140 <quorem+0x44>
 8006188:	f855 300b 	ldr.w	r3, [r5, fp]
 800618c:	b92b      	cbnz	r3, 800619a <quorem+0x9e>
 800618e:	9b01      	ldr	r3, [sp, #4]
 8006190:	3b04      	subs	r3, #4
 8006192:	429d      	cmp	r5, r3
 8006194:	461a      	mov	r2, r3
 8006196:	d32e      	bcc.n	80061f6 <quorem+0xfa>
 8006198:	613c      	str	r4, [r7, #16]
 800619a:	4638      	mov	r0, r7
 800619c:	f001 f8c0 	bl	8007320 <__mcmp>
 80061a0:	2800      	cmp	r0, #0
 80061a2:	db24      	blt.n	80061ee <quorem+0xf2>
 80061a4:	3601      	adds	r6, #1
 80061a6:	4628      	mov	r0, r5
 80061a8:	f04f 0c00 	mov.w	ip, #0
 80061ac:	f858 2b04 	ldr.w	r2, [r8], #4
 80061b0:	f8d0 e000 	ldr.w	lr, [r0]
 80061b4:	b293      	uxth	r3, r2
 80061b6:	ebac 0303 	sub.w	r3, ip, r3
 80061ba:	0c12      	lsrs	r2, r2, #16
 80061bc:	fa13 f38e 	uxtah	r3, r3, lr
 80061c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80061c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061ce:	45c1      	cmp	r9, r8
 80061d0:	f840 3b04 	str.w	r3, [r0], #4
 80061d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80061d8:	d2e8      	bcs.n	80061ac <quorem+0xb0>
 80061da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061e2:	b922      	cbnz	r2, 80061ee <quorem+0xf2>
 80061e4:	3b04      	subs	r3, #4
 80061e6:	429d      	cmp	r5, r3
 80061e8:	461a      	mov	r2, r3
 80061ea:	d30a      	bcc.n	8006202 <quorem+0x106>
 80061ec:	613c      	str	r4, [r7, #16]
 80061ee:	4630      	mov	r0, r6
 80061f0:	b003      	add	sp, #12
 80061f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061f6:	6812      	ldr	r2, [r2, #0]
 80061f8:	3b04      	subs	r3, #4
 80061fa:	2a00      	cmp	r2, #0
 80061fc:	d1cc      	bne.n	8006198 <quorem+0x9c>
 80061fe:	3c01      	subs	r4, #1
 8006200:	e7c7      	b.n	8006192 <quorem+0x96>
 8006202:	6812      	ldr	r2, [r2, #0]
 8006204:	3b04      	subs	r3, #4
 8006206:	2a00      	cmp	r2, #0
 8006208:	d1f0      	bne.n	80061ec <quorem+0xf0>
 800620a:	3c01      	subs	r4, #1
 800620c:	e7eb      	b.n	80061e6 <quorem+0xea>
 800620e:	2000      	movs	r0, #0
 8006210:	e7ee      	b.n	80061f0 <quorem+0xf4>
 8006212:	0000      	movs	r0, r0
 8006214:	0000      	movs	r0, r0
	...

08006218 <_dtoa_r>:
 8006218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800621c:	ed2d 8b02 	vpush	{d8}
 8006220:	ec57 6b10 	vmov	r6, r7, d0
 8006224:	b095      	sub	sp, #84	; 0x54
 8006226:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006228:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800622c:	9105      	str	r1, [sp, #20]
 800622e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006232:	4604      	mov	r4, r0
 8006234:	9209      	str	r2, [sp, #36]	; 0x24
 8006236:	930f      	str	r3, [sp, #60]	; 0x3c
 8006238:	b975      	cbnz	r5, 8006258 <_dtoa_r+0x40>
 800623a:	2010      	movs	r0, #16
 800623c:	f000 fddc 	bl	8006df8 <malloc>
 8006240:	4602      	mov	r2, r0
 8006242:	6260      	str	r0, [r4, #36]	; 0x24
 8006244:	b920      	cbnz	r0, 8006250 <_dtoa_r+0x38>
 8006246:	4bb2      	ldr	r3, [pc, #712]	; (8006510 <_dtoa_r+0x2f8>)
 8006248:	21ea      	movs	r1, #234	; 0xea
 800624a:	48b2      	ldr	r0, [pc, #712]	; (8006514 <_dtoa_r+0x2fc>)
 800624c:	f001 fb8e 	bl	800796c <__assert_func>
 8006250:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006254:	6005      	str	r5, [r0, #0]
 8006256:	60c5      	str	r5, [r0, #12]
 8006258:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800625a:	6819      	ldr	r1, [r3, #0]
 800625c:	b151      	cbz	r1, 8006274 <_dtoa_r+0x5c>
 800625e:	685a      	ldr	r2, [r3, #4]
 8006260:	604a      	str	r2, [r1, #4]
 8006262:	2301      	movs	r3, #1
 8006264:	4093      	lsls	r3, r2
 8006266:	608b      	str	r3, [r1, #8]
 8006268:	4620      	mov	r0, r4
 800626a:	f000 fe1b 	bl	8006ea4 <_Bfree>
 800626e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006270:	2200      	movs	r2, #0
 8006272:	601a      	str	r2, [r3, #0]
 8006274:	1e3b      	subs	r3, r7, #0
 8006276:	bfb9      	ittee	lt
 8006278:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800627c:	9303      	strlt	r3, [sp, #12]
 800627e:	2300      	movge	r3, #0
 8006280:	f8c8 3000 	strge.w	r3, [r8]
 8006284:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006288:	4ba3      	ldr	r3, [pc, #652]	; (8006518 <_dtoa_r+0x300>)
 800628a:	bfbc      	itt	lt
 800628c:	2201      	movlt	r2, #1
 800628e:	f8c8 2000 	strlt.w	r2, [r8]
 8006292:	ea33 0309 	bics.w	r3, r3, r9
 8006296:	d11b      	bne.n	80062d0 <_dtoa_r+0xb8>
 8006298:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800629a:	f242 730f 	movw	r3, #9999	; 0x270f
 800629e:	6013      	str	r3, [r2, #0]
 80062a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80062a4:	4333      	orrs	r3, r6
 80062a6:	f000 857a 	beq.w	8006d9e <_dtoa_r+0xb86>
 80062aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062ac:	b963      	cbnz	r3, 80062c8 <_dtoa_r+0xb0>
 80062ae:	4b9b      	ldr	r3, [pc, #620]	; (800651c <_dtoa_r+0x304>)
 80062b0:	e024      	b.n	80062fc <_dtoa_r+0xe4>
 80062b2:	4b9b      	ldr	r3, [pc, #620]	; (8006520 <_dtoa_r+0x308>)
 80062b4:	9300      	str	r3, [sp, #0]
 80062b6:	3308      	adds	r3, #8
 80062b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80062ba:	6013      	str	r3, [r2, #0]
 80062bc:	9800      	ldr	r0, [sp, #0]
 80062be:	b015      	add	sp, #84	; 0x54
 80062c0:	ecbd 8b02 	vpop	{d8}
 80062c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062c8:	4b94      	ldr	r3, [pc, #592]	; (800651c <_dtoa_r+0x304>)
 80062ca:	9300      	str	r3, [sp, #0]
 80062cc:	3303      	adds	r3, #3
 80062ce:	e7f3      	b.n	80062b8 <_dtoa_r+0xa0>
 80062d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80062d4:	2200      	movs	r2, #0
 80062d6:	ec51 0b17 	vmov	r0, r1, d7
 80062da:	2300      	movs	r3, #0
 80062dc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80062e0:	f7fa fbfa 	bl	8000ad8 <__aeabi_dcmpeq>
 80062e4:	4680      	mov	r8, r0
 80062e6:	b158      	cbz	r0, 8006300 <_dtoa_r+0xe8>
 80062e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80062ea:	2301      	movs	r3, #1
 80062ec:	6013      	str	r3, [r2, #0]
 80062ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f000 8551 	beq.w	8006d98 <_dtoa_r+0xb80>
 80062f6:	488b      	ldr	r0, [pc, #556]	; (8006524 <_dtoa_r+0x30c>)
 80062f8:	6018      	str	r0, [r3, #0]
 80062fa:	1e43      	subs	r3, r0, #1
 80062fc:	9300      	str	r3, [sp, #0]
 80062fe:	e7dd      	b.n	80062bc <_dtoa_r+0xa4>
 8006300:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006304:	aa12      	add	r2, sp, #72	; 0x48
 8006306:	a913      	add	r1, sp, #76	; 0x4c
 8006308:	4620      	mov	r0, r4
 800630a:	f001 f8ad 	bl	8007468 <__d2b>
 800630e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006312:	4683      	mov	fp, r0
 8006314:	2d00      	cmp	r5, #0
 8006316:	d07c      	beq.n	8006412 <_dtoa_r+0x1fa>
 8006318:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800631a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800631e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006322:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006326:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800632a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800632e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006332:	4b7d      	ldr	r3, [pc, #500]	; (8006528 <_dtoa_r+0x310>)
 8006334:	2200      	movs	r2, #0
 8006336:	4630      	mov	r0, r6
 8006338:	4639      	mov	r1, r7
 800633a:	f7f9 ffad 	bl	8000298 <__aeabi_dsub>
 800633e:	a36e      	add	r3, pc, #440	; (adr r3, 80064f8 <_dtoa_r+0x2e0>)
 8006340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006344:	f7fa f960 	bl	8000608 <__aeabi_dmul>
 8006348:	a36d      	add	r3, pc, #436	; (adr r3, 8006500 <_dtoa_r+0x2e8>)
 800634a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634e:	f7f9 ffa5 	bl	800029c <__adddf3>
 8006352:	4606      	mov	r6, r0
 8006354:	4628      	mov	r0, r5
 8006356:	460f      	mov	r7, r1
 8006358:	f7fa f8ec 	bl	8000534 <__aeabi_i2d>
 800635c:	a36a      	add	r3, pc, #424	; (adr r3, 8006508 <_dtoa_r+0x2f0>)
 800635e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006362:	f7fa f951 	bl	8000608 <__aeabi_dmul>
 8006366:	4602      	mov	r2, r0
 8006368:	460b      	mov	r3, r1
 800636a:	4630      	mov	r0, r6
 800636c:	4639      	mov	r1, r7
 800636e:	f7f9 ff95 	bl	800029c <__adddf3>
 8006372:	4606      	mov	r6, r0
 8006374:	460f      	mov	r7, r1
 8006376:	f7fa fbf7 	bl	8000b68 <__aeabi_d2iz>
 800637a:	2200      	movs	r2, #0
 800637c:	4682      	mov	sl, r0
 800637e:	2300      	movs	r3, #0
 8006380:	4630      	mov	r0, r6
 8006382:	4639      	mov	r1, r7
 8006384:	f7fa fbb2 	bl	8000aec <__aeabi_dcmplt>
 8006388:	b148      	cbz	r0, 800639e <_dtoa_r+0x186>
 800638a:	4650      	mov	r0, sl
 800638c:	f7fa f8d2 	bl	8000534 <__aeabi_i2d>
 8006390:	4632      	mov	r2, r6
 8006392:	463b      	mov	r3, r7
 8006394:	f7fa fba0 	bl	8000ad8 <__aeabi_dcmpeq>
 8006398:	b908      	cbnz	r0, 800639e <_dtoa_r+0x186>
 800639a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800639e:	f1ba 0f16 	cmp.w	sl, #22
 80063a2:	d854      	bhi.n	800644e <_dtoa_r+0x236>
 80063a4:	4b61      	ldr	r3, [pc, #388]	; (800652c <_dtoa_r+0x314>)
 80063a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80063aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80063b2:	f7fa fb9b 	bl	8000aec <__aeabi_dcmplt>
 80063b6:	2800      	cmp	r0, #0
 80063b8:	d04b      	beq.n	8006452 <_dtoa_r+0x23a>
 80063ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80063be:	2300      	movs	r3, #0
 80063c0:	930e      	str	r3, [sp, #56]	; 0x38
 80063c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80063c4:	1b5d      	subs	r5, r3, r5
 80063c6:	1e6b      	subs	r3, r5, #1
 80063c8:	9304      	str	r3, [sp, #16]
 80063ca:	bf43      	ittte	mi
 80063cc:	2300      	movmi	r3, #0
 80063ce:	f1c5 0801 	rsbmi	r8, r5, #1
 80063d2:	9304      	strmi	r3, [sp, #16]
 80063d4:	f04f 0800 	movpl.w	r8, #0
 80063d8:	f1ba 0f00 	cmp.w	sl, #0
 80063dc:	db3b      	blt.n	8006456 <_dtoa_r+0x23e>
 80063de:	9b04      	ldr	r3, [sp, #16]
 80063e0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80063e4:	4453      	add	r3, sl
 80063e6:	9304      	str	r3, [sp, #16]
 80063e8:	2300      	movs	r3, #0
 80063ea:	9306      	str	r3, [sp, #24]
 80063ec:	9b05      	ldr	r3, [sp, #20]
 80063ee:	2b09      	cmp	r3, #9
 80063f0:	d869      	bhi.n	80064c6 <_dtoa_r+0x2ae>
 80063f2:	2b05      	cmp	r3, #5
 80063f4:	bfc4      	itt	gt
 80063f6:	3b04      	subgt	r3, #4
 80063f8:	9305      	strgt	r3, [sp, #20]
 80063fa:	9b05      	ldr	r3, [sp, #20]
 80063fc:	f1a3 0302 	sub.w	r3, r3, #2
 8006400:	bfcc      	ite	gt
 8006402:	2500      	movgt	r5, #0
 8006404:	2501      	movle	r5, #1
 8006406:	2b03      	cmp	r3, #3
 8006408:	d869      	bhi.n	80064de <_dtoa_r+0x2c6>
 800640a:	e8df f003 	tbb	[pc, r3]
 800640e:	4e2c      	.short	0x4e2c
 8006410:	5a4c      	.short	0x5a4c
 8006412:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006416:	441d      	add	r5, r3
 8006418:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800641c:	2b20      	cmp	r3, #32
 800641e:	bfc1      	itttt	gt
 8006420:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006424:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006428:	fa09 f303 	lslgt.w	r3, r9, r3
 800642c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006430:	bfda      	itte	le
 8006432:	f1c3 0320 	rsble	r3, r3, #32
 8006436:	fa06 f003 	lslle.w	r0, r6, r3
 800643a:	4318      	orrgt	r0, r3
 800643c:	f7fa f86a 	bl	8000514 <__aeabi_ui2d>
 8006440:	2301      	movs	r3, #1
 8006442:	4606      	mov	r6, r0
 8006444:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006448:	3d01      	subs	r5, #1
 800644a:	9310      	str	r3, [sp, #64]	; 0x40
 800644c:	e771      	b.n	8006332 <_dtoa_r+0x11a>
 800644e:	2301      	movs	r3, #1
 8006450:	e7b6      	b.n	80063c0 <_dtoa_r+0x1a8>
 8006452:	900e      	str	r0, [sp, #56]	; 0x38
 8006454:	e7b5      	b.n	80063c2 <_dtoa_r+0x1aa>
 8006456:	f1ca 0300 	rsb	r3, sl, #0
 800645a:	9306      	str	r3, [sp, #24]
 800645c:	2300      	movs	r3, #0
 800645e:	eba8 080a 	sub.w	r8, r8, sl
 8006462:	930d      	str	r3, [sp, #52]	; 0x34
 8006464:	e7c2      	b.n	80063ec <_dtoa_r+0x1d4>
 8006466:	2300      	movs	r3, #0
 8006468:	9308      	str	r3, [sp, #32]
 800646a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800646c:	2b00      	cmp	r3, #0
 800646e:	dc39      	bgt.n	80064e4 <_dtoa_r+0x2cc>
 8006470:	f04f 0901 	mov.w	r9, #1
 8006474:	f8cd 9004 	str.w	r9, [sp, #4]
 8006478:	464b      	mov	r3, r9
 800647a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800647e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006480:	2200      	movs	r2, #0
 8006482:	6042      	str	r2, [r0, #4]
 8006484:	2204      	movs	r2, #4
 8006486:	f102 0614 	add.w	r6, r2, #20
 800648a:	429e      	cmp	r6, r3
 800648c:	6841      	ldr	r1, [r0, #4]
 800648e:	d92f      	bls.n	80064f0 <_dtoa_r+0x2d8>
 8006490:	4620      	mov	r0, r4
 8006492:	f000 fcc7 	bl	8006e24 <_Balloc>
 8006496:	9000      	str	r0, [sp, #0]
 8006498:	2800      	cmp	r0, #0
 800649a:	d14b      	bne.n	8006534 <_dtoa_r+0x31c>
 800649c:	4b24      	ldr	r3, [pc, #144]	; (8006530 <_dtoa_r+0x318>)
 800649e:	4602      	mov	r2, r0
 80064a0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80064a4:	e6d1      	b.n	800624a <_dtoa_r+0x32>
 80064a6:	2301      	movs	r3, #1
 80064a8:	e7de      	b.n	8006468 <_dtoa_r+0x250>
 80064aa:	2300      	movs	r3, #0
 80064ac:	9308      	str	r3, [sp, #32]
 80064ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064b0:	eb0a 0903 	add.w	r9, sl, r3
 80064b4:	f109 0301 	add.w	r3, r9, #1
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	9301      	str	r3, [sp, #4]
 80064bc:	bfb8      	it	lt
 80064be:	2301      	movlt	r3, #1
 80064c0:	e7dd      	b.n	800647e <_dtoa_r+0x266>
 80064c2:	2301      	movs	r3, #1
 80064c4:	e7f2      	b.n	80064ac <_dtoa_r+0x294>
 80064c6:	2501      	movs	r5, #1
 80064c8:	2300      	movs	r3, #0
 80064ca:	9305      	str	r3, [sp, #20]
 80064cc:	9508      	str	r5, [sp, #32]
 80064ce:	f04f 39ff 	mov.w	r9, #4294967295
 80064d2:	2200      	movs	r2, #0
 80064d4:	f8cd 9004 	str.w	r9, [sp, #4]
 80064d8:	2312      	movs	r3, #18
 80064da:	9209      	str	r2, [sp, #36]	; 0x24
 80064dc:	e7cf      	b.n	800647e <_dtoa_r+0x266>
 80064de:	2301      	movs	r3, #1
 80064e0:	9308      	str	r3, [sp, #32]
 80064e2:	e7f4      	b.n	80064ce <_dtoa_r+0x2b6>
 80064e4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80064e8:	f8cd 9004 	str.w	r9, [sp, #4]
 80064ec:	464b      	mov	r3, r9
 80064ee:	e7c6      	b.n	800647e <_dtoa_r+0x266>
 80064f0:	3101      	adds	r1, #1
 80064f2:	6041      	str	r1, [r0, #4]
 80064f4:	0052      	lsls	r2, r2, #1
 80064f6:	e7c6      	b.n	8006486 <_dtoa_r+0x26e>
 80064f8:	636f4361 	.word	0x636f4361
 80064fc:	3fd287a7 	.word	0x3fd287a7
 8006500:	8b60c8b3 	.word	0x8b60c8b3
 8006504:	3fc68a28 	.word	0x3fc68a28
 8006508:	509f79fb 	.word	0x509f79fb
 800650c:	3fd34413 	.word	0x3fd34413
 8006510:	08008ad1 	.word	0x08008ad1
 8006514:	08008ae8 	.word	0x08008ae8
 8006518:	7ff00000 	.word	0x7ff00000
 800651c:	08008acd 	.word	0x08008acd
 8006520:	08008ac4 	.word	0x08008ac4
 8006524:	08008aa1 	.word	0x08008aa1
 8006528:	3ff80000 	.word	0x3ff80000
 800652c:	08008be0 	.word	0x08008be0
 8006530:	08008b47 	.word	0x08008b47
 8006534:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006536:	9a00      	ldr	r2, [sp, #0]
 8006538:	601a      	str	r2, [r3, #0]
 800653a:	9b01      	ldr	r3, [sp, #4]
 800653c:	2b0e      	cmp	r3, #14
 800653e:	f200 80ad 	bhi.w	800669c <_dtoa_r+0x484>
 8006542:	2d00      	cmp	r5, #0
 8006544:	f000 80aa 	beq.w	800669c <_dtoa_r+0x484>
 8006548:	f1ba 0f00 	cmp.w	sl, #0
 800654c:	dd36      	ble.n	80065bc <_dtoa_r+0x3a4>
 800654e:	4ac3      	ldr	r2, [pc, #780]	; (800685c <_dtoa_r+0x644>)
 8006550:	f00a 030f 	and.w	r3, sl, #15
 8006554:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006558:	ed93 7b00 	vldr	d7, [r3]
 800655c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006560:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006564:	eeb0 8a47 	vmov.f32	s16, s14
 8006568:	eef0 8a67 	vmov.f32	s17, s15
 800656c:	d016      	beq.n	800659c <_dtoa_r+0x384>
 800656e:	4bbc      	ldr	r3, [pc, #752]	; (8006860 <_dtoa_r+0x648>)
 8006570:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006574:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006578:	f7fa f970 	bl	800085c <__aeabi_ddiv>
 800657c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006580:	f007 070f 	and.w	r7, r7, #15
 8006584:	2503      	movs	r5, #3
 8006586:	4eb6      	ldr	r6, [pc, #728]	; (8006860 <_dtoa_r+0x648>)
 8006588:	b957      	cbnz	r7, 80065a0 <_dtoa_r+0x388>
 800658a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800658e:	ec53 2b18 	vmov	r2, r3, d8
 8006592:	f7fa f963 	bl	800085c <__aeabi_ddiv>
 8006596:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800659a:	e029      	b.n	80065f0 <_dtoa_r+0x3d8>
 800659c:	2502      	movs	r5, #2
 800659e:	e7f2      	b.n	8006586 <_dtoa_r+0x36e>
 80065a0:	07f9      	lsls	r1, r7, #31
 80065a2:	d508      	bpl.n	80065b6 <_dtoa_r+0x39e>
 80065a4:	ec51 0b18 	vmov	r0, r1, d8
 80065a8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80065ac:	f7fa f82c 	bl	8000608 <__aeabi_dmul>
 80065b0:	ec41 0b18 	vmov	d8, r0, r1
 80065b4:	3501      	adds	r5, #1
 80065b6:	107f      	asrs	r7, r7, #1
 80065b8:	3608      	adds	r6, #8
 80065ba:	e7e5      	b.n	8006588 <_dtoa_r+0x370>
 80065bc:	f000 80a6 	beq.w	800670c <_dtoa_r+0x4f4>
 80065c0:	f1ca 0600 	rsb	r6, sl, #0
 80065c4:	4ba5      	ldr	r3, [pc, #660]	; (800685c <_dtoa_r+0x644>)
 80065c6:	4fa6      	ldr	r7, [pc, #664]	; (8006860 <_dtoa_r+0x648>)
 80065c8:	f006 020f 	and.w	r2, r6, #15
 80065cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80065d8:	f7fa f816 	bl	8000608 <__aeabi_dmul>
 80065dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065e0:	1136      	asrs	r6, r6, #4
 80065e2:	2300      	movs	r3, #0
 80065e4:	2502      	movs	r5, #2
 80065e6:	2e00      	cmp	r6, #0
 80065e8:	f040 8085 	bne.w	80066f6 <_dtoa_r+0x4de>
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1d2      	bne.n	8006596 <_dtoa_r+0x37e>
 80065f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	f000 808c 	beq.w	8006710 <_dtoa_r+0x4f8>
 80065f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80065fc:	4b99      	ldr	r3, [pc, #612]	; (8006864 <_dtoa_r+0x64c>)
 80065fe:	2200      	movs	r2, #0
 8006600:	4630      	mov	r0, r6
 8006602:	4639      	mov	r1, r7
 8006604:	f7fa fa72 	bl	8000aec <__aeabi_dcmplt>
 8006608:	2800      	cmp	r0, #0
 800660a:	f000 8081 	beq.w	8006710 <_dtoa_r+0x4f8>
 800660e:	9b01      	ldr	r3, [sp, #4]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d07d      	beq.n	8006710 <_dtoa_r+0x4f8>
 8006614:	f1b9 0f00 	cmp.w	r9, #0
 8006618:	dd3c      	ble.n	8006694 <_dtoa_r+0x47c>
 800661a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800661e:	9307      	str	r3, [sp, #28]
 8006620:	2200      	movs	r2, #0
 8006622:	4b91      	ldr	r3, [pc, #580]	; (8006868 <_dtoa_r+0x650>)
 8006624:	4630      	mov	r0, r6
 8006626:	4639      	mov	r1, r7
 8006628:	f7f9 ffee 	bl	8000608 <__aeabi_dmul>
 800662c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006630:	3501      	adds	r5, #1
 8006632:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006636:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800663a:	4628      	mov	r0, r5
 800663c:	f7f9 ff7a 	bl	8000534 <__aeabi_i2d>
 8006640:	4632      	mov	r2, r6
 8006642:	463b      	mov	r3, r7
 8006644:	f7f9 ffe0 	bl	8000608 <__aeabi_dmul>
 8006648:	4b88      	ldr	r3, [pc, #544]	; (800686c <_dtoa_r+0x654>)
 800664a:	2200      	movs	r2, #0
 800664c:	f7f9 fe26 	bl	800029c <__adddf3>
 8006650:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006654:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006658:	9303      	str	r3, [sp, #12]
 800665a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800665c:	2b00      	cmp	r3, #0
 800665e:	d15c      	bne.n	800671a <_dtoa_r+0x502>
 8006660:	4b83      	ldr	r3, [pc, #524]	; (8006870 <_dtoa_r+0x658>)
 8006662:	2200      	movs	r2, #0
 8006664:	4630      	mov	r0, r6
 8006666:	4639      	mov	r1, r7
 8006668:	f7f9 fe16 	bl	8000298 <__aeabi_dsub>
 800666c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006670:	4606      	mov	r6, r0
 8006672:	460f      	mov	r7, r1
 8006674:	f7fa fa58 	bl	8000b28 <__aeabi_dcmpgt>
 8006678:	2800      	cmp	r0, #0
 800667a:	f040 8296 	bne.w	8006baa <_dtoa_r+0x992>
 800667e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006682:	4630      	mov	r0, r6
 8006684:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006688:	4639      	mov	r1, r7
 800668a:	f7fa fa2f 	bl	8000aec <__aeabi_dcmplt>
 800668e:	2800      	cmp	r0, #0
 8006690:	f040 8288 	bne.w	8006ba4 <_dtoa_r+0x98c>
 8006694:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006698:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800669c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800669e:	2b00      	cmp	r3, #0
 80066a0:	f2c0 8158 	blt.w	8006954 <_dtoa_r+0x73c>
 80066a4:	f1ba 0f0e 	cmp.w	sl, #14
 80066a8:	f300 8154 	bgt.w	8006954 <_dtoa_r+0x73c>
 80066ac:	4b6b      	ldr	r3, [pc, #428]	; (800685c <_dtoa_r+0x644>)
 80066ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80066b2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80066b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f280 80e3 	bge.w	8006884 <_dtoa_r+0x66c>
 80066be:	9b01      	ldr	r3, [sp, #4]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f300 80df 	bgt.w	8006884 <_dtoa_r+0x66c>
 80066c6:	f040 826d 	bne.w	8006ba4 <_dtoa_r+0x98c>
 80066ca:	4b69      	ldr	r3, [pc, #420]	; (8006870 <_dtoa_r+0x658>)
 80066cc:	2200      	movs	r2, #0
 80066ce:	4640      	mov	r0, r8
 80066d0:	4649      	mov	r1, r9
 80066d2:	f7f9 ff99 	bl	8000608 <__aeabi_dmul>
 80066d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066da:	f7fa fa1b 	bl	8000b14 <__aeabi_dcmpge>
 80066de:	9e01      	ldr	r6, [sp, #4]
 80066e0:	4637      	mov	r7, r6
 80066e2:	2800      	cmp	r0, #0
 80066e4:	f040 8243 	bne.w	8006b6e <_dtoa_r+0x956>
 80066e8:	9d00      	ldr	r5, [sp, #0]
 80066ea:	2331      	movs	r3, #49	; 0x31
 80066ec:	f805 3b01 	strb.w	r3, [r5], #1
 80066f0:	f10a 0a01 	add.w	sl, sl, #1
 80066f4:	e23f      	b.n	8006b76 <_dtoa_r+0x95e>
 80066f6:	07f2      	lsls	r2, r6, #31
 80066f8:	d505      	bpl.n	8006706 <_dtoa_r+0x4ee>
 80066fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066fe:	f7f9 ff83 	bl	8000608 <__aeabi_dmul>
 8006702:	3501      	adds	r5, #1
 8006704:	2301      	movs	r3, #1
 8006706:	1076      	asrs	r6, r6, #1
 8006708:	3708      	adds	r7, #8
 800670a:	e76c      	b.n	80065e6 <_dtoa_r+0x3ce>
 800670c:	2502      	movs	r5, #2
 800670e:	e76f      	b.n	80065f0 <_dtoa_r+0x3d8>
 8006710:	9b01      	ldr	r3, [sp, #4]
 8006712:	f8cd a01c 	str.w	sl, [sp, #28]
 8006716:	930c      	str	r3, [sp, #48]	; 0x30
 8006718:	e78d      	b.n	8006636 <_dtoa_r+0x41e>
 800671a:	9900      	ldr	r1, [sp, #0]
 800671c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800671e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006720:	4b4e      	ldr	r3, [pc, #312]	; (800685c <_dtoa_r+0x644>)
 8006722:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006726:	4401      	add	r1, r0
 8006728:	9102      	str	r1, [sp, #8]
 800672a:	9908      	ldr	r1, [sp, #32]
 800672c:	eeb0 8a47 	vmov.f32	s16, s14
 8006730:	eef0 8a67 	vmov.f32	s17, s15
 8006734:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006738:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800673c:	2900      	cmp	r1, #0
 800673e:	d045      	beq.n	80067cc <_dtoa_r+0x5b4>
 8006740:	494c      	ldr	r1, [pc, #304]	; (8006874 <_dtoa_r+0x65c>)
 8006742:	2000      	movs	r0, #0
 8006744:	f7fa f88a 	bl	800085c <__aeabi_ddiv>
 8006748:	ec53 2b18 	vmov	r2, r3, d8
 800674c:	f7f9 fda4 	bl	8000298 <__aeabi_dsub>
 8006750:	9d00      	ldr	r5, [sp, #0]
 8006752:	ec41 0b18 	vmov	d8, r0, r1
 8006756:	4639      	mov	r1, r7
 8006758:	4630      	mov	r0, r6
 800675a:	f7fa fa05 	bl	8000b68 <__aeabi_d2iz>
 800675e:	900c      	str	r0, [sp, #48]	; 0x30
 8006760:	f7f9 fee8 	bl	8000534 <__aeabi_i2d>
 8006764:	4602      	mov	r2, r0
 8006766:	460b      	mov	r3, r1
 8006768:	4630      	mov	r0, r6
 800676a:	4639      	mov	r1, r7
 800676c:	f7f9 fd94 	bl	8000298 <__aeabi_dsub>
 8006770:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006772:	3330      	adds	r3, #48	; 0x30
 8006774:	f805 3b01 	strb.w	r3, [r5], #1
 8006778:	ec53 2b18 	vmov	r2, r3, d8
 800677c:	4606      	mov	r6, r0
 800677e:	460f      	mov	r7, r1
 8006780:	f7fa f9b4 	bl	8000aec <__aeabi_dcmplt>
 8006784:	2800      	cmp	r0, #0
 8006786:	d165      	bne.n	8006854 <_dtoa_r+0x63c>
 8006788:	4632      	mov	r2, r6
 800678a:	463b      	mov	r3, r7
 800678c:	4935      	ldr	r1, [pc, #212]	; (8006864 <_dtoa_r+0x64c>)
 800678e:	2000      	movs	r0, #0
 8006790:	f7f9 fd82 	bl	8000298 <__aeabi_dsub>
 8006794:	ec53 2b18 	vmov	r2, r3, d8
 8006798:	f7fa f9a8 	bl	8000aec <__aeabi_dcmplt>
 800679c:	2800      	cmp	r0, #0
 800679e:	f040 80b9 	bne.w	8006914 <_dtoa_r+0x6fc>
 80067a2:	9b02      	ldr	r3, [sp, #8]
 80067a4:	429d      	cmp	r5, r3
 80067a6:	f43f af75 	beq.w	8006694 <_dtoa_r+0x47c>
 80067aa:	4b2f      	ldr	r3, [pc, #188]	; (8006868 <_dtoa_r+0x650>)
 80067ac:	ec51 0b18 	vmov	r0, r1, d8
 80067b0:	2200      	movs	r2, #0
 80067b2:	f7f9 ff29 	bl	8000608 <__aeabi_dmul>
 80067b6:	4b2c      	ldr	r3, [pc, #176]	; (8006868 <_dtoa_r+0x650>)
 80067b8:	ec41 0b18 	vmov	d8, r0, r1
 80067bc:	2200      	movs	r2, #0
 80067be:	4630      	mov	r0, r6
 80067c0:	4639      	mov	r1, r7
 80067c2:	f7f9 ff21 	bl	8000608 <__aeabi_dmul>
 80067c6:	4606      	mov	r6, r0
 80067c8:	460f      	mov	r7, r1
 80067ca:	e7c4      	b.n	8006756 <_dtoa_r+0x53e>
 80067cc:	ec51 0b17 	vmov	r0, r1, d7
 80067d0:	f7f9 ff1a 	bl	8000608 <__aeabi_dmul>
 80067d4:	9b02      	ldr	r3, [sp, #8]
 80067d6:	9d00      	ldr	r5, [sp, #0]
 80067d8:	930c      	str	r3, [sp, #48]	; 0x30
 80067da:	ec41 0b18 	vmov	d8, r0, r1
 80067de:	4639      	mov	r1, r7
 80067e0:	4630      	mov	r0, r6
 80067e2:	f7fa f9c1 	bl	8000b68 <__aeabi_d2iz>
 80067e6:	9011      	str	r0, [sp, #68]	; 0x44
 80067e8:	f7f9 fea4 	bl	8000534 <__aeabi_i2d>
 80067ec:	4602      	mov	r2, r0
 80067ee:	460b      	mov	r3, r1
 80067f0:	4630      	mov	r0, r6
 80067f2:	4639      	mov	r1, r7
 80067f4:	f7f9 fd50 	bl	8000298 <__aeabi_dsub>
 80067f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80067fa:	3330      	adds	r3, #48	; 0x30
 80067fc:	f805 3b01 	strb.w	r3, [r5], #1
 8006800:	9b02      	ldr	r3, [sp, #8]
 8006802:	429d      	cmp	r5, r3
 8006804:	4606      	mov	r6, r0
 8006806:	460f      	mov	r7, r1
 8006808:	f04f 0200 	mov.w	r2, #0
 800680c:	d134      	bne.n	8006878 <_dtoa_r+0x660>
 800680e:	4b19      	ldr	r3, [pc, #100]	; (8006874 <_dtoa_r+0x65c>)
 8006810:	ec51 0b18 	vmov	r0, r1, d8
 8006814:	f7f9 fd42 	bl	800029c <__adddf3>
 8006818:	4602      	mov	r2, r0
 800681a:	460b      	mov	r3, r1
 800681c:	4630      	mov	r0, r6
 800681e:	4639      	mov	r1, r7
 8006820:	f7fa f982 	bl	8000b28 <__aeabi_dcmpgt>
 8006824:	2800      	cmp	r0, #0
 8006826:	d175      	bne.n	8006914 <_dtoa_r+0x6fc>
 8006828:	ec53 2b18 	vmov	r2, r3, d8
 800682c:	4911      	ldr	r1, [pc, #68]	; (8006874 <_dtoa_r+0x65c>)
 800682e:	2000      	movs	r0, #0
 8006830:	f7f9 fd32 	bl	8000298 <__aeabi_dsub>
 8006834:	4602      	mov	r2, r0
 8006836:	460b      	mov	r3, r1
 8006838:	4630      	mov	r0, r6
 800683a:	4639      	mov	r1, r7
 800683c:	f7fa f956 	bl	8000aec <__aeabi_dcmplt>
 8006840:	2800      	cmp	r0, #0
 8006842:	f43f af27 	beq.w	8006694 <_dtoa_r+0x47c>
 8006846:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006848:	1e6b      	subs	r3, r5, #1
 800684a:	930c      	str	r3, [sp, #48]	; 0x30
 800684c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006850:	2b30      	cmp	r3, #48	; 0x30
 8006852:	d0f8      	beq.n	8006846 <_dtoa_r+0x62e>
 8006854:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006858:	e04a      	b.n	80068f0 <_dtoa_r+0x6d8>
 800685a:	bf00      	nop
 800685c:	08008be0 	.word	0x08008be0
 8006860:	08008bb8 	.word	0x08008bb8
 8006864:	3ff00000 	.word	0x3ff00000
 8006868:	40240000 	.word	0x40240000
 800686c:	401c0000 	.word	0x401c0000
 8006870:	40140000 	.word	0x40140000
 8006874:	3fe00000 	.word	0x3fe00000
 8006878:	4baf      	ldr	r3, [pc, #700]	; (8006b38 <_dtoa_r+0x920>)
 800687a:	f7f9 fec5 	bl	8000608 <__aeabi_dmul>
 800687e:	4606      	mov	r6, r0
 8006880:	460f      	mov	r7, r1
 8006882:	e7ac      	b.n	80067de <_dtoa_r+0x5c6>
 8006884:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006888:	9d00      	ldr	r5, [sp, #0]
 800688a:	4642      	mov	r2, r8
 800688c:	464b      	mov	r3, r9
 800688e:	4630      	mov	r0, r6
 8006890:	4639      	mov	r1, r7
 8006892:	f7f9 ffe3 	bl	800085c <__aeabi_ddiv>
 8006896:	f7fa f967 	bl	8000b68 <__aeabi_d2iz>
 800689a:	9002      	str	r0, [sp, #8]
 800689c:	f7f9 fe4a 	bl	8000534 <__aeabi_i2d>
 80068a0:	4642      	mov	r2, r8
 80068a2:	464b      	mov	r3, r9
 80068a4:	f7f9 feb0 	bl	8000608 <__aeabi_dmul>
 80068a8:	4602      	mov	r2, r0
 80068aa:	460b      	mov	r3, r1
 80068ac:	4630      	mov	r0, r6
 80068ae:	4639      	mov	r1, r7
 80068b0:	f7f9 fcf2 	bl	8000298 <__aeabi_dsub>
 80068b4:	9e02      	ldr	r6, [sp, #8]
 80068b6:	9f01      	ldr	r7, [sp, #4]
 80068b8:	3630      	adds	r6, #48	; 0x30
 80068ba:	f805 6b01 	strb.w	r6, [r5], #1
 80068be:	9e00      	ldr	r6, [sp, #0]
 80068c0:	1bae      	subs	r6, r5, r6
 80068c2:	42b7      	cmp	r7, r6
 80068c4:	4602      	mov	r2, r0
 80068c6:	460b      	mov	r3, r1
 80068c8:	d137      	bne.n	800693a <_dtoa_r+0x722>
 80068ca:	f7f9 fce7 	bl	800029c <__adddf3>
 80068ce:	4642      	mov	r2, r8
 80068d0:	464b      	mov	r3, r9
 80068d2:	4606      	mov	r6, r0
 80068d4:	460f      	mov	r7, r1
 80068d6:	f7fa f927 	bl	8000b28 <__aeabi_dcmpgt>
 80068da:	b9c8      	cbnz	r0, 8006910 <_dtoa_r+0x6f8>
 80068dc:	4642      	mov	r2, r8
 80068de:	464b      	mov	r3, r9
 80068e0:	4630      	mov	r0, r6
 80068e2:	4639      	mov	r1, r7
 80068e4:	f7fa f8f8 	bl	8000ad8 <__aeabi_dcmpeq>
 80068e8:	b110      	cbz	r0, 80068f0 <_dtoa_r+0x6d8>
 80068ea:	9b02      	ldr	r3, [sp, #8]
 80068ec:	07d9      	lsls	r1, r3, #31
 80068ee:	d40f      	bmi.n	8006910 <_dtoa_r+0x6f8>
 80068f0:	4620      	mov	r0, r4
 80068f2:	4659      	mov	r1, fp
 80068f4:	f000 fad6 	bl	8006ea4 <_Bfree>
 80068f8:	2300      	movs	r3, #0
 80068fa:	702b      	strb	r3, [r5, #0]
 80068fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80068fe:	f10a 0001 	add.w	r0, sl, #1
 8006902:	6018      	str	r0, [r3, #0]
 8006904:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006906:	2b00      	cmp	r3, #0
 8006908:	f43f acd8 	beq.w	80062bc <_dtoa_r+0xa4>
 800690c:	601d      	str	r5, [r3, #0]
 800690e:	e4d5      	b.n	80062bc <_dtoa_r+0xa4>
 8006910:	f8cd a01c 	str.w	sl, [sp, #28]
 8006914:	462b      	mov	r3, r5
 8006916:	461d      	mov	r5, r3
 8006918:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800691c:	2a39      	cmp	r2, #57	; 0x39
 800691e:	d108      	bne.n	8006932 <_dtoa_r+0x71a>
 8006920:	9a00      	ldr	r2, [sp, #0]
 8006922:	429a      	cmp	r2, r3
 8006924:	d1f7      	bne.n	8006916 <_dtoa_r+0x6fe>
 8006926:	9a07      	ldr	r2, [sp, #28]
 8006928:	9900      	ldr	r1, [sp, #0]
 800692a:	3201      	adds	r2, #1
 800692c:	9207      	str	r2, [sp, #28]
 800692e:	2230      	movs	r2, #48	; 0x30
 8006930:	700a      	strb	r2, [r1, #0]
 8006932:	781a      	ldrb	r2, [r3, #0]
 8006934:	3201      	adds	r2, #1
 8006936:	701a      	strb	r2, [r3, #0]
 8006938:	e78c      	b.n	8006854 <_dtoa_r+0x63c>
 800693a:	4b7f      	ldr	r3, [pc, #508]	; (8006b38 <_dtoa_r+0x920>)
 800693c:	2200      	movs	r2, #0
 800693e:	f7f9 fe63 	bl	8000608 <__aeabi_dmul>
 8006942:	2200      	movs	r2, #0
 8006944:	2300      	movs	r3, #0
 8006946:	4606      	mov	r6, r0
 8006948:	460f      	mov	r7, r1
 800694a:	f7fa f8c5 	bl	8000ad8 <__aeabi_dcmpeq>
 800694e:	2800      	cmp	r0, #0
 8006950:	d09b      	beq.n	800688a <_dtoa_r+0x672>
 8006952:	e7cd      	b.n	80068f0 <_dtoa_r+0x6d8>
 8006954:	9a08      	ldr	r2, [sp, #32]
 8006956:	2a00      	cmp	r2, #0
 8006958:	f000 80c4 	beq.w	8006ae4 <_dtoa_r+0x8cc>
 800695c:	9a05      	ldr	r2, [sp, #20]
 800695e:	2a01      	cmp	r2, #1
 8006960:	f300 80a8 	bgt.w	8006ab4 <_dtoa_r+0x89c>
 8006964:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006966:	2a00      	cmp	r2, #0
 8006968:	f000 80a0 	beq.w	8006aac <_dtoa_r+0x894>
 800696c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006970:	9e06      	ldr	r6, [sp, #24]
 8006972:	4645      	mov	r5, r8
 8006974:	9a04      	ldr	r2, [sp, #16]
 8006976:	2101      	movs	r1, #1
 8006978:	441a      	add	r2, r3
 800697a:	4620      	mov	r0, r4
 800697c:	4498      	add	r8, r3
 800697e:	9204      	str	r2, [sp, #16]
 8006980:	f000 fb4c 	bl	800701c <__i2b>
 8006984:	4607      	mov	r7, r0
 8006986:	2d00      	cmp	r5, #0
 8006988:	dd0b      	ble.n	80069a2 <_dtoa_r+0x78a>
 800698a:	9b04      	ldr	r3, [sp, #16]
 800698c:	2b00      	cmp	r3, #0
 800698e:	dd08      	ble.n	80069a2 <_dtoa_r+0x78a>
 8006990:	42ab      	cmp	r3, r5
 8006992:	9a04      	ldr	r2, [sp, #16]
 8006994:	bfa8      	it	ge
 8006996:	462b      	movge	r3, r5
 8006998:	eba8 0803 	sub.w	r8, r8, r3
 800699c:	1aed      	subs	r5, r5, r3
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	9304      	str	r3, [sp, #16]
 80069a2:	9b06      	ldr	r3, [sp, #24]
 80069a4:	b1fb      	cbz	r3, 80069e6 <_dtoa_r+0x7ce>
 80069a6:	9b08      	ldr	r3, [sp, #32]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	f000 809f 	beq.w	8006aec <_dtoa_r+0x8d4>
 80069ae:	2e00      	cmp	r6, #0
 80069b0:	dd11      	ble.n	80069d6 <_dtoa_r+0x7be>
 80069b2:	4639      	mov	r1, r7
 80069b4:	4632      	mov	r2, r6
 80069b6:	4620      	mov	r0, r4
 80069b8:	f000 fbec 	bl	8007194 <__pow5mult>
 80069bc:	465a      	mov	r2, fp
 80069be:	4601      	mov	r1, r0
 80069c0:	4607      	mov	r7, r0
 80069c2:	4620      	mov	r0, r4
 80069c4:	f000 fb40 	bl	8007048 <__multiply>
 80069c8:	4659      	mov	r1, fp
 80069ca:	9007      	str	r0, [sp, #28]
 80069cc:	4620      	mov	r0, r4
 80069ce:	f000 fa69 	bl	8006ea4 <_Bfree>
 80069d2:	9b07      	ldr	r3, [sp, #28]
 80069d4:	469b      	mov	fp, r3
 80069d6:	9b06      	ldr	r3, [sp, #24]
 80069d8:	1b9a      	subs	r2, r3, r6
 80069da:	d004      	beq.n	80069e6 <_dtoa_r+0x7ce>
 80069dc:	4659      	mov	r1, fp
 80069de:	4620      	mov	r0, r4
 80069e0:	f000 fbd8 	bl	8007194 <__pow5mult>
 80069e4:	4683      	mov	fp, r0
 80069e6:	2101      	movs	r1, #1
 80069e8:	4620      	mov	r0, r4
 80069ea:	f000 fb17 	bl	800701c <__i2b>
 80069ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	4606      	mov	r6, r0
 80069f4:	dd7c      	ble.n	8006af0 <_dtoa_r+0x8d8>
 80069f6:	461a      	mov	r2, r3
 80069f8:	4601      	mov	r1, r0
 80069fa:	4620      	mov	r0, r4
 80069fc:	f000 fbca 	bl	8007194 <__pow5mult>
 8006a00:	9b05      	ldr	r3, [sp, #20]
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	4606      	mov	r6, r0
 8006a06:	dd76      	ble.n	8006af6 <_dtoa_r+0x8de>
 8006a08:	2300      	movs	r3, #0
 8006a0a:	9306      	str	r3, [sp, #24]
 8006a0c:	6933      	ldr	r3, [r6, #16]
 8006a0e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006a12:	6918      	ldr	r0, [r3, #16]
 8006a14:	f000 fab2 	bl	8006f7c <__hi0bits>
 8006a18:	f1c0 0020 	rsb	r0, r0, #32
 8006a1c:	9b04      	ldr	r3, [sp, #16]
 8006a1e:	4418      	add	r0, r3
 8006a20:	f010 001f 	ands.w	r0, r0, #31
 8006a24:	f000 8086 	beq.w	8006b34 <_dtoa_r+0x91c>
 8006a28:	f1c0 0320 	rsb	r3, r0, #32
 8006a2c:	2b04      	cmp	r3, #4
 8006a2e:	dd7f      	ble.n	8006b30 <_dtoa_r+0x918>
 8006a30:	f1c0 001c 	rsb	r0, r0, #28
 8006a34:	9b04      	ldr	r3, [sp, #16]
 8006a36:	4403      	add	r3, r0
 8006a38:	4480      	add	r8, r0
 8006a3a:	4405      	add	r5, r0
 8006a3c:	9304      	str	r3, [sp, #16]
 8006a3e:	f1b8 0f00 	cmp.w	r8, #0
 8006a42:	dd05      	ble.n	8006a50 <_dtoa_r+0x838>
 8006a44:	4659      	mov	r1, fp
 8006a46:	4642      	mov	r2, r8
 8006a48:	4620      	mov	r0, r4
 8006a4a:	f000 fbfd 	bl	8007248 <__lshift>
 8006a4e:	4683      	mov	fp, r0
 8006a50:	9b04      	ldr	r3, [sp, #16]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	dd05      	ble.n	8006a62 <_dtoa_r+0x84a>
 8006a56:	4631      	mov	r1, r6
 8006a58:	461a      	mov	r2, r3
 8006a5a:	4620      	mov	r0, r4
 8006a5c:	f000 fbf4 	bl	8007248 <__lshift>
 8006a60:	4606      	mov	r6, r0
 8006a62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d069      	beq.n	8006b3c <_dtoa_r+0x924>
 8006a68:	4631      	mov	r1, r6
 8006a6a:	4658      	mov	r0, fp
 8006a6c:	f000 fc58 	bl	8007320 <__mcmp>
 8006a70:	2800      	cmp	r0, #0
 8006a72:	da63      	bge.n	8006b3c <_dtoa_r+0x924>
 8006a74:	2300      	movs	r3, #0
 8006a76:	4659      	mov	r1, fp
 8006a78:	220a      	movs	r2, #10
 8006a7a:	4620      	mov	r0, r4
 8006a7c:	f000 fa34 	bl	8006ee8 <__multadd>
 8006a80:	9b08      	ldr	r3, [sp, #32]
 8006a82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a86:	4683      	mov	fp, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f000 818f 	beq.w	8006dac <_dtoa_r+0xb94>
 8006a8e:	4639      	mov	r1, r7
 8006a90:	2300      	movs	r3, #0
 8006a92:	220a      	movs	r2, #10
 8006a94:	4620      	mov	r0, r4
 8006a96:	f000 fa27 	bl	8006ee8 <__multadd>
 8006a9a:	f1b9 0f00 	cmp.w	r9, #0
 8006a9e:	4607      	mov	r7, r0
 8006aa0:	f300 808e 	bgt.w	8006bc0 <_dtoa_r+0x9a8>
 8006aa4:	9b05      	ldr	r3, [sp, #20]
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	dc50      	bgt.n	8006b4c <_dtoa_r+0x934>
 8006aaa:	e089      	b.n	8006bc0 <_dtoa_r+0x9a8>
 8006aac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006aae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006ab2:	e75d      	b.n	8006970 <_dtoa_r+0x758>
 8006ab4:	9b01      	ldr	r3, [sp, #4]
 8006ab6:	1e5e      	subs	r6, r3, #1
 8006ab8:	9b06      	ldr	r3, [sp, #24]
 8006aba:	42b3      	cmp	r3, r6
 8006abc:	bfbf      	itttt	lt
 8006abe:	9b06      	ldrlt	r3, [sp, #24]
 8006ac0:	9606      	strlt	r6, [sp, #24]
 8006ac2:	1af2      	sublt	r2, r6, r3
 8006ac4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006ac6:	bfb6      	itet	lt
 8006ac8:	189b      	addlt	r3, r3, r2
 8006aca:	1b9e      	subge	r6, r3, r6
 8006acc:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006ace:	9b01      	ldr	r3, [sp, #4]
 8006ad0:	bfb8      	it	lt
 8006ad2:	2600      	movlt	r6, #0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	bfb5      	itete	lt
 8006ad8:	eba8 0503 	sublt.w	r5, r8, r3
 8006adc:	9b01      	ldrge	r3, [sp, #4]
 8006ade:	2300      	movlt	r3, #0
 8006ae0:	4645      	movge	r5, r8
 8006ae2:	e747      	b.n	8006974 <_dtoa_r+0x75c>
 8006ae4:	9e06      	ldr	r6, [sp, #24]
 8006ae6:	9f08      	ldr	r7, [sp, #32]
 8006ae8:	4645      	mov	r5, r8
 8006aea:	e74c      	b.n	8006986 <_dtoa_r+0x76e>
 8006aec:	9a06      	ldr	r2, [sp, #24]
 8006aee:	e775      	b.n	80069dc <_dtoa_r+0x7c4>
 8006af0:	9b05      	ldr	r3, [sp, #20]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	dc18      	bgt.n	8006b28 <_dtoa_r+0x910>
 8006af6:	9b02      	ldr	r3, [sp, #8]
 8006af8:	b9b3      	cbnz	r3, 8006b28 <_dtoa_r+0x910>
 8006afa:	9b03      	ldr	r3, [sp, #12]
 8006afc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b00:	b9a3      	cbnz	r3, 8006b2c <_dtoa_r+0x914>
 8006b02:	9b03      	ldr	r3, [sp, #12]
 8006b04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b08:	0d1b      	lsrs	r3, r3, #20
 8006b0a:	051b      	lsls	r3, r3, #20
 8006b0c:	b12b      	cbz	r3, 8006b1a <_dtoa_r+0x902>
 8006b0e:	9b04      	ldr	r3, [sp, #16]
 8006b10:	3301      	adds	r3, #1
 8006b12:	9304      	str	r3, [sp, #16]
 8006b14:	f108 0801 	add.w	r8, r8, #1
 8006b18:	2301      	movs	r3, #1
 8006b1a:	9306      	str	r3, [sp, #24]
 8006b1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f47f af74 	bne.w	8006a0c <_dtoa_r+0x7f4>
 8006b24:	2001      	movs	r0, #1
 8006b26:	e779      	b.n	8006a1c <_dtoa_r+0x804>
 8006b28:	2300      	movs	r3, #0
 8006b2a:	e7f6      	b.n	8006b1a <_dtoa_r+0x902>
 8006b2c:	9b02      	ldr	r3, [sp, #8]
 8006b2e:	e7f4      	b.n	8006b1a <_dtoa_r+0x902>
 8006b30:	d085      	beq.n	8006a3e <_dtoa_r+0x826>
 8006b32:	4618      	mov	r0, r3
 8006b34:	301c      	adds	r0, #28
 8006b36:	e77d      	b.n	8006a34 <_dtoa_r+0x81c>
 8006b38:	40240000 	.word	0x40240000
 8006b3c:	9b01      	ldr	r3, [sp, #4]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	dc38      	bgt.n	8006bb4 <_dtoa_r+0x99c>
 8006b42:	9b05      	ldr	r3, [sp, #20]
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	dd35      	ble.n	8006bb4 <_dtoa_r+0x99c>
 8006b48:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006b4c:	f1b9 0f00 	cmp.w	r9, #0
 8006b50:	d10d      	bne.n	8006b6e <_dtoa_r+0x956>
 8006b52:	4631      	mov	r1, r6
 8006b54:	464b      	mov	r3, r9
 8006b56:	2205      	movs	r2, #5
 8006b58:	4620      	mov	r0, r4
 8006b5a:	f000 f9c5 	bl	8006ee8 <__multadd>
 8006b5e:	4601      	mov	r1, r0
 8006b60:	4606      	mov	r6, r0
 8006b62:	4658      	mov	r0, fp
 8006b64:	f000 fbdc 	bl	8007320 <__mcmp>
 8006b68:	2800      	cmp	r0, #0
 8006b6a:	f73f adbd 	bgt.w	80066e8 <_dtoa_r+0x4d0>
 8006b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b70:	9d00      	ldr	r5, [sp, #0]
 8006b72:	ea6f 0a03 	mvn.w	sl, r3
 8006b76:	f04f 0800 	mov.w	r8, #0
 8006b7a:	4631      	mov	r1, r6
 8006b7c:	4620      	mov	r0, r4
 8006b7e:	f000 f991 	bl	8006ea4 <_Bfree>
 8006b82:	2f00      	cmp	r7, #0
 8006b84:	f43f aeb4 	beq.w	80068f0 <_dtoa_r+0x6d8>
 8006b88:	f1b8 0f00 	cmp.w	r8, #0
 8006b8c:	d005      	beq.n	8006b9a <_dtoa_r+0x982>
 8006b8e:	45b8      	cmp	r8, r7
 8006b90:	d003      	beq.n	8006b9a <_dtoa_r+0x982>
 8006b92:	4641      	mov	r1, r8
 8006b94:	4620      	mov	r0, r4
 8006b96:	f000 f985 	bl	8006ea4 <_Bfree>
 8006b9a:	4639      	mov	r1, r7
 8006b9c:	4620      	mov	r0, r4
 8006b9e:	f000 f981 	bl	8006ea4 <_Bfree>
 8006ba2:	e6a5      	b.n	80068f0 <_dtoa_r+0x6d8>
 8006ba4:	2600      	movs	r6, #0
 8006ba6:	4637      	mov	r7, r6
 8006ba8:	e7e1      	b.n	8006b6e <_dtoa_r+0x956>
 8006baa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006bac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006bb0:	4637      	mov	r7, r6
 8006bb2:	e599      	b.n	80066e8 <_dtoa_r+0x4d0>
 8006bb4:	9b08      	ldr	r3, [sp, #32]
 8006bb6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	f000 80fd 	beq.w	8006dba <_dtoa_r+0xba2>
 8006bc0:	2d00      	cmp	r5, #0
 8006bc2:	dd05      	ble.n	8006bd0 <_dtoa_r+0x9b8>
 8006bc4:	4639      	mov	r1, r7
 8006bc6:	462a      	mov	r2, r5
 8006bc8:	4620      	mov	r0, r4
 8006bca:	f000 fb3d 	bl	8007248 <__lshift>
 8006bce:	4607      	mov	r7, r0
 8006bd0:	9b06      	ldr	r3, [sp, #24]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d05c      	beq.n	8006c90 <_dtoa_r+0xa78>
 8006bd6:	6879      	ldr	r1, [r7, #4]
 8006bd8:	4620      	mov	r0, r4
 8006bda:	f000 f923 	bl	8006e24 <_Balloc>
 8006bde:	4605      	mov	r5, r0
 8006be0:	b928      	cbnz	r0, 8006bee <_dtoa_r+0x9d6>
 8006be2:	4b80      	ldr	r3, [pc, #512]	; (8006de4 <_dtoa_r+0xbcc>)
 8006be4:	4602      	mov	r2, r0
 8006be6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006bea:	f7ff bb2e 	b.w	800624a <_dtoa_r+0x32>
 8006bee:	693a      	ldr	r2, [r7, #16]
 8006bf0:	3202      	adds	r2, #2
 8006bf2:	0092      	lsls	r2, r2, #2
 8006bf4:	f107 010c 	add.w	r1, r7, #12
 8006bf8:	300c      	adds	r0, #12
 8006bfa:	f000 f905 	bl	8006e08 <memcpy>
 8006bfe:	2201      	movs	r2, #1
 8006c00:	4629      	mov	r1, r5
 8006c02:	4620      	mov	r0, r4
 8006c04:	f000 fb20 	bl	8007248 <__lshift>
 8006c08:	9b00      	ldr	r3, [sp, #0]
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	9301      	str	r3, [sp, #4]
 8006c0e:	9b00      	ldr	r3, [sp, #0]
 8006c10:	444b      	add	r3, r9
 8006c12:	9307      	str	r3, [sp, #28]
 8006c14:	9b02      	ldr	r3, [sp, #8]
 8006c16:	f003 0301 	and.w	r3, r3, #1
 8006c1a:	46b8      	mov	r8, r7
 8006c1c:	9306      	str	r3, [sp, #24]
 8006c1e:	4607      	mov	r7, r0
 8006c20:	9b01      	ldr	r3, [sp, #4]
 8006c22:	4631      	mov	r1, r6
 8006c24:	3b01      	subs	r3, #1
 8006c26:	4658      	mov	r0, fp
 8006c28:	9302      	str	r3, [sp, #8]
 8006c2a:	f7ff fa67 	bl	80060fc <quorem>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	3330      	adds	r3, #48	; 0x30
 8006c32:	9004      	str	r0, [sp, #16]
 8006c34:	4641      	mov	r1, r8
 8006c36:	4658      	mov	r0, fp
 8006c38:	9308      	str	r3, [sp, #32]
 8006c3a:	f000 fb71 	bl	8007320 <__mcmp>
 8006c3e:	463a      	mov	r2, r7
 8006c40:	4681      	mov	r9, r0
 8006c42:	4631      	mov	r1, r6
 8006c44:	4620      	mov	r0, r4
 8006c46:	f000 fb87 	bl	8007358 <__mdiff>
 8006c4a:	68c2      	ldr	r2, [r0, #12]
 8006c4c:	9b08      	ldr	r3, [sp, #32]
 8006c4e:	4605      	mov	r5, r0
 8006c50:	bb02      	cbnz	r2, 8006c94 <_dtoa_r+0xa7c>
 8006c52:	4601      	mov	r1, r0
 8006c54:	4658      	mov	r0, fp
 8006c56:	f000 fb63 	bl	8007320 <__mcmp>
 8006c5a:	9b08      	ldr	r3, [sp, #32]
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	4629      	mov	r1, r5
 8006c60:	4620      	mov	r0, r4
 8006c62:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006c66:	f000 f91d 	bl	8006ea4 <_Bfree>
 8006c6a:	9b05      	ldr	r3, [sp, #20]
 8006c6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c6e:	9d01      	ldr	r5, [sp, #4]
 8006c70:	ea43 0102 	orr.w	r1, r3, r2
 8006c74:	9b06      	ldr	r3, [sp, #24]
 8006c76:	430b      	orrs	r3, r1
 8006c78:	9b08      	ldr	r3, [sp, #32]
 8006c7a:	d10d      	bne.n	8006c98 <_dtoa_r+0xa80>
 8006c7c:	2b39      	cmp	r3, #57	; 0x39
 8006c7e:	d029      	beq.n	8006cd4 <_dtoa_r+0xabc>
 8006c80:	f1b9 0f00 	cmp.w	r9, #0
 8006c84:	dd01      	ble.n	8006c8a <_dtoa_r+0xa72>
 8006c86:	9b04      	ldr	r3, [sp, #16]
 8006c88:	3331      	adds	r3, #49	; 0x31
 8006c8a:	9a02      	ldr	r2, [sp, #8]
 8006c8c:	7013      	strb	r3, [r2, #0]
 8006c8e:	e774      	b.n	8006b7a <_dtoa_r+0x962>
 8006c90:	4638      	mov	r0, r7
 8006c92:	e7b9      	b.n	8006c08 <_dtoa_r+0x9f0>
 8006c94:	2201      	movs	r2, #1
 8006c96:	e7e2      	b.n	8006c5e <_dtoa_r+0xa46>
 8006c98:	f1b9 0f00 	cmp.w	r9, #0
 8006c9c:	db06      	blt.n	8006cac <_dtoa_r+0xa94>
 8006c9e:	9905      	ldr	r1, [sp, #20]
 8006ca0:	ea41 0909 	orr.w	r9, r1, r9
 8006ca4:	9906      	ldr	r1, [sp, #24]
 8006ca6:	ea59 0101 	orrs.w	r1, r9, r1
 8006caa:	d120      	bne.n	8006cee <_dtoa_r+0xad6>
 8006cac:	2a00      	cmp	r2, #0
 8006cae:	ddec      	ble.n	8006c8a <_dtoa_r+0xa72>
 8006cb0:	4659      	mov	r1, fp
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	4620      	mov	r0, r4
 8006cb6:	9301      	str	r3, [sp, #4]
 8006cb8:	f000 fac6 	bl	8007248 <__lshift>
 8006cbc:	4631      	mov	r1, r6
 8006cbe:	4683      	mov	fp, r0
 8006cc0:	f000 fb2e 	bl	8007320 <__mcmp>
 8006cc4:	2800      	cmp	r0, #0
 8006cc6:	9b01      	ldr	r3, [sp, #4]
 8006cc8:	dc02      	bgt.n	8006cd0 <_dtoa_r+0xab8>
 8006cca:	d1de      	bne.n	8006c8a <_dtoa_r+0xa72>
 8006ccc:	07da      	lsls	r2, r3, #31
 8006cce:	d5dc      	bpl.n	8006c8a <_dtoa_r+0xa72>
 8006cd0:	2b39      	cmp	r3, #57	; 0x39
 8006cd2:	d1d8      	bne.n	8006c86 <_dtoa_r+0xa6e>
 8006cd4:	9a02      	ldr	r2, [sp, #8]
 8006cd6:	2339      	movs	r3, #57	; 0x39
 8006cd8:	7013      	strb	r3, [r2, #0]
 8006cda:	462b      	mov	r3, r5
 8006cdc:	461d      	mov	r5, r3
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006ce4:	2a39      	cmp	r2, #57	; 0x39
 8006ce6:	d050      	beq.n	8006d8a <_dtoa_r+0xb72>
 8006ce8:	3201      	adds	r2, #1
 8006cea:	701a      	strb	r2, [r3, #0]
 8006cec:	e745      	b.n	8006b7a <_dtoa_r+0x962>
 8006cee:	2a00      	cmp	r2, #0
 8006cf0:	dd03      	ble.n	8006cfa <_dtoa_r+0xae2>
 8006cf2:	2b39      	cmp	r3, #57	; 0x39
 8006cf4:	d0ee      	beq.n	8006cd4 <_dtoa_r+0xabc>
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	e7c7      	b.n	8006c8a <_dtoa_r+0xa72>
 8006cfa:	9a01      	ldr	r2, [sp, #4]
 8006cfc:	9907      	ldr	r1, [sp, #28]
 8006cfe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006d02:	428a      	cmp	r2, r1
 8006d04:	d02a      	beq.n	8006d5c <_dtoa_r+0xb44>
 8006d06:	4659      	mov	r1, fp
 8006d08:	2300      	movs	r3, #0
 8006d0a:	220a      	movs	r2, #10
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	f000 f8eb 	bl	8006ee8 <__multadd>
 8006d12:	45b8      	cmp	r8, r7
 8006d14:	4683      	mov	fp, r0
 8006d16:	f04f 0300 	mov.w	r3, #0
 8006d1a:	f04f 020a 	mov.w	r2, #10
 8006d1e:	4641      	mov	r1, r8
 8006d20:	4620      	mov	r0, r4
 8006d22:	d107      	bne.n	8006d34 <_dtoa_r+0xb1c>
 8006d24:	f000 f8e0 	bl	8006ee8 <__multadd>
 8006d28:	4680      	mov	r8, r0
 8006d2a:	4607      	mov	r7, r0
 8006d2c:	9b01      	ldr	r3, [sp, #4]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	9301      	str	r3, [sp, #4]
 8006d32:	e775      	b.n	8006c20 <_dtoa_r+0xa08>
 8006d34:	f000 f8d8 	bl	8006ee8 <__multadd>
 8006d38:	4639      	mov	r1, r7
 8006d3a:	4680      	mov	r8, r0
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	220a      	movs	r2, #10
 8006d40:	4620      	mov	r0, r4
 8006d42:	f000 f8d1 	bl	8006ee8 <__multadd>
 8006d46:	4607      	mov	r7, r0
 8006d48:	e7f0      	b.n	8006d2c <_dtoa_r+0xb14>
 8006d4a:	f1b9 0f00 	cmp.w	r9, #0
 8006d4e:	9a00      	ldr	r2, [sp, #0]
 8006d50:	bfcc      	ite	gt
 8006d52:	464d      	movgt	r5, r9
 8006d54:	2501      	movle	r5, #1
 8006d56:	4415      	add	r5, r2
 8006d58:	f04f 0800 	mov.w	r8, #0
 8006d5c:	4659      	mov	r1, fp
 8006d5e:	2201      	movs	r2, #1
 8006d60:	4620      	mov	r0, r4
 8006d62:	9301      	str	r3, [sp, #4]
 8006d64:	f000 fa70 	bl	8007248 <__lshift>
 8006d68:	4631      	mov	r1, r6
 8006d6a:	4683      	mov	fp, r0
 8006d6c:	f000 fad8 	bl	8007320 <__mcmp>
 8006d70:	2800      	cmp	r0, #0
 8006d72:	dcb2      	bgt.n	8006cda <_dtoa_r+0xac2>
 8006d74:	d102      	bne.n	8006d7c <_dtoa_r+0xb64>
 8006d76:	9b01      	ldr	r3, [sp, #4]
 8006d78:	07db      	lsls	r3, r3, #31
 8006d7a:	d4ae      	bmi.n	8006cda <_dtoa_r+0xac2>
 8006d7c:	462b      	mov	r3, r5
 8006d7e:	461d      	mov	r5, r3
 8006d80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d84:	2a30      	cmp	r2, #48	; 0x30
 8006d86:	d0fa      	beq.n	8006d7e <_dtoa_r+0xb66>
 8006d88:	e6f7      	b.n	8006b7a <_dtoa_r+0x962>
 8006d8a:	9a00      	ldr	r2, [sp, #0]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d1a5      	bne.n	8006cdc <_dtoa_r+0xac4>
 8006d90:	f10a 0a01 	add.w	sl, sl, #1
 8006d94:	2331      	movs	r3, #49	; 0x31
 8006d96:	e779      	b.n	8006c8c <_dtoa_r+0xa74>
 8006d98:	4b13      	ldr	r3, [pc, #76]	; (8006de8 <_dtoa_r+0xbd0>)
 8006d9a:	f7ff baaf 	b.w	80062fc <_dtoa_r+0xe4>
 8006d9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f47f aa86 	bne.w	80062b2 <_dtoa_r+0x9a>
 8006da6:	4b11      	ldr	r3, [pc, #68]	; (8006dec <_dtoa_r+0xbd4>)
 8006da8:	f7ff baa8 	b.w	80062fc <_dtoa_r+0xe4>
 8006dac:	f1b9 0f00 	cmp.w	r9, #0
 8006db0:	dc03      	bgt.n	8006dba <_dtoa_r+0xba2>
 8006db2:	9b05      	ldr	r3, [sp, #20]
 8006db4:	2b02      	cmp	r3, #2
 8006db6:	f73f aec9 	bgt.w	8006b4c <_dtoa_r+0x934>
 8006dba:	9d00      	ldr	r5, [sp, #0]
 8006dbc:	4631      	mov	r1, r6
 8006dbe:	4658      	mov	r0, fp
 8006dc0:	f7ff f99c 	bl	80060fc <quorem>
 8006dc4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006dc8:	f805 3b01 	strb.w	r3, [r5], #1
 8006dcc:	9a00      	ldr	r2, [sp, #0]
 8006dce:	1aaa      	subs	r2, r5, r2
 8006dd0:	4591      	cmp	r9, r2
 8006dd2:	ddba      	ble.n	8006d4a <_dtoa_r+0xb32>
 8006dd4:	4659      	mov	r1, fp
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	220a      	movs	r2, #10
 8006dda:	4620      	mov	r0, r4
 8006ddc:	f000 f884 	bl	8006ee8 <__multadd>
 8006de0:	4683      	mov	fp, r0
 8006de2:	e7eb      	b.n	8006dbc <_dtoa_r+0xba4>
 8006de4:	08008b47 	.word	0x08008b47
 8006de8:	08008aa0 	.word	0x08008aa0
 8006dec:	08008ac4 	.word	0x08008ac4

08006df0 <_localeconv_r>:
 8006df0:	4800      	ldr	r0, [pc, #0]	; (8006df4 <_localeconv_r+0x4>)
 8006df2:	4770      	bx	lr
 8006df4:	20000168 	.word	0x20000168

08006df8 <malloc>:
 8006df8:	4b02      	ldr	r3, [pc, #8]	; (8006e04 <malloc+0xc>)
 8006dfa:	4601      	mov	r1, r0
 8006dfc:	6818      	ldr	r0, [r3, #0]
 8006dfe:	f000 bbef 	b.w	80075e0 <_malloc_r>
 8006e02:	bf00      	nop
 8006e04:	20000014 	.word	0x20000014

08006e08 <memcpy>:
 8006e08:	440a      	add	r2, r1
 8006e0a:	4291      	cmp	r1, r2
 8006e0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e10:	d100      	bne.n	8006e14 <memcpy+0xc>
 8006e12:	4770      	bx	lr
 8006e14:	b510      	push	{r4, lr}
 8006e16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e1e:	4291      	cmp	r1, r2
 8006e20:	d1f9      	bne.n	8006e16 <memcpy+0xe>
 8006e22:	bd10      	pop	{r4, pc}

08006e24 <_Balloc>:
 8006e24:	b570      	push	{r4, r5, r6, lr}
 8006e26:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006e28:	4604      	mov	r4, r0
 8006e2a:	460d      	mov	r5, r1
 8006e2c:	b976      	cbnz	r6, 8006e4c <_Balloc+0x28>
 8006e2e:	2010      	movs	r0, #16
 8006e30:	f7ff ffe2 	bl	8006df8 <malloc>
 8006e34:	4602      	mov	r2, r0
 8006e36:	6260      	str	r0, [r4, #36]	; 0x24
 8006e38:	b920      	cbnz	r0, 8006e44 <_Balloc+0x20>
 8006e3a:	4b18      	ldr	r3, [pc, #96]	; (8006e9c <_Balloc+0x78>)
 8006e3c:	4818      	ldr	r0, [pc, #96]	; (8006ea0 <_Balloc+0x7c>)
 8006e3e:	2166      	movs	r1, #102	; 0x66
 8006e40:	f000 fd94 	bl	800796c <__assert_func>
 8006e44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e48:	6006      	str	r6, [r0, #0]
 8006e4a:	60c6      	str	r6, [r0, #12]
 8006e4c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006e4e:	68f3      	ldr	r3, [r6, #12]
 8006e50:	b183      	cbz	r3, 8006e74 <_Balloc+0x50>
 8006e52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006e5a:	b9b8      	cbnz	r0, 8006e8c <_Balloc+0x68>
 8006e5c:	2101      	movs	r1, #1
 8006e5e:	fa01 f605 	lsl.w	r6, r1, r5
 8006e62:	1d72      	adds	r2, r6, #5
 8006e64:	0092      	lsls	r2, r2, #2
 8006e66:	4620      	mov	r0, r4
 8006e68:	f000 fb5a 	bl	8007520 <_calloc_r>
 8006e6c:	b160      	cbz	r0, 8006e88 <_Balloc+0x64>
 8006e6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006e72:	e00e      	b.n	8006e92 <_Balloc+0x6e>
 8006e74:	2221      	movs	r2, #33	; 0x21
 8006e76:	2104      	movs	r1, #4
 8006e78:	4620      	mov	r0, r4
 8006e7a:	f000 fb51 	bl	8007520 <_calloc_r>
 8006e7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e80:	60f0      	str	r0, [r6, #12]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d1e4      	bne.n	8006e52 <_Balloc+0x2e>
 8006e88:	2000      	movs	r0, #0
 8006e8a:	bd70      	pop	{r4, r5, r6, pc}
 8006e8c:	6802      	ldr	r2, [r0, #0]
 8006e8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006e92:	2300      	movs	r3, #0
 8006e94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006e98:	e7f7      	b.n	8006e8a <_Balloc+0x66>
 8006e9a:	bf00      	nop
 8006e9c:	08008ad1 	.word	0x08008ad1
 8006ea0:	08008b58 	.word	0x08008b58

08006ea4 <_Bfree>:
 8006ea4:	b570      	push	{r4, r5, r6, lr}
 8006ea6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006ea8:	4605      	mov	r5, r0
 8006eaa:	460c      	mov	r4, r1
 8006eac:	b976      	cbnz	r6, 8006ecc <_Bfree+0x28>
 8006eae:	2010      	movs	r0, #16
 8006eb0:	f7ff ffa2 	bl	8006df8 <malloc>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	6268      	str	r0, [r5, #36]	; 0x24
 8006eb8:	b920      	cbnz	r0, 8006ec4 <_Bfree+0x20>
 8006eba:	4b09      	ldr	r3, [pc, #36]	; (8006ee0 <_Bfree+0x3c>)
 8006ebc:	4809      	ldr	r0, [pc, #36]	; (8006ee4 <_Bfree+0x40>)
 8006ebe:	218a      	movs	r1, #138	; 0x8a
 8006ec0:	f000 fd54 	bl	800796c <__assert_func>
 8006ec4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ec8:	6006      	str	r6, [r0, #0]
 8006eca:	60c6      	str	r6, [r0, #12]
 8006ecc:	b13c      	cbz	r4, 8006ede <_Bfree+0x3a>
 8006ece:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006ed0:	6862      	ldr	r2, [r4, #4]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ed8:	6021      	str	r1, [r4, #0]
 8006eda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006ede:	bd70      	pop	{r4, r5, r6, pc}
 8006ee0:	08008ad1 	.word	0x08008ad1
 8006ee4:	08008b58 	.word	0x08008b58

08006ee8 <__multadd>:
 8006ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eec:	690e      	ldr	r6, [r1, #16]
 8006eee:	4607      	mov	r7, r0
 8006ef0:	4698      	mov	r8, r3
 8006ef2:	460c      	mov	r4, r1
 8006ef4:	f101 0014 	add.w	r0, r1, #20
 8006ef8:	2300      	movs	r3, #0
 8006efa:	6805      	ldr	r5, [r0, #0]
 8006efc:	b2a9      	uxth	r1, r5
 8006efe:	fb02 8101 	mla	r1, r2, r1, r8
 8006f02:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006f06:	0c2d      	lsrs	r5, r5, #16
 8006f08:	fb02 c505 	mla	r5, r2, r5, ip
 8006f0c:	b289      	uxth	r1, r1
 8006f0e:	3301      	adds	r3, #1
 8006f10:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006f14:	429e      	cmp	r6, r3
 8006f16:	f840 1b04 	str.w	r1, [r0], #4
 8006f1a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006f1e:	dcec      	bgt.n	8006efa <__multadd+0x12>
 8006f20:	f1b8 0f00 	cmp.w	r8, #0
 8006f24:	d022      	beq.n	8006f6c <__multadd+0x84>
 8006f26:	68a3      	ldr	r3, [r4, #8]
 8006f28:	42b3      	cmp	r3, r6
 8006f2a:	dc19      	bgt.n	8006f60 <__multadd+0x78>
 8006f2c:	6861      	ldr	r1, [r4, #4]
 8006f2e:	4638      	mov	r0, r7
 8006f30:	3101      	adds	r1, #1
 8006f32:	f7ff ff77 	bl	8006e24 <_Balloc>
 8006f36:	4605      	mov	r5, r0
 8006f38:	b928      	cbnz	r0, 8006f46 <__multadd+0x5e>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	4b0d      	ldr	r3, [pc, #52]	; (8006f74 <__multadd+0x8c>)
 8006f3e:	480e      	ldr	r0, [pc, #56]	; (8006f78 <__multadd+0x90>)
 8006f40:	21b5      	movs	r1, #181	; 0xb5
 8006f42:	f000 fd13 	bl	800796c <__assert_func>
 8006f46:	6922      	ldr	r2, [r4, #16]
 8006f48:	3202      	adds	r2, #2
 8006f4a:	f104 010c 	add.w	r1, r4, #12
 8006f4e:	0092      	lsls	r2, r2, #2
 8006f50:	300c      	adds	r0, #12
 8006f52:	f7ff ff59 	bl	8006e08 <memcpy>
 8006f56:	4621      	mov	r1, r4
 8006f58:	4638      	mov	r0, r7
 8006f5a:	f7ff ffa3 	bl	8006ea4 <_Bfree>
 8006f5e:	462c      	mov	r4, r5
 8006f60:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006f64:	3601      	adds	r6, #1
 8006f66:	f8c3 8014 	str.w	r8, [r3, #20]
 8006f6a:	6126      	str	r6, [r4, #16]
 8006f6c:	4620      	mov	r0, r4
 8006f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f72:	bf00      	nop
 8006f74:	08008b47 	.word	0x08008b47
 8006f78:	08008b58 	.word	0x08008b58

08006f7c <__hi0bits>:
 8006f7c:	0c03      	lsrs	r3, r0, #16
 8006f7e:	041b      	lsls	r3, r3, #16
 8006f80:	b9d3      	cbnz	r3, 8006fb8 <__hi0bits+0x3c>
 8006f82:	0400      	lsls	r0, r0, #16
 8006f84:	2310      	movs	r3, #16
 8006f86:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006f8a:	bf04      	itt	eq
 8006f8c:	0200      	lsleq	r0, r0, #8
 8006f8e:	3308      	addeq	r3, #8
 8006f90:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006f94:	bf04      	itt	eq
 8006f96:	0100      	lsleq	r0, r0, #4
 8006f98:	3304      	addeq	r3, #4
 8006f9a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006f9e:	bf04      	itt	eq
 8006fa0:	0080      	lsleq	r0, r0, #2
 8006fa2:	3302      	addeq	r3, #2
 8006fa4:	2800      	cmp	r0, #0
 8006fa6:	db05      	blt.n	8006fb4 <__hi0bits+0x38>
 8006fa8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006fac:	f103 0301 	add.w	r3, r3, #1
 8006fb0:	bf08      	it	eq
 8006fb2:	2320      	moveq	r3, #32
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	4770      	bx	lr
 8006fb8:	2300      	movs	r3, #0
 8006fba:	e7e4      	b.n	8006f86 <__hi0bits+0xa>

08006fbc <__lo0bits>:
 8006fbc:	6803      	ldr	r3, [r0, #0]
 8006fbe:	f013 0207 	ands.w	r2, r3, #7
 8006fc2:	4601      	mov	r1, r0
 8006fc4:	d00b      	beq.n	8006fde <__lo0bits+0x22>
 8006fc6:	07da      	lsls	r2, r3, #31
 8006fc8:	d424      	bmi.n	8007014 <__lo0bits+0x58>
 8006fca:	0798      	lsls	r0, r3, #30
 8006fcc:	bf49      	itett	mi
 8006fce:	085b      	lsrmi	r3, r3, #1
 8006fd0:	089b      	lsrpl	r3, r3, #2
 8006fd2:	2001      	movmi	r0, #1
 8006fd4:	600b      	strmi	r3, [r1, #0]
 8006fd6:	bf5c      	itt	pl
 8006fd8:	600b      	strpl	r3, [r1, #0]
 8006fda:	2002      	movpl	r0, #2
 8006fdc:	4770      	bx	lr
 8006fde:	b298      	uxth	r0, r3
 8006fe0:	b9b0      	cbnz	r0, 8007010 <__lo0bits+0x54>
 8006fe2:	0c1b      	lsrs	r3, r3, #16
 8006fe4:	2010      	movs	r0, #16
 8006fe6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006fea:	bf04      	itt	eq
 8006fec:	0a1b      	lsreq	r3, r3, #8
 8006fee:	3008      	addeq	r0, #8
 8006ff0:	071a      	lsls	r2, r3, #28
 8006ff2:	bf04      	itt	eq
 8006ff4:	091b      	lsreq	r3, r3, #4
 8006ff6:	3004      	addeq	r0, #4
 8006ff8:	079a      	lsls	r2, r3, #30
 8006ffa:	bf04      	itt	eq
 8006ffc:	089b      	lsreq	r3, r3, #2
 8006ffe:	3002      	addeq	r0, #2
 8007000:	07da      	lsls	r2, r3, #31
 8007002:	d403      	bmi.n	800700c <__lo0bits+0x50>
 8007004:	085b      	lsrs	r3, r3, #1
 8007006:	f100 0001 	add.w	r0, r0, #1
 800700a:	d005      	beq.n	8007018 <__lo0bits+0x5c>
 800700c:	600b      	str	r3, [r1, #0]
 800700e:	4770      	bx	lr
 8007010:	4610      	mov	r0, r2
 8007012:	e7e8      	b.n	8006fe6 <__lo0bits+0x2a>
 8007014:	2000      	movs	r0, #0
 8007016:	4770      	bx	lr
 8007018:	2020      	movs	r0, #32
 800701a:	4770      	bx	lr

0800701c <__i2b>:
 800701c:	b510      	push	{r4, lr}
 800701e:	460c      	mov	r4, r1
 8007020:	2101      	movs	r1, #1
 8007022:	f7ff feff 	bl	8006e24 <_Balloc>
 8007026:	4602      	mov	r2, r0
 8007028:	b928      	cbnz	r0, 8007036 <__i2b+0x1a>
 800702a:	4b05      	ldr	r3, [pc, #20]	; (8007040 <__i2b+0x24>)
 800702c:	4805      	ldr	r0, [pc, #20]	; (8007044 <__i2b+0x28>)
 800702e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007032:	f000 fc9b 	bl	800796c <__assert_func>
 8007036:	2301      	movs	r3, #1
 8007038:	6144      	str	r4, [r0, #20]
 800703a:	6103      	str	r3, [r0, #16]
 800703c:	bd10      	pop	{r4, pc}
 800703e:	bf00      	nop
 8007040:	08008b47 	.word	0x08008b47
 8007044:	08008b58 	.word	0x08008b58

08007048 <__multiply>:
 8007048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800704c:	4614      	mov	r4, r2
 800704e:	690a      	ldr	r2, [r1, #16]
 8007050:	6923      	ldr	r3, [r4, #16]
 8007052:	429a      	cmp	r2, r3
 8007054:	bfb8      	it	lt
 8007056:	460b      	movlt	r3, r1
 8007058:	460d      	mov	r5, r1
 800705a:	bfbc      	itt	lt
 800705c:	4625      	movlt	r5, r4
 800705e:	461c      	movlt	r4, r3
 8007060:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007064:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007068:	68ab      	ldr	r3, [r5, #8]
 800706a:	6869      	ldr	r1, [r5, #4]
 800706c:	eb0a 0709 	add.w	r7, sl, r9
 8007070:	42bb      	cmp	r3, r7
 8007072:	b085      	sub	sp, #20
 8007074:	bfb8      	it	lt
 8007076:	3101      	addlt	r1, #1
 8007078:	f7ff fed4 	bl	8006e24 <_Balloc>
 800707c:	b930      	cbnz	r0, 800708c <__multiply+0x44>
 800707e:	4602      	mov	r2, r0
 8007080:	4b42      	ldr	r3, [pc, #264]	; (800718c <__multiply+0x144>)
 8007082:	4843      	ldr	r0, [pc, #268]	; (8007190 <__multiply+0x148>)
 8007084:	f240 115d 	movw	r1, #349	; 0x15d
 8007088:	f000 fc70 	bl	800796c <__assert_func>
 800708c:	f100 0614 	add.w	r6, r0, #20
 8007090:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007094:	4633      	mov	r3, r6
 8007096:	2200      	movs	r2, #0
 8007098:	4543      	cmp	r3, r8
 800709a:	d31e      	bcc.n	80070da <__multiply+0x92>
 800709c:	f105 0c14 	add.w	ip, r5, #20
 80070a0:	f104 0314 	add.w	r3, r4, #20
 80070a4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80070a8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80070ac:	9202      	str	r2, [sp, #8]
 80070ae:	ebac 0205 	sub.w	r2, ip, r5
 80070b2:	3a15      	subs	r2, #21
 80070b4:	f022 0203 	bic.w	r2, r2, #3
 80070b8:	3204      	adds	r2, #4
 80070ba:	f105 0115 	add.w	r1, r5, #21
 80070be:	458c      	cmp	ip, r1
 80070c0:	bf38      	it	cc
 80070c2:	2204      	movcc	r2, #4
 80070c4:	9201      	str	r2, [sp, #4]
 80070c6:	9a02      	ldr	r2, [sp, #8]
 80070c8:	9303      	str	r3, [sp, #12]
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d808      	bhi.n	80070e0 <__multiply+0x98>
 80070ce:	2f00      	cmp	r7, #0
 80070d0:	dc55      	bgt.n	800717e <__multiply+0x136>
 80070d2:	6107      	str	r7, [r0, #16]
 80070d4:	b005      	add	sp, #20
 80070d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070da:	f843 2b04 	str.w	r2, [r3], #4
 80070de:	e7db      	b.n	8007098 <__multiply+0x50>
 80070e0:	f8b3 a000 	ldrh.w	sl, [r3]
 80070e4:	f1ba 0f00 	cmp.w	sl, #0
 80070e8:	d020      	beq.n	800712c <__multiply+0xe4>
 80070ea:	f105 0e14 	add.w	lr, r5, #20
 80070ee:	46b1      	mov	r9, r6
 80070f0:	2200      	movs	r2, #0
 80070f2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80070f6:	f8d9 b000 	ldr.w	fp, [r9]
 80070fa:	b2a1      	uxth	r1, r4
 80070fc:	fa1f fb8b 	uxth.w	fp, fp
 8007100:	fb0a b101 	mla	r1, sl, r1, fp
 8007104:	4411      	add	r1, r2
 8007106:	f8d9 2000 	ldr.w	r2, [r9]
 800710a:	0c24      	lsrs	r4, r4, #16
 800710c:	0c12      	lsrs	r2, r2, #16
 800710e:	fb0a 2404 	mla	r4, sl, r4, r2
 8007112:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007116:	b289      	uxth	r1, r1
 8007118:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800711c:	45f4      	cmp	ip, lr
 800711e:	f849 1b04 	str.w	r1, [r9], #4
 8007122:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007126:	d8e4      	bhi.n	80070f2 <__multiply+0xaa>
 8007128:	9901      	ldr	r1, [sp, #4]
 800712a:	5072      	str	r2, [r6, r1]
 800712c:	9a03      	ldr	r2, [sp, #12]
 800712e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007132:	3304      	adds	r3, #4
 8007134:	f1b9 0f00 	cmp.w	r9, #0
 8007138:	d01f      	beq.n	800717a <__multiply+0x132>
 800713a:	6834      	ldr	r4, [r6, #0]
 800713c:	f105 0114 	add.w	r1, r5, #20
 8007140:	46b6      	mov	lr, r6
 8007142:	f04f 0a00 	mov.w	sl, #0
 8007146:	880a      	ldrh	r2, [r1, #0]
 8007148:	f8be b002 	ldrh.w	fp, [lr, #2]
 800714c:	fb09 b202 	mla	r2, r9, r2, fp
 8007150:	4492      	add	sl, r2
 8007152:	b2a4      	uxth	r4, r4
 8007154:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007158:	f84e 4b04 	str.w	r4, [lr], #4
 800715c:	f851 4b04 	ldr.w	r4, [r1], #4
 8007160:	f8be 2000 	ldrh.w	r2, [lr]
 8007164:	0c24      	lsrs	r4, r4, #16
 8007166:	fb09 2404 	mla	r4, r9, r4, r2
 800716a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800716e:	458c      	cmp	ip, r1
 8007170:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007174:	d8e7      	bhi.n	8007146 <__multiply+0xfe>
 8007176:	9a01      	ldr	r2, [sp, #4]
 8007178:	50b4      	str	r4, [r6, r2]
 800717a:	3604      	adds	r6, #4
 800717c:	e7a3      	b.n	80070c6 <__multiply+0x7e>
 800717e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1a5      	bne.n	80070d2 <__multiply+0x8a>
 8007186:	3f01      	subs	r7, #1
 8007188:	e7a1      	b.n	80070ce <__multiply+0x86>
 800718a:	bf00      	nop
 800718c:	08008b47 	.word	0x08008b47
 8007190:	08008b58 	.word	0x08008b58

08007194 <__pow5mult>:
 8007194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007198:	4615      	mov	r5, r2
 800719a:	f012 0203 	ands.w	r2, r2, #3
 800719e:	4606      	mov	r6, r0
 80071a0:	460f      	mov	r7, r1
 80071a2:	d007      	beq.n	80071b4 <__pow5mult+0x20>
 80071a4:	4c25      	ldr	r4, [pc, #148]	; (800723c <__pow5mult+0xa8>)
 80071a6:	3a01      	subs	r2, #1
 80071a8:	2300      	movs	r3, #0
 80071aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80071ae:	f7ff fe9b 	bl	8006ee8 <__multadd>
 80071b2:	4607      	mov	r7, r0
 80071b4:	10ad      	asrs	r5, r5, #2
 80071b6:	d03d      	beq.n	8007234 <__pow5mult+0xa0>
 80071b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80071ba:	b97c      	cbnz	r4, 80071dc <__pow5mult+0x48>
 80071bc:	2010      	movs	r0, #16
 80071be:	f7ff fe1b 	bl	8006df8 <malloc>
 80071c2:	4602      	mov	r2, r0
 80071c4:	6270      	str	r0, [r6, #36]	; 0x24
 80071c6:	b928      	cbnz	r0, 80071d4 <__pow5mult+0x40>
 80071c8:	4b1d      	ldr	r3, [pc, #116]	; (8007240 <__pow5mult+0xac>)
 80071ca:	481e      	ldr	r0, [pc, #120]	; (8007244 <__pow5mult+0xb0>)
 80071cc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80071d0:	f000 fbcc 	bl	800796c <__assert_func>
 80071d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80071d8:	6004      	str	r4, [r0, #0]
 80071da:	60c4      	str	r4, [r0, #12]
 80071dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80071e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80071e4:	b94c      	cbnz	r4, 80071fa <__pow5mult+0x66>
 80071e6:	f240 2171 	movw	r1, #625	; 0x271
 80071ea:	4630      	mov	r0, r6
 80071ec:	f7ff ff16 	bl	800701c <__i2b>
 80071f0:	2300      	movs	r3, #0
 80071f2:	f8c8 0008 	str.w	r0, [r8, #8]
 80071f6:	4604      	mov	r4, r0
 80071f8:	6003      	str	r3, [r0, #0]
 80071fa:	f04f 0900 	mov.w	r9, #0
 80071fe:	07eb      	lsls	r3, r5, #31
 8007200:	d50a      	bpl.n	8007218 <__pow5mult+0x84>
 8007202:	4639      	mov	r1, r7
 8007204:	4622      	mov	r2, r4
 8007206:	4630      	mov	r0, r6
 8007208:	f7ff ff1e 	bl	8007048 <__multiply>
 800720c:	4639      	mov	r1, r7
 800720e:	4680      	mov	r8, r0
 8007210:	4630      	mov	r0, r6
 8007212:	f7ff fe47 	bl	8006ea4 <_Bfree>
 8007216:	4647      	mov	r7, r8
 8007218:	106d      	asrs	r5, r5, #1
 800721a:	d00b      	beq.n	8007234 <__pow5mult+0xa0>
 800721c:	6820      	ldr	r0, [r4, #0]
 800721e:	b938      	cbnz	r0, 8007230 <__pow5mult+0x9c>
 8007220:	4622      	mov	r2, r4
 8007222:	4621      	mov	r1, r4
 8007224:	4630      	mov	r0, r6
 8007226:	f7ff ff0f 	bl	8007048 <__multiply>
 800722a:	6020      	str	r0, [r4, #0]
 800722c:	f8c0 9000 	str.w	r9, [r0]
 8007230:	4604      	mov	r4, r0
 8007232:	e7e4      	b.n	80071fe <__pow5mult+0x6a>
 8007234:	4638      	mov	r0, r7
 8007236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800723a:	bf00      	nop
 800723c:	08008ca8 	.word	0x08008ca8
 8007240:	08008ad1 	.word	0x08008ad1
 8007244:	08008b58 	.word	0x08008b58

08007248 <__lshift>:
 8007248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800724c:	460c      	mov	r4, r1
 800724e:	6849      	ldr	r1, [r1, #4]
 8007250:	6923      	ldr	r3, [r4, #16]
 8007252:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007256:	68a3      	ldr	r3, [r4, #8]
 8007258:	4607      	mov	r7, r0
 800725a:	4691      	mov	r9, r2
 800725c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007260:	f108 0601 	add.w	r6, r8, #1
 8007264:	42b3      	cmp	r3, r6
 8007266:	db0b      	blt.n	8007280 <__lshift+0x38>
 8007268:	4638      	mov	r0, r7
 800726a:	f7ff fddb 	bl	8006e24 <_Balloc>
 800726e:	4605      	mov	r5, r0
 8007270:	b948      	cbnz	r0, 8007286 <__lshift+0x3e>
 8007272:	4602      	mov	r2, r0
 8007274:	4b28      	ldr	r3, [pc, #160]	; (8007318 <__lshift+0xd0>)
 8007276:	4829      	ldr	r0, [pc, #164]	; (800731c <__lshift+0xd4>)
 8007278:	f240 11d9 	movw	r1, #473	; 0x1d9
 800727c:	f000 fb76 	bl	800796c <__assert_func>
 8007280:	3101      	adds	r1, #1
 8007282:	005b      	lsls	r3, r3, #1
 8007284:	e7ee      	b.n	8007264 <__lshift+0x1c>
 8007286:	2300      	movs	r3, #0
 8007288:	f100 0114 	add.w	r1, r0, #20
 800728c:	f100 0210 	add.w	r2, r0, #16
 8007290:	4618      	mov	r0, r3
 8007292:	4553      	cmp	r3, sl
 8007294:	db33      	blt.n	80072fe <__lshift+0xb6>
 8007296:	6920      	ldr	r0, [r4, #16]
 8007298:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800729c:	f104 0314 	add.w	r3, r4, #20
 80072a0:	f019 091f 	ands.w	r9, r9, #31
 80072a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80072a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80072ac:	d02b      	beq.n	8007306 <__lshift+0xbe>
 80072ae:	f1c9 0e20 	rsb	lr, r9, #32
 80072b2:	468a      	mov	sl, r1
 80072b4:	2200      	movs	r2, #0
 80072b6:	6818      	ldr	r0, [r3, #0]
 80072b8:	fa00 f009 	lsl.w	r0, r0, r9
 80072bc:	4302      	orrs	r2, r0
 80072be:	f84a 2b04 	str.w	r2, [sl], #4
 80072c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80072c6:	459c      	cmp	ip, r3
 80072c8:	fa22 f20e 	lsr.w	r2, r2, lr
 80072cc:	d8f3      	bhi.n	80072b6 <__lshift+0x6e>
 80072ce:	ebac 0304 	sub.w	r3, ip, r4
 80072d2:	3b15      	subs	r3, #21
 80072d4:	f023 0303 	bic.w	r3, r3, #3
 80072d8:	3304      	adds	r3, #4
 80072da:	f104 0015 	add.w	r0, r4, #21
 80072de:	4584      	cmp	ip, r0
 80072e0:	bf38      	it	cc
 80072e2:	2304      	movcc	r3, #4
 80072e4:	50ca      	str	r2, [r1, r3]
 80072e6:	b10a      	cbz	r2, 80072ec <__lshift+0xa4>
 80072e8:	f108 0602 	add.w	r6, r8, #2
 80072ec:	3e01      	subs	r6, #1
 80072ee:	4638      	mov	r0, r7
 80072f0:	612e      	str	r6, [r5, #16]
 80072f2:	4621      	mov	r1, r4
 80072f4:	f7ff fdd6 	bl	8006ea4 <_Bfree>
 80072f8:	4628      	mov	r0, r5
 80072fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8007302:	3301      	adds	r3, #1
 8007304:	e7c5      	b.n	8007292 <__lshift+0x4a>
 8007306:	3904      	subs	r1, #4
 8007308:	f853 2b04 	ldr.w	r2, [r3], #4
 800730c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007310:	459c      	cmp	ip, r3
 8007312:	d8f9      	bhi.n	8007308 <__lshift+0xc0>
 8007314:	e7ea      	b.n	80072ec <__lshift+0xa4>
 8007316:	bf00      	nop
 8007318:	08008b47 	.word	0x08008b47
 800731c:	08008b58 	.word	0x08008b58

08007320 <__mcmp>:
 8007320:	b530      	push	{r4, r5, lr}
 8007322:	6902      	ldr	r2, [r0, #16]
 8007324:	690c      	ldr	r4, [r1, #16]
 8007326:	1b12      	subs	r2, r2, r4
 8007328:	d10e      	bne.n	8007348 <__mcmp+0x28>
 800732a:	f100 0314 	add.w	r3, r0, #20
 800732e:	3114      	adds	r1, #20
 8007330:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007334:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007338:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800733c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007340:	42a5      	cmp	r5, r4
 8007342:	d003      	beq.n	800734c <__mcmp+0x2c>
 8007344:	d305      	bcc.n	8007352 <__mcmp+0x32>
 8007346:	2201      	movs	r2, #1
 8007348:	4610      	mov	r0, r2
 800734a:	bd30      	pop	{r4, r5, pc}
 800734c:	4283      	cmp	r3, r0
 800734e:	d3f3      	bcc.n	8007338 <__mcmp+0x18>
 8007350:	e7fa      	b.n	8007348 <__mcmp+0x28>
 8007352:	f04f 32ff 	mov.w	r2, #4294967295
 8007356:	e7f7      	b.n	8007348 <__mcmp+0x28>

08007358 <__mdiff>:
 8007358:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800735c:	460c      	mov	r4, r1
 800735e:	4606      	mov	r6, r0
 8007360:	4611      	mov	r1, r2
 8007362:	4620      	mov	r0, r4
 8007364:	4617      	mov	r7, r2
 8007366:	f7ff ffdb 	bl	8007320 <__mcmp>
 800736a:	1e05      	subs	r5, r0, #0
 800736c:	d110      	bne.n	8007390 <__mdiff+0x38>
 800736e:	4629      	mov	r1, r5
 8007370:	4630      	mov	r0, r6
 8007372:	f7ff fd57 	bl	8006e24 <_Balloc>
 8007376:	b930      	cbnz	r0, 8007386 <__mdiff+0x2e>
 8007378:	4b39      	ldr	r3, [pc, #228]	; (8007460 <__mdiff+0x108>)
 800737a:	4602      	mov	r2, r0
 800737c:	f240 2132 	movw	r1, #562	; 0x232
 8007380:	4838      	ldr	r0, [pc, #224]	; (8007464 <__mdiff+0x10c>)
 8007382:	f000 faf3 	bl	800796c <__assert_func>
 8007386:	2301      	movs	r3, #1
 8007388:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800738c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007390:	bfa4      	itt	ge
 8007392:	463b      	movge	r3, r7
 8007394:	4627      	movge	r7, r4
 8007396:	4630      	mov	r0, r6
 8007398:	6879      	ldr	r1, [r7, #4]
 800739a:	bfa6      	itte	ge
 800739c:	461c      	movge	r4, r3
 800739e:	2500      	movge	r5, #0
 80073a0:	2501      	movlt	r5, #1
 80073a2:	f7ff fd3f 	bl	8006e24 <_Balloc>
 80073a6:	b920      	cbnz	r0, 80073b2 <__mdiff+0x5a>
 80073a8:	4b2d      	ldr	r3, [pc, #180]	; (8007460 <__mdiff+0x108>)
 80073aa:	4602      	mov	r2, r0
 80073ac:	f44f 7110 	mov.w	r1, #576	; 0x240
 80073b0:	e7e6      	b.n	8007380 <__mdiff+0x28>
 80073b2:	693e      	ldr	r6, [r7, #16]
 80073b4:	60c5      	str	r5, [r0, #12]
 80073b6:	6925      	ldr	r5, [r4, #16]
 80073b8:	f107 0114 	add.w	r1, r7, #20
 80073bc:	f104 0914 	add.w	r9, r4, #20
 80073c0:	f100 0e14 	add.w	lr, r0, #20
 80073c4:	f107 0210 	add.w	r2, r7, #16
 80073c8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80073cc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80073d0:	46f2      	mov	sl, lr
 80073d2:	2700      	movs	r7, #0
 80073d4:	f859 3b04 	ldr.w	r3, [r9], #4
 80073d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80073dc:	fa1f f883 	uxth.w	r8, r3
 80073e0:	fa17 f78b 	uxtah	r7, r7, fp
 80073e4:	0c1b      	lsrs	r3, r3, #16
 80073e6:	eba7 0808 	sub.w	r8, r7, r8
 80073ea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80073ee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80073f2:	fa1f f888 	uxth.w	r8, r8
 80073f6:	141f      	asrs	r7, r3, #16
 80073f8:	454d      	cmp	r5, r9
 80073fa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80073fe:	f84a 3b04 	str.w	r3, [sl], #4
 8007402:	d8e7      	bhi.n	80073d4 <__mdiff+0x7c>
 8007404:	1b2b      	subs	r3, r5, r4
 8007406:	3b15      	subs	r3, #21
 8007408:	f023 0303 	bic.w	r3, r3, #3
 800740c:	3304      	adds	r3, #4
 800740e:	3415      	adds	r4, #21
 8007410:	42a5      	cmp	r5, r4
 8007412:	bf38      	it	cc
 8007414:	2304      	movcc	r3, #4
 8007416:	4419      	add	r1, r3
 8007418:	4473      	add	r3, lr
 800741a:	469e      	mov	lr, r3
 800741c:	460d      	mov	r5, r1
 800741e:	4565      	cmp	r5, ip
 8007420:	d30e      	bcc.n	8007440 <__mdiff+0xe8>
 8007422:	f10c 0203 	add.w	r2, ip, #3
 8007426:	1a52      	subs	r2, r2, r1
 8007428:	f022 0203 	bic.w	r2, r2, #3
 800742c:	3903      	subs	r1, #3
 800742e:	458c      	cmp	ip, r1
 8007430:	bf38      	it	cc
 8007432:	2200      	movcc	r2, #0
 8007434:	441a      	add	r2, r3
 8007436:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800743a:	b17b      	cbz	r3, 800745c <__mdiff+0x104>
 800743c:	6106      	str	r6, [r0, #16]
 800743e:	e7a5      	b.n	800738c <__mdiff+0x34>
 8007440:	f855 8b04 	ldr.w	r8, [r5], #4
 8007444:	fa17 f488 	uxtah	r4, r7, r8
 8007448:	1422      	asrs	r2, r4, #16
 800744a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800744e:	b2a4      	uxth	r4, r4
 8007450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007454:	f84e 4b04 	str.w	r4, [lr], #4
 8007458:	1417      	asrs	r7, r2, #16
 800745a:	e7e0      	b.n	800741e <__mdiff+0xc6>
 800745c:	3e01      	subs	r6, #1
 800745e:	e7ea      	b.n	8007436 <__mdiff+0xde>
 8007460:	08008b47 	.word	0x08008b47
 8007464:	08008b58 	.word	0x08008b58

08007468 <__d2b>:
 8007468:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800746c:	4689      	mov	r9, r1
 800746e:	2101      	movs	r1, #1
 8007470:	ec57 6b10 	vmov	r6, r7, d0
 8007474:	4690      	mov	r8, r2
 8007476:	f7ff fcd5 	bl	8006e24 <_Balloc>
 800747a:	4604      	mov	r4, r0
 800747c:	b930      	cbnz	r0, 800748c <__d2b+0x24>
 800747e:	4602      	mov	r2, r0
 8007480:	4b25      	ldr	r3, [pc, #148]	; (8007518 <__d2b+0xb0>)
 8007482:	4826      	ldr	r0, [pc, #152]	; (800751c <__d2b+0xb4>)
 8007484:	f240 310a 	movw	r1, #778	; 0x30a
 8007488:	f000 fa70 	bl	800796c <__assert_func>
 800748c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007490:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007494:	bb35      	cbnz	r5, 80074e4 <__d2b+0x7c>
 8007496:	2e00      	cmp	r6, #0
 8007498:	9301      	str	r3, [sp, #4]
 800749a:	d028      	beq.n	80074ee <__d2b+0x86>
 800749c:	4668      	mov	r0, sp
 800749e:	9600      	str	r6, [sp, #0]
 80074a0:	f7ff fd8c 	bl	8006fbc <__lo0bits>
 80074a4:	9900      	ldr	r1, [sp, #0]
 80074a6:	b300      	cbz	r0, 80074ea <__d2b+0x82>
 80074a8:	9a01      	ldr	r2, [sp, #4]
 80074aa:	f1c0 0320 	rsb	r3, r0, #32
 80074ae:	fa02 f303 	lsl.w	r3, r2, r3
 80074b2:	430b      	orrs	r3, r1
 80074b4:	40c2      	lsrs	r2, r0
 80074b6:	6163      	str	r3, [r4, #20]
 80074b8:	9201      	str	r2, [sp, #4]
 80074ba:	9b01      	ldr	r3, [sp, #4]
 80074bc:	61a3      	str	r3, [r4, #24]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	bf14      	ite	ne
 80074c2:	2202      	movne	r2, #2
 80074c4:	2201      	moveq	r2, #1
 80074c6:	6122      	str	r2, [r4, #16]
 80074c8:	b1d5      	cbz	r5, 8007500 <__d2b+0x98>
 80074ca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80074ce:	4405      	add	r5, r0
 80074d0:	f8c9 5000 	str.w	r5, [r9]
 80074d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80074d8:	f8c8 0000 	str.w	r0, [r8]
 80074dc:	4620      	mov	r0, r4
 80074de:	b003      	add	sp, #12
 80074e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80074e8:	e7d5      	b.n	8007496 <__d2b+0x2e>
 80074ea:	6161      	str	r1, [r4, #20]
 80074ec:	e7e5      	b.n	80074ba <__d2b+0x52>
 80074ee:	a801      	add	r0, sp, #4
 80074f0:	f7ff fd64 	bl	8006fbc <__lo0bits>
 80074f4:	9b01      	ldr	r3, [sp, #4]
 80074f6:	6163      	str	r3, [r4, #20]
 80074f8:	2201      	movs	r2, #1
 80074fa:	6122      	str	r2, [r4, #16]
 80074fc:	3020      	adds	r0, #32
 80074fe:	e7e3      	b.n	80074c8 <__d2b+0x60>
 8007500:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007504:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007508:	f8c9 0000 	str.w	r0, [r9]
 800750c:	6918      	ldr	r0, [r3, #16]
 800750e:	f7ff fd35 	bl	8006f7c <__hi0bits>
 8007512:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007516:	e7df      	b.n	80074d8 <__d2b+0x70>
 8007518:	08008b47 	.word	0x08008b47
 800751c:	08008b58 	.word	0x08008b58

08007520 <_calloc_r>:
 8007520:	b513      	push	{r0, r1, r4, lr}
 8007522:	434a      	muls	r2, r1
 8007524:	4611      	mov	r1, r2
 8007526:	9201      	str	r2, [sp, #4]
 8007528:	f000 f85a 	bl	80075e0 <_malloc_r>
 800752c:	4604      	mov	r4, r0
 800752e:	b118      	cbz	r0, 8007538 <_calloc_r+0x18>
 8007530:	9a01      	ldr	r2, [sp, #4]
 8007532:	2100      	movs	r1, #0
 8007534:	f7fe f950 	bl	80057d8 <memset>
 8007538:	4620      	mov	r0, r4
 800753a:	b002      	add	sp, #8
 800753c:	bd10      	pop	{r4, pc}
	...

08007540 <_free_r>:
 8007540:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007542:	2900      	cmp	r1, #0
 8007544:	d048      	beq.n	80075d8 <_free_r+0x98>
 8007546:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800754a:	9001      	str	r0, [sp, #4]
 800754c:	2b00      	cmp	r3, #0
 800754e:	f1a1 0404 	sub.w	r4, r1, #4
 8007552:	bfb8      	it	lt
 8007554:	18e4      	addlt	r4, r4, r3
 8007556:	f000 fa65 	bl	8007a24 <__malloc_lock>
 800755a:	4a20      	ldr	r2, [pc, #128]	; (80075dc <_free_r+0x9c>)
 800755c:	9801      	ldr	r0, [sp, #4]
 800755e:	6813      	ldr	r3, [r2, #0]
 8007560:	4615      	mov	r5, r2
 8007562:	b933      	cbnz	r3, 8007572 <_free_r+0x32>
 8007564:	6063      	str	r3, [r4, #4]
 8007566:	6014      	str	r4, [r2, #0]
 8007568:	b003      	add	sp, #12
 800756a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800756e:	f000 ba5f 	b.w	8007a30 <__malloc_unlock>
 8007572:	42a3      	cmp	r3, r4
 8007574:	d90b      	bls.n	800758e <_free_r+0x4e>
 8007576:	6821      	ldr	r1, [r4, #0]
 8007578:	1862      	adds	r2, r4, r1
 800757a:	4293      	cmp	r3, r2
 800757c:	bf04      	itt	eq
 800757e:	681a      	ldreq	r2, [r3, #0]
 8007580:	685b      	ldreq	r3, [r3, #4]
 8007582:	6063      	str	r3, [r4, #4]
 8007584:	bf04      	itt	eq
 8007586:	1852      	addeq	r2, r2, r1
 8007588:	6022      	streq	r2, [r4, #0]
 800758a:	602c      	str	r4, [r5, #0]
 800758c:	e7ec      	b.n	8007568 <_free_r+0x28>
 800758e:	461a      	mov	r2, r3
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	b10b      	cbz	r3, 8007598 <_free_r+0x58>
 8007594:	42a3      	cmp	r3, r4
 8007596:	d9fa      	bls.n	800758e <_free_r+0x4e>
 8007598:	6811      	ldr	r1, [r2, #0]
 800759a:	1855      	adds	r5, r2, r1
 800759c:	42a5      	cmp	r5, r4
 800759e:	d10b      	bne.n	80075b8 <_free_r+0x78>
 80075a0:	6824      	ldr	r4, [r4, #0]
 80075a2:	4421      	add	r1, r4
 80075a4:	1854      	adds	r4, r2, r1
 80075a6:	42a3      	cmp	r3, r4
 80075a8:	6011      	str	r1, [r2, #0]
 80075aa:	d1dd      	bne.n	8007568 <_free_r+0x28>
 80075ac:	681c      	ldr	r4, [r3, #0]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	6053      	str	r3, [r2, #4]
 80075b2:	4421      	add	r1, r4
 80075b4:	6011      	str	r1, [r2, #0]
 80075b6:	e7d7      	b.n	8007568 <_free_r+0x28>
 80075b8:	d902      	bls.n	80075c0 <_free_r+0x80>
 80075ba:	230c      	movs	r3, #12
 80075bc:	6003      	str	r3, [r0, #0]
 80075be:	e7d3      	b.n	8007568 <_free_r+0x28>
 80075c0:	6825      	ldr	r5, [r4, #0]
 80075c2:	1961      	adds	r1, r4, r5
 80075c4:	428b      	cmp	r3, r1
 80075c6:	bf04      	itt	eq
 80075c8:	6819      	ldreq	r1, [r3, #0]
 80075ca:	685b      	ldreq	r3, [r3, #4]
 80075cc:	6063      	str	r3, [r4, #4]
 80075ce:	bf04      	itt	eq
 80075d0:	1949      	addeq	r1, r1, r5
 80075d2:	6021      	streq	r1, [r4, #0]
 80075d4:	6054      	str	r4, [r2, #4]
 80075d6:	e7c7      	b.n	8007568 <_free_r+0x28>
 80075d8:	b003      	add	sp, #12
 80075da:	bd30      	pop	{r4, r5, pc}
 80075dc:	20000264 	.word	0x20000264

080075e0 <_malloc_r>:
 80075e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075e2:	1ccd      	adds	r5, r1, #3
 80075e4:	f025 0503 	bic.w	r5, r5, #3
 80075e8:	3508      	adds	r5, #8
 80075ea:	2d0c      	cmp	r5, #12
 80075ec:	bf38      	it	cc
 80075ee:	250c      	movcc	r5, #12
 80075f0:	2d00      	cmp	r5, #0
 80075f2:	4606      	mov	r6, r0
 80075f4:	db01      	blt.n	80075fa <_malloc_r+0x1a>
 80075f6:	42a9      	cmp	r1, r5
 80075f8:	d903      	bls.n	8007602 <_malloc_r+0x22>
 80075fa:	230c      	movs	r3, #12
 80075fc:	6033      	str	r3, [r6, #0]
 80075fe:	2000      	movs	r0, #0
 8007600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007602:	f000 fa0f 	bl	8007a24 <__malloc_lock>
 8007606:	4921      	ldr	r1, [pc, #132]	; (800768c <_malloc_r+0xac>)
 8007608:	680a      	ldr	r2, [r1, #0]
 800760a:	4614      	mov	r4, r2
 800760c:	b99c      	cbnz	r4, 8007636 <_malloc_r+0x56>
 800760e:	4f20      	ldr	r7, [pc, #128]	; (8007690 <_malloc_r+0xb0>)
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	b923      	cbnz	r3, 800761e <_malloc_r+0x3e>
 8007614:	4621      	mov	r1, r4
 8007616:	4630      	mov	r0, r6
 8007618:	f000 f998 	bl	800794c <_sbrk_r>
 800761c:	6038      	str	r0, [r7, #0]
 800761e:	4629      	mov	r1, r5
 8007620:	4630      	mov	r0, r6
 8007622:	f000 f993 	bl	800794c <_sbrk_r>
 8007626:	1c43      	adds	r3, r0, #1
 8007628:	d123      	bne.n	8007672 <_malloc_r+0x92>
 800762a:	230c      	movs	r3, #12
 800762c:	6033      	str	r3, [r6, #0]
 800762e:	4630      	mov	r0, r6
 8007630:	f000 f9fe 	bl	8007a30 <__malloc_unlock>
 8007634:	e7e3      	b.n	80075fe <_malloc_r+0x1e>
 8007636:	6823      	ldr	r3, [r4, #0]
 8007638:	1b5b      	subs	r3, r3, r5
 800763a:	d417      	bmi.n	800766c <_malloc_r+0x8c>
 800763c:	2b0b      	cmp	r3, #11
 800763e:	d903      	bls.n	8007648 <_malloc_r+0x68>
 8007640:	6023      	str	r3, [r4, #0]
 8007642:	441c      	add	r4, r3
 8007644:	6025      	str	r5, [r4, #0]
 8007646:	e004      	b.n	8007652 <_malloc_r+0x72>
 8007648:	6863      	ldr	r3, [r4, #4]
 800764a:	42a2      	cmp	r2, r4
 800764c:	bf0c      	ite	eq
 800764e:	600b      	streq	r3, [r1, #0]
 8007650:	6053      	strne	r3, [r2, #4]
 8007652:	4630      	mov	r0, r6
 8007654:	f000 f9ec 	bl	8007a30 <__malloc_unlock>
 8007658:	f104 000b 	add.w	r0, r4, #11
 800765c:	1d23      	adds	r3, r4, #4
 800765e:	f020 0007 	bic.w	r0, r0, #7
 8007662:	1ac2      	subs	r2, r0, r3
 8007664:	d0cc      	beq.n	8007600 <_malloc_r+0x20>
 8007666:	1a1b      	subs	r3, r3, r0
 8007668:	50a3      	str	r3, [r4, r2]
 800766a:	e7c9      	b.n	8007600 <_malloc_r+0x20>
 800766c:	4622      	mov	r2, r4
 800766e:	6864      	ldr	r4, [r4, #4]
 8007670:	e7cc      	b.n	800760c <_malloc_r+0x2c>
 8007672:	1cc4      	adds	r4, r0, #3
 8007674:	f024 0403 	bic.w	r4, r4, #3
 8007678:	42a0      	cmp	r0, r4
 800767a:	d0e3      	beq.n	8007644 <_malloc_r+0x64>
 800767c:	1a21      	subs	r1, r4, r0
 800767e:	4630      	mov	r0, r6
 8007680:	f000 f964 	bl	800794c <_sbrk_r>
 8007684:	3001      	adds	r0, #1
 8007686:	d1dd      	bne.n	8007644 <_malloc_r+0x64>
 8007688:	e7cf      	b.n	800762a <_malloc_r+0x4a>
 800768a:	bf00      	nop
 800768c:	20000264 	.word	0x20000264
 8007690:	20000268 	.word	0x20000268

08007694 <__ssputs_r>:
 8007694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007698:	688e      	ldr	r6, [r1, #8]
 800769a:	429e      	cmp	r6, r3
 800769c:	4682      	mov	sl, r0
 800769e:	460c      	mov	r4, r1
 80076a0:	4690      	mov	r8, r2
 80076a2:	461f      	mov	r7, r3
 80076a4:	d838      	bhi.n	8007718 <__ssputs_r+0x84>
 80076a6:	898a      	ldrh	r2, [r1, #12]
 80076a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80076ac:	d032      	beq.n	8007714 <__ssputs_r+0x80>
 80076ae:	6825      	ldr	r5, [r4, #0]
 80076b0:	6909      	ldr	r1, [r1, #16]
 80076b2:	eba5 0901 	sub.w	r9, r5, r1
 80076b6:	6965      	ldr	r5, [r4, #20]
 80076b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80076bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80076c0:	3301      	adds	r3, #1
 80076c2:	444b      	add	r3, r9
 80076c4:	106d      	asrs	r5, r5, #1
 80076c6:	429d      	cmp	r5, r3
 80076c8:	bf38      	it	cc
 80076ca:	461d      	movcc	r5, r3
 80076cc:	0553      	lsls	r3, r2, #21
 80076ce:	d531      	bpl.n	8007734 <__ssputs_r+0xa0>
 80076d0:	4629      	mov	r1, r5
 80076d2:	f7ff ff85 	bl	80075e0 <_malloc_r>
 80076d6:	4606      	mov	r6, r0
 80076d8:	b950      	cbnz	r0, 80076f0 <__ssputs_r+0x5c>
 80076da:	230c      	movs	r3, #12
 80076dc:	f8ca 3000 	str.w	r3, [sl]
 80076e0:	89a3      	ldrh	r3, [r4, #12]
 80076e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076e6:	81a3      	strh	r3, [r4, #12]
 80076e8:	f04f 30ff 	mov.w	r0, #4294967295
 80076ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076f0:	6921      	ldr	r1, [r4, #16]
 80076f2:	464a      	mov	r2, r9
 80076f4:	f7ff fb88 	bl	8006e08 <memcpy>
 80076f8:	89a3      	ldrh	r3, [r4, #12]
 80076fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80076fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007702:	81a3      	strh	r3, [r4, #12]
 8007704:	6126      	str	r6, [r4, #16]
 8007706:	6165      	str	r5, [r4, #20]
 8007708:	444e      	add	r6, r9
 800770a:	eba5 0509 	sub.w	r5, r5, r9
 800770e:	6026      	str	r6, [r4, #0]
 8007710:	60a5      	str	r5, [r4, #8]
 8007712:	463e      	mov	r6, r7
 8007714:	42be      	cmp	r6, r7
 8007716:	d900      	bls.n	800771a <__ssputs_r+0x86>
 8007718:	463e      	mov	r6, r7
 800771a:	4632      	mov	r2, r6
 800771c:	6820      	ldr	r0, [r4, #0]
 800771e:	4641      	mov	r1, r8
 8007720:	f000 f966 	bl	80079f0 <memmove>
 8007724:	68a3      	ldr	r3, [r4, #8]
 8007726:	6822      	ldr	r2, [r4, #0]
 8007728:	1b9b      	subs	r3, r3, r6
 800772a:	4432      	add	r2, r6
 800772c:	60a3      	str	r3, [r4, #8]
 800772e:	6022      	str	r2, [r4, #0]
 8007730:	2000      	movs	r0, #0
 8007732:	e7db      	b.n	80076ec <__ssputs_r+0x58>
 8007734:	462a      	mov	r2, r5
 8007736:	f000 f981 	bl	8007a3c <_realloc_r>
 800773a:	4606      	mov	r6, r0
 800773c:	2800      	cmp	r0, #0
 800773e:	d1e1      	bne.n	8007704 <__ssputs_r+0x70>
 8007740:	6921      	ldr	r1, [r4, #16]
 8007742:	4650      	mov	r0, sl
 8007744:	f7ff fefc 	bl	8007540 <_free_r>
 8007748:	e7c7      	b.n	80076da <__ssputs_r+0x46>
	...

0800774c <_svfiprintf_r>:
 800774c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007750:	4698      	mov	r8, r3
 8007752:	898b      	ldrh	r3, [r1, #12]
 8007754:	061b      	lsls	r3, r3, #24
 8007756:	b09d      	sub	sp, #116	; 0x74
 8007758:	4607      	mov	r7, r0
 800775a:	460d      	mov	r5, r1
 800775c:	4614      	mov	r4, r2
 800775e:	d50e      	bpl.n	800777e <_svfiprintf_r+0x32>
 8007760:	690b      	ldr	r3, [r1, #16]
 8007762:	b963      	cbnz	r3, 800777e <_svfiprintf_r+0x32>
 8007764:	2140      	movs	r1, #64	; 0x40
 8007766:	f7ff ff3b 	bl	80075e0 <_malloc_r>
 800776a:	6028      	str	r0, [r5, #0]
 800776c:	6128      	str	r0, [r5, #16]
 800776e:	b920      	cbnz	r0, 800777a <_svfiprintf_r+0x2e>
 8007770:	230c      	movs	r3, #12
 8007772:	603b      	str	r3, [r7, #0]
 8007774:	f04f 30ff 	mov.w	r0, #4294967295
 8007778:	e0d1      	b.n	800791e <_svfiprintf_r+0x1d2>
 800777a:	2340      	movs	r3, #64	; 0x40
 800777c:	616b      	str	r3, [r5, #20]
 800777e:	2300      	movs	r3, #0
 8007780:	9309      	str	r3, [sp, #36]	; 0x24
 8007782:	2320      	movs	r3, #32
 8007784:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007788:	f8cd 800c 	str.w	r8, [sp, #12]
 800778c:	2330      	movs	r3, #48	; 0x30
 800778e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007938 <_svfiprintf_r+0x1ec>
 8007792:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007796:	f04f 0901 	mov.w	r9, #1
 800779a:	4623      	mov	r3, r4
 800779c:	469a      	mov	sl, r3
 800779e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077a2:	b10a      	cbz	r2, 80077a8 <_svfiprintf_r+0x5c>
 80077a4:	2a25      	cmp	r2, #37	; 0x25
 80077a6:	d1f9      	bne.n	800779c <_svfiprintf_r+0x50>
 80077a8:	ebba 0b04 	subs.w	fp, sl, r4
 80077ac:	d00b      	beq.n	80077c6 <_svfiprintf_r+0x7a>
 80077ae:	465b      	mov	r3, fp
 80077b0:	4622      	mov	r2, r4
 80077b2:	4629      	mov	r1, r5
 80077b4:	4638      	mov	r0, r7
 80077b6:	f7ff ff6d 	bl	8007694 <__ssputs_r>
 80077ba:	3001      	adds	r0, #1
 80077bc:	f000 80aa 	beq.w	8007914 <_svfiprintf_r+0x1c8>
 80077c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077c2:	445a      	add	r2, fp
 80077c4:	9209      	str	r2, [sp, #36]	; 0x24
 80077c6:	f89a 3000 	ldrb.w	r3, [sl]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	f000 80a2 	beq.w	8007914 <_svfiprintf_r+0x1c8>
 80077d0:	2300      	movs	r3, #0
 80077d2:	f04f 32ff 	mov.w	r2, #4294967295
 80077d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077da:	f10a 0a01 	add.w	sl, sl, #1
 80077de:	9304      	str	r3, [sp, #16]
 80077e0:	9307      	str	r3, [sp, #28]
 80077e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077e6:	931a      	str	r3, [sp, #104]	; 0x68
 80077e8:	4654      	mov	r4, sl
 80077ea:	2205      	movs	r2, #5
 80077ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077f0:	4851      	ldr	r0, [pc, #324]	; (8007938 <_svfiprintf_r+0x1ec>)
 80077f2:	f7f8 fcfd 	bl	80001f0 <memchr>
 80077f6:	9a04      	ldr	r2, [sp, #16]
 80077f8:	b9d8      	cbnz	r0, 8007832 <_svfiprintf_r+0xe6>
 80077fa:	06d0      	lsls	r0, r2, #27
 80077fc:	bf44      	itt	mi
 80077fe:	2320      	movmi	r3, #32
 8007800:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007804:	0711      	lsls	r1, r2, #28
 8007806:	bf44      	itt	mi
 8007808:	232b      	movmi	r3, #43	; 0x2b
 800780a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800780e:	f89a 3000 	ldrb.w	r3, [sl]
 8007812:	2b2a      	cmp	r3, #42	; 0x2a
 8007814:	d015      	beq.n	8007842 <_svfiprintf_r+0xf6>
 8007816:	9a07      	ldr	r2, [sp, #28]
 8007818:	4654      	mov	r4, sl
 800781a:	2000      	movs	r0, #0
 800781c:	f04f 0c0a 	mov.w	ip, #10
 8007820:	4621      	mov	r1, r4
 8007822:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007826:	3b30      	subs	r3, #48	; 0x30
 8007828:	2b09      	cmp	r3, #9
 800782a:	d94e      	bls.n	80078ca <_svfiprintf_r+0x17e>
 800782c:	b1b0      	cbz	r0, 800785c <_svfiprintf_r+0x110>
 800782e:	9207      	str	r2, [sp, #28]
 8007830:	e014      	b.n	800785c <_svfiprintf_r+0x110>
 8007832:	eba0 0308 	sub.w	r3, r0, r8
 8007836:	fa09 f303 	lsl.w	r3, r9, r3
 800783a:	4313      	orrs	r3, r2
 800783c:	9304      	str	r3, [sp, #16]
 800783e:	46a2      	mov	sl, r4
 8007840:	e7d2      	b.n	80077e8 <_svfiprintf_r+0x9c>
 8007842:	9b03      	ldr	r3, [sp, #12]
 8007844:	1d19      	adds	r1, r3, #4
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	9103      	str	r1, [sp, #12]
 800784a:	2b00      	cmp	r3, #0
 800784c:	bfbb      	ittet	lt
 800784e:	425b      	neglt	r3, r3
 8007850:	f042 0202 	orrlt.w	r2, r2, #2
 8007854:	9307      	strge	r3, [sp, #28]
 8007856:	9307      	strlt	r3, [sp, #28]
 8007858:	bfb8      	it	lt
 800785a:	9204      	strlt	r2, [sp, #16]
 800785c:	7823      	ldrb	r3, [r4, #0]
 800785e:	2b2e      	cmp	r3, #46	; 0x2e
 8007860:	d10c      	bne.n	800787c <_svfiprintf_r+0x130>
 8007862:	7863      	ldrb	r3, [r4, #1]
 8007864:	2b2a      	cmp	r3, #42	; 0x2a
 8007866:	d135      	bne.n	80078d4 <_svfiprintf_r+0x188>
 8007868:	9b03      	ldr	r3, [sp, #12]
 800786a:	1d1a      	adds	r2, r3, #4
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	9203      	str	r2, [sp, #12]
 8007870:	2b00      	cmp	r3, #0
 8007872:	bfb8      	it	lt
 8007874:	f04f 33ff 	movlt.w	r3, #4294967295
 8007878:	3402      	adds	r4, #2
 800787a:	9305      	str	r3, [sp, #20]
 800787c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007948 <_svfiprintf_r+0x1fc>
 8007880:	7821      	ldrb	r1, [r4, #0]
 8007882:	2203      	movs	r2, #3
 8007884:	4650      	mov	r0, sl
 8007886:	f7f8 fcb3 	bl	80001f0 <memchr>
 800788a:	b140      	cbz	r0, 800789e <_svfiprintf_r+0x152>
 800788c:	2340      	movs	r3, #64	; 0x40
 800788e:	eba0 000a 	sub.w	r0, r0, sl
 8007892:	fa03 f000 	lsl.w	r0, r3, r0
 8007896:	9b04      	ldr	r3, [sp, #16]
 8007898:	4303      	orrs	r3, r0
 800789a:	3401      	adds	r4, #1
 800789c:	9304      	str	r3, [sp, #16]
 800789e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078a2:	4826      	ldr	r0, [pc, #152]	; (800793c <_svfiprintf_r+0x1f0>)
 80078a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078a8:	2206      	movs	r2, #6
 80078aa:	f7f8 fca1 	bl	80001f0 <memchr>
 80078ae:	2800      	cmp	r0, #0
 80078b0:	d038      	beq.n	8007924 <_svfiprintf_r+0x1d8>
 80078b2:	4b23      	ldr	r3, [pc, #140]	; (8007940 <_svfiprintf_r+0x1f4>)
 80078b4:	bb1b      	cbnz	r3, 80078fe <_svfiprintf_r+0x1b2>
 80078b6:	9b03      	ldr	r3, [sp, #12]
 80078b8:	3307      	adds	r3, #7
 80078ba:	f023 0307 	bic.w	r3, r3, #7
 80078be:	3308      	adds	r3, #8
 80078c0:	9303      	str	r3, [sp, #12]
 80078c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078c4:	4433      	add	r3, r6
 80078c6:	9309      	str	r3, [sp, #36]	; 0x24
 80078c8:	e767      	b.n	800779a <_svfiprintf_r+0x4e>
 80078ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80078ce:	460c      	mov	r4, r1
 80078d0:	2001      	movs	r0, #1
 80078d2:	e7a5      	b.n	8007820 <_svfiprintf_r+0xd4>
 80078d4:	2300      	movs	r3, #0
 80078d6:	3401      	adds	r4, #1
 80078d8:	9305      	str	r3, [sp, #20]
 80078da:	4619      	mov	r1, r3
 80078dc:	f04f 0c0a 	mov.w	ip, #10
 80078e0:	4620      	mov	r0, r4
 80078e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078e6:	3a30      	subs	r2, #48	; 0x30
 80078e8:	2a09      	cmp	r2, #9
 80078ea:	d903      	bls.n	80078f4 <_svfiprintf_r+0x1a8>
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d0c5      	beq.n	800787c <_svfiprintf_r+0x130>
 80078f0:	9105      	str	r1, [sp, #20]
 80078f2:	e7c3      	b.n	800787c <_svfiprintf_r+0x130>
 80078f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80078f8:	4604      	mov	r4, r0
 80078fa:	2301      	movs	r3, #1
 80078fc:	e7f0      	b.n	80078e0 <_svfiprintf_r+0x194>
 80078fe:	ab03      	add	r3, sp, #12
 8007900:	9300      	str	r3, [sp, #0]
 8007902:	462a      	mov	r2, r5
 8007904:	4b0f      	ldr	r3, [pc, #60]	; (8007944 <_svfiprintf_r+0x1f8>)
 8007906:	a904      	add	r1, sp, #16
 8007908:	4638      	mov	r0, r7
 800790a:	f7fe f80d 	bl	8005928 <_printf_float>
 800790e:	1c42      	adds	r2, r0, #1
 8007910:	4606      	mov	r6, r0
 8007912:	d1d6      	bne.n	80078c2 <_svfiprintf_r+0x176>
 8007914:	89ab      	ldrh	r3, [r5, #12]
 8007916:	065b      	lsls	r3, r3, #25
 8007918:	f53f af2c 	bmi.w	8007774 <_svfiprintf_r+0x28>
 800791c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800791e:	b01d      	add	sp, #116	; 0x74
 8007920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007924:	ab03      	add	r3, sp, #12
 8007926:	9300      	str	r3, [sp, #0]
 8007928:	462a      	mov	r2, r5
 800792a:	4b06      	ldr	r3, [pc, #24]	; (8007944 <_svfiprintf_r+0x1f8>)
 800792c:	a904      	add	r1, sp, #16
 800792e:	4638      	mov	r0, r7
 8007930:	f7fe fa9e 	bl	8005e70 <_printf_i>
 8007934:	e7eb      	b.n	800790e <_svfiprintf_r+0x1c2>
 8007936:	bf00      	nop
 8007938:	08008cb4 	.word	0x08008cb4
 800793c:	08008cbe 	.word	0x08008cbe
 8007940:	08005929 	.word	0x08005929
 8007944:	08007695 	.word	0x08007695
 8007948:	08008cba 	.word	0x08008cba

0800794c <_sbrk_r>:
 800794c:	b538      	push	{r3, r4, r5, lr}
 800794e:	4d06      	ldr	r5, [pc, #24]	; (8007968 <_sbrk_r+0x1c>)
 8007950:	2300      	movs	r3, #0
 8007952:	4604      	mov	r4, r0
 8007954:	4608      	mov	r0, r1
 8007956:	602b      	str	r3, [r5, #0]
 8007958:	f7fa fdfc 	bl	8002554 <_sbrk>
 800795c:	1c43      	adds	r3, r0, #1
 800795e:	d102      	bne.n	8007966 <_sbrk_r+0x1a>
 8007960:	682b      	ldr	r3, [r5, #0]
 8007962:	b103      	cbz	r3, 8007966 <_sbrk_r+0x1a>
 8007964:	6023      	str	r3, [r4, #0]
 8007966:	bd38      	pop	{r3, r4, r5, pc}
 8007968:	2000043c 	.word	0x2000043c

0800796c <__assert_func>:
 800796c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800796e:	4614      	mov	r4, r2
 8007970:	461a      	mov	r2, r3
 8007972:	4b09      	ldr	r3, [pc, #36]	; (8007998 <__assert_func+0x2c>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4605      	mov	r5, r0
 8007978:	68d8      	ldr	r0, [r3, #12]
 800797a:	b14c      	cbz	r4, 8007990 <__assert_func+0x24>
 800797c:	4b07      	ldr	r3, [pc, #28]	; (800799c <__assert_func+0x30>)
 800797e:	9100      	str	r1, [sp, #0]
 8007980:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007984:	4906      	ldr	r1, [pc, #24]	; (80079a0 <__assert_func+0x34>)
 8007986:	462b      	mov	r3, r5
 8007988:	f000 f80e 	bl	80079a8 <fiprintf>
 800798c:	f000 faa4 	bl	8007ed8 <abort>
 8007990:	4b04      	ldr	r3, [pc, #16]	; (80079a4 <__assert_func+0x38>)
 8007992:	461c      	mov	r4, r3
 8007994:	e7f3      	b.n	800797e <__assert_func+0x12>
 8007996:	bf00      	nop
 8007998:	20000014 	.word	0x20000014
 800799c:	08008cc5 	.word	0x08008cc5
 80079a0:	08008cd2 	.word	0x08008cd2
 80079a4:	08008d00 	.word	0x08008d00

080079a8 <fiprintf>:
 80079a8:	b40e      	push	{r1, r2, r3}
 80079aa:	b503      	push	{r0, r1, lr}
 80079ac:	4601      	mov	r1, r0
 80079ae:	ab03      	add	r3, sp, #12
 80079b0:	4805      	ldr	r0, [pc, #20]	; (80079c8 <fiprintf+0x20>)
 80079b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80079b6:	6800      	ldr	r0, [r0, #0]
 80079b8:	9301      	str	r3, [sp, #4]
 80079ba:	f000 f88f 	bl	8007adc <_vfiprintf_r>
 80079be:	b002      	add	sp, #8
 80079c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80079c4:	b003      	add	sp, #12
 80079c6:	4770      	bx	lr
 80079c8:	20000014 	.word	0x20000014

080079cc <__ascii_mbtowc>:
 80079cc:	b082      	sub	sp, #8
 80079ce:	b901      	cbnz	r1, 80079d2 <__ascii_mbtowc+0x6>
 80079d0:	a901      	add	r1, sp, #4
 80079d2:	b142      	cbz	r2, 80079e6 <__ascii_mbtowc+0x1a>
 80079d4:	b14b      	cbz	r3, 80079ea <__ascii_mbtowc+0x1e>
 80079d6:	7813      	ldrb	r3, [r2, #0]
 80079d8:	600b      	str	r3, [r1, #0]
 80079da:	7812      	ldrb	r2, [r2, #0]
 80079dc:	1e10      	subs	r0, r2, #0
 80079de:	bf18      	it	ne
 80079e0:	2001      	movne	r0, #1
 80079e2:	b002      	add	sp, #8
 80079e4:	4770      	bx	lr
 80079e6:	4610      	mov	r0, r2
 80079e8:	e7fb      	b.n	80079e2 <__ascii_mbtowc+0x16>
 80079ea:	f06f 0001 	mvn.w	r0, #1
 80079ee:	e7f8      	b.n	80079e2 <__ascii_mbtowc+0x16>

080079f0 <memmove>:
 80079f0:	4288      	cmp	r0, r1
 80079f2:	b510      	push	{r4, lr}
 80079f4:	eb01 0402 	add.w	r4, r1, r2
 80079f8:	d902      	bls.n	8007a00 <memmove+0x10>
 80079fa:	4284      	cmp	r4, r0
 80079fc:	4623      	mov	r3, r4
 80079fe:	d807      	bhi.n	8007a10 <memmove+0x20>
 8007a00:	1e43      	subs	r3, r0, #1
 8007a02:	42a1      	cmp	r1, r4
 8007a04:	d008      	beq.n	8007a18 <memmove+0x28>
 8007a06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a0e:	e7f8      	b.n	8007a02 <memmove+0x12>
 8007a10:	4402      	add	r2, r0
 8007a12:	4601      	mov	r1, r0
 8007a14:	428a      	cmp	r2, r1
 8007a16:	d100      	bne.n	8007a1a <memmove+0x2a>
 8007a18:	bd10      	pop	{r4, pc}
 8007a1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a22:	e7f7      	b.n	8007a14 <memmove+0x24>

08007a24 <__malloc_lock>:
 8007a24:	4801      	ldr	r0, [pc, #4]	; (8007a2c <__malloc_lock+0x8>)
 8007a26:	f000 bc17 	b.w	8008258 <__retarget_lock_acquire_recursive>
 8007a2a:	bf00      	nop
 8007a2c:	20000444 	.word	0x20000444

08007a30 <__malloc_unlock>:
 8007a30:	4801      	ldr	r0, [pc, #4]	; (8007a38 <__malloc_unlock+0x8>)
 8007a32:	f000 bc12 	b.w	800825a <__retarget_lock_release_recursive>
 8007a36:	bf00      	nop
 8007a38:	20000444 	.word	0x20000444

08007a3c <_realloc_r>:
 8007a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a3e:	4607      	mov	r7, r0
 8007a40:	4614      	mov	r4, r2
 8007a42:	460e      	mov	r6, r1
 8007a44:	b921      	cbnz	r1, 8007a50 <_realloc_r+0x14>
 8007a46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007a4a:	4611      	mov	r1, r2
 8007a4c:	f7ff bdc8 	b.w	80075e0 <_malloc_r>
 8007a50:	b922      	cbnz	r2, 8007a5c <_realloc_r+0x20>
 8007a52:	f7ff fd75 	bl	8007540 <_free_r>
 8007a56:	4625      	mov	r5, r4
 8007a58:	4628      	mov	r0, r5
 8007a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a5c:	f000 fc62 	bl	8008324 <_malloc_usable_size_r>
 8007a60:	42a0      	cmp	r0, r4
 8007a62:	d20f      	bcs.n	8007a84 <_realloc_r+0x48>
 8007a64:	4621      	mov	r1, r4
 8007a66:	4638      	mov	r0, r7
 8007a68:	f7ff fdba 	bl	80075e0 <_malloc_r>
 8007a6c:	4605      	mov	r5, r0
 8007a6e:	2800      	cmp	r0, #0
 8007a70:	d0f2      	beq.n	8007a58 <_realloc_r+0x1c>
 8007a72:	4631      	mov	r1, r6
 8007a74:	4622      	mov	r2, r4
 8007a76:	f7ff f9c7 	bl	8006e08 <memcpy>
 8007a7a:	4631      	mov	r1, r6
 8007a7c:	4638      	mov	r0, r7
 8007a7e:	f7ff fd5f 	bl	8007540 <_free_r>
 8007a82:	e7e9      	b.n	8007a58 <_realloc_r+0x1c>
 8007a84:	4635      	mov	r5, r6
 8007a86:	e7e7      	b.n	8007a58 <_realloc_r+0x1c>

08007a88 <__sfputc_r>:
 8007a88:	6893      	ldr	r3, [r2, #8]
 8007a8a:	3b01      	subs	r3, #1
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	b410      	push	{r4}
 8007a90:	6093      	str	r3, [r2, #8]
 8007a92:	da08      	bge.n	8007aa6 <__sfputc_r+0x1e>
 8007a94:	6994      	ldr	r4, [r2, #24]
 8007a96:	42a3      	cmp	r3, r4
 8007a98:	db01      	blt.n	8007a9e <__sfputc_r+0x16>
 8007a9a:	290a      	cmp	r1, #10
 8007a9c:	d103      	bne.n	8007aa6 <__sfputc_r+0x1e>
 8007a9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007aa2:	f000 b94b 	b.w	8007d3c <__swbuf_r>
 8007aa6:	6813      	ldr	r3, [r2, #0]
 8007aa8:	1c58      	adds	r0, r3, #1
 8007aaa:	6010      	str	r0, [r2, #0]
 8007aac:	7019      	strb	r1, [r3, #0]
 8007aae:	4608      	mov	r0, r1
 8007ab0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ab4:	4770      	bx	lr

08007ab6 <__sfputs_r>:
 8007ab6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ab8:	4606      	mov	r6, r0
 8007aba:	460f      	mov	r7, r1
 8007abc:	4614      	mov	r4, r2
 8007abe:	18d5      	adds	r5, r2, r3
 8007ac0:	42ac      	cmp	r4, r5
 8007ac2:	d101      	bne.n	8007ac8 <__sfputs_r+0x12>
 8007ac4:	2000      	movs	r0, #0
 8007ac6:	e007      	b.n	8007ad8 <__sfputs_r+0x22>
 8007ac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007acc:	463a      	mov	r2, r7
 8007ace:	4630      	mov	r0, r6
 8007ad0:	f7ff ffda 	bl	8007a88 <__sfputc_r>
 8007ad4:	1c43      	adds	r3, r0, #1
 8007ad6:	d1f3      	bne.n	8007ac0 <__sfputs_r+0xa>
 8007ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007adc <_vfiprintf_r>:
 8007adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ae0:	460d      	mov	r5, r1
 8007ae2:	b09d      	sub	sp, #116	; 0x74
 8007ae4:	4614      	mov	r4, r2
 8007ae6:	4698      	mov	r8, r3
 8007ae8:	4606      	mov	r6, r0
 8007aea:	b118      	cbz	r0, 8007af4 <_vfiprintf_r+0x18>
 8007aec:	6983      	ldr	r3, [r0, #24]
 8007aee:	b90b      	cbnz	r3, 8007af4 <_vfiprintf_r+0x18>
 8007af0:	f000 fb14 	bl	800811c <__sinit>
 8007af4:	4b89      	ldr	r3, [pc, #548]	; (8007d1c <_vfiprintf_r+0x240>)
 8007af6:	429d      	cmp	r5, r3
 8007af8:	d11b      	bne.n	8007b32 <_vfiprintf_r+0x56>
 8007afa:	6875      	ldr	r5, [r6, #4]
 8007afc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007afe:	07d9      	lsls	r1, r3, #31
 8007b00:	d405      	bmi.n	8007b0e <_vfiprintf_r+0x32>
 8007b02:	89ab      	ldrh	r3, [r5, #12]
 8007b04:	059a      	lsls	r2, r3, #22
 8007b06:	d402      	bmi.n	8007b0e <_vfiprintf_r+0x32>
 8007b08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b0a:	f000 fba5 	bl	8008258 <__retarget_lock_acquire_recursive>
 8007b0e:	89ab      	ldrh	r3, [r5, #12]
 8007b10:	071b      	lsls	r3, r3, #28
 8007b12:	d501      	bpl.n	8007b18 <_vfiprintf_r+0x3c>
 8007b14:	692b      	ldr	r3, [r5, #16]
 8007b16:	b9eb      	cbnz	r3, 8007b54 <_vfiprintf_r+0x78>
 8007b18:	4629      	mov	r1, r5
 8007b1a:	4630      	mov	r0, r6
 8007b1c:	f000 f96e 	bl	8007dfc <__swsetup_r>
 8007b20:	b1c0      	cbz	r0, 8007b54 <_vfiprintf_r+0x78>
 8007b22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b24:	07dc      	lsls	r4, r3, #31
 8007b26:	d50e      	bpl.n	8007b46 <_vfiprintf_r+0x6a>
 8007b28:	f04f 30ff 	mov.w	r0, #4294967295
 8007b2c:	b01d      	add	sp, #116	; 0x74
 8007b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b32:	4b7b      	ldr	r3, [pc, #492]	; (8007d20 <_vfiprintf_r+0x244>)
 8007b34:	429d      	cmp	r5, r3
 8007b36:	d101      	bne.n	8007b3c <_vfiprintf_r+0x60>
 8007b38:	68b5      	ldr	r5, [r6, #8]
 8007b3a:	e7df      	b.n	8007afc <_vfiprintf_r+0x20>
 8007b3c:	4b79      	ldr	r3, [pc, #484]	; (8007d24 <_vfiprintf_r+0x248>)
 8007b3e:	429d      	cmp	r5, r3
 8007b40:	bf08      	it	eq
 8007b42:	68f5      	ldreq	r5, [r6, #12]
 8007b44:	e7da      	b.n	8007afc <_vfiprintf_r+0x20>
 8007b46:	89ab      	ldrh	r3, [r5, #12]
 8007b48:	0598      	lsls	r0, r3, #22
 8007b4a:	d4ed      	bmi.n	8007b28 <_vfiprintf_r+0x4c>
 8007b4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b4e:	f000 fb84 	bl	800825a <__retarget_lock_release_recursive>
 8007b52:	e7e9      	b.n	8007b28 <_vfiprintf_r+0x4c>
 8007b54:	2300      	movs	r3, #0
 8007b56:	9309      	str	r3, [sp, #36]	; 0x24
 8007b58:	2320      	movs	r3, #32
 8007b5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b62:	2330      	movs	r3, #48	; 0x30
 8007b64:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007d28 <_vfiprintf_r+0x24c>
 8007b68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b6c:	f04f 0901 	mov.w	r9, #1
 8007b70:	4623      	mov	r3, r4
 8007b72:	469a      	mov	sl, r3
 8007b74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b78:	b10a      	cbz	r2, 8007b7e <_vfiprintf_r+0xa2>
 8007b7a:	2a25      	cmp	r2, #37	; 0x25
 8007b7c:	d1f9      	bne.n	8007b72 <_vfiprintf_r+0x96>
 8007b7e:	ebba 0b04 	subs.w	fp, sl, r4
 8007b82:	d00b      	beq.n	8007b9c <_vfiprintf_r+0xc0>
 8007b84:	465b      	mov	r3, fp
 8007b86:	4622      	mov	r2, r4
 8007b88:	4629      	mov	r1, r5
 8007b8a:	4630      	mov	r0, r6
 8007b8c:	f7ff ff93 	bl	8007ab6 <__sfputs_r>
 8007b90:	3001      	adds	r0, #1
 8007b92:	f000 80aa 	beq.w	8007cea <_vfiprintf_r+0x20e>
 8007b96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b98:	445a      	add	r2, fp
 8007b9a:	9209      	str	r2, [sp, #36]	; 0x24
 8007b9c:	f89a 3000 	ldrb.w	r3, [sl]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	f000 80a2 	beq.w	8007cea <_vfiprintf_r+0x20e>
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8007bac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bb0:	f10a 0a01 	add.w	sl, sl, #1
 8007bb4:	9304      	str	r3, [sp, #16]
 8007bb6:	9307      	str	r3, [sp, #28]
 8007bb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007bbc:	931a      	str	r3, [sp, #104]	; 0x68
 8007bbe:	4654      	mov	r4, sl
 8007bc0:	2205      	movs	r2, #5
 8007bc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bc6:	4858      	ldr	r0, [pc, #352]	; (8007d28 <_vfiprintf_r+0x24c>)
 8007bc8:	f7f8 fb12 	bl	80001f0 <memchr>
 8007bcc:	9a04      	ldr	r2, [sp, #16]
 8007bce:	b9d8      	cbnz	r0, 8007c08 <_vfiprintf_r+0x12c>
 8007bd0:	06d1      	lsls	r1, r2, #27
 8007bd2:	bf44      	itt	mi
 8007bd4:	2320      	movmi	r3, #32
 8007bd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bda:	0713      	lsls	r3, r2, #28
 8007bdc:	bf44      	itt	mi
 8007bde:	232b      	movmi	r3, #43	; 0x2b
 8007be0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007be4:	f89a 3000 	ldrb.w	r3, [sl]
 8007be8:	2b2a      	cmp	r3, #42	; 0x2a
 8007bea:	d015      	beq.n	8007c18 <_vfiprintf_r+0x13c>
 8007bec:	9a07      	ldr	r2, [sp, #28]
 8007bee:	4654      	mov	r4, sl
 8007bf0:	2000      	movs	r0, #0
 8007bf2:	f04f 0c0a 	mov.w	ip, #10
 8007bf6:	4621      	mov	r1, r4
 8007bf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bfc:	3b30      	subs	r3, #48	; 0x30
 8007bfe:	2b09      	cmp	r3, #9
 8007c00:	d94e      	bls.n	8007ca0 <_vfiprintf_r+0x1c4>
 8007c02:	b1b0      	cbz	r0, 8007c32 <_vfiprintf_r+0x156>
 8007c04:	9207      	str	r2, [sp, #28]
 8007c06:	e014      	b.n	8007c32 <_vfiprintf_r+0x156>
 8007c08:	eba0 0308 	sub.w	r3, r0, r8
 8007c0c:	fa09 f303 	lsl.w	r3, r9, r3
 8007c10:	4313      	orrs	r3, r2
 8007c12:	9304      	str	r3, [sp, #16]
 8007c14:	46a2      	mov	sl, r4
 8007c16:	e7d2      	b.n	8007bbe <_vfiprintf_r+0xe2>
 8007c18:	9b03      	ldr	r3, [sp, #12]
 8007c1a:	1d19      	adds	r1, r3, #4
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	9103      	str	r1, [sp, #12]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	bfbb      	ittet	lt
 8007c24:	425b      	neglt	r3, r3
 8007c26:	f042 0202 	orrlt.w	r2, r2, #2
 8007c2a:	9307      	strge	r3, [sp, #28]
 8007c2c:	9307      	strlt	r3, [sp, #28]
 8007c2e:	bfb8      	it	lt
 8007c30:	9204      	strlt	r2, [sp, #16]
 8007c32:	7823      	ldrb	r3, [r4, #0]
 8007c34:	2b2e      	cmp	r3, #46	; 0x2e
 8007c36:	d10c      	bne.n	8007c52 <_vfiprintf_r+0x176>
 8007c38:	7863      	ldrb	r3, [r4, #1]
 8007c3a:	2b2a      	cmp	r3, #42	; 0x2a
 8007c3c:	d135      	bne.n	8007caa <_vfiprintf_r+0x1ce>
 8007c3e:	9b03      	ldr	r3, [sp, #12]
 8007c40:	1d1a      	adds	r2, r3, #4
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	9203      	str	r2, [sp, #12]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	bfb8      	it	lt
 8007c4a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c4e:	3402      	adds	r4, #2
 8007c50:	9305      	str	r3, [sp, #20]
 8007c52:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007d38 <_vfiprintf_r+0x25c>
 8007c56:	7821      	ldrb	r1, [r4, #0]
 8007c58:	2203      	movs	r2, #3
 8007c5a:	4650      	mov	r0, sl
 8007c5c:	f7f8 fac8 	bl	80001f0 <memchr>
 8007c60:	b140      	cbz	r0, 8007c74 <_vfiprintf_r+0x198>
 8007c62:	2340      	movs	r3, #64	; 0x40
 8007c64:	eba0 000a 	sub.w	r0, r0, sl
 8007c68:	fa03 f000 	lsl.w	r0, r3, r0
 8007c6c:	9b04      	ldr	r3, [sp, #16]
 8007c6e:	4303      	orrs	r3, r0
 8007c70:	3401      	adds	r4, #1
 8007c72:	9304      	str	r3, [sp, #16]
 8007c74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c78:	482c      	ldr	r0, [pc, #176]	; (8007d2c <_vfiprintf_r+0x250>)
 8007c7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c7e:	2206      	movs	r2, #6
 8007c80:	f7f8 fab6 	bl	80001f0 <memchr>
 8007c84:	2800      	cmp	r0, #0
 8007c86:	d03f      	beq.n	8007d08 <_vfiprintf_r+0x22c>
 8007c88:	4b29      	ldr	r3, [pc, #164]	; (8007d30 <_vfiprintf_r+0x254>)
 8007c8a:	bb1b      	cbnz	r3, 8007cd4 <_vfiprintf_r+0x1f8>
 8007c8c:	9b03      	ldr	r3, [sp, #12]
 8007c8e:	3307      	adds	r3, #7
 8007c90:	f023 0307 	bic.w	r3, r3, #7
 8007c94:	3308      	adds	r3, #8
 8007c96:	9303      	str	r3, [sp, #12]
 8007c98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c9a:	443b      	add	r3, r7
 8007c9c:	9309      	str	r3, [sp, #36]	; 0x24
 8007c9e:	e767      	b.n	8007b70 <_vfiprintf_r+0x94>
 8007ca0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ca4:	460c      	mov	r4, r1
 8007ca6:	2001      	movs	r0, #1
 8007ca8:	e7a5      	b.n	8007bf6 <_vfiprintf_r+0x11a>
 8007caa:	2300      	movs	r3, #0
 8007cac:	3401      	adds	r4, #1
 8007cae:	9305      	str	r3, [sp, #20]
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	f04f 0c0a 	mov.w	ip, #10
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cbc:	3a30      	subs	r2, #48	; 0x30
 8007cbe:	2a09      	cmp	r2, #9
 8007cc0:	d903      	bls.n	8007cca <_vfiprintf_r+0x1ee>
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d0c5      	beq.n	8007c52 <_vfiprintf_r+0x176>
 8007cc6:	9105      	str	r1, [sp, #20]
 8007cc8:	e7c3      	b.n	8007c52 <_vfiprintf_r+0x176>
 8007cca:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cce:	4604      	mov	r4, r0
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	e7f0      	b.n	8007cb6 <_vfiprintf_r+0x1da>
 8007cd4:	ab03      	add	r3, sp, #12
 8007cd6:	9300      	str	r3, [sp, #0]
 8007cd8:	462a      	mov	r2, r5
 8007cda:	4b16      	ldr	r3, [pc, #88]	; (8007d34 <_vfiprintf_r+0x258>)
 8007cdc:	a904      	add	r1, sp, #16
 8007cde:	4630      	mov	r0, r6
 8007ce0:	f7fd fe22 	bl	8005928 <_printf_float>
 8007ce4:	4607      	mov	r7, r0
 8007ce6:	1c78      	adds	r0, r7, #1
 8007ce8:	d1d6      	bne.n	8007c98 <_vfiprintf_r+0x1bc>
 8007cea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cec:	07d9      	lsls	r1, r3, #31
 8007cee:	d405      	bmi.n	8007cfc <_vfiprintf_r+0x220>
 8007cf0:	89ab      	ldrh	r3, [r5, #12]
 8007cf2:	059a      	lsls	r2, r3, #22
 8007cf4:	d402      	bmi.n	8007cfc <_vfiprintf_r+0x220>
 8007cf6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cf8:	f000 faaf 	bl	800825a <__retarget_lock_release_recursive>
 8007cfc:	89ab      	ldrh	r3, [r5, #12]
 8007cfe:	065b      	lsls	r3, r3, #25
 8007d00:	f53f af12 	bmi.w	8007b28 <_vfiprintf_r+0x4c>
 8007d04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d06:	e711      	b.n	8007b2c <_vfiprintf_r+0x50>
 8007d08:	ab03      	add	r3, sp, #12
 8007d0a:	9300      	str	r3, [sp, #0]
 8007d0c:	462a      	mov	r2, r5
 8007d0e:	4b09      	ldr	r3, [pc, #36]	; (8007d34 <_vfiprintf_r+0x258>)
 8007d10:	a904      	add	r1, sp, #16
 8007d12:	4630      	mov	r0, r6
 8007d14:	f7fe f8ac 	bl	8005e70 <_printf_i>
 8007d18:	e7e4      	b.n	8007ce4 <_vfiprintf_r+0x208>
 8007d1a:	bf00      	nop
 8007d1c:	08008e2c 	.word	0x08008e2c
 8007d20:	08008e4c 	.word	0x08008e4c
 8007d24:	08008e0c 	.word	0x08008e0c
 8007d28:	08008cb4 	.word	0x08008cb4
 8007d2c:	08008cbe 	.word	0x08008cbe
 8007d30:	08005929 	.word	0x08005929
 8007d34:	08007ab7 	.word	0x08007ab7
 8007d38:	08008cba 	.word	0x08008cba

08007d3c <__swbuf_r>:
 8007d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d3e:	460e      	mov	r6, r1
 8007d40:	4614      	mov	r4, r2
 8007d42:	4605      	mov	r5, r0
 8007d44:	b118      	cbz	r0, 8007d4e <__swbuf_r+0x12>
 8007d46:	6983      	ldr	r3, [r0, #24]
 8007d48:	b90b      	cbnz	r3, 8007d4e <__swbuf_r+0x12>
 8007d4a:	f000 f9e7 	bl	800811c <__sinit>
 8007d4e:	4b21      	ldr	r3, [pc, #132]	; (8007dd4 <__swbuf_r+0x98>)
 8007d50:	429c      	cmp	r4, r3
 8007d52:	d12b      	bne.n	8007dac <__swbuf_r+0x70>
 8007d54:	686c      	ldr	r4, [r5, #4]
 8007d56:	69a3      	ldr	r3, [r4, #24]
 8007d58:	60a3      	str	r3, [r4, #8]
 8007d5a:	89a3      	ldrh	r3, [r4, #12]
 8007d5c:	071a      	lsls	r2, r3, #28
 8007d5e:	d52f      	bpl.n	8007dc0 <__swbuf_r+0x84>
 8007d60:	6923      	ldr	r3, [r4, #16]
 8007d62:	b36b      	cbz	r3, 8007dc0 <__swbuf_r+0x84>
 8007d64:	6923      	ldr	r3, [r4, #16]
 8007d66:	6820      	ldr	r0, [r4, #0]
 8007d68:	1ac0      	subs	r0, r0, r3
 8007d6a:	6963      	ldr	r3, [r4, #20]
 8007d6c:	b2f6      	uxtb	r6, r6
 8007d6e:	4283      	cmp	r3, r0
 8007d70:	4637      	mov	r7, r6
 8007d72:	dc04      	bgt.n	8007d7e <__swbuf_r+0x42>
 8007d74:	4621      	mov	r1, r4
 8007d76:	4628      	mov	r0, r5
 8007d78:	f000 f93c 	bl	8007ff4 <_fflush_r>
 8007d7c:	bb30      	cbnz	r0, 8007dcc <__swbuf_r+0x90>
 8007d7e:	68a3      	ldr	r3, [r4, #8]
 8007d80:	3b01      	subs	r3, #1
 8007d82:	60a3      	str	r3, [r4, #8]
 8007d84:	6823      	ldr	r3, [r4, #0]
 8007d86:	1c5a      	adds	r2, r3, #1
 8007d88:	6022      	str	r2, [r4, #0]
 8007d8a:	701e      	strb	r6, [r3, #0]
 8007d8c:	6963      	ldr	r3, [r4, #20]
 8007d8e:	3001      	adds	r0, #1
 8007d90:	4283      	cmp	r3, r0
 8007d92:	d004      	beq.n	8007d9e <__swbuf_r+0x62>
 8007d94:	89a3      	ldrh	r3, [r4, #12]
 8007d96:	07db      	lsls	r3, r3, #31
 8007d98:	d506      	bpl.n	8007da8 <__swbuf_r+0x6c>
 8007d9a:	2e0a      	cmp	r6, #10
 8007d9c:	d104      	bne.n	8007da8 <__swbuf_r+0x6c>
 8007d9e:	4621      	mov	r1, r4
 8007da0:	4628      	mov	r0, r5
 8007da2:	f000 f927 	bl	8007ff4 <_fflush_r>
 8007da6:	b988      	cbnz	r0, 8007dcc <__swbuf_r+0x90>
 8007da8:	4638      	mov	r0, r7
 8007daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dac:	4b0a      	ldr	r3, [pc, #40]	; (8007dd8 <__swbuf_r+0x9c>)
 8007dae:	429c      	cmp	r4, r3
 8007db0:	d101      	bne.n	8007db6 <__swbuf_r+0x7a>
 8007db2:	68ac      	ldr	r4, [r5, #8]
 8007db4:	e7cf      	b.n	8007d56 <__swbuf_r+0x1a>
 8007db6:	4b09      	ldr	r3, [pc, #36]	; (8007ddc <__swbuf_r+0xa0>)
 8007db8:	429c      	cmp	r4, r3
 8007dba:	bf08      	it	eq
 8007dbc:	68ec      	ldreq	r4, [r5, #12]
 8007dbe:	e7ca      	b.n	8007d56 <__swbuf_r+0x1a>
 8007dc0:	4621      	mov	r1, r4
 8007dc2:	4628      	mov	r0, r5
 8007dc4:	f000 f81a 	bl	8007dfc <__swsetup_r>
 8007dc8:	2800      	cmp	r0, #0
 8007dca:	d0cb      	beq.n	8007d64 <__swbuf_r+0x28>
 8007dcc:	f04f 37ff 	mov.w	r7, #4294967295
 8007dd0:	e7ea      	b.n	8007da8 <__swbuf_r+0x6c>
 8007dd2:	bf00      	nop
 8007dd4:	08008e2c 	.word	0x08008e2c
 8007dd8:	08008e4c 	.word	0x08008e4c
 8007ddc:	08008e0c 	.word	0x08008e0c

08007de0 <__ascii_wctomb>:
 8007de0:	b149      	cbz	r1, 8007df6 <__ascii_wctomb+0x16>
 8007de2:	2aff      	cmp	r2, #255	; 0xff
 8007de4:	bf85      	ittet	hi
 8007de6:	238a      	movhi	r3, #138	; 0x8a
 8007de8:	6003      	strhi	r3, [r0, #0]
 8007dea:	700a      	strbls	r2, [r1, #0]
 8007dec:	f04f 30ff 	movhi.w	r0, #4294967295
 8007df0:	bf98      	it	ls
 8007df2:	2001      	movls	r0, #1
 8007df4:	4770      	bx	lr
 8007df6:	4608      	mov	r0, r1
 8007df8:	4770      	bx	lr
	...

08007dfc <__swsetup_r>:
 8007dfc:	4b32      	ldr	r3, [pc, #200]	; (8007ec8 <__swsetup_r+0xcc>)
 8007dfe:	b570      	push	{r4, r5, r6, lr}
 8007e00:	681d      	ldr	r5, [r3, #0]
 8007e02:	4606      	mov	r6, r0
 8007e04:	460c      	mov	r4, r1
 8007e06:	b125      	cbz	r5, 8007e12 <__swsetup_r+0x16>
 8007e08:	69ab      	ldr	r3, [r5, #24]
 8007e0a:	b913      	cbnz	r3, 8007e12 <__swsetup_r+0x16>
 8007e0c:	4628      	mov	r0, r5
 8007e0e:	f000 f985 	bl	800811c <__sinit>
 8007e12:	4b2e      	ldr	r3, [pc, #184]	; (8007ecc <__swsetup_r+0xd0>)
 8007e14:	429c      	cmp	r4, r3
 8007e16:	d10f      	bne.n	8007e38 <__swsetup_r+0x3c>
 8007e18:	686c      	ldr	r4, [r5, #4]
 8007e1a:	89a3      	ldrh	r3, [r4, #12]
 8007e1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e20:	0719      	lsls	r1, r3, #28
 8007e22:	d42c      	bmi.n	8007e7e <__swsetup_r+0x82>
 8007e24:	06dd      	lsls	r5, r3, #27
 8007e26:	d411      	bmi.n	8007e4c <__swsetup_r+0x50>
 8007e28:	2309      	movs	r3, #9
 8007e2a:	6033      	str	r3, [r6, #0]
 8007e2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007e30:	81a3      	strh	r3, [r4, #12]
 8007e32:	f04f 30ff 	mov.w	r0, #4294967295
 8007e36:	e03e      	b.n	8007eb6 <__swsetup_r+0xba>
 8007e38:	4b25      	ldr	r3, [pc, #148]	; (8007ed0 <__swsetup_r+0xd4>)
 8007e3a:	429c      	cmp	r4, r3
 8007e3c:	d101      	bne.n	8007e42 <__swsetup_r+0x46>
 8007e3e:	68ac      	ldr	r4, [r5, #8]
 8007e40:	e7eb      	b.n	8007e1a <__swsetup_r+0x1e>
 8007e42:	4b24      	ldr	r3, [pc, #144]	; (8007ed4 <__swsetup_r+0xd8>)
 8007e44:	429c      	cmp	r4, r3
 8007e46:	bf08      	it	eq
 8007e48:	68ec      	ldreq	r4, [r5, #12]
 8007e4a:	e7e6      	b.n	8007e1a <__swsetup_r+0x1e>
 8007e4c:	0758      	lsls	r0, r3, #29
 8007e4e:	d512      	bpl.n	8007e76 <__swsetup_r+0x7a>
 8007e50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e52:	b141      	cbz	r1, 8007e66 <__swsetup_r+0x6a>
 8007e54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e58:	4299      	cmp	r1, r3
 8007e5a:	d002      	beq.n	8007e62 <__swsetup_r+0x66>
 8007e5c:	4630      	mov	r0, r6
 8007e5e:	f7ff fb6f 	bl	8007540 <_free_r>
 8007e62:	2300      	movs	r3, #0
 8007e64:	6363      	str	r3, [r4, #52]	; 0x34
 8007e66:	89a3      	ldrh	r3, [r4, #12]
 8007e68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007e6c:	81a3      	strh	r3, [r4, #12]
 8007e6e:	2300      	movs	r3, #0
 8007e70:	6063      	str	r3, [r4, #4]
 8007e72:	6923      	ldr	r3, [r4, #16]
 8007e74:	6023      	str	r3, [r4, #0]
 8007e76:	89a3      	ldrh	r3, [r4, #12]
 8007e78:	f043 0308 	orr.w	r3, r3, #8
 8007e7c:	81a3      	strh	r3, [r4, #12]
 8007e7e:	6923      	ldr	r3, [r4, #16]
 8007e80:	b94b      	cbnz	r3, 8007e96 <__swsetup_r+0x9a>
 8007e82:	89a3      	ldrh	r3, [r4, #12]
 8007e84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e8c:	d003      	beq.n	8007e96 <__swsetup_r+0x9a>
 8007e8e:	4621      	mov	r1, r4
 8007e90:	4630      	mov	r0, r6
 8007e92:	f000 fa07 	bl	80082a4 <__smakebuf_r>
 8007e96:	89a0      	ldrh	r0, [r4, #12]
 8007e98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e9c:	f010 0301 	ands.w	r3, r0, #1
 8007ea0:	d00a      	beq.n	8007eb8 <__swsetup_r+0xbc>
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	60a3      	str	r3, [r4, #8]
 8007ea6:	6963      	ldr	r3, [r4, #20]
 8007ea8:	425b      	negs	r3, r3
 8007eaa:	61a3      	str	r3, [r4, #24]
 8007eac:	6923      	ldr	r3, [r4, #16]
 8007eae:	b943      	cbnz	r3, 8007ec2 <__swsetup_r+0xc6>
 8007eb0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007eb4:	d1ba      	bne.n	8007e2c <__swsetup_r+0x30>
 8007eb6:	bd70      	pop	{r4, r5, r6, pc}
 8007eb8:	0781      	lsls	r1, r0, #30
 8007eba:	bf58      	it	pl
 8007ebc:	6963      	ldrpl	r3, [r4, #20]
 8007ebe:	60a3      	str	r3, [r4, #8]
 8007ec0:	e7f4      	b.n	8007eac <__swsetup_r+0xb0>
 8007ec2:	2000      	movs	r0, #0
 8007ec4:	e7f7      	b.n	8007eb6 <__swsetup_r+0xba>
 8007ec6:	bf00      	nop
 8007ec8:	20000014 	.word	0x20000014
 8007ecc:	08008e2c 	.word	0x08008e2c
 8007ed0:	08008e4c 	.word	0x08008e4c
 8007ed4:	08008e0c 	.word	0x08008e0c

08007ed8 <abort>:
 8007ed8:	b508      	push	{r3, lr}
 8007eda:	2006      	movs	r0, #6
 8007edc:	f000 fa52 	bl	8008384 <raise>
 8007ee0:	2001      	movs	r0, #1
 8007ee2:	f7fa fabf 	bl	8002464 <_exit>
	...

08007ee8 <__sflush_r>:
 8007ee8:	898a      	ldrh	r2, [r1, #12]
 8007eea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eee:	4605      	mov	r5, r0
 8007ef0:	0710      	lsls	r0, r2, #28
 8007ef2:	460c      	mov	r4, r1
 8007ef4:	d458      	bmi.n	8007fa8 <__sflush_r+0xc0>
 8007ef6:	684b      	ldr	r3, [r1, #4]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	dc05      	bgt.n	8007f08 <__sflush_r+0x20>
 8007efc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	dc02      	bgt.n	8007f08 <__sflush_r+0x20>
 8007f02:	2000      	movs	r0, #0
 8007f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f0a:	2e00      	cmp	r6, #0
 8007f0c:	d0f9      	beq.n	8007f02 <__sflush_r+0x1a>
 8007f0e:	2300      	movs	r3, #0
 8007f10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f14:	682f      	ldr	r7, [r5, #0]
 8007f16:	602b      	str	r3, [r5, #0]
 8007f18:	d032      	beq.n	8007f80 <__sflush_r+0x98>
 8007f1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f1c:	89a3      	ldrh	r3, [r4, #12]
 8007f1e:	075a      	lsls	r2, r3, #29
 8007f20:	d505      	bpl.n	8007f2e <__sflush_r+0x46>
 8007f22:	6863      	ldr	r3, [r4, #4]
 8007f24:	1ac0      	subs	r0, r0, r3
 8007f26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f28:	b10b      	cbz	r3, 8007f2e <__sflush_r+0x46>
 8007f2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f2c:	1ac0      	subs	r0, r0, r3
 8007f2e:	2300      	movs	r3, #0
 8007f30:	4602      	mov	r2, r0
 8007f32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f34:	6a21      	ldr	r1, [r4, #32]
 8007f36:	4628      	mov	r0, r5
 8007f38:	47b0      	blx	r6
 8007f3a:	1c43      	adds	r3, r0, #1
 8007f3c:	89a3      	ldrh	r3, [r4, #12]
 8007f3e:	d106      	bne.n	8007f4e <__sflush_r+0x66>
 8007f40:	6829      	ldr	r1, [r5, #0]
 8007f42:	291d      	cmp	r1, #29
 8007f44:	d82c      	bhi.n	8007fa0 <__sflush_r+0xb8>
 8007f46:	4a2a      	ldr	r2, [pc, #168]	; (8007ff0 <__sflush_r+0x108>)
 8007f48:	40ca      	lsrs	r2, r1
 8007f4a:	07d6      	lsls	r6, r2, #31
 8007f4c:	d528      	bpl.n	8007fa0 <__sflush_r+0xb8>
 8007f4e:	2200      	movs	r2, #0
 8007f50:	6062      	str	r2, [r4, #4]
 8007f52:	04d9      	lsls	r1, r3, #19
 8007f54:	6922      	ldr	r2, [r4, #16]
 8007f56:	6022      	str	r2, [r4, #0]
 8007f58:	d504      	bpl.n	8007f64 <__sflush_r+0x7c>
 8007f5a:	1c42      	adds	r2, r0, #1
 8007f5c:	d101      	bne.n	8007f62 <__sflush_r+0x7a>
 8007f5e:	682b      	ldr	r3, [r5, #0]
 8007f60:	b903      	cbnz	r3, 8007f64 <__sflush_r+0x7c>
 8007f62:	6560      	str	r0, [r4, #84]	; 0x54
 8007f64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f66:	602f      	str	r7, [r5, #0]
 8007f68:	2900      	cmp	r1, #0
 8007f6a:	d0ca      	beq.n	8007f02 <__sflush_r+0x1a>
 8007f6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f70:	4299      	cmp	r1, r3
 8007f72:	d002      	beq.n	8007f7a <__sflush_r+0x92>
 8007f74:	4628      	mov	r0, r5
 8007f76:	f7ff fae3 	bl	8007540 <_free_r>
 8007f7a:	2000      	movs	r0, #0
 8007f7c:	6360      	str	r0, [r4, #52]	; 0x34
 8007f7e:	e7c1      	b.n	8007f04 <__sflush_r+0x1c>
 8007f80:	6a21      	ldr	r1, [r4, #32]
 8007f82:	2301      	movs	r3, #1
 8007f84:	4628      	mov	r0, r5
 8007f86:	47b0      	blx	r6
 8007f88:	1c41      	adds	r1, r0, #1
 8007f8a:	d1c7      	bne.n	8007f1c <__sflush_r+0x34>
 8007f8c:	682b      	ldr	r3, [r5, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d0c4      	beq.n	8007f1c <__sflush_r+0x34>
 8007f92:	2b1d      	cmp	r3, #29
 8007f94:	d001      	beq.n	8007f9a <__sflush_r+0xb2>
 8007f96:	2b16      	cmp	r3, #22
 8007f98:	d101      	bne.n	8007f9e <__sflush_r+0xb6>
 8007f9a:	602f      	str	r7, [r5, #0]
 8007f9c:	e7b1      	b.n	8007f02 <__sflush_r+0x1a>
 8007f9e:	89a3      	ldrh	r3, [r4, #12]
 8007fa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fa4:	81a3      	strh	r3, [r4, #12]
 8007fa6:	e7ad      	b.n	8007f04 <__sflush_r+0x1c>
 8007fa8:	690f      	ldr	r7, [r1, #16]
 8007faa:	2f00      	cmp	r7, #0
 8007fac:	d0a9      	beq.n	8007f02 <__sflush_r+0x1a>
 8007fae:	0793      	lsls	r3, r2, #30
 8007fb0:	680e      	ldr	r6, [r1, #0]
 8007fb2:	bf08      	it	eq
 8007fb4:	694b      	ldreq	r3, [r1, #20]
 8007fb6:	600f      	str	r7, [r1, #0]
 8007fb8:	bf18      	it	ne
 8007fba:	2300      	movne	r3, #0
 8007fbc:	eba6 0807 	sub.w	r8, r6, r7
 8007fc0:	608b      	str	r3, [r1, #8]
 8007fc2:	f1b8 0f00 	cmp.w	r8, #0
 8007fc6:	dd9c      	ble.n	8007f02 <__sflush_r+0x1a>
 8007fc8:	6a21      	ldr	r1, [r4, #32]
 8007fca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007fcc:	4643      	mov	r3, r8
 8007fce:	463a      	mov	r2, r7
 8007fd0:	4628      	mov	r0, r5
 8007fd2:	47b0      	blx	r6
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	dc06      	bgt.n	8007fe6 <__sflush_r+0xfe>
 8007fd8:	89a3      	ldrh	r3, [r4, #12]
 8007fda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fde:	81a3      	strh	r3, [r4, #12]
 8007fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fe4:	e78e      	b.n	8007f04 <__sflush_r+0x1c>
 8007fe6:	4407      	add	r7, r0
 8007fe8:	eba8 0800 	sub.w	r8, r8, r0
 8007fec:	e7e9      	b.n	8007fc2 <__sflush_r+0xda>
 8007fee:	bf00      	nop
 8007ff0:	20400001 	.word	0x20400001

08007ff4 <_fflush_r>:
 8007ff4:	b538      	push	{r3, r4, r5, lr}
 8007ff6:	690b      	ldr	r3, [r1, #16]
 8007ff8:	4605      	mov	r5, r0
 8007ffa:	460c      	mov	r4, r1
 8007ffc:	b913      	cbnz	r3, 8008004 <_fflush_r+0x10>
 8007ffe:	2500      	movs	r5, #0
 8008000:	4628      	mov	r0, r5
 8008002:	bd38      	pop	{r3, r4, r5, pc}
 8008004:	b118      	cbz	r0, 800800e <_fflush_r+0x1a>
 8008006:	6983      	ldr	r3, [r0, #24]
 8008008:	b90b      	cbnz	r3, 800800e <_fflush_r+0x1a>
 800800a:	f000 f887 	bl	800811c <__sinit>
 800800e:	4b14      	ldr	r3, [pc, #80]	; (8008060 <_fflush_r+0x6c>)
 8008010:	429c      	cmp	r4, r3
 8008012:	d11b      	bne.n	800804c <_fflush_r+0x58>
 8008014:	686c      	ldr	r4, [r5, #4]
 8008016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d0ef      	beq.n	8007ffe <_fflush_r+0xa>
 800801e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008020:	07d0      	lsls	r0, r2, #31
 8008022:	d404      	bmi.n	800802e <_fflush_r+0x3a>
 8008024:	0599      	lsls	r1, r3, #22
 8008026:	d402      	bmi.n	800802e <_fflush_r+0x3a>
 8008028:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800802a:	f000 f915 	bl	8008258 <__retarget_lock_acquire_recursive>
 800802e:	4628      	mov	r0, r5
 8008030:	4621      	mov	r1, r4
 8008032:	f7ff ff59 	bl	8007ee8 <__sflush_r>
 8008036:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008038:	07da      	lsls	r2, r3, #31
 800803a:	4605      	mov	r5, r0
 800803c:	d4e0      	bmi.n	8008000 <_fflush_r+0xc>
 800803e:	89a3      	ldrh	r3, [r4, #12]
 8008040:	059b      	lsls	r3, r3, #22
 8008042:	d4dd      	bmi.n	8008000 <_fflush_r+0xc>
 8008044:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008046:	f000 f908 	bl	800825a <__retarget_lock_release_recursive>
 800804a:	e7d9      	b.n	8008000 <_fflush_r+0xc>
 800804c:	4b05      	ldr	r3, [pc, #20]	; (8008064 <_fflush_r+0x70>)
 800804e:	429c      	cmp	r4, r3
 8008050:	d101      	bne.n	8008056 <_fflush_r+0x62>
 8008052:	68ac      	ldr	r4, [r5, #8]
 8008054:	e7df      	b.n	8008016 <_fflush_r+0x22>
 8008056:	4b04      	ldr	r3, [pc, #16]	; (8008068 <_fflush_r+0x74>)
 8008058:	429c      	cmp	r4, r3
 800805a:	bf08      	it	eq
 800805c:	68ec      	ldreq	r4, [r5, #12]
 800805e:	e7da      	b.n	8008016 <_fflush_r+0x22>
 8008060:	08008e2c 	.word	0x08008e2c
 8008064:	08008e4c 	.word	0x08008e4c
 8008068:	08008e0c 	.word	0x08008e0c

0800806c <std>:
 800806c:	2300      	movs	r3, #0
 800806e:	b510      	push	{r4, lr}
 8008070:	4604      	mov	r4, r0
 8008072:	e9c0 3300 	strd	r3, r3, [r0]
 8008076:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800807a:	6083      	str	r3, [r0, #8]
 800807c:	8181      	strh	r1, [r0, #12]
 800807e:	6643      	str	r3, [r0, #100]	; 0x64
 8008080:	81c2      	strh	r2, [r0, #14]
 8008082:	6183      	str	r3, [r0, #24]
 8008084:	4619      	mov	r1, r3
 8008086:	2208      	movs	r2, #8
 8008088:	305c      	adds	r0, #92	; 0x5c
 800808a:	f7fd fba5 	bl	80057d8 <memset>
 800808e:	4b05      	ldr	r3, [pc, #20]	; (80080a4 <std+0x38>)
 8008090:	6263      	str	r3, [r4, #36]	; 0x24
 8008092:	4b05      	ldr	r3, [pc, #20]	; (80080a8 <std+0x3c>)
 8008094:	62a3      	str	r3, [r4, #40]	; 0x28
 8008096:	4b05      	ldr	r3, [pc, #20]	; (80080ac <std+0x40>)
 8008098:	62e3      	str	r3, [r4, #44]	; 0x2c
 800809a:	4b05      	ldr	r3, [pc, #20]	; (80080b0 <std+0x44>)
 800809c:	6224      	str	r4, [r4, #32]
 800809e:	6323      	str	r3, [r4, #48]	; 0x30
 80080a0:	bd10      	pop	{r4, pc}
 80080a2:	bf00      	nop
 80080a4:	080083bd 	.word	0x080083bd
 80080a8:	080083df 	.word	0x080083df
 80080ac:	08008417 	.word	0x08008417
 80080b0:	0800843b 	.word	0x0800843b

080080b4 <_cleanup_r>:
 80080b4:	4901      	ldr	r1, [pc, #4]	; (80080bc <_cleanup_r+0x8>)
 80080b6:	f000 b8af 	b.w	8008218 <_fwalk_reent>
 80080ba:	bf00      	nop
 80080bc:	08007ff5 	.word	0x08007ff5

080080c0 <__sfmoreglue>:
 80080c0:	b570      	push	{r4, r5, r6, lr}
 80080c2:	1e4a      	subs	r2, r1, #1
 80080c4:	2568      	movs	r5, #104	; 0x68
 80080c6:	4355      	muls	r5, r2
 80080c8:	460e      	mov	r6, r1
 80080ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80080ce:	f7ff fa87 	bl	80075e0 <_malloc_r>
 80080d2:	4604      	mov	r4, r0
 80080d4:	b140      	cbz	r0, 80080e8 <__sfmoreglue+0x28>
 80080d6:	2100      	movs	r1, #0
 80080d8:	e9c0 1600 	strd	r1, r6, [r0]
 80080dc:	300c      	adds	r0, #12
 80080de:	60a0      	str	r0, [r4, #8]
 80080e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80080e4:	f7fd fb78 	bl	80057d8 <memset>
 80080e8:	4620      	mov	r0, r4
 80080ea:	bd70      	pop	{r4, r5, r6, pc}

080080ec <__sfp_lock_acquire>:
 80080ec:	4801      	ldr	r0, [pc, #4]	; (80080f4 <__sfp_lock_acquire+0x8>)
 80080ee:	f000 b8b3 	b.w	8008258 <__retarget_lock_acquire_recursive>
 80080f2:	bf00      	nop
 80080f4:	20000448 	.word	0x20000448

080080f8 <__sfp_lock_release>:
 80080f8:	4801      	ldr	r0, [pc, #4]	; (8008100 <__sfp_lock_release+0x8>)
 80080fa:	f000 b8ae 	b.w	800825a <__retarget_lock_release_recursive>
 80080fe:	bf00      	nop
 8008100:	20000448 	.word	0x20000448

08008104 <__sinit_lock_acquire>:
 8008104:	4801      	ldr	r0, [pc, #4]	; (800810c <__sinit_lock_acquire+0x8>)
 8008106:	f000 b8a7 	b.w	8008258 <__retarget_lock_acquire_recursive>
 800810a:	bf00      	nop
 800810c:	20000443 	.word	0x20000443

08008110 <__sinit_lock_release>:
 8008110:	4801      	ldr	r0, [pc, #4]	; (8008118 <__sinit_lock_release+0x8>)
 8008112:	f000 b8a2 	b.w	800825a <__retarget_lock_release_recursive>
 8008116:	bf00      	nop
 8008118:	20000443 	.word	0x20000443

0800811c <__sinit>:
 800811c:	b510      	push	{r4, lr}
 800811e:	4604      	mov	r4, r0
 8008120:	f7ff fff0 	bl	8008104 <__sinit_lock_acquire>
 8008124:	69a3      	ldr	r3, [r4, #24]
 8008126:	b11b      	cbz	r3, 8008130 <__sinit+0x14>
 8008128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800812c:	f7ff bff0 	b.w	8008110 <__sinit_lock_release>
 8008130:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008134:	6523      	str	r3, [r4, #80]	; 0x50
 8008136:	4b13      	ldr	r3, [pc, #76]	; (8008184 <__sinit+0x68>)
 8008138:	4a13      	ldr	r2, [pc, #76]	; (8008188 <__sinit+0x6c>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	62a2      	str	r2, [r4, #40]	; 0x28
 800813e:	42a3      	cmp	r3, r4
 8008140:	bf04      	itt	eq
 8008142:	2301      	moveq	r3, #1
 8008144:	61a3      	streq	r3, [r4, #24]
 8008146:	4620      	mov	r0, r4
 8008148:	f000 f820 	bl	800818c <__sfp>
 800814c:	6060      	str	r0, [r4, #4]
 800814e:	4620      	mov	r0, r4
 8008150:	f000 f81c 	bl	800818c <__sfp>
 8008154:	60a0      	str	r0, [r4, #8]
 8008156:	4620      	mov	r0, r4
 8008158:	f000 f818 	bl	800818c <__sfp>
 800815c:	2200      	movs	r2, #0
 800815e:	60e0      	str	r0, [r4, #12]
 8008160:	2104      	movs	r1, #4
 8008162:	6860      	ldr	r0, [r4, #4]
 8008164:	f7ff ff82 	bl	800806c <std>
 8008168:	68a0      	ldr	r0, [r4, #8]
 800816a:	2201      	movs	r2, #1
 800816c:	2109      	movs	r1, #9
 800816e:	f7ff ff7d 	bl	800806c <std>
 8008172:	68e0      	ldr	r0, [r4, #12]
 8008174:	2202      	movs	r2, #2
 8008176:	2112      	movs	r1, #18
 8008178:	f7ff ff78 	bl	800806c <std>
 800817c:	2301      	movs	r3, #1
 800817e:	61a3      	str	r3, [r4, #24]
 8008180:	e7d2      	b.n	8008128 <__sinit+0xc>
 8008182:	bf00      	nop
 8008184:	08008a8c 	.word	0x08008a8c
 8008188:	080080b5 	.word	0x080080b5

0800818c <__sfp>:
 800818c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800818e:	4607      	mov	r7, r0
 8008190:	f7ff ffac 	bl	80080ec <__sfp_lock_acquire>
 8008194:	4b1e      	ldr	r3, [pc, #120]	; (8008210 <__sfp+0x84>)
 8008196:	681e      	ldr	r6, [r3, #0]
 8008198:	69b3      	ldr	r3, [r6, #24]
 800819a:	b913      	cbnz	r3, 80081a2 <__sfp+0x16>
 800819c:	4630      	mov	r0, r6
 800819e:	f7ff ffbd 	bl	800811c <__sinit>
 80081a2:	3648      	adds	r6, #72	; 0x48
 80081a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80081a8:	3b01      	subs	r3, #1
 80081aa:	d503      	bpl.n	80081b4 <__sfp+0x28>
 80081ac:	6833      	ldr	r3, [r6, #0]
 80081ae:	b30b      	cbz	r3, 80081f4 <__sfp+0x68>
 80081b0:	6836      	ldr	r6, [r6, #0]
 80081b2:	e7f7      	b.n	80081a4 <__sfp+0x18>
 80081b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80081b8:	b9d5      	cbnz	r5, 80081f0 <__sfp+0x64>
 80081ba:	4b16      	ldr	r3, [pc, #88]	; (8008214 <__sfp+0x88>)
 80081bc:	60e3      	str	r3, [r4, #12]
 80081be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80081c2:	6665      	str	r5, [r4, #100]	; 0x64
 80081c4:	f000 f847 	bl	8008256 <__retarget_lock_init_recursive>
 80081c8:	f7ff ff96 	bl	80080f8 <__sfp_lock_release>
 80081cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80081d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80081d4:	6025      	str	r5, [r4, #0]
 80081d6:	61a5      	str	r5, [r4, #24]
 80081d8:	2208      	movs	r2, #8
 80081da:	4629      	mov	r1, r5
 80081dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80081e0:	f7fd fafa 	bl	80057d8 <memset>
 80081e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80081e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80081ec:	4620      	mov	r0, r4
 80081ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081f0:	3468      	adds	r4, #104	; 0x68
 80081f2:	e7d9      	b.n	80081a8 <__sfp+0x1c>
 80081f4:	2104      	movs	r1, #4
 80081f6:	4638      	mov	r0, r7
 80081f8:	f7ff ff62 	bl	80080c0 <__sfmoreglue>
 80081fc:	4604      	mov	r4, r0
 80081fe:	6030      	str	r0, [r6, #0]
 8008200:	2800      	cmp	r0, #0
 8008202:	d1d5      	bne.n	80081b0 <__sfp+0x24>
 8008204:	f7ff ff78 	bl	80080f8 <__sfp_lock_release>
 8008208:	230c      	movs	r3, #12
 800820a:	603b      	str	r3, [r7, #0]
 800820c:	e7ee      	b.n	80081ec <__sfp+0x60>
 800820e:	bf00      	nop
 8008210:	08008a8c 	.word	0x08008a8c
 8008214:	ffff0001 	.word	0xffff0001

08008218 <_fwalk_reent>:
 8008218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800821c:	4606      	mov	r6, r0
 800821e:	4688      	mov	r8, r1
 8008220:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008224:	2700      	movs	r7, #0
 8008226:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800822a:	f1b9 0901 	subs.w	r9, r9, #1
 800822e:	d505      	bpl.n	800823c <_fwalk_reent+0x24>
 8008230:	6824      	ldr	r4, [r4, #0]
 8008232:	2c00      	cmp	r4, #0
 8008234:	d1f7      	bne.n	8008226 <_fwalk_reent+0xe>
 8008236:	4638      	mov	r0, r7
 8008238:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800823c:	89ab      	ldrh	r3, [r5, #12]
 800823e:	2b01      	cmp	r3, #1
 8008240:	d907      	bls.n	8008252 <_fwalk_reent+0x3a>
 8008242:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008246:	3301      	adds	r3, #1
 8008248:	d003      	beq.n	8008252 <_fwalk_reent+0x3a>
 800824a:	4629      	mov	r1, r5
 800824c:	4630      	mov	r0, r6
 800824e:	47c0      	blx	r8
 8008250:	4307      	orrs	r7, r0
 8008252:	3568      	adds	r5, #104	; 0x68
 8008254:	e7e9      	b.n	800822a <_fwalk_reent+0x12>

08008256 <__retarget_lock_init_recursive>:
 8008256:	4770      	bx	lr

08008258 <__retarget_lock_acquire_recursive>:
 8008258:	4770      	bx	lr

0800825a <__retarget_lock_release_recursive>:
 800825a:	4770      	bx	lr

0800825c <__swhatbuf_r>:
 800825c:	b570      	push	{r4, r5, r6, lr}
 800825e:	460e      	mov	r6, r1
 8008260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008264:	2900      	cmp	r1, #0
 8008266:	b096      	sub	sp, #88	; 0x58
 8008268:	4614      	mov	r4, r2
 800826a:	461d      	mov	r5, r3
 800826c:	da07      	bge.n	800827e <__swhatbuf_r+0x22>
 800826e:	2300      	movs	r3, #0
 8008270:	602b      	str	r3, [r5, #0]
 8008272:	89b3      	ldrh	r3, [r6, #12]
 8008274:	061a      	lsls	r2, r3, #24
 8008276:	d410      	bmi.n	800829a <__swhatbuf_r+0x3e>
 8008278:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800827c:	e00e      	b.n	800829c <__swhatbuf_r+0x40>
 800827e:	466a      	mov	r2, sp
 8008280:	f000 f902 	bl	8008488 <_fstat_r>
 8008284:	2800      	cmp	r0, #0
 8008286:	dbf2      	blt.n	800826e <__swhatbuf_r+0x12>
 8008288:	9a01      	ldr	r2, [sp, #4]
 800828a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800828e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008292:	425a      	negs	r2, r3
 8008294:	415a      	adcs	r2, r3
 8008296:	602a      	str	r2, [r5, #0]
 8008298:	e7ee      	b.n	8008278 <__swhatbuf_r+0x1c>
 800829a:	2340      	movs	r3, #64	; 0x40
 800829c:	2000      	movs	r0, #0
 800829e:	6023      	str	r3, [r4, #0]
 80082a0:	b016      	add	sp, #88	; 0x58
 80082a2:	bd70      	pop	{r4, r5, r6, pc}

080082a4 <__smakebuf_r>:
 80082a4:	898b      	ldrh	r3, [r1, #12]
 80082a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80082a8:	079d      	lsls	r5, r3, #30
 80082aa:	4606      	mov	r6, r0
 80082ac:	460c      	mov	r4, r1
 80082ae:	d507      	bpl.n	80082c0 <__smakebuf_r+0x1c>
 80082b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80082b4:	6023      	str	r3, [r4, #0]
 80082b6:	6123      	str	r3, [r4, #16]
 80082b8:	2301      	movs	r3, #1
 80082ba:	6163      	str	r3, [r4, #20]
 80082bc:	b002      	add	sp, #8
 80082be:	bd70      	pop	{r4, r5, r6, pc}
 80082c0:	ab01      	add	r3, sp, #4
 80082c2:	466a      	mov	r2, sp
 80082c4:	f7ff ffca 	bl	800825c <__swhatbuf_r>
 80082c8:	9900      	ldr	r1, [sp, #0]
 80082ca:	4605      	mov	r5, r0
 80082cc:	4630      	mov	r0, r6
 80082ce:	f7ff f987 	bl	80075e0 <_malloc_r>
 80082d2:	b948      	cbnz	r0, 80082e8 <__smakebuf_r+0x44>
 80082d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082d8:	059a      	lsls	r2, r3, #22
 80082da:	d4ef      	bmi.n	80082bc <__smakebuf_r+0x18>
 80082dc:	f023 0303 	bic.w	r3, r3, #3
 80082e0:	f043 0302 	orr.w	r3, r3, #2
 80082e4:	81a3      	strh	r3, [r4, #12]
 80082e6:	e7e3      	b.n	80082b0 <__smakebuf_r+0xc>
 80082e8:	4b0d      	ldr	r3, [pc, #52]	; (8008320 <__smakebuf_r+0x7c>)
 80082ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80082ec:	89a3      	ldrh	r3, [r4, #12]
 80082ee:	6020      	str	r0, [r4, #0]
 80082f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082f4:	81a3      	strh	r3, [r4, #12]
 80082f6:	9b00      	ldr	r3, [sp, #0]
 80082f8:	6163      	str	r3, [r4, #20]
 80082fa:	9b01      	ldr	r3, [sp, #4]
 80082fc:	6120      	str	r0, [r4, #16]
 80082fe:	b15b      	cbz	r3, 8008318 <__smakebuf_r+0x74>
 8008300:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008304:	4630      	mov	r0, r6
 8008306:	f000 f8d1 	bl	80084ac <_isatty_r>
 800830a:	b128      	cbz	r0, 8008318 <__smakebuf_r+0x74>
 800830c:	89a3      	ldrh	r3, [r4, #12]
 800830e:	f023 0303 	bic.w	r3, r3, #3
 8008312:	f043 0301 	orr.w	r3, r3, #1
 8008316:	81a3      	strh	r3, [r4, #12]
 8008318:	89a0      	ldrh	r0, [r4, #12]
 800831a:	4305      	orrs	r5, r0
 800831c:	81a5      	strh	r5, [r4, #12]
 800831e:	e7cd      	b.n	80082bc <__smakebuf_r+0x18>
 8008320:	080080b5 	.word	0x080080b5

08008324 <_malloc_usable_size_r>:
 8008324:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008328:	1f18      	subs	r0, r3, #4
 800832a:	2b00      	cmp	r3, #0
 800832c:	bfbc      	itt	lt
 800832e:	580b      	ldrlt	r3, [r1, r0]
 8008330:	18c0      	addlt	r0, r0, r3
 8008332:	4770      	bx	lr

08008334 <_raise_r>:
 8008334:	291f      	cmp	r1, #31
 8008336:	b538      	push	{r3, r4, r5, lr}
 8008338:	4604      	mov	r4, r0
 800833a:	460d      	mov	r5, r1
 800833c:	d904      	bls.n	8008348 <_raise_r+0x14>
 800833e:	2316      	movs	r3, #22
 8008340:	6003      	str	r3, [r0, #0]
 8008342:	f04f 30ff 	mov.w	r0, #4294967295
 8008346:	bd38      	pop	{r3, r4, r5, pc}
 8008348:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800834a:	b112      	cbz	r2, 8008352 <_raise_r+0x1e>
 800834c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008350:	b94b      	cbnz	r3, 8008366 <_raise_r+0x32>
 8008352:	4620      	mov	r0, r4
 8008354:	f000 f830 	bl	80083b8 <_getpid_r>
 8008358:	462a      	mov	r2, r5
 800835a:	4601      	mov	r1, r0
 800835c:	4620      	mov	r0, r4
 800835e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008362:	f000 b817 	b.w	8008394 <_kill_r>
 8008366:	2b01      	cmp	r3, #1
 8008368:	d00a      	beq.n	8008380 <_raise_r+0x4c>
 800836a:	1c59      	adds	r1, r3, #1
 800836c:	d103      	bne.n	8008376 <_raise_r+0x42>
 800836e:	2316      	movs	r3, #22
 8008370:	6003      	str	r3, [r0, #0]
 8008372:	2001      	movs	r0, #1
 8008374:	e7e7      	b.n	8008346 <_raise_r+0x12>
 8008376:	2400      	movs	r4, #0
 8008378:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800837c:	4628      	mov	r0, r5
 800837e:	4798      	blx	r3
 8008380:	2000      	movs	r0, #0
 8008382:	e7e0      	b.n	8008346 <_raise_r+0x12>

08008384 <raise>:
 8008384:	4b02      	ldr	r3, [pc, #8]	; (8008390 <raise+0xc>)
 8008386:	4601      	mov	r1, r0
 8008388:	6818      	ldr	r0, [r3, #0]
 800838a:	f7ff bfd3 	b.w	8008334 <_raise_r>
 800838e:	bf00      	nop
 8008390:	20000014 	.word	0x20000014

08008394 <_kill_r>:
 8008394:	b538      	push	{r3, r4, r5, lr}
 8008396:	4d07      	ldr	r5, [pc, #28]	; (80083b4 <_kill_r+0x20>)
 8008398:	2300      	movs	r3, #0
 800839a:	4604      	mov	r4, r0
 800839c:	4608      	mov	r0, r1
 800839e:	4611      	mov	r1, r2
 80083a0:	602b      	str	r3, [r5, #0]
 80083a2:	f7fa f84f 	bl	8002444 <_kill>
 80083a6:	1c43      	adds	r3, r0, #1
 80083a8:	d102      	bne.n	80083b0 <_kill_r+0x1c>
 80083aa:	682b      	ldr	r3, [r5, #0]
 80083ac:	b103      	cbz	r3, 80083b0 <_kill_r+0x1c>
 80083ae:	6023      	str	r3, [r4, #0]
 80083b0:	bd38      	pop	{r3, r4, r5, pc}
 80083b2:	bf00      	nop
 80083b4:	2000043c 	.word	0x2000043c

080083b8 <_getpid_r>:
 80083b8:	f7fa b83c 	b.w	8002434 <_getpid>

080083bc <__sread>:
 80083bc:	b510      	push	{r4, lr}
 80083be:	460c      	mov	r4, r1
 80083c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083c4:	f000 f894 	bl	80084f0 <_read_r>
 80083c8:	2800      	cmp	r0, #0
 80083ca:	bfab      	itete	ge
 80083cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80083ce:	89a3      	ldrhlt	r3, [r4, #12]
 80083d0:	181b      	addge	r3, r3, r0
 80083d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80083d6:	bfac      	ite	ge
 80083d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80083da:	81a3      	strhlt	r3, [r4, #12]
 80083dc:	bd10      	pop	{r4, pc}

080083de <__swrite>:
 80083de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083e2:	461f      	mov	r7, r3
 80083e4:	898b      	ldrh	r3, [r1, #12]
 80083e6:	05db      	lsls	r3, r3, #23
 80083e8:	4605      	mov	r5, r0
 80083ea:	460c      	mov	r4, r1
 80083ec:	4616      	mov	r6, r2
 80083ee:	d505      	bpl.n	80083fc <__swrite+0x1e>
 80083f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083f4:	2302      	movs	r3, #2
 80083f6:	2200      	movs	r2, #0
 80083f8:	f000 f868 	bl	80084cc <_lseek_r>
 80083fc:	89a3      	ldrh	r3, [r4, #12]
 80083fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008402:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008406:	81a3      	strh	r3, [r4, #12]
 8008408:	4632      	mov	r2, r6
 800840a:	463b      	mov	r3, r7
 800840c:	4628      	mov	r0, r5
 800840e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008412:	f000 b817 	b.w	8008444 <_write_r>

08008416 <__sseek>:
 8008416:	b510      	push	{r4, lr}
 8008418:	460c      	mov	r4, r1
 800841a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800841e:	f000 f855 	bl	80084cc <_lseek_r>
 8008422:	1c43      	adds	r3, r0, #1
 8008424:	89a3      	ldrh	r3, [r4, #12]
 8008426:	bf15      	itete	ne
 8008428:	6560      	strne	r0, [r4, #84]	; 0x54
 800842a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800842e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008432:	81a3      	strheq	r3, [r4, #12]
 8008434:	bf18      	it	ne
 8008436:	81a3      	strhne	r3, [r4, #12]
 8008438:	bd10      	pop	{r4, pc}

0800843a <__sclose>:
 800843a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800843e:	f000 b813 	b.w	8008468 <_close_r>
	...

08008444 <_write_r>:
 8008444:	b538      	push	{r3, r4, r5, lr}
 8008446:	4d07      	ldr	r5, [pc, #28]	; (8008464 <_write_r+0x20>)
 8008448:	4604      	mov	r4, r0
 800844a:	4608      	mov	r0, r1
 800844c:	4611      	mov	r1, r2
 800844e:	2200      	movs	r2, #0
 8008450:	602a      	str	r2, [r5, #0]
 8008452:	461a      	mov	r2, r3
 8008454:	f7fa f82d 	bl	80024b2 <_write>
 8008458:	1c43      	adds	r3, r0, #1
 800845a:	d102      	bne.n	8008462 <_write_r+0x1e>
 800845c:	682b      	ldr	r3, [r5, #0]
 800845e:	b103      	cbz	r3, 8008462 <_write_r+0x1e>
 8008460:	6023      	str	r3, [r4, #0]
 8008462:	bd38      	pop	{r3, r4, r5, pc}
 8008464:	2000043c 	.word	0x2000043c

08008468 <_close_r>:
 8008468:	b538      	push	{r3, r4, r5, lr}
 800846a:	4d06      	ldr	r5, [pc, #24]	; (8008484 <_close_r+0x1c>)
 800846c:	2300      	movs	r3, #0
 800846e:	4604      	mov	r4, r0
 8008470:	4608      	mov	r0, r1
 8008472:	602b      	str	r3, [r5, #0]
 8008474:	f7fa f839 	bl	80024ea <_close>
 8008478:	1c43      	adds	r3, r0, #1
 800847a:	d102      	bne.n	8008482 <_close_r+0x1a>
 800847c:	682b      	ldr	r3, [r5, #0]
 800847e:	b103      	cbz	r3, 8008482 <_close_r+0x1a>
 8008480:	6023      	str	r3, [r4, #0]
 8008482:	bd38      	pop	{r3, r4, r5, pc}
 8008484:	2000043c 	.word	0x2000043c

08008488 <_fstat_r>:
 8008488:	b538      	push	{r3, r4, r5, lr}
 800848a:	4d07      	ldr	r5, [pc, #28]	; (80084a8 <_fstat_r+0x20>)
 800848c:	2300      	movs	r3, #0
 800848e:	4604      	mov	r4, r0
 8008490:	4608      	mov	r0, r1
 8008492:	4611      	mov	r1, r2
 8008494:	602b      	str	r3, [r5, #0]
 8008496:	f7fa f834 	bl	8002502 <_fstat>
 800849a:	1c43      	adds	r3, r0, #1
 800849c:	d102      	bne.n	80084a4 <_fstat_r+0x1c>
 800849e:	682b      	ldr	r3, [r5, #0]
 80084a0:	b103      	cbz	r3, 80084a4 <_fstat_r+0x1c>
 80084a2:	6023      	str	r3, [r4, #0]
 80084a4:	bd38      	pop	{r3, r4, r5, pc}
 80084a6:	bf00      	nop
 80084a8:	2000043c 	.word	0x2000043c

080084ac <_isatty_r>:
 80084ac:	b538      	push	{r3, r4, r5, lr}
 80084ae:	4d06      	ldr	r5, [pc, #24]	; (80084c8 <_isatty_r+0x1c>)
 80084b0:	2300      	movs	r3, #0
 80084b2:	4604      	mov	r4, r0
 80084b4:	4608      	mov	r0, r1
 80084b6:	602b      	str	r3, [r5, #0]
 80084b8:	f7fa f833 	bl	8002522 <_isatty>
 80084bc:	1c43      	adds	r3, r0, #1
 80084be:	d102      	bne.n	80084c6 <_isatty_r+0x1a>
 80084c0:	682b      	ldr	r3, [r5, #0]
 80084c2:	b103      	cbz	r3, 80084c6 <_isatty_r+0x1a>
 80084c4:	6023      	str	r3, [r4, #0]
 80084c6:	bd38      	pop	{r3, r4, r5, pc}
 80084c8:	2000043c 	.word	0x2000043c

080084cc <_lseek_r>:
 80084cc:	b538      	push	{r3, r4, r5, lr}
 80084ce:	4d07      	ldr	r5, [pc, #28]	; (80084ec <_lseek_r+0x20>)
 80084d0:	4604      	mov	r4, r0
 80084d2:	4608      	mov	r0, r1
 80084d4:	4611      	mov	r1, r2
 80084d6:	2200      	movs	r2, #0
 80084d8:	602a      	str	r2, [r5, #0]
 80084da:	461a      	mov	r2, r3
 80084dc:	f7fa f82c 	bl	8002538 <_lseek>
 80084e0:	1c43      	adds	r3, r0, #1
 80084e2:	d102      	bne.n	80084ea <_lseek_r+0x1e>
 80084e4:	682b      	ldr	r3, [r5, #0]
 80084e6:	b103      	cbz	r3, 80084ea <_lseek_r+0x1e>
 80084e8:	6023      	str	r3, [r4, #0]
 80084ea:	bd38      	pop	{r3, r4, r5, pc}
 80084ec:	2000043c 	.word	0x2000043c

080084f0 <_read_r>:
 80084f0:	b538      	push	{r3, r4, r5, lr}
 80084f2:	4d07      	ldr	r5, [pc, #28]	; (8008510 <_read_r+0x20>)
 80084f4:	4604      	mov	r4, r0
 80084f6:	4608      	mov	r0, r1
 80084f8:	4611      	mov	r1, r2
 80084fa:	2200      	movs	r2, #0
 80084fc:	602a      	str	r2, [r5, #0]
 80084fe:	461a      	mov	r2, r3
 8008500:	f7f9 ffba 	bl	8002478 <_read>
 8008504:	1c43      	adds	r3, r0, #1
 8008506:	d102      	bne.n	800850e <_read_r+0x1e>
 8008508:	682b      	ldr	r3, [r5, #0]
 800850a:	b103      	cbz	r3, 800850e <_read_r+0x1e>
 800850c:	6023      	str	r3, [r4, #0]
 800850e:	bd38      	pop	{r3, r4, r5, pc}
 8008510:	2000043c 	.word	0x2000043c

08008514 <atan2>:
 8008514:	f000 b800 	b.w	8008518 <__ieee754_atan2>

08008518 <__ieee754_atan2>:
 8008518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800851c:	ec57 6b11 	vmov	r6, r7, d1
 8008520:	4273      	negs	r3, r6
 8008522:	f8df e184 	ldr.w	lr, [pc, #388]	; 80086a8 <__ieee754_atan2+0x190>
 8008526:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800852a:	4333      	orrs	r3, r6
 800852c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008530:	4573      	cmp	r3, lr
 8008532:	ec51 0b10 	vmov	r0, r1, d0
 8008536:	ee11 8a10 	vmov	r8, s2
 800853a:	d80a      	bhi.n	8008552 <__ieee754_atan2+0x3a>
 800853c:	4244      	negs	r4, r0
 800853e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008542:	4304      	orrs	r4, r0
 8008544:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008548:	4574      	cmp	r4, lr
 800854a:	ee10 9a10 	vmov	r9, s0
 800854e:	468c      	mov	ip, r1
 8008550:	d907      	bls.n	8008562 <__ieee754_atan2+0x4a>
 8008552:	4632      	mov	r2, r6
 8008554:	463b      	mov	r3, r7
 8008556:	f7f7 fea1 	bl	800029c <__adddf3>
 800855a:	ec41 0b10 	vmov	d0, r0, r1
 800855e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008562:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8008566:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800856a:	4334      	orrs	r4, r6
 800856c:	d103      	bne.n	8008576 <__ieee754_atan2+0x5e>
 800856e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008572:	f000 b89d 	b.w	80086b0 <atan>
 8008576:	17bc      	asrs	r4, r7, #30
 8008578:	f004 0402 	and.w	r4, r4, #2
 800857c:	ea53 0909 	orrs.w	r9, r3, r9
 8008580:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008584:	d107      	bne.n	8008596 <__ieee754_atan2+0x7e>
 8008586:	2c02      	cmp	r4, #2
 8008588:	d060      	beq.n	800864c <__ieee754_atan2+0x134>
 800858a:	2c03      	cmp	r4, #3
 800858c:	d1e5      	bne.n	800855a <__ieee754_atan2+0x42>
 800858e:	a142      	add	r1, pc, #264	; (adr r1, 8008698 <__ieee754_atan2+0x180>)
 8008590:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008594:	e7e1      	b.n	800855a <__ieee754_atan2+0x42>
 8008596:	ea52 0808 	orrs.w	r8, r2, r8
 800859a:	d106      	bne.n	80085aa <__ieee754_atan2+0x92>
 800859c:	f1bc 0f00 	cmp.w	ip, #0
 80085a0:	da5f      	bge.n	8008662 <__ieee754_atan2+0x14a>
 80085a2:	a13f      	add	r1, pc, #252	; (adr r1, 80086a0 <__ieee754_atan2+0x188>)
 80085a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085a8:	e7d7      	b.n	800855a <__ieee754_atan2+0x42>
 80085aa:	4572      	cmp	r2, lr
 80085ac:	d10f      	bne.n	80085ce <__ieee754_atan2+0xb6>
 80085ae:	4293      	cmp	r3, r2
 80085b0:	f104 34ff 	add.w	r4, r4, #4294967295
 80085b4:	d107      	bne.n	80085c6 <__ieee754_atan2+0xae>
 80085b6:	2c02      	cmp	r4, #2
 80085b8:	d84c      	bhi.n	8008654 <__ieee754_atan2+0x13c>
 80085ba:	4b35      	ldr	r3, [pc, #212]	; (8008690 <__ieee754_atan2+0x178>)
 80085bc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80085c0:	e9d4 0100 	ldrd	r0, r1, [r4]
 80085c4:	e7c9      	b.n	800855a <__ieee754_atan2+0x42>
 80085c6:	2c02      	cmp	r4, #2
 80085c8:	d848      	bhi.n	800865c <__ieee754_atan2+0x144>
 80085ca:	4b32      	ldr	r3, [pc, #200]	; (8008694 <__ieee754_atan2+0x17c>)
 80085cc:	e7f6      	b.n	80085bc <__ieee754_atan2+0xa4>
 80085ce:	4573      	cmp	r3, lr
 80085d0:	d0e4      	beq.n	800859c <__ieee754_atan2+0x84>
 80085d2:	1a9b      	subs	r3, r3, r2
 80085d4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80085d8:	ea4f 5223 	mov.w	r2, r3, asr #20
 80085dc:	da1e      	bge.n	800861c <__ieee754_atan2+0x104>
 80085de:	2f00      	cmp	r7, #0
 80085e0:	da01      	bge.n	80085e6 <__ieee754_atan2+0xce>
 80085e2:	323c      	adds	r2, #60	; 0x3c
 80085e4:	db1e      	blt.n	8008624 <__ieee754_atan2+0x10c>
 80085e6:	4632      	mov	r2, r6
 80085e8:	463b      	mov	r3, r7
 80085ea:	f7f8 f937 	bl	800085c <__aeabi_ddiv>
 80085ee:	ec41 0b10 	vmov	d0, r0, r1
 80085f2:	f000 f9fd 	bl	80089f0 <fabs>
 80085f6:	f000 f85b 	bl	80086b0 <atan>
 80085fa:	ec51 0b10 	vmov	r0, r1, d0
 80085fe:	2c01      	cmp	r4, #1
 8008600:	d013      	beq.n	800862a <__ieee754_atan2+0x112>
 8008602:	2c02      	cmp	r4, #2
 8008604:	d015      	beq.n	8008632 <__ieee754_atan2+0x11a>
 8008606:	2c00      	cmp	r4, #0
 8008608:	d0a7      	beq.n	800855a <__ieee754_atan2+0x42>
 800860a:	a319      	add	r3, pc, #100	; (adr r3, 8008670 <__ieee754_atan2+0x158>)
 800860c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008610:	f7f7 fe42 	bl	8000298 <__aeabi_dsub>
 8008614:	a318      	add	r3, pc, #96	; (adr r3, 8008678 <__ieee754_atan2+0x160>)
 8008616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800861a:	e014      	b.n	8008646 <__ieee754_atan2+0x12e>
 800861c:	a118      	add	r1, pc, #96	; (adr r1, 8008680 <__ieee754_atan2+0x168>)
 800861e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008622:	e7ec      	b.n	80085fe <__ieee754_atan2+0xe6>
 8008624:	2000      	movs	r0, #0
 8008626:	2100      	movs	r1, #0
 8008628:	e7e9      	b.n	80085fe <__ieee754_atan2+0xe6>
 800862a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800862e:	4619      	mov	r1, r3
 8008630:	e793      	b.n	800855a <__ieee754_atan2+0x42>
 8008632:	a30f      	add	r3, pc, #60	; (adr r3, 8008670 <__ieee754_atan2+0x158>)
 8008634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008638:	f7f7 fe2e 	bl	8000298 <__aeabi_dsub>
 800863c:	4602      	mov	r2, r0
 800863e:	460b      	mov	r3, r1
 8008640:	a10d      	add	r1, pc, #52	; (adr r1, 8008678 <__ieee754_atan2+0x160>)
 8008642:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008646:	f7f7 fe27 	bl	8000298 <__aeabi_dsub>
 800864a:	e786      	b.n	800855a <__ieee754_atan2+0x42>
 800864c:	a10a      	add	r1, pc, #40	; (adr r1, 8008678 <__ieee754_atan2+0x160>)
 800864e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008652:	e782      	b.n	800855a <__ieee754_atan2+0x42>
 8008654:	a10c      	add	r1, pc, #48	; (adr r1, 8008688 <__ieee754_atan2+0x170>)
 8008656:	e9d1 0100 	ldrd	r0, r1, [r1]
 800865a:	e77e      	b.n	800855a <__ieee754_atan2+0x42>
 800865c:	2000      	movs	r0, #0
 800865e:	2100      	movs	r1, #0
 8008660:	e77b      	b.n	800855a <__ieee754_atan2+0x42>
 8008662:	a107      	add	r1, pc, #28	; (adr r1, 8008680 <__ieee754_atan2+0x168>)
 8008664:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008668:	e777      	b.n	800855a <__ieee754_atan2+0x42>
 800866a:	bf00      	nop
 800866c:	f3af 8000 	nop.w
 8008670:	33145c07 	.word	0x33145c07
 8008674:	3ca1a626 	.word	0x3ca1a626
 8008678:	54442d18 	.word	0x54442d18
 800867c:	400921fb 	.word	0x400921fb
 8008680:	54442d18 	.word	0x54442d18
 8008684:	3ff921fb 	.word	0x3ff921fb
 8008688:	54442d18 	.word	0x54442d18
 800868c:	3fe921fb 	.word	0x3fe921fb
 8008690:	08008e70 	.word	0x08008e70
 8008694:	08008e88 	.word	0x08008e88
 8008698:	54442d18 	.word	0x54442d18
 800869c:	c00921fb 	.word	0xc00921fb
 80086a0:	54442d18 	.word	0x54442d18
 80086a4:	bff921fb 	.word	0xbff921fb
 80086a8:	7ff00000 	.word	0x7ff00000
 80086ac:	00000000 	.word	0x00000000

080086b0 <atan>:
 80086b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086b4:	ec55 4b10 	vmov	r4, r5, d0
 80086b8:	4bc3      	ldr	r3, [pc, #780]	; (80089c8 <atan+0x318>)
 80086ba:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80086be:	429e      	cmp	r6, r3
 80086c0:	46ab      	mov	fp, r5
 80086c2:	dd18      	ble.n	80086f6 <atan+0x46>
 80086c4:	4bc1      	ldr	r3, [pc, #772]	; (80089cc <atan+0x31c>)
 80086c6:	429e      	cmp	r6, r3
 80086c8:	dc01      	bgt.n	80086ce <atan+0x1e>
 80086ca:	d109      	bne.n	80086e0 <atan+0x30>
 80086cc:	b144      	cbz	r4, 80086e0 <atan+0x30>
 80086ce:	4622      	mov	r2, r4
 80086d0:	462b      	mov	r3, r5
 80086d2:	4620      	mov	r0, r4
 80086d4:	4629      	mov	r1, r5
 80086d6:	f7f7 fde1 	bl	800029c <__adddf3>
 80086da:	4604      	mov	r4, r0
 80086dc:	460d      	mov	r5, r1
 80086de:	e006      	b.n	80086ee <atan+0x3e>
 80086e0:	f1bb 0f00 	cmp.w	fp, #0
 80086e4:	f300 8131 	bgt.w	800894a <atan+0x29a>
 80086e8:	a59b      	add	r5, pc, #620	; (adr r5, 8008958 <atan+0x2a8>)
 80086ea:	e9d5 4500 	ldrd	r4, r5, [r5]
 80086ee:	ec45 4b10 	vmov	d0, r4, r5
 80086f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086f6:	4bb6      	ldr	r3, [pc, #728]	; (80089d0 <atan+0x320>)
 80086f8:	429e      	cmp	r6, r3
 80086fa:	dc14      	bgt.n	8008726 <atan+0x76>
 80086fc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008700:	429e      	cmp	r6, r3
 8008702:	dc0d      	bgt.n	8008720 <atan+0x70>
 8008704:	a396      	add	r3, pc, #600	; (adr r3, 8008960 <atan+0x2b0>)
 8008706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870a:	ee10 0a10 	vmov	r0, s0
 800870e:	4629      	mov	r1, r5
 8008710:	f7f7 fdc4 	bl	800029c <__adddf3>
 8008714:	4baf      	ldr	r3, [pc, #700]	; (80089d4 <atan+0x324>)
 8008716:	2200      	movs	r2, #0
 8008718:	f7f8 fa06 	bl	8000b28 <__aeabi_dcmpgt>
 800871c:	2800      	cmp	r0, #0
 800871e:	d1e6      	bne.n	80086ee <atan+0x3e>
 8008720:	f04f 3aff 	mov.w	sl, #4294967295
 8008724:	e02b      	b.n	800877e <atan+0xce>
 8008726:	f000 f963 	bl	80089f0 <fabs>
 800872a:	4bab      	ldr	r3, [pc, #684]	; (80089d8 <atan+0x328>)
 800872c:	429e      	cmp	r6, r3
 800872e:	ec55 4b10 	vmov	r4, r5, d0
 8008732:	f300 80bf 	bgt.w	80088b4 <atan+0x204>
 8008736:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800873a:	429e      	cmp	r6, r3
 800873c:	f300 80a0 	bgt.w	8008880 <atan+0x1d0>
 8008740:	ee10 2a10 	vmov	r2, s0
 8008744:	ee10 0a10 	vmov	r0, s0
 8008748:	462b      	mov	r3, r5
 800874a:	4629      	mov	r1, r5
 800874c:	f7f7 fda6 	bl	800029c <__adddf3>
 8008750:	4ba0      	ldr	r3, [pc, #640]	; (80089d4 <atan+0x324>)
 8008752:	2200      	movs	r2, #0
 8008754:	f7f7 fda0 	bl	8000298 <__aeabi_dsub>
 8008758:	2200      	movs	r2, #0
 800875a:	4606      	mov	r6, r0
 800875c:	460f      	mov	r7, r1
 800875e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008762:	4620      	mov	r0, r4
 8008764:	4629      	mov	r1, r5
 8008766:	f7f7 fd99 	bl	800029c <__adddf3>
 800876a:	4602      	mov	r2, r0
 800876c:	460b      	mov	r3, r1
 800876e:	4630      	mov	r0, r6
 8008770:	4639      	mov	r1, r7
 8008772:	f7f8 f873 	bl	800085c <__aeabi_ddiv>
 8008776:	f04f 0a00 	mov.w	sl, #0
 800877a:	4604      	mov	r4, r0
 800877c:	460d      	mov	r5, r1
 800877e:	4622      	mov	r2, r4
 8008780:	462b      	mov	r3, r5
 8008782:	4620      	mov	r0, r4
 8008784:	4629      	mov	r1, r5
 8008786:	f7f7 ff3f 	bl	8000608 <__aeabi_dmul>
 800878a:	4602      	mov	r2, r0
 800878c:	460b      	mov	r3, r1
 800878e:	4680      	mov	r8, r0
 8008790:	4689      	mov	r9, r1
 8008792:	f7f7 ff39 	bl	8000608 <__aeabi_dmul>
 8008796:	a374      	add	r3, pc, #464	; (adr r3, 8008968 <atan+0x2b8>)
 8008798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800879c:	4606      	mov	r6, r0
 800879e:	460f      	mov	r7, r1
 80087a0:	f7f7 ff32 	bl	8000608 <__aeabi_dmul>
 80087a4:	a372      	add	r3, pc, #456	; (adr r3, 8008970 <atan+0x2c0>)
 80087a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087aa:	f7f7 fd77 	bl	800029c <__adddf3>
 80087ae:	4632      	mov	r2, r6
 80087b0:	463b      	mov	r3, r7
 80087b2:	f7f7 ff29 	bl	8000608 <__aeabi_dmul>
 80087b6:	a370      	add	r3, pc, #448	; (adr r3, 8008978 <atan+0x2c8>)
 80087b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087bc:	f7f7 fd6e 	bl	800029c <__adddf3>
 80087c0:	4632      	mov	r2, r6
 80087c2:	463b      	mov	r3, r7
 80087c4:	f7f7 ff20 	bl	8000608 <__aeabi_dmul>
 80087c8:	a36d      	add	r3, pc, #436	; (adr r3, 8008980 <atan+0x2d0>)
 80087ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ce:	f7f7 fd65 	bl	800029c <__adddf3>
 80087d2:	4632      	mov	r2, r6
 80087d4:	463b      	mov	r3, r7
 80087d6:	f7f7 ff17 	bl	8000608 <__aeabi_dmul>
 80087da:	a36b      	add	r3, pc, #428	; (adr r3, 8008988 <atan+0x2d8>)
 80087dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e0:	f7f7 fd5c 	bl	800029c <__adddf3>
 80087e4:	4632      	mov	r2, r6
 80087e6:	463b      	mov	r3, r7
 80087e8:	f7f7 ff0e 	bl	8000608 <__aeabi_dmul>
 80087ec:	a368      	add	r3, pc, #416	; (adr r3, 8008990 <atan+0x2e0>)
 80087ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f2:	f7f7 fd53 	bl	800029c <__adddf3>
 80087f6:	4642      	mov	r2, r8
 80087f8:	464b      	mov	r3, r9
 80087fa:	f7f7 ff05 	bl	8000608 <__aeabi_dmul>
 80087fe:	a366      	add	r3, pc, #408	; (adr r3, 8008998 <atan+0x2e8>)
 8008800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008804:	4680      	mov	r8, r0
 8008806:	4689      	mov	r9, r1
 8008808:	4630      	mov	r0, r6
 800880a:	4639      	mov	r1, r7
 800880c:	f7f7 fefc 	bl	8000608 <__aeabi_dmul>
 8008810:	a363      	add	r3, pc, #396	; (adr r3, 80089a0 <atan+0x2f0>)
 8008812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008816:	f7f7 fd3f 	bl	8000298 <__aeabi_dsub>
 800881a:	4632      	mov	r2, r6
 800881c:	463b      	mov	r3, r7
 800881e:	f7f7 fef3 	bl	8000608 <__aeabi_dmul>
 8008822:	a361      	add	r3, pc, #388	; (adr r3, 80089a8 <atan+0x2f8>)
 8008824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008828:	f7f7 fd36 	bl	8000298 <__aeabi_dsub>
 800882c:	4632      	mov	r2, r6
 800882e:	463b      	mov	r3, r7
 8008830:	f7f7 feea 	bl	8000608 <__aeabi_dmul>
 8008834:	a35e      	add	r3, pc, #376	; (adr r3, 80089b0 <atan+0x300>)
 8008836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800883a:	f7f7 fd2d 	bl	8000298 <__aeabi_dsub>
 800883e:	4632      	mov	r2, r6
 8008840:	463b      	mov	r3, r7
 8008842:	f7f7 fee1 	bl	8000608 <__aeabi_dmul>
 8008846:	a35c      	add	r3, pc, #368	; (adr r3, 80089b8 <atan+0x308>)
 8008848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800884c:	f7f7 fd24 	bl	8000298 <__aeabi_dsub>
 8008850:	4632      	mov	r2, r6
 8008852:	463b      	mov	r3, r7
 8008854:	f7f7 fed8 	bl	8000608 <__aeabi_dmul>
 8008858:	4602      	mov	r2, r0
 800885a:	460b      	mov	r3, r1
 800885c:	4640      	mov	r0, r8
 800885e:	4649      	mov	r1, r9
 8008860:	f7f7 fd1c 	bl	800029c <__adddf3>
 8008864:	4622      	mov	r2, r4
 8008866:	462b      	mov	r3, r5
 8008868:	f7f7 fece 	bl	8000608 <__aeabi_dmul>
 800886c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008870:	4602      	mov	r2, r0
 8008872:	460b      	mov	r3, r1
 8008874:	d14b      	bne.n	800890e <atan+0x25e>
 8008876:	4620      	mov	r0, r4
 8008878:	4629      	mov	r1, r5
 800887a:	f7f7 fd0d 	bl	8000298 <__aeabi_dsub>
 800887e:	e72c      	b.n	80086da <atan+0x2a>
 8008880:	ee10 0a10 	vmov	r0, s0
 8008884:	4b53      	ldr	r3, [pc, #332]	; (80089d4 <atan+0x324>)
 8008886:	2200      	movs	r2, #0
 8008888:	4629      	mov	r1, r5
 800888a:	f7f7 fd05 	bl	8000298 <__aeabi_dsub>
 800888e:	4b51      	ldr	r3, [pc, #324]	; (80089d4 <atan+0x324>)
 8008890:	4606      	mov	r6, r0
 8008892:	460f      	mov	r7, r1
 8008894:	2200      	movs	r2, #0
 8008896:	4620      	mov	r0, r4
 8008898:	4629      	mov	r1, r5
 800889a:	f7f7 fcff 	bl	800029c <__adddf3>
 800889e:	4602      	mov	r2, r0
 80088a0:	460b      	mov	r3, r1
 80088a2:	4630      	mov	r0, r6
 80088a4:	4639      	mov	r1, r7
 80088a6:	f7f7 ffd9 	bl	800085c <__aeabi_ddiv>
 80088aa:	f04f 0a01 	mov.w	sl, #1
 80088ae:	4604      	mov	r4, r0
 80088b0:	460d      	mov	r5, r1
 80088b2:	e764      	b.n	800877e <atan+0xce>
 80088b4:	4b49      	ldr	r3, [pc, #292]	; (80089dc <atan+0x32c>)
 80088b6:	429e      	cmp	r6, r3
 80088b8:	da1d      	bge.n	80088f6 <atan+0x246>
 80088ba:	ee10 0a10 	vmov	r0, s0
 80088be:	4b48      	ldr	r3, [pc, #288]	; (80089e0 <atan+0x330>)
 80088c0:	2200      	movs	r2, #0
 80088c2:	4629      	mov	r1, r5
 80088c4:	f7f7 fce8 	bl	8000298 <__aeabi_dsub>
 80088c8:	4b45      	ldr	r3, [pc, #276]	; (80089e0 <atan+0x330>)
 80088ca:	4606      	mov	r6, r0
 80088cc:	460f      	mov	r7, r1
 80088ce:	2200      	movs	r2, #0
 80088d0:	4620      	mov	r0, r4
 80088d2:	4629      	mov	r1, r5
 80088d4:	f7f7 fe98 	bl	8000608 <__aeabi_dmul>
 80088d8:	4b3e      	ldr	r3, [pc, #248]	; (80089d4 <atan+0x324>)
 80088da:	2200      	movs	r2, #0
 80088dc:	f7f7 fcde 	bl	800029c <__adddf3>
 80088e0:	4602      	mov	r2, r0
 80088e2:	460b      	mov	r3, r1
 80088e4:	4630      	mov	r0, r6
 80088e6:	4639      	mov	r1, r7
 80088e8:	f7f7 ffb8 	bl	800085c <__aeabi_ddiv>
 80088ec:	f04f 0a02 	mov.w	sl, #2
 80088f0:	4604      	mov	r4, r0
 80088f2:	460d      	mov	r5, r1
 80088f4:	e743      	b.n	800877e <atan+0xce>
 80088f6:	462b      	mov	r3, r5
 80088f8:	ee10 2a10 	vmov	r2, s0
 80088fc:	4939      	ldr	r1, [pc, #228]	; (80089e4 <atan+0x334>)
 80088fe:	2000      	movs	r0, #0
 8008900:	f7f7 ffac 	bl	800085c <__aeabi_ddiv>
 8008904:	f04f 0a03 	mov.w	sl, #3
 8008908:	4604      	mov	r4, r0
 800890a:	460d      	mov	r5, r1
 800890c:	e737      	b.n	800877e <atan+0xce>
 800890e:	4b36      	ldr	r3, [pc, #216]	; (80089e8 <atan+0x338>)
 8008910:	4e36      	ldr	r6, [pc, #216]	; (80089ec <atan+0x33c>)
 8008912:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008916:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800891a:	e9da 2300 	ldrd	r2, r3, [sl]
 800891e:	f7f7 fcbb 	bl	8000298 <__aeabi_dsub>
 8008922:	4622      	mov	r2, r4
 8008924:	462b      	mov	r3, r5
 8008926:	f7f7 fcb7 	bl	8000298 <__aeabi_dsub>
 800892a:	4602      	mov	r2, r0
 800892c:	460b      	mov	r3, r1
 800892e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008932:	f7f7 fcb1 	bl	8000298 <__aeabi_dsub>
 8008936:	f1bb 0f00 	cmp.w	fp, #0
 800893a:	4604      	mov	r4, r0
 800893c:	460d      	mov	r5, r1
 800893e:	f6bf aed6 	bge.w	80086ee <atan+0x3e>
 8008942:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008946:	461d      	mov	r5, r3
 8008948:	e6d1      	b.n	80086ee <atan+0x3e>
 800894a:	a51d      	add	r5, pc, #116	; (adr r5, 80089c0 <atan+0x310>)
 800894c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008950:	e6cd      	b.n	80086ee <atan+0x3e>
 8008952:	bf00      	nop
 8008954:	f3af 8000 	nop.w
 8008958:	54442d18 	.word	0x54442d18
 800895c:	bff921fb 	.word	0xbff921fb
 8008960:	8800759c 	.word	0x8800759c
 8008964:	7e37e43c 	.word	0x7e37e43c
 8008968:	e322da11 	.word	0xe322da11
 800896c:	3f90ad3a 	.word	0x3f90ad3a
 8008970:	24760deb 	.word	0x24760deb
 8008974:	3fa97b4b 	.word	0x3fa97b4b
 8008978:	a0d03d51 	.word	0xa0d03d51
 800897c:	3fb10d66 	.word	0x3fb10d66
 8008980:	c54c206e 	.word	0xc54c206e
 8008984:	3fb745cd 	.word	0x3fb745cd
 8008988:	920083ff 	.word	0x920083ff
 800898c:	3fc24924 	.word	0x3fc24924
 8008990:	5555550d 	.word	0x5555550d
 8008994:	3fd55555 	.word	0x3fd55555
 8008998:	2c6a6c2f 	.word	0x2c6a6c2f
 800899c:	bfa2b444 	.word	0xbfa2b444
 80089a0:	52defd9a 	.word	0x52defd9a
 80089a4:	3fadde2d 	.word	0x3fadde2d
 80089a8:	af749a6d 	.word	0xaf749a6d
 80089ac:	3fb3b0f2 	.word	0x3fb3b0f2
 80089b0:	fe231671 	.word	0xfe231671
 80089b4:	3fbc71c6 	.word	0x3fbc71c6
 80089b8:	9998ebc4 	.word	0x9998ebc4
 80089bc:	3fc99999 	.word	0x3fc99999
 80089c0:	54442d18 	.word	0x54442d18
 80089c4:	3ff921fb 	.word	0x3ff921fb
 80089c8:	440fffff 	.word	0x440fffff
 80089cc:	7ff00000 	.word	0x7ff00000
 80089d0:	3fdbffff 	.word	0x3fdbffff
 80089d4:	3ff00000 	.word	0x3ff00000
 80089d8:	3ff2ffff 	.word	0x3ff2ffff
 80089dc:	40038000 	.word	0x40038000
 80089e0:	3ff80000 	.word	0x3ff80000
 80089e4:	bff00000 	.word	0xbff00000
 80089e8:	08008ec0 	.word	0x08008ec0
 80089ec:	08008ea0 	.word	0x08008ea0

080089f0 <fabs>:
 80089f0:	ec51 0b10 	vmov	r0, r1, d0
 80089f4:	ee10 2a10 	vmov	r2, s0
 80089f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80089fc:	ec43 2b10 	vmov	d0, r2, r3
 8008a00:	4770      	bx	lr
	...

08008a04 <_init>:
 8008a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a06:	bf00      	nop
 8008a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a0a:	bc08      	pop	{r3}
 8008a0c:	469e      	mov	lr, r3
 8008a0e:	4770      	bx	lr

08008a10 <_fini>:
 8008a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a12:	bf00      	nop
 8008a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a16:	bc08      	pop	{r3}
 8008a18:	469e      	mov	lr, r3
 8008a1a:	4770      	bx	lr
