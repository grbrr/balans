
balans.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae64  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  0800b008  0800b008  0001b008  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4b8  0800b4b8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b4b8  0800b4b8  0001b4b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4c0  0800b4c0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4c0  0800b4c0  0001b4c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4c4  0800b4c4  0001b4c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800b4c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  200001dc  0800b6a4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e0  0800b6a4  000204e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aac4  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038cc  00000000  00000000  0003acd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001270  00000000  00000000  0003e5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001100  00000000  00000000  0003f810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ae83  00000000  00000000  00040910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019ca6  00000000  00000000  0005b793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009df4c  00000000  00000000  00075439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00113385  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005dd8  00000000  00000000  001133d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800afec 	.word	0x0800afec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	0800afec 	.word	0x0800afec

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f56:	463b      	mov	r3, r7
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f62:	4b21      	ldr	r3, [pc, #132]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f64:	4a21      	ldr	r2, [pc, #132]	; (8000fec <MX_ADC1_Init+0x9c>)
 8000f66:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f68:	4b1f      	ldr	r3, [pc, #124]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000f6e:	4b1e      	ldr	r3, [pc, #120]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f74:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f76:	4b1c      	ldr	r3, [pc, #112]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f7c:	4b1a      	ldr	r3, [pc, #104]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f82:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f8a:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f90:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f92:	4a17      	ldr	r2, [pc, #92]	; (8000ff0 <MX_ADC1_Init+0xa0>)
 8000f94:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f96:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fa2:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000faa:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fb0:	480d      	ldr	r0, [pc, #52]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000fb2:	f002 f883 	bl	80030bc <HAL_ADC_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000fbc:	f000 fe9c 	bl	8001cf8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000fc0:	2305      	movs	r3, #5
 8000fc2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fcc:	463b      	mov	r3, r7
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000fd2:	f002 fa03 	bl	80033dc <HAL_ADC_ConfigChannel>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000fdc:	f000 fe8c 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fe0:	bf00      	nop
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000268 	.word	0x20000268
 8000fec:	40012000 	.word	0x40012000
 8000ff0:	0f000001 	.word	0x0f000001

08000ff4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	; 0x28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a17      	ldr	r2, [pc, #92]	; (8001070 <HAL_ADC_MspInit+0x7c>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d127      	bne.n	8001066 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	613b      	str	r3, [r7, #16]
 800101a:	4b16      	ldr	r3, [pc, #88]	; (8001074 <HAL_ADC_MspInit+0x80>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101e:	4a15      	ldr	r2, [pc, #84]	; (8001074 <HAL_ADC_MspInit+0x80>)
 8001020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001024:	6453      	str	r3, [r2, #68]	; 0x44
 8001026:	4b13      	ldr	r3, [pc, #76]	; (8001074 <HAL_ADC_MspInit+0x80>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <HAL_ADC_MspInit+0x80>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a0e      	ldr	r2, [pc, #56]	; (8001074 <HAL_ADC_MspInit+0x80>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <HAL_ADC_MspInit+0x80>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800104e:	2320      	movs	r3, #32
 8001050:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001052:	2303      	movs	r3, #3
 8001054:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	4619      	mov	r1, r3
 8001060:	4805      	ldr	r0, [pc, #20]	; (8001078 <HAL_ADC_MspInit+0x84>)
 8001062:	f003 f8ed 	bl	8004240 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001066:	bf00      	nop
 8001068:	3728      	adds	r7, #40	; 0x28
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40012000 	.word	0x40012000
 8001074:	40023800 	.word	0x40023800
 8001078:	40020000 	.word	0x40020000

0800107c <map>:
 */

#include "additives.h"

int32_t map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min,
		int32_t out_max) {
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
 8001088:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	69b9      	ldr	r1, [r7, #24]
 8001092:	683a      	ldr	r2, [r7, #0]
 8001094:	1a8a      	subs	r2, r1, r2
 8001096:	fb02 f203 	mul.w	r2, r2, r3
 800109a:	6879      	ldr	r1, [r7, #4]
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	1acb      	subs	r3, r1, r3
 80010a0:	fb92 f2f3 	sdiv	r2, r2, r3
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	4413      	add	r3, r2
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <mapfloat>:

float mapfloat(float x, float in_min, float in_max, float out_min,
		float out_max) {
 80010b4:	b480      	push	{r7}
 80010b6:	b087      	sub	sp, #28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	ed87 0a05 	vstr	s0, [r7, #20]
 80010be:	edc7 0a04 	vstr	s1, [r7, #16]
 80010c2:	ed87 1a03 	vstr	s2, [r7, #12]
 80010c6:	edc7 1a02 	vstr	s3, [r7, #8]
 80010ca:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80010ce:	ed97 7a05 	vldr	s14, [r7, #20]
 80010d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80010d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010da:	edd7 6a01 	vldr	s13, [r7, #4]
 80010de:	edd7 7a02 	vldr	s15, [r7, #8]
 80010e2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80010e6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80010ea:	ed97 7a03 	vldr	s14, [r7, #12]
 80010ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80010f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80010fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80010fe:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001102:	eeb0 0a67 	vmov.f32	s0, s15
 8001106:	371c      	adds	r7, #28
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <LL_SYSTICK_IsActiveCounterFlag>:

static inline uint32_t LL_SYSTICK_IsActiveCounterFlag(void) {
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
	return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)
 8001114:	4b07      	ldr	r3, [pc, #28]	; (8001134 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
			== (SysTick_CTRL_COUNTFLAG_Msk));
 800111c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001120:	bf0c      	ite	eq
 8001122:	2301      	moveq	r3, #1
 8001124:	2300      	movne	r3, #0
 8001126:	b2db      	uxtb	r3, r3
}
 8001128:	4618      	mov	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	e000e010 	.word	0xe000e010

08001138 <getCurrentMicros>:

uint32_t getCurrentMicros(void) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
	/* Ensure COUNTFLAG is reset by reading SysTick control and status register */
	LL_SYSTICK_IsActiveCounterFlag();
 800113e:	f7ff ffe7 	bl	8001110 <LL_SYSTICK_IsActiveCounterFlag>
	uint32_t m = HAL_GetTick();
 8001142:	f001 ff8b 	bl	800305c <HAL_GetTick>
 8001146:	60f8      	str	r0, [r7, #12]
	const uint32_t tms = SysTick->LOAD + 1;
 8001148:	4b13      	ldr	r3, [pc, #76]	; (8001198 <getCurrentMicros+0x60>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	3301      	adds	r3, #1
 800114e:	60bb      	str	r3, [r7, #8]
	__IO uint32_t u = tms - SysTick->VAL;
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <getCurrentMicros+0x60>)
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	68ba      	ldr	r2, [r7, #8]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	607b      	str	r3, [r7, #4]
	if (LL_SYSTICK_IsActiveCounterFlag()) {
 800115a:	f7ff ffd9 	bl	8001110 <LL_SYSTICK_IsActiveCounterFlag>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d007      	beq.n	8001174 <getCurrentMicros+0x3c>
		m = HAL_GetTick();
 8001164:	f001 ff7a 	bl	800305c <HAL_GetTick>
 8001168:	60f8      	str	r0, [r7, #12]
		u = tms - SysTick->VAL;
 800116a:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <getCurrentMicros+0x60>)
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	607b      	str	r3, [r7, #4]
	}
	return (m * 1000 + (u * 1000) / tms);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800117a:	fb02 f203 	mul.w	r2, r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001184:	fb01 f103 	mul.w	r1, r1, r3
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	fbb1 f3f3 	udiv	r3, r1, r3
 800118e:	4413      	add	r3, r2
}
 8001190:	4618      	mov	r0, r3
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	e000e010 	.word	0xe000e010

0800119c <potentiometer_value>:

float potentiometer_value(void) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
	float x = 0.0;
 80011a2:	f04f 0300 	mov.w	r3, #0
 80011a6:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 10; i++) {
 80011a8:	2300      	movs	r3, #0
 80011aa:	603b      	str	r3, [r7, #0]
 80011ac:	e024      	b.n	80011f8 <potentiometer_value+0x5c>
		HAL_ADC_Start(&hadc1);
 80011ae:	481c      	ldr	r0, [pc, #112]	; (8001220 <potentiometer_value+0x84>)
 80011b0:	f001 ffc8 	bl	8003144 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100);
 80011b4:	2164      	movs	r1, #100	; 0x64
 80011b6:	481a      	ldr	r0, [pc, #104]	; (8001220 <potentiometer_value+0x84>)
 80011b8:	f002 f878 	bl	80032ac <HAL_ADC_PollForConversion>
		x += mapfloat(HAL_ADC_GetValue(&hadc1), 0, 1023, -5, 5);
 80011bc:	4818      	ldr	r0, [pc, #96]	; (8001220 <potentiometer_value+0x84>)
 80011be:	f002 f900 	bl	80033c2 <HAL_ADC_GetValue>
 80011c2:	ee07 0a90 	vmov	s15, r0
 80011c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011ca:	eeb1 2a04 	vmov.f32	s4, #20	; 0x40a00000  5.0
 80011ce:	eef9 1a04 	vmov.f32	s3, #148	; 0xc0a00000 -5.0
 80011d2:	ed9f 1a14 	vldr	s2, [pc, #80]	; 8001224 <potentiometer_value+0x88>
 80011d6:	eddf 0a14 	vldr	s1, [pc, #80]	; 8001228 <potentiometer_value+0x8c>
 80011da:	eeb0 0a67 	vmov.f32	s0, s15
 80011de:	f7ff ff69 	bl	80010b4 <mapfloat>
 80011e2:	eeb0 7a40 	vmov.f32	s14, s0
 80011e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80011ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011ee:	edc7 7a01 	vstr	s15, [r7, #4]
	for (int i = 0; i < 10; i++) {
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	3301      	adds	r3, #1
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	2b09      	cmp	r3, #9
 80011fc:	ddd7      	ble.n	80011ae <potentiometer_value+0x12>
	}
	x /= 10;
 80011fe:	ed97 7a01 	vldr	s14, [r7, #4]
 8001202:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001206:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800120a:	edc7 7a01 	vstr	s15, [r7, #4]
	return x;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	ee07 3a90 	vmov	s15, r3
}
 8001214:	eeb0 0a67 	vmov.f32	s0, s15
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000268 	.word	0x20000268
 8001224:	447fc000 	.word	0x447fc000
 8001228:	00000000 	.word	0x00000000

0800122c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <MX_DMA_Init+0x3c>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a0b      	ldr	r2, [pc, #44]	; (8001268 <MX_DMA_Init+0x3c>)
 800123c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b09      	ldr	r3, [pc, #36]	; (8001268 <MX_DMA_Init+0x3c>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800124e:	2200      	movs	r2, #0
 8001250:	2100      	movs	r1, #0
 8001252:	203a      	movs	r0, #58	; 0x3a
 8001254:	f002 fbbb 	bl	80039ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001258:	203a      	movs	r0, #58	; 0x3a
 800125a:	f002 fbd4 	bl	8003a06 <HAL_NVIC_EnableIRQ>

}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40023800 	.word	0x40023800

0800126c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08a      	sub	sp, #40	; 0x28
 8001270:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
 8001280:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	4b27      	ldr	r3, [pc, #156]	; (8001324 <MX_GPIO_Init+0xb8>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a26      	ldr	r2, [pc, #152]	; (8001324 <MX_GPIO_Init+0xb8>)
 800128c:	f043 0304 	orr.w	r3, r3, #4
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b24      	ldr	r3, [pc, #144]	; (8001324 <MX_GPIO_Init+0xb8>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f003 0304 	and.w	r3, r3, #4
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	4b20      	ldr	r3, [pc, #128]	; (8001324 <MX_GPIO_Init+0xb8>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a1f      	ldr	r2, [pc, #124]	; (8001324 <MX_GPIO_Init+0xb8>)
 80012a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b1d      	ldr	r3, [pc, #116]	; (8001324 <MX_GPIO_Init+0xb8>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	4b19      	ldr	r3, [pc, #100]	; (8001324 <MX_GPIO_Init+0xb8>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a18      	ldr	r2, [pc, #96]	; (8001324 <MX_GPIO_Init+0xb8>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b16      	ldr	r3, [pc, #88]	; (8001324 <MX_GPIO_Init+0xb8>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	607b      	str	r3, [r7, #4]
 80012da:	4b12      	ldr	r3, [pc, #72]	; (8001324 <MX_GPIO_Init+0xb8>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a11      	ldr	r2, [pc, #68]	; (8001324 <MX_GPIO_Init+0xb8>)
 80012e0:	f043 0302 	orr.w	r3, r3, #2
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <MX_GPIO_Init+0xb8>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80012f2:	2200      	movs	r2, #0
 80012f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012f8:	480b      	ldr	r0, [pc, #44]	; (8001328 <MX_GPIO_Init+0xbc>)
 80012fa:	f003 f925 	bl	8004548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80012fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001302:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001304:	2301      	movs	r3, #1
 8001306:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130c:	2300      	movs	r3, #0
 800130e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	4619      	mov	r1, r3
 8001316:	4804      	ldr	r0, [pc, #16]	; (8001328 <MX_GPIO_Init+0xbc>)
 8001318:	f002 ff92 	bl	8004240 <HAL_GPIO_Init>

}
 800131c:	bf00      	nop
 800131e:	3728      	adds	r7, #40	; 0x28
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40023800 	.word	0x40023800
 8001328:	40020800 	.word	0x40020800

0800132c <Send>:



// ########################## SEND ##########################
void Send(int16_t uSteer, int16_t uSpeed)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	460a      	mov	r2, r1
 8001336:	80fb      	strh	r3, [r7, #6]
 8001338:	4613      	mov	r3, r2
 800133a:	80bb      	strh	r3, [r7, #4]
  // Create command
  Command.start    = (uint16_t)START_FRAME;
 800133c:	4b11      	ldr	r3, [pc, #68]	; (8001384 <Send+0x58>)
 800133e:	f64a 32cd 	movw	r2, #43981	; 0xabcd
 8001342:	801a      	strh	r2, [r3, #0]
  Command.steer    = (int16_t)uSteer;
 8001344:	4a0f      	ldr	r2, [pc, #60]	; (8001384 <Send+0x58>)
 8001346:	88fb      	ldrh	r3, [r7, #6]
 8001348:	8053      	strh	r3, [r2, #2]
  Command.speed    = (int16_t)uSpeed;
 800134a:	4a0e      	ldr	r2, [pc, #56]	; (8001384 <Send+0x58>)
 800134c:	88bb      	ldrh	r3, [r7, #4]
 800134e:	8093      	strh	r3, [r2, #4]
  Command.checksum = (uint16_t)(Command.start ^ Command.steer ^ Command.speed);
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <Send+0x58>)
 8001352:	881b      	ldrh	r3, [r3, #0]
 8001354:	b21a      	sxth	r2, r3
 8001356:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <Send+0x58>)
 8001358:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800135c:	4053      	eors	r3, r2
 800135e:	b21a      	sxth	r2, r3
 8001360:	4b08      	ldr	r3, [pc, #32]	; (8001384 <Send+0x58>)
 8001362:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001366:	4053      	eors	r3, r2
 8001368:	b21b      	sxth	r3, r3
 800136a:	b29a      	uxth	r2, r3
 800136c:	4b05      	ldr	r3, [pc, #20]	; (8001384 <Send+0x58>)
 800136e:	80da      	strh	r2, [r3, #6]

  // Write to Serial
  //HoverSerial.write((uint8_t *) &Command, sizeof(Command));
  HAL_UART_Transmit(&huart2, (uint8_t*) &Command, sizeof(Command), 100);
 8001370:	2364      	movs	r3, #100	; 0x64
 8001372:	2208      	movs	r2, #8
 8001374:	4903      	ldr	r1, [pc, #12]	; (8001384 <Send+0x58>)
 8001376:	4804      	ldr	r0, [pc, #16]	; (8001388 <Send+0x5c>)
 8001378:	f005 fb8b 	bl	8006a92 <HAL_UART_Transmit>
}
 800137c:	bf00      	nop
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	200002e0 	.word	0x200002e0
 8001388:	20000488 	.word	0x20000488

0800138c <Receive>:

// ########################## RECEIVE ##########################
void Receive(uint8_t* byte)
{
 800138c:	b5b0      	push	{r4, r5, r7, lr}
 800138e:	b08a      	sub	sp, #40	; 0x28
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
	char buffer[30];

	if(data_available)
 8001394:	4bad      	ldr	r3, [pc, #692]	; (800164c <Receive+0x2c0>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d01b      	beq.n	80013d4 <Receive+0x48>
	{
		incomingByte = *byte;             // Read the incoming byte
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	781a      	ldrb	r2, [r3, #0]
 80013a0:	4bab      	ldr	r3, [pc, #684]	; (8001650 <Receive+0x2c4>)
 80013a2:	701a      	strb	r2, [r3, #0]
		bufStartFrame = ((uint16_t) (incomingByte) << 8) | incomingBytePrev; // Construct the start frame
 80013a4:	4baa      	ldr	r3, [pc, #680]	; (8001650 <Receive+0x2c4>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	021b      	lsls	r3, r3, #8
 80013aa:	b21a      	sxth	r2, r3
 80013ac:	4ba9      	ldr	r3, [pc, #676]	; (8001654 <Receive+0x2c8>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	4313      	orrs	r3, r2
 80013b4:	b21b      	sxth	r3, r3
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	4ba7      	ldr	r3, [pc, #668]	; (8001658 <Receive+0x2cc>)
 80013ba:	801a      	strh	r2, [r3, #0]
		incomingBytePrev = incomingByte;
 80013bc:	4ba4      	ldr	r3, [pc, #656]	; (8001650 <Receive+0x2c4>)
 80013be:	781a      	ldrb	r2, [r3, #0]
 80013c0:	4ba4      	ldr	r3, [pc, #656]	; (8001654 <Receive+0x2c8>)
 80013c2:	701a      	strb	r2, [r3, #0]
		data_available = 0;
 80013c4:	4ba1      	ldr	r3, [pc, #644]	; (800164c <Receive+0x2c0>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, byte, sizeof(*byte)); //ponowne oczekiwanie na przerwanie
 80013ca:	2201      	movs	r2, #1
 80013cc:	6879      	ldr	r1, [r7, #4]
 80013ce:	48a3      	ldr	r0, [pc, #652]	; (800165c <Receive+0x2d0>)
 80013d0:	f005 fbf1 	bl	8006bb6 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart1, (uint8_t*) &bufStartFrame, sizeof(bufStartFrame),100);
        return;
    #endif

    // Copy received data
    if (bufStartFrame == START_FRAME) {	                    // Initialize if new data is detected
 80013d4:	4ba0      	ldr	r3, [pc, #640]	; (8001658 <Receive+0x2cc>)
 80013d6:	881b      	ldrh	r3, [r3, #0]
 80013d8:	f64a 32cd 	movw	r2, #43981	; 0xabcd
 80013dc:	4293      	cmp	r3, r2
 80013de:	d116      	bne.n	800140e <Receive+0x82>
        p       = (uint8_t *)&NewFeedback;
 80013e0:	4b9f      	ldr	r3, [pc, #636]	; (8001660 <Receive+0x2d4>)
 80013e2:	4aa0      	ldr	r2, [pc, #640]	; (8001664 <Receive+0x2d8>)
 80013e4:	601a      	str	r2, [r3, #0]
        *p++    = incomingBytePrev;
 80013e6:	4b9e      	ldr	r3, [pc, #632]	; (8001660 <Receive+0x2d4>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	1c5a      	adds	r2, r3, #1
 80013ec:	499c      	ldr	r1, [pc, #624]	; (8001660 <Receive+0x2d4>)
 80013ee:	600a      	str	r2, [r1, #0]
 80013f0:	4a98      	ldr	r2, [pc, #608]	; (8001654 <Receive+0x2c8>)
 80013f2:	7812      	ldrb	r2, [r2, #0]
 80013f4:	701a      	strb	r2, [r3, #0]
        *p++    = incomingByte;
 80013f6:	4b9a      	ldr	r3, [pc, #616]	; (8001660 <Receive+0x2d4>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	1c5a      	adds	r2, r3, #1
 80013fc:	4998      	ldr	r1, [pc, #608]	; (8001660 <Receive+0x2d4>)
 80013fe:	600a      	str	r2, [r1, #0]
 8001400:	4a93      	ldr	r2, [pc, #588]	; (8001650 <Receive+0x2c4>)
 8001402:	7812      	ldrb	r2, [r2, #0]
 8001404:	701a      	strb	r2, [r3, #0]
        idx     = 2;
 8001406:	4b98      	ldr	r3, [pc, #608]	; (8001668 <Receive+0x2dc>)
 8001408:	2202      	movs	r2, #2
 800140a:	701a      	strb	r2, [r3, #0]
 800140c:	e015      	b.n	800143a <Receive+0xae>
    } else if (idx >= 2 && idx < sizeof(SerialFeedback)) {  // Save the new received data
 800140e:	4b96      	ldr	r3, [pc, #600]	; (8001668 <Receive+0x2dc>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d911      	bls.n	800143a <Receive+0xae>
 8001416:	4b94      	ldr	r3, [pc, #592]	; (8001668 <Receive+0x2dc>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b11      	cmp	r3, #17
 800141c:	d80d      	bhi.n	800143a <Receive+0xae>
        *p++    = incomingByte;
 800141e:	4b90      	ldr	r3, [pc, #576]	; (8001660 <Receive+0x2d4>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	1c5a      	adds	r2, r3, #1
 8001424:	498e      	ldr	r1, [pc, #568]	; (8001660 <Receive+0x2d4>)
 8001426:	600a      	str	r2, [r1, #0]
 8001428:	4a89      	ldr	r2, [pc, #548]	; (8001650 <Receive+0x2c4>)
 800142a:	7812      	ldrb	r2, [r2, #0]
 800142c:	701a      	strb	r2, [r3, #0]
        idx++;
 800142e:	4b8e      	ldr	r3, [pc, #568]	; (8001668 <Receive+0x2dc>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	3301      	adds	r3, #1
 8001434:	b2da      	uxtb	r2, r3
 8001436:	4b8c      	ldr	r3, [pc, #560]	; (8001668 <Receive+0x2dc>)
 8001438:	701a      	strb	r2, [r3, #0]
    }

    // Check if we reached the end of the package
    if (idx == sizeof(SerialFeedback)) {
 800143a:	4b8b      	ldr	r3, [pc, #556]	; (8001668 <Receive+0x2dc>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b12      	cmp	r3, #18
 8001440:	f040 815d 	bne.w	80016fe <Receive+0x372>
        uint16_t checksum;
        checksum = (uint16_t)(NewFeedback.start ^ NewFeedback.cmd1 ^ NewFeedback.cmd2 ^ NewFeedback.speedR_meas ^ NewFeedback.speedL_meas
 8001444:	4b87      	ldr	r3, [pc, #540]	; (8001664 <Receive+0x2d8>)
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	b21a      	sxth	r2, r3
 800144a:	4b86      	ldr	r3, [pc, #536]	; (8001664 <Receive+0x2d8>)
 800144c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001450:	4053      	eors	r3, r2
 8001452:	b21a      	sxth	r2, r3
 8001454:	4b83      	ldr	r3, [pc, #524]	; (8001664 <Receive+0x2d8>)
 8001456:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800145a:	4053      	eors	r3, r2
 800145c:	b21a      	sxth	r2, r3
 800145e:	4b81      	ldr	r3, [pc, #516]	; (8001664 <Receive+0x2d8>)
 8001460:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001464:	4053      	eors	r3, r2
 8001466:	b21a      	sxth	r2, r3
 8001468:	4b7e      	ldr	r3, [pc, #504]	; (8001664 <Receive+0x2d8>)
 800146a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800146e:	4053      	eors	r3, r2
 8001470:	b21a      	sxth	r2, r3
                            ^ NewFeedback.batVoltage ^ NewFeedback.boardTemp ^ NewFeedback.cmdLed);
 8001472:	4b7c      	ldr	r3, [pc, #496]	; (8001664 <Receive+0x2d8>)
 8001474:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001478:	4053      	eors	r3, r2
 800147a:	b21a      	sxth	r2, r3
 800147c:	4b79      	ldr	r3, [pc, #484]	; (8001664 <Receive+0x2d8>)
 800147e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001482:	4053      	eors	r3, r2
 8001484:	b21a      	sxth	r2, r3
 8001486:	4b77      	ldr	r3, [pc, #476]	; (8001664 <Receive+0x2d8>)
 8001488:	89db      	ldrh	r3, [r3, #14]
 800148a:	b21b      	sxth	r3, r3
 800148c:	4053      	eors	r3, r2
 800148e:	b21b      	sxth	r3, r3
        checksum = (uint16_t)(NewFeedback.start ^ NewFeedback.cmd1 ^ NewFeedback.cmd2 ^ NewFeedback.speedR_meas ^ NewFeedback.speedL_meas
 8001490:	84fb      	strh	r3, [r7, #38]	; 0x26

        // Check validity of the new data
        if (NewFeedback.start == START_FRAME && checksum == NewFeedback.checksum) {
 8001492:	4b74      	ldr	r3, [pc, #464]	; (8001664 <Receive+0x2d8>)
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	f64a 32cd 	movw	r2, #43981	; 0xabcd
 800149a:	4293      	cmp	r3, r2
 800149c:	f040 8106 	bne.w	80016ac <Receive+0x320>
 80014a0:	4b70      	ldr	r3, [pc, #448]	; (8001664 <Receive+0x2d8>)
 80014a2:	8a1b      	ldrh	r3, [r3, #16]
 80014a4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80014a6:	429a      	cmp	r2, r3
 80014a8:	f040 8100 	bne.w	80016ac <Receive+0x320>
            // Copy the new data
            memcpy(&Feedback, &NewFeedback, sizeof(SerialFeedback));
 80014ac:	4b6f      	ldr	r3, [pc, #444]	; (800166c <Receive+0x2e0>)
 80014ae:	4a6d      	ldr	r2, [pc, #436]	; (8001664 <Receive+0x2d8>)
 80014b0:	6815      	ldr	r5, [r2, #0]
 80014b2:	6854      	ldr	r4, [r2, #4]
 80014b4:	6890      	ldr	r0, [r2, #8]
 80014b6:	68d1      	ldr	r1, [r2, #12]
 80014b8:	601d      	str	r5, [r3, #0]
 80014ba:	605c      	str	r4, [r3, #4]
 80014bc:	6098      	str	r0, [r3, #8]
 80014be:	60d9      	str	r1, [r3, #12]
 80014c0:	8a12      	ldrh	r2, [r2, #16]
 80014c2:	821a      	strh	r2, [r3, #16]

            // Print data to built-in Serial
            sprintf(buffer, "1: ");
 80014c4:	f107 0308 	add.w	r3, r7, #8
 80014c8:	4969      	ldr	r1, [pc, #420]	; (8001670 <Receive+0x2e4>)
 80014ca:	4618      	mov	r0, r3
 80014cc:	f007 f8ec 	bl	80086a8 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*) &buffer, strlen(buffer), 100);
 80014d0:	f107 0308 	add.w	r3, r7, #8
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7fe fe83 	bl	80001e0 <strlen>
 80014da:	4603      	mov	r3, r0
 80014dc:	b29a      	uxth	r2, r3
 80014de:	f107 0108 	add.w	r1, r7, #8
 80014e2:	2364      	movs	r3, #100	; 0x64
 80014e4:	485d      	ldr	r0, [pc, #372]	; (800165c <Receive+0x2d0>)
 80014e6:	f005 fad4 	bl	8006a92 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, (uint8_t*) &Feedback.cmd1, sizeof(Feedback.cmd1), 100);
 80014ea:	2364      	movs	r3, #100	; 0x64
 80014ec:	2202      	movs	r2, #2
 80014ee:	4961      	ldr	r1, [pc, #388]	; (8001674 <Receive+0x2e8>)
 80014f0:	485a      	ldr	r0, [pc, #360]	; (800165c <Receive+0x2d0>)
 80014f2:	f005 face 	bl	8006a92 <HAL_UART_Transmit>
            sprintf(buffer, "2: ");
 80014f6:	f107 0308 	add.w	r3, r7, #8
 80014fa:	495f      	ldr	r1, [pc, #380]	; (8001678 <Receive+0x2ec>)
 80014fc:	4618      	mov	r0, r3
 80014fe:	f007 f8d3 	bl	80086a8 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*) &buffer, strlen(buffer), 100);
 8001502:	f107 0308 	add.w	r3, r7, #8
 8001506:	4618      	mov	r0, r3
 8001508:	f7fe fe6a 	bl	80001e0 <strlen>
 800150c:	4603      	mov	r3, r0
 800150e:	b29a      	uxth	r2, r3
 8001510:	f107 0108 	add.w	r1, r7, #8
 8001514:	2364      	movs	r3, #100	; 0x64
 8001516:	4851      	ldr	r0, [pc, #324]	; (800165c <Receive+0x2d0>)
 8001518:	f005 fabb 	bl	8006a92 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, (uint8_t*) &Feedback.cmd2, sizeof(Feedback.cmd2), 100);
 800151c:	2364      	movs	r3, #100	; 0x64
 800151e:	2202      	movs	r2, #2
 8001520:	4956      	ldr	r1, [pc, #344]	; (800167c <Receive+0x2f0>)
 8001522:	484e      	ldr	r0, [pc, #312]	; (800165c <Receive+0x2d0>)
 8001524:	f005 fab5 	bl	8006a92 <HAL_UART_Transmit>
            sprintf(buffer, "3: ");
 8001528:	f107 0308 	add.w	r3, r7, #8
 800152c:	4954      	ldr	r1, [pc, #336]	; (8001680 <Receive+0x2f4>)
 800152e:	4618      	mov	r0, r3
 8001530:	f007 f8ba 	bl	80086a8 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*) &buffer, strlen(buffer), 100);
 8001534:	f107 0308 	add.w	r3, r7, #8
 8001538:	4618      	mov	r0, r3
 800153a:	f7fe fe51 	bl	80001e0 <strlen>
 800153e:	4603      	mov	r3, r0
 8001540:	b29a      	uxth	r2, r3
 8001542:	f107 0108 	add.w	r1, r7, #8
 8001546:	2364      	movs	r3, #100	; 0x64
 8001548:	4844      	ldr	r0, [pc, #272]	; (800165c <Receive+0x2d0>)
 800154a:	f005 faa2 	bl	8006a92 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, (uint8_t*) &Feedback.speedR_meas, sizeof(Feedback.speedR_meas), 100);
 800154e:	2364      	movs	r3, #100	; 0x64
 8001550:	2202      	movs	r2, #2
 8001552:	494c      	ldr	r1, [pc, #304]	; (8001684 <Receive+0x2f8>)
 8001554:	4841      	ldr	r0, [pc, #260]	; (800165c <Receive+0x2d0>)
 8001556:	f005 fa9c 	bl	8006a92 <HAL_UART_Transmit>
            sprintf(buffer, "4: ");
 800155a:	f107 0308 	add.w	r3, r7, #8
 800155e:	494a      	ldr	r1, [pc, #296]	; (8001688 <Receive+0x2fc>)
 8001560:	4618      	mov	r0, r3
 8001562:	f007 f8a1 	bl	80086a8 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*) &buffer, strlen(buffer), 100);
 8001566:	f107 0308 	add.w	r3, r7, #8
 800156a:	4618      	mov	r0, r3
 800156c:	f7fe fe38 	bl	80001e0 <strlen>
 8001570:	4603      	mov	r3, r0
 8001572:	b29a      	uxth	r2, r3
 8001574:	f107 0108 	add.w	r1, r7, #8
 8001578:	2364      	movs	r3, #100	; 0x64
 800157a:	4838      	ldr	r0, [pc, #224]	; (800165c <Receive+0x2d0>)
 800157c:	f005 fa89 	bl	8006a92 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, (uint8_t*) &Feedback.speedL_meas, sizeof(Feedback.speedL_meas), 100);
 8001580:	2364      	movs	r3, #100	; 0x64
 8001582:	2202      	movs	r2, #2
 8001584:	4941      	ldr	r1, [pc, #260]	; (800168c <Receive+0x300>)
 8001586:	4835      	ldr	r0, [pc, #212]	; (800165c <Receive+0x2d0>)
 8001588:	f005 fa83 	bl	8006a92 <HAL_UART_Transmit>
            sprintf(buffer, "5: ");
 800158c:	f107 0308 	add.w	r3, r7, #8
 8001590:	493f      	ldr	r1, [pc, #252]	; (8001690 <Receive+0x304>)
 8001592:	4618      	mov	r0, r3
 8001594:	f007 f888 	bl	80086a8 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*) &buffer, strlen(buffer), 100);
 8001598:	f107 0308 	add.w	r3, r7, #8
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe fe1f 	bl	80001e0 <strlen>
 80015a2:	4603      	mov	r3, r0
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	f107 0108 	add.w	r1, r7, #8
 80015aa:	2364      	movs	r3, #100	; 0x64
 80015ac:	482b      	ldr	r0, [pc, #172]	; (800165c <Receive+0x2d0>)
 80015ae:	f005 fa70 	bl	8006a92 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, (uint8_t*) &Feedback.batVoltage, sizeof(Feedback.batVoltage), 100);
 80015b2:	2364      	movs	r3, #100	; 0x64
 80015b4:	2202      	movs	r2, #2
 80015b6:	4937      	ldr	r1, [pc, #220]	; (8001694 <Receive+0x308>)
 80015b8:	4828      	ldr	r0, [pc, #160]	; (800165c <Receive+0x2d0>)
 80015ba:	f005 fa6a 	bl	8006a92 <HAL_UART_Transmit>
            sprintf(buffer, "6: ");
 80015be:	f107 0308 	add.w	r3, r7, #8
 80015c2:	4935      	ldr	r1, [pc, #212]	; (8001698 <Receive+0x30c>)
 80015c4:	4618      	mov	r0, r3
 80015c6:	f007 f86f 	bl	80086a8 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*) &buffer, strlen(buffer), 100);
 80015ca:	f107 0308 	add.w	r3, r7, #8
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7fe fe06 	bl	80001e0 <strlen>
 80015d4:	4603      	mov	r3, r0
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	f107 0108 	add.w	r1, r7, #8
 80015dc:	2364      	movs	r3, #100	; 0x64
 80015de:	481f      	ldr	r0, [pc, #124]	; (800165c <Receive+0x2d0>)
 80015e0:	f005 fa57 	bl	8006a92 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, (uint8_t*) &Feedback.boardTemp, sizeof(Feedback.boardTemp), 100);
 80015e4:	2364      	movs	r3, #100	; 0x64
 80015e6:	2202      	movs	r2, #2
 80015e8:	492c      	ldr	r1, [pc, #176]	; (800169c <Receive+0x310>)
 80015ea:	481c      	ldr	r0, [pc, #112]	; (800165c <Receive+0x2d0>)
 80015ec:	f005 fa51 	bl	8006a92 <HAL_UART_Transmit>
            sprintf(buffer, "7: ");
 80015f0:	f107 0308 	add.w	r3, r7, #8
 80015f4:	492a      	ldr	r1, [pc, #168]	; (80016a0 <Receive+0x314>)
 80015f6:	4618      	mov	r0, r3
 80015f8:	f007 f856 	bl	80086a8 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*) &buffer, strlen(buffer), 100);
 80015fc:	f107 0308 	add.w	r3, r7, #8
 8001600:	4618      	mov	r0, r3
 8001602:	f7fe fded 	bl	80001e0 <strlen>
 8001606:	4603      	mov	r3, r0
 8001608:	b29a      	uxth	r2, r3
 800160a:	f107 0108 	add.w	r1, r7, #8
 800160e:	2364      	movs	r3, #100	; 0x64
 8001610:	4812      	ldr	r0, [pc, #72]	; (800165c <Receive+0x2d0>)
 8001612:	f005 fa3e 	bl	8006a92 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, (uint8_t*) &Feedback.cmdLed, sizeof(Feedback.cmdLed), 100);
 8001616:	2364      	movs	r3, #100	; 0x64
 8001618:	2202      	movs	r2, #2
 800161a:	4922      	ldr	r1, [pc, #136]	; (80016a4 <Receive+0x318>)
 800161c:	480f      	ldr	r0, [pc, #60]	; (800165c <Receive+0x2d0>)
 800161e:	f005 fa38 	bl	8006a92 <HAL_UART_Transmit>
            sprintf(buffer, "\n\r");
 8001622:	f107 0308 	add.w	r3, r7, #8
 8001626:	4920      	ldr	r1, [pc, #128]	; (80016a8 <Receive+0x31c>)
 8001628:	4618      	mov	r0, r3
 800162a:	f007 f83d 	bl	80086a8 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*) &buffer, strlen(buffer), 100);
 800162e:	f107 0308 	add.w	r3, r7, #8
 8001632:	4618      	mov	r0, r3
 8001634:	f7fe fdd4 	bl	80001e0 <strlen>
 8001638:	4603      	mov	r3, r0
 800163a:	b29a      	uxth	r2, r3
 800163c:	f107 0108 	add.w	r1, r7, #8
 8001640:	2364      	movs	r3, #100	; 0x64
 8001642:	4806      	ldr	r0, [pc, #24]	; (800165c <Receive+0x2d0>)
 8001644:	f005 fa25 	bl	8006a92 <HAL_UART_Transmit>
 8001648:	e056      	b.n	80016f8 <Receive+0x36c>
 800164a:	bf00      	nop
 800164c:	200002c8 	.word	0x200002c8
 8001650:	200001f9 	.word	0x200001f9
 8001654:	200001fa 	.word	0x200001fa
 8001658:	200002c6 	.word	0x200002c6
 800165c:	20000488 	.word	0x20000488
 8001660:	200002b0 	.word	0x200002b0
 8001664:	200002b4 	.word	0x200002b4
 8001668:	200001f8 	.word	0x200001f8
 800166c:	200002cc 	.word	0x200002cc
 8001670:	0800b008 	.word	0x0800b008
 8001674:	200002ce 	.word	0x200002ce
 8001678:	0800b00c 	.word	0x0800b00c
 800167c:	200002d0 	.word	0x200002d0
 8001680:	0800b010 	.word	0x0800b010
 8001684:	200002d2 	.word	0x200002d2
 8001688:	0800b014 	.word	0x0800b014
 800168c:	200002d4 	.word	0x200002d4
 8001690:	0800b018 	.word	0x0800b018
 8001694:	200002d6 	.word	0x200002d6
 8001698:	0800b01c 	.word	0x0800b01c
 800169c:	200002d8 	.word	0x200002d8
 80016a0:	0800b020 	.word	0x0800b020
 80016a4:	200002da 	.word	0x200002da
 80016a8:	0800b024 	.word	0x0800b024
            Serial.print(" 4: ");  Serial.print(Feedback.speedL_meas);
            Serial.print(" 5: ");  Serial.print(Feedback.batVoltage);
            Serial.print(" 6: ");  Serial.print(Feedback.boardTemp);
            Serial.print(" 7: ");  Serial.println(Feedback.cmdLed);*/
        } else {
        	sprintf(buffer, "Non-valid data skipped");
 80016ac:	f107 0308 	add.w	r3, r7, #8
 80016b0:	4917      	ldr	r1, [pc, #92]	; (8001710 <Receive+0x384>)
 80016b2:	4618      	mov	r0, r3
 80016b4:	f006 fff8 	bl	80086a8 <siprintf>
        	HAL_UART_Transmit(&huart2, (uint8_t*) &buffer, strlen(buffer), 100);
 80016b8:	f107 0308 	add.w	r3, r7, #8
 80016bc:	4618      	mov	r0, r3
 80016be:	f7fe fd8f 	bl	80001e0 <strlen>
 80016c2:	4603      	mov	r3, r0
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	f107 0108 	add.w	r1, r7, #8
 80016ca:	2364      	movs	r3, #100	; 0x64
 80016cc:	4811      	ldr	r0, [pc, #68]	; (8001714 <Receive+0x388>)
 80016ce:	f005 f9e0 	bl	8006a92 <HAL_UART_Transmit>
        	sprintf(buffer, "\n\r");
 80016d2:	f107 0308 	add.w	r3, r7, #8
 80016d6:	4910      	ldr	r1, [pc, #64]	; (8001718 <Receive+0x38c>)
 80016d8:	4618      	mov	r0, r3
 80016da:	f006 ffe5 	bl	80086a8 <siprintf>
        	HAL_UART_Transmit(&huart2, (uint8_t*) &buffer, strlen(buffer), 100);
 80016de:	f107 0308 	add.w	r3, r7, #8
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7fe fd7c 	bl	80001e0 <strlen>
 80016e8:	4603      	mov	r3, r0
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	f107 0108 	add.w	r1, r7, #8
 80016f0:	2364      	movs	r3, #100	; 0x64
 80016f2:	4808      	ldr	r0, [pc, #32]	; (8001714 <Receive+0x388>)
 80016f4:	f005 f9cd 	bl	8006a92 <HAL_UART_Transmit>
          //Serial.println("Non-valid data skipped");
        }
        idx = 0;    // Reset the index (it prevents to enter in this if condition in the next cycle)
 80016f8:	4b08      	ldr	r3, [pc, #32]	; (800171c <Receive+0x390>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	701a      	strb	r2, [r3, #0]
    }

    // Update previous states
    incomingBytePrev = incomingByte;
 80016fe:	4b08      	ldr	r3, [pc, #32]	; (8001720 <Receive+0x394>)
 8001700:	781a      	ldrb	r2, [r3, #0]
 8001702:	4b08      	ldr	r3, [pc, #32]	; (8001724 <Receive+0x398>)
 8001704:	701a      	strb	r2, [r3, #0]
}
 8001706:	bf00      	nop
 8001708:	3728      	adds	r7, #40	; 0x28
 800170a:	46bd      	mov	sp, r7
 800170c:	bdb0      	pop	{r4, r5, r7, pc}
 800170e:	bf00      	nop
 8001710:	0800b028 	.word	0x0800b028
 8001714:	20000488 	.word	0x20000488
 8001718:	0800b024 	.word	0x0800b024
 800171c:	200001f8 	.word	0x200001f8
 8001720:	200001f9 	.word	0x200001f9
 8001724:	200001fa 	.word	0x200001fa

08001728 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <MX_I2C1_Init+0x50>)
 800172e:	4a13      	ldr	r2, [pc, #76]	; (800177c <MX_I2C1_Init+0x54>)
 8001730:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <MX_I2C1_Init+0x50>)
 8001734:	4a12      	ldr	r2, [pc, #72]	; (8001780 <MX_I2C1_Init+0x58>)
 8001736:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001738:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <MX_I2C1_Init+0x50>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800173e:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <MX_I2C1_Init+0x50>)
 8001740:	2200      	movs	r2, #0
 8001742:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001744:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <MX_I2C1_Init+0x50>)
 8001746:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800174a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800174c:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <MX_I2C1_Init+0x50>)
 800174e:	2200      	movs	r2, #0
 8001750:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001752:	4b09      	ldr	r3, [pc, #36]	; (8001778 <MX_I2C1_Init+0x50>)
 8001754:	2200      	movs	r2, #0
 8001756:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001758:	4b07      	ldr	r3, [pc, #28]	; (8001778 <MX_I2C1_Init+0x50>)
 800175a:	2200      	movs	r2, #0
 800175c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800175e:	4b06      	ldr	r3, [pc, #24]	; (8001778 <MX_I2C1_Init+0x50>)
 8001760:	2200      	movs	r2, #0
 8001762:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001764:	4804      	ldr	r0, [pc, #16]	; (8001778 <MX_I2C1_Init+0x50>)
 8001766:	f002 ff23 	bl	80045b0 <HAL_I2C_Init>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001770:	f000 fac2 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}
 8001778:	200002e8 	.word	0x200002e8
 800177c:	40005400 	.word	0x40005400
 8001780:	00061a80 	.word	0x00061a80

08001784 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08a      	sub	sp, #40	; 0x28
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a19      	ldr	r2, [pc, #100]	; (8001808 <HAL_I2C_MspInit+0x84>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d12b      	bne.n	80017fe <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	613b      	str	r3, [r7, #16]
 80017aa:	4b18      	ldr	r3, [pc, #96]	; (800180c <HAL_I2C_MspInit+0x88>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	4a17      	ldr	r2, [pc, #92]	; (800180c <HAL_I2C_MspInit+0x88>)
 80017b0:	f043 0302 	orr.w	r3, r3, #2
 80017b4:	6313      	str	r3, [r2, #48]	; 0x30
 80017b6:	4b15      	ldr	r3, [pc, #84]	; (800180c <HAL_I2C_MspInit+0x88>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017c2:	23c0      	movs	r3, #192	; 0xc0
 80017c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017c6:	2312      	movs	r3, #18
 80017c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ce:	2303      	movs	r3, #3
 80017d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017d2:	2304      	movs	r3, #4
 80017d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d6:	f107 0314 	add.w	r3, r7, #20
 80017da:	4619      	mov	r1, r3
 80017dc:	480c      	ldr	r0, [pc, #48]	; (8001810 <HAL_I2C_MspInit+0x8c>)
 80017de:	f002 fd2f 	bl	8004240 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	4b09      	ldr	r3, [pc, #36]	; (800180c <HAL_I2C_MspInit+0x88>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	4a08      	ldr	r2, [pc, #32]	; (800180c <HAL_I2C_MspInit+0x88>)
 80017ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017f0:	6413      	str	r3, [r2, #64]	; 0x40
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_I2C_MspInit+0x88>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80017fe:	bf00      	nop
 8001800:	3728      	adds	r7, #40	; 0x28
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40005400 	.word	0x40005400
 800180c:	40023800 	.word	0x40023800
 8001810:	40020400 	.word	0x40020400

08001814 <ibus_init>:
static uint8_t fail_safe_flag = 0;


/* Main Functions */
void ibus_init()
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(IBUS_UART, uart_rx_buffer, 32);
 8001818:	2220      	movs	r2, #32
 800181a:	4903      	ldr	r1, [pc, #12]	; (8001828 <ibus_init+0x14>)
 800181c:	4803      	ldr	r0, [pc, #12]	; (800182c <ibus_init+0x18>)
 800181e:	f005 f9fa 	bl	8006c16 <HAL_UART_Receive_DMA>
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	200001fc 	.word	0x200001fc
 800182c:	20000444 	.word	0x20000444

08001830 <ibus_read>:

bool ibus_read(uint16_t* ibus_data)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	if(!ibus_is_valid()) 
 8001838:	f000 f81a 	bl	8001870 <ibus_is_valid>
 800183c:	4603      	mov	r3, r0
 800183e:	f083 0301 	eor.w	r3, r3, #1
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <ibus_read+0x1c>
		return false;
 8001848:	2300      	movs	r3, #0
 800184a:	e00d      	b.n	8001868 <ibus_read+0x38>

	if(!ibus_checksum())
 800184c:	f000 f828 	bl	80018a0 <ibus_checksum>
 8001850:	4603      	mov	r3, r0
 8001852:	f083 0301 	eor.w	r3, r3, #1
 8001856:	b2db      	uxtb	r3, r3
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <ibus_read+0x30>
		return false;
 800185c:	2300      	movs	r3, #0
 800185e:	e003      	b.n	8001868 <ibus_read+0x38>

	ibus_update(ibus_data);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f000 f84d 	bl	8001900 <ibus_update>
	return true;
 8001866:	2301      	movs	r3, #1
}
 8001868:	4618      	mov	r0, r3
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <ibus_is_valid>:


/* Sub Functions */
bool ibus_is_valid()
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
	// is it ibus?
	return (uart_rx_buffer[0] == IBUS_LENGTH && uart_rx_buffer[1] == IBUS_COMMAND40);
 8001874:	4b09      	ldr	r3, [pc, #36]	; (800189c <ibus_is_valid+0x2c>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b20      	cmp	r3, #32
 800187a:	d105      	bne.n	8001888 <ibus_is_valid+0x18>
 800187c:	4b07      	ldr	r3, [pc, #28]	; (800189c <ibus_is_valid+0x2c>)
 800187e:	785b      	ldrb	r3, [r3, #1]
 8001880:	2b40      	cmp	r3, #64	; 0x40
 8001882:	d101      	bne.n	8001888 <ibus_is_valid+0x18>
 8001884:	2301      	movs	r3, #1
 8001886:	e000      	b.n	800188a <ibus_is_valid+0x1a>
 8001888:	2300      	movs	r3, #0
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	b2db      	uxtb	r3, r3
}
 8001890:	4618      	mov	r0, r3
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	200001fc 	.word	0x200001fc

080018a0 <ibus_checksum>:

bool ibus_checksum()
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 	uint16_t checksum_cal = 0xffff;
 80018a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018aa:	81fb      	strh	r3, [r7, #14]
	uint16_t checksum_ibus;

	for(int i = 0; i < 30; i++)
 80018ac:	2300      	movs	r3, #0
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	e00a      	b.n	80018c8 <ibus_checksum+0x28>
	{
		checksum_cal -= uart_rx_buffer[i];
 80018b2:	4a12      	ldr	r2, [pc, #72]	; (80018fc <ibus_checksum+0x5c>)
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	4413      	add	r3, r2
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	89fa      	ldrh	r2, [r7, #14]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < 30; i++)
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	3301      	adds	r3, #1
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	2b1d      	cmp	r3, #29
 80018cc:	ddf1      	ble.n	80018b2 <ibus_checksum+0x12>
	}

	checksum_ibus = uart_rx_buffer[31] << 8 | uart_rx_buffer[30]; // checksum value from ibus
 80018ce:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <ibus_checksum+0x5c>)
 80018d0:	7fdb      	ldrb	r3, [r3, #31]
 80018d2:	021b      	lsls	r3, r3, #8
 80018d4:	b21a      	sxth	r2, r3
 80018d6:	4b09      	ldr	r3, [pc, #36]	; (80018fc <ibus_checksum+0x5c>)
 80018d8:	7f9b      	ldrb	r3, [r3, #30]
 80018da:	b21b      	sxth	r3, r3
 80018dc:	4313      	orrs	r3, r2
 80018de:	b21b      	sxth	r3, r3
 80018e0:	80fb      	strh	r3, [r7, #6]
	return (checksum_ibus == checksum_cal);
 80018e2:	88fa      	ldrh	r2, [r7, #6]
 80018e4:	89fb      	ldrh	r3, [r7, #14]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	bf0c      	ite	eq
 80018ea:	2301      	moveq	r3, #1
 80018ec:	2300      	movne	r3, #0
 80018ee:	b2db      	uxtb	r3, r3
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	200001fc 	.word	0x200001fc

08001900 <ibus_update>:

void ibus_update(uint16_t* ibus_data)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
	for(int ch_index = 0, bf_index = 2; ch_index < IBUS_USER_CHANNELS; ch_index++, bf_index += 2)
 8001908:	2300      	movs	r3, #0
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	2302      	movs	r3, #2
 800190e:	60bb      	str	r3, [r7, #8]
 8001910:	e018      	b.n	8001944 <ibus_update+0x44>
	{
		ibus_data[ch_index] = uart_rx_buffer[bf_index + 1] << 8 | uart_rx_buffer[bf_index];
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	3301      	adds	r3, #1
 8001916:	4a10      	ldr	r2, [pc, #64]	; (8001958 <ibus_update+0x58>)
 8001918:	5cd3      	ldrb	r3, [r2, r3]
 800191a:	021b      	lsls	r3, r3, #8
 800191c:	b21a      	sxth	r2, r3
 800191e:	490e      	ldr	r1, [pc, #56]	; (8001958 <ibus_update+0x58>)
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	440b      	add	r3, r1
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	b21b      	sxth	r3, r3
 8001928:	4313      	orrs	r3, r2
 800192a:	b219      	sxth	r1, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	4413      	add	r3, r2
 8001934:	b28a      	uxth	r2, r1
 8001936:	801a      	strh	r2, [r3, #0]
	for(int ch_index = 0, bf_index = 2; ch_index < IBUS_USER_CHANNELS; ch_index++, bf_index += 2)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	3301      	adds	r3, #1
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	3302      	adds	r3, #2
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2b09      	cmp	r3, #9
 8001948:	dde3      	ble.n	8001912 <ibus_update+0x12>
	}
}
 800194a:	bf00      	nop
 800194c:	bf00      	nop
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	200001fc 	.word	0x200001fc

0800195c <ibus_soft_failsafe>:

/**
 * @note FS-A8S don't have fail safe feature, So make software fail-safe.
 */
void ibus_soft_failsafe(uint16_t* ibus_data, uint8_t fail_safe_max)
{	
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	70fb      	strb	r3, [r7, #3]
	fail_safe_flag++;
 8001968:	4b18      	ldr	r3, [pc, #96]	; (80019cc <ibus_soft_failsafe+0x70>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	3301      	adds	r3, #1
 800196e:	b2da      	uxtb	r2, r3
 8001970:	4b16      	ldr	r3, [pc, #88]	; (80019cc <ibus_soft_failsafe+0x70>)
 8001972:	701a      	strb	r2, [r3, #0]

	if(fail_safe_max > fail_safe_flag)
 8001974:	4b15      	ldr	r3, [pc, #84]	; (80019cc <ibus_soft_failsafe+0x70>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	78fa      	ldrb	r2, [r7, #3]
 800197a:	429a      	cmp	r2, r3
 800197c:	d820      	bhi.n	80019c0 <ibus_soft_failsafe+0x64>
		return;

	// Clear ibus data
	for(int i = 0; i < IBUS_USER_CHANNELS; i++)
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	e008      	b.n	8001996 <ibus_soft_failsafe+0x3a>
		ibus_data[i] = 0;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	4413      	add	r3, r2
 800198c:	2200      	movs	r2, #0
 800198e:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < IBUS_USER_CHANNELS; i++)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	3301      	adds	r3, #1
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2b09      	cmp	r3, #9
 800199a:	ddf3      	ble.n	8001984 <ibus_soft_failsafe+0x28>

	// Clear ibus buffer
	for(int j = 0; j < IBUS_LENGTH; j++)
 800199c:	2300      	movs	r3, #0
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	e007      	b.n	80019b2 <ibus_soft_failsafe+0x56>
		uart_rx_buffer[j] = 0;
 80019a2:	4a0b      	ldr	r2, [pc, #44]	; (80019d0 <ibus_soft_failsafe+0x74>)
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	4413      	add	r3, r2
 80019a8:	2200      	movs	r2, #0
 80019aa:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < IBUS_LENGTH; j++)
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	3301      	adds	r3, #1
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	2b1f      	cmp	r3, #31
 80019b6:	ddf4      	ble.n	80019a2 <ibus_soft_failsafe+0x46>

	fail_safe_flag = 0;
 80019b8:	4b04      	ldr	r3, [pc, #16]	; (80019cc <ibus_soft_failsafe+0x70>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	701a      	strb	r2, [r3, #0]
	return;
 80019be:	e000      	b.n	80019c2 <ibus_soft_failsafe+0x66>
		return;
 80019c0:	bf00      	nop
}
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	2000021c 	.word	0x2000021c
 80019d0:	200001fc 	.word	0x200001fc

080019d4 <ibus_reset_failsafe>:

/**
 * @note This function is located in HAL_UART_RxCpltCallback.
 */
void ibus_reset_failsafe()
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
		fail_safe_flag = 0; // flag reset
 80019d8:	4b03      	ldr	r3, [pc, #12]	; (80019e8 <ibus_reset_failsafe+0x14>)
 80019da:	2200      	movs	r2, #0
 80019dc:	701a      	strb	r2, [r3, #0]
}
 80019de:	bf00      	nop
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	2000021c 	.word	0x2000021c
 80019ec:	00000000 	.word	0x00000000

080019f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019f0:	b5b0      	push	{r4, r5, r7, lr}
 80019f2:	b0a8      	sub	sp, #160	; 0xa0
 80019f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char buffer[100];
	uint8_t byte;

	float gyrotesttheta = 0;
 80019f6:	f04f 0300 	mov.w	r3, #0
 80019fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	_Bool mpu6050_ready = 0, start_balancing = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 8001a04:	2300      	movs	r3, #0
 8001a06:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
	uint16_t ibus_data[IBUS_USER_CHANNELS];
	uint32_t loop_timer = 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	float time = 0;
 8001a10:	f04f 0300 	mov.w	r3, #0
 8001a14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a18:	f001 faba 	bl	8002f90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a1c:	f000 f8f2 	bl	8001c04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a20:	f7ff fc24 	bl	800126c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001a24:	f7ff fe80 	bl	8001728 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001a28:	f001 f91c 	bl	8002c64 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001a2c:	f001 f944 	bl	8002cb8 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8001a30:	f7ff fbfc 	bl	800122c <MX_DMA_Init>
  MX_USART6_UART_Init();
 8001a34:	f001 f96a 	bl	8002d0c <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8001a38:	f7ff fa8a 	bl	8000f50 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001a3c:	f001 f80a 	bl	8002a54 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	mpu6050_ready = MPU6050_Init();	//może podmienić rezystory na I2C bo musiałem dać pullup software'owy
 8001a40:	f000 f960 	bl	8001d04 <MPU6050_Init>
 8001a44:	4603      	mov	r3, r0
 8001a46:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
	ibus_init();
 8001a4a:	f7ff fee3 	bl	8001814 <ibus_init>
	HAL_UART_Receive_IT(&huart2, &byte, sizeof(byte)); //oczekiwanie na przerwanie
 8001a4e:	f107 031b 	add.w	r3, r7, #27
 8001a52:	2201      	movs	r2, #1
 8001a54:	4619      	mov	r1, r3
 8001a56:	4866      	ldr	r0, [pc, #408]	; (8001bf0 <main+0x200>)
 8001a58:	f005 f8ad 	bl	8006bb6 <HAL_UART_Receive_IT>
	loop_timer = getCurrentMicros();
 8001a5c:	f7ff fb6c 	bl	8001138 <getCurrentMicros>
 8001a60:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001a64:	2100      	movs	r1, #0
 8001a66:	4863      	ldr	r0, [pc, #396]	; (8001bf4 <main+0x204>)
 8001a68:	f004 fa52 	bl	8005f10 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001a6c:	2104      	movs	r1, #4
 8001a6e:	4861      	ldr	r0, [pc, #388]	; (8001bf4 <main+0x204>)
 8001a70:	f004 fa4e 	bl	8005f10 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (mpu6050_ready) {
 8001a74:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d0fb      	beq.n	8001a74 <main+0x84>

			// Check for new received data
			Receive(&byte);
 8001a7c:	f107 031b 	add.w	r3, r7, #27
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff fc83 	bl	800138c <Receive>

			ibus_read(ibus_data);
 8001a86:	1d3b      	adds	r3, r7, #4
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff fed1 	bl	8001830 <ibus_read>
			ibus_soft_failsafe(ibus_data, 10); // if ibus is not updated, clear ibus data.
 8001a8e:	1d3b      	adds	r3, r7, #4
 8001a90:	210a      	movs	r1, #10
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff ff62 	bl	800195c <ibus_soft_failsafe>

			if (!start_balancing) {
 8001a98:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8001a9c:	f083 0301 	eor.w	r3, r3, #1
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <main+0xbe>
				horizontal_control(ibus_data);
 8001aa6:	1d3b      	adds	r3, r7, #4
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f000 fc89 	bl	80023c0 <horizontal_control>
			}
			silnik = ibus_data[4-1];
 8001aae:	897b      	ldrh	r3, [r7, #10]
 8001ab0:	b21a      	sxth	r2, r3
 8001ab2:	4b51      	ldr	r3, [pc, #324]	; (8001bf8 <main+0x208>)
 8001ab4:	801a      	strh	r2, [r3, #0]
			float acctheta = MPU6050_Read_Accel();
 8001ab6:	f000 f99b 	bl	8001df0 <MPU6050_Read_Accel>
 8001aba:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
			float gyrotheta = MPU6050_Read_Gyro(time);
 8001abe:	ed97 0a24 	vldr	s0, [r7, #144]	; 0x90
 8001ac2:	f000 fa1b 	bl	8001efc <MPU6050_Read_Gyro>
 8001ac6:	ed87 0a20 	vstr	s0, [r7, #128]	; 0x80
			gyrotesttheta += (gyrotheta * time);
 8001aca:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001ace:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ad6:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8001ada:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ade:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
			float theta = 0.9995 * (theta + gyrotheta * time)
 8001ae2:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001ae6:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001aea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aee:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001af2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af6:	ee17 0a90 	vmov	r0, s15
 8001afa:	f7fe fd2d 	bl	8000558 <__aeabi_f2d>
 8001afe:	a336      	add	r3, pc, #216	; (adr r3, 8001bd8 <main+0x1e8>)
 8001b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b04:	f7fe fd80 	bl	8000608 <__aeabi_dmul>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4614      	mov	r4, r2
 8001b0e:	461d      	mov	r5, r3
					+ (1 - 0.9995) * acctheta;
 8001b10:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001b14:	f7fe fd20 	bl	8000558 <__aeabi_f2d>
 8001b18:	a331      	add	r3, pc, #196	; (adr r3, 8001be0 <main+0x1f0>)
 8001b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b1e:	f7fe fd73 	bl	8000608 <__aeabi_dmul>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	4620      	mov	r0, r4
 8001b28:	4629      	mov	r1, r5
 8001b2a:	f7fe fbb7 	bl	800029c <__adddf3>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
			float theta = 0.9995 * (theta + gyrotheta * time)
 8001b32:	4610      	mov	r0, r2
 8001b34:	4619      	mov	r1, r3
 8001b36:	f7ff f83f 	bl	8000bb8 <__aeabi_d2f>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
//			sprintf(buffer, "%3.2f, %3.2f, %3.2f\n\r", acctheta, gyrotesttheta,
//					theta);
//			HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 100);

			//bezpieczenstwo
			if (start_balancing == 0 && acctheta > (theta_ref - 1)
 8001b40:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8001b44:	f083 0301 	eor.w	r3, r3, #1
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d014      	beq.n	8001b78 <main+0x188>
 8001b4e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001b52:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001bfc <main+0x20c>
 8001b56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b5e:	dd0b      	ble.n	8001b78 <main+0x188>
					&& acctheta < (theta_ref + 1)) {
 8001b60:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001b64:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001c00 <main+0x210>
 8001b68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b70:	d502      	bpl.n	8001b78 <main+0x188>
				start_balancing = 1;
 8001b72:	2301      	movs	r3, #1
 8001b74:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
			}

			if (start_balancing == 1)
 8001b78:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d00c      	beq.n	8001b9a <main+0x1aa>
				start_balancing = vertical_control(ibus_data, theta);
 8001b80:	1d3b      	adds	r3, r7, #4
 8001b82:	ed97 0a23 	vldr	s0, [r7, #140]	; 0x8c
 8001b86:	4618      	mov	r0, r3
 8001b88:	f000 fcf4 	bl	8002574 <vertical_control>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	bf14      	ite	ne
 8001b92:	2301      	movne	r3, #1
 8001b94:	2300      	moveq	r3, #0
 8001b96:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

			time = (getCurrentMicros() - loop_timer) * 1e-6;
 8001b9a:	f7ff facd 	bl	8001138 <getCurrentMicros>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7fe fcb4 	bl	8000514 <__aeabi_ui2d>
 8001bac:	a30e      	add	r3, pc, #56	; (adr r3, 8001be8 <main+0x1f8>)
 8001bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb2:	f7fe fd29 	bl	8000608 <__aeabi_dmul>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	4610      	mov	r0, r2
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f7fe fffb 	bl	8000bb8 <__aeabi_d2f>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			loop_timer = getCurrentMicros();
 8001bc8:	f7ff fab6 	bl	8001138 <getCurrentMicros>
 8001bcc:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
		if (mpu6050_ready) {
 8001bd0:	e750      	b.n	8001a74 <main+0x84>
 8001bd2:	bf00      	nop
 8001bd4:	f3af 8000 	nop.w
 8001bd8:	6c8b4396 	.word	0x6c8b4396
 8001bdc:	3feffbe7 	.word	0x3feffbe7
 8001be0:	d2f1a800 	.word	0xd2f1a800
 8001be4:	3f40624d 	.word	0x3f40624d
 8001be8:	a0b5ed8d 	.word	0xa0b5ed8d
 8001bec:	3eb0c6f7 	.word	0x3eb0c6f7
 8001bf0:	20000488 	.word	0x20000488
 8001bf4:	20000358 	.word	0x20000358
 8001bf8:	2000033c 	.word	0x2000033c
 8001bfc:	429e0000 	.word	0x429e0000
 8001c00:	42a20000 	.word	0x42a20000

08001c04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b094      	sub	sp, #80	; 0x50
 8001c08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c0a:	f107 0320 	add.w	r3, r7, #32
 8001c0e:	2230      	movs	r2, #48	; 0x30
 8001c10:	2100      	movs	r1, #0
 8001c12:	4618      	mov	r0, r3
 8001c14:	f006 f8d6 	bl	8007dc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c18:	f107 030c 	add.w	r3, r7, #12
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	4b22      	ldr	r3, [pc, #136]	; (8001cb8 <SystemClock_Config+0xb4>)
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c30:	4a21      	ldr	r2, [pc, #132]	; (8001cb8 <SystemClock_Config+0xb4>)
 8001c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c36:	6413      	str	r3, [r2, #64]	; 0x40
 8001c38:	4b1f      	ldr	r3, [pc, #124]	; (8001cb8 <SystemClock_Config+0xb4>)
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c40:	60bb      	str	r3, [r7, #8]
 8001c42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c44:	2300      	movs	r3, #0
 8001c46:	607b      	str	r3, [r7, #4]
 8001c48:	4b1c      	ldr	r3, [pc, #112]	; (8001cbc <SystemClock_Config+0xb8>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c50:	4a1a      	ldr	r2, [pc, #104]	; (8001cbc <SystemClock_Config+0xb8>)
 8001c52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c56:	6013      	str	r3, [r2, #0]
 8001c58:	4b18      	ldr	r3, [pc, #96]	; (8001cbc <SystemClock_Config+0xb8>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c60:	607b      	str	r3, [r7, #4]
 8001c62:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c64:	2301      	movs	r3, #1
 8001c66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c72:	f107 0320 	add.w	r3, r7, #32
 8001c76:	4618      	mov	r0, r3
 8001c78:	f003 fc5a 	bl	8005530 <HAL_RCC_OscConfig>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001c82:	f000 f839 	bl	8001cf8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c86:	230f      	movs	r3, #15
 8001c88:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001c9a:	f107 030c 	add.w	r3, r7, #12
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f003 febd 	bl	8005a20 <HAL_RCC_ClockConfig>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001cac:	f000 f824 	bl	8001cf8 <Error_Handler>
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	3750      	adds	r7, #80	; 0x50
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40007000 	.word	0x40007000

08001cc0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) { //sprawdzenie czy przyszło z właściwego usarta
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a07      	ldr	r2, [pc, #28]	; (8001cec <HAL_UART_RxCpltCallback+0x2c>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d102      	bne.n	8001cd8 <HAL_UART_RxCpltCallback+0x18>
		data_available = 1;
 8001cd2:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <HAL_UART_RxCpltCallback+0x30>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	701a      	strb	r2, [r3, #0]
		//ponowne wywołanie oczekiwania na przerwania dzieje się po przetworzeniu danych w hoverserial.c
	}
	if (huart == IBUS_UART)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a06      	ldr	r2, [pc, #24]	; (8001cf4 <HAL_UART_RxCpltCallback+0x34>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d101      	bne.n	8001ce4 <HAL_UART_RxCpltCallback+0x24>
		ibus_reset_failsafe();
 8001ce0:	f7ff fe78 	bl	80019d4 <ibus_reset_failsafe>
}
 8001ce4:	bf00      	nop
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40004400 	.word	0x40004400
 8001cf0:	200002c8 	.word	0x200002c8
 8001cf4:	20000444 	.word	0x20000444

08001cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cfc:	b672      	cpsid	i
}
 8001cfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001d00:	e7fe      	b.n	8001d00 <Error_Handler+0x8>
	...

08001d04 <MPU6050_Init>:
uint32_t loop_timer;
float gyro_calibr = 0, acc_calibr = 0;

float angle_acc, Gx = 0, Gy, Gz;

_Bool MPU6050_Init(void) {
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;
	_Bool mpu6050_status = 0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	71fb      	strb	r3, [r7, #7]

	// sprawdzenie czy to MPU6050

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I, 1, &check, 1, 1000);
 8001d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d12:	9302      	str	r3, [sp, #8]
 8001d14:	2301      	movs	r3, #1
 8001d16:	9301      	str	r3, [sp, #4]
 8001d18:	1dbb      	adds	r3, r7, #6
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	2275      	movs	r2, #117	; 0x75
 8001d20:	21d0      	movs	r1, #208	; 0xd0
 8001d22:	482e      	ldr	r0, [pc, #184]	; (8001ddc <MPU6050_Init+0xd8>)
 8001d24:	f002 fe82 	bl	8004a2c <HAL_I2C_Mem_Read>

	if (check == 0x72) // powinno być 0x68 ale w tym przypadku to jakiś klon
 8001d28:	79bb      	ldrb	r3, [r7, #6]
 8001d2a:	2b72      	cmp	r3, #114	; 0x72
 8001d2c:	d14b      	bne.n	8001dc6 <MPU6050_Init+0xc2>
			{
		// power management register: brak resetu, wyłączone tryby sleep i cycle, wyłączony czujnik temp. (bit wysoki), wewnętrzny zegar 8MHz
		Data = 0b00001000;
 8001d2e:	2308      	movs	r3, #8
 8001d30:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1, 1, &Data, 1, 1000);
 8001d32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d36:	9302      	str	r3, [sp, #8]
 8001d38:	2301      	movs	r3, #1
 8001d3a:	9301      	str	r3, [sp, #4]
 8001d3c:	1d7b      	adds	r3, r7, #5
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	2301      	movs	r3, #1
 8001d42:	226b      	movs	r2, #107	; 0x6b
 8001d44:	21d0      	movs	r1, #208	; 0xd0
 8001d46:	4825      	ldr	r0, [pc, #148]	; (8001ddc <MPU6050_Init+0xd8>)
 8001d48:	f002 fd76 	bl	8004838 <HAL_I2C_Mem_Write>
		//Data = 0x07;
		//HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV, 1, &Data, 1, 1000);

		// konfiguracja akcelerometru
		// bity 3 = 0; 4 = 0 - zakres akcelerometru na +-0g, pozostałe bity to selftest bądź zastrzeżone (oba nieistotne)
		Data = 0x00;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG, 1, &Data, 1,
 8001d50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d54:	9302      	str	r3, [sp, #8]
 8001d56:	2301      	movs	r3, #1
 8001d58:	9301      	str	r3, [sp, #4]
 8001d5a:	1d7b      	adds	r3, r7, #5
 8001d5c:	9300      	str	r3, [sp, #0]
 8001d5e:	2301      	movs	r3, #1
 8001d60:	221c      	movs	r2, #28
 8001d62:	21d0      	movs	r1, #208	; 0xd0
 8001d64:	481d      	ldr	r0, [pc, #116]	; (8001ddc <MPU6050_Init+0xd8>)
 8001d66:	f002 fd67 	bl	8004838 <HAL_I2C_Mem_Write>
				1000);

		// konfiguracja żyroskopu
		// bity 3 = 0; 4 = 0 - zakres żyroskopu na +-250 deg/s, pozostałe bity to selftest bądź zastrzeżone (oba nieistotne)
		Data = 0x00;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG, 1, &Data, 1, 1000);
 8001d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d72:	9302      	str	r3, [sp, #8]
 8001d74:	2301      	movs	r3, #1
 8001d76:	9301      	str	r3, [sp, #4]
 8001d78:	1d7b      	adds	r3, r7, #5
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	221b      	movs	r2, #27
 8001d80:	21d0      	movs	r1, #208	; 0xd0
 8001d82:	4816      	ldr	r0, [pc, #88]	; (8001ddc <MPU6050_Init+0xd8>)
 8001d84:	f002 fd58 	bl	8004838 <HAL_I2C_Mem_Write>

		Data = 0b00000101;	////ostatnie 3 bity to filtr LPF, 43Hz 011
 8001d88:	2305      	movs	r3, #5
 8001d8a:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x1A, 1, &Data, 1, 1000);
 8001d8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d90:	9302      	str	r3, [sp, #8]
 8001d92:	2301      	movs	r3, #1
 8001d94:	9301      	str	r3, [sp, #4]
 8001d96:	1d7b      	adds	r3, r7, #5
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	221a      	movs	r2, #26
 8001d9e:	21d0      	movs	r1, #208	; 0xd0
 8001da0:	480e      	ldr	r0, [pc, #56]	; (8001ddc <MPU6050_Init+0xd8>)
 8001da2:	f002 fd49 	bl	8004838 <HAL_I2C_Mem_Write>

		gyro_calibr = kalibracja_gyro();
 8001da6:	f000 f9d1 	bl	800214c <kalibracja_gyro>
 8001daa:	eef0 7a40 	vmov.f32	s15, s0
 8001dae:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <MPU6050_Init+0xdc>)
 8001db0:	edc3 7a00 	vstr	s15, [r3]
		acc_calibr = kalibracja_acc();
 8001db4:	f000 f90c 	bl	8001fd0 <kalibracja_acc>
 8001db8:	eef0 7a40 	vmov.f32	s15, s0
 8001dbc:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <MPU6050_Init+0xe0>)
 8001dbe:	edc3 7a00 	vstr	s15, [r3]
		mpu6050_status = 1;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	71fb      	strb	r3, [r7, #7]
	}
	loop_timer = HAL_GetTick();
 8001dc6:	f001 f949 	bl	800305c <HAL_GetTick>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	4a06      	ldr	r2, [pc, #24]	; (8001de8 <MPU6050_Init+0xe4>)
 8001dce:	6013      	str	r3, [r2, #0]
	return mpu6050_status;
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	200002e8 	.word	0x200002e8
 8001de0:	2000022c 	.word	0x2000022c
 8001de4:	20000230 	.word	0x20000230
 8001de8:	2000034c 	.word	0x2000034c
 8001dec:	00000000 	.word	0x00000000

08001df0 <MPU6050_Read_Accel>:

float MPU6050_Read_Accel(void) {
 8001df0:	b5b0      	push	{r4, r5, r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// odczytanie 6 bajtów począwszy od rejestru ACCEL_XOUT_H, wymagane dwa do obliczeń

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H, 1, Rec_Data, 6, 1000);
 8001df6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dfa:	9302      	str	r3, [sp, #8]
 8001dfc:	2306      	movs	r3, #6
 8001dfe:	9301      	str	r3, [sp, #4]
 8001e00:	463b      	mov	r3, r7
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	2301      	movs	r3, #1
 8001e06:	223b      	movs	r2, #59	; 0x3b
 8001e08:	21d0      	movs	r1, #208	; 0xd0
 8001e0a:	4835      	ldr	r0, [pc, #212]	; (8001ee0 <MPU6050_Read_Accel+0xf0>)
 8001e0c:	f002 fe0e 	bl	8004a2c <HAL_I2C_Mem_Read>

	acc_rawX = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8001e10:	783b      	ldrb	r3, [r7, #0]
 8001e12:	021b      	lsls	r3, r3, #8
 8001e14:	b21a      	sxth	r2, r3
 8001e16:	787b      	ldrb	r3, [r7, #1]
 8001e18:	b21b      	sxth	r3, r3
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	b21a      	sxth	r2, r3
 8001e1e:	4b31      	ldr	r3, [pc, #196]	; (8001ee4 <MPU6050_Read_Accel+0xf4>)
 8001e20:	801a      	strh	r2, [r3, #0]
	acc_rawY = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001e22:	78bb      	ldrb	r3, [r7, #2]
 8001e24:	021b      	lsls	r3, r3, #8
 8001e26:	b21a      	sxth	r2, r3
 8001e28:	78fb      	ldrb	r3, [r7, #3]
 8001e2a:	b21b      	sxth	r3, r3
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	b21a      	sxth	r2, r3
 8001e30:	4b2d      	ldr	r3, [pc, #180]	; (8001ee8 <MPU6050_Read_Accel+0xf8>)
 8001e32:	801a      	strh	r2, [r3, #0]
	acc_rawZ = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8001e34:	793b      	ldrb	r3, [r7, #4]
 8001e36:	021b      	lsls	r3, r3, #8
 8001e38:	b21a      	sxth	r2, r3
 8001e3a:	797b      	ldrb	r3, [r7, #5]
 8001e3c:	b21b      	sxth	r3, r3
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	b21a      	sxth	r2, r3
 8001e42:	4b2a      	ldr	r3, [pc, #168]	; (8001eec <MPU6050_Read_Accel+0xfc>)
 8001e44:	801a      	strh	r2, [r3, #0]

	//kąt jest atanem ilorazu przyspieszeń zatem nie trzeba konwertować do g

	angle_acc = atan2((float) acc_rawX, (float) acc_rawZ) * -180 / M_PI;
 8001e46:	4b27      	ldr	r3, [pc, #156]	; (8001ee4 <MPU6050_Read_Accel+0xf4>)
 8001e48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e4c:	ee07 3a90 	vmov	s15, r3
 8001e50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e54:	ee17 0a90 	vmov	r0, s15
 8001e58:	f7fe fb7e 	bl	8000558 <__aeabi_f2d>
 8001e5c:	4604      	mov	r4, r0
 8001e5e:	460d      	mov	r5, r1
 8001e60:	4b22      	ldr	r3, [pc, #136]	; (8001eec <MPU6050_Read_Accel+0xfc>)
 8001e62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e66:	ee07 3a90 	vmov	s15, r3
 8001e6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e6e:	ee17 0a90 	vmov	r0, s15
 8001e72:	f7fe fb71 	bl	8000558 <__aeabi_f2d>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	ec43 2b11 	vmov	d1, r2, r3
 8001e7e:	ec45 4b10 	vmov	d0, r4, r5
 8001e82:	f008 fe3b 	bl	800aafc <atan2>
 8001e86:	ec51 0b10 	vmov	r0, r1, d0
 8001e8a:	f04f 0200 	mov.w	r2, #0
 8001e8e:	4b18      	ldr	r3, [pc, #96]	; (8001ef0 <MPU6050_Read_Accel+0x100>)
 8001e90:	f7fe fbba 	bl	8000608 <__aeabi_dmul>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4610      	mov	r0, r2
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	a30e      	add	r3, pc, #56	; (adr r3, 8001ed8 <MPU6050_Read_Accel+0xe8>)
 8001e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea2:	f7fe fcdb 	bl	800085c <__aeabi_ddiv>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	4610      	mov	r0, r2
 8001eac:	4619      	mov	r1, r3
 8001eae:	f7fe fe83 	bl	8000bb8 <__aeabi_d2f>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4a0f      	ldr	r2, [pc, #60]	; (8001ef4 <MPU6050_Read_Accel+0x104>)
 8001eb6:	6013      	str	r3, [r2, #0]

	return angle_acc - acc_calibr;
 8001eb8:	4b0e      	ldr	r3, [pc, #56]	; (8001ef4 <MPU6050_Read_Accel+0x104>)
 8001eba:	ed93 7a00 	vldr	s14, [r3]
 8001ebe:	4b0e      	ldr	r3, [pc, #56]	; (8001ef8 <MPU6050_Read_Accel+0x108>)
 8001ec0:	edd3 7a00 	vldr	s15, [r3]
 8001ec4:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8001ec8:	eeb0 0a67 	vmov.f32	s0, s15
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	f3af 8000 	nop.w
 8001ed8:	54442d18 	.word	0x54442d18
 8001edc:	400921fb 	.word	0x400921fb
 8001ee0:	200002e8 	.word	0x200002e8
 8001ee4:	2000021e 	.word	0x2000021e
 8001ee8:	20000220 	.word	0x20000220
 8001eec:	20000222 	.word	0x20000222
 8001ef0:	c0668000 	.word	0xc0668000
 8001ef4:	20000340 	.word	0x20000340
 8001ef8:	20000230 	.word	0x20000230

08001efc <MPU6050_Read_Gyro>:

float MPU6050_Read_Gyro(float time) {
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b088      	sub	sp, #32
 8001f00:	af04      	add	r7, sp, #16
 8001f02:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t Rec_Data[6];	//odczytanie rejestru GYRO_XOUT_H
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H, 1, Rec_Data, 6, 1000);
 8001f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f0a:	9302      	str	r3, [sp, #8]
 8001f0c:	2306      	movs	r3, #6
 8001f0e:	9301      	str	r3, [sp, #4]
 8001f10:	f107 0308 	add.w	r3, r7, #8
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	2301      	movs	r3, #1
 8001f18:	2243      	movs	r2, #67	; 0x43
 8001f1a:	21d0      	movs	r1, #208	; 0xd0
 8001f1c:	4825      	ldr	r0, [pc, #148]	; (8001fb4 <MPU6050_Read_Gyro+0xb8>)
 8001f1e:	f002 fd85 	bl	8004a2c <HAL_I2C_Mem_Read>
	Gyro_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8001f22:	7a3b      	ldrb	r3, [r7, #8]
 8001f24:	021b      	lsls	r3, r3, #8
 8001f26:	b21a      	sxth	r2, r3
 8001f28:	7a7b      	ldrb	r3, [r7, #9]
 8001f2a:	b21b      	sxth	r3, r3
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	b21a      	sxth	r2, r3
 8001f30:	4b21      	ldr	r3, [pc, #132]	; (8001fb8 <MPU6050_Read_Gyro+0xbc>)
 8001f32:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001f34:	7abb      	ldrb	r3, [r7, #10]
 8001f36:	021b      	lsls	r3, r3, #8
 8001f38:	b21a      	sxth	r2, r3
 8001f3a:	7afb      	ldrb	r3, [r7, #11]
 8001f3c:	b21b      	sxth	r3, r3
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	b21a      	sxth	r2, r3
 8001f42:	4b1e      	ldr	r3, [pc, #120]	; (8001fbc <MPU6050_Read_Gyro+0xc0>)
 8001f44:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8001f46:	7b3b      	ldrb	r3, [r7, #12]
 8001f48:	021b      	lsls	r3, r3, #8
 8001f4a:	b21a      	sxth	r2, r3
 8001f4c:	7b7b      	ldrb	r3, [r7, #13]
 8001f4e:	b21b      	sxth	r3, r3
 8001f50:	4313      	orrs	r3, r2
 8001f52:	b21a      	sxth	r2, r3
 8001f54:	4b1a      	ldr	r3, [pc, #104]	; (8001fc0 <MPU6050_Read_Gyro+0xc4>)
 8001f56:	801a      	strh	r2, [r3, #0]

	Gyro_Y_RAW -= gyro_calibr;          //uwzględnienie odczytu kalibracyjnego
 8001f58:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <MPU6050_Read_Gyro+0xc0>)
 8001f5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f5e:	ee07 3a90 	vmov	s15, r3
 8001f62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f66:	4b17      	ldr	r3, [pc, #92]	; (8001fc4 <MPU6050_Read_Gyro+0xc8>)
 8001f68:	edd3 7a00 	vldr	s15, [r3]
 8001f6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f74:	ee17 3a90 	vmov	r3, s15
 8001f78:	b21a      	sxth	r2, r3
 8001f7a:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <MPU6050_Read_Gyro+0xc0>)
 8001f7c:	801a      	strh	r2, [r3, #0]
	Gx = Gyro_Y_RAW / 131;
 8001f7e:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <MPU6050_Read_Gyro+0xc0>)
 8001f80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f84:	4a10      	ldr	r2, [pc, #64]	; (8001fc8 <MPU6050_Read_Gyro+0xcc>)
 8001f86:	fb82 1203 	smull	r1, r2, r2, r3
 8001f8a:	1152      	asrs	r2, r2, #5
 8001f8c:	17db      	asrs	r3, r3, #31
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	b21b      	sxth	r3, r3
 8001f92:	ee07 3a90 	vmov	s15, r3
 8001f96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f9a:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <MPU6050_Read_Gyro+0xd0>)
 8001f9c:	edc3 7a00 	vstr	s15, [r3]
	//Gx += Gyro_X_RAW * time / 131; //kąt z poprzedniej pętli + kąt przebyty w tej pętli - 131 LSB dla 1deg/s, czas petli wynosi 0.004s, zatem pokonana droga wyniesie 131/0.004 deg
	return (Gx);
 8001fa0:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <MPU6050_Read_Gyro+0xd0>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	ee07 3a90 	vmov	s15, r3
}
 8001fa8:	eeb0 0a67 	vmov.f32	s0, s15
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	200002e8 	.word	0x200002e8
 8001fb8:	20000224 	.word	0x20000224
 8001fbc:	20000226 	.word	0x20000226
 8001fc0:	20000228 	.word	0x20000228
 8001fc4:	2000022c 	.word	0x2000022c
 8001fc8:	3e88cb3d 	.word	0x3e88cb3d
 8001fcc:	20000234 	.word	0x20000234

08001fd0 <kalibracja_acc>:

float kalibracja_acc(void) {
 8001fd0:	b5b0      	push	{r4, r5, r7, lr}
 8001fd2:	b088      	sub	sp, #32
 8001fd4:	af04      	add	r7, sp, #16
	for (int i = 0; i < 5000; i++) {
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	e085      	b.n	80020e8 <kalibracja_acc+0x118>
		if (i % 400 == 0)
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	4b52      	ldr	r3, [pc, #328]	; (8002128 <kalibracja_acc+0x158>)
 8001fe0:	fb83 1302 	smull	r1, r3, r3, r2
 8001fe4:	11d9      	asrs	r1, r3, #7
 8001fe6:	17d3      	asrs	r3, r2, #31
 8001fe8:	1acb      	subs	r3, r1, r3
 8001fea:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001fee:	fb01 f303 	mul.w	r3, r1, r3
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d104      	bne.n	8002002 <kalibracja_acc+0x32>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001ff8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ffc:	484b      	ldr	r0, [pc, #300]	; (800212c <kalibracja_acc+0x15c>)
 8001ffe:	f002 fabc 	bl	800457a <HAL_GPIO_TogglePin>

		uint8_t Rec_Data[6];
		HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H, 1, Rec_Data, 6,
 8002002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002006:	9302      	str	r3, [sp, #8]
 8002008:	2306      	movs	r3, #6
 800200a:	9301      	str	r3, [sp, #4]
 800200c:	1d3b      	adds	r3, r7, #4
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	2301      	movs	r3, #1
 8002012:	223b      	movs	r2, #59	; 0x3b
 8002014:	21d0      	movs	r1, #208	; 0xd0
 8002016:	4846      	ldr	r0, [pc, #280]	; (8002130 <kalibracja_acc+0x160>)
 8002018:	f002 fd08 	bl	8004a2c <HAL_I2C_Mem_Read>
				1000);
		acc_rawX = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 800201c:	793b      	ldrb	r3, [r7, #4]
 800201e:	021b      	lsls	r3, r3, #8
 8002020:	b21a      	sxth	r2, r3
 8002022:	797b      	ldrb	r3, [r7, #5]
 8002024:	b21b      	sxth	r3, r3
 8002026:	4313      	orrs	r3, r2
 8002028:	b21a      	sxth	r2, r3
 800202a:	4b42      	ldr	r3, [pc, #264]	; (8002134 <kalibracja_acc+0x164>)
 800202c:	801a      	strh	r2, [r3, #0]
		acc_rawY = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 800202e:	79bb      	ldrb	r3, [r7, #6]
 8002030:	021b      	lsls	r3, r3, #8
 8002032:	b21a      	sxth	r2, r3
 8002034:	79fb      	ldrb	r3, [r7, #7]
 8002036:	b21b      	sxth	r3, r3
 8002038:	4313      	orrs	r3, r2
 800203a:	b21a      	sxth	r2, r3
 800203c:	4b3e      	ldr	r3, [pc, #248]	; (8002138 <kalibracja_acc+0x168>)
 800203e:	801a      	strh	r2, [r3, #0]
		acc_rawZ = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8002040:	7a3b      	ldrb	r3, [r7, #8]
 8002042:	021b      	lsls	r3, r3, #8
 8002044:	b21a      	sxth	r2, r3
 8002046:	7a7b      	ldrb	r3, [r7, #9]
 8002048:	b21b      	sxth	r3, r3
 800204a:	4313      	orrs	r3, r2
 800204c:	b21a      	sxth	r2, r3
 800204e:	4b3b      	ldr	r3, [pc, #236]	; (800213c <kalibracja_acc+0x16c>)
 8002050:	801a      	strh	r2, [r3, #0]

		//kąt jest atanem ilorazu przyspieszeń zatem nie trzeba konwertować do g

		acc_calibr += atan2((float) acc_rawX, (float) acc_rawZ) * -180 / M_PI;
 8002052:	4b38      	ldr	r3, [pc, #224]	; (8002134 <kalibracja_acc+0x164>)
 8002054:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002058:	ee07 3a90 	vmov	s15, r3
 800205c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002060:	ee17 0a90 	vmov	r0, s15
 8002064:	f7fe fa78 	bl	8000558 <__aeabi_f2d>
 8002068:	4604      	mov	r4, r0
 800206a:	460d      	mov	r5, r1
 800206c:	4b33      	ldr	r3, [pc, #204]	; (800213c <kalibracja_acc+0x16c>)
 800206e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002072:	ee07 3a90 	vmov	s15, r3
 8002076:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800207a:	ee17 0a90 	vmov	r0, s15
 800207e:	f7fe fa6b 	bl	8000558 <__aeabi_f2d>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	ec43 2b11 	vmov	d1, r2, r3
 800208a:	ec45 4b10 	vmov	d0, r4, r5
 800208e:	f008 fd35 	bl	800aafc <atan2>
 8002092:	ec51 0b10 	vmov	r0, r1, d0
 8002096:	f04f 0200 	mov.w	r2, #0
 800209a:	4b29      	ldr	r3, [pc, #164]	; (8002140 <kalibracja_acc+0x170>)
 800209c:	f7fe fab4 	bl	8000608 <__aeabi_dmul>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4610      	mov	r0, r2
 80020a6:	4619      	mov	r1, r3
 80020a8:	a31d      	add	r3, pc, #116	; (adr r3, 8002120 <kalibracja_acc+0x150>)
 80020aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ae:	f7fe fbd5 	bl	800085c <__aeabi_ddiv>
 80020b2:	4602      	mov	r2, r0
 80020b4:	460b      	mov	r3, r1
 80020b6:	4614      	mov	r4, r2
 80020b8:	461d      	mov	r5, r3
 80020ba:	4b22      	ldr	r3, [pc, #136]	; (8002144 <kalibracja_acc+0x174>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7fe fa4a 	bl	8000558 <__aeabi_f2d>
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	4620      	mov	r0, r4
 80020ca:	4629      	mov	r1, r5
 80020cc:	f7fe f8e6 	bl	800029c <__adddf3>
 80020d0:	4602      	mov	r2, r0
 80020d2:	460b      	mov	r3, r1
 80020d4:	4610      	mov	r0, r2
 80020d6:	4619      	mov	r1, r3
 80020d8:	f7fe fd6e 	bl	8000bb8 <__aeabi_d2f>
 80020dc:	4603      	mov	r3, r0
 80020de:	4a19      	ldr	r2, [pc, #100]	; (8002144 <kalibracja_acc+0x174>)
 80020e0:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 5000; i++) {
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	3301      	adds	r3, #1
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f241 3287 	movw	r2, #4999	; 0x1387
 80020ee:	4293      	cmp	r3, r2
 80020f0:	f77f af74 	ble.w	8001fdc <kalibracja_acc+0xc>
	}
	acc_calibr /= 5000;
 80020f4:	4b13      	ldr	r3, [pc, #76]	; (8002144 <kalibracja_acc+0x174>)
 80020f6:	ed93 7a00 	vldr	s14, [r3]
 80020fa:	eddf 6a13 	vldr	s13, [pc, #76]	; 8002148 <kalibracja_acc+0x178>
 80020fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002102:	4b10      	ldr	r3, [pc, #64]	; (8002144 <kalibracja_acc+0x174>)
 8002104:	edc3 7a00 	vstr	s15, [r3]

	return acc_calibr;
 8002108:	4b0e      	ldr	r3, [pc, #56]	; (8002144 <kalibracja_acc+0x174>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	ee07 3a90 	vmov	s15, r3
}
 8002110:	eeb0 0a67 	vmov.f32	s0, s15
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bdb0      	pop	{r4, r5, r7, pc}
 800211a:	bf00      	nop
 800211c:	f3af 8000 	nop.w
 8002120:	54442d18 	.word	0x54442d18
 8002124:	400921fb 	.word	0x400921fb
 8002128:	51eb851f 	.word	0x51eb851f
 800212c:	40020800 	.word	0x40020800
 8002130:	200002e8 	.word	0x200002e8
 8002134:	2000021e 	.word	0x2000021e
 8002138:	20000220 	.word	0x20000220
 800213c:	20000222 	.word	0x20000222
 8002140:	c0668000 	.word	0xc0668000
 8002144:	20000230 	.word	0x20000230
 8002148:	459c4000 	.word	0x459c4000

0800214c <kalibracja_gyro>:

float kalibracja_gyro(void) {
 800214c:	b580      	push	{r7, lr}
 800214e:	b088      	sub	sp, #32
 8002150:	af04      	add	r7, sp, #16
	for (int i = 0; i < 5000; i++) {
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	e04c      	b.n	80021f2 <kalibracja_gyro+0xa6>
		if (i % 400 == 0)
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	4b32      	ldr	r3, [pc, #200]	; (8002224 <kalibracja_gyro+0xd8>)
 800215c:	fb83 1302 	smull	r1, r3, r3, r2
 8002160:	11d9      	asrs	r1, r3, #7
 8002162:	17d3      	asrs	r3, r2, #31
 8002164:	1acb      	subs	r3, r1, r3
 8002166:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800216a:	fb01 f303 	mul.w	r3, r1, r3
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	d104      	bne.n	800217e <kalibracja_gyro+0x32>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); //migająca dioda - informacja o procesie kalibracji
 8002174:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002178:	482b      	ldr	r0, [pc, #172]	; (8002228 <kalibracja_gyro+0xdc>)
 800217a:	f002 f9fe 	bl	800457a <HAL_GPIO_TogglePin>
		uint8_t Rec_Data[6];
		HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H, 1, Rec_Data, 6,
 800217e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002182:	9302      	str	r3, [sp, #8]
 8002184:	2306      	movs	r3, #6
 8002186:	9301      	str	r3, [sp, #4]
 8002188:	1d3b      	adds	r3, r7, #4
 800218a:	9300      	str	r3, [sp, #0]
 800218c:	2301      	movs	r3, #1
 800218e:	2243      	movs	r2, #67	; 0x43
 8002190:	21d0      	movs	r1, #208	; 0xd0
 8002192:	4826      	ldr	r0, [pc, #152]	; (800222c <kalibracja_gyro+0xe0>)
 8002194:	f002 fc4a 	bl	8004a2c <HAL_I2C_Mem_Read>
				1000);

		Gyro_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8002198:	793b      	ldrb	r3, [r7, #4]
 800219a:	021b      	lsls	r3, r3, #8
 800219c:	b21a      	sxth	r2, r3
 800219e:	797b      	ldrb	r3, [r7, #5]
 80021a0:	b21b      	sxth	r3, r3
 80021a2:	4313      	orrs	r3, r2
 80021a4:	b21a      	sxth	r2, r3
 80021a6:	4b22      	ldr	r3, [pc, #136]	; (8002230 <kalibracja_gyro+0xe4>)
 80021a8:	801a      	strh	r2, [r3, #0]
		Gyro_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 80021aa:	79bb      	ldrb	r3, [r7, #6]
 80021ac:	021b      	lsls	r3, r3, #8
 80021ae:	b21a      	sxth	r2, r3
 80021b0:	79fb      	ldrb	r3, [r7, #7]
 80021b2:	b21b      	sxth	r3, r3
 80021b4:	4313      	orrs	r3, r2
 80021b6:	b21a      	sxth	r2, r3
 80021b8:	4b1e      	ldr	r3, [pc, #120]	; (8002234 <kalibracja_gyro+0xe8>)
 80021ba:	801a      	strh	r2, [r3, #0]
		Gyro_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 80021bc:	7a3b      	ldrb	r3, [r7, #8]
 80021be:	021b      	lsls	r3, r3, #8
 80021c0:	b21a      	sxth	r2, r3
 80021c2:	7a7b      	ldrb	r3, [r7, #9]
 80021c4:	b21b      	sxth	r3, r3
 80021c6:	4313      	orrs	r3, r2
 80021c8:	b21a      	sxth	r2, r3
 80021ca:	4b1b      	ldr	r3, [pc, #108]	; (8002238 <kalibracja_gyro+0xec>)
 80021cc:	801a      	strh	r2, [r3, #0]
		gyro_calibr += Gyro_Y_RAW;
 80021ce:	4b19      	ldr	r3, [pc, #100]	; (8002234 <kalibracja_gyro+0xe8>)
 80021d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021d4:	ee07 3a90 	vmov	s15, r3
 80021d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021dc:	4b17      	ldr	r3, [pc, #92]	; (800223c <kalibracja_gyro+0xf0>)
 80021de:	edd3 7a00 	vldr	s15, [r3]
 80021e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021e6:	4b15      	ldr	r3, [pc, #84]	; (800223c <kalibracja_gyro+0xf0>)
 80021e8:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 5000; i++) {
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	3301      	adds	r3, #1
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f241 3287 	movw	r2, #4999	; 0x1387
 80021f8:	4293      	cmp	r3, r2
 80021fa:	ddad      	ble.n	8002158 <kalibracja_gyro+0xc>

	}
	gyro_calibr /= 5000;                                      //wartosc srednia
 80021fc:	4b0f      	ldr	r3, [pc, #60]	; (800223c <kalibracja_gyro+0xf0>)
 80021fe:	ed93 7a00 	vldr	s14, [r3]
 8002202:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8002240 <kalibracja_gyro+0xf4>
 8002206:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800220a:	4b0c      	ldr	r3, [pc, #48]	; (800223c <kalibracja_gyro+0xf0>)
 800220c:	edc3 7a00 	vstr	s15, [r3]

	return gyro_calibr;
 8002210:	4b0a      	ldr	r3, [pc, #40]	; (800223c <kalibracja_gyro+0xf0>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	ee07 3a90 	vmov	s15, r3
}
 8002218:	eeb0 0a67 	vmov.f32	s0, s15
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	51eb851f 	.word	0x51eb851f
 8002228:	40020800 	.word	0x40020800
 800222c:	200002e8 	.word	0x200002e8
 8002230:	20000224 	.word	0x20000224
 8002234:	20000226 	.word	0x20000226
 8002238:	20000228 	.word	0x20000228
 800223c:	2000022c 	.word	0x2000022c
 8002240:	459c4000 	.word	0x459c4000
 8002244:	00000000 	.word	0x00000000

08002248 <pid_calculations>:

#include "pid.h"

float e_n, poprzedni_e_n = 0;

float pid_calculations(float angle, float *suma_e_n, float steering_angle) {
 8002248:	b5b0      	push	{r4, r5, r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002252:	60b8      	str	r0, [r7, #8]
 8002254:	edc7 0a01 	vstr	s1, [r7, #4]
	//definicja uchybu - aktualny kat odjac kat zadany
	//theta_ref += x;
	float potentiometer = potentiometer_value();
 8002258:	f7fe ffa0 	bl	800119c <potentiometer_value>
 800225c:	ed87 0a04 	vstr	s0, [r7, #16]

	e_n = (theta_ref - steering_angle) - angle - potentiometer;
 8002260:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80023a0 <pid_calculations+0x158>
 8002264:	edd7 7a01 	vldr	s15, [r7, #4]
 8002268:	ee37 7a67 	vsub.f32	s14, s14, s15
 800226c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002270:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002274:	edd7 7a04 	vldr	s15, [r7, #16]
 8002278:	ee77 7a67 	vsub.f32	s15, s14, s15
 800227c:	4b49      	ldr	r3, [pc, #292]	; (80023a4 <pid_calculations+0x15c>)
 800227e:	edc3 7a00 	vstr	s15, [r3]

	//Obliczenie i ograniczenie sumy wszystkich błędów
	*suma_e_n += e_n;
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	ed93 7a00 	vldr	s14, [r3]
 8002288:	4b46      	ldr	r3, [pc, #280]	; (80023a4 <pid_calculations+0x15c>)
 800228a:	edd3 7a00 	vldr	s15, [r3]
 800228e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	edc3 7a00 	vstr	s15, [r3]
	if (*suma_e_n > ograniczenie_regulatora)
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	edd3 7a00 	vldr	s15, [r3]
 800229e:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80023a8 <pid_calculations+0x160>
 80022a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022aa:	dd03      	ble.n	80022b4 <pid_calculations+0x6c>
		*suma_e_n = ograniczenie_regulatora;
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	4a3f      	ldr	r2, [pc, #252]	; (80023ac <pid_calculations+0x164>)
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	e00c      	b.n	80022ce <pid_calculations+0x86>
	else if (*suma_e_n < -ograniczenie_regulatora)
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	edd3 7a00 	vldr	s15, [r3]
 80022ba:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80023b0 <pid_calculations+0x168>
 80022be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022c6:	d502      	bpl.n	80022ce <pid_calculations+0x86>
		*suma_e_n = -ograniczenie_regulatora;
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	4a3a      	ldr	r2, [pc, #232]	; (80023b4 <pid_calculations+0x16c>)
 80022cc:	601a      	str	r2, [r3, #0]
	//PID
	float output = k_p * e_n + k_i * *suma_e_n + k_d * (e_n - poprzedni_e_n);
 80022ce:	4b35      	ldr	r3, [pc, #212]	; (80023a4 <pid_calculations+0x15c>)
 80022d0:	edd3 7a00 	vldr	s15, [r3]
 80022d4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80022d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022dc:	ee17 0a90 	vmov	r0, s15
 80022e0:	f7fe f93a 	bl	8000558 <__aeabi_f2d>
 80022e4:	4604      	mov	r4, r0
 80022e6:	460d      	mov	r5, r1
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7fe f933 	bl	8000558 <__aeabi_f2d>
 80022f2:	a329      	add	r3, pc, #164	; (adr r3, 8002398 <pid_calculations+0x150>)
 80022f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f8:	f7fe f986 	bl	8000608 <__aeabi_dmul>
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
 8002300:	4620      	mov	r0, r4
 8002302:	4629      	mov	r1, r5
 8002304:	f7fd ffca 	bl	800029c <__adddf3>
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	4614      	mov	r4, r2
 800230e:	461d      	mov	r5, r3
 8002310:	4b24      	ldr	r3, [pc, #144]	; (80023a4 <pid_calculations+0x15c>)
 8002312:	ed93 7a00 	vldr	s14, [r3]
 8002316:	4b28      	ldr	r3, [pc, #160]	; (80023b8 <pid_calculations+0x170>)
 8002318:	edd3 7a00 	vldr	s15, [r3]
 800231c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002320:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80023bc <pid_calculations+0x174>
 8002324:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002328:	ee17 0a90 	vmov	r0, s15
 800232c:	f7fe f914 	bl	8000558 <__aeabi_f2d>
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	4620      	mov	r0, r4
 8002336:	4629      	mov	r1, r5
 8002338:	f7fd ffb0 	bl	800029c <__adddf3>
 800233c:	4602      	mov	r2, r0
 800233e:	460b      	mov	r3, r1
 8002340:	4610      	mov	r0, r2
 8002342:	4619      	mov	r1, r3
 8002344:	f7fe fc38 	bl	8000bb8 <__aeabi_d2f>
 8002348:	4603      	mov	r3, r0
 800234a:	617b      	str	r3, [r7, #20]

	//ograniczenie wyjścia PID
	if (output > ograniczenie_regulatora)
 800234c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002350:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80023a8 <pid_calculations+0x160>
 8002354:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800235c:	dd02      	ble.n	8002364 <pid_calculations+0x11c>
		output = ograniczenie_regulatora;
 800235e:	4b13      	ldr	r3, [pc, #76]	; (80023ac <pid_calculations+0x164>)
 8002360:	617b      	str	r3, [r7, #20]
 8002362:	e00a      	b.n	800237a <pid_calculations+0x132>
	else if (output < -ograniczenie_regulatora)
 8002364:	edd7 7a05 	vldr	s15, [r7, #20]
 8002368:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80023b0 <pid_calculations+0x168>
 800236c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002374:	d501      	bpl.n	800237a <pid_calculations+0x132>
		output = -ograniczenie_regulatora;
 8002376:	4b0f      	ldr	r3, [pc, #60]	; (80023b4 <pid_calculations+0x16c>)
 8002378:	617b      	str	r3, [r7, #20]

	//Zapamiętanie ostatniego błędu
	poprzedni_e_n = e_n;
 800237a:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <pid_calculations+0x15c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a0e      	ldr	r2, [pc, #56]	; (80023b8 <pid_calculations+0x170>)
 8002380:	6013      	str	r3, [r2, #0]

	//przełącznik histerezowy (zapobiega ciągłym próbom regulacji w pobliżu theta_ref)
//			if (pid_output < theta_ref+0.5 && pid_output > theta_ref-0.5)
//				pid_output = 0;
	return output;
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	ee07 3a90 	vmov	s15, r3
}
 8002388:	eeb0 0a67 	vmov.f32	s0, s15
 800238c:	3718      	adds	r7, #24
 800238e:	46bd      	mov	sp, r7
 8002390:	bdb0      	pop	{r4, r5, r7, pc}
 8002392:	bf00      	nop
 8002394:	f3af 8000 	nop.w
 8002398:	33333333 	.word	0x33333333
 800239c:	3fd33333 	.word	0x3fd33333
 80023a0:	42a00000 	.word	0x42a00000
 80023a4:	20000350 	.word	0x20000350
 80023a8:	43c80000 	.word	0x43c80000
 80023ac:	43c80000 	.word	0x43c80000
 80023b0:	c3c80000 	.word	0xc3c80000
 80023b4:	c3c80000 	.word	0xc3c80000
 80023b8:	20000238 	.word	0x20000238
 80023bc:	44960000 	.word	0x44960000

080023c0 <horizontal_control>:
int16_t VR_out = 0;
int16_t V_nierownosc = 0;
int16_t Relay_SW = 0;
int16_t Funkcja_SW = 0;

void horizontal_control(uint16_t *control_data) {
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af02      	add	r7, sp, #8
 80023c6:	6078      	str	r0, [r7, #4]
	V_bok_apar = control_data[1 - 1];	//predkosc boki
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	881b      	ldrh	r3, [r3, #0]
 80023cc:	b21a      	sxth	r2, r3
 80023ce:	4b5e      	ldr	r3, [pc, #376]	; (8002548 <horizontal_control+0x188>)
 80023d0:	801a      	strh	r2, [r3, #0]
	V_apar = control_data[2 - 1];   //predkosc
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3302      	adds	r3, #2
 80023d6:	881b      	ldrh	r3, [r3, #0]
 80023d8:	b21a      	sxth	r2, r3
 80023da:	4b5c      	ldr	r3, [pc, #368]	; (800254c <horizontal_control+0x18c>)
 80023dc:	801a      	strh	r2, [r3, #0]
	Funkcja_SW = control_data[7 - 1];
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	330c      	adds	r3, #12
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	b21a      	sxth	r2, r3
 80023e6:	4b5a      	ldr	r3, [pc, #360]	; (8002550 <horizontal_control+0x190>)
 80023e8:	801a      	strh	r2, [r3, #0]
	Relay_SW = control_data[6 - 1];	//zalacz silniki
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	330a      	adds	r3, #10
 80023ee:	881b      	ldrh	r3, [r3, #0]
 80023f0:	b21a      	sxth	r2, r3
 80023f2:	4b58      	ldr	r3, [pc, #352]	; (8002554 <horizontal_control+0x194>)
 80023f4:	801a      	strh	r2, [r3, #0]
	V_max_apar = control_data[5 - 1];	//regulacja predkosci silnikow
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	3308      	adds	r3, #8
 80023fa:	881b      	ldrh	r3, [r3, #0]
 80023fc:	b21a      	sxth	r2, r3
 80023fe:	4b56      	ldr	r3, [pc, #344]	; (8002558 <horizontal_control+0x198>)
 8002400:	801a      	strh	r2, [r3, #0]

	V_max = map(V_max_apar, 1000, 2000, 0, 500);
 8002402:	4b55      	ldr	r3, [pc, #340]	; (8002558 <horizontal_control+0x198>)
 8002404:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002408:	4618      	mov	r0, r3
 800240a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	2300      	movs	r3, #0
 8002412:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002416:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800241a:	f7fe fe2f 	bl	800107c <map>
 800241e:	4603      	mov	r3, r0
 8002420:	b21a      	sxth	r2, r3
 8002422:	4b4e      	ldr	r3, [pc, #312]	; (800255c <horizontal_control+0x19c>)
 8002424:	801a      	strh	r2, [r3, #0]
	//                                      / tu jest wartocm maskymalnej rotacji
	Fi_max = map(Fi_max_apar, 1000, 2000, 0, 200);
 8002426:	4b4e      	ldr	r3, [pc, #312]	; (8002560 <horizontal_control+0x1a0>)
 8002428:	f9b3 3000 	ldrsh.w	r3, [r3]
 800242c:	4618      	mov	r0, r3
 800242e:	23c8      	movs	r3, #200	; 0xc8
 8002430:	9300      	str	r3, [sp, #0]
 8002432:	2300      	movs	r3, #0
 8002434:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002438:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800243c:	f7fe fe1e 	bl	800107c <map>
 8002440:	4603      	mov	r3, r0
 8002442:	b21a      	sxth	r2, r3
 8002444:	4b47      	ldr	r3, [pc, #284]	; (8002564 <horizontal_control+0x1a4>)
 8002446:	801a      	strh	r2, [r3, #0]

	if ((Relay_SW > 1900) && (Relay_SW < 2100)) {
 8002448:	4b42      	ldr	r3, [pc, #264]	; (8002554 <horizontal_control+0x194>)
 800244a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800244e:	f240 726c 	movw	r2, #1900	; 0x76c
 8002452:	4293      	cmp	r3, r2
 8002454:	dd0a      	ble.n	800246c <horizontal_control+0xac>
 8002456:	4b3f      	ldr	r3, [pc, #252]	; (8002554 <horizontal_control+0x194>)
 8002458:	f9b3 3000 	ldrsh.w	r3, [r3]
 800245c:	f640 0233 	movw	r2, #2099	; 0x833
 8002460:	4293      	cmp	r3, r2
 8002462:	dc03      	bgt.n	800246c <horizontal_control+0xac>
		Jazda = 1;
 8002464:	4b40      	ldr	r3, [pc, #256]	; (8002568 <horizontal_control+0x1a8>)
 8002466:	2201      	movs	r2, #1
 8002468:	801a      	strh	r2, [r3, #0]
 800246a:	e002      	b.n	8002472 <horizontal_control+0xb2>
	} else {
		Jazda = 0;
 800246c:	4b3e      	ldr	r3, [pc, #248]	; (8002568 <horizontal_control+0x1a8>)
 800246e:	2200      	movs	r2, #0
 8002470:	801a      	strh	r2, [r3, #0]
	}

	if (Jazda == 1) {
 8002472:	4b3d      	ldr	r3, [pc, #244]	; (8002568 <horizontal_control+0x1a8>)
 8002474:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d132      	bne.n	80024e2 <horizontal_control+0x122>
		Robot_V = -map(V_apar, 1000, 2000, -V_max, V_max);
 800247c:	4b33      	ldr	r3, [pc, #204]	; (800254c <horizontal_control+0x18c>)
 800247e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002482:	4618      	mov	r0, r3
 8002484:	4b35      	ldr	r3, [pc, #212]	; (800255c <horizontal_control+0x19c>)
 8002486:	f9b3 3000 	ldrsh.w	r3, [r3]
 800248a:	425b      	negs	r3, r3
 800248c:	4a33      	ldr	r2, [pc, #204]	; (800255c <horizontal_control+0x19c>)
 800248e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002492:	9200      	str	r2, [sp, #0]
 8002494:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002498:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800249c:	f7fe fdee 	bl	800107c <map>
 80024a0:	4603      	mov	r3, r0
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	425b      	negs	r3, r3
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	b21a      	sxth	r2, r3
 80024aa:	4b30      	ldr	r3, [pc, #192]	; (800256c <horizontal_control+0x1ac>)
 80024ac:	801a      	strh	r2, [r3, #0]
		Robot_Fi = -map(V_bok_apar, 1000, 2000, -Fi_max, Fi_max);
 80024ae:	4b26      	ldr	r3, [pc, #152]	; (8002548 <horizontal_control+0x188>)
 80024b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024b4:	4618      	mov	r0, r3
 80024b6:	4b2b      	ldr	r3, [pc, #172]	; (8002564 <horizontal_control+0x1a4>)
 80024b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024bc:	425b      	negs	r3, r3
 80024be:	4a29      	ldr	r2, [pc, #164]	; (8002564 <horizontal_control+0x1a4>)
 80024c0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80024c4:	9200      	str	r2, [sp, #0]
 80024c6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80024ca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80024ce:	f7fe fdd5 	bl	800107c <map>
 80024d2:	4603      	mov	r3, r0
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	425b      	negs	r3, r3
 80024d8:	b29b      	uxth	r3, r3
 80024da:	b21a      	sxth	r2, r3
 80024dc:	4b24      	ldr	r3, [pc, #144]	; (8002570 <horizontal_control+0x1b0>)
 80024de:	801a      	strh	r2, [r3, #0]
 80024e0:	e005      	b.n	80024ee <horizontal_control+0x12e>
	} else {
		Robot_V = 0;
 80024e2:	4b22      	ldr	r3, [pc, #136]	; (800256c <horizontal_control+0x1ac>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	801a      	strh	r2, [r3, #0]
		Robot_Fi = 0;
 80024e8:	4b21      	ldr	r3, [pc, #132]	; (8002570 <horizontal_control+0x1b0>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	801a      	strh	r2, [r3, #0]
	}
	if ((Robot_V < 5) && (Robot_V > -5))
 80024ee:	4b1f      	ldr	r3, [pc, #124]	; (800256c <horizontal_control+0x1ac>)
 80024f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024f4:	2b04      	cmp	r3, #4
 80024f6:	dc08      	bgt.n	800250a <horizontal_control+0x14a>
 80024f8:	4b1c      	ldr	r3, [pc, #112]	; (800256c <horizontal_control+0x1ac>)
 80024fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024fe:	f113 0f04 	cmn.w	r3, #4
 8002502:	db02      	blt.n	800250a <horizontal_control+0x14a>
		Robot_V = 0;
 8002504:	4b19      	ldr	r3, [pc, #100]	; (800256c <horizontal_control+0x1ac>)
 8002506:	2200      	movs	r2, #0
 8002508:	801a      	strh	r2, [r3, #0]
	if ((Robot_Fi < 5) && (Robot_Fi > -5))
 800250a:	4b19      	ldr	r3, [pc, #100]	; (8002570 <horizontal_control+0x1b0>)
 800250c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002510:	2b04      	cmp	r3, #4
 8002512:	dc08      	bgt.n	8002526 <horizontal_control+0x166>
 8002514:	4b16      	ldr	r3, [pc, #88]	; (8002570 <horizontal_control+0x1b0>)
 8002516:	f9b3 3000 	ldrsh.w	r3, [r3]
 800251a:	f113 0f04 	cmn.w	r3, #4
 800251e:	db02      	blt.n	8002526 <horizontal_control+0x166>
		Robot_Fi = 0;
 8002520:	4b13      	ldr	r3, [pc, #76]	; (8002570 <horizontal_control+0x1b0>)
 8002522:	2200      	movs	r2, #0
 8002524:	801a      	strh	r2, [r3, #0]

	Send(Robot_Fi, Robot_V);
 8002526:	4b12      	ldr	r3, [pc, #72]	; (8002570 <horizontal_control+0x1b0>)
 8002528:	f9b3 3000 	ldrsh.w	r3, [r3]
 800252c:	4a0f      	ldr	r2, [pc, #60]	; (800256c <horizontal_control+0x1ac>)
 800252e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002532:	4611      	mov	r1, r2
 8002534:	4618      	mov	r0, r3
 8002536:	f7fe fef9 	bl	800132c <Send>
	HAL_Delay(7);//need wait a little before next usage, may reduce later (should be at least 7 ms)
 800253a:	2007      	movs	r0, #7
 800253c:	f000 fd9a 	bl	8003074 <HAL_Delay>
}
 8002540:	bf00      	nop
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	20000244 	.word	0x20000244
 800254c:	20000242 	.word	0x20000242
 8002550:	20000250 	.word	0x20000250
 8002554:	2000024e 	.word	0x2000024e
 8002558:	20000246 	.word	0x20000246
 800255c:	2000024a 	.word	0x2000024a
 8002560:	20000248 	.word	0x20000248
 8002564:	2000024c 	.word	0x2000024c
 8002568:	2000023c 	.word	0x2000023c
 800256c:	2000023e 	.word	0x2000023e
 8002570:	20000240 	.word	0x20000240

08002574 <vertical_control>:

float pid_output = 0, suma_e_n = 0, steering_angle = 0;
int start;
int vertical_control(uint16_t *control_data, float angle) {
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af02      	add	r7, sp, #8
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	ed87 0a00 	vstr	s0, [r7]

	V_bok_apar = control_data[1 - 1];	//predkosc boki
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	b21a      	sxth	r2, r3
 8002586:	4b82      	ldr	r3, [pc, #520]	; (8002790 <vertical_control+0x21c>)
 8002588:	801a      	strh	r2, [r3, #0]
	V_apar = control_data[2 - 1];   //predkosc
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	3302      	adds	r3, #2
 800258e:	881b      	ldrh	r3, [r3, #0]
 8002590:	b21a      	sxth	r2, r3
 8002592:	4b80      	ldr	r3, [pc, #512]	; (8002794 <vertical_control+0x220>)
 8002594:	801a      	strh	r2, [r3, #0]
	Funkcja_SW = control_data[7 - 1];
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	330c      	adds	r3, #12
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	b21a      	sxth	r2, r3
 800259e:	4b7e      	ldr	r3, [pc, #504]	; (8002798 <vertical_control+0x224>)
 80025a0:	801a      	strh	r2, [r3, #0]
	Relay_SW = control_data[6 - 1];	//zalacz silniki
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	330a      	adds	r3, #10
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	b21a      	sxth	r2, r3
 80025aa:	4b7c      	ldr	r3, [pc, #496]	; (800279c <vertical_control+0x228>)
 80025ac:	801a      	strh	r2, [r3, #0]
	V_max_apar = control_data[5 - 1];	//regulacja predkosci silnikow
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	3308      	adds	r3, #8
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	b21a      	sxth	r2, r3
 80025b6:	4b7a      	ldr	r3, [pc, #488]	; (80027a0 <vertical_control+0x22c>)
 80025b8:	801a      	strh	r2, [r3, #0]

	V_max = map(V_max_apar, 1000, 2000, 0, 7); //zadawany kat
 80025ba:	4b79      	ldr	r3, [pc, #484]	; (80027a0 <vertical_control+0x22c>)
 80025bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025c0:	4618      	mov	r0, r3
 80025c2:	2307      	movs	r3, #7
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	2300      	movs	r3, #0
 80025c8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80025cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80025d0:	f7fe fd54 	bl	800107c <map>
 80025d4:	4603      	mov	r3, r0
 80025d6:	b21a      	sxth	r2, r3
 80025d8:	4b72      	ldr	r3, [pc, #456]	; (80027a4 <vertical_control+0x230>)
 80025da:	801a      	strh	r2, [r3, #0]
	//                                      / tu jest wartocm maskymalnej rotacji
	Fi_max = map(Fi_max_apar, 1000, 2000, 0, 200);
 80025dc:	4b72      	ldr	r3, [pc, #456]	; (80027a8 <vertical_control+0x234>)
 80025de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025e2:	4618      	mov	r0, r3
 80025e4:	23c8      	movs	r3, #200	; 0xc8
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	2300      	movs	r3, #0
 80025ea:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80025ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80025f2:	f7fe fd43 	bl	800107c <map>
 80025f6:	4603      	mov	r3, r0
 80025f8:	b21a      	sxth	r2, r3
 80025fa:	4b6c      	ldr	r3, [pc, #432]	; (80027ac <vertical_control+0x238>)
 80025fc:	801a      	strh	r2, [r3, #0]

	steering_angle = mapfloat((float) V_apar, 1000, 2000, (float) -V_max,
 80025fe:	4b65      	ldr	r3, [pc, #404]	; (8002794 <vertical_control+0x220>)
 8002600:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002604:	ee07 3a90 	vmov	s15, r3
 8002608:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800260c:	4b65      	ldr	r3, [pc, #404]	; (80027a4 <vertical_control+0x230>)
 800260e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002612:	425b      	negs	r3, r3
 8002614:	ee07 3a10 	vmov	s14, r3
 8002618:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800261c:	4b61      	ldr	r3, [pc, #388]	; (80027a4 <vertical_control+0x230>)
 800261e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002622:	ee06 3a90 	vmov	s13, r3
 8002626:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800262a:	eeb0 2a66 	vmov.f32	s4, s13
 800262e:	eef0 1a47 	vmov.f32	s3, s14
 8002632:	ed9f 1a5f 	vldr	s2, [pc, #380]	; 80027b0 <vertical_control+0x23c>
 8002636:	eddf 0a5f 	vldr	s1, [pc, #380]	; 80027b4 <vertical_control+0x240>
 800263a:	eeb0 0a67 	vmov.f32	s0, s15
 800263e:	f7fe fd39 	bl	80010b4 <mapfloat>
 8002642:	eef0 7a40 	vmov.f32	s15, s0
 8002646:	4b5c      	ldr	r3, [pc, #368]	; (80027b8 <vertical_control+0x244>)
 8002648:	edc3 7a00 	vstr	s15, [r3]
			(float) V_max);
	float pid_output = pid_calculations(angle, &suma_e_n, steering_angle);
 800264c:	4b5a      	ldr	r3, [pc, #360]	; (80027b8 <vertical_control+0x244>)
 800264e:	edd3 7a00 	vldr	s15, [r3]
 8002652:	eef0 0a67 	vmov.f32	s1, s15
 8002656:	4859      	ldr	r0, [pc, #356]	; (80027bc <vertical_control+0x248>)
 8002658:	ed97 0a00 	vldr	s0, [r7]
 800265c:	f7ff fdf4 	bl	8002248 <pid_calculations>
 8002660:	ed87 0a03 	vstr	s0, [r7, #12]

	if ((Relay_SW > 1900) && (Relay_SW < 2100) && angle > (theta_ref - 45)
 8002664:	4b4d      	ldr	r3, [pc, #308]	; (800279c <vertical_control+0x228>)
 8002666:	f9b3 3000 	ldrsh.w	r3, [r3]
 800266a:	f240 726c 	movw	r2, #1900	; 0x76c
 800266e:	4293      	cmp	r3, r2
 8002670:	dd26      	ble.n	80026c0 <vertical_control+0x14c>
 8002672:	4b4a      	ldr	r3, [pc, #296]	; (800279c <vertical_control+0x228>)
 8002674:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002678:	f640 0233 	movw	r2, #2099	; 0x833
 800267c:	4293      	cmp	r3, r2
 800267e:	dc1f      	bgt.n	80026c0 <vertical_control+0x14c>
 8002680:	edd7 7a00 	vldr	s15, [r7]
 8002684:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80027c0 <vertical_control+0x24c>
 8002688:	eef4 7ac7 	vcmpe.f32	s15, s14
 800268c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002690:	dd16      	ble.n	80026c0 <vertical_control+0x14c>
			&& angle < (theta_ref + 45) && (Funkcja_SW > 1500)) {
 8002692:	edd7 7a00 	vldr	s15, [r7]
 8002696:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80027c4 <vertical_control+0x250>
 800269a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800269e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a2:	d50d      	bpl.n	80026c0 <vertical_control+0x14c>
 80026a4:	4b3c      	ldr	r3, [pc, #240]	; (8002798 <vertical_control+0x224>)
 80026a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026aa:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80026ae:	4293      	cmp	r3, r2
 80026b0:	dd06      	ble.n	80026c0 <vertical_control+0x14c>
		Jazda = 1;
 80026b2:	4b45      	ldr	r3, [pc, #276]	; (80027c8 <vertical_control+0x254>)
 80026b4:	2201      	movs	r2, #1
 80026b6:	801a      	strh	r2, [r3, #0]
		start = 1;
 80026b8:	4b44      	ldr	r3, [pc, #272]	; (80027cc <vertical_control+0x258>)
 80026ba:	2201      	movs	r2, #1
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	e00c      	b.n	80026da <vertical_control+0x166>
	} else {
		Jazda = 0;
 80026c0:	4b41      	ldr	r3, [pc, #260]	; (80027c8 <vertical_control+0x254>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	801a      	strh	r2, [r3, #0]
		suma_e_n = 0;
 80026c6:	4b3d      	ldr	r3, [pc, #244]	; (80027bc <vertical_control+0x248>)
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	601a      	str	r2, [r3, #0]
		pid_output = 0;
 80026ce:	f04f 0300 	mov.w	r3, #0
 80026d2:	60fb      	str	r3, [r7, #12]
		start = 0;
 80026d4:	4b3d      	ldr	r3, [pc, #244]	; (80027cc <vertical_control+0x258>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	601a      	str	r2, [r3, #0]
	}

	if (Jazda == 1) {
 80026da:	4b3b      	ldr	r3, [pc, #236]	; (80027c8 <vertical_control+0x254>)
 80026dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d124      	bne.n	800272e <vertical_control+0x1ba>
		Robot_V = -pid_output;
 80026e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80026e8:	eef1 7a67 	vneg.f32	s15, s15
 80026ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026f0:	ee17 3a90 	vmov	r3, s15
 80026f4:	b21a      	sxth	r2, r3
 80026f6:	4b36      	ldr	r3, [pc, #216]	; (80027d0 <vertical_control+0x25c>)
 80026f8:	801a      	strh	r2, [r3, #0]
		Robot_Fi = -map(V_bok_apar, 1000, 2000, -Fi_max, Fi_max);
 80026fa:	4b25      	ldr	r3, [pc, #148]	; (8002790 <vertical_control+0x21c>)
 80026fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002700:	4618      	mov	r0, r3
 8002702:	4b2a      	ldr	r3, [pc, #168]	; (80027ac <vertical_control+0x238>)
 8002704:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002708:	425b      	negs	r3, r3
 800270a:	4a28      	ldr	r2, [pc, #160]	; (80027ac <vertical_control+0x238>)
 800270c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002710:	9200      	str	r2, [sp, #0]
 8002712:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002716:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800271a:	f7fe fcaf 	bl	800107c <map>
 800271e:	4603      	mov	r3, r0
 8002720:	b29b      	uxth	r3, r3
 8002722:	425b      	negs	r3, r3
 8002724:	b29b      	uxth	r3, r3
 8002726:	b21a      	sxth	r2, r3
 8002728:	4b2a      	ldr	r3, [pc, #168]	; (80027d4 <vertical_control+0x260>)
 800272a:	801a      	strh	r2, [r3, #0]
 800272c:	e005      	b.n	800273a <vertical_control+0x1c6>
	} else {
		Robot_V = 0;
 800272e:	4b28      	ldr	r3, [pc, #160]	; (80027d0 <vertical_control+0x25c>)
 8002730:	2200      	movs	r2, #0
 8002732:	801a      	strh	r2, [r3, #0]
		Robot_Fi = 0;
 8002734:	4b27      	ldr	r3, [pc, #156]	; (80027d4 <vertical_control+0x260>)
 8002736:	2200      	movs	r2, #0
 8002738:	801a      	strh	r2, [r3, #0]
	}
	if ((Robot_V < 1) && (Robot_V > -1))
 800273a:	4b25      	ldr	r3, [pc, #148]	; (80027d0 <vertical_control+0x25c>)
 800273c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002740:	2b00      	cmp	r3, #0
 8002742:	dc07      	bgt.n	8002754 <vertical_control+0x1e0>
 8002744:	4b22      	ldr	r3, [pc, #136]	; (80027d0 <vertical_control+0x25c>)
 8002746:	f9b3 3000 	ldrsh.w	r3, [r3]
 800274a:	2b00      	cmp	r3, #0
 800274c:	db02      	blt.n	8002754 <vertical_control+0x1e0>
		Robot_V = 0;
 800274e:	4b20      	ldr	r3, [pc, #128]	; (80027d0 <vertical_control+0x25c>)
 8002750:	2200      	movs	r2, #0
 8002752:	801a      	strh	r2, [r3, #0]
	if ((Robot_Fi < 5) && (Robot_Fi > -5))
 8002754:	4b1f      	ldr	r3, [pc, #124]	; (80027d4 <vertical_control+0x260>)
 8002756:	f9b3 3000 	ldrsh.w	r3, [r3]
 800275a:	2b04      	cmp	r3, #4
 800275c:	dc08      	bgt.n	8002770 <vertical_control+0x1fc>
 800275e:	4b1d      	ldr	r3, [pc, #116]	; (80027d4 <vertical_control+0x260>)
 8002760:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002764:	f113 0f04 	cmn.w	r3, #4
 8002768:	db02      	blt.n	8002770 <vertical_control+0x1fc>
		Robot_Fi = 0;
 800276a:	4b1a      	ldr	r3, [pc, #104]	; (80027d4 <vertical_control+0x260>)
 800276c:	2200      	movs	r2, #0
 800276e:	801a      	strh	r2, [r3, #0]

//	Robot_V = pid_output;
//	Robot_Fi = 0;
	Send(Robot_Fi, Robot_V);
 8002770:	4b18      	ldr	r3, [pc, #96]	; (80027d4 <vertical_control+0x260>)
 8002772:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002776:	4a16      	ldr	r2, [pc, #88]	; (80027d0 <vertical_control+0x25c>)
 8002778:	f9b2 2000 	ldrsh.w	r2, [r2]
 800277c:	4611      	mov	r1, r2
 800277e:	4618      	mov	r0, r3
 8002780:	f7fe fdd4 	bl	800132c <Send>
	return start;
 8002784:	4b11      	ldr	r3, [pc, #68]	; (80027cc <vertical_control+0x258>)
 8002786:	681b      	ldr	r3, [r3, #0]
}
 8002788:	4618      	mov	r0, r3
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	20000244 	.word	0x20000244
 8002794:	20000242 	.word	0x20000242
 8002798:	20000250 	.word	0x20000250
 800279c:	2000024e 	.word	0x2000024e
 80027a0:	20000246 	.word	0x20000246
 80027a4:	2000024a 	.word	0x2000024a
 80027a8:	20000248 	.word	0x20000248
 80027ac:	2000024c 	.word	0x2000024c
 80027b0:	44fa0000 	.word	0x44fa0000
 80027b4:	447a0000 	.word	0x447a0000
 80027b8:	20000258 	.word	0x20000258
 80027bc:	20000254 	.word	0x20000254
 80027c0:	420c0000 	.word	0x420c0000
 80027c4:	42fa0000 	.word	0x42fa0000
 80027c8:	2000023c 	.word	0x2000023c
 80027cc:	20000354 	.word	0x20000354
 80027d0:	2000023e 	.word	0x2000023e
 80027d4:	20000240 	.word	0x20000240

080027d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	607b      	str	r3, [r7, #4]
 80027e2:	4b10      	ldr	r3, [pc, #64]	; (8002824 <HAL_MspInit+0x4c>)
 80027e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e6:	4a0f      	ldr	r2, [pc, #60]	; (8002824 <HAL_MspInit+0x4c>)
 80027e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027ec:	6453      	str	r3, [r2, #68]	; 0x44
 80027ee:	4b0d      	ldr	r3, [pc, #52]	; (8002824 <HAL_MspInit+0x4c>)
 80027f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027f6:	607b      	str	r3, [r7, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	603b      	str	r3, [r7, #0]
 80027fe:	4b09      	ldr	r3, [pc, #36]	; (8002824 <HAL_MspInit+0x4c>)
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	4a08      	ldr	r2, [pc, #32]	; (8002824 <HAL_MspInit+0x4c>)
 8002804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002808:	6413      	str	r3, [r2, #64]	; 0x40
 800280a:	4b06      	ldr	r3, [pc, #24]	; (8002824 <HAL_MspInit+0x4c>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002812:	603b      	str	r3, [r7, #0]
 8002814:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	40023800 	.word	0x40023800

08002828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800282c:	e7fe      	b.n	800282c <NMI_Handler+0x4>

0800282e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800282e:	b480      	push	{r7}
 8002830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002832:	e7fe      	b.n	8002832 <HardFault_Handler+0x4>

08002834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002838:	e7fe      	b.n	8002838 <MemManage_Handler+0x4>

0800283a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800283a:	b480      	push	{r7}
 800283c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800283e:	e7fe      	b.n	800283e <BusFault_Handler+0x4>

08002840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002844:	e7fe      	b.n	8002844 <UsageFault_Handler+0x4>

08002846 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002846:	b480      	push	{r7}
 8002848:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800284a:	bf00      	nop
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002858:	bf00      	nop
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002862:	b480      	push	{r7}
 8002864:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002866:	bf00      	nop
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002874:	f000 fbde 	bl	8003034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002878:	bf00      	nop
 800287a:	bd80      	pop	{r7, pc}

0800287c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002880:	4802      	ldr	r0, [pc, #8]	; (800288c <USART2_IRQHandler+0x10>)
 8002882:	f004 f9f9 	bl	8006c78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002886:	bf00      	nop
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	20000488 	.word	0x20000488

08002890 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002894:	4802      	ldr	r0, [pc, #8]	; (80028a0 <DMA2_Stream2_IRQHandler+0x10>)
 8002896:	f001 fa69 	bl	8003d6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800289a:	bf00      	nop
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	200003a0 	.word	0x200003a0

080028a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
	return 1;
 80028a8:	2301      	movs	r3, #1
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <_kill>:

int _kill(int pid, int sig)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80028be:	f005 fa57 	bl	8007d70 <__errno>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2216      	movs	r2, #22
 80028c6:	601a      	str	r2, [r3, #0]
	return -1;
 80028c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <_exit>:

void _exit (int status)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80028dc:	f04f 31ff 	mov.w	r1, #4294967295
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f7ff ffe7 	bl	80028b4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80028e6:	e7fe      	b.n	80028e6 <_exit+0x12>

080028e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028f4:	2300      	movs	r3, #0
 80028f6:	617b      	str	r3, [r7, #20]
 80028f8:	e00a      	b.n	8002910 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80028fa:	f3af 8000 	nop.w
 80028fe:	4601      	mov	r1, r0
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	1c5a      	adds	r2, r3, #1
 8002904:	60ba      	str	r2, [r7, #8]
 8002906:	b2ca      	uxtb	r2, r1
 8002908:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	3301      	adds	r3, #1
 800290e:	617b      	str	r3, [r7, #20]
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	429a      	cmp	r2, r3
 8002916:	dbf0      	blt.n	80028fa <_read+0x12>
	}

return len;
 8002918:	687b      	ldr	r3, [r7, #4]
}
 800291a:	4618      	mov	r0, r3
 800291c:	3718      	adds	r7, #24
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b086      	sub	sp, #24
 8002926:	af00      	add	r7, sp, #0
 8002928:	60f8      	str	r0, [r7, #12]
 800292a:	60b9      	str	r1, [r7, #8]
 800292c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]
 8002932:	e009      	b.n	8002948 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	1c5a      	adds	r2, r3, #1
 8002938:	60ba      	str	r2, [r7, #8]
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	3301      	adds	r3, #1
 8002946:	617b      	str	r3, [r7, #20]
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	429a      	cmp	r2, r3
 800294e:	dbf1      	blt.n	8002934 <_write+0x12>
	}
	return len;
 8002950:	687b      	ldr	r3, [r7, #4]
}
 8002952:	4618      	mov	r0, r3
 8002954:	3718      	adds	r7, #24
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <_close>:

int _close(int file)
{
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
	return -1;
 8002962:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002966:	4618      	mov	r0, r3
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002972:	b480      	push	{r7}
 8002974:	b083      	sub	sp, #12
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
 800297a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002982:	605a      	str	r2, [r3, #4]
	return 0;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr

08002992 <_isatty>:

int _isatty(int file)
{
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
	return 1;
 800299a:	2301      	movs	r3, #1
}
 800299c:	4618      	mov	r0, r3
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
	return 0;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
	...

080029c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029cc:	4a14      	ldr	r2, [pc, #80]	; (8002a20 <_sbrk+0x5c>)
 80029ce:	4b15      	ldr	r3, [pc, #84]	; (8002a24 <_sbrk+0x60>)
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029d8:	4b13      	ldr	r3, [pc, #76]	; (8002a28 <_sbrk+0x64>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d102      	bne.n	80029e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029e0:	4b11      	ldr	r3, [pc, #68]	; (8002a28 <_sbrk+0x64>)
 80029e2:	4a12      	ldr	r2, [pc, #72]	; (8002a2c <_sbrk+0x68>)
 80029e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029e6:	4b10      	ldr	r3, [pc, #64]	; (8002a28 <_sbrk+0x64>)
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4413      	add	r3, r2
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d207      	bcs.n	8002a04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029f4:	f005 f9bc 	bl	8007d70 <__errno>
 80029f8:	4603      	mov	r3, r0
 80029fa:	220c      	movs	r2, #12
 80029fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002a02:	e009      	b.n	8002a18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a04:	4b08      	ldr	r3, [pc, #32]	; (8002a28 <_sbrk+0x64>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a0a:	4b07      	ldr	r3, [pc, #28]	; (8002a28 <_sbrk+0x64>)
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4413      	add	r3, r2
 8002a12:	4a05      	ldr	r2, [pc, #20]	; (8002a28 <_sbrk+0x64>)
 8002a14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a16:	68fb      	ldr	r3, [r7, #12]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3718      	adds	r7, #24
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	20010000 	.word	0x20010000
 8002a24:	00000400 	.word	0x00000400
 8002a28:	2000025c 	.word	0x2000025c
 8002a2c:	200004e0 	.word	0x200004e0

08002a30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a34:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <SystemInit+0x20>)
 8002a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3a:	4a05      	ldr	r2, [pc, #20]	; (8002a50 <SystemInit+0x20>)
 8002a3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a44:	bf00      	nop
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	e000ed00 	.word	0xe000ed00

08002a54 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b08e      	sub	sp, #56	; 0x38
 8002a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	605a      	str	r2, [r3, #4]
 8002a64:	609a      	str	r2, [r3, #8]
 8002a66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a68:	f107 0320 	add.w	r3, r7, #32
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a72:	1d3b      	adds	r3, r7, #4
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	605a      	str	r2, [r3, #4]
 8002a7a:	609a      	str	r2, [r3, #8]
 8002a7c:	60da      	str	r2, [r3, #12]
 8002a7e:	611a      	str	r2, [r3, #16]
 8002a80:	615a      	str	r2, [r3, #20]
 8002a82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a84:	4b37      	ldr	r3, [pc, #220]	; (8002b64 <MX_TIM3_Init+0x110>)
 8002a86:	4a38      	ldr	r2, [pc, #224]	; (8002b68 <MX_TIM3_Init+0x114>)
 8002a88:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24;
 8002a8a:	4b36      	ldr	r3, [pc, #216]	; (8002b64 <MX_TIM3_Init+0x110>)
 8002a8c:	2218      	movs	r2, #24
 8002a8e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a90:	4b34      	ldr	r3, [pc, #208]	; (8002b64 <MX_TIM3_Init+0x110>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002a96:	4b33      	ldr	r3, [pc, #204]	; (8002b64 <MX_TIM3_Init+0x110>)
 8002a98:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a9c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a9e:	4b31      	ldr	r3, [pc, #196]	; (8002b64 <MX_TIM3_Init+0x110>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002aa4:	4b2f      	ldr	r3, [pc, #188]	; (8002b64 <MX_TIM3_Init+0x110>)
 8002aa6:	2280      	movs	r2, #128	; 0x80
 8002aa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002aaa:	482e      	ldr	r0, [pc, #184]	; (8002b64 <MX_TIM3_Init+0x110>)
 8002aac:	f003 f988 	bl	8005dc0 <HAL_TIM_Base_Init>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002ab6:	f7ff f91f 	bl	8001cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002aba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002abe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002ac0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4827      	ldr	r0, [pc, #156]	; (8002b64 <MX_TIM3_Init+0x110>)
 8002ac8:	f003 fb94 	bl	80061f4 <HAL_TIM_ConfigClockSource>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002ad2:	f7ff f911 	bl	8001cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002ad6:	4823      	ldr	r0, [pc, #140]	; (8002b64 <MX_TIM3_Init+0x110>)
 8002ad8:	f003 f9c1 	bl	8005e5e <HAL_TIM_PWM_Init>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002ae2:	f7ff f909 	bl	8001cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aea:	2300      	movs	r3, #0
 8002aec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002aee:	f107 0320 	add.w	r3, r7, #32
 8002af2:	4619      	mov	r1, r3
 8002af4:	481b      	ldr	r0, [pc, #108]	; (8002b64 <MX_TIM3_Init+0x110>)
 8002af6:	f003 ff11 	bl	800691c <HAL_TIMEx_MasterConfigSynchronization>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002b00:	f7ff f8fa 	bl	8001cf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b04:	2360      	movs	r3, #96	; 0x60
 8002b06:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b10:	2300      	movs	r3, #0
 8002b12:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b14:	1d3b      	adds	r3, r7, #4
 8002b16:	2200      	movs	r2, #0
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4812      	ldr	r0, [pc, #72]	; (8002b64 <MX_TIM3_Init+0x110>)
 8002b1c:	f003 faa8 	bl	8006070 <HAL_TIM_PWM_ConfigChannel>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002b26:	f7ff f8e7 	bl	8001cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b2a:	1d3b      	adds	r3, r7, #4
 8002b2c:	2204      	movs	r2, #4
 8002b2e:	4619      	mov	r1, r3
 8002b30:	480c      	ldr	r0, [pc, #48]	; (8002b64 <MX_TIM3_Init+0x110>)
 8002b32:	f003 fa9d 	bl	8006070 <HAL_TIM_PWM_ConfigChannel>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002b3c:	f7ff f8dc 	bl	8001cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002b40:	1d3b      	adds	r3, r7, #4
 8002b42:	2208      	movs	r2, #8
 8002b44:	4619      	mov	r1, r3
 8002b46:	4807      	ldr	r0, [pc, #28]	; (8002b64 <MX_TIM3_Init+0x110>)
 8002b48:	f003 fa92 	bl	8006070 <HAL_TIM_PWM_ConfigChannel>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8002b52:	f7ff f8d1 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002b56:	4803      	ldr	r0, [pc, #12]	; (8002b64 <MX_TIM3_Init+0x110>)
 8002b58:	f000 f82a 	bl	8002bb0 <HAL_TIM_MspPostInit>

}
 8002b5c:	bf00      	nop
 8002b5e:	3738      	adds	r7, #56	; 0x38
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	20000358 	.word	0x20000358
 8002b68:	40000400 	.word	0x40000400

08002b6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a0b      	ldr	r2, [pc, #44]	; (8002ba8 <HAL_TIM_Base_MspInit+0x3c>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d10d      	bne.n	8002b9a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	4b0a      	ldr	r3, [pc, #40]	; (8002bac <HAL_TIM_Base_MspInit+0x40>)
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	4a09      	ldr	r2, [pc, #36]	; (8002bac <HAL_TIM_Base_MspInit+0x40>)
 8002b88:	f043 0302 	orr.w	r3, r3, #2
 8002b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b8e:	4b07      	ldr	r3, [pc, #28]	; (8002bac <HAL_TIM_Base_MspInit+0x40>)
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	60fb      	str	r3, [r7, #12]
 8002b98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002b9a:	bf00      	nop
 8002b9c:	3714      	adds	r7, #20
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	40000400 	.word	0x40000400
 8002bac:	40023800 	.word	0x40023800

08002bb0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b08a      	sub	sp, #40	; 0x28
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb8:	f107 0314 	add.w	r3, r7, #20
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	605a      	str	r2, [r3, #4]
 8002bc2:	609a      	str	r2, [r3, #8]
 8002bc4:	60da      	str	r2, [r3, #12]
 8002bc6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a21      	ldr	r2, [pc, #132]	; (8002c54 <HAL_TIM_MspPostInit+0xa4>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d13b      	bne.n	8002c4a <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	613b      	str	r3, [r7, #16]
 8002bd6:	4b20      	ldr	r3, [pc, #128]	; (8002c58 <HAL_TIM_MspPostInit+0xa8>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	4a1f      	ldr	r2, [pc, #124]	; (8002c58 <HAL_TIM_MspPostInit+0xa8>)
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	6313      	str	r3, [r2, #48]	; 0x30
 8002be2:	4b1d      	ldr	r3, [pc, #116]	; (8002c58 <HAL_TIM_MspPostInit+0xa8>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	613b      	str	r3, [r7, #16]
 8002bec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	4b19      	ldr	r3, [pc, #100]	; (8002c58 <HAL_TIM_MspPostInit+0xa8>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf6:	4a18      	ldr	r2, [pc, #96]	; (8002c58 <HAL_TIM_MspPostInit+0xa8>)
 8002bf8:	f043 0302 	orr.w	r3, r3, #2
 8002bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfe:	4b16      	ldr	r3, [pc, #88]	; (8002c58 <HAL_TIM_MspPostInit+0xa8>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c0a:	23c0      	movs	r3, #192	; 0xc0
 8002c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0e:	2302      	movs	r3, #2
 8002c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c12:	2300      	movs	r3, #0
 8002c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c16:	2300      	movs	r3, #0
 8002c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c1e:	f107 0314 	add.w	r3, r7, #20
 8002c22:	4619      	mov	r1, r3
 8002c24:	480d      	ldr	r0, [pc, #52]	; (8002c5c <HAL_TIM_MspPostInit+0xac>)
 8002c26:	f001 fb0b 	bl	8004240 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2e:	2302      	movs	r3, #2
 8002c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c32:	2300      	movs	r3, #0
 8002c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c36:	2300      	movs	r3, #0
 8002c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c3e:	f107 0314 	add.w	r3, r7, #20
 8002c42:	4619      	mov	r1, r3
 8002c44:	4806      	ldr	r0, [pc, #24]	; (8002c60 <HAL_TIM_MspPostInit+0xb0>)
 8002c46:	f001 fafb 	bl	8004240 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002c4a:	bf00      	nop
 8002c4c:	3728      	adds	r7, #40	; 0x28
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40000400 	.word	0x40000400
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	40020000 	.word	0x40020000
 8002c60:	40020400 	.word	0x40020400

08002c64 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c68:	4b11      	ldr	r3, [pc, #68]	; (8002cb0 <MX_USART1_UART_Init+0x4c>)
 8002c6a:	4a12      	ldr	r2, [pc, #72]	; (8002cb4 <MX_USART1_UART_Init+0x50>)
 8002c6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c6e:	4b10      	ldr	r3, [pc, #64]	; (8002cb0 <MX_USART1_UART_Init+0x4c>)
 8002c70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c76:	4b0e      	ldr	r3, [pc, #56]	; (8002cb0 <MX_USART1_UART_Init+0x4c>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c7c:	4b0c      	ldr	r3, [pc, #48]	; (8002cb0 <MX_USART1_UART_Init+0x4c>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c82:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <MX_USART1_UART_Init+0x4c>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c88:	4b09      	ldr	r3, [pc, #36]	; (8002cb0 <MX_USART1_UART_Init+0x4c>)
 8002c8a:	220c      	movs	r2, #12
 8002c8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c8e:	4b08      	ldr	r3, [pc, #32]	; (8002cb0 <MX_USART1_UART_Init+0x4c>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c94:	4b06      	ldr	r3, [pc, #24]	; (8002cb0 <MX_USART1_UART_Init+0x4c>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c9a:	4805      	ldr	r0, [pc, #20]	; (8002cb0 <MX_USART1_UART_Init+0x4c>)
 8002c9c:	f003 feac 	bl	80069f8 <HAL_UART_Init>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002ca6:	f7ff f827 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002caa:	bf00      	nop
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	20000400 	.word	0x20000400
 8002cb4:	40011000 	.word	0x40011000

08002cb8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002cbc:	4b11      	ldr	r3, [pc, #68]	; (8002d04 <MX_USART2_UART_Init+0x4c>)
 8002cbe:	4a12      	ldr	r2, [pc, #72]	; (8002d08 <MX_USART2_UART_Init+0x50>)
 8002cc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002cc2:	4b10      	ldr	r3, [pc, #64]	; (8002d04 <MX_USART2_UART_Init+0x4c>)
 8002cc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002cca:	4b0e      	ldr	r3, [pc, #56]	; (8002d04 <MX_USART2_UART_Init+0x4c>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002cd0:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <MX_USART2_UART_Init+0x4c>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002cd6:	4b0b      	ldr	r3, [pc, #44]	; (8002d04 <MX_USART2_UART_Init+0x4c>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002cdc:	4b09      	ldr	r3, [pc, #36]	; (8002d04 <MX_USART2_UART_Init+0x4c>)
 8002cde:	220c      	movs	r2, #12
 8002ce0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ce2:	4b08      	ldr	r3, [pc, #32]	; (8002d04 <MX_USART2_UART_Init+0x4c>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ce8:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <MX_USART2_UART_Init+0x4c>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002cee:	4805      	ldr	r0, [pc, #20]	; (8002d04 <MX_USART2_UART_Init+0x4c>)
 8002cf0:	f003 fe82 	bl	80069f8 <HAL_UART_Init>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002cfa:	f7fe fffd 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002cfe:	bf00      	nop
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	20000488 	.word	0x20000488
 8002d08:	40004400 	.word	0x40004400

08002d0c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002d10:	4b11      	ldr	r3, [pc, #68]	; (8002d58 <MX_USART6_UART_Init+0x4c>)
 8002d12:	4a12      	ldr	r2, [pc, #72]	; (8002d5c <MX_USART6_UART_Init+0x50>)
 8002d14:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002d16:	4b10      	ldr	r3, [pc, #64]	; (8002d58 <MX_USART6_UART_Init+0x4c>)
 8002d18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d1c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002d1e:	4b0e      	ldr	r3, [pc, #56]	; (8002d58 <MX_USART6_UART_Init+0x4c>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002d24:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <MX_USART6_UART_Init+0x4c>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002d2a:	4b0b      	ldr	r3, [pc, #44]	; (8002d58 <MX_USART6_UART_Init+0x4c>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002d30:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <MX_USART6_UART_Init+0x4c>)
 8002d32:	220c      	movs	r2, #12
 8002d34:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d36:	4b08      	ldr	r3, [pc, #32]	; (8002d58 <MX_USART6_UART_Init+0x4c>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d3c:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <MX_USART6_UART_Init+0x4c>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002d42:	4805      	ldr	r0, [pc, #20]	; (8002d58 <MX_USART6_UART_Init+0x4c>)
 8002d44:	f003 fe58 	bl	80069f8 <HAL_UART_Init>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002d4e:	f7fe ffd3 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002d52:	bf00      	nop
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	20000444 	.word	0x20000444
 8002d5c:	40011400 	.word	0x40011400

08002d60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08e      	sub	sp, #56	; 0x38
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	605a      	str	r2, [r3, #4]
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	60da      	str	r2, [r3, #12]
 8002d76:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a68      	ldr	r2, [pc, #416]	; (8002f20 <HAL_UART_MspInit+0x1c0>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d12d      	bne.n	8002dde <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	623b      	str	r3, [r7, #32]
 8002d86:	4b67      	ldr	r3, [pc, #412]	; (8002f24 <HAL_UART_MspInit+0x1c4>)
 8002d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8a:	4a66      	ldr	r2, [pc, #408]	; (8002f24 <HAL_UART_MspInit+0x1c4>)
 8002d8c:	f043 0310 	orr.w	r3, r3, #16
 8002d90:	6453      	str	r3, [r2, #68]	; 0x44
 8002d92:	4b64      	ldr	r3, [pc, #400]	; (8002f24 <HAL_UART_MspInit+0x1c4>)
 8002d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d96:	f003 0310 	and.w	r3, r3, #16
 8002d9a:	623b      	str	r3, [r7, #32]
 8002d9c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	61fb      	str	r3, [r7, #28]
 8002da2:	4b60      	ldr	r3, [pc, #384]	; (8002f24 <HAL_UART_MspInit+0x1c4>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	4a5f      	ldr	r2, [pc, #380]	; (8002f24 <HAL_UART_MspInit+0x1c4>)
 8002da8:	f043 0301 	orr.w	r3, r3, #1
 8002dac:	6313      	str	r3, [r2, #48]	; 0x30
 8002dae:	4b5d      	ldr	r3, [pc, #372]	; (8002f24 <HAL_UART_MspInit+0x1c4>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	61fb      	str	r3, [r7, #28]
 8002db8:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002dba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002dbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002dcc:	2307      	movs	r3, #7
 8002dce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4854      	ldr	r0, [pc, #336]	; (8002f28 <HAL_UART_MspInit+0x1c8>)
 8002dd8:	f001 fa32 	bl	8004240 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002ddc:	e09b      	b.n	8002f16 <HAL_UART_MspInit+0x1b6>
  else if(uartHandle->Instance==USART2)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a52      	ldr	r2, [pc, #328]	; (8002f2c <HAL_UART_MspInit+0x1cc>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d134      	bne.n	8002e52 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002de8:	2300      	movs	r3, #0
 8002dea:	61bb      	str	r3, [r7, #24]
 8002dec:	4b4d      	ldr	r3, [pc, #308]	; (8002f24 <HAL_UART_MspInit+0x1c4>)
 8002dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df0:	4a4c      	ldr	r2, [pc, #304]	; (8002f24 <HAL_UART_MspInit+0x1c4>)
 8002df2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002df6:	6413      	str	r3, [r2, #64]	; 0x40
 8002df8:	4b4a      	ldr	r3, [pc, #296]	; (8002f24 <HAL_UART_MspInit+0x1c4>)
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e00:	61bb      	str	r3, [r7, #24]
 8002e02:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e04:	2300      	movs	r3, #0
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	4b46      	ldr	r3, [pc, #280]	; (8002f24 <HAL_UART_MspInit+0x1c4>)
 8002e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0c:	4a45      	ldr	r2, [pc, #276]	; (8002f24 <HAL_UART_MspInit+0x1c4>)
 8002e0e:	f043 0301 	orr.w	r3, r3, #1
 8002e12:	6313      	str	r3, [r2, #48]	; 0x30
 8002e14:	4b43      	ldr	r3, [pc, #268]	; (8002f24 <HAL_UART_MspInit+0x1c4>)
 8002e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	617b      	str	r3, [r7, #20]
 8002e1e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002e20:	230c      	movs	r3, #12
 8002e22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e24:	2302      	movs	r3, #2
 8002e26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e30:	2307      	movs	r3, #7
 8002e32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e38:	4619      	mov	r1, r3
 8002e3a:	483b      	ldr	r0, [pc, #236]	; (8002f28 <HAL_UART_MspInit+0x1c8>)
 8002e3c:	f001 fa00 	bl	8004240 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002e40:	2200      	movs	r2, #0
 8002e42:	2100      	movs	r1, #0
 8002e44:	2026      	movs	r0, #38	; 0x26
 8002e46:	f000 fdc2 	bl	80039ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002e4a:	2026      	movs	r0, #38	; 0x26
 8002e4c:	f000 fddb 	bl	8003a06 <HAL_NVIC_EnableIRQ>
}
 8002e50:	e061      	b.n	8002f16 <HAL_UART_MspInit+0x1b6>
  else if(uartHandle->Instance==USART6)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a36      	ldr	r2, [pc, #216]	; (8002f30 <HAL_UART_MspInit+0x1d0>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d15c      	bne.n	8002f16 <HAL_UART_MspInit+0x1b6>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	613b      	str	r3, [r7, #16]
 8002e60:	4b30      	ldr	r3, [pc, #192]	; (8002f24 <HAL_UART_MspInit+0x1c4>)
 8002e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e64:	4a2f      	ldr	r2, [pc, #188]	; (8002f24 <HAL_UART_MspInit+0x1c4>)
 8002e66:	f043 0320 	orr.w	r3, r3, #32
 8002e6a:	6453      	str	r3, [r2, #68]	; 0x44
 8002e6c:	4b2d      	ldr	r3, [pc, #180]	; (8002f24 <HAL_UART_MspInit+0x1c4>)
 8002e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e70:	f003 0320 	and.w	r3, r3, #32
 8002e74:	613b      	str	r3, [r7, #16]
 8002e76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e78:	2300      	movs	r3, #0
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	4b29      	ldr	r3, [pc, #164]	; (8002f24 <HAL_UART_MspInit+0x1c4>)
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e80:	4a28      	ldr	r2, [pc, #160]	; (8002f24 <HAL_UART_MspInit+0x1c4>)
 8002e82:	f043 0301 	orr.w	r3, r3, #1
 8002e86:	6313      	str	r3, [r2, #48]	; 0x30
 8002e88:	4b26      	ldr	r3, [pc, #152]	; (8002f24 <HAL_UART_MspInit+0x1c4>)
 8002e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002e94:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002e98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002ea6:	2308      	movs	r3, #8
 8002ea8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eae:	4619      	mov	r1, r3
 8002eb0:	481d      	ldr	r0, [pc, #116]	; (8002f28 <HAL_UART_MspInit+0x1c8>)
 8002eb2:	f001 f9c5 	bl	8004240 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream2;
 8002eb6:	4b1f      	ldr	r3, [pc, #124]	; (8002f34 <HAL_UART_MspInit+0x1d4>)
 8002eb8:	4a1f      	ldr	r2, [pc, #124]	; (8002f38 <HAL_UART_MspInit+0x1d8>)
 8002eba:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002ebc:	4b1d      	ldr	r3, [pc, #116]	; (8002f34 <HAL_UART_MspInit+0x1d4>)
 8002ebe:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002ec2:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ec4:	4b1b      	ldr	r3, [pc, #108]	; (8002f34 <HAL_UART_MspInit+0x1d4>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002eca:	4b1a      	ldr	r3, [pc, #104]	; (8002f34 <HAL_UART_MspInit+0x1d4>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ed0:	4b18      	ldr	r3, [pc, #96]	; (8002f34 <HAL_UART_MspInit+0x1d4>)
 8002ed2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ed6:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ed8:	4b16      	ldr	r3, [pc, #88]	; (8002f34 <HAL_UART_MspInit+0x1d4>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ede:	4b15      	ldr	r3, [pc, #84]	; (8002f34 <HAL_UART_MspInit+0x1d4>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8002ee4:	4b13      	ldr	r3, [pc, #76]	; (8002f34 <HAL_UART_MspInit+0x1d4>)
 8002ee6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002eea:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002eec:	4b11      	ldr	r3, [pc, #68]	; (8002f34 <HAL_UART_MspInit+0x1d4>)
 8002eee:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002ef2:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ef4:	4b0f      	ldr	r3, [pc, #60]	; (8002f34 <HAL_UART_MspInit+0x1d4>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002efa:	480e      	ldr	r0, [pc, #56]	; (8002f34 <HAL_UART_MspInit+0x1d4>)
 8002efc:	f000 fd9e 	bl	8003a3c <HAL_DMA_Init>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <HAL_UART_MspInit+0x1aa>
      Error_Handler();
 8002f06:	f7fe fef7 	bl	8001cf8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a09      	ldr	r2, [pc, #36]	; (8002f34 <HAL_UART_MspInit+0x1d4>)
 8002f0e:	639a      	str	r2, [r3, #56]	; 0x38
 8002f10:	4a08      	ldr	r2, [pc, #32]	; (8002f34 <HAL_UART_MspInit+0x1d4>)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002f16:	bf00      	nop
 8002f18:	3738      	adds	r7, #56	; 0x38
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40011000 	.word	0x40011000
 8002f24:	40023800 	.word	0x40023800
 8002f28:	40020000 	.word	0x40020000
 8002f2c:	40004400 	.word	0x40004400
 8002f30:	40011400 	.word	0x40011400
 8002f34:	200003a0 	.word	0x200003a0
 8002f38:	40026440 	.word	0x40026440

08002f3c <Reset_Handler>:
 8002f3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f74 <LoopFillZerobss+0x12>
 8002f40:	480d      	ldr	r0, [pc, #52]	; (8002f78 <LoopFillZerobss+0x16>)
 8002f42:	490e      	ldr	r1, [pc, #56]	; (8002f7c <LoopFillZerobss+0x1a>)
 8002f44:	4a0e      	ldr	r2, [pc, #56]	; (8002f80 <LoopFillZerobss+0x1e>)
 8002f46:	2300      	movs	r3, #0
 8002f48:	e002      	b.n	8002f50 <LoopCopyDataInit>

08002f4a <CopyDataInit>:
 8002f4a:	58d4      	ldr	r4, [r2, r3]
 8002f4c:	50c4      	str	r4, [r0, r3]
 8002f4e:	3304      	adds	r3, #4

08002f50 <LoopCopyDataInit>:
 8002f50:	18c4      	adds	r4, r0, r3
 8002f52:	428c      	cmp	r4, r1
 8002f54:	d3f9      	bcc.n	8002f4a <CopyDataInit>
 8002f56:	4a0b      	ldr	r2, [pc, #44]	; (8002f84 <LoopFillZerobss+0x22>)
 8002f58:	4c0b      	ldr	r4, [pc, #44]	; (8002f88 <LoopFillZerobss+0x26>)
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	e001      	b.n	8002f62 <LoopFillZerobss>

08002f5e <FillZerobss>:
 8002f5e:	6013      	str	r3, [r2, #0]
 8002f60:	3204      	adds	r2, #4

08002f62 <LoopFillZerobss>:
 8002f62:	42a2      	cmp	r2, r4
 8002f64:	d3fb      	bcc.n	8002f5e <FillZerobss>
 8002f66:	f7ff fd63 	bl	8002a30 <SystemInit>
 8002f6a:	f004 ff07 	bl	8007d7c <__libc_init_array>
 8002f6e:	f7fe fd3f 	bl	80019f0 <main>
 8002f72:	4770      	bx	lr
 8002f74:	20010000 	.word	0x20010000
 8002f78:	20000000 	.word	0x20000000
 8002f7c:	200001dc 	.word	0x200001dc
 8002f80:	0800b4c8 	.word	0x0800b4c8
 8002f84:	200001dc 	.word	0x200001dc
 8002f88:	200004e0 	.word	0x200004e0

08002f8c <ADC_IRQHandler>:
 8002f8c:	e7fe      	b.n	8002f8c <ADC_IRQHandler>
	...

08002f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f94:	4b0e      	ldr	r3, [pc, #56]	; (8002fd0 <HAL_Init+0x40>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a0d      	ldr	r2, [pc, #52]	; (8002fd0 <HAL_Init+0x40>)
 8002f9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fa0:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <HAL_Init+0x40>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a0a      	ldr	r2, [pc, #40]	; (8002fd0 <HAL_Init+0x40>)
 8002fa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002faa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fac:	4b08      	ldr	r3, [pc, #32]	; (8002fd0 <HAL_Init+0x40>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a07      	ldr	r2, [pc, #28]	; (8002fd0 <HAL_Init+0x40>)
 8002fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fb8:	2003      	movs	r0, #3
 8002fba:	f000 fcfd 	bl	80039b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fbe:	200f      	movs	r0, #15
 8002fc0:	f000 f808 	bl	8002fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fc4:	f7ff fc08 	bl	80027d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40023c00 	.word	0x40023c00

08002fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fdc:	4b12      	ldr	r3, [pc, #72]	; (8003028 <HAL_InitTick+0x54>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	4b12      	ldr	r3, [pc, #72]	; (800302c <HAL_InitTick+0x58>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 fd15 	bl	8003a22 <HAL_SYSTICK_Config>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e00e      	b.n	8003020 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b0f      	cmp	r3, #15
 8003006:	d80a      	bhi.n	800301e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003008:	2200      	movs	r2, #0
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	f04f 30ff 	mov.w	r0, #4294967295
 8003010:	f000 fcdd 	bl	80039ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003014:	4a06      	ldr	r2, [pc, #24]	; (8003030 <HAL_InitTick+0x5c>)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800301a:	2300      	movs	r3, #0
 800301c:	e000      	b.n	8003020 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
}
 8003020:	4618      	mov	r0, r3
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	20000000 	.word	0x20000000
 800302c:	20000008 	.word	0x20000008
 8003030:	20000004 	.word	0x20000004

08003034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003038:	4b06      	ldr	r3, [pc, #24]	; (8003054 <HAL_IncTick+0x20>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	461a      	mov	r2, r3
 800303e:	4b06      	ldr	r3, [pc, #24]	; (8003058 <HAL_IncTick+0x24>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4413      	add	r3, r2
 8003044:	4a04      	ldr	r2, [pc, #16]	; (8003058 <HAL_IncTick+0x24>)
 8003046:	6013      	str	r3, [r2, #0]
}
 8003048:	bf00      	nop
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	20000008 	.word	0x20000008
 8003058:	200004cc 	.word	0x200004cc

0800305c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  return uwTick;
 8003060:	4b03      	ldr	r3, [pc, #12]	; (8003070 <HAL_GetTick+0x14>)
 8003062:	681b      	ldr	r3, [r3, #0]
}
 8003064:	4618      	mov	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	200004cc 	.word	0x200004cc

08003074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800307c:	f7ff ffee 	bl	800305c <HAL_GetTick>
 8003080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308c:	d005      	beq.n	800309a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800308e:	4b0a      	ldr	r3, [pc, #40]	; (80030b8 <HAL_Delay+0x44>)
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	461a      	mov	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	4413      	add	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800309a:	bf00      	nop
 800309c:	f7ff ffde 	bl	800305c <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d8f7      	bhi.n	800309c <HAL_Delay+0x28>
  {
  }
}
 80030ac:	bf00      	nop
 80030ae:	bf00      	nop
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	20000008 	.word	0x20000008

080030bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030c4:	2300      	movs	r3, #0
 80030c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e033      	b.n	800313a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d109      	bne.n	80030ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7fd ff8a 	bl	8000ff4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	f003 0310 	and.w	r3, r3, #16
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d118      	bne.n	800312c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003102:	f023 0302 	bic.w	r3, r3, #2
 8003106:	f043 0202 	orr.w	r2, r3, #2
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 fa86 	bl	8003620 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	f023 0303 	bic.w	r3, r3, #3
 8003122:	f043 0201 	orr.w	r2, r3, #1
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	641a      	str	r2, [r3, #64]	; 0x40
 800312a:	e001      	b.n	8003130 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003138:	7bfb      	ldrb	r3, [r7, #15]
}
 800313a:	4618      	mov	r0, r3
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
	...

08003144 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800314c:	2300      	movs	r3, #0
 800314e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003156:	2b01      	cmp	r3, #1
 8003158:	d101      	bne.n	800315e <HAL_ADC_Start+0x1a>
 800315a:	2302      	movs	r3, #2
 800315c:	e097      	b.n	800328e <HAL_ADC_Start+0x14a>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b01      	cmp	r3, #1
 8003172:	d018      	beq.n	80031a6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689a      	ldr	r2, [r3, #8]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f042 0201 	orr.w	r2, r2, #1
 8003182:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003184:	4b45      	ldr	r3, [pc, #276]	; (800329c <HAL_ADC_Start+0x158>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a45      	ldr	r2, [pc, #276]	; (80032a0 <HAL_ADC_Start+0x15c>)
 800318a:	fba2 2303 	umull	r2, r3, r2, r3
 800318e:	0c9a      	lsrs	r2, r3, #18
 8003190:	4613      	mov	r3, r2
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	4413      	add	r3, r2
 8003196:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003198:	e002      	b.n	80031a0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	3b01      	subs	r3, #1
 800319e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f9      	bne.n	800319a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d15f      	bne.n	8003274 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80031bc:	f023 0301 	bic.w	r3, r3, #1
 80031c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d007      	beq.n	80031e6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80031de:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031f2:	d106      	bne.n	8003202 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f8:	f023 0206 	bic.w	r2, r3, #6
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	645a      	str	r2, [r3, #68]	; 0x44
 8003200:	e002      	b.n	8003208 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003210:	4b24      	ldr	r3, [pc, #144]	; (80032a4 <HAL_ADC_Start+0x160>)
 8003212:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800321c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f003 031f 	and.w	r3, r3, #31
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10f      	bne.n	800324a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d129      	bne.n	800328c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689a      	ldr	r2, [r3, #8]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003246:	609a      	str	r2, [r3, #8]
 8003248:	e020      	b.n	800328c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a16      	ldr	r2, [pc, #88]	; (80032a8 <HAL_ADC_Start+0x164>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d11b      	bne.n	800328c <HAL_ADC_Start+0x148>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d114      	bne.n	800328c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003270:	609a      	str	r2, [r3, #8]
 8003272:	e00b      	b.n	800328c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003278:	f043 0210 	orr.w	r2, r3, #16
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003284:	f043 0201 	orr.w	r2, r3, #1
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3714      	adds	r7, #20
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	20000000 	.word	0x20000000
 80032a0:	431bde83 	.word	0x431bde83
 80032a4:	40012300 	.word	0x40012300
 80032a8:	40012000 	.word	0x40012000

080032ac <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80032b6:	2300      	movs	r3, #0
 80032b8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032c8:	d113      	bne.n	80032f2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80032d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032d8:	d10b      	bne.n	80032f2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	f043 0220 	orr.w	r2, r3, #32
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e063      	b.n	80033ba <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80032f2:	f7ff feb3 	bl	800305c <HAL_GetTick>
 80032f6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80032f8:	e021      	b.n	800333e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003300:	d01d      	beq.n	800333e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d007      	beq.n	8003318 <HAL_ADC_PollForConversion+0x6c>
 8003308:	f7ff fea8 	bl	800305c <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	429a      	cmp	r2, r3
 8003316:	d212      	bcs.n	800333e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b02      	cmp	r3, #2
 8003324:	d00b      	beq.n	800333e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	f043 0204 	orr.w	r2, r3, #4
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e03d      	b.n	80033ba <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b02      	cmp	r3, #2
 800334a:	d1d6      	bne.n	80032fa <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f06f 0212 	mvn.w	r2, #18
 8003354:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d123      	bne.n	80033b8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003374:	2b00      	cmp	r3, #0
 8003376:	d11f      	bne.n	80033b8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003382:	2b00      	cmp	r3, #0
 8003384:	d006      	beq.n	8003394 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003390:	2b00      	cmp	r3, #0
 8003392:	d111      	bne.n	80033b8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003398:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d105      	bne.n	80033b8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	f043 0201 	orr.w	r2, r3, #1
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80033c2:	b480      	push	{r7}
 80033c4:	b083      	sub	sp, #12
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80033e6:	2300      	movs	r3, #0
 80033e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d101      	bne.n	80033f8 <HAL_ADC_ConfigChannel+0x1c>
 80033f4:	2302      	movs	r3, #2
 80033f6:	e105      	b.n	8003604 <HAL_ADC_ConfigChannel+0x228>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2b09      	cmp	r3, #9
 8003406:	d925      	bls.n	8003454 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68d9      	ldr	r1, [r3, #12]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	b29b      	uxth	r3, r3
 8003414:	461a      	mov	r2, r3
 8003416:	4613      	mov	r3, r2
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	4413      	add	r3, r2
 800341c:	3b1e      	subs	r3, #30
 800341e:	2207      	movs	r2, #7
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	43da      	mvns	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	400a      	ands	r2, r1
 800342c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68d9      	ldr	r1, [r3, #12]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	b29b      	uxth	r3, r3
 800343e:	4618      	mov	r0, r3
 8003440:	4603      	mov	r3, r0
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	4403      	add	r3, r0
 8003446:	3b1e      	subs	r3, #30
 8003448:	409a      	lsls	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	430a      	orrs	r2, r1
 8003450:	60da      	str	r2, [r3, #12]
 8003452:	e022      	b.n	800349a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6919      	ldr	r1, [r3, #16]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	b29b      	uxth	r3, r3
 8003460:	461a      	mov	r2, r3
 8003462:	4613      	mov	r3, r2
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	4413      	add	r3, r2
 8003468:	2207      	movs	r2, #7
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	43da      	mvns	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	400a      	ands	r2, r1
 8003476:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6919      	ldr	r1, [r3, #16]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	b29b      	uxth	r3, r3
 8003488:	4618      	mov	r0, r3
 800348a:	4603      	mov	r3, r0
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	4403      	add	r3, r0
 8003490:	409a      	lsls	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2b06      	cmp	r3, #6
 80034a0:	d824      	bhi.n	80034ec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	4613      	mov	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	3b05      	subs	r3, #5
 80034b4:	221f      	movs	r2, #31
 80034b6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ba:	43da      	mvns	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	400a      	ands	r2, r1
 80034c2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	4618      	mov	r0, r3
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685a      	ldr	r2, [r3, #4]
 80034d6:	4613      	mov	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4413      	add	r3, r2
 80034dc:	3b05      	subs	r3, #5
 80034de:	fa00 f203 	lsl.w	r2, r0, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	635a      	str	r2, [r3, #52]	; 0x34
 80034ea:	e04c      	b.n	8003586 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	2b0c      	cmp	r3, #12
 80034f2:	d824      	bhi.n	800353e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	4613      	mov	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	3b23      	subs	r3, #35	; 0x23
 8003506:	221f      	movs	r2, #31
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	43da      	mvns	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	400a      	ands	r2, r1
 8003514:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	b29b      	uxth	r3, r3
 8003522:	4618      	mov	r0, r3
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	4613      	mov	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	3b23      	subs	r3, #35	; 0x23
 8003530:	fa00 f203 	lsl.w	r2, r0, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	631a      	str	r2, [r3, #48]	; 0x30
 800353c:	e023      	b.n	8003586 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	4613      	mov	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	3b41      	subs	r3, #65	; 0x41
 8003550:	221f      	movs	r2, #31
 8003552:	fa02 f303 	lsl.w	r3, r2, r3
 8003556:	43da      	mvns	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	400a      	ands	r2, r1
 800355e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	b29b      	uxth	r3, r3
 800356c:	4618      	mov	r0, r3
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	4613      	mov	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4413      	add	r3, r2
 8003578:	3b41      	subs	r3, #65	; 0x41
 800357a:	fa00 f203 	lsl.w	r2, r0, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003586:	4b22      	ldr	r3, [pc, #136]	; (8003610 <HAL_ADC_ConfigChannel+0x234>)
 8003588:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a21      	ldr	r2, [pc, #132]	; (8003614 <HAL_ADC_ConfigChannel+0x238>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d109      	bne.n	80035a8 <HAL_ADC_ConfigChannel+0x1cc>
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2b12      	cmp	r3, #18
 800359a:	d105      	bne.n	80035a8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a19      	ldr	r2, [pc, #100]	; (8003614 <HAL_ADC_ConfigChannel+0x238>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d123      	bne.n	80035fa <HAL_ADC_ConfigChannel+0x21e>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2b10      	cmp	r3, #16
 80035b8:	d003      	beq.n	80035c2 <HAL_ADC_ConfigChannel+0x1e6>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2b11      	cmp	r3, #17
 80035c0:	d11b      	bne.n	80035fa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2b10      	cmp	r3, #16
 80035d4:	d111      	bne.n	80035fa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035d6:	4b10      	ldr	r3, [pc, #64]	; (8003618 <HAL_ADC_ConfigChannel+0x23c>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a10      	ldr	r2, [pc, #64]	; (800361c <HAL_ADC_ConfigChannel+0x240>)
 80035dc:	fba2 2303 	umull	r2, r3, r2, r3
 80035e0:	0c9a      	lsrs	r2, r3, #18
 80035e2:	4613      	mov	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4413      	add	r3, r2
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80035ec:	e002      	b.n	80035f4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	3b01      	subs	r3, #1
 80035f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1f9      	bne.n	80035ee <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3714      	adds	r7, #20
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr
 8003610:	40012300 	.word	0x40012300
 8003614:	40012000 	.word	0x40012000
 8003618:	20000000 	.word	0x20000000
 800361c:	431bde83 	.word	0x431bde83

08003620 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003628:	4b79      	ldr	r3, [pc, #484]	; (8003810 <ADC_Init+0x1f0>)
 800362a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	431a      	orrs	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003654:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6859      	ldr	r1, [r3, #4]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	021a      	lsls	r2, r3, #8
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	430a      	orrs	r2, r1
 8003668:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003678:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6859      	ldr	r1, [r3, #4]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689a      	ldr	r2, [r3, #8]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800369a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6899      	ldr	r1, [r3, #8]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68da      	ldr	r2, [r3, #12]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b2:	4a58      	ldr	r2, [pc, #352]	; (8003814 <ADC_Init+0x1f4>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d022      	beq.n	80036fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689a      	ldr	r2, [r3, #8]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6899      	ldr	r1, [r3, #8]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6899      	ldr	r1, [r3, #8]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	430a      	orrs	r2, r1
 80036fa:	609a      	str	r2, [r3, #8]
 80036fc:	e00f      	b.n	800371e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800370c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800371c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 0202 	bic.w	r2, r2, #2
 800372c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6899      	ldr	r1, [r3, #8]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	7e1b      	ldrb	r3, [r3, #24]
 8003738:	005a      	lsls	r2, r3, #1
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d01b      	beq.n	8003784 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800375a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800376a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6859      	ldr	r1, [r3, #4]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003776:	3b01      	subs	r3, #1
 8003778:	035a      	lsls	r2, r3, #13
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	430a      	orrs	r2, r1
 8003780:	605a      	str	r2, [r3, #4]
 8003782:	e007      	b.n	8003794 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003792:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80037a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	3b01      	subs	r3, #1
 80037b0:	051a      	lsls	r2, r3, #20
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80037c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6899      	ldr	r1, [r3, #8]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80037d6:	025a      	lsls	r2, r3, #9
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	430a      	orrs	r2, r1
 80037de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	689a      	ldr	r2, [r3, #8]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6899      	ldr	r1, [r3, #8]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	029a      	lsls	r2, r3, #10
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	430a      	orrs	r2, r1
 8003802:	609a      	str	r2, [r3, #8]
}
 8003804:	bf00      	nop
 8003806:	3714      	adds	r7, #20
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr
 8003810:	40012300 	.word	0x40012300
 8003814:	0f000001 	.word	0x0f000001

08003818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003828:	4b0c      	ldr	r3, [pc, #48]	; (800385c <__NVIC_SetPriorityGrouping+0x44>)
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003834:	4013      	ands	r3, r2
 8003836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003840:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800384a:	4a04      	ldr	r2, [pc, #16]	; (800385c <__NVIC_SetPriorityGrouping+0x44>)
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	60d3      	str	r3, [r2, #12]
}
 8003850:	bf00      	nop
 8003852:	3714      	adds	r7, #20
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	e000ed00 	.word	0xe000ed00

08003860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003864:	4b04      	ldr	r3, [pc, #16]	; (8003878 <__NVIC_GetPriorityGrouping+0x18>)
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	0a1b      	lsrs	r3, r3, #8
 800386a:	f003 0307 	and.w	r3, r3, #7
}
 800386e:	4618      	mov	r0, r3
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr
 8003878:	e000ed00 	.word	0xe000ed00

0800387c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	4603      	mov	r3, r0
 8003884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388a:	2b00      	cmp	r3, #0
 800388c:	db0b      	blt.n	80038a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800388e:	79fb      	ldrb	r3, [r7, #7]
 8003890:	f003 021f 	and.w	r2, r3, #31
 8003894:	4907      	ldr	r1, [pc, #28]	; (80038b4 <__NVIC_EnableIRQ+0x38>)
 8003896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389a:	095b      	lsrs	r3, r3, #5
 800389c:	2001      	movs	r0, #1
 800389e:	fa00 f202 	lsl.w	r2, r0, r2
 80038a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038a6:	bf00      	nop
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	e000e100 	.word	0xe000e100

080038b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	4603      	mov	r3, r0
 80038c0:	6039      	str	r1, [r7, #0]
 80038c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	db0a      	blt.n	80038e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	490c      	ldr	r1, [pc, #48]	; (8003904 <__NVIC_SetPriority+0x4c>)
 80038d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d6:	0112      	lsls	r2, r2, #4
 80038d8:	b2d2      	uxtb	r2, r2
 80038da:	440b      	add	r3, r1
 80038dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038e0:	e00a      	b.n	80038f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	b2da      	uxtb	r2, r3
 80038e6:	4908      	ldr	r1, [pc, #32]	; (8003908 <__NVIC_SetPriority+0x50>)
 80038e8:	79fb      	ldrb	r3, [r7, #7]
 80038ea:	f003 030f 	and.w	r3, r3, #15
 80038ee:	3b04      	subs	r3, #4
 80038f0:	0112      	lsls	r2, r2, #4
 80038f2:	b2d2      	uxtb	r2, r2
 80038f4:	440b      	add	r3, r1
 80038f6:	761a      	strb	r2, [r3, #24]
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	e000e100 	.word	0xe000e100
 8003908:	e000ed00 	.word	0xe000ed00

0800390c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800390c:	b480      	push	{r7}
 800390e:	b089      	sub	sp, #36	; 0x24
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	f1c3 0307 	rsb	r3, r3, #7
 8003926:	2b04      	cmp	r3, #4
 8003928:	bf28      	it	cs
 800392a:	2304      	movcs	r3, #4
 800392c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	3304      	adds	r3, #4
 8003932:	2b06      	cmp	r3, #6
 8003934:	d902      	bls.n	800393c <NVIC_EncodePriority+0x30>
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	3b03      	subs	r3, #3
 800393a:	e000      	b.n	800393e <NVIC_EncodePriority+0x32>
 800393c:	2300      	movs	r3, #0
 800393e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003940:	f04f 32ff 	mov.w	r2, #4294967295
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	fa02 f303 	lsl.w	r3, r2, r3
 800394a:	43da      	mvns	r2, r3
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	401a      	ands	r2, r3
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003954:	f04f 31ff 	mov.w	r1, #4294967295
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	fa01 f303 	lsl.w	r3, r1, r3
 800395e:	43d9      	mvns	r1, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003964:	4313      	orrs	r3, r2
         );
}
 8003966:	4618      	mov	r0, r3
 8003968:	3724      	adds	r7, #36	; 0x24
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
	...

08003974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3b01      	subs	r3, #1
 8003980:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003984:	d301      	bcc.n	800398a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003986:	2301      	movs	r3, #1
 8003988:	e00f      	b.n	80039aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800398a:	4a0a      	ldr	r2, [pc, #40]	; (80039b4 <SysTick_Config+0x40>)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3b01      	subs	r3, #1
 8003990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003992:	210f      	movs	r1, #15
 8003994:	f04f 30ff 	mov.w	r0, #4294967295
 8003998:	f7ff ff8e 	bl	80038b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800399c:	4b05      	ldr	r3, [pc, #20]	; (80039b4 <SysTick_Config+0x40>)
 800399e:	2200      	movs	r2, #0
 80039a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039a2:	4b04      	ldr	r3, [pc, #16]	; (80039b4 <SysTick_Config+0x40>)
 80039a4:	2207      	movs	r2, #7
 80039a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	e000e010 	.word	0xe000e010

080039b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f7ff ff29 	bl	8003818 <__NVIC_SetPriorityGrouping>
}
 80039c6:	bf00      	nop
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b086      	sub	sp, #24
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	4603      	mov	r3, r0
 80039d6:	60b9      	str	r1, [r7, #8]
 80039d8:	607a      	str	r2, [r7, #4]
 80039da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039dc:	2300      	movs	r3, #0
 80039de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039e0:	f7ff ff3e 	bl	8003860 <__NVIC_GetPriorityGrouping>
 80039e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	68b9      	ldr	r1, [r7, #8]
 80039ea:	6978      	ldr	r0, [r7, #20]
 80039ec:	f7ff ff8e 	bl	800390c <NVIC_EncodePriority>
 80039f0:	4602      	mov	r2, r0
 80039f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039f6:	4611      	mov	r1, r2
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7ff ff5d 	bl	80038b8 <__NVIC_SetPriority>
}
 80039fe:	bf00      	nop
 8003a00:	3718      	adds	r7, #24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b082      	sub	sp, #8
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff ff31 	bl	800387c <__NVIC_EnableIRQ>
}
 8003a1a:	bf00      	nop
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b082      	sub	sp, #8
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7ff ffa2 	bl	8003974 <SysTick_Config>
 8003a30:	4603      	mov	r3, r0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
	...

08003a3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a48:	f7ff fb08 	bl	800305c <HAL_GetTick>
 8003a4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d101      	bne.n	8003a58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e099      	b.n	8003b8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0201 	bic.w	r2, r2, #1
 8003a76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a78:	e00f      	b.n	8003a9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a7a:	f7ff faef 	bl	800305c <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	2b05      	cmp	r3, #5
 8003a86:	d908      	bls.n	8003a9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2203      	movs	r2, #3
 8003a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e078      	b.n	8003b8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1e8      	bne.n	8003a7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	4b38      	ldr	r3, [pc, #224]	; (8003b94 <HAL_DMA_Init+0x158>)
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ac6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ad2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ade:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af0:	2b04      	cmp	r3, #4
 8003af2:	d107      	bne.n	8003b04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afc:	4313      	orrs	r3, r2
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	f023 0307 	bic.w	r3, r3, #7
 8003b1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2a:	2b04      	cmp	r3, #4
 8003b2c:	d117      	bne.n	8003b5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00e      	beq.n	8003b5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 fb01 	bl	8004148 <DMA_CheckFifoParam>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d008      	beq.n	8003b5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2240      	movs	r2, #64	; 0x40
 8003b50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e016      	b.n	8003b8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 fab8 	bl	80040dc <DMA_CalcBaseAndBitshift>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b74:	223f      	movs	r2, #63	; 0x3f
 8003b76:	409a      	lsls	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3718      	adds	r7, #24
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	f010803f 	.word	0xf010803f

08003b98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
 8003ba4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d101      	bne.n	8003bbe <HAL_DMA_Start_IT+0x26>
 8003bba:	2302      	movs	r3, #2
 8003bbc:	e040      	b.n	8003c40 <HAL_DMA_Start_IT+0xa8>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d12f      	bne.n	8003c32 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2202      	movs	r2, #2
 8003bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	68b9      	ldr	r1, [r7, #8]
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f000 fa4a 	bl	8004080 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf0:	223f      	movs	r2, #63	; 0x3f
 8003bf2:	409a      	lsls	r2, r3
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f042 0216 	orr.w	r2, r2, #22
 8003c06:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d007      	beq.n	8003c20 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f042 0208 	orr.w	r2, r2, #8
 8003c1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f042 0201 	orr.w	r2, r2, #1
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	e005      	b.n	8003c3e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3718      	adds	r7, #24
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c54:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003c56:	f7ff fa01 	bl	800305c <HAL_GetTick>
 8003c5a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d008      	beq.n	8003c7a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2280      	movs	r2, #128	; 0x80
 8003c6c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e052      	b.n	8003d20 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0216 	bic.w	r2, r2, #22
 8003c88:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	695a      	ldr	r2, [r3, #20]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c98:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d103      	bne.n	8003caa <HAL_DMA_Abort+0x62>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d007      	beq.n	8003cba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 0208 	bic.w	r2, r2, #8
 8003cb8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0201 	bic.w	r2, r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cca:	e013      	b.n	8003cf4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ccc:	f7ff f9c6 	bl	800305c <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b05      	cmp	r3, #5
 8003cd8:	d90c      	bls.n	8003cf4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2220      	movs	r2, #32
 8003cde:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2203      	movs	r2, #3
 8003ce4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e015      	b.n	8003d20 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1e4      	bne.n	8003ccc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d06:	223f      	movs	r2, #63	; 0x3f
 8003d08:	409a      	lsls	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d004      	beq.n	8003d46 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2280      	movs	r2, #128	; 0x80
 8003d40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e00c      	b.n	8003d60 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2205      	movs	r2, #5
 8003d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 0201 	bic.w	r2, r2, #1
 8003d5c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d74:	2300      	movs	r3, #0
 8003d76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d78:	4b92      	ldr	r3, [pc, #584]	; (8003fc4 <HAL_DMA_IRQHandler+0x258>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a92      	ldr	r2, [pc, #584]	; (8003fc8 <HAL_DMA_IRQHandler+0x25c>)
 8003d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d82:	0a9b      	lsrs	r3, r3, #10
 8003d84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d96:	2208      	movs	r2, #8
 8003d98:	409a      	lsls	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d01a      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0304 	and.w	r3, r3, #4
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d013      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f022 0204 	bic.w	r2, r2, #4
 8003dbe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc4:	2208      	movs	r2, #8
 8003dc6:	409a      	lsls	r2, r3
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd0:	f043 0201 	orr.w	r2, r3, #1
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ddc:	2201      	movs	r2, #1
 8003dde:	409a      	lsls	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	4013      	ands	r3, r2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d012      	beq.n	8003e0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00b      	beq.n	8003e0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	409a      	lsls	r2, r3
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e06:	f043 0202 	orr.w	r2, r3, #2
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e12:	2204      	movs	r2, #4
 8003e14:	409a      	lsls	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d012      	beq.n	8003e44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00b      	beq.n	8003e44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e30:	2204      	movs	r2, #4
 8003e32:	409a      	lsls	r2, r3
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e3c:	f043 0204 	orr.w	r2, r3, #4
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e48:	2210      	movs	r2, #16
 8003e4a:	409a      	lsls	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d043      	beq.n	8003edc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0308 	and.w	r3, r3, #8
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d03c      	beq.n	8003edc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e66:	2210      	movs	r2, #16
 8003e68:	409a      	lsls	r2, r3
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d018      	beq.n	8003eae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d108      	bne.n	8003e9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d024      	beq.n	8003edc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	4798      	blx	r3
 8003e9a:	e01f      	b.n	8003edc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d01b      	beq.n	8003edc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	4798      	blx	r3
 8003eac:	e016      	b.n	8003edc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d107      	bne.n	8003ecc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0208 	bic.w	r2, r2, #8
 8003eca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d003      	beq.n	8003edc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	409a      	lsls	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f000 808e 	beq.w	800400a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0310 	and.w	r3, r3, #16
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 8086 	beq.w	800400a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f02:	2220      	movs	r2, #32
 8003f04:	409a      	lsls	r2, r3
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b05      	cmp	r3, #5
 8003f14:	d136      	bne.n	8003f84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0216 	bic.w	r2, r2, #22
 8003f24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	695a      	ldr	r2, [r3, #20]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d103      	bne.n	8003f46 <HAL_DMA_IRQHandler+0x1da>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d007      	beq.n	8003f56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0208 	bic.w	r2, r2, #8
 8003f54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f5a:	223f      	movs	r2, #63	; 0x3f
 8003f5c:	409a      	lsls	r2, r3
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d07d      	beq.n	8004076 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	4798      	blx	r3
        }
        return;
 8003f82:	e078      	b.n	8004076 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d01c      	beq.n	8003fcc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d108      	bne.n	8003fb2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d030      	beq.n	800400a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	4798      	blx	r3
 8003fb0:	e02b      	b.n	800400a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d027      	beq.n	800400a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	4798      	blx	r3
 8003fc2:	e022      	b.n	800400a <HAL_DMA_IRQHandler+0x29e>
 8003fc4:	20000000 	.word	0x20000000
 8003fc8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10f      	bne.n	8003ffa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0210 	bic.w	r2, r2, #16
 8003fe8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800400e:	2b00      	cmp	r3, #0
 8004010:	d032      	beq.n	8004078 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d022      	beq.n	8004064 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2205      	movs	r2, #5
 8004022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 0201 	bic.w	r2, r2, #1
 8004034:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	3301      	adds	r3, #1
 800403a:	60bb      	str	r3, [r7, #8]
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	429a      	cmp	r2, r3
 8004040:	d307      	bcc.n	8004052 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0301 	and.w	r3, r3, #1
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1f2      	bne.n	8004036 <HAL_DMA_IRQHandler+0x2ca>
 8004050:	e000      	b.n	8004054 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004052:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004068:	2b00      	cmp	r3, #0
 800406a:	d005      	beq.n	8004078 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	4798      	blx	r3
 8004074:	e000      	b.n	8004078 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004076:	bf00      	nop
    }
  }
}
 8004078:	3718      	adds	r7, #24
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop

08004080 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
 800408c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800409c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	2b40      	cmp	r3, #64	; 0x40
 80040ac:	d108      	bne.n	80040c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68ba      	ldr	r2, [r7, #8]
 80040bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80040be:	e007      	b.n	80040d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	60da      	str	r2, [r3, #12]
}
 80040d0:	bf00      	nop
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	3b10      	subs	r3, #16
 80040ec:	4a14      	ldr	r2, [pc, #80]	; (8004140 <DMA_CalcBaseAndBitshift+0x64>)
 80040ee:	fba2 2303 	umull	r2, r3, r2, r3
 80040f2:	091b      	lsrs	r3, r3, #4
 80040f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80040f6:	4a13      	ldr	r2, [pc, #76]	; (8004144 <DMA_CalcBaseAndBitshift+0x68>)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4413      	add	r3, r2
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	461a      	mov	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2b03      	cmp	r3, #3
 8004108:	d909      	bls.n	800411e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004112:	f023 0303 	bic.w	r3, r3, #3
 8004116:	1d1a      	adds	r2, r3, #4
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	659a      	str	r2, [r3, #88]	; 0x58
 800411c:	e007      	b.n	800412e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004126:	f023 0303 	bic.w	r3, r3, #3
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004132:	4618      	mov	r0, r3
 8004134:	3714      	adds	r7, #20
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	aaaaaaab 	.word	0xaaaaaaab
 8004144:	0800b058 	.word	0x0800b058

08004148 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004150:	2300      	movs	r3, #0
 8004152:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004158:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d11f      	bne.n	80041a2 <DMA_CheckFifoParam+0x5a>
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	2b03      	cmp	r3, #3
 8004166:	d856      	bhi.n	8004216 <DMA_CheckFifoParam+0xce>
 8004168:	a201      	add	r2, pc, #4	; (adr r2, 8004170 <DMA_CheckFifoParam+0x28>)
 800416a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416e:	bf00      	nop
 8004170:	08004181 	.word	0x08004181
 8004174:	08004193 	.word	0x08004193
 8004178:	08004181 	.word	0x08004181
 800417c:	08004217 	.word	0x08004217
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004184:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d046      	beq.n	800421a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004190:	e043      	b.n	800421a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004196:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800419a:	d140      	bne.n	800421e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041a0:	e03d      	b.n	800421e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041aa:	d121      	bne.n	80041f0 <DMA_CheckFifoParam+0xa8>
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	2b03      	cmp	r3, #3
 80041b0:	d837      	bhi.n	8004222 <DMA_CheckFifoParam+0xda>
 80041b2:	a201      	add	r2, pc, #4	; (adr r2, 80041b8 <DMA_CheckFifoParam+0x70>)
 80041b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b8:	080041c9 	.word	0x080041c9
 80041bc:	080041cf 	.word	0x080041cf
 80041c0:	080041c9 	.word	0x080041c9
 80041c4:	080041e1 	.word	0x080041e1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	73fb      	strb	r3, [r7, #15]
      break;
 80041cc:	e030      	b.n	8004230 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d025      	beq.n	8004226 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041de:	e022      	b.n	8004226 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041e8:	d11f      	bne.n	800422a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80041ee:	e01c      	b.n	800422a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d903      	bls.n	80041fe <DMA_CheckFifoParam+0xb6>
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	2b03      	cmp	r3, #3
 80041fa:	d003      	beq.n	8004204 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80041fc:	e018      	b.n	8004230 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	73fb      	strb	r3, [r7, #15]
      break;
 8004202:	e015      	b.n	8004230 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004208:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00e      	beq.n	800422e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	73fb      	strb	r3, [r7, #15]
      break;
 8004214:	e00b      	b.n	800422e <DMA_CheckFifoParam+0xe6>
      break;
 8004216:	bf00      	nop
 8004218:	e00a      	b.n	8004230 <DMA_CheckFifoParam+0xe8>
      break;
 800421a:	bf00      	nop
 800421c:	e008      	b.n	8004230 <DMA_CheckFifoParam+0xe8>
      break;
 800421e:	bf00      	nop
 8004220:	e006      	b.n	8004230 <DMA_CheckFifoParam+0xe8>
      break;
 8004222:	bf00      	nop
 8004224:	e004      	b.n	8004230 <DMA_CheckFifoParam+0xe8>
      break;
 8004226:	bf00      	nop
 8004228:	e002      	b.n	8004230 <DMA_CheckFifoParam+0xe8>
      break;   
 800422a:	bf00      	nop
 800422c:	e000      	b.n	8004230 <DMA_CheckFifoParam+0xe8>
      break;
 800422e:	bf00      	nop
    }
  } 
  
  return status; 
 8004230:	7bfb      	ldrb	r3, [r7, #15]
}
 8004232:	4618      	mov	r0, r3
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop

08004240 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004240:	b480      	push	{r7}
 8004242:	b089      	sub	sp, #36	; 0x24
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800424a:	2300      	movs	r3, #0
 800424c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800424e:	2300      	movs	r3, #0
 8004250:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004252:	2300      	movs	r3, #0
 8004254:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004256:	2300      	movs	r3, #0
 8004258:	61fb      	str	r3, [r7, #28]
 800425a:	e159      	b.n	8004510 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800425c:	2201      	movs	r2, #1
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	fa02 f303 	lsl.w	r3, r2, r3
 8004264:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	4013      	ands	r3, r2
 800426e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	429a      	cmp	r2, r3
 8004276:	f040 8148 	bne.w	800450a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f003 0303 	and.w	r3, r3, #3
 8004282:	2b01      	cmp	r3, #1
 8004284:	d005      	beq.n	8004292 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800428e:	2b02      	cmp	r3, #2
 8004290:	d130      	bne.n	80042f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	005b      	lsls	r3, r3, #1
 800429c:	2203      	movs	r2, #3
 800429e:	fa02 f303 	lsl.w	r3, r2, r3
 80042a2:	43db      	mvns	r3, r3
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	4013      	ands	r3, r2
 80042a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	68da      	ldr	r2, [r3, #12]
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	fa02 f303 	lsl.w	r3, r2, r3
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042c8:	2201      	movs	r2, #1
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	fa02 f303 	lsl.w	r3, r2, r3
 80042d0:	43db      	mvns	r3, r3
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	4013      	ands	r3, r2
 80042d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	091b      	lsrs	r3, r3, #4
 80042de:	f003 0201 	and.w	r2, r3, #1
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	fa02 f303 	lsl.w	r3, r2, r3
 80042e8:	69ba      	ldr	r2, [r7, #24]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	69ba      	ldr	r2, [r7, #24]
 80042f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f003 0303 	and.w	r3, r3, #3
 80042fc:	2b03      	cmp	r3, #3
 80042fe:	d017      	beq.n	8004330 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	2203      	movs	r2, #3
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	43db      	mvns	r3, r3
 8004312:	69ba      	ldr	r2, [r7, #24]
 8004314:	4013      	ands	r3, r2
 8004316:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	689a      	ldr	r2, [r3, #8]
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	005b      	lsls	r3, r3, #1
 8004320:	fa02 f303 	lsl.w	r3, r2, r3
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	4313      	orrs	r3, r2
 8004328:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f003 0303 	and.w	r3, r3, #3
 8004338:	2b02      	cmp	r3, #2
 800433a:	d123      	bne.n	8004384 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	08da      	lsrs	r2, r3, #3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3208      	adds	r2, #8
 8004344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004348:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	f003 0307 	and.w	r3, r3, #7
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	220f      	movs	r2, #15
 8004354:	fa02 f303 	lsl.w	r3, r2, r3
 8004358:	43db      	mvns	r3, r3
 800435a:	69ba      	ldr	r2, [r7, #24]
 800435c:	4013      	ands	r3, r2
 800435e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	691a      	ldr	r2, [r3, #16]
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	f003 0307 	and.w	r3, r3, #7
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	fa02 f303 	lsl.w	r3, r2, r3
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	4313      	orrs	r3, r2
 8004374:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	08da      	lsrs	r2, r3, #3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	3208      	adds	r2, #8
 800437e:	69b9      	ldr	r1, [r7, #24]
 8004380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	2203      	movs	r2, #3
 8004390:	fa02 f303 	lsl.w	r3, r2, r3
 8004394:	43db      	mvns	r3, r3
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	4013      	ands	r3, r2
 800439a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f003 0203 	and.w	r2, r3, #3
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	005b      	lsls	r3, r3, #1
 80043a8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f000 80a2 	beq.w	800450a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043c6:	2300      	movs	r3, #0
 80043c8:	60fb      	str	r3, [r7, #12]
 80043ca:	4b57      	ldr	r3, [pc, #348]	; (8004528 <HAL_GPIO_Init+0x2e8>)
 80043cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ce:	4a56      	ldr	r2, [pc, #344]	; (8004528 <HAL_GPIO_Init+0x2e8>)
 80043d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043d4:	6453      	str	r3, [r2, #68]	; 0x44
 80043d6:	4b54      	ldr	r3, [pc, #336]	; (8004528 <HAL_GPIO_Init+0x2e8>)
 80043d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043de:	60fb      	str	r3, [r7, #12]
 80043e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043e2:	4a52      	ldr	r2, [pc, #328]	; (800452c <HAL_GPIO_Init+0x2ec>)
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	089b      	lsrs	r3, r3, #2
 80043e8:	3302      	adds	r3, #2
 80043ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	f003 0303 	and.w	r3, r3, #3
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	220f      	movs	r2, #15
 80043fa:	fa02 f303 	lsl.w	r3, r2, r3
 80043fe:	43db      	mvns	r3, r3
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	4013      	ands	r3, r2
 8004404:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a49      	ldr	r2, [pc, #292]	; (8004530 <HAL_GPIO_Init+0x2f0>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d019      	beq.n	8004442 <HAL_GPIO_Init+0x202>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a48      	ldr	r2, [pc, #288]	; (8004534 <HAL_GPIO_Init+0x2f4>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d013      	beq.n	800443e <HAL_GPIO_Init+0x1fe>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a47      	ldr	r2, [pc, #284]	; (8004538 <HAL_GPIO_Init+0x2f8>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d00d      	beq.n	800443a <HAL_GPIO_Init+0x1fa>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a46      	ldr	r2, [pc, #280]	; (800453c <HAL_GPIO_Init+0x2fc>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d007      	beq.n	8004436 <HAL_GPIO_Init+0x1f6>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a45      	ldr	r2, [pc, #276]	; (8004540 <HAL_GPIO_Init+0x300>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d101      	bne.n	8004432 <HAL_GPIO_Init+0x1f2>
 800442e:	2304      	movs	r3, #4
 8004430:	e008      	b.n	8004444 <HAL_GPIO_Init+0x204>
 8004432:	2307      	movs	r3, #7
 8004434:	e006      	b.n	8004444 <HAL_GPIO_Init+0x204>
 8004436:	2303      	movs	r3, #3
 8004438:	e004      	b.n	8004444 <HAL_GPIO_Init+0x204>
 800443a:	2302      	movs	r3, #2
 800443c:	e002      	b.n	8004444 <HAL_GPIO_Init+0x204>
 800443e:	2301      	movs	r3, #1
 8004440:	e000      	b.n	8004444 <HAL_GPIO_Init+0x204>
 8004442:	2300      	movs	r3, #0
 8004444:	69fa      	ldr	r2, [r7, #28]
 8004446:	f002 0203 	and.w	r2, r2, #3
 800444a:	0092      	lsls	r2, r2, #2
 800444c:	4093      	lsls	r3, r2
 800444e:	69ba      	ldr	r2, [r7, #24]
 8004450:	4313      	orrs	r3, r2
 8004452:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004454:	4935      	ldr	r1, [pc, #212]	; (800452c <HAL_GPIO_Init+0x2ec>)
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	089b      	lsrs	r3, r3, #2
 800445a:	3302      	adds	r3, #2
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004462:	4b38      	ldr	r3, [pc, #224]	; (8004544 <HAL_GPIO_Init+0x304>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	43db      	mvns	r3, r3
 800446c:	69ba      	ldr	r2, [r7, #24]
 800446e:	4013      	ands	r3, r2
 8004470:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d003      	beq.n	8004486 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800447e:	69ba      	ldr	r2, [r7, #24]
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	4313      	orrs	r3, r2
 8004484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004486:	4a2f      	ldr	r2, [pc, #188]	; (8004544 <HAL_GPIO_Init+0x304>)
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800448c:	4b2d      	ldr	r3, [pc, #180]	; (8004544 <HAL_GPIO_Init+0x304>)
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	43db      	mvns	r3, r3
 8004496:	69ba      	ldr	r2, [r7, #24]
 8004498:	4013      	ands	r3, r2
 800449a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d003      	beq.n	80044b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80044b0:	4a24      	ldr	r2, [pc, #144]	; (8004544 <HAL_GPIO_Init+0x304>)
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044b6:	4b23      	ldr	r3, [pc, #140]	; (8004544 <HAL_GPIO_Init+0x304>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	43db      	mvns	r3, r3
 80044c0:	69ba      	ldr	r2, [r7, #24]
 80044c2:	4013      	ands	r3, r2
 80044c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d003      	beq.n	80044da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044da:	4a1a      	ldr	r2, [pc, #104]	; (8004544 <HAL_GPIO_Init+0x304>)
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044e0:	4b18      	ldr	r3, [pc, #96]	; (8004544 <HAL_GPIO_Init+0x304>)
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	43db      	mvns	r3, r3
 80044ea:	69ba      	ldr	r2, [r7, #24]
 80044ec:	4013      	ands	r3, r2
 80044ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d003      	beq.n	8004504 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80044fc:	69ba      	ldr	r2, [r7, #24]
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	4313      	orrs	r3, r2
 8004502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004504:	4a0f      	ldr	r2, [pc, #60]	; (8004544 <HAL_GPIO_Init+0x304>)
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	3301      	adds	r3, #1
 800450e:	61fb      	str	r3, [r7, #28]
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	2b0f      	cmp	r3, #15
 8004514:	f67f aea2 	bls.w	800425c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004518:	bf00      	nop
 800451a:	bf00      	nop
 800451c:	3724      	adds	r7, #36	; 0x24
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	40023800 	.word	0x40023800
 800452c:	40013800 	.word	0x40013800
 8004530:	40020000 	.word	0x40020000
 8004534:	40020400 	.word	0x40020400
 8004538:	40020800 	.word	0x40020800
 800453c:	40020c00 	.word	0x40020c00
 8004540:	40021000 	.word	0x40021000
 8004544:	40013c00 	.word	0x40013c00

08004548 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	460b      	mov	r3, r1
 8004552:	807b      	strh	r3, [r7, #2]
 8004554:	4613      	mov	r3, r2
 8004556:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004558:	787b      	ldrb	r3, [r7, #1]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d003      	beq.n	8004566 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800455e:	887a      	ldrh	r2, [r7, #2]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004564:	e003      	b.n	800456e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004566:	887b      	ldrh	r3, [r7, #2]
 8004568:	041a      	lsls	r2, r3, #16
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	619a      	str	r2, [r3, #24]
}
 800456e:	bf00      	nop
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800457a:	b480      	push	{r7}
 800457c:	b085      	sub	sp, #20
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
 8004582:	460b      	mov	r3, r1
 8004584:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800458c:	887a      	ldrh	r2, [r7, #2]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	4013      	ands	r3, r2
 8004592:	041a      	lsls	r2, r3, #16
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	43d9      	mvns	r1, r3
 8004598:	887b      	ldrh	r3, [r7, #2]
 800459a:	400b      	ands	r3, r1
 800459c:	431a      	orrs	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	619a      	str	r2, [r3, #24]
}
 80045a2:	bf00      	nop
 80045a4:	3714      	adds	r7, #20
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
	...

080045b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e12b      	b.n	800481a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d106      	bne.n	80045dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7fd f8d4 	bl	8001784 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2224      	movs	r2, #36	; 0x24
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 0201 	bic.w	r2, r2, #1
 80045f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004602:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004612:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004614:	f001 fbac 	bl	8005d70 <HAL_RCC_GetPCLK1Freq>
 8004618:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	4a81      	ldr	r2, [pc, #516]	; (8004824 <HAL_I2C_Init+0x274>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d807      	bhi.n	8004634 <HAL_I2C_Init+0x84>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	4a80      	ldr	r2, [pc, #512]	; (8004828 <HAL_I2C_Init+0x278>)
 8004628:	4293      	cmp	r3, r2
 800462a:	bf94      	ite	ls
 800462c:	2301      	movls	r3, #1
 800462e:	2300      	movhi	r3, #0
 8004630:	b2db      	uxtb	r3, r3
 8004632:	e006      	b.n	8004642 <HAL_I2C_Init+0x92>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4a7d      	ldr	r2, [pc, #500]	; (800482c <HAL_I2C_Init+0x27c>)
 8004638:	4293      	cmp	r3, r2
 800463a:	bf94      	ite	ls
 800463c:	2301      	movls	r3, #1
 800463e:	2300      	movhi	r3, #0
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e0e7      	b.n	800481a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	4a78      	ldr	r2, [pc, #480]	; (8004830 <HAL_I2C_Init+0x280>)
 800464e:	fba2 2303 	umull	r2, r3, r2, r3
 8004652:	0c9b      	lsrs	r3, r3, #18
 8004654:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	430a      	orrs	r2, r1
 8004668:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	4a6a      	ldr	r2, [pc, #424]	; (8004824 <HAL_I2C_Init+0x274>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d802      	bhi.n	8004684 <HAL_I2C_Init+0xd4>
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	3301      	adds	r3, #1
 8004682:	e009      	b.n	8004698 <HAL_I2C_Init+0xe8>
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800468a:	fb02 f303 	mul.w	r3, r2, r3
 800468e:	4a69      	ldr	r2, [pc, #420]	; (8004834 <HAL_I2C_Init+0x284>)
 8004690:	fba2 2303 	umull	r2, r3, r2, r3
 8004694:	099b      	lsrs	r3, r3, #6
 8004696:	3301      	adds	r3, #1
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	6812      	ldr	r2, [r2, #0]
 800469c:	430b      	orrs	r3, r1
 800469e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	69db      	ldr	r3, [r3, #28]
 80046a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80046aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	495c      	ldr	r1, [pc, #368]	; (8004824 <HAL_I2C_Init+0x274>)
 80046b4:	428b      	cmp	r3, r1
 80046b6:	d819      	bhi.n	80046ec <HAL_I2C_Init+0x13c>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	1e59      	subs	r1, r3, #1
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	005b      	lsls	r3, r3, #1
 80046c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80046c6:	1c59      	adds	r1, r3, #1
 80046c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80046cc:	400b      	ands	r3, r1
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00a      	beq.n	80046e8 <HAL_I2C_Init+0x138>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	1e59      	subs	r1, r3, #1
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	005b      	lsls	r3, r3, #1
 80046dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80046e0:	3301      	adds	r3, #1
 80046e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046e6:	e051      	b.n	800478c <HAL_I2C_Init+0x1dc>
 80046e8:	2304      	movs	r3, #4
 80046ea:	e04f      	b.n	800478c <HAL_I2C_Init+0x1dc>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d111      	bne.n	8004718 <HAL_I2C_Init+0x168>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	1e58      	subs	r0, r3, #1
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6859      	ldr	r1, [r3, #4]
 80046fc:	460b      	mov	r3, r1
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	440b      	add	r3, r1
 8004702:	fbb0 f3f3 	udiv	r3, r0, r3
 8004706:	3301      	adds	r3, #1
 8004708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800470c:	2b00      	cmp	r3, #0
 800470e:	bf0c      	ite	eq
 8004710:	2301      	moveq	r3, #1
 8004712:	2300      	movne	r3, #0
 8004714:	b2db      	uxtb	r3, r3
 8004716:	e012      	b.n	800473e <HAL_I2C_Init+0x18e>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	1e58      	subs	r0, r3, #1
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6859      	ldr	r1, [r3, #4]
 8004720:	460b      	mov	r3, r1
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	440b      	add	r3, r1
 8004726:	0099      	lsls	r1, r3, #2
 8004728:	440b      	add	r3, r1
 800472a:	fbb0 f3f3 	udiv	r3, r0, r3
 800472e:	3301      	adds	r3, #1
 8004730:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004734:	2b00      	cmp	r3, #0
 8004736:	bf0c      	ite	eq
 8004738:	2301      	moveq	r3, #1
 800473a:	2300      	movne	r3, #0
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <HAL_I2C_Init+0x196>
 8004742:	2301      	movs	r3, #1
 8004744:	e022      	b.n	800478c <HAL_I2C_Init+0x1dc>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10e      	bne.n	800476c <HAL_I2C_Init+0x1bc>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	1e58      	subs	r0, r3, #1
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6859      	ldr	r1, [r3, #4]
 8004756:	460b      	mov	r3, r1
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	440b      	add	r3, r1
 800475c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004760:	3301      	adds	r3, #1
 8004762:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004766:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800476a:	e00f      	b.n	800478c <HAL_I2C_Init+0x1dc>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	1e58      	subs	r0, r3, #1
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6859      	ldr	r1, [r3, #4]
 8004774:	460b      	mov	r3, r1
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	440b      	add	r3, r1
 800477a:	0099      	lsls	r1, r3, #2
 800477c:	440b      	add	r3, r1
 800477e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004782:	3301      	adds	r3, #1
 8004784:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004788:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800478c:	6879      	ldr	r1, [r7, #4]
 800478e:	6809      	ldr	r1, [r1, #0]
 8004790:	4313      	orrs	r3, r2
 8004792:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	69da      	ldr	r2, [r3, #28]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	431a      	orrs	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	430a      	orrs	r2, r1
 80047ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80047ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	6911      	ldr	r1, [r2, #16]
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	68d2      	ldr	r2, [r2, #12]
 80047c6:	4311      	orrs	r1, r2
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	6812      	ldr	r2, [r2, #0]
 80047cc:	430b      	orrs	r3, r1
 80047ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	695a      	ldr	r2, [r3, #20]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	431a      	orrs	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0201 	orr.w	r2, r2, #1
 80047fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2220      	movs	r2, #32
 8004806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	000186a0 	.word	0x000186a0
 8004828:	001e847f 	.word	0x001e847f
 800482c:	003d08ff 	.word	0x003d08ff
 8004830:	431bde83 	.word	0x431bde83
 8004834:	10624dd3 	.word	0x10624dd3

08004838 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b088      	sub	sp, #32
 800483c:	af02      	add	r7, sp, #8
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	4608      	mov	r0, r1
 8004842:	4611      	mov	r1, r2
 8004844:	461a      	mov	r2, r3
 8004846:	4603      	mov	r3, r0
 8004848:	817b      	strh	r3, [r7, #10]
 800484a:	460b      	mov	r3, r1
 800484c:	813b      	strh	r3, [r7, #8]
 800484e:	4613      	mov	r3, r2
 8004850:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004852:	f7fe fc03 	bl	800305c <HAL_GetTick>
 8004856:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b20      	cmp	r3, #32
 8004862:	f040 80d9 	bne.w	8004a18 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	9300      	str	r3, [sp, #0]
 800486a:	2319      	movs	r3, #25
 800486c:	2201      	movs	r2, #1
 800486e:	496d      	ldr	r1, [pc, #436]	; (8004a24 <HAL_I2C_Mem_Write+0x1ec>)
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f000 fc7f 	bl	8005174 <I2C_WaitOnFlagUntilTimeout>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d001      	beq.n	8004880 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800487c:	2302      	movs	r3, #2
 800487e:	e0cc      	b.n	8004a1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004886:	2b01      	cmp	r3, #1
 8004888:	d101      	bne.n	800488e <HAL_I2C_Mem_Write+0x56>
 800488a:	2302      	movs	r3, #2
 800488c:	e0c5      	b.n	8004a1a <HAL_I2C_Mem_Write+0x1e2>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0301 	and.w	r3, r3, #1
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d007      	beq.n	80048b4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f042 0201 	orr.w	r2, r2, #1
 80048b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2221      	movs	r2, #33	; 0x21
 80048c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2240      	movs	r2, #64	; 0x40
 80048d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6a3a      	ldr	r2, [r7, #32]
 80048de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80048e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	4a4d      	ldr	r2, [pc, #308]	; (8004a28 <HAL_I2C_Mem_Write+0x1f0>)
 80048f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80048f6:	88f8      	ldrh	r0, [r7, #6]
 80048f8:	893a      	ldrh	r2, [r7, #8]
 80048fa:	8979      	ldrh	r1, [r7, #10]
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	9301      	str	r3, [sp, #4]
 8004900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	4603      	mov	r3, r0
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f000 fab6 	bl	8004e78 <I2C_RequestMemoryWrite>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d052      	beq.n	80049b8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e081      	b.n	8004a1a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	f000 fd00 	bl	8005320 <I2C_WaitOnTXEFlagUntilTimeout>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00d      	beq.n	8004942 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492a:	2b04      	cmp	r3, #4
 800492c:	d107      	bne.n	800493e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800493c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e06b      	b.n	8004a1a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004946:	781a      	ldrb	r2, [r3, #0]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004952:	1c5a      	adds	r2, r3, #1
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800495c:	3b01      	subs	r3, #1
 800495e:	b29a      	uxth	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004968:	b29b      	uxth	r3, r3
 800496a:	3b01      	subs	r3, #1
 800496c:	b29a      	uxth	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	f003 0304 	and.w	r3, r3, #4
 800497c:	2b04      	cmp	r3, #4
 800497e:	d11b      	bne.n	80049b8 <HAL_I2C_Mem_Write+0x180>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004984:	2b00      	cmp	r3, #0
 8004986:	d017      	beq.n	80049b8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498c:	781a      	ldrb	r2, [r3, #0]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004998:	1c5a      	adds	r2, r3, #1
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049a2:	3b01      	subs	r3, #1
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	3b01      	subs	r3, #1
 80049b2:	b29a      	uxth	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1aa      	bne.n	8004916 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f000 fcec 	bl	80053a2 <I2C_WaitOnBTFFlagUntilTimeout>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00d      	beq.n	80049ec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d4:	2b04      	cmp	r3, #4
 80049d6:	d107      	bne.n	80049e8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049e6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e016      	b.n	8004a1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2220      	movs	r2, #32
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a14:	2300      	movs	r3, #0
 8004a16:	e000      	b.n	8004a1a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004a18:	2302      	movs	r3, #2
  }
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3718      	adds	r7, #24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	00100002 	.word	0x00100002
 8004a28:	ffff0000 	.word	0xffff0000

08004a2c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b08c      	sub	sp, #48	; 0x30
 8004a30:	af02      	add	r7, sp, #8
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	4608      	mov	r0, r1
 8004a36:	4611      	mov	r1, r2
 8004a38:	461a      	mov	r2, r3
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	817b      	strh	r3, [r7, #10]
 8004a3e:	460b      	mov	r3, r1
 8004a40:	813b      	strh	r3, [r7, #8]
 8004a42:	4613      	mov	r3, r2
 8004a44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a46:	f7fe fb09 	bl	800305c <HAL_GetTick>
 8004a4a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2b20      	cmp	r3, #32
 8004a56:	f040 8208 	bne.w	8004e6a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	2319      	movs	r3, #25
 8004a60:	2201      	movs	r2, #1
 8004a62:	497b      	ldr	r1, [pc, #492]	; (8004c50 <HAL_I2C_Mem_Read+0x224>)
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f000 fb85 	bl	8005174 <I2C_WaitOnFlagUntilTimeout>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d001      	beq.n	8004a74 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004a70:	2302      	movs	r3, #2
 8004a72:	e1fb      	b.n	8004e6c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d101      	bne.n	8004a82 <HAL_I2C_Mem_Read+0x56>
 8004a7e:	2302      	movs	r3, #2
 8004a80:	e1f4      	b.n	8004e6c <HAL_I2C_Mem_Read+0x440>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d007      	beq.n	8004aa8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0201 	orr.w	r2, r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ab6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2222      	movs	r2, #34	; 0x22
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2240      	movs	r2, #64	; 0x40
 8004ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ad2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004ad8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	4a5b      	ldr	r2, [pc, #364]	; (8004c54 <HAL_I2C_Mem_Read+0x228>)
 8004ae8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004aea:	88f8      	ldrh	r0, [r7, #6]
 8004aec:	893a      	ldrh	r2, [r7, #8]
 8004aee:	8979      	ldrh	r1, [r7, #10]
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	9301      	str	r3, [sp, #4]
 8004af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af6:	9300      	str	r3, [sp, #0]
 8004af8:	4603      	mov	r3, r0
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f000 fa52 	bl	8004fa4 <I2C_RequestMemoryRead>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e1b0      	b.n	8004e6c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d113      	bne.n	8004b3a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b12:	2300      	movs	r3, #0
 8004b14:	623b      	str	r3, [r7, #32]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	695b      	ldr	r3, [r3, #20]
 8004b1c:	623b      	str	r3, [r7, #32]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	623b      	str	r3, [r7, #32]
 8004b26:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b36:	601a      	str	r2, [r3, #0]
 8004b38:	e184      	b.n	8004e44 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d11b      	bne.n	8004b7a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b52:	2300      	movs	r3, #0
 8004b54:	61fb      	str	r3, [r7, #28]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	61fb      	str	r3, [r7, #28]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	61fb      	str	r3, [r7, #28]
 8004b66:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b76:	601a      	str	r2, [r3, #0]
 8004b78:	e164      	b.n	8004e44 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d11b      	bne.n	8004bba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b90:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ba0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	61bb      	str	r3, [r7, #24]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	695b      	ldr	r3, [r3, #20]
 8004bac:	61bb      	str	r3, [r7, #24]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	61bb      	str	r3, [r7, #24]
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	e144      	b.n	8004e44 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bba:	2300      	movs	r3, #0
 8004bbc:	617b      	str	r3, [r7, #20]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	617b      	str	r3, [r7, #20]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	699b      	ldr	r3, [r3, #24]
 8004bcc:	617b      	str	r3, [r7, #20]
 8004bce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004bd0:	e138      	b.n	8004e44 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bd6:	2b03      	cmp	r3, #3
 8004bd8:	f200 80f1 	bhi.w	8004dbe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d123      	bne.n	8004c2c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004be6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f000 fc1b 	bl	8005424 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d001      	beq.n	8004bf8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e139      	b.n	8004e6c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	691a      	ldr	r2, [r3, #16]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c02:	b2d2      	uxtb	r2, r2
 8004c04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0a:	1c5a      	adds	r2, r3, #1
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c14:	3b01      	subs	r3, #1
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	3b01      	subs	r3, #1
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c2a:	e10b      	b.n	8004e44 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d14e      	bne.n	8004cd2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c36:	9300      	str	r3, [sp, #0]
 8004c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	4906      	ldr	r1, [pc, #24]	; (8004c58 <HAL_I2C_Mem_Read+0x22c>)
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f000 fa98 	bl	8005174 <I2C_WaitOnFlagUntilTimeout>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d008      	beq.n	8004c5c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e10e      	b.n	8004e6c <HAL_I2C_Mem_Read+0x440>
 8004c4e:	bf00      	nop
 8004c50:	00100002 	.word	0x00100002
 8004c54:	ffff0000 	.word	0xffff0000
 8004c58:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	691a      	ldr	r2, [r3, #16]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c76:	b2d2      	uxtb	r2, r2
 8004c78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	1c5a      	adds	r2, r3, #1
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	3b01      	subs	r3, #1
 8004c98:	b29a      	uxth	r2, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	691a      	ldr	r2, [r3, #16]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca8:	b2d2      	uxtb	r2, r2
 8004caa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb0:	1c5a      	adds	r2, r3, #1
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004cd0:	e0b8      	b.n	8004e44 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd8:	2200      	movs	r2, #0
 8004cda:	4966      	ldr	r1, [pc, #408]	; (8004e74 <HAL_I2C_Mem_Read+0x448>)
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f000 fa49 	bl	8005174 <I2C_WaitOnFlagUntilTimeout>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d001      	beq.n	8004cec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e0bf      	b.n	8004e6c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cfa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	691a      	ldr	r2, [r3, #16]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d06:	b2d2      	uxtb	r2, r2
 8004d08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0e:	1c5a      	adds	r2, r3, #1
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	3b01      	subs	r3, #1
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d34:	2200      	movs	r2, #0
 8004d36:	494f      	ldr	r1, [pc, #316]	; (8004e74 <HAL_I2C_Mem_Read+0x448>)
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f000 fa1b 	bl	8005174 <I2C_WaitOnFlagUntilTimeout>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d001      	beq.n	8004d48 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e091      	b.n	8004e6c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	691a      	ldr	r2, [r3, #16]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d62:	b2d2      	uxtb	r2, r2
 8004d64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6a:	1c5a      	adds	r2, r3, #1
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d74:	3b01      	subs	r3, #1
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	3b01      	subs	r3, #1
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	691a      	ldr	r2, [r3, #16]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d94:	b2d2      	uxtb	r2, r2
 8004d96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9c:	1c5a      	adds	r2, r3, #1
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da6:	3b01      	subs	r3, #1
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	3b01      	subs	r3, #1
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004dbc:	e042      	b.n	8004e44 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dc0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f000 fb2e 	bl	8005424 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d001      	beq.n	8004dd2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e04c      	b.n	8004e6c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	691a      	ldr	r2, [r3, #16]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ddc:	b2d2      	uxtb	r2, r2
 8004dde:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de4:	1c5a      	adds	r2, r3, #1
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dee:	3b01      	subs	r3, #1
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	f003 0304 	and.w	r3, r3, #4
 8004e0e:	2b04      	cmp	r3, #4
 8004e10:	d118      	bne.n	8004e44 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	691a      	ldr	r2, [r3, #16]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1c:	b2d2      	uxtb	r2, r2
 8004e1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e24:	1c5a      	adds	r2, r3, #1
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f47f aec2 	bne.w	8004bd2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2220      	movs	r2, #32
 8004e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e66:	2300      	movs	r3, #0
 8004e68:	e000      	b.n	8004e6c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004e6a:	2302      	movs	r3, #2
  }
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3728      	adds	r7, #40	; 0x28
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	00010004 	.word	0x00010004

08004e78 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b088      	sub	sp, #32
 8004e7c:	af02      	add	r7, sp, #8
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	4608      	mov	r0, r1
 8004e82:	4611      	mov	r1, r2
 8004e84:	461a      	mov	r2, r3
 8004e86:	4603      	mov	r3, r0
 8004e88:	817b      	strh	r3, [r7, #10]
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	813b      	strh	r3, [r7, #8]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ea0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	6a3b      	ldr	r3, [r7, #32]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004eae:	68f8      	ldr	r0, [r7, #12]
 8004eb0:	f000 f960 	bl	8005174 <I2C_WaitOnFlagUntilTimeout>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00d      	beq.n	8004ed6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ec8:	d103      	bne.n	8004ed2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ed0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e05f      	b.n	8004f96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ed6:	897b      	ldrh	r3, [r7, #10]
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	461a      	mov	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ee4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	6a3a      	ldr	r2, [r7, #32]
 8004eea:	492d      	ldr	r1, [pc, #180]	; (8004fa0 <I2C_RequestMemoryWrite+0x128>)
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f000 f998 	bl	8005222 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d001      	beq.n	8004efc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e04c      	b.n	8004f96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004efc:	2300      	movs	r3, #0
 8004efe:	617b      	str	r3, [r7, #20]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	617b      	str	r3, [r7, #20]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	617b      	str	r3, [r7, #20]
 8004f10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f14:	6a39      	ldr	r1, [r7, #32]
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f000 fa02 	bl	8005320 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00d      	beq.n	8004f3e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f26:	2b04      	cmp	r3, #4
 8004f28:	d107      	bne.n	8004f3a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e02b      	b.n	8004f96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f3e:	88fb      	ldrh	r3, [r7, #6]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d105      	bne.n	8004f50 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f44:	893b      	ldrh	r3, [r7, #8]
 8004f46:	b2da      	uxtb	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	611a      	str	r2, [r3, #16]
 8004f4e:	e021      	b.n	8004f94 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f50:	893b      	ldrh	r3, [r7, #8]
 8004f52:	0a1b      	lsrs	r3, r3, #8
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	b2da      	uxtb	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f60:	6a39      	ldr	r1, [r7, #32]
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f000 f9dc 	bl	8005320 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00d      	beq.n	8004f8a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f72:	2b04      	cmp	r3, #4
 8004f74:	d107      	bne.n	8004f86 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e005      	b.n	8004f96 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f8a:	893b      	ldrh	r3, [r7, #8]
 8004f8c:	b2da      	uxtb	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3718      	adds	r7, #24
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	00010002 	.word	0x00010002

08004fa4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b088      	sub	sp, #32
 8004fa8:	af02      	add	r7, sp, #8
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	4608      	mov	r0, r1
 8004fae:	4611      	mov	r1, r2
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	817b      	strh	r3, [r7, #10]
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	813b      	strh	r3, [r7, #8]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004fcc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fdc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe0:	9300      	str	r3, [sp, #0]
 8004fe2:	6a3b      	ldr	r3, [r7, #32]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f000 f8c2 	bl	8005174 <I2C_WaitOnFlagUntilTimeout>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00d      	beq.n	8005012 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005000:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005004:	d103      	bne.n	800500e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f44f 7200 	mov.w	r2, #512	; 0x200
 800500c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e0aa      	b.n	8005168 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005012:	897b      	ldrh	r3, [r7, #10]
 8005014:	b2db      	uxtb	r3, r3
 8005016:	461a      	mov	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005020:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005024:	6a3a      	ldr	r2, [r7, #32]
 8005026:	4952      	ldr	r1, [pc, #328]	; (8005170 <I2C_RequestMemoryRead+0x1cc>)
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f000 f8fa 	bl	8005222 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d001      	beq.n	8005038 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e097      	b.n	8005168 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005038:	2300      	movs	r3, #0
 800503a:	617b      	str	r3, [r7, #20]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	617b      	str	r3, [r7, #20]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	617b      	str	r3, [r7, #20]
 800504c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800504e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005050:	6a39      	ldr	r1, [r7, #32]
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f000 f964 	bl	8005320 <I2C_WaitOnTXEFlagUntilTimeout>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00d      	beq.n	800507a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	2b04      	cmp	r3, #4
 8005064:	d107      	bne.n	8005076 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005074:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e076      	b.n	8005168 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800507a:	88fb      	ldrh	r3, [r7, #6]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d105      	bne.n	800508c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005080:	893b      	ldrh	r3, [r7, #8]
 8005082:	b2da      	uxtb	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	611a      	str	r2, [r3, #16]
 800508a:	e021      	b.n	80050d0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800508c:	893b      	ldrh	r3, [r7, #8]
 800508e:	0a1b      	lsrs	r3, r3, #8
 8005090:	b29b      	uxth	r3, r3
 8005092:	b2da      	uxtb	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800509a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800509c:	6a39      	ldr	r1, [r7, #32]
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f000 f93e 	bl	8005320 <I2C_WaitOnTXEFlagUntilTimeout>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00d      	beq.n	80050c6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ae:	2b04      	cmp	r3, #4
 80050b0:	d107      	bne.n	80050c2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e050      	b.n	8005168 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050c6:	893b      	ldrh	r3, [r7, #8]
 80050c8:	b2da      	uxtb	r2, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050d2:	6a39      	ldr	r1, [r7, #32]
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	f000 f923 	bl	8005320 <I2C_WaitOnTXEFlagUntilTimeout>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00d      	beq.n	80050fc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e4:	2b04      	cmp	r3, #4
 80050e6:	d107      	bne.n	80050f8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050f6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e035      	b.n	8005168 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800510a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800510c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	6a3b      	ldr	r3, [r7, #32]
 8005112:	2200      	movs	r2, #0
 8005114:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f000 f82b 	bl	8005174 <I2C_WaitOnFlagUntilTimeout>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d00d      	beq.n	8005140 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800512e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005132:	d103      	bne.n	800513c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f44f 7200 	mov.w	r2, #512	; 0x200
 800513a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	e013      	b.n	8005168 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005140:	897b      	ldrh	r3, [r7, #10]
 8005142:	b2db      	uxtb	r3, r3
 8005144:	f043 0301 	orr.w	r3, r3, #1
 8005148:	b2da      	uxtb	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005152:	6a3a      	ldr	r2, [r7, #32]
 8005154:	4906      	ldr	r1, [pc, #24]	; (8005170 <I2C_RequestMemoryRead+0x1cc>)
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f000 f863 	bl	8005222 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d001      	beq.n	8005166 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e000      	b.n	8005168 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3718      	adds	r7, #24
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	00010002 	.word	0x00010002

08005174 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	603b      	str	r3, [r7, #0]
 8005180:	4613      	mov	r3, r2
 8005182:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005184:	e025      	b.n	80051d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800518c:	d021      	beq.n	80051d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800518e:	f7fd ff65 	bl	800305c <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	429a      	cmp	r2, r3
 800519c:	d302      	bcc.n	80051a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d116      	bne.n	80051d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2220      	movs	r2, #32
 80051ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	f043 0220 	orr.w	r2, r3, #32
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e023      	b.n	800521a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	0c1b      	lsrs	r3, r3, #16
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d10d      	bne.n	80051f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	43da      	mvns	r2, r3
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	4013      	ands	r3, r2
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	bf0c      	ite	eq
 80051ee:	2301      	moveq	r3, #1
 80051f0:	2300      	movne	r3, #0
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	461a      	mov	r2, r3
 80051f6:	e00c      	b.n	8005212 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	43da      	mvns	r2, r3
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	4013      	ands	r3, r2
 8005204:	b29b      	uxth	r3, r3
 8005206:	2b00      	cmp	r3, #0
 8005208:	bf0c      	ite	eq
 800520a:	2301      	moveq	r3, #1
 800520c:	2300      	movne	r3, #0
 800520e:	b2db      	uxtb	r3, r3
 8005210:	461a      	mov	r2, r3
 8005212:	79fb      	ldrb	r3, [r7, #7]
 8005214:	429a      	cmp	r2, r3
 8005216:	d0b6      	beq.n	8005186 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005222:	b580      	push	{r7, lr}
 8005224:	b084      	sub	sp, #16
 8005226:	af00      	add	r7, sp, #0
 8005228:	60f8      	str	r0, [r7, #12]
 800522a:	60b9      	str	r1, [r7, #8]
 800522c:	607a      	str	r2, [r7, #4]
 800522e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005230:	e051      	b.n	80052d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800523c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005240:	d123      	bne.n	800528a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005250:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800525a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2200      	movs	r2, #0
 8005260:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2220      	movs	r2, #32
 8005266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005276:	f043 0204 	orr.w	r2, r3, #4
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e046      	b.n	8005318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005290:	d021      	beq.n	80052d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005292:	f7fd fee3 	bl	800305c <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d302      	bcc.n	80052a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d116      	bne.n	80052d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2220      	movs	r2, #32
 80052b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c2:	f043 0220 	orr.w	r2, r3, #32
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e020      	b.n	8005318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	0c1b      	lsrs	r3, r3, #16
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d10c      	bne.n	80052fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	43da      	mvns	r2, r3
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	4013      	ands	r3, r2
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	bf14      	ite	ne
 80052f2:	2301      	movne	r3, #1
 80052f4:	2300      	moveq	r3, #0
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	e00b      	b.n	8005312 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	43da      	mvns	r2, r3
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	4013      	ands	r3, r2
 8005306:	b29b      	uxth	r3, r3
 8005308:	2b00      	cmp	r3, #0
 800530a:	bf14      	ite	ne
 800530c:	2301      	movne	r3, #1
 800530e:	2300      	moveq	r3, #0
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2b00      	cmp	r3, #0
 8005314:	d18d      	bne.n	8005232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800532c:	e02d      	b.n	800538a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	f000 f8ce 	bl	80054d0 <I2C_IsAcknowledgeFailed>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d001      	beq.n	800533e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e02d      	b.n	800539a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005344:	d021      	beq.n	800538a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005346:	f7fd fe89 	bl	800305c <HAL_GetTick>
 800534a:	4602      	mov	r2, r0
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	429a      	cmp	r2, r3
 8005354:	d302      	bcc.n	800535c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d116      	bne.n	800538a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2200      	movs	r2, #0
 8005360:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2220      	movs	r2, #32
 8005366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005376:	f043 0220 	orr.w	r2, r3, #32
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e007      	b.n	800539a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	695b      	ldr	r3, [r3, #20]
 8005390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005394:	2b80      	cmp	r3, #128	; 0x80
 8005396:	d1ca      	bne.n	800532e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b084      	sub	sp, #16
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	60f8      	str	r0, [r7, #12]
 80053aa:	60b9      	str	r1, [r7, #8]
 80053ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053ae:	e02d      	b.n	800540c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	f000 f88d 	bl	80054d0 <I2C_IsAcknowledgeFailed>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d001      	beq.n	80053c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e02d      	b.n	800541c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c6:	d021      	beq.n	800540c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053c8:	f7fd fe48 	bl	800305c <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	68ba      	ldr	r2, [r7, #8]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d302      	bcc.n	80053de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d116      	bne.n	800540c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2220      	movs	r2, #32
 80053e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f8:	f043 0220 	orr.w	r2, r3, #32
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e007      	b.n	800541c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	f003 0304 	and.w	r3, r3, #4
 8005416:	2b04      	cmp	r3, #4
 8005418:	d1ca      	bne.n	80053b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005430:	e042      	b.n	80054b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	f003 0310 	and.w	r3, r3, #16
 800543c:	2b10      	cmp	r3, #16
 800543e:	d119      	bne.n	8005474 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f06f 0210 	mvn.w	r2, #16
 8005448:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2220      	movs	r2, #32
 8005454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e029      	b.n	80054c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005474:	f7fd fdf2 	bl	800305c <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	429a      	cmp	r2, r3
 8005482:	d302      	bcc.n	800548a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d116      	bne.n	80054b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2220      	movs	r2, #32
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a4:	f043 0220 	orr.w	r2, r3, #32
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e007      	b.n	80054c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c2:	2b40      	cmp	r3, #64	; 0x40
 80054c4:	d1b5      	bne.n	8005432 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054e6:	d11b      	bne.n	8005520 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2220      	movs	r2, #32
 80054fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550c:	f043 0204 	orr.w	r2, r3, #4
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e000      	b.n	8005522 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	370c      	adds	r7, #12
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
	...

08005530 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e264      	b.n	8005a0c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b00      	cmp	r3, #0
 800554c:	d075      	beq.n	800563a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800554e:	4ba3      	ldr	r3, [pc, #652]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f003 030c 	and.w	r3, r3, #12
 8005556:	2b04      	cmp	r3, #4
 8005558:	d00c      	beq.n	8005574 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800555a:	4ba0      	ldr	r3, [pc, #640]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005562:	2b08      	cmp	r3, #8
 8005564:	d112      	bne.n	800558c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005566:	4b9d      	ldr	r3, [pc, #628]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800556e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005572:	d10b      	bne.n	800558c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005574:	4b99      	ldr	r3, [pc, #612]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d05b      	beq.n	8005638 <HAL_RCC_OscConfig+0x108>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d157      	bne.n	8005638 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e23f      	b.n	8005a0c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005594:	d106      	bne.n	80055a4 <HAL_RCC_OscConfig+0x74>
 8005596:	4b91      	ldr	r3, [pc, #580]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a90      	ldr	r2, [pc, #576]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 800559c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055a0:	6013      	str	r3, [r2, #0]
 80055a2:	e01d      	b.n	80055e0 <HAL_RCC_OscConfig+0xb0>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055ac:	d10c      	bne.n	80055c8 <HAL_RCC_OscConfig+0x98>
 80055ae:	4b8b      	ldr	r3, [pc, #556]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a8a      	ldr	r2, [pc, #552]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 80055b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055b8:	6013      	str	r3, [r2, #0]
 80055ba:	4b88      	ldr	r3, [pc, #544]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a87      	ldr	r2, [pc, #540]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 80055c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055c4:	6013      	str	r3, [r2, #0]
 80055c6:	e00b      	b.n	80055e0 <HAL_RCC_OscConfig+0xb0>
 80055c8:	4b84      	ldr	r3, [pc, #528]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a83      	ldr	r2, [pc, #524]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 80055ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055d2:	6013      	str	r3, [r2, #0]
 80055d4:	4b81      	ldr	r3, [pc, #516]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a80      	ldr	r2, [pc, #512]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 80055da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d013      	beq.n	8005610 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055e8:	f7fd fd38 	bl	800305c <HAL_GetTick>
 80055ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ee:	e008      	b.n	8005602 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055f0:	f7fd fd34 	bl	800305c <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b64      	cmp	r3, #100	; 0x64
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e204      	b.n	8005a0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005602:	4b76      	ldr	r3, [pc, #472]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d0f0      	beq.n	80055f0 <HAL_RCC_OscConfig+0xc0>
 800560e:	e014      	b.n	800563a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005610:	f7fd fd24 	bl	800305c <HAL_GetTick>
 8005614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005616:	e008      	b.n	800562a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005618:	f7fd fd20 	bl	800305c <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	2b64      	cmp	r3, #100	; 0x64
 8005624:	d901      	bls.n	800562a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e1f0      	b.n	8005a0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800562a:	4b6c      	ldr	r3, [pc, #432]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1f0      	bne.n	8005618 <HAL_RCC_OscConfig+0xe8>
 8005636:	e000      	b.n	800563a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	2b00      	cmp	r3, #0
 8005644:	d063      	beq.n	800570e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005646:	4b65      	ldr	r3, [pc, #404]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f003 030c 	and.w	r3, r3, #12
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00b      	beq.n	800566a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005652:	4b62      	ldr	r3, [pc, #392]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800565a:	2b08      	cmp	r3, #8
 800565c:	d11c      	bne.n	8005698 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800565e:	4b5f      	ldr	r3, [pc, #380]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d116      	bne.n	8005698 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800566a:	4b5c      	ldr	r3, [pc, #368]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0302 	and.w	r3, r3, #2
 8005672:	2b00      	cmp	r3, #0
 8005674:	d005      	beq.n	8005682 <HAL_RCC_OscConfig+0x152>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	2b01      	cmp	r3, #1
 800567c:	d001      	beq.n	8005682 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e1c4      	b.n	8005a0c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005682:	4b56      	ldr	r3, [pc, #344]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	00db      	lsls	r3, r3, #3
 8005690:	4952      	ldr	r1, [pc, #328]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 8005692:	4313      	orrs	r3, r2
 8005694:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005696:	e03a      	b.n	800570e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d020      	beq.n	80056e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056a0:	4b4f      	ldr	r3, [pc, #316]	; (80057e0 <HAL_RCC_OscConfig+0x2b0>)
 80056a2:	2201      	movs	r2, #1
 80056a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a6:	f7fd fcd9 	bl	800305c <HAL_GetTick>
 80056aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056ac:	e008      	b.n	80056c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056ae:	f7fd fcd5 	bl	800305c <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d901      	bls.n	80056c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e1a5      	b.n	8005a0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056c0:	4b46      	ldr	r3, [pc, #280]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0302 	and.w	r3, r3, #2
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d0f0      	beq.n	80056ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056cc:	4b43      	ldr	r3, [pc, #268]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	00db      	lsls	r3, r3, #3
 80056da:	4940      	ldr	r1, [pc, #256]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 80056dc:	4313      	orrs	r3, r2
 80056de:	600b      	str	r3, [r1, #0]
 80056e0:	e015      	b.n	800570e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056e2:	4b3f      	ldr	r3, [pc, #252]	; (80057e0 <HAL_RCC_OscConfig+0x2b0>)
 80056e4:	2200      	movs	r2, #0
 80056e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e8:	f7fd fcb8 	bl	800305c <HAL_GetTick>
 80056ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056ee:	e008      	b.n	8005702 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056f0:	f7fd fcb4 	bl	800305c <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d901      	bls.n	8005702 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e184      	b.n	8005a0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005702:	4b36      	ldr	r3, [pc, #216]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0302 	and.w	r3, r3, #2
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1f0      	bne.n	80056f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0308 	and.w	r3, r3, #8
 8005716:	2b00      	cmp	r3, #0
 8005718:	d030      	beq.n	800577c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d016      	beq.n	8005750 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005722:	4b30      	ldr	r3, [pc, #192]	; (80057e4 <HAL_RCC_OscConfig+0x2b4>)
 8005724:	2201      	movs	r2, #1
 8005726:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005728:	f7fd fc98 	bl	800305c <HAL_GetTick>
 800572c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800572e:	e008      	b.n	8005742 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005730:	f7fd fc94 	bl	800305c <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	2b02      	cmp	r3, #2
 800573c:	d901      	bls.n	8005742 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e164      	b.n	8005a0c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005742:	4b26      	ldr	r3, [pc, #152]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 8005744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	2b00      	cmp	r3, #0
 800574c:	d0f0      	beq.n	8005730 <HAL_RCC_OscConfig+0x200>
 800574e:	e015      	b.n	800577c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005750:	4b24      	ldr	r3, [pc, #144]	; (80057e4 <HAL_RCC_OscConfig+0x2b4>)
 8005752:	2200      	movs	r2, #0
 8005754:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005756:	f7fd fc81 	bl	800305c <HAL_GetTick>
 800575a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800575c:	e008      	b.n	8005770 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800575e:	f7fd fc7d 	bl	800305c <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	2b02      	cmp	r3, #2
 800576a:	d901      	bls.n	8005770 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e14d      	b.n	8005a0c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005770:	4b1a      	ldr	r3, [pc, #104]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 8005772:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005774:	f003 0302 	and.w	r3, r3, #2
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1f0      	bne.n	800575e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0304 	and.w	r3, r3, #4
 8005784:	2b00      	cmp	r3, #0
 8005786:	f000 80a0 	beq.w	80058ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800578a:	2300      	movs	r3, #0
 800578c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800578e:	4b13      	ldr	r3, [pc, #76]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 8005790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10f      	bne.n	80057ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800579a:	2300      	movs	r3, #0
 800579c:	60bb      	str	r3, [r7, #8]
 800579e:	4b0f      	ldr	r3, [pc, #60]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 80057a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a2:	4a0e      	ldr	r2, [pc, #56]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 80057a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057a8:	6413      	str	r3, [r2, #64]	; 0x40
 80057aa:	4b0c      	ldr	r3, [pc, #48]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 80057ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057b2:	60bb      	str	r3, [r7, #8]
 80057b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057b6:	2301      	movs	r3, #1
 80057b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057ba:	4b0b      	ldr	r3, [pc, #44]	; (80057e8 <HAL_RCC_OscConfig+0x2b8>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d121      	bne.n	800580a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057c6:	4b08      	ldr	r3, [pc, #32]	; (80057e8 <HAL_RCC_OscConfig+0x2b8>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a07      	ldr	r2, [pc, #28]	; (80057e8 <HAL_RCC_OscConfig+0x2b8>)
 80057cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057d2:	f7fd fc43 	bl	800305c <HAL_GetTick>
 80057d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057d8:	e011      	b.n	80057fe <HAL_RCC_OscConfig+0x2ce>
 80057da:	bf00      	nop
 80057dc:	40023800 	.word	0x40023800
 80057e0:	42470000 	.word	0x42470000
 80057e4:	42470e80 	.word	0x42470e80
 80057e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057ec:	f7fd fc36 	bl	800305c <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d901      	bls.n	80057fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e106      	b.n	8005a0c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057fe:	4b85      	ldr	r3, [pc, #532]	; (8005a14 <HAL_RCC_OscConfig+0x4e4>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005806:	2b00      	cmp	r3, #0
 8005808:	d0f0      	beq.n	80057ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	2b01      	cmp	r3, #1
 8005810:	d106      	bne.n	8005820 <HAL_RCC_OscConfig+0x2f0>
 8005812:	4b81      	ldr	r3, [pc, #516]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 8005814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005816:	4a80      	ldr	r2, [pc, #512]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 8005818:	f043 0301 	orr.w	r3, r3, #1
 800581c:	6713      	str	r3, [r2, #112]	; 0x70
 800581e:	e01c      	b.n	800585a <HAL_RCC_OscConfig+0x32a>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	2b05      	cmp	r3, #5
 8005826:	d10c      	bne.n	8005842 <HAL_RCC_OscConfig+0x312>
 8005828:	4b7b      	ldr	r3, [pc, #492]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 800582a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800582c:	4a7a      	ldr	r2, [pc, #488]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 800582e:	f043 0304 	orr.w	r3, r3, #4
 8005832:	6713      	str	r3, [r2, #112]	; 0x70
 8005834:	4b78      	ldr	r3, [pc, #480]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 8005836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005838:	4a77      	ldr	r2, [pc, #476]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 800583a:	f043 0301 	orr.w	r3, r3, #1
 800583e:	6713      	str	r3, [r2, #112]	; 0x70
 8005840:	e00b      	b.n	800585a <HAL_RCC_OscConfig+0x32a>
 8005842:	4b75      	ldr	r3, [pc, #468]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 8005844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005846:	4a74      	ldr	r2, [pc, #464]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 8005848:	f023 0301 	bic.w	r3, r3, #1
 800584c:	6713      	str	r3, [r2, #112]	; 0x70
 800584e:	4b72      	ldr	r3, [pc, #456]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 8005850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005852:	4a71      	ldr	r2, [pc, #452]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 8005854:	f023 0304 	bic.w	r3, r3, #4
 8005858:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d015      	beq.n	800588e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005862:	f7fd fbfb 	bl	800305c <HAL_GetTick>
 8005866:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005868:	e00a      	b.n	8005880 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800586a:	f7fd fbf7 	bl	800305c <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	f241 3288 	movw	r2, #5000	; 0x1388
 8005878:	4293      	cmp	r3, r2
 800587a:	d901      	bls.n	8005880 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e0c5      	b.n	8005a0c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005880:	4b65      	ldr	r3, [pc, #404]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 8005882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005884:	f003 0302 	and.w	r3, r3, #2
 8005888:	2b00      	cmp	r3, #0
 800588a:	d0ee      	beq.n	800586a <HAL_RCC_OscConfig+0x33a>
 800588c:	e014      	b.n	80058b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800588e:	f7fd fbe5 	bl	800305c <HAL_GetTick>
 8005892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005894:	e00a      	b.n	80058ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005896:	f7fd fbe1 	bl	800305c <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d901      	bls.n	80058ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e0af      	b.n	8005a0c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058ac:	4b5a      	ldr	r3, [pc, #360]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 80058ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b0:	f003 0302 	and.w	r3, r3, #2
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1ee      	bne.n	8005896 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058b8:	7dfb      	ldrb	r3, [r7, #23]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d105      	bne.n	80058ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058be:	4b56      	ldr	r3, [pc, #344]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 80058c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c2:	4a55      	ldr	r2, [pc, #340]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 80058c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f000 809b 	beq.w	8005a0a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80058d4:	4b50      	ldr	r3, [pc, #320]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f003 030c 	and.w	r3, r3, #12
 80058dc:	2b08      	cmp	r3, #8
 80058de:	d05c      	beq.n	800599a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	699b      	ldr	r3, [r3, #24]
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d141      	bne.n	800596c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058e8:	4b4c      	ldr	r3, [pc, #304]	; (8005a1c <HAL_RCC_OscConfig+0x4ec>)
 80058ea:	2200      	movs	r2, #0
 80058ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ee:	f7fd fbb5 	bl	800305c <HAL_GetTick>
 80058f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058f4:	e008      	b.n	8005908 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058f6:	f7fd fbb1 	bl	800305c <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	2b02      	cmp	r3, #2
 8005902:	d901      	bls.n	8005908 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e081      	b.n	8005a0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005908:	4b43      	ldr	r3, [pc, #268]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005910:	2b00      	cmp	r3, #0
 8005912:	d1f0      	bne.n	80058f6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	69da      	ldr	r2, [r3, #28]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a1b      	ldr	r3, [r3, #32]
 800591c:	431a      	orrs	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005922:	019b      	lsls	r3, r3, #6
 8005924:	431a      	orrs	r2, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800592a:	085b      	lsrs	r3, r3, #1
 800592c:	3b01      	subs	r3, #1
 800592e:	041b      	lsls	r3, r3, #16
 8005930:	431a      	orrs	r2, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005936:	061b      	lsls	r3, r3, #24
 8005938:	4937      	ldr	r1, [pc, #220]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 800593a:	4313      	orrs	r3, r2
 800593c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800593e:	4b37      	ldr	r3, [pc, #220]	; (8005a1c <HAL_RCC_OscConfig+0x4ec>)
 8005940:	2201      	movs	r2, #1
 8005942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005944:	f7fd fb8a 	bl	800305c <HAL_GetTick>
 8005948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800594a:	e008      	b.n	800595e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800594c:	f7fd fb86 	bl	800305c <HAL_GetTick>
 8005950:	4602      	mov	r2, r0
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	2b02      	cmp	r3, #2
 8005958:	d901      	bls.n	800595e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e056      	b.n	8005a0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800595e:	4b2e      	ldr	r3, [pc, #184]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d0f0      	beq.n	800594c <HAL_RCC_OscConfig+0x41c>
 800596a:	e04e      	b.n	8005a0a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800596c:	4b2b      	ldr	r3, [pc, #172]	; (8005a1c <HAL_RCC_OscConfig+0x4ec>)
 800596e:	2200      	movs	r2, #0
 8005970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005972:	f7fd fb73 	bl	800305c <HAL_GetTick>
 8005976:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005978:	e008      	b.n	800598c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800597a:	f7fd fb6f 	bl	800305c <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	2b02      	cmp	r3, #2
 8005986:	d901      	bls.n	800598c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e03f      	b.n	8005a0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800598c:	4b22      	ldr	r3, [pc, #136]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1f0      	bne.n	800597a <HAL_RCC_OscConfig+0x44a>
 8005998:	e037      	b.n	8005a0a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d101      	bne.n	80059a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e032      	b.n	8005a0c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80059a6:	4b1c      	ldr	r3, [pc, #112]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d028      	beq.n	8005a06 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059be:	429a      	cmp	r2, r3
 80059c0:	d121      	bne.n	8005a06 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d11a      	bne.n	8005a06 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80059d6:	4013      	ands	r3, r2
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80059dc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059de:	4293      	cmp	r3, r2
 80059e0:	d111      	bne.n	8005a06 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ec:	085b      	lsrs	r3, r3, #1
 80059ee:	3b01      	subs	r3, #1
 80059f0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d107      	bne.n	8005a06 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a00:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d001      	beq.n	8005a0a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e000      	b.n	8005a0c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3718      	adds	r7, #24
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	40007000 	.word	0x40007000
 8005a18:	40023800 	.word	0x40023800
 8005a1c:	42470060 	.word	0x42470060

08005a20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d101      	bne.n	8005a34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e0cc      	b.n	8005bce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a34:	4b68      	ldr	r3, [pc, #416]	; (8005bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0307 	and.w	r3, r3, #7
 8005a3c:	683a      	ldr	r2, [r7, #0]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d90c      	bls.n	8005a5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a42:	4b65      	ldr	r3, [pc, #404]	; (8005bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a44:	683a      	ldr	r2, [r7, #0]
 8005a46:	b2d2      	uxtb	r2, r2
 8005a48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a4a:	4b63      	ldr	r3, [pc, #396]	; (8005bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0307 	and.w	r3, r3, #7
 8005a52:	683a      	ldr	r2, [r7, #0]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d001      	beq.n	8005a5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e0b8      	b.n	8005bce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0302 	and.w	r3, r3, #2
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d020      	beq.n	8005aaa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0304 	and.w	r3, r3, #4
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d005      	beq.n	8005a80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a74:	4b59      	ldr	r3, [pc, #356]	; (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	4a58      	ldr	r2, [pc, #352]	; (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005a7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0308 	and.w	r3, r3, #8
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d005      	beq.n	8005a98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a8c:	4b53      	ldr	r3, [pc, #332]	; (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	4a52      	ldr	r2, [pc, #328]	; (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005a92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a98:	4b50      	ldr	r3, [pc, #320]	; (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	494d      	ldr	r1, [pc, #308]	; (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d044      	beq.n	8005b40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d107      	bne.n	8005ace <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005abe:	4b47      	ldr	r3, [pc, #284]	; (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d119      	bne.n	8005afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e07f      	b.n	8005bce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d003      	beq.n	8005ade <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ada:	2b03      	cmp	r3, #3
 8005adc:	d107      	bne.n	8005aee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ade:	4b3f      	ldr	r3, [pc, #252]	; (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d109      	bne.n	8005afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e06f      	b.n	8005bce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aee:	4b3b      	ldr	r3, [pc, #236]	; (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0302 	and.w	r3, r3, #2
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d101      	bne.n	8005afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e067      	b.n	8005bce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005afe:	4b37      	ldr	r3, [pc, #220]	; (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	f023 0203 	bic.w	r2, r3, #3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	4934      	ldr	r1, [pc, #208]	; (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b10:	f7fd faa4 	bl	800305c <HAL_GetTick>
 8005b14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b16:	e00a      	b.n	8005b2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b18:	f7fd faa0 	bl	800305c <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d901      	bls.n	8005b2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e04f      	b.n	8005bce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b2e:	4b2b      	ldr	r3, [pc, #172]	; (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f003 020c 	and.w	r2, r3, #12
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d1eb      	bne.n	8005b18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b40:	4b25      	ldr	r3, [pc, #148]	; (8005bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0307 	and.w	r3, r3, #7
 8005b48:	683a      	ldr	r2, [r7, #0]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d20c      	bcs.n	8005b68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b4e:	4b22      	ldr	r3, [pc, #136]	; (8005bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b50:	683a      	ldr	r2, [r7, #0]
 8005b52:	b2d2      	uxtb	r2, r2
 8005b54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b56:	4b20      	ldr	r3, [pc, #128]	; (8005bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0307 	and.w	r3, r3, #7
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d001      	beq.n	8005b68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e032      	b.n	8005bce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0304 	and.w	r3, r3, #4
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d008      	beq.n	8005b86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b74:	4b19      	ldr	r3, [pc, #100]	; (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	4916      	ldr	r1, [pc, #88]	; (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005b82:	4313      	orrs	r3, r2
 8005b84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0308 	and.w	r3, r3, #8
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d009      	beq.n	8005ba6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b92:	4b12      	ldr	r3, [pc, #72]	; (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	00db      	lsls	r3, r3, #3
 8005ba0:	490e      	ldr	r1, [pc, #56]	; (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ba6:	f000 f821 	bl	8005bec <HAL_RCC_GetSysClockFreq>
 8005baa:	4602      	mov	r2, r0
 8005bac:	4b0b      	ldr	r3, [pc, #44]	; (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	091b      	lsrs	r3, r3, #4
 8005bb2:	f003 030f 	and.w	r3, r3, #15
 8005bb6:	490a      	ldr	r1, [pc, #40]	; (8005be0 <HAL_RCC_ClockConfig+0x1c0>)
 8005bb8:	5ccb      	ldrb	r3, [r1, r3]
 8005bba:	fa22 f303 	lsr.w	r3, r2, r3
 8005bbe:	4a09      	ldr	r2, [pc, #36]	; (8005be4 <HAL_RCC_ClockConfig+0x1c4>)
 8005bc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005bc2:	4b09      	ldr	r3, [pc, #36]	; (8005be8 <HAL_RCC_ClockConfig+0x1c8>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f7fd fa04 	bl	8002fd4 <HAL_InitTick>

  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	40023c00 	.word	0x40023c00
 8005bdc:	40023800 	.word	0x40023800
 8005be0:	0800b040 	.word	0x0800b040
 8005be4:	20000000 	.word	0x20000000
 8005be8:	20000004 	.word	0x20000004

08005bec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bec:	b5b0      	push	{r4, r5, r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	6079      	str	r1, [r7, #4]
 8005bf6:	2100      	movs	r1, #0
 8005bf8:	60f9      	str	r1, [r7, #12]
 8005bfa:	2100      	movs	r1, #0
 8005bfc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005bfe:	2100      	movs	r1, #0
 8005c00:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c02:	4952      	ldr	r1, [pc, #328]	; (8005d4c <HAL_RCC_GetSysClockFreq+0x160>)
 8005c04:	6889      	ldr	r1, [r1, #8]
 8005c06:	f001 010c 	and.w	r1, r1, #12
 8005c0a:	2908      	cmp	r1, #8
 8005c0c:	d00d      	beq.n	8005c2a <HAL_RCC_GetSysClockFreq+0x3e>
 8005c0e:	2908      	cmp	r1, #8
 8005c10:	f200 8094 	bhi.w	8005d3c <HAL_RCC_GetSysClockFreq+0x150>
 8005c14:	2900      	cmp	r1, #0
 8005c16:	d002      	beq.n	8005c1e <HAL_RCC_GetSysClockFreq+0x32>
 8005c18:	2904      	cmp	r1, #4
 8005c1a:	d003      	beq.n	8005c24 <HAL_RCC_GetSysClockFreq+0x38>
 8005c1c:	e08e      	b.n	8005d3c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c1e:	4b4c      	ldr	r3, [pc, #304]	; (8005d50 <HAL_RCC_GetSysClockFreq+0x164>)
 8005c20:	60bb      	str	r3, [r7, #8]
       break;
 8005c22:	e08e      	b.n	8005d42 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c24:	4b4b      	ldr	r3, [pc, #300]	; (8005d54 <HAL_RCC_GetSysClockFreq+0x168>)
 8005c26:	60bb      	str	r3, [r7, #8]
      break;
 8005c28:	e08b      	b.n	8005d42 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c2a:	4948      	ldr	r1, [pc, #288]	; (8005d4c <HAL_RCC_GetSysClockFreq+0x160>)
 8005c2c:	6849      	ldr	r1, [r1, #4]
 8005c2e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005c32:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c34:	4945      	ldr	r1, [pc, #276]	; (8005d4c <HAL_RCC_GetSysClockFreq+0x160>)
 8005c36:	6849      	ldr	r1, [r1, #4]
 8005c38:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005c3c:	2900      	cmp	r1, #0
 8005c3e:	d024      	beq.n	8005c8a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c40:	4942      	ldr	r1, [pc, #264]	; (8005d4c <HAL_RCC_GetSysClockFreq+0x160>)
 8005c42:	6849      	ldr	r1, [r1, #4]
 8005c44:	0989      	lsrs	r1, r1, #6
 8005c46:	4608      	mov	r0, r1
 8005c48:	f04f 0100 	mov.w	r1, #0
 8005c4c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005c50:	f04f 0500 	mov.w	r5, #0
 8005c54:	ea00 0204 	and.w	r2, r0, r4
 8005c58:	ea01 0305 	and.w	r3, r1, r5
 8005c5c:	493d      	ldr	r1, [pc, #244]	; (8005d54 <HAL_RCC_GetSysClockFreq+0x168>)
 8005c5e:	fb01 f003 	mul.w	r0, r1, r3
 8005c62:	2100      	movs	r1, #0
 8005c64:	fb01 f102 	mul.w	r1, r1, r2
 8005c68:	1844      	adds	r4, r0, r1
 8005c6a:	493a      	ldr	r1, [pc, #232]	; (8005d54 <HAL_RCC_GetSysClockFreq+0x168>)
 8005c6c:	fba2 0101 	umull	r0, r1, r2, r1
 8005c70:	1863      	adds	r3, r4, r1
 8005c72:	4619      	mov	r1, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	461a      	mov	r2, r3
 8005c78:	f04f 0300 	mov.w	r3, #0
 8005c7c:	f7fa ffec 	bl	8000c58 <__aeabi_uldivmod>
 8005c80:	4602      	mov	r2, r0
 8005c82:	460b      	mov	r3, r1
 8005c84:	4613      	mov	r3, r2
 8005c86:	60fb      	str	r3, [r7, #12]
 8005c88:	e04a      	b.n	8005d20 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c8a:	4b30      	ldr	r3, [pc, #192]	; (8005d4c <HAL_RCC_GetSysClockFreq+0x160>)
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	099b      	lsrs	r3, r3, #6
 8005c90:	461a      	mov	r2, r3
 8005c92:	f04f 0300 	mov.w	r3, #0
 8005c96:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005c9a:	f04f 0100 	mov.w	r1, #0
 8005c9e:	ea02 0400 	and.w	r4, r2, r0
 8005ca2:	ea03 0501 	and.w	r5, r3, r1
 8005ca6:	4620      	mov	r0, r4
 8005ca8:	4629      	mov	r1, r5
 8005caa:	f04f 0200 	mov.w	r2, #0
 8005cae:	f04f 0300 	mov.w	r3, #0
 8005cb2:	014b      	lsls	r3, r1, #5
 8005cb4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005cb8:	0142      	lsls	r2, r0, #5
 8005cba:	4610      	mov	r0, r2
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	1b00      	subs	r0, r0, r4
 8005cc0:	eb61 0105 	sbc.w	r1, r1, r5
 8005cc4:	f04f 0200 	mov.w	r2, #0
 8005cc8:	f04f 0300 	mov.w	r3, #0
 8005ccc:	018b      	lsls	r3, r1, #6
 8005cce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005cd2:	0182      	lsls	r2, r0, #6
 8005cd4:	1a12      	subs	r2, r2, r0
 8005cd6:	eb63 0301 	sbc.w	r3, r3, r1
 8005cda:	f04f 0000 	mov.w	r0, #0
 8005cde:	f04f 0100 	mov.w	r1, #0
 8005ce2:	00d9      	lsls	r1, r3, #3
 8005ce4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ce8:	00d0      	lsls	r0, r2, #3
 8005cea:	4602      	mov	r2, r0
 8005cec:	460b      	mov	r3, r1
 8005cee:	1912      	adds	r2, r2, r4
 8005cf0:	eb45 0303 	adc.w	r3, r5, r3
 8005cf4:	f04f 0000 	mov.w	r0, #0
 8005cf8:	f04f 0100 	mov.w	r1, #0
 8005cfc:	0299      	lsls	r1, r3, #10
 8005cfe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005d02:	0290      	lsls	r0, r2, #10
 8005d04:	4602      	mov	r2, r0
 8005d06:	460b      	mov	r3, r1
 8005d08:	4610      	mov	r0, r2
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	461a      	mov	r2, r3
 8005d10:	f04f 0300 	mov.w	r3, #0
 8005d14:	f7fa ffa0 	bl	8000c58 <__aeabi_uldivmod>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d20:	4b0a      	ldr	r3, [pc, #40]	; (8005d4c <HAL_RCC_GetSysClockFreq+0x160>)
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	0c1b      	lsrs	r3, r3, #16
 8005d26:	f003 0303 	and.w	r3, r3, #3
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	005b      	lsls	r3, r3, #1
 8005d2e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d38:	60bb      	str	r3, [r7, #8]
      break;
 8005d3a:	e002      	b.n	8005d42 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d3c:	4b04      	ldr	r3, [pc, #16]	; (8005d50 <HAL_RCC_GetSysClockFreq+0x164>)
 8005d3e:	60bb      	str	r3, [r7, #8]
      break;
 8005d40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d42:	68bb      	ldr	r3, [r7, #8]
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3710      	adds	r7, #16
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bdb0      	pop	{r4, r5, r7, pc}
 8005d4c:	40023800 	.word	0x40023800
 8005d50:	00f42400 	.word	0x00f42400
 8005d54:	017d7840 	.word	0x017d7840

08005d58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d5c:	4b03      	ldr	r3, [pc, #12]	; (8005d6c <HAL_RCC_GetHCLKFreq+0x14>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	20000000 	.word	0x20000000

08005d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d74:	f7ff fff0 	bl	8005d58 <HAL_RCC_GetHCLKFreq>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	4b05      	ldr	r3, [pc, #20]	; (8005d90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	0a9b      	lsrs	r3, r3, #10
 8005d80:	f003 0307 	and.w	r3, r3, #7
 8005d84:	4903      	ldr	r1, [pc, #12]	; (8005d94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d86:	5ccb      	ldrb	r3, [r1, r3]
 8005d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	40023800 	.word	0x40023800
 8005d94:	0800b050 	.word	0x0800b050

08005d98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d9c:	f7ff ffdc 	bl	8005d58 <HAL_RCC_GetHCLKFreq>
 8005da0:	4602      	mov	r2, r0
 8005da2:	4b05      	ldr	r3, [pc, #20]	; (8005db8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	0b5b      	lsrs	r3, r3, #13
 8005da8:	f003 0307 	and.w	r3, r3, #7
 8005dac:	4903      	ldr	r1, [pc, #12]	; (8005dbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005dae:	5ccb      	ldrb	r3, [r1, r3]
 8005db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	40023800 	.word	0x40023800
 8005dbc:	0800b050 	.word	0x0800b050

08005dc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d101      	bne.n	8005dd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e041      	b.n	8005e56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d106      	bne.n	8005dec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f7fc fec0 	bl	8002b6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2202      	movs	r2, #2
 8005df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	3304      	adds	r3, #4
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	4610      	mov	r0, r2
 8005e00:	f000 fac0 	bl	8006384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b082      	sub	sp, #8
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d101      	bne.n	8005e70 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e041      	b.n	8005ef4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d106      	bne.n	8005e8a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 f839 	bl	8005efc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2202      	movs	r2, #2
 8005e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	3304      	adds	r3, #4
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	4610      	mov	r0, r2
 8005e9e:	f000 fa71 	bl	8006384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2201      	movs	r2, #1
 8005eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3708      	adds	r7, #8
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f04:	bf00      	nop
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d109      	bne.n	8005f34 <HAL_TIM_PWM_Start+0x24>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	bf14      	ite	ne
 8005f2c:	2301      	movne	r3, #1
 8005f2e:	2300      	moveq	r3, #0
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	e022      	b.n	8005f7a <HAL_TIM_PWM_Start+0x6a>
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	2b04      	cmp	r3, #4
 8005f38:	d109      	bne.n	8005f4e <HAL_TIM_PWM_Start+0x3e>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	bf14      	ite	ne
 8005f46:	2301      	movne	r3, #1
 8005f48:	2300      	moveq	r3, #0
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	e015      	b.n	8005f7a <HAL_TIM_PWM_Start+0x6a>
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	2b08      	cmp	r3, #8
 8005f52:	d109      	bne.n	8005f68 <HAL_TIM_PWM_Start+0x58>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	bf14      	ite	ne
 8005f60:	2301      	movne	r3, #1
 8005f62:	2300      	moveq	r3, #0
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	e008      	b.n	8005f7a <HAL_TIM_PWM_Start+0x6a>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	bf14      	ite	ne
 8005f74:	2301      	movne	r3, #1
 8005f76:	2300      	moveq	r3, #0
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d001      	beq.n	8005f82 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e068      	b.n	8006054 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d104      	bne.n	8005f92 <HAL_TIM_PWM_Start+0x82>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2202      	movs	r2, #2
 8005f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f90:	e013      	b.n	8005fba <HAL_TIM_PWM_Start+0xaa>
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	2b04      	cmp	r3, #4
 8005f96:	d104      	bne.n	8005fa2 <HAL_TIM_PWM_Start+0x92>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2202      	movs	r2, #2
 8005f9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fa0:	e00b      	b.n	8005fba <HAL_TIM_PWM_Start+0xaa>
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	2b08      	cmp	r3, #8
 8005fa6:	d104      	bne.n	8005fb2 <HAL_TIM_PWM_Start+0xa2>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2202      	movs	r2, #2
 8005fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fb0:	e003      	b.n	8005fba <HAL_TIM_PWM_Start+0xaa>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2202      	movs	r2, #2
 8005fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	6839      	ldr	r1, [r7, #0]
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f000 fc84 	bl	80068d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a23      	ldr	r2, [pc, #140]	; (800605c <HAL_TIM_PWM_Start+0x14c>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d107      	bne.n	8005fe2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005fe0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a1d      	ldr	r2, [pc, #116]	; (800605c <HAL_TIM_PWM_Start+0x14c>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d018      	beq.n	800601e <HAL_TIM_PWM_Start+0x10e>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ff4:	d013      	beq.n	800601e <HAL_TIM_PWM_Start+0x10e>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a19      	ldr	r2, [pc, #100]	; (8006060 <HAL_TIM_PWM_Start+0x150>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d00e      	beq.n	800601e <HAL_TIM_PWM_Start+0x10e>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a17      	ldr	r2, [pc, #92]	; (8006064 <HAL_TIM_PWM_Start+0x154>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d009      	beq.n	800601e <HAL_TIM_PWM_Start+0x10e>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a16      	ldr	r2, [pc, #88]	; (8006068 <HAL_TIM_PWM_Start+0x158>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d004      	beq.n	800601e <HAL_TIM_PWM_Start+0x10e>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a14      	ldr	r2, [pc, #80]	; (800606c <HAL_TIM_PWM_Start+0x15c>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d111      	bne.n	8006042 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	f003 0307 	and.w	r3, r3, #7
 8006028:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2b06      	cmp	r3, #6
 800602e:	d010      	beq.n	8006052 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f042 0201 	orr.w	r2, r2, #1
 800603e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006040:	e007      	b.n	8006052 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f042 0201 	orr.w	r2, r2, #1
 8006050:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3710      	adds	r7, #16
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	40010000 	.word	0x40010000
 8006060:	40000400 	.word	0x40000400
 8006064:	40000800 	.word	0x40000800
 8006068:	40000c00 	.word	0x40000c00
 800606c:	40014000 	.word	0x40014000

08006070 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800607c:	2300      	movs	r3, #0
 800607e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006086:	2b01      	cmp	r3, #1
 8006088:	d101      	bne.n	800608e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800608a:	2302      	movs	r3, #2
 800608c:	e0ae      	b.n	80061ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2b0c      	cmp	r3, #12
 800609a:	f200 809f 	bhi.w	80061dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800609e:	a201      	add	r2, pc, #4	; (adr r2, 80060a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80060a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a4:	080060d9 	.word	0x080060d9
 80060a8:	080061dd 	.word	0x080061dd
 80060ac:	080061dd 	.word	0x080061dd
 80060b0:	080061dd 	.word	0x080061dd
 80060b4:	08006119 	.word	0x08006119
 80060b8:	080061dd 	.word	0x080061dd
 80060bc:	080061dd 	.word	0x080061dd
 80060c0:	080061dd 	.word	0x080061dd
 80060c4:	0800615b 	.word	0x0800615b
 80060c8:	080061dd 	.word	0x080061dd
 80060cc:	080061dd 	.word	0x080061dd
 80060d0:	080061dd 	.word	0x080061dd
 80060d4:	0800619b 	.word	0x0800619b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68b9      	ldr	r1, [r7, #8]
 80060de:	4618      	mov	r0, r3
 80060e0:	f000 f9d0 	bl	8006484 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	699a      	ldr	r2, [r3, #24]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f042 0208 	orr.w	r2, r2, #8
 80060f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	699a      	ldr	r2, [r3, #24]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f022 0204 	bic.w	r2, r2, #4
 8006102:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6999      	ldr	r1, [r3, #24]
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	691a      	ldr	r2, [r3, #16]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	430a      	orrs	r2, r1
 8006114:	619a      	str	r2, [r3, #24]
      break;
 8006116:	e064      	b.n	80061e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68b9      	ldr	r1, [r7, #8]
 800611e:	4618      	mov	r0, r3
 8006120:	f000 fa16 	bl	8006550 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	699a      	ldr	r2, [r3, #24]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006132:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	699a      	ldr	r2, [r3, #24]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006142:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	6999      	ldr	r1, [r3, #24]
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	021a      	lsls	r2, r3, #8
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	430a      	orrs	r2, r1
 8006156:	619a      	str	r2, [r3, #24]
      break;
 8006158:	e043      	b.n	80061e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68b9      	ldr	r1, [r7, #8]
 8006160:	4618      	mov	r0, r3
 8006162:	f000 fa61 	bl	8006628 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	69da      	ldr	r2, [r3, #28]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f042 0208 	orr.w	r2, r2, #8
 8006174:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	69da      	ldr	r2, [r3, #28]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f022 0204 	bic.w	r2, r2, #4
 8006184:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	69d9      	ldr	r1, [r3, #28]
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	691a      	ldr	r2, [r3, #16]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	430a      	orrs	r2, r1
 8006196:	61da      	str	r2, [r3, #28]
      break;
 8006198:	e023      	b.n	80061e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68b9      	ldr	r1, [r7, #8]
 80061a0:	4618      	mov	r0, r3
 80061a2:	f000 faab 	bl	80066fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	69da      	ldr	r2, [r3, #28]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	69da      	ldr	r2, [r3, #28]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	69d9      	ldr	r1, [r3, #28]
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	021a      	lsls	r2, r3, #8
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	430a      	orrs	r2, r1
 80061d8:	61da      	str	r2, [r3, #28]
      break;
 80061da:	e002      	b.n	80061e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	75fb      	strb	r3, [r7, #23]
      break;
 80061e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80061ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3718      	adds	r7, #24
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061fe:	2300      	movs	r3, #0
 8006200:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006208:	2b01      	cmp	r3, #1
 800620a:	d101      	bne.n	8006210 <HAL_TIM_ConfigClockSource+0x1c>
 800620c:	2302      	movs	r3, #2
 800620e:	e0b4      	b.n	800637a <HAL_TIM_ConfigClockSource+0x186>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2202      	movs	r2, #2
 800621c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800622e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006236:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68ba      	ldr	r2, [r7, #8]
 800623e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006248:	d03e      	beq.n	80062c8 <HAL_TIM_ConfigClockSource+0xd4>
 800624a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800624e:	f200 8087 	bhi.w	8006360 <HAL_TIM_ConfigClockSource+0x16c>
 8006252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006256:	f000 8086 	beq.w	8006366 <HAL_TIM_ConfigClockSource+0x172>
 800625a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800625e:	d87f      	bhi.n	8006360 <HAL_TIM_ConfigClockSource+0x16c>
 8006260:	2b70      	cmp	r3, #112	; 0x70
 8006262:	d01a      	beq.n	800629a <HAL_TIM_ConfigClockSource+0xa6>
 8006264:	2b70      	cmp	r3, #112	; 0x70
 8006266:	d87b      	bhi.n	8006360 <HAL_TIM_ConfigClockSource+0x16c>
 8006268:	2b60      	cmp	r3, #96	; 0x60
 800626a:	d050      	beq.n	800630e <HAL_TIM_ConfigClockSource+0x11a>
 800626c:	2b60      	cmp	r3, #96	; 0x60
 800626e:	d877      	bhi.n	8006360 <HAL_TIM_ConfigClockSource+0x16c>
 8006270:	2b50      	cmp	r3, #80	; 0x50
 8006272:	d03c      	beq.n	80062ee <HAL_TIM_ConfigClockSource+0xfa>
 8006274:	2b50      	cmp	r3, #80	; 0x50
 8006276:	d873      	bhi.n	8006360 <HAL_TIM_ConfigClockSource+0x16c>
 8006278:	2b40      	cmp	r3, #64	; 0x40
 800627a:	d058      	beq.n	800632e <HAL_TIM_ConfigClockSource+0x13a>
 800627c:	2b40      	cmp	r3, #64	; 0x40
 800627e:	d86f      	bhi.n	8006360 <HAL_TIM_ConfigClockSource+0x16c>
 8006280:	2b30      	cmp	r3, #48	; 0x30
 8006282:	d064      	beq.n	800634e <HAL_TIM_ConfigClockSource+0x15a>
 8006284:	2b30      	cmp	r3, #48	; 0x30
 8006286:	d86b      	bhi.n	8006360 <HAL_TIM_ConfigClockSource+0x16c>
 8006288:	2b20      	cmp	r3, #32
 800628a:	d060      	beq.n	800634e <HAL_TIM_ConfigClockSource+0x15a>
 800628c:	2b20      	cmp	r3, #32
 800628e:	d867      	bhi.n	8006360 <HAL_TIM_ConfigClockSource+0x16c>
 8006290:	2b00      	cmp	r3, #0
 8006292:	d05c      	beq.n	800634e <HAL_TIM_ConfigClockSource+0x15a>
 8006294:	2b10      	cmp	r3, #16
 8006296:	d05a      	beq.n	800634e <HAL_TIM_ConfigClockSource+0x15a>
 8006298:	e062      	b.n	8006360 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6818      	ldr	r0, [r3, #0]
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	6899      	ldr	r1, [r3, #8]
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	685a      	ldr	r2, [r3, #4]
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	f000 faf1 	bl	8006890 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80062bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68ba      	ldr	r2, [r7, #8]
 80062c4:	609a      	str	r2, [r3, #8]
      break;
 80062c6:	e04f      	b.n	8006368 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6818      	ldr	r0, [r3, #0]
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	6899      	ldr	r1, [r3, #8]
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	685a      	ldr	r2, [r3, #4]
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	f000 fada 	bl	8006890 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	689a      	ldr	r2, [r3, #8]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062ea:	609a      	str	r2, [r3, #8]
      break;
 80062ec:	e03c      	b.n	8006368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6818      	ldr	r0, [r3, #0]
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	6859      	ldr	r1, [r3, #4]
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	461a      	mov	r2, r3
 80062fc:	f000 fa4e 	bl	800679c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2150      	movs	r1, #80	; 0x50
 8006306:	4618      	mov	r0, r3
 8006308:	f000 faa7 	bl	800685a <TIM_ITRx_SetConfig>
      break;
 800630c:	e02c      	b.n	8006368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6818      	ldr	r0, [r3, #0]
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	6859      	ldr	r1, [r3, #4]
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	461a      	mov	r2, r3
 800631c:	f000 fa6d 	bl	80067fa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2160      	movs	r1, #96	; 0x60
 8006326:	4618      	mov	r0, r3
 8006328:	f000 fa97 	bl	800685a <TIM_ITRx_SetConfig>
      break;
 800632c:	e01c      	b.n	8006368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6818      	ldr	r0, [r3, #0]
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	6859      	ldr	r1, [r3, #4]
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	461a      	mov	r2, r3
 800633c:	f000 fa2e 	bl	800679c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2140      	movs	r1, #64	; 0x40
 8006346:	4618      	mov	r0, r3
 8006348:	f000 fa87 	bl	800685a <TIM_ITRx_SetConfig>
      break;
 800634c:	e00c      	b.n	8006368 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4619      	mov	r1, r3
 8006358:	4610      	mov	r0, r2
 800635a:	f000 fa7e 	bl	800685a <TIM_ITRx_SetConfig>
      break;
 800635e:	e003      	b.n	8006368 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	73fb      	strb	r3, [r7, #15]
      break;
 8006364:	e000      	b.n	8006368 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006366:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006378:	7bfb      	ldrb	r3, [r7, #15]
}
 800637a:	4618      	mov	r0, r3
 800637c:	3710      	adds	r7, #16
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
	...

08006384 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a34      	ldr	r2, [pc, #208]	; (8006468 <TIM_Base_SetConfig+0xe4>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d00f      	beq.n	80063bc <TIM_Base_SetConfig+0x38>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063a2:	d00b      	beq.n	80063bc <TIM_Base_SetConfig+0x38>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a31      	ldr	r2, [pc, #196]	; (800646c <TIM_Base_SetConfig+0xe8>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d007      	beq.n	80063bc <TIM_Base_SetConfig+0x38>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a30      	ldr	r2, [pc, #192]	; (8006470 <TIM_Base_SetConfig+0xec>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d003      	beq.n	80063bc <TIM_Base_SetConfig+0x38>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a2f      	ldr	r2, [pc, #188]	; (8006474 <TIM_Base_SetConfig+0xf0>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d108      	bne.n	80063ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a25      	ldr	r2, [pc, #148]	; (8006468 <TIM_Base_SetConfig+0xe4>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d01b      	beq.n	800640e <TIM_Base_SetConfig+0x8a>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063dc:	d017      	beq.n	800640e <TIM_Base_SetConfig+0x8a>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a22      	ldr	r2, [pc, #136]	; (800646c <TIM_Base_SetConfig+0xe8>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d013      	beq.n	800640e <TIM_Base_SetConfig+0x8a>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a21      	ldr	r2, [pc, #132]	; (8006470 <TIM_Base_SetConfig+0xec>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d00f      	beq.n	800640e <TIM_Base_SetConfig+0x8a>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a20      	ldr	r2, [pc, #128]	; (8006474 <TIM_Base_SetConfig+0xf0>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d00b      	beq.n	800640e <TIM_Base_SetConfig+0x8a>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a1f      	ldr	r2, [pc, #124]	; (8006478 <TIM_Base_SetConfig+0xf4>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d007      	beq.n	800640e <TIM_Base_SetConfig+0x8a>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a1e      	ldr	r2, [pc, #120]	; (800647c <TIM_Base_SetConfig+0xf8>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d003      	beq.n	800640e <TIM_Base_SetConfig+0x8a>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a1d      	ldr	r2, [pc, #116]	; (8006480 <TIM_Base_SetConfig+0xfc>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d108      	bne.n	8006420 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006414:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	4313      	orrs	r3, r2
 800641e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	695b      	ldr	r3, [r3, #20]
 800642a:	4313      	orrs	r3, r2
 800642c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	689a      	ldr	r2, [r3, #8]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a08      	ldr	r2, [pc, #32]	; (8006468 <TIM_Base_SetConfig+0xe4>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d103      	bne.n	8006454 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	691a      	ldr	r2, [r3, #16]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	615a      	str	r2, [r3, #20]
}
 800645a:	bf00      	nop
 800645c:	3714      	adds	r7, #20
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	40010000 	.word	0x40010000
 800646c:	40000400 	.word	0x40000400
 8006470:	40000800 	.word	0x40000800
 8006474:	40000c00 	.word	0x40000c00
 8006478:	40014000 	.word	0x40014000
 800647c:	40014400 	.word	0x40014400
 8006480:	40014800 	.word	0x40014800

08006484 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006484:	b480      	push	{r7}
 8006486:	b087      	sub	sp, #28
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a1b      	ldr	r3, [r3, #32]
 8006492:	f023 0201 	bic.w	r2, r3, #1
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f023 0303 	bic.w	r3, r3, #3
 80064ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	f023 0302 	bic.w	r3, r3, #2
 80064cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a1c      	ldr	r2, [pc, #112]	; (800654c <TIM_OC1_SetConfig+0xc8>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d10c      	bne.n	80064fa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	f023 0308 	bic.w	r3, r3, #8
 80064e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f023 0304 	bic.w	r3, r3, #4
 80064f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a13      	ldr	r2, [pc, #76]	; (800654c <TIM_OC1_SetConfig+0xc8>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d111      	bne.n	8006526 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006508:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006510:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	693a      	ldr	r2, [r7, #16]
 8006518:	4313      	orrs	r3, r2
 800651a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	699b      	ldr	r3, [r3, #24]
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	4313      	orrs	r3, r2
 8006524:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	693a      	ldr	r2, [r7, #16]
 800652a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	685a      	ldr	r2, [r3, #4]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	621a      	str	r2, [r3, #32]
}
 8006540:	bf00      	nop
 8006542:	371c      	adds	r7, #28
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr
 800654c:	40010000 	.word	0x40010000

08006550 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006550:	b480      	push	{r7}
 8006552:	b087      	sub	sp, #28
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	f023 0210 	bic.w	r2, r3, #16
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800657e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006586:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	021b      	lsls	r3, r3, #8
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	4313      	orrs	r3, r2
 8006592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	f023 0320 	bic.w	r3, r3, #32
 800659a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	011b      	lsls	r3, r3, #4
 80065a2:	697a      	ldr	r2, [r7, #20]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4a1e      	ldr	r2, [pc, #120]	; (8006624 <TIM_OC2_SetConfig+0xd4>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d10d      	bne.n	80065cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	011b      	lsls	r3, r3, #4
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a15      	ldr	r2, [pc, #84]	; (8006624 <TIM_OC2_SetConfig+0xd4>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d113      	bne.n	80065fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	695b      	ldr	r3, [r3, #20]
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	693a      	ldr	r2, [r7, #16]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	699b      	ldr	r3, [r3, #24]
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	693a      	ldr	r2, [r7, #16]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	693a      	ldr	r2, [r7, #16]
 8006600:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	685a      	ldr	r2, [r3, #4]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	621a      	str	r2, [r3, #32]
}
 8006616:	bf00      	nop
 8006618:	371c      	adds	r7, #28
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	40010000 	.word	0x40010000

08006628 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006628:	b480      	push	{r7}
 800662a:	b087      	sub	sp, #28
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a1b      	ldr	r3, [r3, #32]
 8006636:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f023 0303 	bic.w	r3, r3, #3
 800665e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	4313      	orrs	r3, r2
 8006668:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006670:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	021b      	lsls	r3, r3, #8
 8006678:	697a      	ldr	r2, [r7, #20]
 800667a:	4313      	orrs	r3, r2
 800667c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a1d      	ldr	r2, [pc, #116]	; (80066f8 <TIM_OC3_SetConfig+0xd0>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d10d      	bne.n	80066a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800668c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	021b      	lsls	r3, r3, #8
 8006694:	697a      	ldr	r2, [r7, #20]
 8006696:	4313      	orrs	r3, r2
 8006698:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a14      	ldr	r2, [pc, #80]	; (80066f8 <TIM_OC3_SetConfig+0xd0>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d113      	bne.n	80066d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	695b      	ldr	r3, [r3, #20]
 80066be:	011b      	lsls	r3, r3, #4
 80066c0:	693a      	ldr	r2, [r7, #16]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	011b      	lsls	r3, r3, #4
 80066cc:	693a      	ldr	r2, [r7, #16]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	685a      	ldr	r2, [r3, #4]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	697a      	ldr	r2, [r7, #20]
 80066ea:	621a      	str	r2, [r3, #32]
}
 80066ec:	bf00      	nop
 80066ee:	371c      	adds	r7, #28
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr
 80066f8:	40010000 	.word	0x40010000

080066fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b087      	sub	sp, #28
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	69db      	ldr	r3, [r3, #28]
 8006722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800672a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006732:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	021b      	lsls	r3, r3, #8
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	4313      	orrs	r3, r2
 800673e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006746:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	031b      	lsls	r3, r3, #12
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	4313      	orrs	r3, r2
 8006752:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a10      	ldr	r2, [pc, #64]	; (8006798 <TIM_OC4_SetConfig+0x9c>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d109      	bne.n	8006770 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006762:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	695b      	ldr	r3, [r3, #20]
 8006768:	019b      	lsls	r3, r3, #6
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	4313      	orrs	r3, r2
 800676e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	697a      	ldr	r2, [r7, #20]
 8006774:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	685a      	ldr	r2, [r3, #4]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	693a      	ldr	r2, [r7, #16]
 8006788:	621a      	str	r2, [r3, #32]
}
 800678a:	bf00      	nop
 800678c:	371c      	adds	r7, #28
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	40010000 	.word	0x40010000

0800679c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800679c:	b480      	push	{r7}
 800679e:	b087      	sub	sp, #28
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6a1b      	ldr	r3, [r3, #32]
 80067ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	f023 0201 	bic.w	r2, r3, #1
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	699b      	ldr	r3, [r3, #24]
 80067be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	011b      	lsls	r3, r3, #4
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	f023 030a 	bic.w	r3, r3, #10
 80067d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	4313      	orrs	r3, r2
 80067e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	693a      	ldr	r2, [r7, #16]
 80067e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	621a      	str	r2, [r3, #32]
}
 80067ee:	bf00      	nop
 80067f0:	371c      	adds	r7, #28
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr

080067fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067fa:	b480      	push	{r7}
 80067fc:	b087      	sub	sp, #28
 80067fe:	af00      	add	r7, sp, #0
 8006800:	60f8      	str	r0, [r7, #12]
 8006802:	60b9      	str	r1, [r7, #8]
 8006804:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	f023 0210 	bic.w	r2, r3, #16
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6a1b      	ldr	r3, [r3, #32]
 800681c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006824:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	031b      	lsls	r3, r3, #12
 800682a:	697a      	ldr	r2, [r7, #20]
 800682c:	4313      	orrs	r3, r2
 800682e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006836:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	011b      	lsls	r3, r3, #4
 800683c:	693a      	ldr	r2, [r7, #16]
 800683e:	4313      	orrs	r3, r2
 8006840:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	697a      	ldr	r2, [r7, #20]
 8006846:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	693a      	ldr	r2, [r7, #16]
 800684c:	621a      	str	r2, [r3, #32]
}
 800684e:	bf00      	nop
 8006850:	371c      	adds	r7, #28
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr

0800685a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800685a:	b480      	push	{r7}
 800685c:	b085      	sub	sp, #20
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
 8006862:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006870:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006872:	683a      	ldr	r2, [r7, #0]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	4313      	orrs	r3, r2
 8006878:	f043 0307 	orr.w	r3, r3, #7
 800687c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	609a      	str	r2, [r3, #8]
}
 8006884:	bf00      	nop
 8006886:	3714      	adds	r7, #20
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006890:	b480      	push	{r7}
 8006892:	b087      	sub	sp, #28
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	607a      	str	r2, [r7, #4]
 800689c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	021a      	lsls	r2, r3, #8
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	431a      	orrs	r2, r3
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	697a      	ldr	r2, [r7, #20]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	697a      	ldr	r2, [r7, #20]
 80068c2:	609a      	str	r2, [r3, #8]
}
 80068c4:	bf00      	nop
 80068c6:	371c      	adds	r7, #28
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b087      	sub	sp, #28
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	f003 031f 	and.w	r3, r3, #31
 80068e2:	2201      	movs	r2, #1
 80068e4:	fa02 f303 	lsl.w	r3, r2, r3
 80068e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6a1a      	ldr	r2, [r3, #32]
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	43db      	mvns	r3, r3
 80068f2:	401a      	ands	r2, r3
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6a1a      	ldr	r2, [r3, #32]
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	f003 031f 	and.w	r3, r3, #31
 8006902:	6879      	ldr	r1, [r7, #4]
 8006904:	fa01 f303 	lsl.w	r3, r1, r3
 8006908:	431a      	orrs	r2, r3
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	621a      	str	r2, [r3, #32]
}
 800690e:	bf00      	nop
 8006910:	371c      	adds	r7, #28
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr
	...

0800691c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800691c:	b480      	push	{r7}
 800691e:	b085      	sub	sp, #20
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800692c:	2b01      	cmp	r3, #1
 800692e:	d101      	bne.n	8006934 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006930:	2302      	movs	r3, #2
 8006932:	e050      	b.n	80069d6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2202      	movs	r2, #2
 8006940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800695a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	4313      	orrs	r3, r2
 8006964:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68fa      	ldr	r2, [r7, #12]
 800696c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a1c      	ldr	r2, [pc, #112]	; (80069e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d018      	beq.n	80069aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006980:	d013      	beq.n	80069aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a18      	ldr	r2, [pc, #96]	; (80069e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d00e      	beq.n	80069aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a16      	ldr	r2, [pc, #88]	; (80069ec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d009      	beq.n	80069aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a15      	ldr	r2, [pc, #84]	; (80069f0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d004      	beq.n	80069aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a13      	ldr	r2, [pc, #76]	; (80069f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d10c      	bne.n	80069c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	68ba      	ldr	r2, [r7, #8]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	68ba      	ldr	r2, [r7, #8]
 80069c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3714      	adds	r7, #20
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	40010000 	.word	0x40010000
 80069e8:	40000400 	.word	0x40000400
 80069ec:	40000800 	.word	0x40000800
 80069f0:	40000c00 	.word	0x40000c00
 80069f4:	40014000 	.word	0x40014000

080069f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d101      	bne.n	8006a0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e03f      	b.n	8006a8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d106      	bne.n	8006a24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f7fc f99e 	bl	8002d60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2224      	movs	r2, #36	; 0x24
 8006a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68da      	ldr	r2, [r3, #12]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 ffcf 	bl	80079e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	691a      	ldr	r2, [r3, #16]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	695a      	ldr	r2, [r3, #20]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68da      	ldr	r2, [r3, #12]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2220      	movs	r2, #32
 8006a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2220      	movs	r2, #32
 8006a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3708      	adds	r7, #8
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a92:	b580      	push	{r7, lr}
 8006a94:	b08a      	sub	sp, #40	; 0x28
 8006a96:	af02      	add	r7, sp, #8
 8006a98:	60f8      	str	r0, [r7, #12]
 8006a9a:	60b9      	str	r1, [r7, #8]
 8006a9c:	603b      	str	r3, [r7, #0]
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	2b20      	cmp	r3, #32
 8006ab0:	d17c      	bne.n	8006bac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d002      	beq.n	8006abe <HAL_UART_Transmit+0x2c>
 8006ab8:	88fb      	ldrh	r3, [r7, #6]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d101      	bne.n	8006ac2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e075      	b.n	8006bae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d101      	bne.n	8006ad0 <HAL_UART_Transmit+0x3e>
 8006acc:	2302      	movs	r3, #2
 8006ace:	e06e      	b.n	8006bae <HAL_UART_Transmit+0x11c>
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2221      	movs	r2, #33	; 0x21
 8006ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ae6:	f7fc fab9 	bl	800305c <HAL_GetTick>
 8006aea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	88fa      	ldrh	r2, [r7, #6]
 8006af0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	88fa      	ldrh	r2, [r7, #6]
 8006af6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b00:	d108      	bne.n	8006b14 <HAL_UART_Transmit+0x82>
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d104      	bne.n	8006b14 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	61bb      	str	r3, [r7, #24]
 8006b12:	e003      	b.n	8006b1c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006b24:	e02a      	b.n	8006b7c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	9300      	str	r3, [sp, #0]
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	2180      	movs	r1, #128	; 0x80
 8006b30:	68f8      	ldr	r0, [r7, #12]
 8006b32:	f000 fc51 	bl	80073d8 <UART_WaitOnFlagUntilTimeout>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d001      	beq.n	8006b40 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	e036      	b.n	8006bae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d10b      	bne.n	8006b5e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	881b      	ldrh	r3, [r3, #0]
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	3302      	adds	r3, #2
 8006b5a:	61bb      	str	r3, [r7, #24]
 8006b5c:	e007      	b.n	8006b6e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	781a      	ldrb	r2, [r3, #0]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	3b01      	subs	r3, #1
 8006b76:	b29a      	uxth	r2, r3
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d1cf      	bne.n	8006b26 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	9300      	str	r3, [sp, #0]
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	2140      	movs	r1, #64	; 0x40
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f000 fc21 	bl	80073d8 <UART_WaitOnFlagUntilTimeout>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d001      	beq.n	8006ba0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	e006      	b.n	8006bae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2220      	movs	r2, #32
 8006ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	e000      	b.n	8006bae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006bac:	2302      	movs	r3, #2
  }
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3720      	adds	r7, #32
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b084      	sub	sp, #16
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	60f8      	str	r0, [r7, #12]
 8006bbe:	60b9      	str	r1, [r7, #8]
 8006bc0:	4613      	mov	r3, r2
 8006bc2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	2b20      	cmp	r3, #32
 8006bce:	d11d      	bne.n	8006c0c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d002      	beq.n	8006bdc <HAL_UART_Receive_IT+0x26>
 8006bd6:	88fb      	ldrh	r3, [r7, #6]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d101      	bne.n	8006be0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e016      	b.n	8006c0e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d101      	bne.n	8006bee <HAL_UART_Receive_IT+0x38>
 8006bea:	2302      	movs	r3, #2
 8006bec:	e00f      	b.n	8006c0e <HAL_UART_Receive_IT+0x58>
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006bfc:	88fb      	ldrh	r3, [r7, #6]
 8006bfe:	461a      	mov	r2, r3
 8006c00:	68b9      	ldr	r1, [r7, #8]
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	f000 fc56 	bl	80074b4 <UART_Start_Receive_IT>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	e000      	b.n	8006c0e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006c0c:	2302      	movs	r3, #2
  }
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b084      	sub	sp, #16
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	60f8      	str	r0, [r7, #12]
 8006c1e:	60b9      	str	r1, [r7, #8]
 8006c20:	4613      	mov	r3, r2
 8006c22:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	2b20      	cmp	r3, #32
 8006c2e:	d11d      	bne.n	8006c6c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d002      	beq.n	8006c3c <HAL_UART_Receive_DMA+0x26>
 8006c36:	88fb      	ldrh	r3, [r7, #6]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d101      	bne.n	8006c40 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e016      	b.n	8006c6e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d101      	bne.n	8006c4e <HAL_UART_Receive_DMA+0x38>
 8006c4a:	2302      	movs	r3, #2
 8006c4c:	e00f      	b.n	8006c6e <HAL_UART_Receive_DMA+0x58>
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2201      	movs	r2, #1
 8006c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006c5c:	88fb      	ldrh	r3, [r7, #6]
 8006c5e:	461a      	mov	r2, r3
 8006c60:	68b9      	ldr	r1, [r7, #8]
 8006c62:	68f8      	ldr	r0, [r7, #12]
 8006c64:	f000 fc60 	bl	8007528 <UART_Start_Receive_DMA>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	e000      	b.n	8006c6e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006c6c:	2302      	movs	r3, #2
  }
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
	...

08006c78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b0ba      	sub	sp, #232	; 0xe8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	695b      	ldr	r3, [r3, #20]
 8006c9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cae:	f003 030f 	and.w	r3, r3, #15
 8006cb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006cb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d10f      	bne.n	8006cde <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cc2:	f003 0320 	and.w	r3, r3, #32
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d009      	beq.n	8006cde <HAL_UART_IRQHandler+0x66>
 8006cca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cce:	f003 0320 	and.w	r3, r3, #32
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d003      	beq.n	8006cde <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 fdc7 	bl	800786a <UART_Receive_IT>
      return;
 8006cdc:	e256      	b.n	800718c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006cde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f000 80de 	beq.w	8006ea4 <HAL_UART_IRQHandler+0x22c>
 8006ce8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cec:	f003 0301 	and.w	r3, r3, #1
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d106      	bne.n	8006d02 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cf8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f000 80d1 	beq.w	8006ea4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d06:	f003 0301 	and.w	r3, r3, #1
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00b      	beq.n	8006d26 <HAL_UART_IRQHandler+0xae>
 8006d0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d005      	beq.n	8006d26 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1e:	f043 0201 	orr.w	r2, r3, #1
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d2a:	f003 0304 	and.w	r3, r3, #4
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d00b      	beq.n	8006d4a <HAL_UART_IRQHandler+0xd2>
 8006d32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d36:	f003 0301 	and.w	r3, r3, #1
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d005      	beq.n	8006d4a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d42:	f043 0202 	orr.w	r2, r3, #2
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d4e:	f003 0302 	and.w	r3, r3, #2
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00b      	beq.n	8006d6e <HAL_UART_IRQHandler+0xf6>
 8006d56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d005      	beq.n	8006d6e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d66:	f043 0204 	orr.w	r2, r3, #4
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d72:	f003 0308 	and.w	r3, r3, #8
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d011      	beq.n	8006d9e <HAL_UART_IRQHandler+0x126>
 8006d7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d7e:	f003 0320 	and.w	r3, r3, #32
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d105      	bne.n	8006d92 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006d86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d8a:	f003 0301 	and.w	r3, r3, #1
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d005      	beq.n	8006d9e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d96:	f043 0208 	orr.w	r2, r3, #8
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	f000 81ed 	beq.w	8007182 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dac:	f003 0320 	and.w	r3, r3, #32
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d008      	beq.n	8006dc6 <HAL_UART_IRQHandler+0x14e>
 8006db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006db8:	f003 0320 	and.w	r3, r3, #32
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d002      	beq.n	8006dc6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 fd52 	bl	800786a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	695b      	ldr	r3, [r3, #20]
 8006dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd0:	2b40      	cmp	r3, #64	; 0x40
 8006dd2:	bf0c      	ite	eq
 8006dd4:	2301      	moveq	r3, #1
 8006dd6:	2300      	movne	r3, #0
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de2:	f003 0308 	and.w	r3, r3, #8
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d103      	bne.n	8006df2 <HAL_UART_IRQHandler+0x17a>
 8006dea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d04f      	beq.n	8006e92 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 fc5a 	bl	80076ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	695b      	ldr	r3, [r3, #20]
 8006dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e02:	2b40      	cmp	r3, #64	; 0x40
 8006e04:	d141      	bne.n	8006e8a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	3314      	adds	r3, #20
 8006e0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e14:	e853 3f00 	ldrex	r3, [r3]
 8006e18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006e1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	3314      	adds	r3, #20
 8006e2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006e32:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006e36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006e3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006e42:	e841 2300 	strex	r3, r2, [r1]
 8006e46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006e4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1d9      	bne.n	8006e06 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d013      	beq.n	8006e82 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e5e:	4a7d      	ldr	r2, [pc, #500]	; (8007054 <HAL_UART_IRQHandler+0x3dc>)
 8006e60:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7fc ff5e 	bl	8003d28 <HAL_DMA_Abort_IT>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d016      	beq.n	8006ea0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006e7c:	4610      	mov	r0, r2
 8006e7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e80:	e00e      	b.n	8006ea0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 f99a 	bl	80071bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e88:	e00a      	b.n	8006ea0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 f996 	bl	80071bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e90:	e006      	b.n	8006ea0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 f992 	bl	80071bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006e9e:	e170      	b.n	8007182 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ea0:	bf00      	nop
    return;
 8006ea2:	e16e      	b.n	8007182 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	f040 814a 	bne.w	8007142 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eb2:	f003 0310 	and.w	r3, r3, #16
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	f000 8143 	beq.w	8007142 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ec0:	f003 0310 	and.w	r3, r3, #16
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	f000 813c 	beq.w	8007142 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006eca:	2300      	movs	r3, #0
 8006ecc:	60bb      	str	r3, [r7, #8]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	60bb      	str	r3, [r7, #8]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	60bb      	str	r3, [r7, #8]
 8006ede:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	695b      	ldr	r3, [r3, #20]
 8006ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eea:	2b40      	cmp	r3, #64	; 0x40
 8006eec:	f040 80b4 	bne.w	8007058 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006efc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f000 8140 	beq.w	8007186 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	f080 8139 	bcs.w	8007186 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f1a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f20:	69db      	ldr	r3, [r3, #28]
 8006f22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f26:	f000 8088 	beq.w	800703a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	330c      	adds	r3, #12
 8006f30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f38:	e853 3f00 	ldrex	r3, [r3]
 8006f3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006f40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	330c      	adds	r3, #12
 8006f52:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006f56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006f5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006f62:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006f66:	e841 2300 	strex	r3, r2, [r1]
 8006f6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006f6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d1d9      	bne.n	8006f2a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	3314      	adds	r3, #20
 8006f7c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f80:	e853 3f00 	ldrex	r3, [r3]
 8006f84:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006f86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f88:	f023 0301 	bic.w	r3, r3, #1
 8006f8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	3314      	adds	r3, #20
 8006f96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006f9a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006f9e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006fa2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006fa6:	e841 2300 	strex	r3, r2, [r1]
 8006faa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006fac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d1e1      	bne.n	8006f76 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	3314      	adds	r3, #20
 8006fb8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006fbc:	e853 3f00 	ldrex	r3, [r3]
 8006fc0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006fc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	3314      	adds	r3, #20
 8006fd2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006fd6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006fd8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fda:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006fdc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006fde:	e841 2300 	strex	r3, r2, [r1]
 8006fe2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006fe4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1e3      	bne.n	8006fb2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2220      	movs	r2, #32
 8006fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	330c      	adds	r3, #12
 8006ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007002:	e853 3f00 	ldrex	r3, [r3]
 8007006:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007008:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800700a:	f023 0310 	bic.w	r3, r3, #16
 800700e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	330c      	adds	r3, #12
 8007018:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800701c:	65ba      	str	r2, [r7, #88]	; 0x58
 800701e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007020:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007022:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007024:	e841 2300 	strex	r3, r2, [r1]
 8007028:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800702a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800702c:	2b00      	cmp	r3, #0
 800702e:	d1e3      	bne.n	8006ff8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007034:	4618      	mov	r0, r3
 8007036:	f7fc fe07 	bl	8003c48 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007042:	b29b      	uxth	r3, r3
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	b29b      	uxth	r3, r3
 8007048:	4619      	mov	r1, r3
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 f8c0 	bl	80071d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007050:	e099      	b.n	8007186 <HAL_UART_IRQHandler+0x50e>
 8007052:	bf00      	nop
 8007054:	08007773 	.word	0x08007773
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007060:	b29b      	uxth	r3, r3
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800706c:	b29b      	uxth	r3, r3
 800706e:	2b00      	cmp	r3, #0
 8007070:	f000 808b 	beq.w	800718a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007074:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007078:	2b00      	cmp	r3, #0
 800707a:	f000 8086 	beq.w	800718a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	330c      	adds	r3, #12
 8007084:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007088:	e853 3f00 	ldrex	r3, [r3]
 800708c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800708e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007090:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007094:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	330c      	adds	r3, #12
 800709e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80070a2:	647a      	str	r2, [r7, #68]	; 0x44
 80070a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80070a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070aa:	e841 2300 	strex	r3, r2, [r1]
 80070ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80070b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d1e3      	bne.n	800707e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	3314      	adds	r3, #20
 80070bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c0:	e853 3f00 	ldrex	r3, [r3]
 80070c4:	623b      	str	r3, [r7, #32]
   return(result);
 80070c6:	6a3b      	ldr	r3, [r7, #32]
 80070c8:	f023 0301 	bic.w	r3, r3, #1
 80070cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	3314      	adds	r3, #20
 80070d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80070da:	633a      	str	r2, [r7, #48]	; 0x30
 80070dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070e2:	e841 2300 	strex	r3, r2, [r1]
 80070e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80070e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d1e3      	bne.n	80070b6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2220      	movs	r2, #32
 80070f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	330c      	adds	r3, #12
 8007102:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	e853 3f00 	ldrex	r3, [r3]
 800710a:	60fb      	str	r3, [r7, #12]
   return(result);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f023 0310 	bic.w	r3, r3, #16
 8007112:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	330c      	adds	r3, #12
 800711c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007120:	61fa      	str	r2, [r7, #28]
 8007122:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007124:	69b9      	ldr	r1, [r7, #24]
 8007126:	69fa      	ldr	r2, [r7, #28]
 8007128:	e841 2300 	strex	r3, r2, [r1]
 800712c:	617b      	str	r3, [r7, #20]
   return(result);
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d1e3      	bne.n	80070fc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007134:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007138:	4619      	mov	r1, r3
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 f848 	bl	80071d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007140:	e023      	b.n	800718a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800714a:	2b00      	cmp	r3, #0
 800714c:	d009      	beq.n	8007162 <HAL_UART_IRQHandler+0x4ea>
 800714e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007156:	2b00      	cmp	r3, #0
 8007158:	d003      	beq.n	8007162 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 fb1d 	bl	800779a <UART_Transmit_IT>
    return;
 8007160:	e014      	b.n	800718c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00e      	beq.n	800718c <HAL_UART_IRQHandler+0x514>
 800716e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007176:	2b00      	cmp	r3, #0
 8007178:	d008      	beq.n	800718c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 fb5d 	bl	800783a <UART_EndTransmit_IT>
    return;
 8007180:	e004      	b.n	800718c <HAL_UART_IRQHandler+0x514>
    return;
 8007182:	bf00      	nop
 8007184:	e002      	b.n	800718c <HAL_UART_IRQHandler+0x514>
      return;
 8007186:	bf00      	nop
 8007188:	e000      	b.n	800718c <HAL_UART_IRQHandler+0x514>
      return;
 800718a:	bf00      	nop
  }
}
 800718c:	37e8      	adds	r7, #232	; 0xe8
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop

08007194 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800719c:	bf00      	nop
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80071b0:	bf00      	nop
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80071c4:	bf00      	nop
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	460b      	mov	r3, r1
 80071da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80071dc:	bf00      	nop
 80071de:	370c      	adds	r7, #12
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b09c      	sub	sp, #112	; 0x70
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007200:	2b00      	cmp	r3, #0
 8007202:	d172      	bne.n	80072ea <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007206:	2200      	movs	r2, #0
 8007208:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800720a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	330c      	adds	r3, #12
 8007210:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007214:	e853 3f00 	ldrex	r3, [r3]
 8007218:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800721a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800721c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007220:	66bb      	str	r3, [r7, #104]	; 0x68
 8007222:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	330c      	adds	r3, #12
 8007228:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800722a:	65ba      	str	r2, [r7, #88]	; 0x58
 800722c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800722e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007230:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007232:	e841 2300 	strex	r3, r2, [r1]
 8007236:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007238:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800723a:	2b00      	cmp	r3, #0
 800723c:	d1e5      	bne.n	800720a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800723e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	3314      	adds	r3, #20
 8007244:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007248:	e853 3f00 	ldrex	r3, [r3]
 800724c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800724e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007250:	f023 0301 	bic.w	r3, r3, #1
 8007254:	667b      	str	r3, [r7, #100]	; 0x64
 8007256:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	3314      	adds	r3, #20
 800725c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800725e:	647a      	str	r2, [r7, #68]	; 0x44
 8007260:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007262:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007264:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007266:	e841 2300 	strex	r3, r2, [r1]
 800726a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800726c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800726e:	2b00      	cmp	r3, #0
 8007270:	d1e5      	bne.n	800723e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	3314      	adds	r3, #20
 8007278:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727c:	e853 3f00 	ldrex	r3, [r3]
 8007280:	623b      	str	r3, [r7, #32]
   return(result);
 8007282:	6a3b      	ldr	r3, [r7, #32]
 8007284:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007288:	663b      	str	r3, [r7, #96]	; 0x60
 800728a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	3314      	adds	r3, #20
 8007290:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007292:	633a      	str	r2, [r7, #48]	; 0x30
 8007294:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007296:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007298:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800729a:	e841 2300 	strex	r3, r2, [r1]
 800729e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80072a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d1e5      	bne.n	8007272 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80072a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072a8:	2220      	movs	r2, #32
 80072aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d119      	bne.n	80072ea <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	330c      	adds	r3, #12
 80072bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	e853 3f00 	ldrex	r3, [r3]
 80072c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f023 0310 	bic.w	r3, r3, #16
 80072cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	330c      	adds	r3, #12
 80072d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80072d6:	61fa      	str	r2, [r7, #28]
 80072d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072da:	69b9      	ldr	r1, [r7, #24]
 80072dc:	69fa      	ldr	r2, [r7, #28]
 80072de:	e841 2300 	strex	r3, r2, [r1]
 80072e2:	617b      	str	r3, [r7, #20]
   return(result);
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d1e5      	bne.n	80072b6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d106      	bne.n	8007300 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80072f6:	4619      	mov	r1, r3
 80072f8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80072fa:	f7ff ff69 	bl	80071d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80072fe:	e002      	b.n	8007306 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007300:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007302:	f7fa fcdd 	bl	8001cc0 <HAL_UART_RxCpltCallback>
}
 8007306:	bf00      	nop
 8007308:	3770      	adds	r7, #112	; 0x70
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b084      	sub	sp, #16
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007320:	2b01      	cmp	r3, #1
 8007322:	d108      	bne.n	8007336 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007328:	085b      	lsrs	r3, r3, #1
 800732a:	b29b      	uxth	r3, r3
 800732c:	4619      	mov	r1, r3
 800732e:	68f8      	ldr	r0, [r7, #12]
 8007330:	f7ff ff4e 	bl	80071d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007334:	e002      	b.n	800733c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007336:	68f8      	ldr	r0, [r7, #12]
 8007338:	f7ff ff36 	bl	80071a8 <HAL_UART_RxHalfCpltCallback>
}
 800733c:	bf00      	nop
 800733e:	3710      	adds	r7, #16
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800734c:	2300      	movs	r3, #0
 800734e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007354:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	695b      	ldr	r3, [r3, #20]
 800735c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007360:	2b80      	cmp	r3, #128	; 0x80
 8007362:	bf0c      	ite	eq
 8007364:	2301      	moveq	r3, #1
 8007366:	2300      	movne	r3, #0
 8007368:	b2db      	uxtb	r3, r3
 800736a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007372:	b2db      	uxtb	r3, r3
 8007374:	2b21      	cmp	r3, #33	; 0x21
 8007376:	d108      	bne.n	800738a <UART_DMAError+0x46>
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d005      	beq.n	800738a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	2200      	movs	r2, #0
 8007382:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007384:	68b8      	ldr	r0, [r7, #8]
 8007386:	f000 f969 	bl	800765c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	695b      	ldr	r3, [r3, #20]
 8007390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007394:	2b40      	cmp	r3, #64	; 0x40
 8007396:	bf0c      	ite	eq
 8007398:	2301      	moveq	r3, #1
 800739a:	2300      	movne	r3, #0
 800739c:	b2db      	uxtb	r3, r3
 800739e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	2b22      	cmp	r3, #34	; 0x22
 80073aa:	d108      	bne.n	80073be <UART_DMAError+0x7a>
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d005      	beq.n	80073be <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	2200      	movs	r2, #0
 80073b6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80073b8:	68b8      	ldr	r0, [r7, #8]
 80073ba:	f000 f977 	bl	80076ac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c2:	f043 0210 	orr.w	r2, r3, #16
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073ca:	68b8      	ldr	r0, [r7, #8]
 80073cc:	f7ff fef6 	bl	80071bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073d0:	bf00      	nop
 80073d2:	3710      	adds	r7, #16
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b090      	sub	sp, #64	; 0x40
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	603b      	str	r3, [r7, #0]
 80073e4:	4613      	mov	r3, r2
 80073e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073e8:	e050      	b.n	800748c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073f0:	d04c      	beq.n	800748c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80073f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d007      	beq.n	8007408 <UART_WaitOnFlagUntilTimeout+0x30>
 80073f8:	f7fb fe30 	bl	800305c <HAL_GetTick>
 80073fc:	4602      	mov	r2, r0
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	1ad3      	subs	r3, r2, r3
 8007402:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007404:	429a      	cmp	r2, r3
 8007406:	d241      	bcs.n	800748c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	330c      	adds	r3, #12
 800740e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007412:	e853 3f00 	ldrex	r3, [r3]
 8007416:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800741e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	330c      	adds	r3, #12
 8007426:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007428:	637a      	str	r2, [r7, #52]	; 0x34
 800742a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800742e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007430:	e841 2300 	strex	r3, r2, [r1]
 8007434:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1e5      	bne.n	8007408 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	3314      	adds	r3, #20
 8007442:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	e853 3f00 	ldrex	r3, [r3]
 800744a:	613b      	str	r3, [r7, #16]
   return(result);
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	f023 0301 	bic.w	r3, r3, #1
 8007452:	63bb      	str	r3, [r7, #56]	; 0x38
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	3314      	adds	r3, #20
 800745a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800745c:	623a      	str	r2, [r7, #32]
 800745e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007460:	69f9      	ldr	r1, [r7, #28]
 8007462:	6a3a      	ldr	r2, [r7, #32]
 8007464:	e841 2300 	strex	r3, r2, [r1]
 8007468:	61bb      	str	r3, [r7, #24]
   return(result);
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d1e5      	bne.n	800743c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2220      	movs	r2, #32
 8007474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2220      	movs	r2, #32
 800747c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2200      	movs	r2, #0
 8007484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007488:	2303      	movs	r3, #3
 800748a:	e00f      	b.n	80074ac <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	4013      	ands	r3, r2
 8007496:	68ba      	ldr	r2, [r7, #8]
 8007498:	429a      	cmp	r2, r3
 800749a:	bf0c      	ite	eq
 800749c:	2301      	moveq	r3, #1
 800749e:	2300      	movne	r3, #0
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	461a      	mov	r2, r3
 80074a4:	79fb      	ldrb	r3, [r7, #7]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d09f      	beq.n	80073ea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3740      	adds	r7, #64	; 0x40
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b085      	sub	sp, #20
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	4613      	mov	r3, r2
 80074c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	68ba      	ldr	r2, [r7, #8]
 80074c6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	88fa      	ldrh	r2, [r7, #6]
 80074cc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	88fa      	ldrh	r2, [r7, #6]
 80074d2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2200      	movs	r2, #0
 80074d8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2222      	movs	r2, #34	; 0x22
 80074de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2200      	movs	r2, #0
 80074e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68da      	ldr	r2, [r3, #12]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074f8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	695a      	ldr	r2, [r3, #20]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f042 0201 	orr.w	r2, r2, #1
 8007508:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	68da      	ldr	r2, [r3, #12]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f042 0220 	orr.w	r2, r2, #32
 8007518:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	3714      	adds	r7, #20
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b098      	sub	sp, #96	; 0x60
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	4613      	mov	r3, r2
 8007534:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007536:	68ba      	ldr	r2, [r7, #8]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	88fa      	ldrh	r2, [r7, #6]
 8007540:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2200      	movs	r2, #0
 8007546:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2222      	movs	r2, #34	; 0x22
 800754c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007554:	4a3e      	ldr	r2, [pc, #248]	; (8007650 <UART_Start_Receive_DMA+0x128>)
 8007556:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800755c:	4a3d      	ldr	r2, [pc, #244]	; (8007654 <UART_Start_Receive_DMA+0x12c>)
 800755e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007564:	4a3c      	ldr	r2, [pc, #240]	; (8007658 <UART_Start_Receive_DMA+0x130>)
 8007566:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800756c:	2200      	movs	r2, #0
 800756e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007570:	f107 0308 	add.w	r3, r7, #8
 8007574:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	3304      	adds	r3, #4
 8007580:	4619      	mov	r1, r3
 8007582:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	88fb      	ldrh	r3, [r7, #6]
 8007588:	f7fc fb06 	bl	8003b98 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800758c:	2300      	movs	r3, #0
 800758e:	613b      	str	r3, [r7, #16]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	613b      	str	r3, [r7, #16]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	613b      	str	r3, [r7, #16]
 80075a0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	330c      	adds	r3, #12
 80075b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075b4:	e853 3f00 	ldrex	r3, [r3]
 80075b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	330c      	adds	r3, #12
 80075c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80075ca:	64fa      	str	r2, [r7, #76]	; 0x4c
 80075cc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ce:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80075d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80075d2:	e841 2300 	strex	r3, r2, [r1]
 80075d6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80075d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1e5      	bne.n	80075aa <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	3314      	adds	r3, #20
 80075e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e8:	e853 3f00 	ldrex	r3, [r3]
 80075ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f0:	f043 0301 	orr.w	r3, r3, #1
 80075f4:	657b      	str	r3, [r7, #84]	; 0x54
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	3314      	adds	r3, #20
 80075fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80075fe:	63ba      	str	r2, [r7, #56]	; 0x38
 8007600:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007602:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007604:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007606:	e841 2300 	strex	r3, r2, [r1]
 800760a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800760c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760e:	2b00      	cmp	r3, #0
 8007610:	d1e5      	bne.n	80075de <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	3314      	adds	r3, #20
 8007618:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	e853 3f00 	ldrex	r3, [r3]
 8007620:	617b      	str	r3, [r7, #20]
   return(result);
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007628:	653b      	str	r3, [r7, #80]	; 0x50
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	3314      	adds	r3, #20
 8007630:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007632:	627a      	str	r2, [r7, #36]	; 0x24
 8007634:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007636:	6a39      	ldr	r1, [r7, #32]
 8007638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800763a:	e841 2300 	strex	r3, r2, [r1]
 800763e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1e5      	bne.n	8007612 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	3760      	adds	r7, #96	; 0x60
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}
 8007650:	080071e9 	.word	0x080071e9
 8007654:	0800730f 	.word	0x0800730f
 8007658:	08007345 	.word	0x08007345

0800765c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800765c:	b480      	push	{r7}
 800765e:	b089      	sub	sp, #36	; 0x24
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	330c      	adds	r3, #12
 800766a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	e853 3f00 	ldrex	r3, [r3]
 8007672:	60bb      	str	r3, [r7, #8]
   return(result);
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800767a:	61fb      	str	r3, [r7, #28]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	330c      	adds	r3, #12
 8007682:	69fa      	ldr	r2, [r7, #28]
 8007684:	61ba      	str	r2, [r7, #24]
 8007686:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007688:	6979      	ldr	r1, [r7, #20]
 800768a:	69ba      	ldr	r2, [r7, #24]
 800768c:	e841 2300 	strex	r3, r2, [r1]
 8007690:	613b      	str	r3, [r7, #16]
   return(result);
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d1e5      	bne.n	8007664 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2220      	movs	r2, #32
 800769c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80076a0:	bf00      	nop
 80076a2:	3724      	adds	r7, #36	; 0x24
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b095      	sub	sp, #84	; 0x54
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	330c      	adds	r3, #12
 80076ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076be:	e853 3f00 	ldrex	r3, [r3]
 80076c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80076c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	330c      	adds	r3, #12
 80076d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80076d4:	643a      	str	r2, [r7, #64]	; 0x40
 80076d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80076da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80076dc:	e841 2300 	strex	r3, r2, [r1]
 80076e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80076e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d1e5      	bne.n	80076b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	3314      	adds	r3, #20
 80076ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f0:	6a3b      	ldr	r3, [r7, #32]
 80076f2:	e853 3f00 	ldrex	r3, [r3]
 80076f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	f023 0301 	bic.w	r3, r3, #1
 80076fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	3314      	adds	r3, #20
 8007706:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007708:	62fa      	str	r2, [r7, #44]	; 0x2c
 800770a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800770e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007710:	e841 2300 	strex	r3, r2, [r1]
 8007714:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1e5      	bne.n	80076e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007720:	2b01      	cmp	r3, #1
 8007722:	d119      	bne.n	8007758 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	330c      	adds	r3, #12
 800772a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	e853 3f00 	ldrex	r3, [r3]
 8007732:	60bb      	str	r3, [r7, #8]
   return(result);
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	f023 0310 	bic.w	r3, r3, #16
 800773a:	647b      	str	r3, [r7, #68]	; 0x44
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	330c      	adds	r3, #12
 8007742:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007744:	61ba      	str	r2, [r7, #24]
 8007746:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007748:	6979      	ldr	r1, [r7, #20]
 800774a:	69ba      	ldr	r2, [r7, #24]
 800774c:	e841 2300 	strex	r3, r2, [r1]
 8007750:	613b      	str	r3, [r7, #16]
   return(result);
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d1e5      	bne.n	8007724 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2220      	movs	r2, #32
 800775c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007766:	bf00      	nop
 8007768:	3754      	adds	r7, #84	; 0x54
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr

08007772 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007772:	b580      	push	{r7, lr}
 8007774:	b084      	sub	sp, #16
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800777e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2200      	movs	r2, #0
 8007784:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2200      	movs	r2, #0
 800778a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800778c:	68f8      	ldr	r0, [r7, #12]
 800778e:	f7ff fd15 	bl	80071bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007792:	bf00      	nop
 8007794:	3710      	adds	r7, #16
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800779a:	b480      	push	{r7}
 800779c:	b085      	sub	sp, #20
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	2b21      	cmp	r3, #33	; 0x21
 80077ac:	d13e      	bne.n	800782c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077b6:	d114      	bne.n	80077e2 <UART_Transmit_IT+0x48>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d110      	bne.n	80077e2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6a1b      	ldr	r3, [r3, #32]
 80077c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	881b      	ldrh	r3, [r3, #0]
 80077ca:	461a      	mov	r2, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a1b      	ldr	r3, [r3, #32]
 80077da:	1c9a      	adds	r2, r3, #2
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	621a      	str	r2, [r3, #32]
 80077e0:	e008      	b.n	80077f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a1b      	ldr	r3, [r3, #32]
 80077e6:	1c59      	adds	r1, r3, #1
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	6211      	str	r1, [r2, #32]
 80077ec:	781a      	ldrb	r2, [r3, #0]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	3b01      	subs	r3, #1
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	4619      	mov	r1, r3
 8007802:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007804:	2b00      	cmp	r3, #0
 8007806:	d10f      	bne.n	8007828 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68da      	ldr	r2, [r3, #12]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007816:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68da      	ldr	r2, [r3, #12]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007826:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007828:	2300      	movs	r3, #0
 800782a:	e000      	b.n	800782e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800782c:	2302      	movs	r3, #2
  }
}
 800782e:	4618      	mov	r0, r3
 8007830:	3714      	adds	r7, #20
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr

0800783a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800783a:	b580      	push	{r7, lr}
 800783c:	b082      	sub	sp, #8
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	68da      	ldr	r2, [r3, #12]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007850:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2220      	movs	r2, #32
 8007856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f7ff fc9a 	bl	8007194 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3708      	adds	r7, #8
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}

0800786a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800786a:	b580      	push	{r7, lr}
 800786c:	b08c      	sub	sp, #48	; 0x30
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007878:	b2db      	uxtb	r3, r3
 800787a:	2b22      	cmp	r3, #34	; 0x22
 800787c:	f040 80ab 	bne.w	80079d6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007888:	d117      	bne.n	80078ba <UART_Receive_IT+0x50>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	691b      	ldr	r3, [r3, #16]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d113      	bne.n	80078ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007892:	2300      	movs	r3, #0
 8007894:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800789a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078a8:	b29a      	uxth	r2, r3
 80078aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b2:	1c9a      	adds	r2, r3, #2
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	629a      	str	r2, [r3, #40]	; 0x28
 80078b8:	e026      	b.n	8007908 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078be:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80078c0:	2300      	movs	r3, #0
 80078c2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078cc:	d007      	beq.n	80078de <UART_Receive_IT+0x74>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d10a      	bne.n	80078ec <UART_Receive_IT+0x82>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	691b      	ldr	r3, [r3, #16]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d106      	bne.n	80078ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	b2da      	uxtb	r2, r3
 80078e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e8:	701a      	strb	r2, [r3, #0]
 80078ea:	e008      	b.n	80078fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078f8:	b2da      	uxtb	r2, r3
 80078fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007902:	1c5a      	adds	r2, r3, #1
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800790c:	b29b      	uxth	r3, r3
 800790e:	3b01      	subs	r3, #1
 8007910:	b29b      	uxth	r3, r3
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	4619      	mov	r1, r3
 8007916:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007918:	2b00      	cmp	r3, #0
 800791a:	d15a      	bne.n	80079d2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	68da      	ldr	r2, [r3, #12]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f022 0220 	bic.w	r2, r2, #32
 800792a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	68da      	ldr	r2, [r3, #12]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800793a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	695a      	ldr	r2, [r3, #20]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f022 0201 	bic.w	r2, r2, #1
 800794a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2220      	movs	r2, #32
 8007950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007958:	2b01      	cmp	r3, #1
 800795a:	d135      	bne.n	80079c8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	330c      	adds	r3, #12
 8007968:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	e853 3f00 	ldrex	r3, [r3]
 8007970:	613b      	str	r3, [r7, #16]
   return(result);
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	f023 0310 	bic.w	r3, r3, #16
 8007978:	627b      	str	r3, [r7, #36]	; 0x24
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	330c      	adds	r3, #12
 8007980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007982:	623a      	str	r2, [r7, #32]
 8007984:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007986:	69f9      	ldr	r1, [r7, #28]
 8007988:	6a3a      	ldr	r2, [r7, #32]
 800798a:	e841 2300 	strex	r3, r2, [r1]
 800798e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d1e5      	bne.n	8007962 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f003 0310 	and.w	r3, r3, #16
 80079a0:	2b10      	cmp	r3, #16
 80079a2:	d10a      	bne.n	80079ba <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80079a4:	2300      	movs	r3, #0
 80079a6:	60fb      	str	r3, [r7, #12]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	60fb      	str	r3, [r7, #12]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	60fb      	str	r3, [r7, #12]
 80079b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80079be:	4619      	mov	r1, r3
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f7ff fc05 	bl	80071d0 <HAL_UARTEx_RxEventCallback>
 80079c6:	e002      	b.n	80079ce <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f7fa f979 	bl	8001cc0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80079ce:	2300      	movs	r3, #0
 80079d0:	e002      	b.n	80079d8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80079d2:	2300      	movs	r3, #0
 80079d4:	e000      	b.n	80079d8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80079d6:	2302      	movs	r3, #2
  }
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3730      	adds	r7, #48	; 0x30
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e4:	b09f      	sub	sp, #124	; 0x7c
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	691b      	ldr	r3, [r3, #16]
 80079f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80079f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079f6:	68d9      	ldr	r1, [r3, #12]
 80079f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	ea40 0301 	orr.w	r3, r0, r1
 8007a00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a04:	689a      	ldr	r2, [r3, #8]
 8007a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a08:	691b      	ldr	r3, [r3, #16]
 8007a0a:	431a      	orrs	r2, r3
 8007a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a0e:	695b      	ldr	r3, [r3, #20]
 8007a10:	431a      	orrs	r2, r3
 8007a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a14:	69db      	ldr	r3, [r3, #28]
 8007a16:	4313      	orrs	r3, r2
 8007a18:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007a24:	f021 010c 	bic.w	r1, r1, #12
 8007a28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a2e:	430b      	orrs	r3, r1
 8007a30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007a32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	695b      	ldr	r3, [r3, #20]
 8007a38:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007a3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a3e:	6999      	ldr	r1, [r3, #24]
 8007a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	ea40 0301 	orr.w	r3, r0, r1
 8007a48:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007a4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	4bc5      	ldr	r3, [pc, #788]	; (8007d64 <UART_SetConfig+0x384>)
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d004      	beq.n	8007a5e <UART_SetConfig+0x7e>
 8007a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	4bc3      	ldr	r3, [pc, #780]	; (8007d68 <UART_SetConfig+0x388>)
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d103      	bne.n	8007a66 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007a5e:	f7fe f99b 	bl	8005d98 <HAL_RCC_GetPCLK2Freq>
 8007a62:	6778      	str	r0, [r7, #116]	; 0x74
 8007a64:	e002      	b.n	8007a6c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007a66:	f7fe f983 	bl	8005d70 <HAL_RCC_GetPCLK1Freq>
 8007a6a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a6e:	69db      	ldr	r3, [r3, #28]
 8007a70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a74:	f040 80b6 	bne.w	8007be4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007a78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a7a:	461c      	mov	r4, r3
 8007a7c:	f04f 0500 	mov.w	r5, #0
 8007a80:	4622      	mov	r2, r4
 8007a82:	462b      	mov	r3, r5
 8007a84:	1891      	adds	r1, r2, r2
 8007a86:	6439      	str	r1, [r7, #64]	; 0x40
 8007a88:	415b      	adcs	r3, r3
 8007a8a:	647b      	str	r3, [r7, #68]	; 0x44
 8007a8c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007a90:	1912      	adds	r2, r2, r4
 8007a92:	eb45 0303 	adc.w	r3, r5, r3
 8007a96:	f04f 0000 	mov.w	r0, #0
 8007a9a:	f04f 0100 	mov.w	r1, #0
 8007a9e:	00d9      	lsls	r1, r3, #3
 8007aa0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007aa4:	00d0      	lsls	r0, r2, #3
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	460b      	mov	r3, r1
 8007aaa:	1911      	adds	r1, r2, r4
 8007aac:	6639      	str	r1, [r7, #96]	; 0x60
 8007aae:	416b      	adcs	r3, r5
 8007ab0:	667b      	str	r3, [r7, #100]	; 0x64
 8007ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	f04f 0300 	mov.w	r3, #0
 8007abc:	1891      	adds	r1, r2, r2
 8007abe:	63b9      	str	r1, [r7, #56]	; 0x38
 8007ac0:	415b      	adcs	r3, r3
 8007ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ac4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007ac8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007acc:	f7f9 f8c4 	bl	8000c58 <__aeabi_uldivmod>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	4ba5      	ldr	r3, [pc, #660]	; (8007d6c <UART_SetConfig+0x38c>)
 8007ad6:	fba3 2302 	umull	r2, r3, r3, r2
 8007ada:	095b      	lsrs	r3, r3, #5
 8007adc:	011e      	lsls	r6, r3, #4
 8007ade:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ae0:	461c      	mov	r4, r3
 8007ae2:	f04f 0500 	mov.w	r5, #0
 8007ae6:	4622      	mov	r2, r4
 8007ae8:	462b      	mov	r3, r5
 8007aea:	1891      	adds	r1, r2, r2
 8007aec:	6339      	str	r1, [r7, #48]	; 0x30
 8007aee:	415b      	adcs	r3, r3
 8007af0:	637b      	str	r3, [r7, #52]	; 0x34
 8007af2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007af6:	1912      	adds	r2, r2, r4
 8007af8:	eb45 0303 	adc.w	r3, r5, r3
 8007afc:	f04f 0000 	mov.w	r0, #0
 8007b00:	f04f 0100 	mov.w	r1, #0
 8007b04:	00d9      	lsls	r1, r3, #3
 8007b06:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007b0a:	00d0      	lsls	r0, r2, #3
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	460b      	mov	r3, r1
 8007b10:	1911      	adds	r1, r2, r4
 8007b12:	65b9      	str	r1, [r7, #88]	; 0x58
 8007b14:	416b      	adcs	r3, r5
 8007b16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	f04f 0300 	mov.w	r3, #0
 8007b22:	1891      	adds	r1, r2, r2
 8007b24:	62b9      	str	r1, [r7, #40]	; 0x28
 8007b26:	415b      	adcs	r3, r3
 8007b28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007b2e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007b32:	f7f9 f891 	bl	8000c58 <__aeabi_uldivmod>
 8007b36:	4602      	mov	r2, r0
 8007b38:	460b      	mov	r3, r1
 8007b3a:	4b8c      	ldr	r3, [pc, #560]	; (8007d6c <UART_SetConfig+0x38c>)
 8007b3c:	fba3 1302 	umull	r1, r3, r3, r2
 8007b40:	095b      	lsrs	r3, r3, #5
 8007b42:	2164      	movs	r1, #100	; 0x64
 8007b44:	fb01 f303 	mul.w	r3, r1, r3
 8007b48:	1ad3      	subs	r3, r2, r3
 8007b4a:	00db      	lsls	r3, r3, #3
 8007b4c:	3332      	adds	r3, #50	; 0x32
 8007b4e:	4a87      	ldr	r2, [pc, #540]	; (8007d6c <UART_SetConfig+0x38c>)
 8007b50:	fba2 2303 	umull	r2, r3, r2, r3
 8007b54:	095b      	lsrs	r3, r3, #5
 8007b56:	005b      	lsls	r3, r3, #1
 8007b58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007b5c:	441e      	add	r6, r3
 8007b5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b60:	4618      	mov	r0, r3
 8007b62:	f04f 0100 	mov.w	r1, #0
 8007b66:	4602      	mov	r2, r0
 8007b68:	460b      	mov	r3, r1
 8007b6a:	1894      	adds	r4, r2, r2
 8007b6c:	623c      	str	r4, [r7, #32]
 8007b6e:	415b      	adcs	r3, r3
 8007b70:	627b      	str	r3, [r7, #36]	; 0x24
 8007b72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b76:	1812      	adds	r2, r2, r0
 8007b78:	eb41 0303 	adc.w	r3, r1, r3
 8007b7c:	f04f 0400 	mov.w	r4, #0
 8007b80:	f04f 0500 	mov.w	r5, #0
 8007b84:	00dd      	lsls	r5, r3, #3
 8007b86:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007b8a:	00d4      	lsls	r4, r2, #3
 8007b8c:	4622      	mov	r2, r4
 8007b8e:	462b      	mov	r3, r5
 8007b90:	1814      	adds	r4, r2, r0
 8007b92:	653c      	str	r4, [r7, #80]	; 0x50
 8007b94:	414b      	adcs	r3, r1
 8007b96:	657b      	str	r3, [r7, #84]	; 0x54
 8007b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	f04f 0300 	mov.w	r3, #0
 8007ba2:	1891      	adds	r1, r2, r2
 8007ba4:	61b9      	str	r1, [r7, #24]
 8007ba6:	415b      	adcs	r3, r3
 8007ba8:	61fb      	str	r3, [r7, #28]
 8007baa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007bae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007bb2:	f7f9 f851 	bl	8000c58 <__aeabi_uldivmod>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	460b      	mov	r3, r1
 8007bba:	4b6c      	ldr	r3, [pc, #432]	; (8007d6c <UART_SetConfig+0x38c>)
 8007bbc:	fba3 1302 	umull	r1, r3, r3, r2
 8007bc0:	095b      	lsrs	r3, r3, #5
 8007bc2:	2164      	movs	r1, #100	; 0x64
 8007bc4:	fb01 f303 	mul.w	r3, r1, r3
 8007bc8:	1ad3      	subs	r3, r2, r3
 8007bca:	00db      	lsls	r3, r3, #3
 8007bcc:	3332      	adds	r3, #50	; 0x32
 8007bce:	4a67      	ldr	r2, [pc, #412]	; (8007d6c <UART_SetConfig+0x38c>)
 8007bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8007bd4:	095b      	lsrs	r3, r3, #5
 8007bd6:	f003 0207 	and.w	r2, r3, #7
 8007bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4432      	add	r2, r6
 8007be0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007be2:	e0b9      	b.n	8007d58 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007be4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007be6:	461c      	mov	r4, r3
 8007be8:	f04f 0500 	mov.w	r5, #0
 8007bec:	4622      	mov	r2, r4
 8007bee:	462b      	mov	r3, r5
 8007bf0:	1891      	adds	r1, r2, r2
 8007bf2:	6139      	str	r1, [r7, #16]
 8007bf4:	415b      	adcs	r3, r3
 8007bf6:	617b      	str	r3, [r7, #20]
 8007bf8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007bfc:	1912      	adds	r2, r2, r4
 8007bfe:	eb45 0303 	adc.w	r3, r5, r3
 8007c02:	f04f 0000 	mov.w	r0, #0
 8007c06:	f04f 0100 	mov.w	r1, #0
 8007c0a:	00d9      	lsls	r1, r3, #3
 8007c0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007c10:	00d0      	lsls	r0, r2, #3
 8007c12:	4602      	mov	r2, r0
 8007c14:	460b      	mov	r3, r1
 8007c16:	eb12 0804 	adds.w	r8, r2, r4
 8007c1a:	eb43 0905 	adc.w	r9, r3, r5
 8007c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	4618      	mov	r0, r3
 8007c24:	f04f 0100 	mov.w	r1, #0
 8007c28:	f04f 0200 	mov.w	r2, #0
 8007c2c:	f04f 0300 	mov.w	r3, #0
 8007c30:	008b      	lsls	r3, r1, #2
 8007c32:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007c36:	0082      	lsls	r2, r0, #2
 8007c38:	4640      	mov	r0, r8
 8007c3a:	4649      	mov	r1, r9
 8007c3c:	f7f9 f80c 	bl	8000c58 <__aeabi_uldivmod>
 8007c40:	4602      	mov	r2, r0
 8007c42:	460b      	mov	r3, r1
 8007c44:	4b49      	ldr	r3, [pc, #292]	; (8007d6c <UART_SetConfig+0x38c>)
 8007c46:	fba3 2302 	umull	r2, r3, r3, r2
 8007c4a:	095b      	lsrs	r3, r3, #5
 8007c4c:	011e      	lsls	r6, r3, #4
 8007c4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c50:	4618      	mov	r0, r3
 8007c52:	f04f 0100 	mov.w	r1, #0
 8007c56:	4602      	mov	r2, r0
 8007c58:	460b      	mov	r3, r1
 8007c5a:	1894      	adds	r4, r2, r2
 8007c5c:	60bc      	str	r4, [r7, #8]
 8007c5e:	415b      	adcs	r3, r3
 8007c60:	60fb      	str	r3, [r7, #12]
 8007c62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c66:	1812      	adds	r2, r2, r0
 8007c68:	eb41 0303 	adc.w	r3, r1, r3
 8007c6c:	f04f 0400 	mov.w	r4, #0
 8007c70:	f04f 0500 	mov.w	r5, #0
 8007c74:	00dd      	lsls	r5, r3, #3
 8007c76:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007c7a:	00d4      	lsls	r4, r2, #3
 8007c7c:	4622      	mov	r2, r4
 8007c7e:	462b      	mov	r3, r5
 8007c80:	1814      	adds	r4, r2, r0
 8007c82:	64bc      	str	r4, [r7, #72]	; 0x48
 8007c84:	414b      	adcs	r3, r1
 8007c86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f04f 0100 	mov.w	r1, #0
 8007c92:	f04f 0200 	mov.w	r2, #0
 8007c96:	f04f 0300 	mov.w	r3, #0
 8007c9a:	008b      	lsls	r3, r1, #2
 8007c9c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007ca0:	0082      	lsls	r2, r0, #2
 8007ca2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007ca6:	f7f8 ffd7 	bl	8000c58 <__aeabi_uldivmod>
 8007caa:	4602      	mov	r2, r0
 8007cac:	460b      	mov	r3, r1
 8007cae:	4b2f      	ldr	r3, [pc, #188]	; (8007d6c <UART_SetConfig+0x38c>)
 8007cb0:	fba3 1302 	umull	r1, r3, r3, r2
 8007cb4:	095b      	lsrs	r3, r3, #5
 8007cb6:	2164      	movs	r1, #100	; 0x64
 8007cb8:	fb01 f303 	mul.w	r3, r1, r3
 8007cbc:	1ad3      	subs	r3, r2, r3
 8007cbe:	011b      	lsls	r3, r3, #4
 8007cc0:	3332      	adds	r3, #50	; 0x32
 8007cc2:	4a2a      	ldr	r2, [pc, #168]	; (8007d6c <UART_SetConfig+0x38c>)
 8007cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8007cc8:	095b      	lsrs	r3, r3, #5
 8007cca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007cce:	441e      	add	r6, r3
 8007cd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f04f 0100 	mov.w	r1, #0
 8007cd8:	4602      	mov	r2, r0
 8007cda:	460b      	mov	r3, r1
 8007cdc:	1894      	adds	r4, r2, r2
 8007cde:	603c      	str	r4, [r7, #0]
 8007ce0:	415b      	adcs	r3, r3
 8007ce2:	607b      	str	r3, [r7, #4]
 8007ce4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ce8:	1812      	adds	r2, r2, r0
 8007cea:	eb41 0303 	adc.w	r3, r1, r3
 8007cee:	f04f 0400 	mov.w	r4, #0
 8007cf2:	f04f 0500 	mov.w	r5, #0
 8007cf6:	00dd      	lsls	r5, r3, #3
 8007cf8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007cfc:	00d4      	lsls	r4, r2, #3
 8007cfe:	4622      	mov	r2, r4
 8007d00:	462b      	mov	r3, r5
 8007d02:	eb12 0a00 	adds.w	sl, r2, r0
 8007d06:	eb43 0b01 	adc.w	fp, r3, r1
 8007d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f04f 0100 	mov.w	r1, #0
 8007d14:	f04f 0200 	mov.w	r2, #0
 8007d18:	f04f 0300 	mov.w	r3, #0
 8007d1c:	008b      	lsls	r3, r1, #2
 8007d1e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007d22:	0082      	lsls	r2, r0, #2
 8007d24:	4650      	mov	r0, sl
 8007d26:	4659      	mov	r1, fp
 8007d28:	f7f8 ff96 	bl	8000c58 <__aeabi_uldivmod>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	460b      	mov	r3, r1
 8007d30:	4b0e      	ldr	r3, [pc, #56]	; (8007d6c <UART_SetConfig+0x38c>)
 8007d32:	fba3 1302 	umull	r1, r3, r3, r2
 8007d36:	095b      	lsrs	r3, r3, #5
 8007d38:	2164      	movs	r1, #100	; 0x64
 8007d3a:	fb01 f303 	mul.w	r3, r1, r3
 8007d3e:	1ad3      	subs	r3, r2, r3
 8007d40:	011b      	lsls	r3, r3, #4
 8007d42:	3332      	adds	r3, #50	; 0x32
 8007d44:	4a09      	ldr	r2, [pc, #36]	; (8007d6c <UART_SetConfig+0x38c>)
 8007d46:	fba2 2303 	umull	r2, r3, r2, r3
 8007d4a:	095b      	lsrs	r3, r3, #5
 8007d4c:	f003 020f 	and.w	r2, r3, #15
 8007d50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4432      	add	r2, r6
 8007d56:	609a      	str	r2, [r3, #8]
}
 8007d58:	bf00      	nop
 8007d5a:	377c      	adds	r7, #124	; 0x7c
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d62:	bf00      	nop
 8007d64:	40011000 	.word	0x40011000
 8007d68:	40011400 	.word	0x40011400
 8007d6c:	51eb851f 	.word	0x51eb851f

08007d70 <__errno>:
 8007d70:	4b01      	ldr	r3, [pc, #4]	; (8007d78 <__errno+0x8>)
 8007d72:	6818      	ldr	r0, [r3, #0]
 8007d74:	4770      	bx	lr
 8007d76:	bf00      	nop
 8007d78:	2000000c 	.word	0x2000000c

08007d7c <__libc_init_array>:
 8007d7c:	b570      	push	{r4, r5, r6, lr}
 8007d7e:	4d0d      	ldr	r5, [pc, #52]	; (8007db4 <__libc_init_array+0x38>)
 8007d80:	4c0d      	ldr	r4, [pc, #52]	; (8007db8 <__libc_init_array+0x3c>)
 8007d82:	1b64      	subs	r4, r4, r5
 8007d84:	10a4      	asrs	r4, r4, #2
 8007d86:	2600      	movs	r6, #0
 8007d88:	42a6      	cmp	r6, r4
 8007d8a:	d109      	bne.n	8007da0 <__libc_init_array+0x24>
 8007d8c:	4d0b      	ldr	r5, [pc, #44]	; (8007dbc <__libc_init_array+0x40>)
 8007d8e:	4c0c      	ldr	r4, [pc, #48]	; (8007dc0 <__libc_init_array+0x44>)
 8007d90:	f003 f92c 	bl	800afec <_init>
 8007d94:	1b64      	subs	r4, r4, r5
 8007d96:	10a4      	asrs	r4, r4, #2
 8007d98:	2600      	movs	r6, #0
 8007d9a:	42a6      	cmp	r6, r4
 8007d9c:	d105      	bne.n	8007daa <__libc_init_array+0x2e>
 8007d9e:	bd70      	pop	{r4, r5, r6, pc}
 8007da0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007da4:	4798      	blx	r3
 8007da6:	3601      	adds	r6, #1
 8007da8:	e7ee      	b.n	8007d88 <__libc_init_array+0xc>
 8007daa:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dae:	4798      	blx	r3
 8007db0:	3601      	adds	r6, #1
 8007db2:	e7f2      	b.n	8007d9a <__libc_init_array+0x1e>
 8007db4:	0800b4c0 	.word	0x0800b4c0
 8007db8:	0800b4c0 	.word	0x0800b4c0
 8007dbc:	0800b4c0 	.word	0x0800b4c0
 8007dc0:	0800b4c4 	.word	0x0800b4c4

08007dc4 <memset>:
 8007dc4:	4402      	add	r2, r0
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d100      	bne.n	8007dce <memset+0xa>
 8007dcc:	4770      	bx	lr
 8007dce:	f803 1b01 	strb.w	r1, [r3], #1
 8007dd2:	e7f9      	b.n	8007dc8 <memset+0x4>

08007dd4 <__cvt>:
 8007dd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007dd8:	ec55 4b10 	vmov	r4, r5, d0
 8007ddc:	2d00      	cmp	r5, #0
 8007dde:	460e      	mov	r6, r1
 8007de0:	4619      	mov	r1, r3
 8007de2:	462b      	mov	r3, r5
 8007de4:	bfbb      	ittet	lt
 8007de6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007dea:	461d      	movlt	r5, r3
 8007dec:	2300      	movge	r3, #0
 8007dee:	232d      	movlt	r3, #45	; 0x2d
 8007df0:	700b      	strb	r3, [r1, #0]
 8007df2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007df4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007df8:	4691      	mov	r9, r2
 8007dfa:	f023 0820 	bic.w	r8, r3, #32
 8007dfe:	bfbc      	itt	lt
 8007e00:	4622      	movlt	r2, r4
 8007e02:	4614      	movlt	r4, r2
 8007e04:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007e08:	d005      	beq.n	8007e16 <__cvt+0x42>
 8007e0a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007e0e:	d100      	bne.n	8007e12 <__cvt+0x3e>
 8007e10:	3601      	adds	r6, #1
 8007e12:	2102      	movs	r1, #2
 8007e14:	e000      	b.n	8007e18 <__cvt+0x44>
 8007e16:	2103      	movs	r1, #3
 8007e18:	ab03      	add	r3, sp, #12
 8007e1a:	9301      	str	r3, [sp, #4]
 8007e1c:	ab02      	add	r3, sp, #8
 8007e1e:	9300      	str	r3, [sp, #0]
 8007e20:	ec45 4b10 	vmov	d0, r4, r5
 8007e24:	4653      	mov	r3, sl
 8007e26:	4632      	mov	r2, r6
 8007e28:	f000 fcea 	bl	8008800 <_dtoa_r>
 8007e2c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007e30:	4607      	mov	r7, r0
 8007e32:	d102      	bne.n	8007e3a <__cvt+0x66>
 8007e34:	f019 0f01 	tst.w	r9, #1
 8007e38:	d022      	beq.n	8007e80 <__cvt+0xac>
 8007e3a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007e3e:	eb07 0906 	add.w	r9, r7, r6
 8007e42:	d110      	bne.n	8007e66 <__cvt+0x92>
 8007e44:	783b      	ldrb	r3, [r7, #0]
 8007e46:	2b30      	cmp	r3, #48	; 0x30
 8007e48:	d10a      	bne.n	8007e60 <__cvt+0x8c>
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	4620      	mov	r0, r4
 8007e50:	4629      	mov	r1, r5
 8007e52:	f7f8 fe41 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e56:	b918      	cbnz	r0, 8007e60 <__cvt+0x8c>
 8007e58:	f1c6 0601 	rsb	r6, r6, #1
 8007e5c:	f8ca 6000 	str.w	r6, [sl]
 8007e60:	f8da 3000 	ldr.w	r3, [sl]
 8007e64:	4499      	add	r9, r3
 8007e66:	2200      	movs	r2, #0
 8007e68:	2300      	movs	r3, #0
 8007e6a:	4620      	mov	r0, r4
 8007e6c:	4629      	mov	r1, r5
 8007e6e:	f7f8 fe33 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e72:	b108      	cbz	r0, 8007e78 <__cvt+0xa4>
 8007e74:	f8cd 900c 	str.w	r9, [sp, #12]
 8007e78:	2230      	movs	r2, #48	; 0x30
 8007e7a:	9b03      	ldr	r3, [sp, #12]
 8007e7c:	454b      	cmp	r3, r9
 8007e7e:	d307      	bcc.n	8007e90 <__cvt+0xbc>
 8007e80:	9b03      	ldr	r3, [sp, #12]
 8007e82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e84:	1bdb      	subs	r3, r3, r7
 8007e86:	4638      	mov	r0, r7
 8007e88:	6013      	str	r3, [r2, #0]
 8007e8a:	b004      	add	sp, #16
 8007e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e90:	1c59      	adds	r1, r3, #1
 8007e92:	9103      	str	r1, [sp, #12]
 8007e94:	701a      	strb	r2, [r3, #0]
 8007e96:	e7f0      	b.n	8007e7a <__cvt+0xa6>

08007e98 <__exponent>:
 8007e98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2900      	cmp	r1, #0
 8007e9e:	bfb8      	it	lt
 8007ea0:	4249      	neglt	r1, r1
 8007ea2:	f803 2b02 	strb.w	r2, [r3], #2
 8007ea6:	bfb4      	ite	lt
 8007ea8:	222d      	movlt	r2, #45	; 0x2d
 8007eaa:	222b      	movge	r2, #43	; 0x2b
 8007eac:	2909      	cmp	r1, #9
 8007eae:	7042      	strb	r2, [r0, #1]
 8007eb0:	dd2a      	ble.n	8007f08 <__exponent+0x70>
 8007eb2:	f10d 0407 	add.w	r4, sp, #7
 8007eb6:	46a4      	mov	ip, r4
 8007eb8:	270a      	movs	r7, #10
 8007eba:	46a6      	mov	lr, r4
 8007ebc:	460a      	mov	r2, r1
 8007ebe:	fb91 f6f7 	sdiv	r6, r1, r7
 8007ec2:	fb07 1516 	mls	r5, r7, r6, r1
 8007ec6:	3530      	adds	r5, #48	; 0x30
 8007ec8:	2a63      	cmp	r2, #99	; 0x63
 8007eca:	f104 34ff 	add.w	r4, r4, #4294967295
 8007ece:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007ed2:	4631      	mov	r1, r6
 8007ed4:	dcf1      	bgt.n	8007eba <__exponent+0x22>
 8007ed6:	3130      	adds	r1, #48	; 0x30
 8007ed8:	f1ae 0502 	sub.w	r5, lr, #2
 8007edc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007ee0:	1c44      	adds	r4, r0, #1
 8007ee2:	4629      	mov	r1, r5
 8007ee4:	4561      	cmp	r1, ip
 8007ee6:	d30a      	bcc.n	8007efe <__exponent+0x66>
 8007ee8:	f10d 0209 	add.w	r2, sp, #9
 8007eec:	eba2 020e 	sub.w	r2, r2, lr
 8007ef0:	4565      	cmp	r5, ip
 8007ef2:	bf88      	it	hi
 8007ef4:	2200      	movhi	r2, #0
 8007ef6:	4413      	add	r3, r2
 8007ef8:	1a18      	subs	r0, r3, r0
 8007efa:	b003      	add	sp, #12
 8007efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007efe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f02:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007f06:	e7ed      	b.n	8007ee4 <__exponent+0x4c>
 8007f08:	2330      	movs	r3, #48	; 0x30
 8007f0a:	3130      	adds	r1, #48	; 0x30
 8007f0c:	7083      	strb	r3, [r0, #2]
 8007f0e:	70c1      	strb	r1, [r0, #3]
 8007f10:	1d03      	adds	r3, r0, #4
 8007f12:	e7f1      	b.n	8007ef8 <__exponent+0x60>

08007f14 <_printf_float>:
 8007f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f18:	ed2d 8b02 	vpush	{d8}
 8007f1c:	b08d      	sub	sp, #52	; 0x34
 8007f1e:	460c      	mov	r4, r1
 8007f20:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007f24:	4616      	mov	r6, r2
 8007f26:	461f      	mov	r7, r3
 8007f28:	4605      	mov	r5, r0
 8007f2a:	f001 fa55 	bl	80093d8 <_localeconv_r>
 8007f2e:	f8d0 a000 	ldr.w	sl, [r0]
 8007f32:	4650      	mov	r0, sl
 8007f34:	f7f8 f954 	bl	80001e0 <strlen>
 8007f38:	2300      	movs	r3, #0
 8007f3a:	930a      	str	r3, [sp, #40]	; 0x28
 8007f3c:	6823      	ldr	r3, [r4, #0]
 8007f3e:	9305      	str	r3, [sp, #20]
 8007f40:	f8d8 3000 	ldr.w	r3, [r8]
 8007f44:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007f48:	3307      	adds	r3, #7
 8007f4a:	f023 0307 	bic.w	r3, r3, #7
 8007f4e:	f103 0208 	add.w	r2, r3, #8
 8007f52:	f8c8 2000 	str.w	r2, [r8]
 8007f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007f5e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007f62:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007f66:	9307      	str	r3, [sp, #28]
 8007f68:	f8cd 8018 	str.w	r8, [sp, #24]
 8007f6c:	ee08 0a10 	vmov	s16, r0
 8007f70:	4b9f      	ldr	r3, [pc, #636]	; (80081f0 <_printf_float+0x2dc>)
 8007f72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f76:	f04f 32ff 	mov.w	r2, #4294967295
 8007f7a:	f7f8 fddf 	bl	8000b3c <__aeabi_dcmpun>
 8007f7e:	bb88      	cbnz	r0, 8007fe4 <_printf_float+0xd0>
 8007f80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f84:	4b9a      	ldr	r3, [pc, #616]	; (80081f0 <_printf_float+0x2dc>)
 8007f86:	f04f 32ff 	mov.w	r2, #4294967295
 8007f8a:	f7f8 fdb9 	bl	8000b00 <__aeabi_dcmple>
 8007f8e:	bb48      	cbnz	r0, 8007fe4 <_printf_float+0xd0>
 8007f90:	2200      	movs	r2, #0
 8007f92:	2300      	movs	r3, #0
 8007f94:	4640      	mov	r0, r8
 8007f96:	4649      	mov	r1, r9
 8007f98:	f7f8 fda8 	bl	8000aec <__aeabi_dcmplt>
 8007f9c:	b110      	cbz	r0, 8007fa4 <_printf_float+0x90>
 8007f9e:	232d      	movs	r3, #45	; 0x2d
 8007fa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fa4:	4b93      	ldr	r3, [pc, #588]	; (80081f4 <_printf_float+0x2e0>)
 8007fa6:	4894      	ldr	r0, [pc, #592]	; (80081f8 <_printf_float+0x2e4>)
 8007fa8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007fac:	bf94      	ite	ls
 8007fae:	4698      	movls	r8, r3
 8007fb0:	4680      	movhi	r8, r0
 8007fb2:	2303      	movs	r3, #3
 8007fb4:	6123      	str	r3, [r4, #16]
 8007fb6:	9b05      	ldr	r3, [sp, #20]
 8007fb8:	f023 0204 	bic.w	r2, r3, #4
 8007fbc:	6022      	str	r2, [r4, #0]
 8007fbe:	f04f 0900 	mov.w	r9, #0
 8007fc2:	9700      	str	r7, [sp, #0]
 8007fc4:	4633      	mov	r3, r6
 8007fc6:	aa0b      	add	r2, sp, #44	; 0x2c
 8007fc8:	4621      	mov	r1, r4
 8007fca:	4628      	mov	r0, r5
 8007fcc:	f000 f9d8 	bl	8008380 <_printf_common>
 8007fd0:	3001      	adds	r0, #1
 8007fd2:	f040 8090 	bne.w	80080f6 <_printf_float+0x1e2>
 8007fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8007fda:	b00d      	add	sp, #52	; 0x34
 8007fdc:	ecbd 8b02 	vpop	{d8}
 8007fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fe4:	4642      	mov	r2, r8
 8007fe6:	464b      	mov	r3, r9
 8007fe8:	4640      	mov	r0, r8
 8007fea:	4649      	mov	r1, r9
 8007fec:	f7f8 fda6 	bl	8000b3c <__aeabi_dcmpun>
 8007ff0:	b140      	cbz	r0, 8008004 <_printf_float+0xf0>
 8007ff2:	464b      	mov	r3, r9
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	bfbc      	itt	lt
 8007ff8:	232d      	movlt	r3, #45	; 0x2d
 8007ffa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007ffe:	487f      	ldr	r0, [pc, #508]	; (80081fc <_printf_float+0x2e8>)
 8008000:	4b7f      	ldr	r3, [pc, #508]	; (8008200 <_printf_float+0x2ec>)
 8008002:	e7d1      	b.n	8007fa8 <_printf_float+0x94>
 8008004:	6863      	ldr	r3, [r4, #4]
 8008006:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800800a:	9206      	str	r2, [sp, #24]
 800800c:	1c5a      	adds	r2, r3, #1
 800800e:	d13f      	bne.n	8008090 <_printf_float+0x17c>
 8008010:	2306      	movs	r3, #6
 8008012:	6063      	str	r3, [r4, #4]
 8008014:	9b05      	ldr	r3, [sp, #20]
 8008016:	6861      	ldr	r1, [r4, #4]
 8008018:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800801c:	2300      	movs	r3, #0
 800801e:	9303      	str	r3, [sp, #12]
 8008020:	ab0a      	add	r3, sp, #40	; 0x28
 8008022:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008026:	ab09      	add	r3, sp, #36	; 0x24
 8008028:	ec49 8b10 	vmov	d0, r8, r9
 800802c:	9300      	str	r3, [sp, #0]
 800802e:	6022      	str	r2, [r4, #0]
 8008030:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008034:	4628      	mov	r0, r5
 8008036:	f7ff fecd 	bl	8007dd4 <__cvt>
 800803a:	9b06      	ldr	r3, [sp, #24]
 800803c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800803e:	2b47      	cmp	r3, #71	; 0x47
 8008040:	4680      	mov	r8, r0
 8008042:	d108      	bne.n	8008056 <_printf_float+0x142>
 8008044:	1cc8      	adds	r0, r1, #3
 8008046:	db02      	blt.n	800804e <_printf_float+0x13a>
 8008048:	6863      	ldr	r3, [r4, #4]
 800804a:	4299      	cmp	r1, r3
 800804c:	dd41      	ble.n	80080d2 <_printf_float+0x1be>
 800804e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008052:	fa5f fb8b 	uxtb.w	fp, fp
 8008056:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800805a:	d820      	bhi.n	800809e <_printf_float+0x18a>
 800805c:	3901      	subs	r1, #1
 800805e:	465a      	mov	r2, fp
 8008060:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008064:	9109      	str	r1, [sp, #36]	; 0x24
 8008066:	f7ff ff17 	bl	8007e98 <__exponent>
 800806a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800806c:	1813      	adds	r3, r2, r0
 800806e:	2a01      	cmp	r2, #1
 8008070:	4681      	mov	r9, r0
 8008072:	6123      	str	r3, [r4, #16]
 8008074:	dc02      	bgt.n	800807c <_printf_float+0x168>
 8008076:	6822      	ldr	r2, [r4, #0]
 8008078:	07d2      	lsls	r2, r2, #31
 800807a:	d501      	bpl.n	8008080 <_printf_float+0x16c>
 800807c:	3301      	adds	r3, #1
 800807e:	6123      	str	r3, [r4, #16]
 8008080:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008084:	2b00      	cmp	r3, #0
 8008086:	d09c      	beq.n	8007fc2 <_printf_float+0xae>
 8008088:	232d      	movs	r3, #45	; 0x2d
 800808a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800808e:	e798      	b.n	8007fc2 <_printf_float+0xae>
 8008090:	9a06      	ldr	r2, [sp, #24]
 8008092:	2a47      	cmp	r2, #71	; 0x47
 8008094:	d1be      	bne.n	8008014 <_printf_float+0x100>
 8008096:	2b00      	cmp	r3, #0
 8008098:	d1bc      	bne.n	8008014 <_printf_float+0x100>
 800809a:	2301      	movs	r3, #1
 800809c:	e7b9      	b.n	8008012 <_printf_float+0xfe>
 800809e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80080a2:	d118      	bne.n	80080d6 <_printf_float+0x1c2>
 80080a4:	2900      	cmp	r1, #0
 80080a6:	6863      	ldr	r3, [r4, #4]
 80080a8:	dd0b      	ble.n	80080c2 <_printf_float+0x1ae>
 80080aa:	6121      	str	r1, [r4, #16]
 80080ac:	b913      	cbnz	r3, 80080b4 <_printf_float+0x1a0>
 80080ae:	6822      	ldr	r2, [r4, #0]
 80080b0:	07d0      	lsls	r0, r2, #31
 80080b2:	d502      	bpl.n	80080ba <_printf_float+0x1a6>
 80080b4:	3301      	adds	r3, #1
 80080b6:	440b      	add	r3, r1
 80080b8:	6123      	str	r3, [r4, #16]
 80080ba:	65a1      	str	r1, [r4, #88]	; 0x58
 80080bc:	f04f 0900 	mov.w	r9, #0
 80080c0:	e7de      	b.n	8008080 <_printf_float+0x16c>
 80080c2:	b913      	cbnz	r3, 80080ca <_printf_float+0x1b6>
 80080c4:	6822      	ldr	r2, [r4, #0]
 80080c6:	07d2      	lsls	r2, r2, #31
 80080c8:	d501      	bpl.n	80080ce <_printf_float+0x1ba>
 80080ca:	3302      	adds	r3, #2
 80080cc:	e7f4      	b.n	80080b8 <_printf_float+0x1a4>
 80080ce:	2301      	movs	r3, #1
 80080d0:	e7f2      	b.n	80080b8 <_printf_float+0x1a4>
 80080d2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80080d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080d8:	4299      	cmp	r1, r3
 80080da:	db05      	blt.n	80080e8 <_printf_float+0x1d4>
 80080dc:	6823      	ldr	r3, [r4, #0]
 80080de:	6121      	str	r1, [r4, #16]
 80080e0:	07d8      	lsls	r0, r3, #31
 80080e2:	d5ea      	bpl.n	80080ba <_printf_float+0x1a6>
 80080e4:	1c4b      	adds	r3, r1, #1
 80080e6:	e7e7      	b.n	80080b8 <_printf_float+0x1a4>
 80080e8:	2900      	cmp	r1, #0
 80080ea:	bfd4      	ite	le
 80080ec:	f1c1 0202 	rsble	r2, r1, #2
 80080f0:	2201      	movgt	r2, #1
 80080f2:	4413      	add	r3, r2
 80080f4:	e7e0      	b.n	80080b8 <_printf_float+0x1a4>
 80080f6:	6823      	ldr	r3, [r4, #0]
 80080f8:	055a      	lsls	r2, r3, #21
 80080fa:	d407      	bmi.n	800810c <_printf_float+0x1f8>
 80080fc:	6923      	ldr	r3, [r4, #16]
 80080fe:	4642      	mov	r2, r8
 8008100:	4631      	mov	r1, r6
 8008102:	4628      	mov	r0, r5
 8008104:	47b8      	blx	r7
 8008106:	3001      	adds	r0, #1
 8008108:	d12c      	bne.n	8008164 <_printf_float+0x250>
 800810a:	e764      	b.n	8007fd6 <_printf_float+0xc2>
 800810c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008110:	f240 80e0 	bls.w	80082d4 <_printf_float+0x3c0>
 8008114:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008118:	2200      	movs	r2, #0
 800811a:	2300      	movs	r3, #0
 800811c:	f7f8 fcdc 	bl	8000ad8 <__aeabi_dcmpeq>
 8008120:	2800      	cmp	r0, #0
 8008122:	d034      	beq.n	800818e <_printf_float+0x27a>
 8008124:	4a37      	ldr	r2, [pc, #220]	; (8008204 <_printf_float+0x2f0>)
 8008126:	2301      	movs	r3, #1
 8008128:	4631      	mov	r1, r6
 800812a:	4628      	mov	r0, r5
 800812c:	47b8      	blx	r7
 800812e:	3001      	adds	r0, #1
 8008130:	f43f af51 	beq.w	8007fd6 <_printf_float+0xc2>
 8008134:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008138:	429a      	cmp	r2, r3
 800813a:	db02      	blt.n	8008142 <_printf_float+0x22e>
 800813c:	6823      	ldr	r3, [r4, #0]
 800813e:	07d8      	lsls	r0, r3, #31
 8008140:	d510      	bpl.n	8008164 <_printf_float+0x250>
 8008142:	ee18 3a10 	vmov	r3, s16
 8008146:	4652      	mov	r2, sl
 8008148:	4631      	mov	r1, r6
 800814a:	4628      	mov	r0, r5
 800814c:	47b8      	blx	r7
 800814e:	3001      	adds	r0, #1
 8008150:	f43f af41 	beq.w	8007fd6 <_printf_float+0xc2>
 8008154:	f04f 0800 	mov.w	r8, #0
 8008158:	f104 091a 	add.w	r9, r4, #26
 800815c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800815e:	3b01      	subs	r3, #1
 8008160:	4543      	cmp	r3, r8
 8008162:	dc09      	bgt.n	8008178 <_printf_float+0x264>
 8008164:	6823      	ldr	r3, [r4, #0]
 8008166:	079b      	lsls	r3, r3, #30
 8008168:	f100 8105 	bmi.w	8008376 <_printf_float+0x462>
 800816c:	68e0      	ldr	r0, [r4, #12]
 800816e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008170:	4298      	cmp	r0, r3
 8008172:	bfb8      	it	lt
 8008174:	4618      	movlt	r0, r3
 8008176:	e730      	b.n	8007fda <_printf_float+0xc6>
 8008178:	2301      	movs	r3, #1
 800817a:	464a      	mov	r2, r9
 800817c:	4631      	mov	r1, r6
 800817e:	4628      	mov	r0, r5
 8008180:	47b8      	blx	r7
 8008182:	3001      	adds	r0, #1
 8008184:	f43f af27 	beq.w	8007fd6 <_printf_float+0xc2>
 8008188:	f108 0801 	add.w	r8, r8, #1
 800818c:	e7e6      	b.n	800815c <_printf_float+0x248>
 800818e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008190:	2b00      	cmp	r3, #0
 8008192:	dc39      	bgt.n	8008208 <_printf_float+0x2f4>
 8008194:	4a1b      	ldr	r2, [pc, #108]	; (8008204 <_printf_float+0x2f0>)
 8008196:	2301      	movs	r3, #1
 8008198:	4631      	mov	r1, r6
 800819a:	4628      	mov	r0, r5
 800819c:	47b8      	blx	r7
 800819e:	3001      	adds	r0, #1
 80081a0:	f43f af19 	beq.w	8007fd6 <_printf_float+0xc2>
 80081a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081a8:	4313      	orrs	r3, r2
 80081aa:	d102      	bne.n	80081b2 <_printf_float+0x29e>
 80081ac:	6823      	ldr	r3, [r4, #0]
 80081ae:	07d9      	lsls	r1, r3, #31
 80081b0:	d5d8      	bpl.n	8008164 <_printf_float+0x250>
 80081b2:	ee18 3a10 	vmov	r3, s16
 80081b6:	4652      	mov	r2, sl
 80081b8:	4631      	mov	r1, r6
 80081ba:	4628      	mov	r0, r5
 80081bc:	47b8      	blx	r7
 80081be:	3001      	adds	r0, #1
 80081c0:	f43f af09 	beq.w	8007fd6 <_printf_float+0xc2>
 80081c4:	f04f 0900 	mov.w	r9, #0
 80081c8:	f104 0a1a 	add.w	sl, r4, #26
 80081cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081ce:	425b      	negs	r3, r3
 80081d0:	454b      	cmp	r3, r9
 80081d2:	dc01      	bgt.n	80081d8 <_printf_float+0x2c4>
 80081d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081d6:	e792      	b.n	80080fe <_printf_float+0x1ea>
 80081d8:	2301      	movs	r3, #1
 80081da:	4652      	mov	r2, sl
 80081dc:	4631      	mov	r1, r6
 80081de:	4628      	mov	r0, r5
 80081e0:	47b8      	blx	r7
 80081e2:	3001      	adds	r0, #1
 80081e4:	f43f aef7 	beq.w	8007fd6 <_printf_float+0xc2>
 80081e8:	f109 0901 	add.w	r9, r9, #1
 80081ec:	e7ee      	b.n	80081cc <_printf_float+0x2b8>
 80081ee:	bf00      	nop
 80081f0:	7fefffff 	.word	0x7fefffff
 80081f4:	0800b064 	.word	0x0800b064
 80081f8:	0800b068 	.word	0x0800b068
 80081fc:	0800b070 	.word	0x0800b070
 8008200:	0800b06c 	.word	0x0800b06c
 8008204:	0800b074 	.word	0x0800b074
 8008208:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800820a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800820c:	429a      	cmp	r2, r3
 800820e:	bfa8      	it	ge
 8008210:	461a      	movge	r2, r3
 8008212:	2a00      	cmp	r2, #0
 8008214:	4691      	mov	r9, r2
 8008216:	dc37      	bgt.n	8008288 <_printf_float+0x374>
 8008218:	f04f 0b00 	mov.w	fp, #0
 800821c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008220:	f104 021a 	add.w	r2, r4, #26
 8008224:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008226:	9305      	str	r3, [sp, #20]
 8008228:	eba3 0309 	sub.w	r3, r3, r9
 800822c:	455b      	cmp	r3, fp
 800822e:	dc33      	bgt.n	8008298 <_printf_float+0x384>
 8008230:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008234:	429a      	cmp	r2, r3
 8008236:	db3b      	blt.n	80082b0 <_printf_float+0x39c>
 8008238:	6823      	ldr	r3, [r4, #0]
 800823a:	07da      	lsls	r2, r3, #31
 800823c:	d438      	bmi.n	80082b0 <_printf_float+0x39c>
 800823e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008240:	9b05      	ldr	r3, [sp, #20]
 8008242:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008244:	1ad3      	subs	r3, r2, r3
 8008246:	eba2 0901 	sub.w	r9, r2, r1
 800824a:	4599      	cmp	r9, r3
 800824c:	bfa8      	it	ge
 800824e:	4699      	movge	r9, r3
 8008250:	f1b9 0f00 	cmp.w	r9, #0
 8008254:	dc35      	bgt.n	80082c2 <_printf_float+0x3ae>
 8008256:	f04f 0800 	mov.w	r8, #0
 800825a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800825e:	f104 0a1a 	add.w	sl, r4, #26
 8008262:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008266:	1a9b      	subs	r3, r3, r2
 8008268:	eba3 0309 	sub.w	r3, r3, r9
 800826c:	4543      	cmp	r3, r8
 800826e:	f77f af79 	ble.w	8008164 <_printf_float+0x250>
 8008272:	2301      	movs	r3, #1
 8008274:	4652      	mov	r2, sl
 8008276:	4631      	mov	r1, r6
 8008278:	4628      	mov	r0, r5
 800827a:	47b8      	blx	r7
 800827c:	3001      	adds	r0, #1
 800827e:	f43f aeaa 	beq.w	8007fd6 <_printf_float+0xc2>
 8008282:	f108 0801 	add.w	r8, r8, #1
 8008286:	e7ec      	b.n	8008262 <_printf_float+0x34e>
 8008288:	4613      	mov	r3, r2
 800828a:	4631      	mov	r1, r6
 800828c:	4642      	mov	r2, r8
 800828e:	4628      	mov	r0, r5
 8008290:	47b8      	blx	r7
 8008292:	3001      	adds	r0, #1
 8008294:	d1c0      	bne.n	8008218 <_printf_float+0x304>
 8008296:	e69e      	b.n	8007fd6 <_printf_float+0xc2>
 8008298:	2301      	movs	r3, #1
 800829a:	4631      	mov	r1, r6
 800829c:	4628      	mov	r0, r5
 800829e:	9205      	str	r2, [sp, #20]
 80082a0:	47b8      	blx	r7
 80082a2:	3001      	adds	r0, #1
 80082a4:	f43f ae97 	beq.w	8007fd6 <_printf_float+0xc2>
 80082a8:	9a05      	ldr	r2, [sp, #20]
 80082aa:	f10b 0b01 	add.w	fp, fp, #1
 80082ae:	e7b9      	b.n	8008224 <_printf_float+0x310>
 80082b0:	ee18 3a10 	vmov	r3, s16
 80082b4:	4652      	mov	r2, sl
 80082b6:	4631      	mov	r1, r6
 80082b8:	4628      	mov	r0, r5
 80082ba:	47b8      	blx	r7
 80082bc:	3001      	adds	r0, #1
 80082be:	d1be      	bne.n	800823e <_printf_float+0x32a>
 80082c0:	e689      	b.n	8007fd6 <_printf_float+0xc2>
 80082c2:	9a05      	ldr	r2, [sp, #20]
 80082c4:	464b      	mov	r3, r9
 80082c6:	4442      	add	r2, r8
 80082c8:	4631      	mov	r1, r6
 80082ca:	4628      	mov	r0, r5
 80082cc:	47b8      	blx	r7
 80082ce:	3001      	adds	r0, #1
 80082d0:	d1c1      	bne.n	8008256 <_printf_float+0x342>
 80082d2:	e680      	b.n	8007fd6 <_printf_float+0xc2>
 80082d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082d6:	2a01      	cmp	r2, #1
 80082d8:	dc01      	bgt.n	80082de <_printf_float+0x3ca>
 80082da:	07db      	lsls	r3, r3, #31
 80082dc:	d538      	bpl.n	8008350 <_printf_float+0x43c>
 80082de:	2301      	movs	r3, #1
 80082e0:	4642      	mov	r2, r8
 80082e2:	4631      	mov	r1, r6
 80082e4:	4628      	mov	r0, r5
 80082e6:	47b8      	blx	r7
 80082e8:	3001      	adds	r0, #1
 80082ea:	f43f ae74 	beq.w	8007fd6 <_printf_float+0xc2>
 80082ee:	ee18 3a10 	vmov	r3, s16
 80082f2:	4652      	mov	r2, sl
 80082f4:	4631      	mov	r1, r6
 80082f6:	4628      	mov	r0, r5
 80082f8:	47b8      	blx	r7
 80082fa:	3001      	adds	r0, #1
 80082fc:	f43f ae6b 	beq.w	8007fd6 <_printf_float+0xc2>
 8008300:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008304:	2200      	movs	r2, #0
 8008306:	2300      	movs	r3, #0
 8008308:	f7f8 fbe6 	bl	8000ad8 <__aeabi_dcmpeq>
 800830c:	b9d8      	cbnz	r0, 8008346 <_printf_float+0x432>
 800830e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008310:	f108 0201 	add.w	r2, r8, #1
 8008314:	3b01      	subs	r3, #1
 8008316:	4631      	mov	r1, r6
 8008318:	4628      	mov	r0, r5
 800831a:	47b8      	blx	r7
 800831c:	3001      	adds	r0, #1
 800831e:	d10e      	bne.n	800833e <_printf_float+0x42a>
 8008320:	e659      	b.n	8007fd6 <_printf_float+0xc2>
 8008322:	2301      	movs	r3, #1
 8008324:	4652      	mov	r2, sl
 8008326:	4631      	mov	r1, r6
 8008328:	4628      	mov	r0, r5
 800832a:	47b8      	blx	r7
 800832c:	3001      	adds	r0, #1
 800832e:	f43f ae52 	beq.w	8007fd6 <_printf_float+0xc2>
 8008332:	f108 0801 	add.w	r8, r8, #1
 8008336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008338:	3b01      	subs	r3, #1
 800833a:	4543      	cmp	r3, r8
 800833c:	dcf1      	bgt.n	8008322 <_printf_float+0x40e>
 800833e:	464b      	mov	r3, r9
 8008340:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008344:	e6dc      	b.n	8008100 <_printf_float+0x1ec>
 8008346:	f04f 0800 	mov.w	r8, #0
 800834a:	f104 0a1a 	add.w	sl, r4, #26
 800834e:	e7f2      	b.n	8008336 <_printf_float+0x422>
 8008350:	2301      	movs	r3, #1
 8008352:	4642      	mov	r2, r8
 8008354:	e7df      	b.n	8008316 <_printf_float+0x402>
 8008356:	2301      	movs	r3, #1
 8008358:	464a      	mov	r2, r9
 800835a:	4631      	mov	r1, r6
 800835c:	4628      	mov	r0, r5
 800835e:	47b8      	blx	r7
 8008360:	3001      	adds	r0, #1
 8008362:	f43f ae38 	beq.w	8007fd6 <_printf_float+0xc2>
 8008366:	f108 0801 	add.w	r8, r8, #1
 800836a:	68e3      	ldr	r3, [r4, #12]
 800836c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800836e:	1a5b      	subs	r3, r3, r1
 8008370:	4543      	cmp	r3, r8
 8008372:	dcf0      	bgt.n	8008356 <_printf_float+0x442>
 8008374:	e6fa      	b.n	800816c <_printf_float+0x258>
 8008376:	f04f 0800 	mov.w	r8, #0
 800837a:	f104 0919 	add.w	r9, r4, #25
 800837e:	e7f4      	b.n	800836a <_printf_float+0x456>

08008380 <_printf_common>:
 8008380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008384:	4616      	mov	r6, r2
 8008386:	4699      	mov	r9, r3
 8008388:	688a      	ldr	r2, [r1, #8]
 800838a:	690b      	ldr	r3, [r1, #16]
 800838c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008390:	4293      	cmp	r3, r2
 8008392:	bfb8      	it	lt
 8008394:	4613      	movlt	r3, r2
 8008396:	6033      	str	r3, [r6, #0]
 8008398:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800839c:	4607      	mov	r7, r0
 800839e:	460c      	mov	r4, r1
 80083a0:	b10a      	cbz	r2, 80083a6 <_printf_common+0x26>
 80083a2:	3301      	adds	r3, #1
 80083a4:	6033      	str	r3, [r6, #0]
 80083a6:	6823      	ldr	r3, [r4, #0]
 80083a8:	0699      	lsls	r1, r3, #26
 80083aa:	bf42      	ittt	mi
 80083ac:	6833      	ldrmi	r3, [r6, #0]
 80083ae:	3302      	addmi	r3, #2
 80083b0:	6033      	strmi	r3, [r6, #0]
 80083b2:	6825      	ldr	r5, [r4, #0]
 80083b4:	f015 0506 	ands.w	r5, r5, #6
 80083b8:	d106      	bne.n	80083c8 <_printf_common+0x48>
 80083ba:	f104 0a19 	add.w	sl, r4, #25
 80083be:	68e3      	ldr	r3, [r4, #12]
 80083c0:	6832      	ldr	r2, [r6, #0]
 80083c2:	1a9b      	subs	r3, r3, r2
 80083c4:	42ab      	cmp	r3, r5
 80083c6:	dc26      	bgt.n	8008416 <_printf_common+0x96>
 80083c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80083cc:	1e13      	subs	r3, r2, #0
 80083ce:	6822      	ldr	r2, [r4, #0]
 80083d0:	bf18      	it	ne
 80083d2:	2301      	movne	r3, #1
 80083d4:	0692      	lsls	r2, r2, #26
 80083d6:	d42b      	bmi.n	8008430 <_printf_common+0xb0>
 80083d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083dc:	4649      	mov	r1, r9
 80083de:	4638      	mov	r0, r7
 80083e0:	47c0      	blx	r8
 80083e2:	3001      	adds	r0, #1
 80083e4:	d01e      	beq.n	8008424 <_printf_common+0xa4>
 80083e6:	6823      	ldr	r3, [r4, #0]
 80083e8:	68e5      	ldr	r5, [r4, #12]
 80083ea:	6832      	ldr	r2, [r6, #0]
 80083ec:	f003 0306 	and.w	r3, r3, #6
 80083f0:	2b04      	cmp	r3, #4
 80083f2:	bf08      	it	eq
 80083f4:	1aad      	subeq	r5, r5, r2
 80083f6:	68a3      	ldr	r3, [r4, #8]
 80083f8:	6922      	ldr	r2, [r4, #16]
 80083fa:	bf0c      	ite	eq
 80083fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008400:	2500      	movne	r5, #0
 8008402:	4293      	cmp	r3, r2
 8008404:	bfc4      	itt	gt
 8008406:	1a9b      	subgt	r3, r3, r2
 8008408:	18ed      	addgt	r5, r5, r3
 800840a:	2600      	movs	r6, #0
 800840c:	341a      	adds	r4, #26
 800840e:	42b5      	cmp	r5, r6
 8008410:	d11a      	bne.n	8008448 <_printf_common+0xc8>
 8008412:	2000      	movs	r0, #0
 8008414:	e008      	b.n	8008428 <_printf_common+0xa8>
 8008416:	2301      	movs	r3, #1
 8008418:	4652      	mov	r2, sl
 800841a:	4649      	mov	r1, r9
 800841c:	4638      	mov	r0, r7
 800841e:	47c0      	blx	r8
 8008420:	3001      	adds	r0, #1
 8008422:	d103      	bne.n	800842c <_printf_common+0xac>
 8008424:	f04f 30ff 	mov.w	r0, #4294967295
 8008428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800842c:	3501      	adds	r5, #1
 800842e:	e7c6      	b.n	80083be <_printf_common+0x3e>
 8008430:	18e1      	adds	r1, r4, r3
 8008432:	1c5a      	adds	r2, r3, #1
 8008434:	2030      	movs	r0, #48	; 0x30
 8008436:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800843a:	4422      	add	r2, r4
 800843c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008440:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008444:	3302      	adds	r3, #2
 8008446:	e7c7      	b.n	80083d8 <_printf_common+0x58>
 8008448:	2301      	movs	r3, #1
 800844a:	4622      	mov	r2, r4
 800844c:	4649      	mov	r1, r9
 800844e:	4638      	mov	r0, r7
 8008450:	47c0      	blx	r8
 8008452:	3001      	adds	r0, #1
 8008454:	d0e6      	beq.n	8008424 <_printf_common+0xa4>
 8008456:	3601      	adds	r6, #1
 8008458:	e7d9      	b.n	800840e <_printf_common+0x8e>
	...

0800845c <_printf_i>:
 800845c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008460:	460c      	mov	r4, r1
 8008462:	4691      	mov	r9, r2
 8008464:	7e27      	ldrb	r7, [r4, #24]
 8008466:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008468:	2f78      	cmp	r7, #120	; 0x78
 800846a:	4680      	mov	r8, r0
 800846c:	469a      	mov	sl, r3
 800846e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008472:	d807      	bhi.n	8008484 <_printf_i+0x28>
 8008474:	2f62      	cmp	r7, #98	; 0x62
 8008476:	d80a      	bhi.n	800848e <_printf_i+0x32>
 8008478:	2f00      	cmp	r7, #0
 800847a:	f000 80d8 	beq.w	800862e <_printf_i+0x1d2>
 800847e:	2f58      	cmp	r7, #88	; 0x58
 8008480:	f000 80a3 	beq.w	80085ca <_printf_i+0x16e>
 8008484:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008488:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800848c:	e03a      	b.n	8008504 <_printf_i+0xa8>
 800848e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008492:	2b15      	cmp	r3, #21
 8008494:	d8f6      	bhi.n	8008484 <_printf_i+0x28>
 8008496:	a001      	add	r0, pc, #4	; (adr r0, 800849c <_printf_i+0x40>)
 8008498:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800849c:	080084f5 	.word	0x080084f5
 80084a0:	08008509 	.word	0x08008509
 80084a4:	08008485 	.word	0x08008485
 80084a8:	08008485 	.word	0x08008485
 80084ac:	08008485 	.word	0x08008485
 80084b0:	08008485 	.word	0x08008485
 80084b4:	08008509 	.word	0x08008509
 80084b8:	08008485 	.word	0x08008485
 80084bc:	08008485 	.word	0x08008485
 80084c0:	08008485 	.word	0x08008485
 80084c4:	08008485 	.word	0x08008485
 80084c8:	08008615 	.word	0x08008615
 80084cc:	08008539 	.word	0x08008539
 80084d0:	080085f7 	.word	0x080085f7
 80084d4:	08008485 	.word	0x08008485
 80084d8:	08008485 	.word	0x08008485
 80084dc:	08008637 	.word	0x08008637
 80084e0:	08008485 	.word	0x08008485
 80084e4:	08008539 	.word	0x08008539
 80084e8:	08008485 	.word	0x08008485
 80084ec:	08008485 	.word	0x08008485
 80084f0:	080085ff 	.word	0x080085ff
 80084f4:	680b      	ldr	r3, [r1, #0]
 80084f6:	1d1a      	adds	r2, r3, #4
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	600a      	str	r2, [r1, #0]
 80084fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008500:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008504:	2301      	movs	r3, #1
 8008506:	e0a3      	b.n	8008650 <_printf_i+0x1f4>
 8008508:	6825      	ldr	r5, [r4, #0]
 800850a:	6808      	ldr	r0, [r1, #0]
 800850c:	062e      	lsls	r6, r5, #24
 800850e:	f100 0304 	add.w	r3, r0, #4
 8008512:	d50a      	bpl.n	800852a <_printf_i+0xce>
 8008514:	6805      	ldr	r5, [r0, #0]
 8008516:	600b      	str	r3, [r1, #0]
 8008518:	2d00      	cmp	r5, #0
 800851a:	da03      	bge.n	8008524 <_printf_i+0xc8>
 800851c:	232d      	movs	r3, #45	; 0x2d
 800851e:	426d      	negs	r5, r5
 8008520:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008524:	485e      	ldr	r0, [pc, #376]	; (80086a0 <_printf_i+0x244>)
 8008526:	230a      	movs	r3, #10
 8008528:	e019      	b.n	800855e <_printf_i+0x102>
 800852a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800852e:	6805      	ldr	r5, [r0, #0]
 8008530:	600b      	str	r3, [r1, #0]
 8008532:	bf18      	it	ne
 8008534:	b22d      	sxthne	r5, r5
 8008536:	e7ef      	b.n	8008518 <_printf_i+0xbc>
 8008538:	680b      	ldr	r3, [r1, #0]
 800853a:	6825      	ldr	r5, [r4, #0]
 800853c:	1d18      	adds	r0, r3, #4
 800853e:	6008      	str	r0, [r1, #0]
 8008540:	0628      	lsls	r0, r5, #24
 8008542:	d501      	bpl.n	8008548 <_printf_i+0xec>
 8008544:	681d      	ldr	r5, [r3, #0]
 8008546:	e002      	b.n	800854e <_printf_i+0xf2>
 8008548:	0669      	lsls	r1, r5, #25
 800854a:	d5fb      	bpl.n	8008544 <_printf_i+0xe8>
 800854c:	881d      	ldrh	r5, [r3, #0]
 800854e:	4854      	ldr	r0, [pc, #336]	; (80086a0 <_printf_i+0x244>)
 8008550:	2f6f      	cmp	r7, #111	; 0x6f
 8008552:	bf0c      	ite	eq
 8008554:	2308      	moveq	r3, #8
 8008556:	230a      	movne	r3, #10
 8008558:	2100      	movs	r1, #0
 800855a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800855e:	6866      	ldr	r6, [r4, #4]
 8008560:	60a6      	str	r6, [r4, #8]
 8008562:	2e00      	cmp	r6, #0
 8008564:	bfa2      	ittt	ge
 8008566:	6821      	ldrge	r1, [r4, #0]
 8008568:	f021 0104 	bicge.w	r1, r1, #4
 800856c:	6021      	strge	r1, [r4, #0]
 800856e:	b90d      	cbnz	r5, 8008574 <_printf_i+0x118>
 8008570:	2e00      	cmp	r6, #0
 8008572:	d04d      	beq.n	8008610 <_printf_i+0x1b4>
 8008574:	4616      	mov	r6, r2
 8008576:	fbb5 f1f3 	udiv	r1, r5, r3
 800857a:	fb03 5711 	mls	r7, r3, r1, r5
 800857e:	5dc7      	ldrb	r7, [r0, r7]
 8008580:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008584:	462f      	mov	r7, r5
 8008586:	42bb      	cmp	r3, r7
 8008588:	460d      	mov	r5, r1
 800858a:	d9f4      	bls.n	8008576 <_printf_i+0x11a>
 800858c:	2b08      	cmp	r3, #8
 800858e:	d10b      	bne.n	80085a8 <_printf_i+0x14c>
 8008590:	6823      	ldr	r3, [r4, #0]
 8008592:	07df      	lsls	r7, r3, #31
 8008594:	d508      	bpl.n	80085a8 <_printf_i+0x14c>
 8008596:	6923      	ldr	r3, [r4, #16]
 8008598:	6861      	ldr	r1, [r4, #4]
 800859a:	4299      	cmp	r1, r3
 800859c:	bfde      	ittt	le
 800859e:	2330      	movle	r3, #48	; 0x30
 80085a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80085a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80085a8:	1b92      	subs	r2, r2, r6
 80085aa:	6122      	str	r2, [r4, #16]
 80085ac:	f8cd a000 	str.w	sl, [sp]
 80085b0:	464b      	mov	r3, r9
 80085b2:	aa03      	add	r2, sp, #12
 80085b4:	4621      	mov	r1, r4
 80085b6:	4640      	mov	r0, r8
 80085b8:	f7ff fee2 	bl	8008380 <_printf_common>
 80085bc:	3001      	adds	r0, #1
 80085be:	d14c      	bne.n	800865a <_printf_i+0x1fe>
 80085c0:	f04f 30ff 	mov.w	r0, #4294967295
 80085c4:	b004      	add	sp, #16
 80085c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085ca:	4835      	ldr	r0, [pc, #212]	; (80086a0 <_printf_i+0x244>)
 80085cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80085d0:	6823      	ldr	r3, [r4, #0]
 80085d2:	680e      	ldr	r6, [r1, #0]
 80085d4:	061f      	lsls	r7, r3, #24
 80085d6:	f856 5b04 	ldr.w	r5, [r6], #4
 80085da:	600e      	str	r6, [r1, #0]
 80085dc:	d514      	bpl.n	8008608 <_printf_i+0x1ac>
 80085de:	07d9      	lsls	r1, r3, #31
 80085e0:	bf44      	itt	mi
 80085e2:	f043 0320 	orrmi.w	r3, r3, #32
 80085e6:	6023      	strmi	r3, [r4, #0]
 80085e8:	b91d      	cbnz	r5, 80085f2 <_printf_i+0x196>
 80085ea:	6823      	ldr	r3, [r4, #0]
 80085ec:	f023 0320 	bic.w	r3, r3, #32
 80085f0:	6023      	str	r3, [r4, #0]
 80085f2:	2310      	movs	r3, #16
 80085f4:	e7b0      	b.n	8008558 <_printf_i+0xfc>
 80085f6:	6823      	ldr	r3, [r4, #0]
 80085f8:	f043 0320 	orr.w	r3, r3, #32
 80085fc:	6023      	str	r3, [r4, #0]
 80085fe:	2378      	movs	r3, #120	; 0x78
 8008600:	4828      	ldr	r0, [pc, #160]	; (80086a4 <_printf_i+0x248>)
 8008602:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008606:	e7e3      	b.n	80085d0 <_printf_i+0x174>
 8008608:	065e      	lsls	r6, r3, #25
 800860a:	bf48      	it	mi
 800860c:	b2ad      	uxthmi	r5, r5
 800860e:	e7e6      	b.n	80085de <_printf_i+0x182>
 8008610:	4616      	mov	r6, r2
 8008612:	e7bb      	b.n	800858c <_printf_i+0x130>
 8008614:	680b      	ldr	r3, [r1, #0]
 8008616:	6826      	ldr	r6, [r4, #0]
 8008618:	6960      	ldr	r0, [r4, #20]
 800861a:	1d1d      	adds	r5, r3, #4
 800861c:	600d      	str	r5, [r1, #0]
 800861e:	0635      	lsls	r5, r6, #24
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	d501      	bpl.n	8008628 <_printf_i+0x1cc>
 8008624:	6018      	str	r0, [r3, #0]
 8008626:	e002      	b.n	800862e <_printf_i+0x1d2>
 8008628:	0671      	lsls	r1, r6, #25
 800862a:	d5fb      	bpl.n	8008624 <_printf_i+0x1c8>
 800862c:	8018      	strh	r0, [r3, #0]
 800862e:	2300      	movs	r3, #0
 8008630:	6123      	str	r3, [r4, #16]
 8008632:	4616      	mov	r6, r2
 8008634:	e7ba      	b.n	80085ac <_printf_i+0x150>
 8008636:	680b      	ldr	r3, [r1, #0]
 8008638:	1d1a      	adds	r2, r3, #4
 800863a:	600a      	str	r2, [r1, #0]
 800863c:	681e      	ldr	r6, [r3, #0]
 800863e:	6862      	ldr	r2, [r4, #4]
 8008640:	2100      	movs	r1, #0
 8008642:	4630      	mov	r0, r6
 8008644:	f7f7 fdd4 	bl	80001f0 <memchr>
 8008648:	b108      	cbz	r0, 800864e <_printf_i+0x1f2>
 800864a:	1b80      	subs	r0, r0, r6
 800864c:	6060      	str	r0, [r4, #4]
 800864e:	6863      	ldr	r3, [r4, #4]
 8008650:	6123      	str	r3, [r4, #16]
 8008652:	2300      	movs	r3, #0
 8008654:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008658:	e7a8      	b.n	80085ac <_printf_i+0x150>
 800865a:	6923      	ldr	r3, [r4, #16]
 800865c:	4632      	mov	r2, r6
 800865e:	4649      	mov	r1, r9
 8008660:	4640      	mov	r0, r8
 8008662:	47d0      	blx	sl
 8008664:	3001      	adds	r0, #1
 8008666:	d0ab      	beq.n	80085c0 <_printf_i+0x164>
 8008668:	6823      	ldr	r3, [r4, #0]
 800866a:	079b      	lsls	r3, r3, #30
 800866c:	d413      	bmi.n	8008696 <_printf_i+0x23a>
 800866e:	68e0      	ldr	r0, [r4, #12]
 8008670:	9b03      	ldr	r3, [sp, #12]
 8008672:	4298      	cmp	r0, r3
 8008674:	bfb8      	it	lt
 8008676:	4618      	movlt	r0, r3
 8008678:	e7a4      	b.n	80085c4 <_printf_i+0x168>
 800867a:	2301      	movs	r3, #1
 800867c:	4632      	mov	r2, r6
 800867e:	4649      	mov	r1, r9
 8008680:	4640      	mov	r0, r8
 8008682:	47d0      	blx	sl
 8008684:	3001      	adds	r0, #1
 8008686:	d09b      	beq.n	80085c0 <_printf_i+0x164>
 8008688:	3501      	adds	r5, #1
 800868a:	68e3      	ldr	r3, [r4, #12]
 800868c:	9903      	ldr	r1, [sp, #12]
 800868e:	1a5b      	subs	r3, r3, r1
 8008690:	42ab      	cmp	r3, r5
 8008692:	dcf2      	bgt.n	800867a <_printf_i+0x21e>
 8008694:	e7eb      	b.n	800866e <_printf_i+0x212>
 8008696:	2500      	movs	r5, #0
 8008698:	f104 0619 	add.w	r6, r4, #25
 800869c:	e7f5      	b.n	800868a <_printf_i+0x22e>
 800869e:	bf00      	nop
 80086a0:	0800b076 	.word	0x0800b076
 80086a4:	0800b087 	.word	0x0800b087

080086a8 <siprintf>:
 80086a8:	b40e      	push	{r1, r2, r3}
 80086aa:	b500      	push	{lr}
 80086ac:	b09c      	sub	sp, #112	; 0x70
 80086ae:	ab1d      	add	r3, sp, #116	; 0x74
 80086b0:	9002      	str	r0, [sp, #8]
 80086b2:	9006      	str	r0, [sp, #24]
 80086b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80086b8:	4809      	ldr	r0, [pc, #36]	; (80086e0 <siprintf+0x38>)
 80086ba:	9107      	str	r1, [sp, #28]
 80086bc:	9104      	str	r1, [sp, #16]
 80086be:	4909      	ldr	r1, [pc, #36]	; (80086e4 <siprintf+0x3c>)
 80086c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80086c4:	9105      	str	r1, [sp, #20]
 80086c6:	6800      	ldr	r0, [r0, #0]
 80086c8:	9301      	str	r3, [sp, #4]
 80086ca:	a902      	add	r1, sp, #8
 80086cc:	f001 fb32 	bl	8009d34 <_svfiprintf_r>
 80086d0:	9b02      	ldr	r3, [sp, #8]
 80086d2:	2200      	movs	r2, #0
 80086d4:	701a      	strb	r2, [r3, #0]
 80086d6:	b01c      	add	sp, #112	; 0x70
 80086d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80086dc:	b003      	add	sp, #12
 80086de:	4770      	bx	lr
 80086e0:	2000000c 	.word	0x2000000c
 80086e4:	ffff0208 	.word	0xffff0208

080086e8 <quorem>:
 80086e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ec:	6903      	ldr	r3, [r0, #16]
 80086ee:	690c      	ldr	r4, [r1, #16]
 80086f0:	42a3      	cmp	r3, r4
 80086f2:	4607      	mov	r7, r0
 80086f4:	f2c0 8081 	blt.w	80087fa <quorem+0x112>
 80086f8:	3c01      	subs	r4, #1
 80086fa:	f101 0814 	add.w	r8, r1, #20
 80086fe:	f100 0514 	add.w	r5, r0, #20
 8008702:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008706:	9301      	str	r3, [sp, #4]
 8008708:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800870c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008710:	3301      	adds	r3, #1
 8008712:	429a      	cmp	r2, r3
 8008714:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008718:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800871c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008720:	d331      	bcc.n	8008786 <quorem+0x9e>
 8008722:	f04f 0e00 	mov.w	lr, #0
 8008726:	4640      	mov	r0, r8
 8008728:	46ac      	mov	ip, r5
 800872a:	46f2      	mov	sl, lr
 800872c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008730:	b293      	uxth	r3, r2
 8008732:	fb06 e303 	mla	r3, r6, r3, lr
 8008736:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800873a:	b29b      	uxth	r3, r3
 800873c:	ebaa 0303 	sub.w	r3, sl, r3
 8008740:	0c12      	lsrs	r2, r2, #16
 8008742:	f8dc a000 	ldr.w	sl, [ip]
 8008746:	fb06 e202 	mla	r2, r6, r2, lr
 800874a:	fa13 f38a 	uxtah	r3, r3, sl
 800874e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008752:	fa1f fa82 	uxth.w	sl, r2
 8008756:	f8dc 2000 	ldr.w	r2, [ip]
 800875a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800875e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008762:	b29b      	uxth	r3, r3
 8008764:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008768:	4581      	cmp	r9, r0
 800876a:	f84c 3b04 	str.w	r3, [ip], #4
 800876e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008772:	d2db      	bcs.n	800872c <quorem+0x44>
 8008774:	f855 300b 	ldr.w	r3, [r5, fp]
 8008778:	b92b      	cbnz	r3, 8008786 <quorem+0x9e>
 800877a:	9b01      	ldr	r3, [sp, #4]
 800877c:	3b04      	subs	r3, #4
 800877e:	429d      	cmp	r5, r3
 8008780:	461a      	mov	r2, r3
 8008782:	d32e      	bcc.n	80087e2 <quorem+0xfa>
 8008784:	613c      	str	r4, [r7, #16]
 8008786:	4638      	mov	r0, r7
 8008788:	f001 f8be 	bl	8009908 <__mcmp>
 800878c:	2800      	cmp	r0, #0
 800878e:	db24      	blt.n	80087da <quorem+0xf2>
 8008790:	3601      	adds	r6, #1
 8008792:	4628      	mov	r0, r5
 8008794:	f04f 0c00 	mov.w	ip, #0
 8008798:	f858 2b04 	ldr.w	r2, [r8], #4
 800879c:	f8d0 e000 	ldr.w	lr, [r0]
 80087a0:	b293      	uxth	r3, r2
 80087a2:	ebac 0303 	sub.w	r3, ip, r3
 80087a6:	0c12      	lsrs	r2, r2, #16
 80087a8:	fa13 f38e 	uxtah	r3, r3, lr
 80087ac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80087b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087ba:	45c1      	cmp	r9, r8
 80087bc:	f840 3b04 	str.w	r3, [r0], #4
 80087c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80087c4:	d2e8      	bcs.n	8008798 <quorem+0xb0>
 80087c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087ce:	b922      	cbnz	r2, 80087da <quorem+0xf2>
 80087d0:	3b04      	subs	r3, #4
 80087d2:	429d      	cmp	r5, r3
 80087d4:	461a      	mov	r2, r3
 80087d6:	d30a      	bcc.n	80087ee <quorem+0x106>
 80087d8:	613c      	str	r4, [r7, #16]
 80087da:	4630      	mov	r0, r6
 80087dc:	b003      	add	sp, #12
 80087de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087e2:	6812      	ldr	r2, [r2, #0]
 80087e4:	3b04      	subs	r3, #4
 80087e6:	2a00      	cmp	r2, #0
 80087e8:	d1cc      	bne.n	8008784 <quorem+0x9c>
 80087ea:	3c01      	subs	r4, #1
 80087ec:	e7c7      	b.n	800877e <quorem+0x96>
 80087ee:	6812      	ldr	r2, [r2, #0]
 80087f0:	3b04      	subs	r3, #4
 80087f2:	2a00      	cmp	r2, #0
 80087f4:	d1f0      	bne.n	80087d8 <quorem+0xf0>
 80087f6:	3c01      	subs	r4, #1
 80087f8:	e7eb      	b.n	80087d2 <quorem+0xea>
 80087fa:	2000      	movs	r0, #0
 80087fc:	e7ee      	b.n	80087dc <quorem+0xf4>
	...

08008800 <_dtoa_r>:
 8008800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008804:	ed2d 8b02 	vpush	{d8}
 8008808:	ec57 6b10 	vmov	r6, r7, d0
 800880c:	b095      	sub	sp, #84	; 0x54
 800880e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008810:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008814:	9105      	str	r1, [sp, #20]
 8008816:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800881a:	4604      	mov	r4, r0
 800881c:	9209      	str	r2, [sp, #36]	; 0x24
 800881e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008820:	b975      	cbnz	r5, 8008840 <_dtoa_r+0x40>
 8008822:	2010      	movs	r0, #16
 8008824:	f000 fddc 	bl	80093e0 <malloc>
 8008828:	4602      	mov	r2, r0
 800882a:	6260      	str	r0, [r4, #36]	; 0x24
 800882c:	b920      	cbnz	r0, 8008838 <_dtoa_r+0x38>
 800882e:	4bb2      	ldr	r3, [pc, #712]	; (8008af8 <_dtoa_r+0x2f8>)
 8008830:	21ea      	movs	r1, #234	; 0xea
 8008832:	48b2      	ldr	r0, [pc, #712]	; (8008afc <_dtoa_r+0x2fc>)
 8008834:	f001 fb8e 	bl	8009f54 <__assert_func>
 8008838:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800883c:	6005      	str	r5, [r0, #0]
 800883e:	60c5      	str	r5, [r0, #12]
 8008840:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008842:	6819      	ldr	r1, [r3, #0]
 8008844:	b151      	cbz	r1, 800885c <_dtoa_r+0x5c>
 8008846:	685a      	ldr	r2, [r3, #4]
 8008848:	604a      	str	r2, [r1, #4]
 800884a:	2301      	movs	r3, #1
 800884c:	4093      	lsls	r3, r2
 800884e:	608b      	str	r3, [r1, #8]
 8008850:	4620      	mov	r0, r4
 8008852:	f000 fe1b 	bl	800948c <_Bfree>
 8008856:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008858:	2200      	movs	r2, #0
 800885a:	601a      	str	r2, [r3, #0]
 800885c:	1e3b      	subs	r3, r7, #0
 800885e:	bfb9      	ittee	lt
 8008860:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008864:	9303      	strlt	r3, [sp, #12]
 8008866:	2300      	movge	r3, #0
 8008868:	f8c8 3000 	strge.w	r3, [r8]
 800886c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008870:	4ba3      	ldr	r3, [pc, #652]	; (8008b00 <_dtoa_r+0x300>)
 8008872:	bfbc      	itt	lt
 8008874:	2201      	movlt	r2, #1
 8008876:	f8c8 2000 	strlt.w	r2, [r8]
 800887a:	ea33 0309 	bics.w	r3, r3, r9
 800887e:	d11b      	bne.n	80088b8 <_dtoa_r+0xb8>
 8008880:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008882:	f242 730f 	movw	r3, #9999	; 0x270f
 8008886:	6013      	str	r3, [r2, #0]
 8008888:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800888c:	4333      	orrs	r3, r6
 800888e:	f000 857a 	beq.w	8009386 <_dtoa_r+0xb86>
 8008892:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008894:	b963      	cbnz	r3, 80088b0 <_dtoa_r+0xb0>
 8008896:	4b9b      	ldr	r3, [pc, #620]	; (8008b04 <_dtoa_r+0x304>)
 8008898:	e024      	b.n	80088e4 <_dtoa_r+0xe4>
 800889a:	4b9b      	ldr	r3, [pc, #620]	; (8008b08 <_dtoa_r+0x308>)
 800889c:	9300      	str	r3, [sp, #0]
 800889e:	3308      	adds	r3, #8
 80088a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80088a2:	6013      	str	r3, [r2, #0]
 80088a4:	9800      	ldr	r0, [sp, #0]
 80088a6:	b015      	add	sp, #84	; 0x54
 80088a8:	ecbd 8b02 	vpop	{d8}
 80088ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088b0:	4b94      	ldr	r3, [pc, #592]	; (8008b04 <_dtoa_r+0x304>)
 80088b2:	9300      	str	r3, [sp, #0]
 80088b4:	3303      	adds	r3, #3
 80088b6:	e7f3      	b.n	80088a0 <_dtoa_r+0xa0>
 80088b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80088bc:	2200      	movs	r2, #0
 80088be:	ec51 0b17 	vmov	r0, r1, d7
 80088c2:	2300      	movs	r3, #0
 80088c4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80088c8:	f7f8 f906 	bl	8000ad8 <__aeabi_dcmpeq>
 80088cc:	4680      	mov	r8, r0
 80088ce:	b158      	cbz	r0, 80088e8 <_dtoa_r+0xe8>
 80088d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80088d2:	2301      	movs	r3, #1
 80088d4:	6013      	str	r3, [r2, #0]
 80088d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088d8:	2b00      	cmp	r3, #0
 80088da:	f000 8551 	beq.w	8009380 <_dtoa_r+0xb80>
 80088de:	488b      	ldr	r0, [pc, #556]	; (8008b0c <_dtoa_r+0x30c>)
 80088e0:	6018      	str	r0, [r3, #0]
 80088e2:	1e43      	subs	r3, r0, #1
 80088e4:	9300      	str	r3, [sp, #0]
 80088e6:	e7dd      	b.n	80088a4 <_dtoa_r+0xa4>
 80088e8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80088ec:	aa12      	add	r2, sp, #72	; 0x48
 80088ee:	a913      	add	r1, sp, #76	; 0x4c
 80088f0:	4620      	mov	r0, r4
 80088f2:	f001 f8ad 	bl	8009a50 <__d2b>
 80088f6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80088fa:	4683      	mov	fp, r0
 80088fc:	2d00      	cmp	r5, #0
 80088fe:	d07c      	beq.n	80089fa <_dtoa_r+0x1fa>
 8008900:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008902:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008906:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800890a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800890e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008912:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008916:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800891a:	4b7d      	ldr	r3, [pc, #500]	; (8008b10 <_dtoa_r+0x310>)
 800891c:	2200      	movs	r2, #0
 800891e:	4630      	mov	r0, r6
 8008920:	4639      	mov	r1, r7
 8008922:	f7f7 fcb9 	bl	8000298 <__aeabi_dsub>
 8008926:	a36e      	add	r3, pc, #440	; (adr r3, 8008ae0 <_dtoa_r+0x2e0>)
 8008928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892c:	f7f7 fe6c 	bl	8000608 <__aeabi_dmul>
 8008930:	a36d      	add	r3, pc, #436	; (adr r3, 8008ae8 <_dtoa_r+0x2e8>)
 8008932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008936:	f7f7 fcb1 	bl	800029c <__adddf3>
 800893a:	4606      	mov	r6, r0
 800893c:	4628      	mov	r0, r5
 800893e:	460f      	mov	r7, r1
 8008940:	f7f7 fdf8 	bl	8000534 <__aeabi_i2d>
 8008944:	a36a      	add	r3, pc, #424	; (adr r3, 8008af0 <_dtoa_r+0x2f0>)
 8008946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894a:	f7f7 fe5d 	bl	8000608 <__aeabi_dmul>
 800894e:	4602      	mov	r2, r0
 8008950:	460b      	mov	r3, r1
 8008952:	4630      	mov	r0, r6
 8008954:	4639      	mov	r1, r7
 8008956:	f7f7 fca1 	bl	800029c <__adddf3>
 800895a:	4606      	mov	r6, r0
 800895c:	460f      	mov	r7, r1
 800895e:	f7f8 f903 	bl	8000b68 <__aeabi_d2iz>
 8008962:	2200      	movs	r2, #0
 8008964:	4682      	mov	sl, r0
 8008966:	2300      	movs	r3, #0
 8008968:	4630      	mov	r0, r6
 800896a:	4639      	mov	r1, r7
 800896c:	f7f8 f8be 	bl	8000aec <__aeabi_dcmplt>
 8008970:	b148      	cbz	r0, 8008986 <_dtoa_r+0x186>
 8008972:	4650      	mov	r0, sl
 8008974:	f7f7 fdde 	bl	8000534 <__aeabi_i2d>
 8008978:	4632      	mov	r2, r6
 800897a:	463b      	mov	r3, r7
 800897c:	f7f8 f8ac 	bl	8000ad8 <__aeabi_dcmpeq>
 8008980:	b908      	cbnz	r0, 8008986 <_dtoa_r+0x186>
 8008982:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008986:	f1ba 0f16 	cmp.w	sl, #22
 800898a:	d854      	bhi.n	8008a36 <_dtoa_r+0x236>
 800898c:	4b61      	ldr	r3, [pc, #388]	; (8008b14 <_dtoa_r+0x314>)
 800898e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008996:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800899a:	f7f8 f8a7 	bl	8000aec <__aeabi_dcmplt>
 800899e:	2800      	cmp	r0, #0
 80089a0:	d04b      	beq.n	8008a3a <_dtoa_r+0x23a>
 80089a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80089a6:	2300      	movs	r3, #0
 80089a8:	930e      	str	r3, [sp, #56]	; 0x38
 80089aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80089ac:	1b5d      	subs	r5, r3, r5
 80089ae:	1e6b      	subs	r3, r5, #1
 80089b0:	9304      	str	r3, [sp, #16]
 80089b2:	bf43      	ittte	mi
 80089b4:	2300      	movmi	r3, #0
 80089b6:	f1c5 0801 	rsbmi	r8, r5, #1
 80089ba:	9304      	strmi	r3, [sp, #16]
 80089bc:	f04f 0800 	movpl.w	r8, #0
 80089c0:	f1ba 0f00 	cmp.w	sl, #0
 80089c4:	db3b      	blt.n	8008a3e <_dtoa_r+0x23e>
 80089c6:	9b04      	ldr	r3, [sp, #16]
 80089c8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80089cc:	4453      	add	r3, sl
 80089ce:	9304      	str	r3, [sp, #16]
 80089d0:	2300      	movs	r3, #0
 80089d2:	9306      	str	r3, [sp, #24]
 80089d4:	9b05      	ldr	r3, [sp, #20]
 80089d6:	2b09      	cmp	r3, #9
 80089d8:	d869      	bhi.n	8008aae <_dtoa_r+0x2ae>
 80089da:	2b05      	cmp	r3, #5
 80089dc:	bfc4      	itt	gt
 80089de:	3b04      	subgt	r3, #4
 80089e0:	9305      	strgt	r3, [sp, #20]
 80089e2:	9b05      	ldr	r3, [sp, #20]
 80089e4:	f1a3 0302 	sub.w	r3, r3, #2
 80089e8:	bfcc      	ite	gt
 80089ea:	2500      	movgt	r5, #0
 80089ec:	2501      	movle	r5, #1
 80089ee:	2b03      	cmp	r3, #3
 80089f0:	d869      	bhi.n	8008ac6 <_dtoa_r+0x2c6>
 80089f2:	e8df f003 	tbb	[pc, r3]
 80089f6:	4e2c      	.short	0x4e2c
 80089f8:	5a4c      	.short	0x5a4c
 80089fa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80089fe:	441d      	add	r5, r3
 8008a00:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008a04:	2b20      	cmp	r3, #32
 8008a06:	bfc1      	itttt	gt
 8008a08:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008a0c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008a10:	fa09 f303 	lslgt.w	r3, r9, r3
 8008a14:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008a18:	bfda      	itte	le
 8008a1a:	f1c3 0320 	rsble	r3, r3, #32
 8008a1e:	fa06 f003 	lslle.w	r0, r6, r3
 8008a22:	4318      	orrgt	r0, r3
 8008a24:	f7f7 fd76 	bl	8000514 <__aeabi_ui2d>
 8008a28:	2301      	movs	r3, #1
 8008a2a:	4606      	mov	r6, r0
 8008a2c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008a30:	3d01      	subs	r5, #1
 8008a32:	9310      	str	r3, [sp, #64]	; 0x40
 8008a34:	e771      	b.n	800891a <_dtoa_r+0x11a>
 8008a36:	2301      	movs	r3, #1
 8008a38:	e7b6      	b.n	80089a8 <_dtoa_r+0x1a8>
 8008a3a:	900e      	str	r0, [sp, #56]	; 0x38
 8008a3c:	e7b5      	b.n	80089aa <_dtoa_r+0x1aa>
 8008a3e:	f1ca 0300 	rsb	r3, sl, #0
 8008a42:	9306      	str	r3, [sp, #24]
 8008a44:	2300      	movs	r3, #0
 8008a46:	eba8 080a 	sub.w	r8, r8, sl
 8008a4a:	930d      	str	r3, [sp, #52]	; 0x34
 8008a4c:	e7c2      	b.n	80089d4 <_dtoa_r+0x1d4>
 8008a4e:	2300      	movs	r3, #0
 8008a50:	9308      	str	r3, [sp, #32]
 8008a52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	dc39      	bgt.n	8008acc <_dtoa_r+0x2cc>
 8008a58:	f04f 0901 	mov.w	r9, #1
 8008a5c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008a60:	464b      	mov	r3, r9
 8008a62:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008a66:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008a68:	2200      	movs	r2, #0
 8008a6a:	6042      	str	r2, [r0, #4]
 8008a6c:	2204      	movs	r2, #4
 8008a6e:	f102 0614 	add.w	r6, r2, #20
 8008a72:	429e      	cmp	r6, r3
 8008a74:	6841      	ldr	r1, [r0, #4]
 8008a76:	d92f      	bls.n	8008ad8 <_dtoa_r+0x2d8>
 8008a78:	4620      	mov	r0, r4
 8008a7a:	f000 fcc7 	bl	800940c <_Balloc>
 8008a7e:	9000      	str	r0, [sp, #0]
 8008a80:	2800      	cmp	r0, #0
 8008a82:	d14b      	bne.n	8008b1c <_dtoa_r+0x31c>
 8008a84:	4b24      	ldr	r3, [pc, #144]	; (8008b18 <_dtoa_r+0x318>)
 8008a86:	4602      	mov	r2, r0
 8008a88:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008a8c:	e6d1      	b.n	8008832 <_dtoa_r+0x32>
 8008a8e:	2301      	movs	r3, #1
 8008a90:	e7de      	b.n	8008a50 <_dtoa_r+0x250>
 8008a92:	2300      	movs	r3, #0
 8008a94:	9308      	str	r3, [sp, #32]
 8008a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a98:	eb0a 0903 	add.w	r9, sl, r3
 8008a9c:	f109 0301 	add.w	r3, r9, #1
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	9301      	str	r3, [sp, #4]
 8008aa4:	bfb8      	it	lt
 8008aa6:	2301      	movlt	r3, #1
 8008aa8:	e7dd      	b.n	8008a66 <_dtoa_r+0x266>
 8008aaa:	2301      	movs	r3, #1
 8008aac:	e7f2      	b.n	8008a94 <_dtoa_r+0x294>
 8008aae:	2501      	movs	r5, #1
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	9305      	str	r3, [sp, #20]
 8008ab4:	9508      	str	r5, [sp, #32]
 8008ab6:	f04f 39ff 	mov.w	r9, #4294967295
 8008aba:	2200      	movs	r2, #0
 8008abc:	f8cd 9004 	str.w	r9, [sp, #4]
 8008ac0:	2312      	movs	r3, #18
 8008ac2:	9209      	str	r2, [sp, #36]	; 0x24
 8008ac4:	e7cf      	b.n	8008a66 <_dtoa_r+0x266>
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	9308      	str	r3, [sp, #32]
 8008aca:	e7f4      	b.n	8008ab6 <_dtoa_r+0x2b6>
 8008acc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008ad0:	f8cd 9004 	str.w	r9, [sp, #4]
 8008ad4:	464b      	mov	r3, r9
 8008ad6:	e7c6      	b.n	8008a66 <_dtoa_r+0x266>
 8008ad8:	3101      	adds	r1, #1
 8008ada:	6041      	str	r1, [r0, #4]
 8008adc:	0052      	lsls	r2, r2, #1
 8008ade:	e7c6      	b.n	8008a6e <_dtoa_r+0x26e>
 8008ae0:	636f4361 	.word	0x636f4361
 8008ae4:	3fd287a7 	.word	0x3fd287a7
 8008ae8:	8b60c8b3 	.word	0x8b60c8b3
 8008aec:	3fc68a28 	.word	0x3fc68a28
 8008af0:	509f79fb 	.word	0x509f79fb
 8008af4:	3fd34413 	.word	0x3fd34413
 8008af8:	0800b0a5 	.word	0x0800b0a5
 8008afc:	0800b0bc 	.word	0x0800b0bc
 8008b00:	7ff00000 	.word	0x7ff00000
 8008b04:	0800b0a1 	.word	0x0800b0a1
 8008b08:	0800b098 	.word	0x0800b098
 8008b0c:	0800b075 	.word	0x0800b075
 8008b10:	3ff80000 	.word	0x3ff80000
 8008b14:	0800b1b8 	.word	0x0800b1b8
 8008b18:	0800b11b 	.word	0x0800b11b
 8008b1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b1e:	9a00      	ldr	r2, [sp, #0]
 8008b20:	601a      	str	r2, [r3, #0]
 8008b22:	9b01      	ldr	r3, [sp, #4]
 8008b24:	2b0e      	cmp	r3, #14
 8008b26:	f200 80ad 	bhi.w	8008c84 <_dtoa_r+0x484>
 8008b2a:	2d00      	cmp	r5, #0
 8008b2c:	f000 80aa 	beq.w	8008c84 <_dtoa_r+0x484>
 8008b30:	f1ba 0f00 	cmp.w	sl, #0
 8008b34:	dd36      	ble.n	8008ba4 <_dtoa_r+0x3a4>
 8008b36:	4ac3      	ldr	r2, [pc, #780]	; (8008e44 <_dtoa_r+0x644>)
 8008b38:	f00a 030f 	and.w	r3, sl, #15
 8008b3c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008b40:	ed93 7b00 	vldr	d7, [r3]
 8008b44:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008b48:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008b4c:	eeb0 8a47 	vmov.f32	s16, s14
 8008b50:	eef0 8a67 	vmov.f32	s17, s15
 8008b54:	d016      	beq.n	8008b84 <_dtoa_r+0x384>
 8008b56:	4bbc      	ldr	r3, [pc, #752]	; (8008e48 <_dtoa_r+0x648>)
 8008b58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008b5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b60:	f7f7 fe7c 	bl	800085c <__aeabi_ddiv>
 8008b64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b68:	f007 070f 	and.w	r7, r7, #15
 8008b6c:	2503      	movs	r5, #3
 8008b6e:	4eb6      	ldr	r6, [pc, #728]	; (8008e48 <_dtoa_r+0x648>)
 8008b70:	b957      	cbnz	r7, 8008b88 <_dtoa_r+0x388>
 8008b72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b76:	ec53 2b18 	vmov	r2, r3, d8
 8008b7a:	f7f7 fe6f 	bl	800085c <__aeabi_ddiv>
 8008b7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b82:	e029      	b.n	8008bd8 <_dtoa_r+0x3d8>
 8008b84:	2502      	movs	r5, #2
 8008b86:	e7f2      	b.n	8008b6e <_dtoa_r+0x36e>
 8008b88:	07f9      	lsls	r1, r7, #31
 8008b8a:	d508      	bpl.n	8008b9e <_dtoa_r+0x39e>
 8008b8c:	ec51 0b18 	vmov	r0, r1, d8
 8008b90:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008b94:	f7f7 fd38 	bl	8000608 <__aeabi_dmul>
 8008b98:	ec41 0b18 	vmov	d8, r0, r1
 8008b9c:	3501      	adds	r5, #1
 8008b9e:	107f      	asrs	r7, r7, #1
 8008ba0:	3608      	adds	r6, #8
 8008ba2:	e7e5      	b.n	8008b70 <_dtoa_r+0x370>
 8008ba4:	f000 80a6 	beq.w	8008cf4 <_dtoa_r+0x4f4>
 8008ba8:	f1ca 0600 	rsb	r6, sl, #0
 8008bac:	4ba5      	ldr	r3, [pc, #660]	; (8008e44 <_dtoa_r+0x644>)
 8008bae:	4fa6      	ldr	r7, [pc, #664]	; (8008e48 <_dtoa_r+0x648>)
 8008bb0:	f006 020f 	and.w	r2, r6, #15
 8008bb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bbc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008bc0:	f7f7 fd22 	bl	8000608 <__aeabi_dmul>
 8008bc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bc8:	1136      	asrs	r6, r6, #4
 8008bca:	2300      	movs	r3, #0
 8008bcc:	2502      	movs	r5, #2
 8008bce:	2e00      	cmp	r6, #0
 8008bd0:	f040 8085 	bne.w	8008cde <_dtoa_r+0x4de>
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d1d2      	bne.n	8008b7e <_dtoa_r+0x37e>
 8008bd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	f000 808c 	beq.w	8008cf8 <_dtoa_r+0x4f8>
 8008be0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008be4:	4b99      	ldr	r3, [pc, #612]	; (8008e4c <_dtoa_r+0x64c>)
 8008be6:	2200      	movs	r2, #0
 8008be8:	4630      	mov	r0, r6
 8008bea:	4639      	mov	r1, r7
 8008bec:	f7f7 ff7e 	bl	8000aec <__aeabi_dcmplt>
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	f000 8081 	beq.w	8008cf8 <_dtoa_r+0x4f8>
 8008bf6:	9b01      	ldr	r3, [sp, #4]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d07d      	beq.n	8008cf8 <_dtoa_r+0x4f8>
 8008bfc:	f1b9 0f00 	cmp.w	r9, #0
 8008c00:	dd3c      	ble.n	8008c7c <_dtoa_r+0x47c>
 8008c02:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008c06:	9307      	str	r3, [sp, #28]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	4b91      	ldr	r3, [pc, #580]	; (8008e50 <_dtoa_r+0x650>)
 8008c0c:	4630      	mov	r0, r6
 8008c0e:	4639      	mov	r1, r7
 8008c10:	f7f7 fcfa 	bl	8000608 <__aeabi_dmul>
 8008c14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c18:	3501      	adds	r5, #1
 8008c1a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008c1e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008c22:	4628      	mov	r0, r5
 8008c24:	f7f7 fc86 	bl	8000534 <__aeabi_i2d>
 8008c28:	4632      	mov	r2, r6
 8008c2a:	463b      	mov	r3, r7
 8008c2c:	f7f7 fcec 	bl	8000608 <__aeabi_dmul>
 8008c30:	4b88      	ldr	r3, [pc, #544]	; (8008e54 <_dtoa_r+0x654>)
 8008c32:	2200      	movs	r2, #0
 8008c34:	f7f7 fb32 	bl	800029c <__adddf3>
 8008c38:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008c3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c40:	9303      	str	r3, [sp, #12]
 8008c42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d15c      	bne.n	8008d02 <_dtoa_r+0x502>
 8008c48:	4b83      	ldr	r3, [pc, #524]	; (8008e58 <_dtoa_r+0x658>)
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	4630      	mov	r0, r6
 8008c4e:	4639      	mov	r1, r7
 8008c50:	f7f7 fb22 	bl	8000298 <__aeabi_dsub>
 8008c54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c58:	4606      	mov	r6, r0
 8008c5a:	460f      	mov	r7, r1
 8008c5c:	f7f7 ff64 	bl	8000b28 <__aeabi_dcmpgt>
 8008c60:	2800      	cmp	r0, #0
 8008c62:	f040 8296 	bne.w	8009192 <_dtoa_r+0x992>
 8008c66:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008c6a:	4630      	mov	r0, r6
 8008c6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c70:	4639      	mov	r1, r7
 8008c72:	f7f7 ff3b 	bl	8000aec <__aeabi_dcmplt>
 8008c76:	2800      	cmp	r0, #0
 8008c78:	f040 8288 	bne.w	800918c <_dtoa_r+0x98c>
 8008c7c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008c80:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008c84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	f2c0 8158 	blt.w	8008f3c <_dtoa_r+0x73c>
 8008c8c:	f1ba 0f0e 	cmp.w	sl, #14
 8008c90:	f300 8154 	bgt.w	8008f3c <_dtoa_r+0x73c>
 8008c94:	4b6b      	ldr	r3, [pc, #428]	; (8008e44 <_dtoa_r+0x644>)
 8008c96:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008c9a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008c9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	f280 80e3 	bge.w	8008e6c <_dtoa_r+0x66c>
 8008ca6:	9b01      	ldr	r3, [sp, #4]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	f300 80df 	bgt.w	8008e6c <_dtoa_r+0x66c>
 8008cae:	f040 826d 	bne.w	800918c <_dtoa_r+0x98c>
 8008cb2:	4b69      	ldr	r3, [pc, #420]	; (8008e58 <_dtoa_r+0x658>)
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	4640      	mov	r0, r8
 8008cb8:	4649      	mov	r1, r9
 8008cba:	f7f7 fca5 	bl	8000608 <__aeabi_dmul>
 8008cbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008cc2:	f7f7 ff27 	bl	8000b14 <__aeabi_dcmpge>
 8008cc6:	9e01      	ldr	r6, [sp, #4]
 8008cc8:	4637      	mov	r7, r6
 8008cca:	2800      	cmp	r0, #0
 8008ccc:	f040 8243 	bne.w	8009156 <_dtoa_r+0x956>
 8008cd0:	9d00      	ldr	r5, [sp, #0]
 8008cd2:	2331      	movs	r3, #49	; 0x31
 8008cd4:	f805 3b01 	strb.w	r3, [r5], #1
 8008cd8:	f10a 0a01 	add.w	sl, sl, #1
 8008cdc:	e23f      	b.n	800915e <_dtoa_r+0x95e>
 8008cde:	07f2      	lsls	r2, r6, #31
 8008ce0:	d505      	bpl.n	8008cee <_dtoa_r+0x4ee>
 8008ce2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ce6:	f7f7 fc8f 	bl	8000608 <__aeabi_dmul>
 8008cea:	3501      	adds	r5, #1
 8008cec:	2301      	movs	r3, #1
 8008cee:	1076      	asrs	r6, r6, #1
 8008cf0:	3708      	adds	r7, #8
 8008cf2:	e76c      	b.n	8008bce <_dtoa_r+0x3ce>
 8008cf4:	2502      	movs	r5, #2
 8008cf6:	e76f      	b.n	8008bd8 <_dtoa_r+0x3d8>
 8008cf8:	9b01      	ldr	r3, [sp, #4]
 8008cfa:	f8cd a01c 	str.w	sl, [sp, #28]
 8008cfe:	930c      	str	r3, [sp, #48]	; 0x30
 8008d00:	e78d      	b.n	8008c1e <_dtoa_r+0x41e>
 8008d02:	9900      	ldr	r1, [sp, #0]
 8008d04:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008d06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d08:	4b4e      	ldr	r3, [pc, #312]	; (8008e44 <_dtoa_r+0x644>)
 8008d0a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008d0e:	4401      	add	r1, r0
 8008d10:	9102      	str	r1, [sp, #8]
 8008d12:	9908      	ldr	r1, [sp, #32]
 8008d14:	eeb0 8a47 	vmov.f32	s16, s14
 8008d18:	eef0 8a67 	vmov.f32	s17, s15
 8008d1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d20:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008d24:	2900      	cmp	r1, #0
 8008d26:	d045      	beq.n	8008db4 <_dtoa_r+0x5b4>
 8008d28:	494c      	ldr	r1, [pc, #304]	; (8008e5c <_dtoa_r+0x65c>)
 8008d2a:	2000      	movs	r0, #0
 8008d2c:	f7f7 fd96 	bl	800085c <__aeabi_ddiv>
 8008d30:	ec53 2b18 	vmov	r2, r3, d8
 8008d34:	f7f7 fab0 	bl	8000298 <__aeabi_dsub>
 8008d38:	9d00      	ldr	r5, [sp, #0]
 8008d3a:	ec41 0b18 	vmov	d8, r0, r1
 8008d3e:	4639      	mov	r1, r7
 8008d40:	4630      	mov	r0, r6
 8008d42:	f7f7 ff11 	bl	8000b68 <__aeabi_d2iz>
 8008d46:	900c      	str	r0, [sp, #48]	; 0x30
 8008d48:	f7f7 fbf4 	bl	8000534 <__aeabi_i2d>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	460b      	mov	r3, r1
 8008d50:	4630      	mov	r0, r6
 8008d52:	4639      	mov	r1, r7
 8008d54:	f7f7 faa0 	bl	8000298 <__aeabi_dsub>
 8008d58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d5a:	3330      	adds	r3, #48	; 0x30
 8008d5c:	f805 3b01 	strb.w	r3, [r5], #1
 8008d60:	ec53 2b18 	vmov	r2, r3, d8
 8008d64:	4606      	mov	r6, r0
 8008d66:	460f      	mov	r7, r1
 8008d68:	f7f7 fec0 	bl	8000aec <__aeabi_dcmplt>
 8008d6c:	2800      	cmp	r0, #0
 8008d6e:	d165      	bne.n	8008e3c <_dtoa_r+0x63c>
 8008d70:	4632      	mov	r2, r6
 8008d72:	463b      	mov	r3, r7
 8008d74:	4935      	ldr	r1, [pc, #212]	; (8008e4c <_dtoa_r+0x64c>)
 8008d76:	2000      	movs	r0, #0
 8008d78:	f7f7 fa8e 	bl	8000298 <__aeabi_dsub>
 8008d7c:	ec53 2b18 	vmov	r2, r3, d8
 8008d80:	f7f7 feb4 	bl	8000aec <__aeabi_dcmplt>
 8008d84:	2800      	cmp	r0, #0
 8008d86:	f040 80b9 	bne.w	8008efc <_dtoa_r+0x6fc>
 8008d8a:	9b02      	ldr	r3, [sp, #8]
 8008d8c:	429d      	cmp	r5, r3
 8008d8e:	f43f af75 	beq.w	8008c7c <_dtoa_r+0x47c>
 8008d92:	4b2f      	ldr	r3, [pc, #188]	; (8008e50 <_dtoa_r+0x650>)
 8008d94:	ec51 0b18 	vmov	r0, r1, d8
 8008d98:	2200      	movs	r2, #0
 8008d9a:	f7f7 fc35 	bl	8000608 <__aeabi_dmul>
 8008d9e:	4b2c      	ldr	r3, [pc, #176]	; (8008e50 <_dtoa_r+0x650>)
 8008da0:	ec41 0b18 	vmov	d8, r0, r1
 8008da4:	2200      	movs	r2, #0
 8008da6:	4630      	mov	r0, r6
 8008da8:	4639      	mov	r1, r7
 8008daa:	f7f7 fc2d 	bl	8000608 <__aeabi_dmul>
 8008dae:	4606      	mov	r6, r0
 8008db0:	460f      	mov	r7, r1
 8008db2:	e7c4      	b.n	8008d3e <_dtoa_r+0x53e>
 8008db4:	ec51 0b17 	vmov	r0, r1, d7
 8008db8:	f7f7 fc26 	bl	8000608 <__aeabi_dmul>
 8008dbc:	9b02      	ldr	r3, [sp, #8]
 8008dbe:	9d00      	ldr	r5, [sp, #0]
 8008dc0:	930c      	str	r3, [sp, #48]	; 0x30
 8008dc2:	ec41 0b18 	vmov	d8, r0, r1
 8008dc6:	4639      	mov	r1, r7
 8008dc8:	4630      	mov	r0, r6
 8008dca:	f7f7 fecd 	bl	8000b68 <__aeabi_d2iz>
 8008dce:	9011      	str	r0, [sp, #68]	; 0x44
 8008dd0:	f7f7 fbb0 	bl	8000534 <__aeabi_i2d>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	460b      	mov	r3, r1
 8008dd8:	4630      	mov	r0, r6
 8008dda:	4639      	mov	r1, r7
 8008ddc:	f7f7 fa5c 	bl	8000298 <__aeabi_dsub>
 8008de0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008de2:	3330      	adds	r3, #48	; 0x30
 8008de4:	f805 3b01 	strb.w	r3, [r5], #1
 8008de8:	9b02      	ldr	r3, [sp, #8]
 8008dea:	429d      	cmp	r5, r3
 8008dec:	4606      	mov	r6, r0
 8008dee:	460f      	mov	r7, r1
 8008df0:	f04f 0200 	mov.w	r2, #0
 8008df4:	d134      	bne.n	8008e60 <_dtoa_r+0x660>
 8008df6:	4b19      	ldr	r3, [pc, #100]	; (8008e5c <_dtoa_r+0x65c>)
 8008df8:	ec51 0b18 	vmov	r0, r1, d8
 8008dfc:	f7f7 fa4e 	bl	800029c <__adddf3>
 8008e00:	4602      	mov	r2, r0
 8008e02:	460b      	mov	r3, r1
 8008e04:	4630      	mov	r0, r6
 8008e06:	4639      	mov	r1, r7
 8008e08:	f7f7 fe8e 	bl	8000b28 <__aeabi_dcmpgt>
 8008e0c:	2800      	cmp	r0, #0
 8008e0e:	d175      	bne.n	8008efc <_dtoa_r+0x6fc>
 8008e10:	ec53 2b18 	vmov	r2, r3, d8
 8008e14:	4911      	ldr	r1, [pc, #68]	; (8008e5c <_dtoa_r+0x65c>)
 8008e16:	2000      	movs	r0, #0
 8008e18:	f7f7 fa3e 	bl	8000298 <__aeabi_dsub>
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	460b      	mov	r3, r1
 8008e20:	4630      	mov	r0, r6
 8008e22:	4639      	mov	r1, r7
 8008e24:	f7f7 fe62 	bl	8000aec <__aeabi_dcmplt>
 8008e28:	2800      	cmp	r0, #0
 8008e2a:	f43f af27 	beq.w	8008c7c <_dtoa_r+0x47c>
 8008e2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e30:	1e6b      	subs	r3, r5, #1
 8008e32:	930c      	str	r3, [sp, #48]	; 0x30
 8008e34:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008e38:	2b30      	cmp	r3, #48	; 0x30
 8008e3a:	d0f8      	beq.n	8008e2e <_dtoa_r+0x62e>
 8008e3c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008e40:	e04a      	b.n	8008ed8 <_dtoa_r+0x6d8>
 8008e42:	bf00      	nop
 8008e44:	0800b1b8 	.word	0x0800b1b8
 8008e48:	0800b190 	.word	0x0800b190
 8008e4c:	3ff00000 	.word	0x3ff00000
 8008e50:	40240000 	.word	0x40240000
 8008e54:	401c0000 	.word	0x401c0000
 8008e58:	40140000 	.word	0x40140000
 8008e5c:	3fe00000 	.word	0x3fe00000
 8008e60:	4baf      	ldr	r3, [pc, #700]	; (8009120 <_dtoa_r+0x920>)
 8008e62:	f7f7 fbd1 	bl	8000608 <__aeabi_dmul>
 8008e66:	4606      	mov	r6, r0
 8008e68:	460f      	mov	r7, r1
 8008e6a:	e7ac      	b.n	8008dc6 <_dtoa_r+0x5c6>
 8008e6c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008e70:	9d00      	ldr	r5, [sp, #0]
 8008e72:	4642      	mov	r2, r8
 8008e74:	464b      	mov	r3, r9
 8008e76:	4630      	mov	r0, r6
 8008e78:	4639      	mov	r1, r7
 8008e7a:	f7f7 fcef 	bl	800085c <__aeabi_ddiv>
 8008e7e:	f7f7 fe73 	bl	8000b68 <__aeabi_d2iz>
 8008e82:	9002      	str	r0, [sp, #8]
 8008e84:	f7f7 fb56 	bl	8000534 <__aeabi_i2d>
 8008e88:	4642      	mov	r2, r8
 8008e8a:	464b      	mov	r3, r9
 8008e8c:	f7f7 fbbc 	bl	8000608 <__aeabi_dmul>
 8008e90:	4602      	mov	r2, r0
 8008e92:	460b      	mov	r3, r1
 8008e94:	4630      	mov	r0, r6
 8008e96:	4639      	mov	r1, r7
 8008e98:	f7f7 f9fe 	bl	8000298 <__aeabi_dsub>
 8008e9c:	9e02      	ldr	r6, [sp, #8]
 8008e9e:	9f01      	ldr	r7, [sp, #4]
 8008ea0:	3630      	adds	r6, #48	; 0x30
 8008ea2:	f805 6b01 	strb.w	r6, [r5], #1
 8008ea6:	9e00      	ldr	r6, [sp, #0]
 8008ea8:	1bae      	subs	r6, r5, r6
 8008eaa:	42b7      	cmp	r7, r6
 8008eac:	4602      	mov	r2, r0
 8008eae:	460b      	mov	r3, r1
 8008eb0:	d137      	bne.n	8008f22 <_dtoa_r+0x722>
 8008eb2:	f7f7 f9f3 	bl	800029c <__adddf3>
 8008eb6:	4642      	mov	r2, r8
 8008eb8:	464b      	mov	r3, r9
 8008eba:	4606      	mov	r6, r0
 8008ebc:	460f      	mov	r7, r1
 8008ebe:	f7f7 fe33 	bl	8000b28 <__aeabi_dcmpgt>
 8008ec2:	b9c8      	cbnz	r0, 8008ef8 <_dtoa_r+0x6f8>
 8008ec4:	4642      	mov	r2, r8
 8008ec6:	464b      	mov	r3, r9
 8008ec8:	4630      	mov	r0, r6
 8008eca:	4639      	mov	r1, r7
 8008ecc:	f7f7 fe04 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ed0:	b110      	cbz	r0, 8008ed8 <_dtoa_r+0x6d8>
 8008ed2:	9b02      	ldr	r3, [sp, #8]
 8008ed4:	07d9      	lsls	r1, r3, #31
 8008ed6:	d40f      	bmi.n	8008ef8 <_dtoa_r+0x6f8>
 8008ed8:	4620      	mov	r0, r4
 8008eda:	4659      	mov	r1, fp
 8008edc:	f000 fad6 	bl	800948c <_Bfree>
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	702b      	strb	r3, [r5, #0]
 8008ee4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ee6:	f10a 0001 	add.w	r0, sl, #1
 8008eea:	6018      	str	r0, [r3, #0]
 8008eec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	f43f acd8 	beq.w	80088a4 <_dtoa_r+0xa4>
 8008ef4:	601d      	str	r5, [r3, #0]
 8008ef6:	e4d5      	b.n	80088a4 <_dtoa_r+0xa4>
 8008ef8:	f8cd a01c 	str.w	sl, [sp, #28]
 8008efc:	462b      	mov	r3, r5
 8008efe:	461d      	mov	r5, r3
 8008f00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f04:	2a39      	cmp	r2, #57	; 0x39
 8008f06:	d108      	bne.n	8008f1a <_dtoa_r+0x71a>
 8008f08:	9a00      	ldr	r2, [sp, #0]
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d1f7      	bne.n	8008efe <_dtoa_r+0x6fe>
 8008f0e:	9a07      	ldr	r2, [sp, #28]
 8008f10:	9900      	ldr	r1, [sp, #0]
 8008f12:	3201      	adds	r2, #1
 8008f14:	9207      	str	r2, [sp, #28]
 8008f16:	2230      	movs	r2, #48	; 0x30
 8008f18:	700a      	strb	r2, [r1, #0]
 8008f1a:	781a      	ldrb	r2, [r3, #0]
 8008f1c:	3201      	adds	r2, #1
 8008f1e:	701a      	strb	r2, [r3, #0]
 8008f20:	e78c      	b.n	8008e3c <_dtoa_r+0x63c>
 8008f22:	4b7f      	ldr	r3, [pc, #508]	; (8009120 <_dtoa_r+0x920>)
 8008f24:	2200      	movs	r2, #0
 8008f26:	f7f7 fb6f 	bl	8000608 <__aeabi_dmul>
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	4606      	mov	r6, r0
 8008f30:	460f      	mov	r7, r1
 8008f32:	f7f7 fdd1 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f36:	2800      	cmp	r0, #0
 8008f38:	d09b      	beq.n	8008e72 <_dtoa_r+0x672>
 8008f3a:	e7cd      	b.n	8008ed8 <_dtoa_r+0x6d8>
 8008f3c:	9a08      	ldr	r2, [sp, #32]
 8008f3e:	2a00      	cmp	r2, #0
 8008f40:	f000 80c4 	beq.w	80090cc <_dtoa_r+0x8cc>
 8008f44:	9a05      	ldr	r2, [sp, #20]
 8008f46:	2a01      	cmp	r2, #1
 8008f48:	f300 80a8 	bgt.w	800909c <_dtoa_r+0x89c>
 8008f4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008f4e:	2a00      	cmp	r2, #0
 8008f50:	f000 80a0 	beq.w	8009094 <_dtoa_r+0x894>
 8008f54:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008f58:	9e06      	ldr	r6, [sp, #24]
 8008f5a:	4645      	mov	r5, r8
 8008f5c:	9a04      	ldr	r2, [sp, #16]
 8008f5e:	2101      	movs	r1, #1
 8008f60:	441a      	add	r2, r3
 8008f62:	4620      	mov	r0, r4
 8008f64:	4498      	add	r8, r3
 8008f66:	9204      	str	r2, [sp, #16]
 8008f68:	f000 fb4c 	bl	8009604 <__i2b>
 8008f6c:	4607      	mov	r7, r0
 8008f6e:	2d00      	cmp	r5, #0
 8008f70:	dd0b      	ble.n	8008f8a <_dtoa_r+0x78a>
 8008f72:	9b04      	ldr	r3, [sp, #16]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	dd08      	ble.n	8008f8a <_dtoa_r+0x78a>
 8008f78:	42ab      	cmp	r3, r5
 8008f7a:	9a04      	ldr	r2, [sp, #16]
 8008f7c:	bfa8      	it	ge
 8008f7e:	462b      	movge	r3, r5
 8008f80:	eba8 0803 	sub.w	r8, r8, r3
 8008f84:	1aed      	subs	r5, r5, r3
 8008f86:	1ad3      	subs	r3, r2, r3
 8008f88:	9304      	str	r3, [sp, #16]
 8008f8a:	9b06      	ldr	r3, [sp, #24]
 8008f8c:	b1fb      	cbz	r3, 8008fce <_dtoa_r+0x7ce>
 8008f8e:	9b08      	ldr	r3, [sp, #32]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	f000 809f 	beq.w	80090d4 <_dtoa_r+0x8d4>
 8008f96:	2e00      	cmp	r6, #0
 8008f98:	dd11      	ble.n	8008fbe <_dtoa_r+0x7be>
 8008f9a:	4639      	mov	r1, r7
 8008f9c:	4632      	mov	r2, r6
 8008f9e:	4620      	mov	r0, r4
 8008fa0:	f000 fbec 	bl	800977c <__pow5mult>
 8008fa4:	465a      	mov	r2, fp
 8008fa6:	4601      	mov	r1, r0
 8008fa8:	4607      	mov	r7, r0
 8008faa:	4620      	mov	r0, r4
 8008fac:	f000 fb40 	bl	8009630 <__multiply>
 8008fb0:	4659      	mov	r1, fp
 8008fb2:	9007      	str	r0, [sp, #28]
 8008fb4:	4620      	mov	r0, r4
 8008fb6:	f000 fa69 	bl	800948c <_Bfree>
 8008fba:	9b07      	ldr	r3, [sp, #28]
 8008fbc:	469b      	mov	fp, r3
 8008fbe:	9b06      	ldr	r3, [sp, #24]
 8008fc0:	1b9a      	subs	r2, r3, r6
 8008fc2:	d004      	beq.n	8008fce <_dtoa_r+0x7ce>
 8008fc4:	4659      	mov	r1, fp
 8008fc6:	4620      	mov	r0, r4
 8008fc8:	f000 fbd8 	bl	800977c <__pow5mult>
 8008fcc:	4683      	mov	fp, r0
 8008fce:	2101      	movs	r1, #1
 8008fd0:	4620      	mov	r0, r4
 8008fd2:	f000 fb17 	bl	8009604 <__i2b>
 8008fd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	4606      	mov	r6, r0
 8008fdc:	dd7c      	ble.n	80090d8 <_dtoa_r+0x8d8>
 8008fde:	461a      	mov	r2, r3
 8008fe0:	4601      	mov	r1, r0
 8008fe2:	4620      	mov	r0, r4
 8008fe4:	f000 fbca 	bl	800977c <__pow5mult>
 8008fe8:	9b05      	ldr	r3, [sp, #20]
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	4606      	mov	r6, r0
 8008fee:	dd76      	ble.n	80090de <_dtoa_r+0x8de>
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	9306      	str	r3, [sp, #24]
 8008ff4:	6933      	ldr	r3, [r6, #16]
 8008ff6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008ffa:	6918      	ldr	r0, [r3, #16]
 8008ffc:	f000 fab2 	bl	8009564 <__hi0bits>
 8009000:	f1c0 0020 	rsb	r0, r0, #32
 8009004:	9b04      	ldr	r3, [sp, #16]
 8009006:	4418      	add	r0, r3
 8009008:	f010 001f 	ands.w	r0, r0, #31
 800900c:	f000 8086 	beq.w	800911c <_dtoa_r+0x91c>
 8009010:	f1c0 0320 	rsb	r3, r0, #32
 8009014:	2b04      	cmp	r3, #4
 8009016:	dd7f      	ble.n	8009118 <_dtoa_r+0x918>
 8009018:	f1c0 001c 	rsb	r0, r0, #28
 800901c:	9b04      	ldr	r3, [sp, #16]
 800901e:	4403      	add	r3, r0
 8009020:	4480      	add	r8, r0
 8009022:	4405      	add	r5, r0
 8009024:	9304      	str	r3, [sp, #16]
 8009026:	f1b8 0f00 	cmp.w	r8, #0
 800902a:	dd05      	ble.n	8009038 <_dtoa_r+0x838>
 800902c:	4659      	mov	r1, fp
 800902e:	4642      	mov	r2, r8
 8009030:	4620      	mov	r0, r4
 8009032:	f000 fbfd 	bl	8009830 <__lshift>
 8009036:	4683      	mov	fp, r0
 8009038:	9b04      	ldr	r3, [sp, #16]
 800903a:	2b00      	cmp	r3, #0
 800903c:	dd05      	ble.n	800904a <_dtoa_r+0x84a>
 800903e:	4631      	mov	r1, r6
 8009040:	461a      	mov	r2, r3
 8009042:	4620      	mov	r0, r4
 8009044:	f000 fbf4 	bl	8009830 <__lshift>
 8009048:	4606      	mov	r6, r0
 800904a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800904c:	2b00      	cmp	r3, #0
 800904e:	d069      	beq.n	8009124 <_dtoa_r+0x924>
 8009050:	4631      	mov	r1, r6
 8009052:	4658      	mov	r0, fp
 8009054:	f000 fc58 	bl	8009908 <__mcmp>
 8009058:	2800      	cmp	r0, #0
 800905a:	da63      	bge.n	8009124 <_dtoa_r+0x924>
 800905c:	2300      	movs	r3, #0
 800905e:	4659      	mov	r1, fp
 8009060:	220a      	movs	r2, #10
 8009062:	4620      	mov	r0, r4
 8009064:	f000 fa34 	bl	80094d0 <__multadd>
 8009068:	9b08      	ldr	r3, [sp, #32]
 800906a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800906e:	4683      	mov	fp, r0
 8009070:	2b00      	cmp	r3, #0
 8009072:	f000 818f 	beq.w	8009394 <_dtoa_r+0xb94>
 8009076:	4639      	mov	r1, r7
 8009078:	2300      	movs	r3, #0
 800907a:	220a      	movs	r2, #10
 800907c:	4620      	mov	r0, r4
 800907e:	f000 fa27 	bl	80094d0 <__multadd>
 8009082:	f1b9 0f00 	cmp.w	r9, #0
 8009086:	4607      	mov	r7, r0
 8009088:	f300 808e 	bgt.w	80091a8 <_dtoa_r+0x9a8>
 800908c:	9b05      	ldr	r3, [sp, #20]
 800908e:	2b02      	cmp	r3, #2
 8009090:	dc50      	bgt.n	8009134 <_dtoa_r+0x934>
 8009092:	e089      	b.n	80091a8 <_dtoa_r+0x9a8>
 8009094:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009096:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800909a:	e75d      	b.n	8008f58 <_dtoa_r+0x758>
 800909c:	9b01      	ldr	r3, [sp, #4]
 800909e:	1e5e      	subs	r6, r3, #1
 80090a0:	9b06      	ldr	r3, [sp, #24]
 80090a2:	42b3      	cmp	r3, r6
 80090a4:	bfbf      	itttt	lt
 80090a6:	9b06      	ldrlt	r3, [sp, #24]
 80090a8:	9606      	strlt	r6, [sp, #24]
 80090aa:	1af2      	sublt	r2, r6, r3
 80090ac:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80090ae:	bfb6      	itet	lt
 80090b0:	189b      	addlt	r3, r3, r2
 80090b2:	1b9e      	subge	r6, r3, r6
 80090b4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80090b6:	9b01      	ldr	r3, [sp, #4]
 80090b8:	bfb8      	it	lt
 80090ba:	2600      	movlt	r6, #0
 80090bc:	2b00      	cmp	r3, #0
 80090be:	bfb5      	itete	lt
 80090c0:	eba8 0503 	sublt.w	r5, r8, r3
 80090c4:	9b01      	ldrge	r3, [sp, #4]
 80090c6:	2300      	movlt	r3, #0
 80090c8:	4645      	movge	r5, r8
 80090ca:	e747      	b.n	8008f5c <_dtoa_r+0x75c>
 80090cc:	9e06      	ldr	r6, [sp, #24]
 80090ce:	9f08      	ldr	r7, [sp, #32]
 80090d0:	4645      	mov	r5, r8
 80090d2:	e74c      	b.n	8008f6e <_dtoa_r+0x76e>
 80090d4:	9a06      	ldr	r2, [sp, #24]
 80090d6:	e775      	b.n	8008fc4 <_dtoa_r+0x7c4>
 80090d8:	9b05      	ldr	r3, [sp, #20]
 80090da:	2b01      	cmp	r3, #1
 80090dc:	dc18      	bgt.n	8009110 <_dtoa_r+0x910>
 80090de:	9b02      	ldr	r3, [sp, #8]
 80090e0:	b9b3      	cbnz	r3, 8009110 <_dtoa_r+0x910>
 80090e2:	9b03      	ldr	r3, [sp, #12]
 80090e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090e8:	b9a3      	cbnz	r3, 8009114 <_dtoa_r+0x914>
 80090ea:	9b03      	ldr	r3, [sp, #12]
 80090ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80090f0:	0d1b      	lsrs	r3, r3, #20
 80090f2:	051b      	lsls	r3, r3, #20
 80090f4:	b12b      	cbz	r3, 8009102 <_dtoa_r+0x902>
 80090f6:	9b04      	ldr	r3, [sp, #16]
 80090f8:	3301      	adds	r3, #1
 80090fa:	9304      	str	r3, [sp, #16]
 80090fc:	f108 0801 	add.w	r8, r8, #1
 8009100:	2301      	movs	r3, #1
 8009102:	9306      	str	r3, [sp, #24]
 8009104:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009106:	2b00      	cmp	r3, #0
 8009108:	f47f af74 	bne.w	8008ff4 <_dtoa_r+0x7f4>
 800910c:	2001      	movs	r0, #1
 800910e:	e779      	b.n	8009004 <_dtoa_r+0x804>
 8009110:	2300      	movs	r3, #0
 8009112:	e7f6      	b.n	8009102 <_dtoa_r+0x902>
 8009114:	9b02      	ldr	r3, [sp, #8]
 8009116:	e7f4      	b.n	8009102 <_dtoa_r+0x902>
 8009118:	d085      	beq.n	8009026 <_dtoa_r+0x826>
 800911a:	4618      	mov	r0, r3
 800911c:	301c      	adds	r0, #28
 800911e:	e77d      	b.n	800901c <_dtoa_r+0x81c>
 8009120:	40240000 	.word	0x40240000
 8009124:	9b01      	ldr	r3, [sp, #4]
 8009126:	2b00      	cmp	r3, #0
 8009128:	dc38      	bgt.n	800919c <_dtoa_r+0x99c>
 800912a:	9b05      	ldr	r3, [sp, #20]
 800912c:	2b02      	cmp	r3, #2
 800912e:	dd35      	ble.n	800919c <_dtoa_r+0x99c>
 8009130:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009134:	f1b9 0f00 	cmp.w	r9, #0
 8009138:	d10d      	bne.n	8009156 <_dtoa_r+0x956>
 800913a:	4631      	mov	r1, r6
 800913c:	464b      	mov	r3, r9
 800913e:	2205      	movs	r2, #5
 8009140:	4620      	mov	r0, r4
 8009142:	f000 f9c5 	bl	80094d0 <__multadd>
 8009146:	4601      	mov	r1, r0
 8009148:	4606      	mov	r6, r0
 800914a:	4658      	mov	r0, fp
 800914c:	f000 fbdc 	bl	8009908 <__mcmp>
 8009150:	2800      	cmp	r0, #0
 8009152:	f73f adbd 	bgt.w	8008cd0 <_dtoa_r+0x4d0>
 8009156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009158:	9d00      	ldr	r5, [sp, #0]
 800915a:	ea6f 0a03 	mvn.w	sl, r3
 800915e:	f04f 0800 	mov.w	r8, #0
 8009162:	4631      	mov	r1, r6
 8009164:	4620      	mov	r0, r4
 8009166:	f000 f991 	bl	800948c <_Bfree>
 800916a:	2f00      	cmp	r7, #0
 800916c:	f43f aeb4 	beq.w	8008ed8 <_dtoa_r+0x6d8>
 8009170:	f1b8 0f00 	cmp.w	r8, #0
 8009174:	d005      	beq.n	8009182 <_dtoa_r+0x982>
 8009176:	45b8      	cmp	r8, r7
 8009178:	d003      	beq.n	8009182 <_dtoa_r+0x982>
 800917a:	4641      	mov	r1, r8
 800917c:	4620      	mov	r0, r4
 800917e:	f000 f985 	bl	800948c <_Bfree>
 8009182:	4639      	mov	r1, r7
 8009184:	4620      	mov	r0, r4
 8009186:	f000 f981 	bl	800948c <_Bfree>
 800918a:	e6a5      	b.n	8008ed8 <_dtoa_r+0x6d8>
 800918c:	2600      	movs	r6, #0
 800918e:	4637      	mov	r7, r6
 8009190:	e7e1      	b.n	8009156 <_dtoa_r+0x956>
 8009192:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009194:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009198:	4637      	mov	r7, r6
 800919a:	e599      	b.n	8008cd0 <_dtoa_r+0x4d0>
 800919c:	9b08      	ldr	r3, [sp, #32]
 800919e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	f000 80fd 	beq.w	80093a2 <_dtoa_r+0xba2>
 80091a8:	2d00      	cmp	r5, #0
 80091aa:	dd05      	ble.n	80091b8 <_dtoa_r+0x9b8>
 80091ac:	4639      	mov	r1, r7
 80091ae:	462a      	mov	r2, r5
 80091b0:	4620      	mov	r0, r4
 80091b2:	f000 fb3d 	bl	8009830 <__lshift>
 80091b6:	4607      	mov	r7, r0
 80091b8:	9b06      	ldr	r3, [sp, #24]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d05c      	beq.n	8009278 <_dtoa_r+0xa78>
 80091be:	6879      	ldr	r1, [r7, #4]
 80091c0:	4620      	mov	r0, r4
 80091c2:	f000 f923 	bl	800940c <_Balloc>
 80091c6:	4605      	mov	r5, r0
 80091c8:	b928      	cbnz	r0, 80091d6 <_dtoa_r+0x9d6>
 80091ca:	4b80      	ldr	r3, [pc, #512]	; (80093cc <_dtoa_r+0xbcc>)
 80091cc:	4602      	mov	r2, r0
 80091ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80091d2:	f7ff bb2e 	b.w	8008832 <_dtoa_r+0x32>
 80091d6:	693a      	ldr	r2, [r7, #16]
 80091d8:	3202      	adds	r2, #2
 80091da:	0092      	lsls	r2, r2, #2
 80091dc:	f107 010c 	add.w	r1, r7, #12
 80091e0:	300c      	adds	r0, #12
 80091e2:	f000 f905 	bl	80093f0 <memcpy>
 80091e6:	2201      	movs	r2, #1
 80091e8:	4629      	mov	r1, r5
 80091ea:	4620      	mov	r0, r4
 80091ec:	f000 fb20 	bl	8009830 <__lshift>
 80091f0:	9b00      	ldr	r3, [sp, #0]
 80091f2:	3301      	adds	r3, #1
 80091f4:	9301      	str	r3, [sp, #4]
 80091f6:	9b00      	ldr	r3, [sp, #0]
 80091f8:	444b      	add	r3, r9
 80091fa:	9307      	str	r3, [sp, #28]
 80091fc:	9b02      	ldr	r3, [sp, #8]
 80091fe:	f003 0301 	and.w	r3, r3, #1
 8009202:	46b8      	mov	r8, r7
 8009204:	9306      	str	r3, [sp, #24]
 8009206:	4607      	mov	r7, r0
 8009208:	9b01      	ldr	r3, [sp, #4]
 800920a:	4631      	mov	r1, r6
 800920c:	3b01      	subs	r3, #1
 800920e:	4658      	mov	r0, fp
 8009210:	9302      	str	r3, [sp, #8]
 8009212:	f7ff fa69 	bl	80086e8 <quorem>
 8009216:	4603      	mov	r3, r0
 8009218:	3330      	adds	r3, #48	; 0x30
 800921a:	9004      	str	r0, [sp, #16]
 800921c:	4641      	mov	r1, r8
 800921e:	4658      	mov	r0, fp
 8009220:	9308      	str	r3, [sp, #32]
 8009222:	f000 fb71 	bl	8009908 <__mcmp>
 8009226:	463a      	mov	r2, r7
 8009228:	4681      	mov	r9, r0
 800922a:	4631      	mov	r1, r6
 800922c:	4620      	mov	r0, r4
 800922e:	f000 fb87 	bl	8009940 <__mdiff>
 8009232:	68c2      	ldr	r2, [r0, #12]
 8009234:	9b08      	ldr	r3, [sp, #32]
 8009236:	4605      	mov	r5, r0
 8009238:	bb02      	cbnz	r2, 800927c <_dtoa_r+0xa7c>
 800923a:	4601      	mov	r1, r0
 800923c:	4658      	mov	r0, fp
 800923e:	f000 fb63 	bl	8009908 <__mcmp>
 8009242:	9b08      	ldr	r3, [sp, #32]
 8009244:	4602      	mov	r2, r0
 8009246:	4629      	mov	r1, r5
 8009248:	4620      	mov	r0, r4
 800924a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800924e:	f000 f91d 	bl	800948c <_Bfree>
 8009252:	9b05      	ldr	r3, [sp, #20]
 8009254:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009256:	9d01      	ldr	r5, [sp, #4]
 8009258:	ea43 0102 	orr.w	r1, r3, r2
 800925c:	9b06      	ldr	r3, [sp, #24]
 800925e:	430b      	orrs	r3, r1
 8009260:	9b08      	ldr	r3, [sp, #32]
 8009262:	d10d      	bne.n	8009280 <_dtoa_r+0xa80>
 8009264:	2b39      	cmp	r3, #57	; 0x39
 8009266:	d029      	beq.n	80092bc <_dtoa_r+0xabc>
 8009268:	f1b9 0f00 	cmp.w	r9, #0
 800926c:	dd01      	ble.n	8009272 <_dtoa_r+0xa72>
 800926e:	9b04      	ldr	r3, [sp, #16]
 8009270:	3331      	adds	r3, #49	; 0x31
 8009272:	9a02      	ldr	r2, [sp, #8]
 8009274:	7013      	strb	r3, [r2, #0]
 8009276:	e774      	b.n	8009162 <_dtoa_r+0x962>
 8009278:	4638      	mov	r0, r7
 800927a:	e7b9      	b.n	80091f0 <_dtoa_r+0x9f0>
 800927c:	2201      	movs	r2, #1
 800927e:	e7e2      	b.n	8009246 <_dtoa_r+0xa46>
 8009280:	f1b9 0f00 	cmp.w	r9, #0
 8009284:	db06      	blt.n	8009294 <_dtoa_r+0xa94>
 8009286:	9905      	ldr	r1, [sp, #20]
 8009288:	ea41 0909 	orr.w	r9, r1, r9
 800928c:	9906      	ldr	r1, [sp, #24]
 800928e:	ea59 0101 	orrs.w	r1, r9, r1
 8009292:	d120      	bne.n	80092d6 <_dtoa_r+0xad6>
 8009294:	2a00      	cmp	r2, #0
 8009296:	ddec      	ble.n	8009272 <_dtoa_r+0xa72>
 8009298:	4659      	mov	r1, fp
 800929a:	2201      	movs	r2, #1
 800929c:	4620      	mov	r0, r4
 800929e:	9301      	str	r3, [sp, #4]
 80092a0:	f000 fac6 	bl	8009830 <__lshift>
 80092a4:	4631      	mov	r1, r6
 80092a6:	4683      	mov	fp, r0
 80092a8:	f000 fb2e 	bl	8009908 <__mcmp>
 80092ac:	2800      	cmp	r0, #0
 80092ae:	9b01      	ldr	r3, [sp, #4]
 80092b0:	dc02      	bgt.n	80092b8 <_dtoa_r+0xab8>
 80092b2:	d1de      	bne.n	8009272 <_dtoa_r+0xa72>
 80092b4:	07da      	lsls	r2, r3, #31
 80092b6:	d5dc      	bpl.n	8009272 <_dtoa_r+0xa72>
 80092b8:	2b39      	cmp	r3, #57	; 0x39
 80092ba:	d1d8      	bne.n	800926e <_dtoa_r+0xa6e>
 80092bc:	9a02      	ldr	r2, [sp, #8]
 80092be:	2339      	movs	r3, #57	; 0x39
 80092c0:	7013      	strb	r3, [r2, #0]
 80092c2:	462b      	mov	r3, r5
 80092c4:	461d      	mov	r5, r3
 80092c6:	3b01      	subs	r3, #1
 80092c8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80092cc:	2a39      	cmp	r2, #57	; 0x39
 80092ce:	d050      	beq.n	8009372 <_dtoa_r+0xb72>
 80092d0:	3201      	adds	r2, #1
 80092d2:	701a      	strb	r2, [r3, #0]
 80092d4:	e745      	b.n	8009162 <_dtoa_r+0x962>
 80092d6:	2a00      	cmp	r2, #0
 80092d8:	dd03      	ble.n	80092e2 <_dtoa_r+0xae2>
 80092da:	2b39      	cmp	r3, #57	; 0x39
 80092dc:	d0ee      	beq.n	80092bc <_dtoa_r+0xabc>
 80092de:	3301      	adds	r3, #1
 80092e0:	e7c7      	b.n	8009272 <_dtoa_r+0xa72>
 80092e2:	9a01      	ldr	r2, [sp, #4]
 80092e4:	9907      	ldr	r1, [sp, #28]
 80092e6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80092ea:	428a      	cmp	r2, r1
 80092ec:	d02a      	beq.n	8009344 <_dtoa_r+0xb44>
 80092ee:	4659      	mov	r1, fp
 80092f0:	2300      	movs	r3, #0
 80092f2:	220a      	movs	r2, #10
 80092f4:	4620      	mov	r0, r4
 80092f6:	f000 f8eb 	bl	80094d0 <__multadd>
 80092fa:	45b8      	cmp	r8, r7
 80092fc:	4683      	mov	fp, r0
 80092fe:	f04f 0300 	mov.w	r3, #0
 8009302:	f04f 020a 	mov.w	r2, #10
 8009306:	4641      	mov	r1, r8
 8009308:	4620      	mov	r0, r4
 800930a:	d107      	bne.n	800931c <_dtoa_r+0xb1c>
 800930c:	f000 f8e0 	bl	80094d0 <__multadd>
 8009310:	4680      	mov	r8, r0
 8009312:	4607      	mov	r7, r0
 8009314:	9b01      	ldr	r3, [sp, #4]
 8009316:	3301      	adds	r3, #1
 8009318:	9301      	str	r3, [sp, #4]
 800931a:	e775      	b.n	8009208 <_dtoa_r+0xa08>
 800931c:	f000 f8d8 	bl	80094d0 <__multadd>
 8009320:	4639      	mov	r1, r7
 8009322:	4680      	mov	r8, r0
 8009324:	2300      	movs	r3, #0
 8009326:	220a      	movs	r2, #10
 8009328:	4620      	mov	r0, r4
 800932a:	f000 f8d1 	bl	80094d0 <__multadd>
 800932e:	4607      	mov	r7, r0
 8009330:	e7f0      	b.n	8009314 <_dtoa_r+0xb14>
 8009332:	f1b9 0f00 	cmp.w	r9, #0
 8009336:	9a00      	ldr	r2, [sp, #0]
 8009338:	bfcc      	ite	gt
 800933a:	464d      	movgt	r5, r9
 800933c:	2501      	movle	r5, #1
 800933e:	4415      	add	r5, r2
 8009340:	f04f 0800 	mov.w	r8, #0
 8009344:	4659      	mov	r1, fp
 8009346:	2201      	movs	r2, #1
 8009348:	4620      	mov	r0, r4
 800934a:	9301      	str	r3, [sp, #4]
 800934c:	f000 fa70 	bl	8009830 <__lshift>
 8009350:	4631      	mov	r1, r6
 8009352:	4683      	mov	fp, r0
 8009354:	f000 fad8 	bl	8009908 <__mcmp>
 8009358:	2800      	cmp	r0, #0
 800935a:	dcb2      	bgt.n	80092c2 <_dtoa_r+0xac2>
 800935c:	d102      	bne.n	8009364 <_dtoa_r+0xb64>
 800935e:	9b01      	ldr	r3, [sp, #4]
 8009360:	07db      	lsls	r3, r3, #31
 8009362:	d4ae      	bmi.n	80092c2 <_dtoa_r+0xac2>
 8009364:	462b      	mov	r3, r5
 8009366:	461d      	mov	r5, r3
 8009368:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800936c:	2a30      	cmp	r2, #48	; 0x30
 800936e:	d0fa      	beq.n	8009366 <_dtoa_r+0xb66>
 8009370:	e6f7      	b.n	8009162 <_dtoa_r+0x962>
 8009372:	9a00      	ldr	r2, [sp, #0]
 8009374:	429a      	cmp	r2, r3
 8009376:	d1a5      	bne.n	80092c4 <_dtoa_r+0xac4>
 8009378:	f10a 0a01 	add.w	sl, sl, #1
 800937c:	2331      	movs	r3, #49	; 0x31
 800937e:	e779      	b.n	8009274 <_dtoa_r+0xa74>
 8009380:	4b13      	ldr	r3, [pc, #76]	; (80093d0 <_dtoa_r+0xbd0>)
 8009382:	f7ff baaf 	b.w	80088e4 <_dtoa_r+0xe4>
 8009386:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009388:	2b00      	cmp	r3, #0
 800938a:	f47f aa86 	bne.w	800889a <_dtoa_r+0x9a>
 800938e:	4b11      	ldr	r3, [pc, #68]	; (80093d4 <_dtoa_r+0xbd4>)
 8009390:	f7ff baa8 	b.w	80088e4 <_dtoa_r+0xe4>
 8009394:	f1b9 0f00 	cmp.w	r9, #0
 8009398:	dc03      	bgt.n	80093a2 <_dtoa_r+0xba2>
 800939a:	9b05      	ldr	r3, [sp, #20]
 800939c:	2b02      	cmp	r3, #2
 800939e:	f73f aec9 	bgt.w	8009134 <_dtoa_r+0x934>
 80093a2:	9d00      	ldr	r5, [sp, #0]
 80093a4:	4631      	mov	r1, r6
 80093a6:	4658      	mov	r0, fp
 80093a8:	f7ff f99e 	bl	80086e8 <quorem>
 80093ac:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80093b0:	f805 3b01 	strb.w	r3, [r5], #1
 80093b4:	9a00      	ldr	r2, [sp, #0]
 80093b6:	1aaa      	subs	r2, r5, r2
 80093b8:	4591      	cmp	r9, r2
 80093ba:	ddba      	ble.n	8009332 <_dtoa_r+0xb32>
 80093bc:	4659      	mov	r1, fp
 80093be:	2300      	movs	r3, #0
 80093c0:	220a      	movs	r2, #10
 80093c2:	4620      	mov	r0, r4
 80093c4:	f000 f884 	bl	80094d0 <__multadd>
 80093c8:	4683      	mov	fp, r0
 80093ca:	e7eb      	b.n	80093a4 <_dtoa_r+0xba4>
 80093cc:	0800b11b 	.word	0x0800b11b
 80093d0:	0800b074 	.word	0x0800b074
 80093d4:	0800b098 	.word	0x0800b098

080093d8 <_localeconv_r>:
 80093d8:	4800      	ldr	r0, [pc, #0]	; (80093dc <_localeconv_r+0x4>)
 80093da:	4770      	bx	lr
 80093dc:	20000160 	.word	0x20000160

080093e0 <malloc>:
 80093e0:	4b02      	ldr	r3, [pc, #8]	; (80093ec <malloc+0xc>)
 80093e2:	4601      	mov	r1, r0
 80093e4:	6818      	ldr	r0, [r3, #0]
 80093e6:	f000 bbef 	b.w	8009bc8 <_malloc_r>
 80093ea:	bf00      	nop
 80093ec:	2000000c 	.word	0x2000000c

080093f0 <memcpy>:
 80093f0:	440a      	add	r2, r1
 80093f2:	4291      	cmp	r1, r2
 80093f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80093f8:	d100      	bne.n	80093fc <memcpy+0xc>
 80093fa:	4770      	bx	lr
 80093fc:	b510      	push	{r4, lr}
 80093fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009402:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009406:	4291      	cmp	r1, r2
 8009408:	d1f9      	bne.n	80093fe <memcpy+0xe>
 800940a:	bd10      	pop	{r4, pc}

0800940c <_Balloc>:
 800940c:	b570      	push	{r4, r5, r6, lr}
 800940e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009410:	4604      	mov	r4, r0
 8009412:	460d      	mov	r5, r1
 8009414:	b976      	cbnz	r6, 8009434 <_Balloc+0x28>
 8009416:	2010      	movs	r0, #16
 8009418:	f7ff ffe2 	bl	80093e0 <malloc>
 800941c:	4602      	mov	r2, r0
 800941e:	6260      	str	r0, [r4, #36]	; 0x24
 8009420:	b920      	cbnz	r0, 800942c <_Balloc+0x20>
 8009422:	4b18      	ldr	r3, [pc, #96]	; (8009484 <_Balloc+0x78>)
 8009424:	4818      	ldr	r0, [pc, #96]	; (8009488 <_Balloc+0x7c>)
 8009426:	2166      	movs	r1, #102	; 0x66
 8009428:	f000 fd94 	bl	8009f54 <__assert_func>
 800942c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009430:	6006      	str	r6, [r0, #0]
 8009432:	60c6      	str	r6, [r0, #12]
 8009434:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009436:	68f3      	ldr	r3, [r6, #12]
 8009438:	b183      	cbz	r3, 800945c <_Balloc+0x50>
 800943a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800943c:	68db      	ldr	r3, [r3, #12]
 800943e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009442:	b9b8      	cbnz	r0, 8009474 <_Balloc+0x68>
 8009444:	2101      	movs	r1, #1
 8009446:	fa01 f605 	lsl.w	r6, r1, r5
 800944a:	1d72      	adds	r2, r6, #5
 800944c:	0092      	lsls	r2, r2, #2
 800944e:	4620      	mov	r0, r4
 8009450:	f000 fb5a 	bl	8009b08 <_calloc_r>
 8009454:	b160      	cbz	r0, 8009470 <_Balloc+0x64>
 8009456:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800945a:	e00e      	b.n	800947a <_Balloc+0x6e>
 800945c:	2221      	movs	r2, #33	; 0x21
 800945e:	2104      	movs	r1, #4
 8009460:	4620      	mov	r0, r4
 8009462:	f000 fb51 	bl	8009b08 <_calloc_r>
 8009466:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009468:	60f0      	str	r0, [r6, #12]
 800946a:	68db      	ldr	r3, [r3, #12]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d1e4      	bne.n	800943a <_Balloc+0x2e>
 8009470:	2000      	movs	r0, #0
 8009472:	bd70      	pop	{r4, r5, r6, pc}
 8009474:	6802      	ldr	r2, [r0, #0]
 8009476:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800947a:	2300      	movs	r3, #0
 800947c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009480:	e7f7      	b.n	8009472 <_Balloc+0x66>
 8009482:	bf00      	nop
 8009484:	0800b0a5 	.word	0x0800b0a5
 8009488:	0800b12c 	.word	0x0800b12c

0800948c <_Bfree>:
 800948c:	b570      	push	{r4, r5, r6, lr}
 800948e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009490:	4605      	mov	r5, r0
 8009492:	460c      	mov	r4, r1
 8009494:	b976      	cbnz	r6, 80094b4 <_Bfree+0x28>
 8009496:	2010      	movs	r0, #16
 8009498:	f7ff ffa2 	bl	80093e0 <malloc>
 800949c:	4602      	mov	r2, r0
 800949e:	6268      	str	r0, [r5, #36]	; 0x24
 80094a0:	b920      	cbnz	r0, 80094ac <_Bfree+0x20>
 80094a2:	4b09      	ldr	r3, [pc, #36]	; (80094c8 <_Bfree+0x3c>)
 80094a4:	4809      	ldr	r0, [pc, #36]	; (80094cc <_Bfree+0x40>)
 80094a6:	218a      	movs	r1, #138	; 0x8a
 80094a8:	f000 fd54 	bl	8009f54 <__assert_func>
 80094ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80094b0:	6006      	str	r6, [r0, #0]
 80094b2:	60c6      	str	r6, [r0, #12]
 80094b4:	b13c      	cbz	r4, 80094c6 <_Bfree+0x3a>
 80094b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80094b8:	6862      	ldr	r2, [r4, #4]
 80094ba:	68db      	ldr	r3, [r3, #12]
 80094bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80094c0:	6021      	str	r1, [r4, #0]
 80094c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80094c6:	bd70      	pop	{r4, r5, r6, pc}
 80094c8:	0800b0a5 	.word	0x0800b0a5
 80094cc:	0800b12c 	.word	0x0800b12c

080094d0 <__multadd>:
 80094d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094d4:	690e      	ldr	r6, [r1, #16]
 80094d6:	4607      	mov	r7, r0
 80094d8:	4698      	mov	r8, r3
 80094da:	460c      	mov	r4, r1
 80094dc:	f101 0014 	add.w	r0, r1, #20
 80094e0:	2300      	movs	r3, #0
 80094e2:	6805      	ldr	r5, [r0, #0]
 80094e4:	b2a9      	uxth	r1, r5
 80094e6:	fb02 8101 	mla	r1, r2, r1, r8
 80094ea:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80094ee:	0c2d      	lsrs	r5, r5, #16
 80094f0:	fb02 c505 	mla	r5, r2, r5, ip
 80094f4:	b289      	uxth	r1, r1
 80094f6:	3301      	adds	r3, #1
 80094f8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80094fc:	429e      	cmp	r6, r3
 80094fe:	f840 1b04 	str.w	r1, [r0], #4
 8009502:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009506:	dcec      	bgt.n	80094e2 <__multadd+0x12>
 8009508:	f1b8 0f00 	cmp.w	r8, #0
 800950c:	d022      	beq.n	8009554 <__multadd+0x84>
 800950e:	68a3      	ldr	r3, [r4, #8]
 8009510:	42b3      	cmp	r3, r6
 8009512:	dc19      	bgt.n	8009548 <__multadd+0x78>
 8009514:	6861      	ldr	r1, [r4, #4]
 8009516:	4638      	mov	r0, r7
 8009518:	3101      	adds	r1, #1
 800951a:	f7ff ff77 	bl	800940c <_Balloc>
 800951e:	4605      	mov	r5, r0
 8009520:	b928      	cbnz	r0, 800952e <__multadd+0x5e>
 8009522:	4602      	mov	r2, r0
 8009524:	4b0d      	ldr	r3, [pc, #52]	; (800955c <__multadd+0x8c>)
 8009526:	480e      	ldr	r0, [pc, #56]	; (8009560 <__multadd+0x90>)
 8009528:	21b5      	movs	r1, #181	; 0xb5
 800952a:	f000 fd13 	bl	8009f54 <__assert_func>
 800952e:	6922      	ldr	r2, [r4, #16]
 8009530:	3202      	adds	r2, #2
 8009532:	f104 010c 	add.w	r1, r4, #12
 8009536:	0092      	lsls	r2, r2, #2
 8009538:	300c      	adds	r0, #12
 800953a:	f7ff ff59 	bl	80093f0 <memcpy>
 800953e:	4621      	mov	r1, r4
 8009540:	4638      	mov	r0, r7
 8009542:	f7ff ffa3 	bl	800948c <_Bfree>
 8009546:	462c      	mov	r4, r5
 8009548:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800954c:	3601      	adds	r6, #1
 800954e:	f8c3 8014 	str.w	r8, [r3, #20]
 8009552:	6126      	str	r6, [r4, #16]
 8009554:	4620      	mov	r0, r4
 8009556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800955a:	bf00      	nop
 800955c:	0800b11b 	.word	0x0800b11b
 8009560:	0800b12c 	.word	0x0800b12c

08009564 <__hi0bits>:
 8009564:	0c03      	lsrs	r3, r0, #16
 8009566:	041b      	lsls	r3, r3, #16
 8009568:	b9d3      	cbnz	r3, 80095a0 <__hi0bits+0x3c>
 800956a:	0400      	lsls	r0, r0, #16
 800956c:	2310      	movs	r3, #16
 800956e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009572:	bf04      	itt	eq
 8009574:	0200      	lsleq	r0, r0, #8
 8009576:	3308      	addeq	r3, #8
 8009578:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800957c:	bf04      	itt	eq
 800957e:	0100      	lsleq	r0, r0, #4
 8009580:	3304      	addeq	r3, #4
 8009582:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009586:	bf04      	itt	eq
 8009588:	0080      	lsleq	r0, r0, #2
 800958a:	3302      	addeq	r3, #2
 800958c:	2800      	cmp	r0, #0
 800958e:	db05      	blt.n	800959c <__hi0bits+0x38>
 8009590:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009594:	f103 0301 	add.w	r3, r3, #1
 8009598:	bf08      	it	eq
 800959a:	2320      	moveq	r3, #32
 800959c:	4618      	mov	r0, r3
 800959e:	4770      	bx	lr
 80095a0:	2300      	movs	r3, #0
 80095a2:	e7e4      	b.n	800956e <__hi0bits+0xa>

080095a4 <__lo0bits>:
 80095a4:	6803      	ldr	r3, [r0, #0]
 80095a6:	f013 0207 	ands.w	r2, r3, #7
 80095aa:	4601      	mov	r1, r0
 80095ac:	d00b      	beq.n	80095c6 <__lo0bits+0x22>
 80095ae:	07da      	lsls	r2, r3, #31
 80095b0:	d424      	bmi.n	80095fc <__lo0bits+0x58>
 80095b2:	0798      	lsls	r0, r3, #30
 80095b4:	bf49      	itett	mi
 80095b6:	085b      	lsrmi	r3, r3, #1
 80095b8:	089b      	lsrpl	r3, r3, #2
 80095ba:	2001      	movmi	r0, #1
 80095bc:	600b      	strmi	r3, [r1, #0]
 80095be:	bf5c      	itt	pl
 80095c0:	600b      	strpl	r3, [r1, #0]
 80095c2:	2002      	movpl	r0, #2
 80095c4:	4770      	bx	lr
 80095c6:	b298      	uxth	r0, r3
 80095c8:	b9b0      	cbnz	r0, 80095f8 <__lo0bits+0x54>
 80095ca:	0c1b      	lsrs	r3, r3, #16
 80095cc:	2010      	movs	r0, #16
 80095ce:	f013 0fff 	tst.w	r3, #255	; 0xff
 80095d2:	bf04      	itt	eq
 80095d4:	0a1b      	lsreq	r3, r3, #8
 80095d6:	3008      	addeq	r0, #8
 80095d8:	071a      	lsls	r2, r3, #28
 80095da:	bf04      	itt	eq
 80095dc:	091b      	lsreq	r3, r3, #4
 80095de:	3004      	addeq	r0, #4
 80095e0:	079a      	lsls	r2, r3, #30
 80095e2:	bf04      	itt	eq
 80095e4:	089b      	lsreq	r3, r3, #2
 80095e6:	3002      	addeq	r0, #2
 80095e8:	07da      	lsls	r2, r3, #31
 80095ea:	d403      	bmi.n	80095f4 <__lo0bits+0x50>
 80095ec:	085b      	lsrs	r3, r3, #1
 80095ee:	f100 0001 	add.w	r0, r0, #1
 80095f2:	d005      	beq.n	8009600 <__lo0bits+0x5c>
 80095f4:	600b      	str	r3, [r1, #0]
 80095f6:	4770      	bx	lr
 80095f8:	4610      	mov	r0, r2
 80095fa:	e7e8      	b.n	80095ce <__lo0bits+0x2a>
 80095fc:	2000      	movs	r0, #0
 80095fe:	4770      	bx	lr
 8009600:	2020      	movs	r0, #32
 8009602:	4770      	bx	lr

08009604 <__i2b>:
 8009604:	b510      	push	{r4, lr}
 8009606:	460c      	mov	r4, r1
 8009608:	2101      	movs	r1, #1
 800960a:	f7ff feff 	bl	800940c <_Balloc>
 800960e:	4602      	mov	r2, r0
 8009610:	b928      	cbnz	r0, 800961e <__i2b+0x1a>
 8009612:	4b05      	ldr	r3, [pc, #20]	; (8009628 <__i2b+0x24>)
 8009614:	4805      	ldr	r0, [pc, #20]	; (800962c <__i2b+0x28>)
 8009616:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800961a:	f000 fc9b 	bl	8009f54 <__assert_func>
 800961e:	2301      	movs	r3, #1
 8009620:	6144      	str	r4, [r0, #20]
 8009622:	6103      	str	r3, [r0, #16]
 8009624:	bd10      	pop	{r4, pc}
 8009626:	bf00      	nop
 8009628:	0800b11b 	.word	0x0800b11b
 800962c:	0800b12c 	.word	0x0800b12c

08009630 <__multiply>:
 8009630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009634:	4614      	mov	r4, r2
 8009636:	690a      	ldr	r2, [r1, #16]
 8009638:	6923      	ldr	r3, [r4, #16]
 800963a:	429a      	cmp	r2, r3
 800963c:	bfb8      	it	lt
 800963e:	460b      	movlt	r3, r1
 8009640:	460d      	mov	r5, r1
 8009642:	bfbc      	itt	lt
 8009644:	4625      	movlt	r5, r4
 8009646:	461c      	movlt	r4, r3
 8009648:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800964c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009650:	68ab      	ldr	r3, [r5, #8]
 8009652:	6869      	ldr	r1, [r5, #4]
 8009654:	eb0a 0709 	add.w	r7, sl, r9
 8009658:	42bb      	cmp	r3, r7
 800965a:	b085      	sub	sp, #20
 800965c:	bfb8      	it	lt
 800965e:	3101      	addlt	r1, #1
 8009660:	f7ff fed4 	bl	800940c <_Balloc>
 8009664:	b930      	cbnz	r0, 8009674 <__multiply+0x44>
 8009666:	4602      	mov	r2, r0
 8009668:	4b42      	ldr	r3, [pc, #264]	; (8009774 <__multiply+0x144>)
 800966a:	4843      	ldr	r0, [pc, #268]	; (8009778 <__multiply+0x148>)
 800966c:	f240 115d 	movw	r1, #349	; 0x15d
 8009670:	f000 fc70 	bl	8009f54 <__assert_func>
 8009674:	f100 0614 	add.w	r6, r0, #20
 8009678:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800967c:	4633      	mov	r3, r6
 800967e:	2200      	movs	r2, #0
 8009680:	4543      	cmp	r3, r8
 8009682:	d31e      	bcc.n	80096c2 <__multiply+0x92>
 8009684:	f105 0c14 	add.w	ip, r5, #20
 8009688:	f104 0314 	add.w	r3, r4, #20
 800968c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009690:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009694:	9202      	str	r2, [sp, #8]
 8009696:	ebac 0205 	sub.w	r2, ip, r5
 800969a:	3a15      	subs	r2, #21
 800969c:	f022 0203 	bic.w	r2, r2, #3
 80096a0:	3204      	adds	r2, #4
 80096a2:	f105 0115 	add.w	r1, r5, #21
 80096a6:	458c      	cmp	ip, r1
 80096a8:	bf38      	it	cc
 80096aa:	2204      	movcc	r2, #4
 80096ac:	9201      	str	r2, [sp, #4]
 80096ae:	9a02      	ldr	r2, [sp, #8]
 80096b0:	9303      	str	r3, [sp, #12]
 80096b2:	429a      	cmp	r2, r3
 80096b4:	d808      	bhi.n	80096c8 <__multiply+0x98>
 80096b6:	2f00      	cmp	r7, #0
 80096b8:	dc55      	bgt.n	8009766 <__multiply+0x136>
 80096ba:	6107      	str	r7, [r0, #16]
 80096bc:	b005      	add	sp, #20
 80096be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096c2:	f843 2b04 	str.w	r2, [r3], #4
 80096c6:	e7db      	b.n	8009680 <__multiply+0x50>
 80096c8:	f8b3 a000 	ldrh.w	sl, [r3]
 80096cc:	f1ba 0f00 	cmp.w	sl, #0
 80096d0:	d020      	beq.n	8009714 <__multiply+0xe4>
 80096d2:	f105 0e14 	add.w	lr, r5, #20
 80096d6:	46b1      	mov	r9, r6
 80096d8:	2200      	movs	r2, #0
 80096da:	f85e 4b04 	ldr.w	r4, [lr], #4
 80096de:	f8d9 b000 	ldr.w	fp, [r9]
 80096e2:	b2a1      	uxth	r1, r4
 80096e4:	fa1f fb8b 	uxth.w	fp, fp
 80096e8:	fb0a b101 	mla	r1, sl, r1, fp
 80096ec:	4411      	add	r1, r2
 80096ee:	f8d9 2000 	ldr.w	r2, [r9]
 80096f2:	0c24      	lsrs	r4, r4, #16
 80096f4:	0c12      	lsrs	r2, r2, #16
 80096f6:	fb0a 2404 	mla	r4, sl, r4, r2
 80096fa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80096fe:	b289      	uxth	r1, r1
 8009700:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009704:	45f4      	cmp	ip, lr
 8009706:	f849 1b04 	str.w	r1, [r9], #4
 800970a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800970e:	d8e4      	bhi.n	80096da <__multiply+0xaa>
 8009710:	9901      	ldr	r1, [sp, #4]
 8009712:	5072      	str	r2, [r6, r1]
 8009714:	9a03      	ldr	r2, [sp, #12]
 8009716:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800971a:	3304      	adds	r3, #4
 800971c:	f1b9 0f00 	cmp.w	r9, #0
 8009720:	d01f      	beq.n	8009762 <__multiply+0x132>
 8009722:	6834      	ldr	r4, [r6, #0]
 8009724:	f105 0114 	add.w	r1, r5, #20
 8009728:	46b6      	mov	lr, r6
 800972a:	f04f 0a00 	mov.w	sl, #0
 800972e:	880a      	ldrh	r2, [r1, #0]
 8009730:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009734:	fb09 b202 	mla	r2, r9, r2, fp
 8009738:	4492      	add	sl, r2
 800973a:	b2a4      	uxth	r4, r4
 800973c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009740:	f84e 4b04 	str.w	r4, [lr], #4
 8009744:	f851 4b04 	ldr.w	r4, [r1], #4
 8009748:	f8be 2000 	ldrh.w	r2, [lr]
 800974c:	0c24      	lsrs	r4, r4, #16
 800974e:	fb09 2404 	mla	r4, r9, r4, r2
 8009752:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009756:	458c      	cmp	ip, r1
 8009758:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800975c:	d8e7      	bhi.n	800972e <__multiply+0xfe>
 800975e:	9a01      	ldr	r2, [sp, #4]
 8009760:	50b4      	str	r4, [r6, r2]
 8009762:	3604      	adds	r6, #4
 8009764:	e7a3      	b.n	80096ae <__multiply+0x7e>
 8009766:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800976a:	2b00      	cmp	r3, #0
 800976c:	d1a5      	bne.n	80096ba <__multiply+0x8a>
 800976e:	3f01      	subs	r7, #1
 8009770:	e7a1      	b.n	80096b6 <__multiply+0x86>
 8009772:	bf00      	nop
 8009774:	0800b11b 	.word	0x0800b11b
 8009778:	0800b12c 	.word	0x0800b12c

0800977c <__pow5mult>:
 800977c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009780:	4615      	mov	r5, r2
 8009782:	f012 0203 	ands.w	r2, r2, #3
 8009786:	4606      	mov	r6, r0
 8009788:	460f      	mov	r7, r1
 800978a:	d007      	beq.n	800979c <__pow5mult+0x20>
 800978c:	4c25      	ldr	r4, [pc, #148]	; (8009824 <__pow5mult+0xa8>)
 800978e:	3a01      	subs	r2, #1
 8009790:	2300      	movs	r3, #0
 8009792:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009796:	f7ff fe9b 	bl	80094d0 <__multadd>
 800979a:	4607      	mov	r7, r0
 800979c:	10ad      	asrs	r5, r5, #2
 800979e:	d03d      	beq.n	800981c <__pow5mult+0xa0>
 80097a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80097a2:	b97c      	cbnz	r4, 80097c4 <__pow5mult+0x48>
 80097a4:	2010      	movs	r0, #16
 80097a6:	f7ff fe1b 	bl	80093e0 <malloc>
 80097aa:	4602      	mov	r2, r0
 80097ac:	6270      	str	r0, [r6, #36]	; 0x24
 80097ae:	b928      	cbnz	r0, 80097bc <__pow5mult+0x40>
 80097b0:	4b1d      	ldr	r3, [pc, #116]	; (8009828 <__pow5mult+0xac>)
 80097b2:	481e      	ldr	r0, [pc, #120]	; (800982c <__pow5mult+0xb0>)
 80097b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80097b8:	f000 fbcc 	bl	8009f54 <__assert_func>
 80097bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80097c0:	6004      	str	r4, [r0, #0]
 80097c2:	60c4      	str	r4, [r0, #12]
 80097c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80097c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80097cc:	b94c      	cbnz	r4, 80097e2 <__pow5mult+0x66>
 80097ce:	f240 2171 	movw	r1, #625	; 0x271
 80097d2:	4630      	mov	r0, r6
 80097d4:	f7ff ff16 	bl	8009604 <__i2b>
 80097d8:	2300      	movs	r3, #0
 80097da:	f8c8 0008 	str.w	r0, [r8, #8]
 80097de:	4604      	mov	r4, r0
 80097e0:	6003      	str	r3, [r0, #0]
 80097e2:	f04f 0900 	mov.w	r9, #0
 80097e6:	07eb      	lsls	r3, r5, #31
 80097e8:	d50a      	bpl.n	8009800 <__pow5mult+0x84>
 80097ea:	4639      	mov	r1, r7
 80097ec:	4622      	mov	r2, r4
 80097ee:	4630      	mov	r0, r6
 80097f0:	f7ff ff1e 	bl	8009630 <__multiply>
 80097f4:	4639      	mov	r1, r7
 80097f6:	4680      	mov	r8, r0
 80097f8:	4630      	mov	r0, r6
 80097fa:	f7ff fe47 	bl	800948c <_Bfree>
 80097fe:	4647      	mov	r7, r8
 8009800:	106d      	asrs	r5, r5, #1
 8009802:	d00b      	beq.n	800981c <__pow5mult+0xa0>
 8009804:	6820      	ldr	r0, [r4, #0]
 8009806:	b938      	cbnz	r0, 8009818 <__pow5mult+0x9c>
 8009808:	4622      	mov	r2, r4
 800980a:	4621      	mov	r1, r4
 800980c:	4630      	mov	r0, r6
 800980e:	f7ff ff0f 	bl	8009630 <__multiply>
 8009812:	6020      	str	r0, [r4, #0]
 8009814:	f8c0 9000 	str.w	r9, [r0]
 8009818:	4604      	mov	r4, r0
 800981a:	e7e4      	b.n	80097e6 <__pow5mult+0x6a>
 800981c:	4638      	mov	r0, r7
 800981e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009822:	bf00      	nop
 8009824:	0800b280 	.word	0x0800b280
 8009828:	0800b0a5 	.word	0x0800b0a5
 800982c:	0800b12c 	.word	0x0800b12c

08009830 <__lshift>:
 8009830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009834:	460c      	mov	r4, r1
 8009836:	6849      	ldr	r1, [r1, #4]
 8009838:	6923      	ldr	r3, [r4, #16]
 800983a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800983e:	68a3      	ldr	r3, [r4, #8]
 8009840:	4607      	mov	r7, r0
 8009842:	4691      	mov	r9, r2
 8009844:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009848:	f108 0601 	add.w	r6, r8, #1
 800984c:	42b3      	cmp	r3, r6
 800984e:	db0b      	blt.n	8009868 <__lshift+0x38>
 8009850:	4638      	mov	r0, r7
 8009852:	f7ff fddb 	bl	800940c <_Balloc>
 8009856:	4605      	mov	r5, r0
 8009858:	b948      	cbnz	r0, 800986e <__lshift+0x3e>
 800985a:	4602      	mov	r2, r0
 800985c:	4b28      	ldr	r3, [pc, #160]	; (8009900 <__lshift+0xd0>)
 800985e:	4829      	ldr	r0, [pc, #164]	; (8009904 <__lshift+0xd4>)
 8009860:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009864:	f000 fb76 	bl	8009f54 <__assert_func>
 8009868:	3101      	adds	r1, #1
 800986a:	005b      	lsls	r3, r3, #1
 800986c:	e7ee      	b.n	800984c <__lshift+0x1c>
 800986e:	2300      	movs	r3, #0
 8009870:	f100 0114 	add.w	r1, r0, #20
 8009874:	f100 0210 	add.w	r2, r0, #16
 8009878:	4618      	mov	r0, r3
 800987a:	4553      	cmp	r3, sl
 800987c:	db33      	blt.n	80098e6 <__lshift+0xb6>
 800987e:	6920      	ldr	r0, [r4, #16]
 8009880:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009884:	f104 0314 	add.w	r3, r4, #20
 8009888:	f019 091f 	ands.w	r9, r9, #31
 800988c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009890:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009894:	d02b      	beq.n	80098ee <__lshift+0xbe>
 8009896:	f1c9 0e20 	rsb	lr, r9, #32
 800989a:	468a      	mov	sl, r1
 800989c:	2200      	movs	r2, #0
 800989e:	6818      	ldr	r0, [r3, #0]
 80098a0:	fa00 f009 	lsl.w	r0, r0, r9
 80098a4:	4302      	orrs	r2, r0
 80098a6:	f84a 2b04 	str.w	r2, [sl], #4
 80098aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80098ae:	459c      	cmp	ip, r3
 80098b0:	fa22 f20e 	lsr.w	r2, r2, lr
 80098b4:	d8f3      	bhi.n	800989e <__lshift+0x6e>
 80098b6:	ebac 0304 	sub.w	r3, ip, r4
 80098ba:	3b15      	subs	r3, #21
 80098bc:	f023 0303 	bic.w	r3, r3, #3
 80098c0:	3304      	adds	r3, #4
 80098c2:	f104 0015 	add.w	r0, r4, #21
 80098c6:	4584      	cmp	ip, r0
 80098c8:	bf38      	it	cc
 80098ca:	2304      	movcc	r3, #4
 80098cc:	50ca      	str	r2, [r1, r3]
 80098ce:	b10a      	cbz	r2, 80098d4 <__lshift+0xa4>
 80098d0:	f108 0602 	add.w	r6, r8, #2
 80098d4:	3e01      	subs	r6, #1
 80098d6:	4638      	mov	r0, r7
 80098d8:	612e      	str	r6, [r5, #16]
 80098da:	4621      	mov	r1, r4
 80098dc:	f7ff fdd6 	bl	800948c <_Bfree>
 80098e0:	4628      	mov	r0, r5
 80098e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80098ea:	3301      	adds	r3, #1
 80098ec:	e7c5      	b.n	800987a <__lshift+0x4a>
 80098ee:	3904      	subs	r1, #4
 80098f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80098f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80098f8:	459c      	cmp	ip, r3
 80098fa:	d8f9      	bhi.n	80098f0 <__lshift+0xc0>
 80098fc:	e7ea      	b.n	80098d4 <__lshift+0xa4>
 80098fe:	bf00      	nop
 8009900:	0800b11b 	.word	0x0800b11b
 8009904:	0800b12c 	.word	0x0800b12c

08009908 <__mcmp>:
 8009908:	b530      	push	{r4, r5, lr}
 800990a:	6902      	ldr	r2, [r0, #16]
 800990c:	690c      	ldr	r4, [r1, #16]
 800990e:	1b12      	subs	r2, r2, r4
 8009910:	d10e      	bne.n	8009930 <__mcmp+0x28>
 8009912:	f100 0314 	add.w	r3, r0, #20
 8009916:	3114      	adds	r1, #20
 8009918:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800991c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009920:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009924:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009928:	42a5      	cmp	r5, r4
 800992a:	d003      	beq.n	8009934 <__mcmp+0x2c>
 800992c:	d305      	bcc.n	800993a <__mcmp+0x32>
 800992e:	2201      	movs	r2, #1
 8009930:	4610      	mov	r0, r2
 8009932:	bd30      	pop	{r4, r5, pc}
 8009934:	4283      	cmp	r3, r0
 8009936:	d3f3      	bcc.n	8009920 <__mcmp+0x18>
 8009938:	e7fa      	b.n	8009930 <__mcmp+0x28>
 800993a:	f04f 32ff 	mov.w	r2, #4294967295
 800993e:	e7f7      	b.n	8009930 <__mcmp+0x28>

08009940 <__mdiff>:
 8009940:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009944:	460c      	mov	r4, r1
 8009946:	4606      	mov	r6, r0
 8009948:	4611      	mov	r1, r2
 800994a:	4620      	mov	r0, r4
 800994c:	4617      	mov	r7, r2
 800994e:	f7ff ffdb 	bl	8009908 <__mcmp>
 8009952:	1e05      	subs	r5, r0, #0
 8009954:	d110      	bne.n	8009978 <__mdiff+0x38>
 8009956:	4629      	mov	r1, r5
 8009958:	4630      	mov	r0, r6
 800995a:	f7ff fd57 	bl	800940c <_Balloc>
 800995e:	b930      	cbnz	r0, 800996e <__mdiff+0x2e>
 8009960:	4b39      	ldr	r3, [pc, #228]	; (8009a48 <__mdiff+0x108>)
 8009962:	4602      	mov	r2, r0
 8009964:	f240 2132 	movw	r1, #562	; 0x232
 8009968:	4838      	ldr	r0, [pc, #224]	; (8009a4c <__mdiff+0x10c>)
 800996a:	f000 faf3 	bl	8009f54 <__assert_func>
 800996e:	2301      	movs	r3, #1
 8009970:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009974:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009978:	bfa4      	itt	ge
 800997a:	463b      	movge	r3, r7
 800997c:	4627      	movge	r7, r4
 800997e:	4630      	mov	r0, r6
 8009980:	6879      	ldr	r1, [r7, #4]
 8009982:	bfa6      	itte	ge
 8009984:	461c      	movge	r4, r3
 8009986:	2500      	movge	r5, #0
 8009988:	2501      	movlt	r5, #1
 800998a:	f7ff fd3f 	bl	800940c <_Balloc>
 800998e:	b920      	cbnz	r0, 800999a <__mdiff+0x5a>
 8009990:	4b2d      	ldr	r3, [pc, #180]	; (8009a48 <__mdiff+0x108>)
 8009992:	4602      	mov	r2, r0
 8009994:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009998:	e7e6      	b.n	8009968 <__mdiff+0x28>
 800999a:	693e      	ldr	r6, [r7, #16]
 800999c:	60c5      	str	r5, [r0, #12]
 800999e:	6925      	ldr	r5, [r4, #16]
 80099a0:	f107 0114 	add.w	r1, r7, #20
 80099a4:	f104 0914 	add.w	r9, r4, #20
 80099a8:	f100 0e14 	add.w	lr, r0, #20
 80099ac:	f107 0210 	add.w	r2, r7, #16
 80099b0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80099b4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80099b8:	46f2      	mov	sl, lr
 80099ba:	2700      	movs	r7, #0
 80099bc:	f859 3b04 	ldr.w	r3, [r9], #4
 80099c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80099c4:	fa1f f883 	uxth.w	r8, r3
 80099c8:	fa17 f78b 	uxtah	r7, r7, fp
 80099cc:	0c1b      	lsrs	r3, r3, #16
 80099ce:	eba7 0808 	sub.w	r8, r7, r8
 80099d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80099d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80099da:	fa1f f888 	uxth.w	r8, r8
 80099de:	141f      	asrs	r7, r3, #16
 80099e0:	454d      	cmp	r5, r9
 80099e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80099e6:	f84a 3b04 	str.w	r3, [sl], #4
 80099ea:	d8e7      	bhi.n	80099bc <__mdiff+0x7c>
 80099ec:	1b2b      	subs	r3, r5, r4
 80099ee:	3b15      	subs	r3, #21
 80099f0:	f023 0303 	bic.w	r3, r3, #3
 80099f4:	3304      	adds	r3, #4
 80099f6:	3415      	adds	r4, #21
 80099f8:	42a5      	cmp	r5, r4
 80099fa:	bf38      	it	cc
 80099fc:	2304      	movcc	r3, #4
 80099fe:	4419      	add	r1, r3
 8009a00:	4473      	add	r3, lr
 8009a02:	469e      	mov	lr, r3
 8009a04:	460d      	mov	r5, r1
 8009a06:	4565      	cmp	r5, ip
 8009a08:	d30e      	bcc.n	8009a28 <__mdiff+0xe8>
 8009a0a:	f10c 0203 	add.w	r2, ip, #3
 8009a0e:	1a52      	subs	r2, r2, r1
 8009a10:	f022 0203 	bic.w	r2, r2, #3
 8009a14:	3903      	subs	r1, #3
 8009a16:	458c      	cmp	ip, r1
 8009a18:	bf38      	it	cc
 8009a1a:	2200      	movcc	r2, #0
 8009a1c:	441a      	add	r2, r3
 8009a1e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009a22:	b17b      	cbz	r3, 8009a44 <__mdiff+0x104>
 8009a24:	6106      	str	r6, [r0, #16]
 8009a26:	e7a5      	b.n	8009974 <__mdiff+0x34>
 8009a28:	f855 8b04 	ldr.w	r8, [r5], #4
 8009a2c:	fa17 f488 	uxtah	r4, r7, r8
 8009a30:	1422      	asrs	r2, r4, #16
 8009a32:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009a36:	b2a4      	uxth	r4, r4
 8009a38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009a3c:	f84e 4b04 	str.w	r4, [lr], #4
 8009a40:	1417      	asrs	r7, r2, #16
 8009a42:	e7e0      	b.n	8009a06 <__mdiff+0xc6>
 8009a44:	3e01      	subs	r6, #1
 8009a46:	e7ea      	b.n	8009a1e <__mdiff+0xde>
 8009a48:	0800b11b 	.word	0x0800b11b
 8009a4c:	0800b12c 	.word	0x0800b12c

08009a50 <__d2b>:
 8009a50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a54:	4689      	mov	r9, r1
 8009a56:	2101      	movs	r1, #1
 8009a58:	ec57 6b10 	vmov	r6, r7, d0
 8009a5c:	4690      	mov	r8, r2
 8009a5e:	f7ff fcd5 	bl	800940c <_Balloc>
 8009a62:	4604      	mov	r4, r0
 8009a64:	b930      	cbnz	r0, 8009a74 <__d2b+0x24>
 8009a66:	4602      	mov	r2, r0
 8009a68:	4b25      	ldr	r3, [pc, #148]	; (8009b00 <__d2b+0xb0>)
 8009a6a:	4826      	ldr	r0, [pc, #152]	; (8009b04 <__d2b+0xb4>)
 8009a6c:	f240 310a 	movw	r1, #778	; 0x30a
 8009a70:	f000 fa70 	bl	8009f54 <__assert_func>
 8009a74:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009a78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009a7c:	bb35      	cbnz	r5, 8009acc <__d2b+0x7c>
 8009a7e:	2e00      	cmp	r6, #0
 8009a80:	9301      	str	r3, [sp, #4]
 8009a82:	d028      	beq.n	8009ad6 <__d2b+0x86>
 8009a84:	4668      	mov	r0, sp
 8009a86:	9600      	str	r6, [sp, #0]
 8009a88:	f7ff fd8c 	bl	80095a4 <__lo0bits>
 8009a8c:	9900      	ldr	r1, [sp, #0]
 8009a8e:	b300      	cbz	r0, 8009ad2 <__d2b+0x82>
 8009a90:	9a01      	ldr	r2, [sp, #4]
 8009a92:	f1c0 0320 	rsb	r3, r0, #32
 8009a96:	fa02 f303 	lsl.w	r3, r2, r3
 8009a9a:	430b      	orrs	r3, r1
 8009a9c:	40c2      	lsrs	r2, r0
 8009a9e:	6163      	str	r3, [r4, #20]
 8009aa0:	9201      	str	r2, [sp, #4]
 8009aa2:	9b01      	ldr	r3, [sp, #4]
 8009aa4:	61a3      	str	r3, [r4, #24]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	bf14      	ite	ne
 8009aaa:	2202      	movne	r2, #2
 8009aac:	2201      	moveq	r2, #1
 8009aae:	6122      	str	r2, [r4, #16]
 8009ab0:	b1d5      	cbz	r5, 8009ae8 <__d2b+0x98>
 8009ab2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009ab6:	4405      	add	r5, r0
 8009ab8:	f8c9 5000 	str.w	r5, [r9]
 8009abc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009ac0:	f8c8 0000 	str.w	r0, [r8]
 8009ac4:	4620      	mov	r0, r4
 8009ac6:	b003      	add	sp, #12
 8009ac8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009acc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ad0:	e7d5      	b.n	8009a7e <__d2b+0x2e>
 8009ad2:	6161      	str	r1, [r4, #20]
 8009ad4:	e7e5      	b.n	8009aa2 <__d2b+0x52>
 8009ad6:	a801      	add	r0, sp, #4
 8009ad8:	f7ff fd64 	bl	80095a4 <__lo0bits>
 8009adc:	9b01      	ldr	r3, [sp, #4]
 8009ade:	6163      	str	r3, [r4, #20]
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	6122      	str	r2, [r4, #16]
 8009ae4:	3020      	adds	r0, #32
 8009ae6:	e7e3      	b.n	8009ab0 <__d2b+0x60>
 8009ae8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009aec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009af0:	f8c9 0000 	str.w	r0, [r9]
 8009af4:	6918      	ldr	r0, [r3, #16]
 8009af6:	f7ff fd35 	bl	8009564 <__hi0bits>
 8009afa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009afe:	e7df      	b.n	8009ac0 <__d2b+0x70>
 8009b00:	0800b11b 	.word	0x0800b11b
 8009b04:	0800b12c 	.word	0x0800b12c

08009b08 <_calloc_r>:
 8009b08:	b513      	push	{r0, r1, r4, lr}
 8009b0a:	434a      	muls	r2, r1
 8009b0c:	4611      	mov	r1, r2
 8009b0e:	9201      	str	r2, [sp, #4]
 8009b10:	f000 f85a 	bl	8009bc8 <_malloc_r>
 8009b14:	4604      	mov	r4, r0
 8009b16:	b118      	cbz	r0, 8009b20 <_calloc_r+0x18>
 8009b18:	9a01      	ldr	r2, [sp, #4]
 8009b1a:	2100      	movs	r1, #0
 8009b1c:	f7fe f952 	bl	8007dc4 <memset>
 8009b20:	4620      	mov	r0, r4
 8009b22:	b002      	add	sp, #8
 8009b24:	bd10      	pop	{r4, pc}
	...

08009b28 <_free_r>:
 8009b28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b2a:	2900      	cmp	r1, #0
 8009b2c:	d048      	beq.n	8009bc0 <_free_r+0x98>
 8009b2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b32:	9001      	str	r0, [sp, #4]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	f1a1 0404 	sub.w	r4, r1, #4
 8009b3a:	bfb8      	it	lt
 8009b3c:	18e4      	addlt	r4, r4, r3
 8009b3e:	f000 fa65 	bl	800a00c <__malloc_lock>
 8009b42:	4a20      	ldr	r2, [pc, #128]	; (8009bc4 <_free_r+0x9c>)
 8009b44:	9801      	ldr	r0, [sp, #4]
 8009b46:	6813      	ldr	r3, [r2, #0]
 8009b48:	4615      	mov	r5, r2
 8009b4a:	b933      	cbnz	r3, 8009b5a <_free_r+0x32>
 8009b4c:	6063      	str	r3, [r4, #4]
 8009b4e:	6014      	str	r4, [r2, #0]
 8009b50:	b003      	add	sp, #12
 8009b52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b56:	f000 ba5f 	b.w	800a018 <__malloc_unlock>
 8009b5a:	42a3      	cmp	r3, r4
 8009b5c:	d90b      	bls.n	8009b76 <_free_r+0x4e>
 8009b5e:	6821      	ldr	r1, [r4, #0]
 8009b60:	1862      	adds	r2, r4, r1
 8009b62:	4293      	cmp	r3, r2
 8009b64:	bf04      	itt	eq
 8009b66:	681a      	ldreq	r2, [r3, #0]
 8009b68:	685b      	ldreq	r3, [r3, #4]
 8009b6a:	6063      	str	r3, [r4, #4]
 8009b6c:	bf04      	itt	eq
 8009b6e:	1852      	addeq	r2, r2, r1
 8009b70:	6022      	streq	r2, [r4, #0]
 8009b72:	602c      	str	r4, [r5, #0]
 8009b74:	e7ec      	b.n	8009b50 <_free_r+0x28>
 8009b76:	461a      	mov	r2, r3
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	b10b      	cbz	r3, 8009b80 <_free_r+0x58>
 8009b7c:	42a3      	cmp	r3, r4
 8009b7e:	d9fa      	bls.n	8009b76 <_free_r+0x4e>
 8009b80:	6811      	ldr	r1, [r2, #0]
 8009b82:	1855      	adds	r5, r2, r1
 8009b84:	42a5      	cmp	r5, r4
 8009b86:	d10b      	bne.n	8009ba0 <_free_r+0x78>
 8009b88:	6824      	ldr	r4, [r4, #0]
 8009b8a:	4421      	add	r1, r4
 8009b8c:	1854      	adds	r4, r2, r1
 8009b8e:	42a3      	cmp	r3, r4
 8009b90:	6011      	str	r1, [r2, #0]
 8009b92:	d1dd      	bne.n	8009b50 <_free_r+0x28>
 8009b94:	681c      	ldr	r4, [r3, #0]
 8009b96:	685b      	ldr	r3, [r3, #4]
 8009b98:	6053      	str	r3, [r2, #4]
 8009b9a:	4421      	add	r1, r4
 8009b9c:	6011      	str	r1, [r2, #0]
 8009b9e:	e7d7      	b.n	8009b50 <_free_r+0x28>
 8009ba0:	d902      	bls.n	8009ba8 <_free_r+0x80>
 8009ba2:	230c      	movs	r3, #12
 8009ba4:	6003      	str	r3, [r0, #0]
 8009ba6:	e7d3      	b.n	8009b50 <_free_r+0x28>
 8009ba8:	6825      	ldr	r5, [r4, #0]
 8009baa:	1961      	adds	r1, r4, r5
 8009bac:	428b      	cmp	r3, r1
 8009bae:	bf04      	itt	eq
 8009bb0:	6819      	ldreq	r1, [r3, #0]
 8009bb2:	685b      	ldreq	r3, [r3, #4]
 8009bb4:	6063      	str	r3, [r4, #4]
 8009bb6:	bf04      	itt	eq
 8009bb8:	1949      	addeq	r1, r1, r5
 8009bba:	6021      	streq	r1, [r4, #0]
 8009bbc:	6054      	str	r4, [r2, #4]
 8009bbe:	e7c7      	b.n	8009b50 <_free_r+0x28>
 8009bc0:	b003      	add	sp, #12
 8009bc2:	bd30      	pop	{r4, r5, pc}
 8009bc4:	20000260 	.word	0x20000260

08009bc8 <_malloc_r>:
 8009bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bca:	1ccd      	adds	r5, r1, #3
 8009bcc:	f025 0503 	bic.w	r5, r5, #3
 8009bd0:	3508      	adds	r5, #8
 8009bd2:	2d0c      	cmp	r5, #12
 8009bd4:	bf38      	it	cc
 8009bd6:	250c      	movcc	r5, #12
 8009bd8:	2d00      	cmp	r5, #0
 8009bda:	4606      	mov	r6, r0
 8009bdc:	db01      	blt.n	8009be2 <_malloc_r+0x1a>
 8009bde:	42a9      	cmp	r1, r5
 8009be0:	d903      	bls.n	8009bea <_malloc_r+0x22>
 8009be2:	230c      	movs	r3, #12
 8009be4:	6033      	str	r3, [r6, #0]
 8009be6:	2000      	movs	r0, #0
 8009be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bea:	f000 fa0f 	bl	800a00c <__malloc_lock>
 8009bee:	4921      	ldr	r1, [pc, #132]	; (8009c74 <_malloc_r+0xac>)
 8009bf0:	680a      	ldr	r2, [r1, #0]
 8009bf2:	4614      	mov	r4, r2
 8009bf4:	b99c      	cbnz	r4, 8009c1e <_malloc_r+0x56>
 8009bf6:	4f20      	ldr	r7, [pc, #128]	; (8009c78 <_malloc_r+0xb0>)
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	b923      	cbnz	r3, 8009c06 <_malloc_r+0x3e>
 8009bfc:	4621      	mov	r1, r4
 8009bfe:	4630      	mov	r0, r6
 8009c00:	f000 f998 	bl	8009f34 <_sbrk_r>
 8009c04:	6038      	str	r0, [r7, #0]
 8009c06:	4629      	mov	r1, r5
 8009c08:	4630      	mov	r0, r6
 8009c0a:	f000 f993 	bl	8009f34 <_sbrk_r>
 8009c0e:	1c43      	adds	r3, r0, #1
 8009c10:	d123      	bne.n	8009c5a <_malloc_r+0x92>
 8009c12:	230c      	movs	r3, #12
 8009c14:	6033      	str	r3, [r6, #0]
 8009c16:	4630      	mov	r0, r6
 8009c18:	f000 f9fe 	bl	800a018 <__malloc_unlock>
 8009c1c:	e7e3      	b.n	8009be6 <_malloc_r+0x1e>
 8009c1e:	6823      	ldr	r3, [r4, #0]
 8009c20:	1b5b      	subs	r3, r3, r5
 8009c22:	d417      	bmi.n	8009c54 <_malloc_r+0x8c>
 8009c24:	2b0b      	cmp	r3, #11
 8009c26:	d903      	bls.n	8009c30 <_malloc_r+0x68>
 8009c28:	6023      	str	r3, [r4, #0]
 8009c2a:	441c      	add	r4, r3
 8009c2c:	6025      	str	r5, [r4, #0]
 8009c2e:	e004      	b.n	8009c3a <_malloc_r+0x72>
 8009c30:	6863      	ldr	r3, [r4, #4]
 8009c32:	42a2      	cmp	r2, r4
 8009c34:	bf0c      	ite	eq
 8009c36:	600b      	streq	r3, [r1, #0]
 8009c38:	6053      	strne	r3, [r2, #4]
 8009c3a:	4630      	mov	r0, r6
 8009c3c:	f000 f9ec 	bl	800a018 <__malloc_unlock>
 8009c40:	f104 000b 	add.w	r0, r4, #11
 8009c44:	1d23      	adds	r3, r4, #4
 8009c46:	f020 0007 	bic.w	r0, r0, #7
 8009c4a:	1ac2      	subs	r2, r0, r3
 8009c4c:	d0cc      	beq.n	8009be8 <_malloc_r+0x20>
 8009c4e:	1a1b      	subs	r3, r3, r0
 8009c50:	50a3      	str	r3, [r4, r2]
 8009c52:	e7c9      	b.n	8009be8 <_malloc_r+0x20>
 8009c54:	4622      	mov	r2, r4
 8009c56:	6864      	ldr	r4, [r4, #4]
 8009c58:	e7cc      	b.n	8009bf4 <_malloc_r+0x2c>
 8009c5a:	1cc4      	adds	r4, r0, #3
 8009c5c:	f024 0403 	bic.w	r4, r4, #3
 8009c60:	42a0      	cmp	r0, r4
 8009c62:	d0e3      	beq.n	8009c2c <_malloc_r+0x64>
 8009c64:	1a21      	subs	r1, r4, r0
 8009c66:	4630      	mov	r0, r6
 8009c68:	f000 f964 	bl	8009f34 <_sbrk_r>
 8009c6c:	3001      	adds	r0, #1
 8009c6e:	d1dd      	bne.n	8009c2c <_malloc_r+0x64>
 8009c70:	e7cf      	b.n	8009c12 <_malloc_r+0x4a>
 8009c72:	bf00      	nop
 8009c74:	20000260 	.word	0x20000260
 8009c78:	20000264 	.word	0x20000264

08009c7c <__ssputs_r>:
 8009c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c80:	688e      	ldr	r6, [r1, #8]
 8009c82:	429e      	cmp	r6, r3
 8009c84:	4682      	mov	sl, r0
 8009c86:	460c      	mov	r4, r1
 8009c88:	4690      	mov	r8, r2
 8009c8a:	461f      	mov	r7, r3
 8009c8c:	d838      	bhi.n	8009d00 <__ssputs_r+0x84>
 8009c8e:	898a      	ldrh	r2, [r1, #12]
 8009c90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c94:	d032      	beq.n	8009cfc <__ssputs_r+0x80>
 8009c96:	6825      	ldr	r5, [r4, #0]
 8009c98:	6909      	ldr	r1, [r1, #16]
 8009c9a:	eba5 0901 	sub.w	r9, r5, r1
 8009c9e:	6965      	ldr	r5, [r4, #20]
 8009ca0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ca4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ca8:	3301      	adds	r3, #1
 8009caa:	444b      	add	r3, r9
 8009cac:	106d      	asrs	r5, r5, #1
 8009cae:	429d      	cmp	r5, r3
 8009cb0:	bf38      	it	cc
 8009cb2:	461d      	movcc	r5, r3
 8009cb4:	0553      	lsls	r3, r2, #21
 8009cb6:	d531      	bpl.n	8009d1c <__ssputs_r+0xa0>
 8009cb8:	4629      	mov	r1, r5
 8009cba:	f7ff ff85 	bl	8009bc8 <_malloc_r>
 8009cbe:	4606      	mov	r6, r0
 8009cc0:	b950      	cbnz	r0, 8009cd8 <__ssputs_r+0x5c>
 8009cc2:	230c      	movs	r3, #12
 8009cc4:	f8ca 3000 	str.w	r3, [sl]
 8009cc8:	89a3      	ldrh	r3, [r4, #12]
 8009cca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cce:	81a3      	strh	r3, [r4, #12]
 8009cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8009cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cd8:	6921      	ldr	r1, [r4, #16]
 8009cda:	464a      	mov	r2, r9
 8009cdc:	f7ff fb88 	bl	80093f0 <memcpy>
 8009ce0:	89a3      	ldrh	r3, [r4, #12]
 8009ce2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cea:	81a3      	strh	r3, [r4, #12]
 8009cec:	6126      	str	r6, [r4, #16]
 8009cee:	6165      	str	r5, [r4, #20]
 8009cf0:	444e      	add	r6, r9
 8009cf2:	eba5 0509 	sub.w	r5, r5, r9
 8009cf6:	6026      	str	r6, [r4, #0]
 8009cf8:	60a5      	str	r5, [r4, #8]
 8009cfa:	463e      	mov	r6, r7
 8009cfc:	42be      	cmp	r6, r7
 8009cfe:	d900      	bls.n	8009d02 <__ssputs_r+0x86>
 8009d00:	463e      	mov	r6, r7
 8009d02:	4632      	mov	r2, r6
 8009d04:	6820      	ldr	r0, [r4, #0]
 8009d06:	4641      	mov	r1, r8
 8009d08:	f000 f966 	bl	8009fd8 <memmove>
 8009d0c:	68a3      	ldr	r3, [r4, #8]
 8009d0e:	6822      	ldr	r2, [r4, #0]
 8009d10:	1b9b      	subs	r3, r3, r6
 8009d12:	4432      	add	r2, r6
 8009d14:	60a3      	str	r3, [r4, #8]
 8009d16:	6022      	str	r2, [r4, #0]
 8009d18:	2000      	movs	r0, #0
 8009d1a:	e7db      	b.n	8009cd4 <__ssputs_r+0x58>
 8009d1c:	462a      	mov	r2, r5
 8009d1e:	f000 f981 	bl	800a024 <_realloc_r>
 8009d22:	4606      	mov	r6, r0
 8009d24:	2800      	cmp	r0, #0
 8009d26:	d1e1      	bne.n	8009cec <__ssputs_r+0x70>
 8009d28:	6921      	ldr	r1, [r4, #16]
 8009d2a:	4650      	mov	r0, sl
 8009d2c:	f7ff fefc 	bl	8009b28 <_free_r>
 8009d30:	e7c7      	b.n	8009cc2 <__ssputs_r+0x46>
	...

08009d34 <_svfiprintf_r>:
 8009d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d38:	4698      	mov	r8, r3
 8009d3a:	898b      	ldrh	r3, [r1, #12]
 8009d3c:	061b      	lsls	r3, r3, #24
 8009d3e:	b09d      	sub	sp, #116	; 0x74
 8009d40:	4607      	mov	r7, r0
 8009d42:	460d      	mov	r5, r1
 8009d44:	4614      	mov	r4, r2
 8009d46:	d50e      	bpl.n	8009d66 <_svfiprintf_r+0x32>
 8009d48:	690b      	ldr	r3, [r1, #16]
 8009d4a:	b963      	cbnz	r3, 8009d66 <_svfiprintf_r+0x32>
 8009d4c:	2140      	movs	r1, #64	; 0x40
 8009d4e:	f7ff ff3b 	bl	8009bc8 <_malloc_r>
 8009d52:	6028      	str	r0, [r5, #0]
 8009d54:	6128      	str	r0, [r5, #16]
 8009d56:	b920      	cbnz	r0, 8009d62 <_svfiprintf_r+0x2e>
 8009d58:	230c      	movs	r3, #12
 8009d5a:	603b      	str	r3, [r7, #0]
 8009d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d60:	e0d1      	b.n	8009f06 <_svfiprintf_r+0x1d2>
 8009d62:	2340      	movs	r3, #64	; 0x40
 8009d64:	616b      	str	r3, [r5, #20]
 8009d66:	2300      	movs	r3, #0
 8009d68:	9309      	str	r3, [sp, #36]	; 0x24
 8009d6a:	2320      	movs	r3, #32
 8009d6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d70:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d74:	2330      	movs	r3, #48	; 0x30
 8009d76:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009f20 <_svfiprintf_r+0x1ec>
 8009d7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d7e:	f04f 0901 	mov.w	r9, #1
 8009d82:	4623      	mov	r3, r4
 8009d84:	469a      	mov	sl, r3
 8009d86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d8a:	b10a      	cbz	r2, 8009d90 <_svfiprintf_r+0x5c>
 8009d8c:	2a25      	cmp	r2, #37	; 0x25
 8009d8e:	d1f9      	bne.n	8009d84 <_svfiprintf_r+0x50>
 8009d90:	ebba 0b04 	subs.w	fp, sl, r4
 8009d94:	d00b      	beq.n	8009dae <_svfiprintf_r+0x7a>
 8009d96:	465b      	mov	r3, fp
 8009d98:	4622      	mov	r2, r4
 8009d9a:	4629      	mov	r1, r5
 8009d9c:	4638      	mov	r0, r7
 8009d9e:	f7ff ff6d 	bl	8009c7c <__ssputs_r>
 8009da2:	3001      	adds	r0, #1
 8009da4:	f000 80aa 	beq.w	8009efc <_svfiprintf_r+0x1c8>
 8009da8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009daa:	445a      	add	r2, fp
 8009dac:	9209      	str	r2, [sp, #36]	; 0x24
 8009dae:	f89a 3000 	ldrb.w	r3, [sl]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	f000 80a2 	beq.w	8009efc <_svfiprintf_r+0x1c8>
 8009db8:	2300      	movs	r3, #0
 8009dba:	f04f 32ff 	mov.w	r2, #4294967295
 8009dbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009dc2:	f10a 0a01 	add.w	sl, sl, #1
 8009dc6:	9304      	str	r3, [sp, #16]
 8009dc8:	9307      	str	r3, [sp, #28]
 8009dca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009dce:	931a      	str	r3, [sp, #104]	; 0x68
 8009dd0:	4654      	mov	r4, sl
 8009dd2:	2205      	movs	r2, #5
 8009dd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dd8:	4851      	ldr	r0, [pc, #324]	; (8009f20 <_svfiprintf_r+0x1ec>)
 8009dda:	f7f6 fa09 	bl	80001f0 <memchr>
 8009dde:	9a04      	ldr	r2, [sp, #16]
 8009de0:	b9d8      	cbnz	r0, 8009e1a <_svfiprintf_r+0xe6>
 8009de2:	06d0      	lsls	r0, r2, #27
 8009de4:	bf44      	itt	mi
 8009de6:	2320      	movmi	r3, #32
 8009de8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009dec:	0711      	lsls	r1, r2, #28
 8009dee:	bf44      	itt	mi
 8009df0:	232b      	movmi	r3, #43	; 0x2b
 8009df2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009df6:	f89a 3000 	ldrb.w	r3, [sl]
 8009dfa:	2b2a      	cmp	r3, #42	; 0x2a
 8009dfc:	d015      	beq.n	8009e2a <_svfiprintf_r+0xf6>
 8009dfe:	9a07      	ldr	r2, [sp, #28]
 8009e00:	4654      	mov	r4, sl
 8009e02:	2000      	movs	r0, #0
 8009e04:	f04f 0c0a 	mov.w	ip, #10
 8009e08:	4621      	mov	r1, r4
 8009e0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e0e:	3b30      	subs	r3, #48	; 0x30
 8009e10:	2b09      	cmp	r3, #9
 8009e12:	d94e      	bls.n	8009eb2 <_svfiprintf_r+0x17e>
 8009e14:	b1b0      	cbz	r0, 8009e44 <_svfiprintf_r+0x110>
 8009e16:	9207      	str	r2, [sp, #28]
 8009e18:	e014      	b.n	8009e44 <_svfiprintf_r+0x110>
 8009e1a:	eba0 0308 	sub.w	r3, r0, r8
 8009e1e:	fa09 f303 	lsl.w	r3, r9, r3
 8009e22:	4313      	orrs	r3, r2
 8009e24:	9304      	str	r3, [sp, #16]
 8009e26:	46a2      	mov	sl, r4
 8009e28:	e7d2      	b.n	8009dd0 <_svfiprintf_r+0x9c>
 8009e2a:	9b03      	ldr	r3, [sp, #12]
 8009e2c:	1d19      	adds	r1, r3, #4
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	9103      	str	r1, [sp, #12]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	bfbb      	ittet	lt
 8009e36:	425b      	neglt	r3, r3
 8009e38:	f042 0202 	orrlt.w	r2, r2, #2
 8009e3c:	9307      	strge	r3, [sp, #28]
 8009e3e:	9307      	strlt	r3, [sp, #28]
 8009e40:	bfb8      	it	lt
 8009e42:	9204      	strlt	r2, [sp, #16]
 8009e44:	7823      	ldrb	r3, [r4, #0]
 8009e46:	2b2e      	cmp	r3, #46	; 0x2e
 8009e48:	d10c      	bne.n	8009e64 <_svfiprintf_r+0x130>
 8009e4a:	7863      	ldrb	r3, [r4, #1]
 8009e4c:	2b2a      	cmp	r3, #42	; 0x2a
 8009e4e:	d135      	bne.n	8009ebc <_svfiprintf_r+0x188>
 8009e50:	9b03      	ldr	r3, [sp, #12]
 8009e52:	1d1a      	adds	r2, r3, #4
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	9203      	str	r2, [sp, #12]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	bfb8      	it	lt
 8009e5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e60:	3402      	adds	r4, #2
 8009e62:	9305      	str	r3, [sp, #20]
 8009e64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009f30 <_svfiprintf_r+0x1fc>
 8009e68:	7821      	ldrb	r1, [r4, #0]
 8009e6a:	2203      	movs	r2, #3
 8009e6c:	4650      	mov	r0, sl
 8009e6e:	f7f6 f9bf 	bl	80001f0 <memchr>
 8009e72:	b140      	cbz	r0, 8009e86 <_svfiprintf_r+0x152>
 8009e74:	2340      	movs	r3, #64	; 0x40
 8009e76:	eba0 000a 	sub.w	r0, r0, sl
 8009e7a:	fa03 f000 	lsl.w	r0, r3, r0
 8009e7e:	9b04      	ldr	r3, [sp, #16]
 8009e80:	4303      	orrs	r3, r0
 8009e82:	3401      	adds	r4, #1
 8009e84:	9304      	str	r3, [sp, #16]
 8009e86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e8a:	4826      	ldr	r0, [pc, #152]	; (8009f24 <_svfiprintf_r+0x1f0>)
 8009e8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e90:	2206      	movs	r2, #6
 8009e92:	f7f6 f9ad 	bl	80001f0 <memchr>
 8009e96:	2800      	cmp	r0, #0
 8009e98:	d038      	beq.n	8009f0c <_svfiprintf_r+0x1d8>
 8009e9a:	4b23      	ldr	r3, [pc, #140]	; (8009f28 <_svfiprintf_r+0x1f4>)
 8009e9c:	bb1b      	cbnz	r3, 8009ee6 <_svfiprintf_r+0x1b2>
 8009e9e:	9b03      	ldr	r3, [sp, #12]
 8009ea0:	3307      	adds	r3, #7
 8009ea2:	f023 0307 	bic.w	r3, r3, #7
 8009ea6:	3308      	adds	r3, #8
 8009ea8:	9303      	str	r3, [sp, #12]
 8009eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eac:	4433      	add	r3, r6
 8009eae:	9309      	str	r3, [sp, #36]	; 0x24
 8009eb0:	e767      	b.n	8009d82 <_svfiprintf_r+0x4e>
 8009eb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009eb6:	460c      	mov	r4, r1
 8009eb8:	2001      	movs	r0, #1
 8009eba:	e7a5      	b.n	8009e08 <_svfiprintf_r+0xd4>
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	3401      	adds	r4, #1
 8009ec0:	9305      	str	r3, [sp, #20]
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	f04f 0c0a 	mov.w	ip, #10
 8009ec8:	4620      	mov	r0, r4
 8009eca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ece:	3a30      	subs	r2, #48	; 0x30
 8009ed0:	2a09      	cmp	r2, #9
 8009ed2:	d903      	bls.n	8009edc <_svfiprintf_r+0x1a8>
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d0c5      	beq.n	8009e64 <_svfiprintf_r+0x130>
 8009ed8:	9105      	str	r1, [sp, #20]
 8009eda:	e7c3      	b.n	8009e64 <_svfiprintf_r+0x130>
 8009edc:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ee0:	4604      	mov	r4, r0
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	e7f0      	b.n	8009ec8 <_svfiprintf_r+0x194>
 8009ee6:	ab03      	add	r3, sp, #12
 8009ee8:	9300      	str	r3, [sp, #0]
 8009eea:	462a      	mov	r2, r5
 8009eec:	4b0f      	ldr	r3, [pc, #60]	; (8009f2c <_svfiprintf_r+0x1f8>)
 8009eee:	a904      	add	r1, sp, #16
 8009ef0:	4638      	mov	r0, r7
 8009ef2:	f7fe f80f 	bl	8007f14 <_printf_float>
 8009ef6:	1c42      	adds	r2, r0, #1
 8009ef8:	4606      	mov	r6, r0
 8009efa:	d1d6      	bne.n	8009eaa <_svfiprintf_r+0x176>
 8009efc:	89ab      	ldrh	r3, [r5, #12]
 8009efe:	065b      	lsls	r3, r3, #25
 8009f00:	f53f af2c 	bmi.w	8009d5c <_svfiprintf_r+0x28>
 8009f04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f06:	b01d      	add	sp, #116	; 0x74
 8009f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f0c:	ab03      	add	r3, sp, #12
 8009f0e:	9300      	str	r3, [sp, #0]
 8009f10:	462a      	mov	r2, r5
 8009f12:	4b06      	ldr	r3, [pc, #24]	; (8009f2c <_svfiprintf_r+0x1f8>)
 8009f14:	a904      	add	r1, sp, #16
 8009f16:	4638      	mov	r0, r7
 8009f18:	f7fe faa0 	bl	800845c <_printf_i>
 8009f1c:	e7eb      	b.n	8009ef6 <_svfiprintf_r+0x1c2>
 8009f1e:	bf00      	nop
 8009f20:	0800b28c 	.word	0x0800b28c
 8009f24:	0800b296 	.word	0x0800b296
 8009f28:	08007f15 	.word	0x08007f15
 8009f2c:	08009c7d 	.word	0x08009c7d
 8009f30:	0800b292 	.word	0x0800b292

08009f34 <_sbrk_r>:
 8009f34:	b538      	push	{r3, r4, r5, lr}
 8009f36:	4d06      	ldr	r5, [pc, #24]	; (8009f50 <_sbrk_r+0x1c>)
 8009f38:	2300      	movs	r3, #0
 8009f3a:	4604      	mov	r4, r0
 8009f3c:	4608      	mov	r0, r1
 8009f3e:	602b      	str	r3, [r5, #0]
 8009f40:	f7f8 fd40 	bl	80029c4 <_sbrk>
 8009f44:	1c43      	adds	r3, r0, #1
 8009f46:	d102      	bne.n	8009f4e <_sbrk_r+0x1a>
 8009f48:	682b      	ldr	r3, [r5, #0]
 8009f4a:	b103      	cbz	r3, 8009f4e <_sbrk_r+0x1a>
 8009f4c:	6023      	str	r3, [r4, #0]
 8009f4e:	bd38      	pop	{r3, r4, r5, pc}
 8009f50:	200004d0 	.word	0x200004d0

08009f54 <__assert_func>:
 8009f54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f56:	4614      	mov	r4, r2
 8009f58:	461a      	mov	r2, r3
 8009f5a:	4b09      	ldr	r3, [pc, #36]	; (8009f80 <__assert_func+0x2c>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	4605      	mov	r5, r0
 8009f60:	68d8      	ldr	r0, [r3, #12]
 8009f62:	b14c      	cbz	r4, 8009f78 <__assert_func+0x24>
 8009f64:	4b07      	ldr	r3, [pc, #28]	; (8009f84 <__assert_func+0x30>)
 8009f66:	9100      	str	r1, [sp, #0]
 8009f68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f6c:	4906      	ldr	r1, [pc, #24]	; (8009f88 <__assert_func+0x34>)
 8009f6e:	462b      	mov	r3, r5
 8009f70:	f000 f80e 	bl	8009f90 <fiprintf>
 8009f74:	f000 faa4 	bl	800a4c0 <abort>
 8009f78:	4b04      	ldr	r3, [pc, #16]	; (8009f8c <__assert_func+0x38>)
 8009f7a:	461c      	mov	r4, r3
 8009f7c:	e7f3      	b.n	8009f66 <__assert_func+0x12>
 8009f7e:	bf00      	nop
 8009f80:	2000000c 	.word	0x2000000c
 8009f84:	0800b29d 	.word	0x0800b29d
 8009f88:	0800b2aa 	.word	0x0800b2aa
 8009f8c:	0800b2d8 	.word	0x0800b2d8

08009f90 <fiprintf>:
 8009f90:	b40e      	push	{r1, r2, r3}
 8009f92:	b503      	push	{r0, r1, lr}
 8009f94:	4601      	mov	r1, r0
 8009f96:	ab03      	add	r3, sp, #12
 8009f98:	4805      	ldr	r0, [pc, #20]	; (8009fb0 <fiprintf+0x20>)
 8009f9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f9e:	6800      	ldr	r0, [r0, #0]
 8009fa0:	9301      	str	r3, [sp, #4]
 8009fa2:	f000 f88f 	bl	800a0c4 <_vfiprintf_r>
 8009fa6:	b002      	add	sp, #8
 8009fa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fac:	b003      	add	sp, #12
 8009fae:	4770      	bx	lr
 8009fb0:	2000000c 	.word	0x2000000c

08009fb4 <__ascii_mbtowc>:
 8009fb4:	b082      	sub	sp, #8
 8009fb6:	b901      	cbnz	r1, 8009fba <__ascii_mbtowc+0x6>
 8009fb8:	a901      	add	r1, sp, #4
 8009fba:	b142      	cbz	r2, 8009fce <__ascii_mbtowc+0x1a>
 8009fbc:	b14b      	cbz	r3, 8009fd2 <__ascii_mbtowc+0x1e>
 8009fbe:	7813      	ldrb	r3, [r2, #0]
 8009fc0:	600b      	str	r3, [r1, #0]
 8009fc2:	7812      	ldrb	r2, [r2, #0]
 8009fc4:	1e10      	subs	r0, r2, #0
 8009fc6:	bf18      	it	ne
 8009fc8:	2001      	movne	r0, #1
 8009fca:	b002      	add	sp, #8
 8009fcc:	4770      	bx	lr
 8009fce:	4610      	mov	r0, r2
 8009fd0:	e7fb      	b.n	8009fca <__ascii_mbtowc+0x16>
 8009fd2:	f06f 0001 	mvn.w	r0, #1
 8009fd6:	e7f8      	b.n	8009fca <__ascii_mbtowc+0x16>

08009fd8 <memmove>:
 8009fd8:	4288      	cmp	r0, r1
 8009fda:	b510      	push	{r4, lr}
 8009fdc:	eb01 0402 	add.w	r4, r1, r2
 8009fe0:	d902      	bls.n	8009fe8 <memmove+0x10>
 8009fe2:	4284      	cmp	r4, r0
 8009fe4:	4623      	mov	r3, r4
 8009fe6:	d807      	bhi.n	8009ff8 <memmove+0x20>
 8009fe8:	1e43      	subs	r3, r0, #1
 8009fea:	42a1      	cmp	r1, r4
 8009fec:	d008      	beq.n	800a000 <memmove+0x28>
 8009fee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ff2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ff6:	e7f8      	b.n	8009fea <memmove+0x12>
 8009ff8:	4402      	add	r2, r0
 8009ffa:	4601      	mov	r1, r0
 8009ffc:	428a      	cmp	r2, r1
 8009ffe:	d100      	bne.n	800a002 <memmove+0x2a>
 800a000:	bd10      	pop	{r4, pc}
 800a002:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a006:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a00a:	e7f7      	b.n	8009ffc <memmove+0x24>

0800a00c <__malloc_lock>:
 800a00c:	4801      	ldr	r0, [pc, #4]	; (800a014 <__malloc_lock+0x8>)
 800a00e:	f000 bc17 	b.w	800a840 <__retarget_lock_acquire_recursive>
 800a012:	bf00      	nop
 800a014:	200004d8 	.word	0x200004d8

0800a018 <__malloc_unlock>:
 800a018:	4801      	ldr	r0, [pc, #4]	; (800a020 <__malloc_unlock+0x8>)
 800a01a:	f000 bc12 	b.w	800a842 <__retarget_lock_release_recursive>
 800a01e:	bf00      	nop
 800a020:	200004d8 	.word	0x200004d8

0800a024 <_realloc_r>:
 800a024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a026:	4607      	mov	r7, r0
 800a028:	4614      	mov	r4, r2
 800a02a:	460e      	mov	r6, r1
 800a02c:	b921      	cbnz	r1, 800a038 <_realloc_r+0x14>
 800a02e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a032:	4611      	mov	r1, r2
 800a034:	f7ff bdc8 	b.w	8009bc8 <_malloc_r>
 800a038:	b922      	cbnz	r2, 800a044 <_realloc_r+0x20>
 800a03a:	f7ff fd75 	bl	8009b28 <_free_r>
 800a03e:	4625      	mov	r5, r4
 800a040:	4628      	mov	r0, r5
 800a042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a044:	f000 fc62 	bl	800a90c <_malloc_usable_size_r>
 800a048:	42a0      	cmp	r0, r4
 800a04a:	d20f      	bcs.n	800a06c <_realloc_r+0x48>
 800a04c:	4621      	mov	r1, r4
 800a04e:	4638      	mov	r0, r7
 800a050:	f7ff fdba 	bl	8009bc8 <_malloc_r>
 800a054:	4605      	mov	r5, r0
 800a056:	2800      	cmp	r0, #0
 800a058:	d0f2      	beq.n	800a040 <_realloc_r+0x1c>
 800a05a:	4631      	mov	r1, r6
 800a05c:	4622      	mov	r2, r4
 800a05e:	f7ff f9c7 	bl	80093f0 <memcpy>
 800a062:	4631      	mov	r1, r6
 800a064:	4638      	mov	r0, r7
 800a066:	f7ff fd5f 	bl	8009b28 <_free_r>
 800a06a:	e7e9      	b.n	800a040 <_realloc_r+0x1c>
 800a06c:	4635      	mov	r5, r6
 800a06e:	e7e7      	b.n	800a040 <_realloc_r+0x1c>

0800a070 <__sfputc_r>:
 800a070:	6893      	ldr	r3, [r2, #8]
 800a072:	3b01      	subs	r3, #1
 800a074:	2b00      	cmp	r3, #0
 800a076:	b410      	push	{r4}
 800a078:	6093      	str	r3, [r2, #8]
 800a07a:	da08      	bge.n	800a08e <__sfputc_r+0x1e>
 800a07c:	6994      	ldr	r4, [r2, #24]
 800a07e:	42a3      	cmp	r3, r4
 800a080:	db01      	blt.n	800a086 <__sfputc_r+0x16>
 800a082:	290a      	cmp	r1, #10
 800a084:	d103      	bne.n	800a08e <__sfputc_r+0x1e>
 800a086:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a08a:	f000 b94b 	b.w	800a324 <__swbuf_r>
 800a08e:	6813      	ldr	r3, [r2, #0]
 800a090:	1c58      	adds	r0, r3, #1
 800a092:	6010      	str	r0, [r2, #0]
 800a094:	7019      	strb	r1, [r3, #0]
 800a096:	4608      	mov	r0, r1
 800a098:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a09c:	4770      	bx	lr

0800a09e <__sfputs_r>:
 800a09e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0a0:	4606      	mov	r6, r0
 800a0a2:	460f      	mov	r7, r1
 800a0a4:	4614      	mov	r4, r2
 800a0a6:	18d5      	adds	r5, r2, r3
 800a0a8:	42ac      	cmp	r4, r5
 800a0aa:	d101      	bne.n	800a0b0 <__sfputs_r+0x12>
 800a0ac:	2000      	movs	r0, #0
 800a0ae:	e007      	b.n	800a0c0 <__sfputs_r+0x22>
 800a0b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0b4:	463a      	mov	r2, r7
 800a0b6:	4630      	mov	r0, r6
 800a0b8:	f7ff ffda 	bl	800a070 <__sfputc_r>
 800a0bc:	1c43      	adds	r3, r0, #1
 800a0be:	d1f3      	bne.n	800a0a8 <__sfputs_r+0xa>
 800a0c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a0c4 <_vfiprintf_r>:
 800a0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c8:	460d      	mov	r5, r1
 800a0ca:	b09d      	sub	sp, #116	; 0x74
 800a0cc:	4614      	mov	r4, r2
 800a0ce:	4698      	mov	r8, r3
 800a0d0:	4606      	mov	r6, r0
 800a0d2:	b118      	cbz	r0, 800a0dc <_vfiprintf_r+0x18>
 800a0d4:	6983      	ldr	r3, [r0, #24]
 800a0d6:	b90b      	cbnz	r3, 800a0dc <_vfiprintf_r+0x18>
 800a0d8:	f000 fb14 	bl	800a704 <__sinit>
 800a0dc:	4b89      	ldr	r3, [pc, #548]	; (800a304 <_vfiprintf_r+0x240>)
 800a0de:	429d      	cmp	r5, r3
 800a0e0:	d11b      	bne.n	800a11a <_vfiprintf_r+0x56>
 800a0e2:	6875      	ldr	r5, [r6, #4]
 800a0e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0e6:	07d9      	lsls	r1, r3, #31
 800a0e8:	d405      	bmi.n	800a0f6 <_vfiprintf_r+0x32>
 800a0ea:	89ab      	ldrh	r3, [r5, #12]
 800a0ec:	059a      	lsls	r2, r3, #22
 800a0ee:	d402      	bmi.n	800a0f6 <_vfiprintf_r+0x32>
 800a0f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0f2:	f000 fba5 	bl	800a840 <__retarget_lock_acquire_recursive>
 800a0f6:	89ab      	ldrh	r3, [r5, #12]
 800a0f8:	071b      	lsls	r3, r3, #28
 800a0fa:	d501      	bpl.n	800a100 <_vfiprintf_r+0x3c>
 800a0fc:	692b      	ldr	r3, [r5, #16]
 800a0fe:	b9eb      	cbnz	r3, 800a13c <_vfiprintf_r+0x78>
 800a100:	4629      	mov	r1, r5
 800a102:	4630      	mov	r0, r6
 800a104:	f000 f96e 	bl	800a3e4 <__swsetup_r>
 800a108:	b1c0      	cbz	r0, 800a13c <_vfiprintf_r+0x78>
 800a10a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a10c:	07dc      	lsls	r4, r3, #31
 800a10e:	d50e      	bpl.n	800a12e <_vfiprintf_r+0x6a>
 800a110:	f04f 30ff 	mov.w	r0, #4294967295
 800a114:	b01d      	add	sp, #116	; 0x74
 800a116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a11a:	4b7b      	ldr	r3, [pc, #492]	; (800a308 <_vfiprintf_r+0x244>)
 800a11c:	429d      	cmp	r5, r3
 800a11e:	d101      	bne.n	800a124 <_vfiprintf_r+0x60>
 800a120:	68b5      	ldr	r5, [r6, #8]
 800a122:	e7df      	b.n	800a0e4 <_vfiprintf_r+0x20>
 800a124:	4b79      	ldr	r3, [pc, #484]	; (800a30c <_vfiprintf_r+0x248>)
 800a126:	429d      	cmp	r5, r3
 800a128:	bf08      	it	eq
 800a12a:	68f5      	ldreq	r5, [r6, #12]
 800a12c:	e7da      	b.n	800a0e4 <_vfiprintf_r+0x20>
 800a12e:	89ab      	ldrh	r3, [r5, #12]
 800a130:	0598      	lsls	r0, r3, #22
 800a132:	d4ed      	bmi.n	800a110 <_vfiprintf_r+0x4c>
 800a134:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a136:	f000 fb84 	bl	800a842 <__retarget_lock_release_recursive>
 800a13a:	e7e9      	b.n	800a110 <_vfiprintf_r+0x4c>
 800a13c:	2300      	movs	r3, #0
 800a13e:	9309      	str	r3, [sp, #36]	; 0x24
 800a140:	2320      	movs	r3, #32
 800a142:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a146:	f8cd 800c 	str.w	r8, [sp, #12]
 800a14a:	2330      	movs	r3, #48	; 0x30
 800a14c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a310 <_vfiprintf_r+0x24c>
 800a150:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a154:	f04f 0901 	mov.w	r9, #1
 800a158:	4623      	mov	r3, r4
 800a15a:	469a      	mov	sl, r3
 800a15c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a160:	b10a      	cbz	r2, 800a166 <_vfiprintf_r+0xa2>
 800a162:	2a25      	cmp	r2, #37	; 0x25
 800a164:	d1f9      	bne.n	800a15a <_vfiprintf_r+0x96>
 800a166:	ebba 0b04 	subs.w	fp, sl, r4
 800a16a:	d00b      	beq.n	800a184 <_vfiprintf_r+0xc0>
 800a16c:	465b      	mov	r3, fp
 800a16e:	4622      	mov	r2, r4
 800a170:	4629      	mov	r1, r5
 800a172:	4630      	mov	r0, r6
 800a174:	f7ff ff93 	bl	800a09e <__sfputs_r>
 800a178:	3001      	adds	r0, #1
 800a17a:	f000 80aa 	beq.w	800a2d2 <_vfiprintf_r+0x20e>
 800a17e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a180:	445a      	add	r2, fp
 800a182:	9209      	str	r2, [sp, #36]	; 0x24
 800a184:	f89a 3000 	ldrb.w	r3, [sl]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	f000 80a2 	beq.w	800a2d2 <_vfiprintf_r+0x20e>
 800a18e:	2300      	movs	r3, #0
 800a190:	f04f 32ff 	mov.w	r2, #4294967295
 800a194:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a198:	f10a 0a01 	add.w	sl, sl, #1
 800a19c:	9304      	str	r3, [sp, #16]
 800a19e:	9307      	str	r3, [sp, #28]
 800a1a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1a4:	931a      	str	r3, [sp, #104]	; 0x68
 800a1a6:	4654      	mov	r4, sl
 800a1a8:	2205      	movs	r2, #5
 800a1aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1ae:	4858      	ldr	r0, [pc, #352]	; (800a310 <_vfiprintf_r+0x24c>)
 800a1b0:	f7f6 f81e 	bl	80001f0 <memchr>
 800a1b4:	9a04      	ldr	r2, [sp, #16]
 800a1b6:	b9d8      	cbnz	r0, 800a1f0 <_vfiprintf_r+0x12c>
 800a1b8:	06d1      	lsls	r1, r2, #27
 800a1ba:	bf44      	itt	mi
 800a1bc:	2320      	movmi	r3, #32
 800a1be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1c2:	0713      	lsls	r3, r2, #28
 800a1c4:	bf44      	itt	mi
 800a1c6:	232b      	movmi	r3, #43	; 0x2b
 800a1c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1cc:	f89a 3000 	ldrb.w	r3, [sl]
 800a1d0:	2b2a      	cmp	r3, #42	; 0x2a
 800a1d2:	d015      	beq.n	800a200 <_vfiprintf_r+0x13c>
 800a1d4:	9a07      	ldr	r2, [sp, #28]
 800a1d6:	4654      	mov	r4, sl
 800a1d8:	2000      	movs	r0, #0
 800a1da:	f04f 0c0a 	mov.w	ip, #10
 800a1de:	4621      	mov	r1, r4
 800a1e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1e4:	3b30      	subs	r3, #48	; 0x30
 800a1e6:	2b09      	cmp	r3, #9
 800a1e8:	d94e      	bls.n	800a288 <_vfiprintf_r+0x1c4>
 800a1ea:	b1b0      	cbz	r0, 800a21a <_vfiprintf_r+0x156>
 800a1ec:	9207      	str	r2, [sp, #28]
 800a1ee:	e014      	b.n	800a21a <_vfiprintf_r+0x156>
 800a1f0:	eba0 0308 	sub.w	r3, r0, r8
 800a1f4:	fa09 f303 	lsl.w	r3, r9, r3
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	9304      	str	r3, [sp, #16]
 800a1fc:	46a2      	mov	sl, r4
 800a1fe:	e7d2      	b.n	800a1a6 <_vfiprintf_r+0xe2>
 800a200:	9b03      	ldr	r3, [sp, #12]
 800a202:	1d19      	adds	r1, r3, #4
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	9103      	str	r1, [sp, #12]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	bfbb      	ittet	lt
 800a20c:	425b      	neglt	r3, r3
 800a20e:	f042 0202 	orrlt.w	r2, r2, #2
 800a212:	9307      	strge	r3, [sp, #28]
 800a214:	9307      	strlt	r3, [sp, #28]
 800a216:	bfb8      	it	lt
 800a218:	9204      	strlt	r2, [sp, #16]
 800a21a:	7823      	ldrb	r3, [r4, #0]
 800a21c:	2b2e      	cmp	r3, #46	; 0x2e
 800a21e:	d10c      	bne.n	800a23a <_vfiprintf_r+0x176>
 800a220:	7863      	ldrb	r3, [r4, #1]
 800a222:	2b2a      	cmp	r3, #42	; 0x2a
 800a224:	d135      	bne.n	800a292 <_vfiprintf_r+0x1ce>
 800a226:	9b03      	ldr	r3, [sp, #12]
 800a228:	1d1a      	adds	r2, r3, #4
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	9203      	str	r2, [sp, #12]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	bfb8      	it	lt
 800a232:	f04f 33ff 	movlt.w	r3, #4294967295
 800a236:	3402      	adds	r4, #2
 800a238:	9305      	str	r3, [sp, #20]
 800a23a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a320 <_vfiprintf_r+0x25c>
 800a23e:	7821      	ldrb	r1, [r4, #0]
 800a240:	2203      	movs	r2, #3
 800a242:	4650      	mov	r0, sl
 800a244:	f7f5 ffd4 	bl	80001f0 <memchr>
 800a248:	b140      	cbz	r0, 800a25c <_vfiprintf_r+0x198>
 800a24a:	2340      	movs	r3, #64	; 0x40
 800a24c:	eba0 000a 	sub.w	r0, r0, sl
 800a250:	fa03 f000 	lsl.w	r0, r3, r0
 800a254:	9b04      	ldr	r3, [sp, #16]
 800a256:	4303      	orrs	r3, r0
 800a258:	3401      	adds	r4, #1
 800a25a:	9304      	str	r3, [sp, #16]
 800a25c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a260:	482c      	ldr	r0, [pc, #176]	; (800a314 <_vfiprintf_r+0x250>)
 800a262:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a266:	2206      	movs	r2, #6
 800a268:	f7f5 ffc2 	bl	80001f0 <memchr>
 800a26c:	2800      	cmp	r0, #0
 800a26e:	d03f      	beq.n	800a2f0 <_vfiprintf_r+0x22c>
 800a270:	4b29      	ldr	r3, [pc, #164]	; (800a318 <_vfiprintf_r+0x254>)
 800a272:	bb1b      	cbnz	r3, 800a2bc <_vfiprintf_r+0x1f8>
 800a274:	9b03      	ldr	r3, [sp, #12]
 800a276:	3307      	adds	r3, #7
 800a278:	f023 0307 	bic.w	r3, r3, #7
 800a27c:	3308      	adds	r3, #8
 800a27e:	9303      	str	r3, [sp, #12]
 800a280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a282:	443b      	add	r3, r7
 800a284:	9309      	str	r3, [sp, #36]	; 0x24
 800a286:	e767      	b.n	800a158 <_vfiprintf_r+0x94>
 800a288:	fb0c 3202 	mla	r2, ip, r2, r3
 800a28c:	460c      	mov	r4, r1
 800a28e:	2001      	movs	r0, #1
 800a290:	e7a5      	b.n	800a1de <_vfiprintf_r+0x11a>
 800a292:	2300      	movs	r3, #0
 800a294:	3401      	adds	r4, #1
 800a296:	9305      	str	r3, [sp, #20]
 800a298:	4619      	mov	r1, r3
 800a29a:	f04f 0c0a 	mov.w	ip, #10
 800a29e:	4620      	mov	r0, r4
 800a2a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2a4:	3a30      	subs	r2, #48	; 0x30
 800a2a6:	2a09      	cmp	r2, #9
 800a2a8:	d903      	bls.n	800a2b2 <_vfiprintf_r+0x1ee>
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d0c5      	beq.n	800a23a <_vfiprintf_r+0x176>
 800a2ae:	9105      	str	r1, [sp, #20]
 800a2b0:	e7c3      	b.n	800a23a <_vfiprintf_r+0x176>
 800a2b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2b6:	4604      	mov	r4, r0
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	e7f0      	b.n	800a29e <_vfiprintf_r+0x1da>
 800a2bc:	ab03      	add	r3, sp, #12
 800a2be:	9300      	str	r3, [sp, #0]
 800a2c0:	462a      	mov	r2, r5
 800a2c2:	4b16      	ldr	r3, [pc, #88]	; (800a31c <_vfiprintf_r+0x258>)
 800a2c4:	a904      	add	r1, sp, #16
 800a2c6:	4630      	mov	r0, r6
 800a2c8:	f7fd fe24 	bl	8007f14 <_printf_float>
 800a2cc:	4607      	mov	r7, r0
 800a2ce:	1c78      	adds	r0, r7, #1
 800a2d0:	d1d6      	bne.n	800a280 <_vfiprintf_r+0x1bc>
 800a2d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2d4:	07d9      	lsls	r1, r3, #31
 800a2d6:	d405      	bmi.n	800a2e4 <_vfiprintf_r+0x220>
 800a2d8:	89ab      	ldrh	r3, [r5, #12]
 800a2da:	059a      	lsls	r2, r3, #22
 800a2dc:	d402      	bmi.n	800a2e4 <_vfiprintf_r+0x220>
 800a2de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2e0:	f000 faaf 	bl	800a842 <__retarget_lock_release_recursive>
 800a2e4:	89ab      	ldrh	r3, [r5, #12]
 800a2e6:	065b      	lsls	r3, r3, #25
 800a2e8:	f53f af12 	bmi.w	800a110 <_vfiprintf_r+0x4c>
 800a2ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2ee:	e711      	b.n	800a114 <_vfiprintf_r+0x50>
 800a2f0:	ab03      	add	r3, sp, #12
 800a2f2:	9300      	str	r3, [sp, #0]
 800a2f4:	462a      	mov	r2, r5
 800a2f6:	4b09      	ldr	r3, [pc, #36]	; (800a31c <_vfiprintf_r+0x258>)
 800a2f8:	a904      	add	r1, sp, #16
 800a2fa:	4630      	mov	r0, r6
 800a2fc:	f7fe f8ae 	bl	800845c <_printf_i>
 800a300:	e7e4      	b.n	800a2cc <_vfiprintf_r+0x208>
 800a302:	bf00      	nop
 800a304:	0800b404 	.word	0x0800b404
 800a308:	0800b424 	.word	0x0800b424
 800a30c:	0800b3e4 	.word	0x0800b3e4
 800a310:	0800b28c 	.word	0x0800b28c
 800a314:	0800b296 	.word	0x0800b296
 800a318:	08007f15 	.word	0x08007f15
 800a31c:	0800a09f 	.word	0x0800a09f
 800a320:	0800b292 	.word	0x0800b292

0800a324 <__swbuf_r>:
 800a324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a326:	460e      	mov	r6, r1
 800a328:	4614      	mov	r4, r2
 800a32a:	4605      	mov	r5, r0
 800a32c:	b118      	cbz	r0, 800a336 <__swbuf_r+0x12>
 800a32e:	6983      	ldr	r3, [r0, #24]
 800a330:	b90b      	cbnz	r3, 800a336 <__swbuf_r+0x12>
 800a332:	f000 f9e7 	bl	800a704 <__sinit>
 800a336:	4b21      	ldr	r3, [pc, #132]	; (800a3bc <__swbuf_r+0x98>)
 800a338:	429c      	cmp	r4, r3
 800a33a:	d12b      	bne.n	800a394 <__swbuf_r+0x70>
 800a33c:	686c      	ldr	r4, [r5, #4]
 800a33e:	69a3      	ldr	r3, [r4, #24]
 800a340:	60a3      	str	r3, [r4, #8]
 800a342:	89a3      	ldrh	r3, [r4, #12]
 800a344:	071a      	lsls	r2, r3, #28
 800a346:	d52f      	bpl.n	800a3a8 <__swbuf_r+0x84>
 800a348:	6923      	ldr	r3, [r4, #16]
 800a34a:	b36b      	cbz	r3, 800a3a8 <__swbuf_r+0x84>
 800a34c:	6923      	ldr	r3, [r4, #16]
 800a34e:	6820      	ldr	r0, [r4, #0]
 800a350:	1ac0      	subs	r0, r0, r3
 800a352:	6963      	ldr	r3, [r4, #20]
 800a354:	b2f6      	uxtb	r6, r6
 800a356:	4283      	cmp	r3, r0
 800a358:	4637      	mov	r7, r6
 800a35a:	dc04      	bgt.n	800a366 <__swbuf_r+0x42>
 800a35c:	4621      	mov	r1, r4
 800a35e:	4628      	mov	r0, r5
 800a360:	f000 f93c 	bl	800a5dc <_fflush_r>
 800a364:	bb30      	cbnz	r0, 800a3b4 <__swbuf_r+0x90>
 800a366:	68a3      	ldr	r3, [r4, #8]
 800a368:	3b01      	subs	r3, #1
 800a36a:	60a3      	str	r3, [r4, #8]
 800a36c:	6823      	ldr	r3, [r4, #0]
 800a36e:	1c5a      	adds	r2, r3, #1
 800a370:	6022      	str	r2, [r4, #0]
 800a372:	701e      	strb	r6, [r3, #0]
 800a374:	6963      	ldr	r3, [r4, #20]
 800a376:	3001      	adds	r0, #1
 800a378:	4283      	cmp	r3, r0
 800a37a:	d004      	beq.n	800a386 <__swbuf_r+0x62>
 800a37c:	89a3      	ldrh	r3, [r4, #12]
 800a37e:	07db      	lsls	r3, r3, #31
 800a380:	d506      	bpl.n	800a390 <__swbuf_r+0x6c>
 800a382:	2e0a      	cmp	r6, #10
 800a384:	d104      	bne.n	800a390 <__swbuf_r+0x6c>
 800a386:	4621      	mov	r1, r4
 800a388:	4628      	mov	r0, r5
 800a38a:	f000 f927 	bl	800a5dc <_fflush_r>
 800a38e:	b988      	cbnz	r0, 800a3b4 <__swbuf_r+0x90>
 800a390:	4638      	mov	r0, r7
 800a392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a394:	4b0a      	ldr	r3, [pc, #40]	; (800a3c0 <__swbuf_r+0x9c>)
 800a396:	429c      	cmp	r4, r3
 800a398:	d101      	bne.n	800a39e <__swbuf_r+0x7a>
 800a39a:	68ac      	ldr	r4, [r5, #8]
 800a39c:	e7cf      	b.n	800a33e <__swbuf_r+0x1a>
 800a39e:	4b09      	ldr	r3, [pc, #36]	; (800a3c4 <__swbuf_r+0xa0>)
 800a3a0:	429c      	cmp	r4, r3
 800a3a2:	bf08      	it	eq
 800a3a4:	68ec      	ldreq	r4, [r5, #12]
 800a3a6:	e7ca      	b.n	800a33e <__swbuf_r+0x1a>
 800a3a8:	4621      	mov	r1, r4
 800a3aa:	4628      	mov	r0, r5
 800a3ac:	f000 f81a 	bl	800a3e4 <__swsetup_r>
 800a3b0:	2800      	cmp	r0, #0
 800a3b2:	d0cb      	beq.n	800a34c <__swbuf_r+0x28>
 800a3b4:	f04f 37ff 	mov.w	r7, #4294967295
 800a3b8:	e7ea      	b.n	800a390 <__swbuf_r+0x6c>
 800a3ba:	bf00      	nop
 800a3bc:	0800b404 	.word	0x0800b404
 800a3c0:	0800b424 	.word	0x0800b424
 800a3c4:	0800b3e4 	.word	0x0800b3e4

0800a3c8 <__ascii_wctomb>:
 800a3c8:	b149      	cbz	r1, 800a3de <__ascii_wctomb+0x16>
 800a3ca:	2aff      	cmp	r2, #255	; 0xff
 800a3cc:	bf85      	ittet	hi
 800a3ce:	238a      	movhi	r3, #138	; 0x8a
 800a3d0:	6003      	strhi	r3, [r0, #0]
 800a3d2:	700a      	strbls	r2, [r1, #0]
 800a3d4:	f04f 30ff 	movhi.w	r0, #4294967295
 800a3d8:	bf98      	it	ls
 800a3da:	2001      	movls	r0, #1
 800a3dc:	4770      	bx	lr
 800a3de:	4608      	mov	r0, r1
 800a3e0:	4770      	bx	lr
	...

0800a3e4 <__swsetup_r>:
 800a3e4:	4b32      	ldr	r3, [pc, #200]	; (800a4b0 <__swsetup_r+0xcc>)
 800a3e6:	b570      	push	{r4, r5, r6, lr}
 800a3e8:	681d      	ldr	r5, [r3, #0]
 800a3ea:	4606      	mov	r6, r0
 800a3ec:	460c      	mov	r4, r1
 800a3ee:	b125      	cbz	r5, 800a3fa <__swsetup_r+0x16>
 800a3f0:	69ab      	ldr	r3, [r5, #24]
 800a3f2:	b913      	cbnz	r3, 800a3fa <__swsetup_r+0x16>
 800a3f4:	4628      	mov	r0, r5
 800a3f6:	f000 f985 	bl	800a704 <__sinit>
 800a3fa:	4b2e      	ldr	r3, [pc, #184]	; (800a4b4 <__swsetup_r+0xd0>)
 800a3fc:	429c      	cmp	r4, r3
 800a3fe:	d10f      	bne.n	800a420 <__swsetup_r+0x3c>
 800a400:	686c      	ldr	r4, [r5, #4]
 800a402:	89a3      	ldrh	r3, [r4, #12]
 800a404:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a408:	0719      	lsls	r1, r3, #28
 800a40a:	d42c      	bmi.n	800a466 <__swsetup_r+0x82>
 800a40c:	06dd      	lsls	r5, r3, #27
 800a40e:	d411      	bmi.n	800a434 <__swsetup_r+0x50>
 800a410:	2309      	movs	r3, #9
 800a412:	6033      	str	r3, [r6, #0]
 800a414:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a418:	81a3      	strh	r3, [r4, #12]
 800a41a:	f04f 30ff 	mov.w	r0, #4294967295
 800a41e:	e03e      	b.n	800a49e <__swsetup_r+0xba>
 800a420:	4b25      	ldr	r3, [pc, #148]	; (800a4b8 <__swsetup_r+0xd4>)
 800a422:	429c      	cmp	r4, r3
 800a424:	d101      	bne.n	800a42a <__swsetup_r+0x46>
 800a426:	68ac      	ldr	r4, [r5, #8]
 800a428:	e7eb      	b.n	800a402 <__swsetup_r+0x1e>
 800a42a:	4b24      	ldr	r3, [pc, #144]	; (800a4bc <__swsetup_r+0xd8>)
 800a42c:	429c      	cmp	r4, r3
 800a42e:	bf08      	it	eq
 800a430:	68ec      	ldreq	r4, [r5, #12]
 800a432:	e7e6      	b.n	800a402 <__swsetup_r+0x1e>
 800a434:	0758      	lsls	r0, r3, #29
 800a436:	d512      	bpl.n	800a45e <__swsetup_r+0x7a>
 800a438:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a43a:	b141      	cbz	r1, 800a44e <__swsetup_r+0x6a>
 800a43c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a440:	4299      	cmp	r1, r3
 800a442:	d002      	beq.n	800a44a <__swsetup_r+0x66>
 800a444:	4630      	mov	r0, r6
 800a446:	f7ff fb6f 	bl	8009b28 <_free_r>
 800a44a:	2300      	movs	r3, #0
 800a44c:	6363      	str	r3, [r4, #52]	; 0x34
 800a44e:	89a3      	ldrh	r3, [r4, #12]
 800a450:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a454:	81a3      	strh	r3, [r4, #12]
 800a456:	2300      	movs	r3, #0
 800a458:	6063      	str	r3, [r4, #4]
 800a45a:	6923      	ldr	r3, [r4, #16]
 800a45c:	6023      	str	r3, [r4, #0]
 800a45e:	89a3      	ldrh	r3, [r4, #12]
 800a460:	f043 0308 	orr.w	r3, r3, #8
 800a464:	81a3      	strh	r3, [r4, #12]
 800a466:	6923      	ldr	r3, [r4, #16]
 800a468:	b94b      	cbnz	r3, 800a47e <__swsetup_r+0x9a>
 800a46a:	89a3      	ldrh	r3, [r4, #12]
 800a46c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a474:	d003      	beq.n	800a47e <__swsetup_r+0x9a>
 800a476:	4621      	mov	r1, r4
 800a478:	4630      	mov	r0, r6
 800a47a:	f000 fa07 	bl	800a88c <__smakebuf_r>
 800a47e:	89a0      	ldrh	r0, [r4, #12]
 800a480:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a484:	f010 0301 	ands.w	r3, r0, #1
 800a488:	d00a      	beq.n	800a4a0 <__swsetup_r+0xbc>
 800a48a:	2300      	movs	r3, #0
 800a48c:	60a3      	str	r3, [r4, #8]
 800a48e:	6963      	ldr	r3, [r4, #20]
 800a490:	425b      	negs	r3, r3
 800a492:	61a3      	str	r3, [r4, #24]
 800a494:	6923      	ldr	r3, [r4, #16]
 800a496:	b943      	cbnz	r3, 800a4aa <__swsetup_r+0xc6>
 800a498:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a49c:	d1ba      	bne.n	800a414 <__swsetup_r+0x30>
 800a49e:	bd70      	pop	{r4, r5, r6, pc}
 800a4a0:	0781      	lsls	r1, r0, #30
 800a4a2:	bf58      	it	pl
 800a4a4:	6963      	ldrpl	r3, [r4, #20]
 800a4a6:	60a3      	str	r3, [r4, #8]
 800a4a8:	e7f4      	b.n	800a494 <__swsetup_r+0xb0>
 800a4aa:	2000      	movs	r0, #0
 800a4ac:	e7f7      	b.n	800a49e <__swsetup_r+0xba>
 800a4ae:	bf00      	nop
 800a4b0:	2000000c 	.word	0x2000000c
 800a4b4:	0800b404 	.word	0x0800b404
 800a4b8:	0800b424 	.word	0x0800b424
 800a4bc:	0800b3e4 	.word	0x0800b3e4

0800a4c0 <abort>:
 800a4c0:	b508      	push	{r3, lr}
 800a4c2:	2006      	movs	r0, #6
 800a4c4:	f000 fa52 	bl	800a96c <raise>
 800a4c8:	2001      	movs	r0, #1
 800a4ca:	f7f8 fa03 	bl	80028d4 <_exit>
	...

0800a4d0 <__sflush_r>:
 800a4d0:	898a      	ldrh	r2, [r1, #12]
 800a4d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4d6:	4605      	mov	r5, r0
 800a4d8:	0710      	lsls	r0, r2, #28
 800a4da:	460c      	mov	r4, r1
 800a4dc:	d458      	bmi.n	800a590 <__sflush_r+0xc0>
 800a4de:	684b      	ldr	r3, [r1, #4]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	dc05      	bgt.n	800a4f0 <__sflush_r+0x20>
 800a4e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	dc02      	bgt.n	800a4f0 <__sflush_r+0x20>
 800a4ea:	2000      	movs	r0, #0
 800a4ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a4f2:	2e00      	cmp	r6, #0
 800a4f4:	d0f9      	beq.n	800a4ea <__sflush_r+0x1a>
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a4fc:	682f      	ldr	r7, [r5, #0]
 800a4fe:	602b      	str	r3, [r5, #0]
 800a500:	d032      	beq.n	800a568 <__sflush_r+0x98>
 800a502:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a504:	89a3      	ldrh	r3, [r4, #12]
 800a506:	075a      	lsls	r2, r3, #29
 800a508:	d505      	bpl.n	800a516 <__sflush_r+0x46>
 800a50a:	6863      	ldr	r3, [r4, #4]
 800a50c:	1ac0      	subs	r0, r0, r3
 800a50e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a510:	b10b      	cbz	r3, 800a516 <__sflush_r+0x46>
 800a512:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a514:	1ac0      	subs	r0, r0, r3
 800a516:	2300      	movs	r3, #0
 800a518:	4602      	mov	r2, r0
 800a51a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a51c:	6a21      	ldr	r1, [r4, #32]
 800a51e:	4628      	mov	r0, r5
 800a520:	47b0      	blx	r6
 800a522:	1c43      	adds	r3, r0, #1
 800a524:	89a3      	ldrh	r3, [r4, #12]
 800a526:	d106      	bne.n	800a536 <__sflush_r+0x66>
 800a528:	6829      	ldr	r1, [r5, #0]
 800a52a:	291d      	cmp	r1, #29
 800a52c:	d82c      	bhi.n	800a588 <__sflush_r+0xb8>
 800a52e:	4a2a      	ldr	r2, [pc, #168]	; (800a5d8 <__sflush_r+0x108>)
 800a530:	40ca      	lsrs	r2, r1
 800a532:	07d6      	lsls	r6, r2, #31
 800a534:	d528      	bpl.n	800a588 <__sflush_r+0xb8>
 800a536:	2200      	movs	r2, #0
 800a538:	6062      	str	r2, [r4, #4]
 800a53a:	04d9      	lsls	r1, r3, #19
 800a53c:	6922      	ldr	r2, [r4, #16]
 800a53e:	6022      	str	r2, [r4, #0]
 800a540:	d504      	bpl.n	800a54c <__sflush_r+0x7c>
 800a542:	1c42      	adds	r2, r0, #1
 800a544:	d101      	bne.n	800a54a <__sflush_r+0x7a>
 800a546:	682b      	ldr	r3, [r5, #0]
 800a548:	b903      	cbnz	r3, 800a54c <__sflush_r+0x7c>
 800a54a:	6560      	str	r0, [r4, #84]	; 0x54
 800a54c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a54e:	602f      	str	r7, [r5, #0]
 800a550:	2900      	cmp	r1, #0
 800a552:	d0ca      	beq.n	800a4ea <__sflush_r+0x1a>
 800a554:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a558:	4299      	cmp	r1, r3
 800a55a:	d002      	beq.n	800a562 <__sflush_r+0x92>
 800a55c:	4628      	mov	r0, r5
 800a55e:	f7ff fae3 	bl	8009b28 <_free_r>
 800a562:	2000      	movs	r0, #0
 800a564:	6360      	str	r0, [r4, #52]	; 0x34
 800a566:	e7c1      	b.n	800a4ec <__sflush_r+0x1c>
 800a568:	6a21      	ldr	r1, [r4, #32]
 800a56a:	2301      	movs	r3, #1
 800a56c:	4628      	mov	r0, r5
 800a56e:	47b0      	blx	r6
 800a570:	1c41      	adds	r1, r0, #1
 800a572:	d1c7      	bne.n	800a504 <__sflush_r+0x34>
 800a574:	682b      	ldr	r3, [r5, #0]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d0c4      	beq.n	800a504 <__sflush_r+0x34>
 800a57a:	2b1d      	cmp	r3, #29
 800a57c:	d001      	beq.n	800a582 <__sflush_r+0xb2>
 800a57e:	2b16      	cmp	r3, #22
 800a580:	d101      	bne.n	800a586 <__sflush_r+0xb6>
 800a582:	602f      	str	r7, [r5, #0]
 800a584:	e7b1      	b.n	800a4ea <__sflush_r+0x1a>
 800a586:	89a3      	ldrh	r3, [r4, #12]
 800a588:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a58c:	81a3      	strh	r3, [r4, #12]
 800a58e:	e7ad      	b.n	800a4ec <__sflush_r+0x1c>
 800a590:	690f      	ldr	r7, [r1, #16]
 800a592:	2f00      	cmp	r7, #0
 800a594:	d0a9      	beq.n	800a4ea <__sflush_r+0x1a>
 800a596:	0793      	lsls	r3, r2, #30
 800a598:	680e      	ldr	r6, [r1, #0]
 800a59a:	bf08      	it	eq
 800a59c:	694b      	ldreq	r3, [r1, #20]
 800a59e:	600f      	str	r7, [r1, #0]
 800a5a0:	bf18      	it	ne
 800a5a2:	2300      	movne	r3, #0
 800a5a4:	eba6 0807 	sub.w	r8, r6, r7
 800a5a8:	608b      	str	r3, [r1, #8]
 800a5aa:	f1b8 0f00 	cmp.w	r8, #0
 800a5ae:	dd9c      	ble.n	800a4ea <__sflush_r+0x1a>
 800a5b0:	6a21      	ldr	r1, [r4, #32]
 800a5b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a5b4:	4643      	mov	r3, r8
 800a5b6:	463a      	mov	r2, r7
 800a5b8:	4628      	mov	r0, r5
 800a5ba:	47b0      	blx	r6
 800a5bc:	2800      	cmp	r0, #0
 800a5be:	dc06      	bgt.n	800a5ce <__sflush_r+0xfe>
 800a5c0:	89a3      	ldrh	r3, [r4, #12]
 800a5c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5c6:	81a3      	strh	r3, [r4, #12]
 800a5c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a5cc:	e78e      	b.n	800a4ec <__sflush_r+0x1c>
 800a5ce:	4407      	add	r7, r0
 800a5d0:	eba8 0800 	sub.w	r8, r8, r0
 800a5d4:	e7e9      	b.n	800a5aa <__sflush_r+0xda>
 800a5d6:	bf00      	nop
 800a5d8:	20400001 	.word	0x20400001

0800a5dc <_fflush_r>:
 800a5dc:	b538      	push	{r3, r4, r5, lr}
 800a5de:	690b      	ldr	r3, [r1, #16]
 800a5e0:	4605      	mov	r5, r0
 800a5e2:	460c      	mov	r4, r1
 800a5e4:	b913      	cbnz	r3, 800a5ec <_fflush_r+0x10>
 800a5e6:	2500      	movs	r5, #0
 800a5e8:	4628      	mov	r0, r5
 800a5ea:	bd38      	pop	{r3, r4, r5, pc}
 800a5ec:	b118      	cbz	r0, 800a5f6 <_fflush_r+0x1a>
 800a5ee:	6983      	ldr	r3, [r0, #24]
 800a5f0:	b90b      	cbnz	r3, 800a5f6 <_fflush_r+0x1a>
 800a5f2:	f000 f887 	bl	800a704 <__sinit>
 800a5f6:	4b14      	ldr	r3, [pc, #80]	; (800a648 <_fflush_r+0x6c>)
 800a5f8:	429c      	cmp	r4, r3
 800a5fa:	d11b      	bne.n	800a634 <_fflush_r+0x58>
 800a5fc:	686c      	ldr	r4, [r5, #4]
 800a5fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d0ef      	beq.n	800a5e6 <_fflush_r+0xa>
 800a606:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a608:	07d0      	lsls	r0, r2, #31
 800a60a:	d404      	bmi.n	800a616 <_fflush_r+0x3a>
 800a60c:	0599      	lsls	r1, r3, #22
 800a60e:	d402      	bmi.n	800a616 <_fflush_r+0x3a>
 800a610:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a612:	f000 f915 	bl	800a840 <__retarget_lock_acquire_recursive>
 800a616:	4628      	mov	r0, r5
 800a618:	4621      	mov	r1, r4
 800a61a:	f7ff ff59 	bl	800a4d0 <__sflush_r>
 800a61e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a620:	07da      	lsls	r2, r3, #31
 800a622:	4605      	mov	r5, r0
 800a624:	d4e0      	bmi.n	800a5e8 <_fflush_r+0xc>
 800a626:	89a3      	ldrh	r3, [r4, #12]
 800a628:	059b      	lsls	r3, r3, #22
 800a62a:	d4dd      	bmi.n	800a5e8 <_fflush_r+0xc>
 800a62c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a62e:	f000 f908 	bl	800a842 <__retarget_lock_release_recursive>
 800a632:	e7d9      	b.n	800a5e8 <_fflush_r+0xc>
 800a634:	4b05      	ldr	r3, [pc, #20]	; (800a64c <_fflush_r+0x70>)
 800a636:	429c      	cmp	r4, r3
 800a638:	d101      	bne.n	800a63e <_fflush_r+0x62>
 800a63a:	68ac      	ldr	r4, [r5, #8]
 800a63c:	e7df      	b.n	800a5fe <_fflush_r+0x22>
 800a63e:	4b04      	ldr	r3, [pc, #16]	; (800a650 <_fflush_r+0x74>)
 800a640:	429c      	cmp	r4, r3
 800a642:	bf08      	it	eq
 800a644:	68ec      	ldreq	r4, [r5, #12]
 800a646:	e7da      	b.n	800a5fe <_fflush_r+0x22>
 800a648:	0800b404 	.word	0x0800b404
 800a64c:	0800b424 	.word	0x0800b424
 800a650:	0800b3e4 	.word	0x0800b3e4

0800a654 <std>:
 800a654:	2300      	movs	r3, #0
 800a656:	b510      	push	{r4, lr}
 800a658:	4604      	mov	r4, r0
 800a65a:	e9c0 3300 	strd	r3, r3, [r0]
 800a65e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a662:	6083      	str	r3, [r0, #8]
 800a664:	8181      	strh	r1, [r0, #12]
 800a666:	6643      	str	r3, [r0, #100]	; 0x64
 800a668:	81c2      	strh	r2, [r0, #14]
 800a66a:	6183      	str	r3, [r0, #24]
 800a66c:	4619      	mov	r1, r3
 800a66e:	2208      	movs	r2, #8
 800a670:	305c      	adds	r0, #92	; 0x5c
 800a672:	f7fd fba7 	bl	8007dc4 <memset>
 800a676:	4b05      	ldr	r3, [pc, #20]	; (800a68c <std+0x38>)
 800a678:	6263      	str	r3, [r4, #36]	; 0x24
 800a67a:	4b05      	ldr	r3, [pc, #20]	; (800a690 <std+0x3c>)
 800a67c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a67e:	4b05      	ldr	r3, [pc, #20]	; (800a694 <std+0x40>)
 800a680:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a682:	4b05      	ldr	r3, [pc, #20]	; (800a698 <std+0x44>)
 800a684:	6224      	str	r4, [r4, #32]
 800a686:	6323      	str	r3, [r4, #48]	; 0x30
 800a688:	bd10      	pop	{r4, pc}
 800a68a:	bf00      	nop
 800a68c:	0800a9a5 	.word	0x0800a9a5
 800a690:	0800a9c7 	.word	0x0800a9c7
 800a694:	0800a9ff 	.word	0x0800a9ff
 800a698:	0800aa23 	.word	0x0800aa23

0800a69c <_cleanup_r>:
 800a69c:	4901      	ldr	r1, [pc, #4]	; (800a6a4 <_cleanup_r+0x8>)
 800a69e:	f000 b8af 	b.w	800a800 <_fwalk_reent>
 800a6a2:	bf00      	nop
 800a6a4:	0800a5dd 	.word	0x0800a5dd

0800a6a8 <__sfmoreglue>:
 800a6a8:	b570      	push	{r4, r5, r6, lr}
 800a6aa:	1e4a      	subs	r2, r1, #1
 800a6ac:	2568      	movs	r5, #104	; 0x68
 800a6ae:	4355      	muls	r5, r2
 800a6b0:	460e      	mov	r6, r1
 800a6b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a6b6:	f7ff fa87 	bl	8009bc8 <_malloc_r>
 800a6ba:	4604      	mov	r4, r0
 800a6bc:	b140      	cbz	r0, 800a6d0 <__sfmoreglue+0x28>
 800a6be:	2100      	movs	r1, #0
 800a6c0:	e9c0 1600 	strd	r1, r6, [r0]
 800a6c4:	300c      	adds	r0, #12
 800a6c6:	60a0      	str	r0, [r4, #8]
 800a6c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a6cc:	f7fd fb7a 	bl	8007dc4 <memset>
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	bd70      	pop	{r4, r5, r6, pc}

0800a6d4 <__sfp_lock_acquire>:
 800a6d4:	4801      	ldr	r0, [pc, #4]	; (800a6dc <__sfp_lock_acquire+0x8>)
 800a6d6:	f000 b8b3 	b.w	800a840 <__retarget_lock_acquire_recursive>
 800a6da:	bf00      	nop
 800a6dc:	200004dc 	.word	0x200004dc

0800a6e0 <__sfp_lock_release>:
 800a6e0:	4801      	ldr	r0, [pc, #4]	; (800a6e8 <__sfp_lock_release+0x8>)
 800a6e2:	f000 b8ae 	b.w	800a842 <__retarget_lock_release_recursive>
 800a6e6:	bf00      	nop
 800a6e8:	200004dc 	.word	0x200004dc

0800a6ec <__sinit_lock_acquire>:
 800a6ec:	4801      	ldr	r0, [pc, #4]	; (800a6f4 <__sinit_lock_acquire+0x8>)
 800a6ee:	f000 b8a7 	b.w	800a840 <__retarget_lock_acquire_recursive>
 800a6f2:	bf00      	nop
 800a6f4:	200004d7 	.word	0x200004d7

0800a6f8 <__sinit_lock_release>:
 800a6f8:	4801      	ldr	r0, [pc, #4]	; (800a700 <__sinit_lock_release+0x8>)
 800a6fa:	f000 b8a2 	b.w	800a842 <__retarget_lock_release_recursive>
 800a6fe:	bf00      	nop
 800a700:	200004d7 	.word	0x200004d7

0800a704 <__sinit>:
 800a704:	b510      	push	{r4, lr}
 800a706:	4604      	mov	r4, r0
 800a708:	f7ff fff0 	bl	800a6ec <__sinit_lock_acquire>
 800a70c:	69a3      	ldr	r3, [r4, #24]
 800a70e:	b11b      	cbz	r3, 800a718 <__sinit+0x14>
 800a710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a714:	f7ff bff0 	b.w	800a6f8 <__sinit_lock_release>
 800a718:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a71c:	6523      	str	r3, [r4, #80]	; 0x50
 800a71e:	4b13      	ldr	r3, [pc, #76]	; (800a76c <__sinit+0x68>)
 800a720:	4a13      	ldr	r2, [pc, #76]	; (800a770 <__sinit+0x6c>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	62a2      	str	r2, [r4, #40]	; 0x28
 800a726:	42a3      	cmp	r3, r4
 800a728:	bf04      	itt	eq
 800a72a:	2301      	moveq	r3, #1
 800a72c:	61a3      	streq	r3, [r4, #24]
 800a72e:	4620      	mov	r0, r4
 800a730:	f000 f820 	bl	800a774 <__sfp>
 800a734:	6060      	str	r0, [r4, #4]
 800a736:	4620      	mov	r0, r4
 800a738:	f000 f81c 	bl	800a774 <__sfp>
 800a73c:	60a0      	str	r0, [r4, #8]
 800a73e:	4620      	mov	r0, r4
 800a740:	f000 f818 	bl	800a774 <__sfp>
 800a744:	2200      	movs	r2, #0
 800a746:	60e0      	str	r0, [r4, #12]
 800a748:	2104      	movs	r1, #4
 800a74a:	6860      	ldr	r0, [r4, #4]
 800a74c:	f7ff ff82 	bl	800a654 <std>
 800a750:	68a0      	ldr	r0, [r4, #8]
 800a752:	2201      	movs	r2, #1
 800a754:	2109      	movs	r1, #9
 800a756:	f7ff ff7d 	bl	800a654 <std>
 800a75a:	68e0      	ldr	r0, [r4, #12]
 800a75c:	2202      	movs	r2, #2
 800a75e:	2112      	movs	r1, #18
 800a760:	f7ff ff78 	bl	800a654 <std>
 800a764:	2301      	movs	r3, #1
 800a766:	61a3      	str	r3, [r4, #24]
 800a768:	e7d2      	b.n	800a710 <__sinit+0xc>
 800a76a:	bf00      	nop
 800a76c:	0800b060 	.word	0x0800b060
 800a770:	0800a69d 	.word	0x0800a69d

0800a774 <__sfp>:
 800a774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a776:	4607      	mov	r7, r0
 800a778:	f7ff ffac 	bl	800a6d4 <__sfp_lock_acquire>
 800a77c:	4b1e      	ldr	r3, [pc, #120]	; (800a7f8 <__sfp+0x84>)
 800a77e:	681e      	ldr	r6, [r3, #0]
 800a780:	69b3      	ldr	r3, [r6, #24]
 800a782:	b913      	cbnz	r3, 800a78a <__sfp+0x16>
 800a784:	4630      	mov	r0, r6
 800a786:	f7ff ffbd 	bl	800a704 <__sinit>
 800a78a:	3648      	adds	r6, #72	; 0x48
 800a78c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a790:	3b01      	subs	r3, #1
 800a792:	d503      	bpl.n	800a79c <__sfp+0x28>
 800a794:	6833      	ldr	r3, [r6, #0]
 800a796:	b30b      	cbz	r3, 800a7dc <__sfp+0x68>
 800a798:	6836      	ldr	r6, [r6, #0]
 800a79a:	e7f7      	b.n	800a78c <__sfp+0x18>
 800a79c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a7a0:	b9d5      	cbnz	r5, 800a7d8 <__sfp+0x64>
 800a7a2:	4b16      	ldr	r3, [pc, #88]	; (800a7fc <__sfp+0x88>)
 800a7a4:	60e3      	str	r3, [r4, #12]
 800a7a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a7aa:	6665      	str	r5, [r4, #100]	; 0x64
 800a7ac:	f000 f847 	bl	800a83e <__retarget_lock_init_recursive>
 800a7b0:	f7ff ff96 	bl	800a6e0 <__sfp_lock_release>
 800a7b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a7b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a7bc:	6025      	str	r5, [r4, #0]
 800a7be:	61a5      	str	r5, [r4, #24]
 800a7c0:	2208      	movs	r2, #8
 800a7c2:	4629      	mov	r1, r5
 800a7c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a7c8:	f7fd fafc 	bl	8007dc4 <memset>
 800a7cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a7d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a7d4:	4620      	mov	r0, r4
 800a7d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7d8:	3468      	adds	r4, #104	; 0x68
 800a7da:	e7d9      	b.n	800a790 <__sfp+0x1c>
 800a7dc:	2104      	movs	r1, #4
 800a7de:	4638      	mov	r0, r7
 800a7e0:	f7ff ff62 	bl	800a6a8 <__sfmoreglue>
 800a7e4:	4604      	mov	r4, r0
 800a7e6:	6030      	str	r0, [r6, #0]
 800a7e8:	2800      	cmp	r0, #0
 800a7ea:	d1d5      	bne.n	800a798 <__sfp+0x24>
 800a7ec:	f7ff ff78 	bl	800a6e0 <__sfp_lock_release>
 800a7f0:	230c      	movs	r3, #12
 800a7f2:	603b      	str	r3, [r7, #0]
 800a7f4:	e7ee      	b.n	800a7d4 <__sfp+0x60>
 800a7f6:	bf00      	nop
 800a7f8:	0800b060 	.word	0x0800b060
 800a7fc:	ffff0001 	.word	0xffff0001

0800a800 <_fwalk_reent>:
 800a800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a804:	4606      	mov	r6, r0
 800a806:	4688      	mov	r8, r1
 800a808:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a80c:	2700      	movs	r7, #0
 800a80e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a812:	f1b9 0901 	subs.w	r9, r9, #1
 800a816:	d505      	bpl.n	800a824 <_fwalk_reent+0x24>
 800a818:	6824      	ldr	r4, [r4, #0]
 800a81a:	2c00      	cmp	r4, #0
 800a81c:	d1f7      	bne.n	800a80e <_fwalk_reent+0xe>
 800a81e:	4638      	mov	r0, r7
 800a820:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a824:	89ab      	ldrh	r3, [r5, #12]
 800a826:	2b01      	cmp	r3, #1
 800a828:	d907      	bls.n	800a83a <_fwalk_reent+0x3a>
 800a82a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a82e:	3301      	adds	r3, #1
 800a830:	d003      	beq.n	800a83a <_fwalk_reent+0x3a>
 800a832:	4629      	mov	r1, r5
 800a834:	4630      	mov	r0, r6
 800a836:	47c0      	blx	r8
 800a838:	4307      	orrs	r7, r0
 800a83a:	3568      	adds	r5, #104	; 0x68
 800a83c:	e7e9      	b.n	800a812 <_fwalk_reent+0x12>

0800a83e <__retarget_lock_init_recursive>:
 800a83e:	4770      	bx	lr

0800a840 <__retarget_lock_acquire_recursive>:
 800a840:	4770      	bx	lr

0800a842 <__retarget_lock_release_recursive>:
 800a842:	4770      	bx	lr

0800a844 <__swhatbuf_r>:
 800a844:	b570      	push	{r4, r5, r6, lr}
 800a846:	460e      	mov	r6, r1
 800a848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a84c:	2900      	cmp	r1, #0
 800a84e:	b096      	sub	sp, #88	; 0x58
 800a850:	4614      	mov	r4, r2
 800a852:	461d      	mov	r5, r3
 800a854:	da07      	bge.n	800a866 <__swhatbuf_r+0x22>
 800a856:	2300      	movs	r3, #0
 800a858:	602b      	str	r3, [r5, #0]
 800a85a:	89b3      	ldrh	r3, [r6, #12]
 800a85c:	061a      	lsls	r2, r3, #24
 800a85e:	d410      	bmi.n	800a882 <__swhatbuf_r+0x3e>
 800a860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a864:	e00e      	b.n	800a884 <__swhatbuf_r+0x40>
 800a866:	466a      	mov	r2, sp
 800a868:	f000 f902 	bl	800aa70 <_fstat_r>
 800a86c:	2800      	cmp	r0, #0
 800a86e:	dbf2      	blt.n	800a856 <__swhatbuf_r+0x12>
 800a870:	9a01      	ldr	r2, [sp, #4]
 800a872:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a876:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a87a:	425a      	negs	r2, r3
 800a87c:	415a      	adcs	r2, r3
 800a87e:	602a      	str	r2, [r5, #0]
 800a880:	e7ee      	b.n	800a860 <__swhatbuf_r+0x1c>
 800a882:	2340      	movs	r3, #64	; 0x40
 800a884:	2000      	movs	r0, #0
 800a886:	6023      	str	r3, [r4, #0]
 800a888:	b016      	add	sp, #88	; 0x58
 800a88a:	bd70      	pop	{r4, r5, r6, pc}

0800a88c <__smakebuf_r>:
 800a88c:	898b      	ldrh	r3, [r1, #12]
 800a88e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a890:	079d      	lsls	r5, r3, #30
 800a892:	4606      	mov	r6, r0
 800a894:	460c      	mov	r4, r1
 800a896:	d507      	bpl.n	800a8a8 <__smakebuf_r+0x1c>
 800a898:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a89c:	6023      	str	r3, [r4, #0]
 800a89e:	6123      	str	r3, [r4, #16]
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	6163      	str	r3, [r4, #20]
 800a8a4:	b002      	add	sp, #8
 800a8a6:	bd70      	pop	{r4, r5, r6, pc}
 800a8a8:	ab01      	add	r3, sp, #4
 800a8aa:	466a      	mov	r2, sp
 800a8ac:	f7ff ffca 	bl	800a844 <__swhatbuf_r>
 800a8b0:	9900      	ldr	r1, [sp, #0]
 800a8b2:	4605      	mov	r5, r0
 800a8b4:	4630      	mov	r0, r6
 800a8b6:	f7ff f987 	bl	8009bc8 <_malloc_r>
 800a8ba:	b948      	cbnz	r0, 800a8d0 <__smakebuf_r+0x44>
 800a8bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8c0:	059a      	lsls	r2, r3, #22
 800a8c2:	d4ef      	bmi.n	800a8a4 <__smakebuf_r+0x18>
 800a8c4:	f023 0303 	bic.w	r3, r3, #3
 800a8c8:	f043 0302 	orr.w	r3, r3, #2
 800a8cc:	81a3      	strh	r3, [r4, #12]
 800a8ce:	e7e3      	b.n	800a898 <__smakebuf_r+0xc>
 800a8d0:	4b0d      	ldr	r3, [pc, #52]	; (800a908 <__smakebuf_r+0x7c>)
 800a8d2:	62b3      	str	r3, [r6, #40]	; 0x28
 800a8d4:	89a3      	ldrh	r3, [r4, #12]
 800a8d6:	6020      	str	r0, [r4, #0]
 800a8d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8dc:	81a3      	strh	r3, [r4, #12]
 800a8de:	9b00      	ldr	r3, [sp, #0]
 800a8e0:	6163      	str	r3, [r4, #20]
 800a8e2:	9b01      	ldr	r3, [sp, #4]
 800a8e4:	6120      	str	r0, [r4, #16]
 800a8e6:	b15b      	cbz	r3, 800a900 <__smakebuf_r+0x74>
 800a8e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8ec:	4630      	mov	r0, r6
 800a8ee:	f000 f8d1 	bl	800aa94 <_isatty_r>
 800a8f2:	b128      	cbz	r0, 800a900 <__smakebuf_r+0x74>
 800a8f4:	89a3      	ldrh	r3, [r4, #12]
 800a8f6:	f023 0303 	bic.w	r3, r3, #3
 800a8fa:	f043 0301 	orr.w	r3, r3, #1
 800a8fe:	81a3      	strh	r3, [r4, #12]
 800a900:	89a0      	ldrh	r0, [r4, #12]
 800a902:	4305      	orrs	r5, r0
 800a904:	81a5      	strh	r5, [r4, #12]
 800a906:	e7cd      	b.n	800a8a4 <__smakebuf_r+0x18>
 800a908:	0800a69d 	.word	0x0800a69d

0800a90c <_malloc_usable_size_r>:
 800a90c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a910:	1f18      	subs	r0, r3, #4
 800a912:	2b00      	cmp	r3, #0
 800a914:	bfbc      	itt	lt
 800a916:	580b      	ldrlt	r3, [r1, r0]
 800a918:	18c0      	addlt	r0, r0, r3
 800a91a:	4770      	bx	lr

0800a91c <_raise_r>:
 800a91c:	291f      	cmp	r1, #31
 800a91e:	b538      	push	{r3, r4, r5, lr}
 800a920:	4604      	mov	r4, r0
 800a922:	460d      	mov	r5, r1
 800a924:	d904      	bls.n	800a930 <_raise_r+0x14>
 800a926:	2316      	movs	r3, #22
 800a928:	6003      	str	r3, [r0, #0]
 800a92a:	f04f 30ff 	mov.w	r0, #4294967295
 800a92e:	bd38      	pop	{r3, r4, r5, pc}
 800a930:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a932:	b112      	cbz	r2, 800a93a <_raise_r+0x1e>
 800a934:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a938:	b94b      	cbnz	r3, 800a94e <_raise_r+0x32>
 800a93a:	4620      	mov	r0, r4
 800a93c:	f000 f830 	bl	800a9a0 <_getpid_r>
 800a940:	462a      	mov	r2, r5
 800a942:	4601      	mov	r1, r0
 800a944:	4620      	mov	r0, r4
 800a946:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a94a:	f000 b817 	b.w	800a97c <_kill_r>
 800a94e:	2b01      	cmp	r3, #1
 800a950:	d00a      	beq.n	800a968 <_raise_r+0x4c>
 800a952:	1c59      	adds	r1, r3, #1
 800a954:	d103      	bne.n	800a95e <_raise_r+0x42>
 800a956:	2316      	movs	r3, #22
 800a958:	6003      	str	r3, [r0, #0]
 800a95a:	2001      	movs	r0, #1
 800a95c:	e7e7      	b.n	800a92e <_raise_r+0x12>
 800a95e:	2400      	movs	r4, #0
 800a960:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a964:	4628      	mov	r0, r5
 800a966:	4798      	blx	r3
 800a968:	2000      	movs	r0, #0
 800a96a:	e7e0      	b.n	800a92e <_raise_r+0x12>

0800a96c <raise>:
 800a96c:	4b02      	ldr	r3, [pc, #8]	; (800a978 <raise+0xc>)
 800a96e:	4601      	mov	r1, r0
 800a970:	6818      	ldr	r0, [r3, #0]
 800a972:	f7ff bfd3 	b.w	800a91c <_raise_r>
 800a976:	bf00      	nop
 800a978:	2000000c 	.word	0x2000000c

0800a97c <_kill_r>:
 800a97c:	b538      	push	{r3, r4, r5, lr}
 800a97e:	4d07      	ldr	r5, [pc, #28]	; (800a99c <_kill_r+0x20>)
 800a980:	2300      	movs	r3, #0
 800a982:	4604      	mov	r4, r0
 800a984:	4608      	mov	r0, r1
 800a986:	4611      	mov	r1, r2
 800a988:	602b      	str	r3, [r5, #0]
 800a98a:	f7f7 ff93 	bl	80028b4 <_kill>
 800a98e:	1c43      	adds	r3, r0, #1
 800a990:	d102      	bne.n	800a998 <_kill_r+0x1c>
 800a992:	682b      	ldr	r3, [r5, #0]
 800a994:	b103      	cbz	r3, 800a998 <_kill_r+0x1c>
 800a996:	6023      	str	r3, [r4, #0]
 800a998:	bd38      	pop	{r3, r4, r5, pc}
 800a99a:	bf00      	nop
 800a99c:	200004d0 	.word	0x200004d0

0800a9a0 <_getpid_r>:
 800a9a0:	f7f7 bf80 	b.w	80028a4 <_getpid>

0800a9a4 <__sread>:
 800a9a4:	b510      	push	{r4, lr}
 800a9a6:	460c      	mov	r4, r1
 800a9a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9ac:	f000 f894 	bl	800aad8 <_read_r>
 800a9b0:	2800      	cmp	r0, #0
 800a9b2:	bfab      	itete	ge
 800a9b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a9b6:	89a3      	ldrhlt	r3, [r4, #12]
 800a9b8:	181b      	addge	r3, r3, r0
 800a9ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a9be:	bfac      	ite	ge
 800a9c0:	6563      	strge	r3, [r4, #84]	; 0x54
 800a9c2:	81a3      	strhlt	r3, [r4, #12]
 800a9c4:	bd10      	pop	{r4, pc}

0800a9c6 <__swrite>:
 800a9c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9ca:	461f      	mov	r7, r3
 800a9cc:	898b      	ldrh	r3, [r1, #12]
 800a9ce:	05db      	lsls	r3, r3, #23
 800a9d0:	4605      	mov	r5, r0
 800a9d2:	460c      	mov	r4, r1
 800a9d4:	4616      	mov	r6, r2
 800a9d6:	d505      	bpl.n	800a9e4 <__swrite+0x1e>
 800a9d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9dc:	2302      	movs	r3, #2
 800a9de:	2200      	movs	r2, #0
 800a9e0:	f000 f868 	bl	800aab4 <_lseek_r>
 800a9e4:	89a3      	ldrh	r3, [r4, #12]
 800a9e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a9ee:	81a3      	strh	r3, [r4, #12]
 800a9f0:	4632      	mov	r2, r6
 800a9f2:	463b      	mov	r3, r7
 800a9f4:	4628      	mov	r0, r5
 800a9f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9fa:	f000 b817 	b.w	800aa2c <_write_r>

0800a9fe <__sseek>:
 800a9fe:	b510      	push	{r4, lr}
 800aa00:	460c      	mov	r4, r1
 800aa02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa06:	f000 f855 	bl	800aab4 <_lseek_r>
 800aa0a:	1c43      	adds	r3, r0, #1
 800aa0c:	89a3      	ldrh	r3, [r4, #12]
 800aa0e:	bf15      	itete	ne
 800aa10:	6560      	strne	r0, [r4, #84]	; 0x54
 800aa12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aa16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aa1a:	81a3      	strheq	r3, [r4, #12]
 800aa1c:	bf18      	it	ne
 800aa1e:	81a3      	strhne	r3, [r4, #12]
 800aa20:	bd10      	pop	{r4, pc}

0800aa22 <__sclose>:
 800aa22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa26:	f000 b813 	b.w	800aa50 <_close_r>
	...

0800aa2c <_write_r>:
 800aa2c:	b538      	push	{r3, r4, r5, lr}
 800aa2e:	4d07      	ldr	r5, [pc, #28]	; (800aa4c <_write_r+0x20>)
 800aa30:	4604      	mov	r4, r0
 800aa32:	4608      	mov	r0, r1
 800aa34:	4611      	mov	r1, r2
 800aa36:	2200      	movs	r2, #0
 800aa38:	602a      	str	r2, [r5, #0]
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	f7f7 ff71 	bl	8002922 <_write>
 800aa40:	1c43      	adds	r3, r0, #1
 800aa42:	d102      	bne.n	800aa4a <_write_r+0x1e>
 800aa44:	682b      	ldr	r3, [r5, #0]
 800aa46:	b103      	cbz	r3, 800aa4a <_write_r+0x1e>
 800aa48:	6023      	str	r3, [r4, #0]
 800aa4a:	bd38      	pop	{r3, r4, r5, pc}
 800aa4c:	200004d0 	.word	0x200004d0

0800aa50 <_close_r>:
 800aa50:	b538      	push	{r3, r4, r5, lr}
 800aa52:	4d06      	ldr	r5, [pc, #24]	; (800aa6c <_close_r+0x1c>)
 800aa54:	2300      	movs	r3, #0
 800aa56:	4604      	mov	r4, r0
 800aa58:	4608      	mov	r0, r1
 800aa5a:	602b      	str	r3, [r5, #0]
 800aa5c:	f7f7 ff7d 	bl	800295a <_close>
 800aa60:	1c43      	adds	r3, r0, #1
 800aa62:	d102      	bne.n	800aa6a <_close_r+0x1a>
 800aa64:	682b      	ldr	r3, [r5, #0]
 800aa66:	b103      	cbz	r3, 800aa6a <_close_r+0x1a>
 800aa68:	6023      	str	r3, [r4, #0]
 800aa6a:	bd38      	pop	{r3, r4, r5, pc}
 800aa6c:	200004d0 	.word	0x200004d0

0800aa70 <_fstat_r>:
 800aa70:	b538      	push	{r3, r4, r5, lr}
 800aa72:	4d07      	ldr	r5, [pc, #28]	; (800aa90 <_fstat_r+0x20>)
 800aa74:	2300      	movs	r3, #0
 800aa76:	4604      	mov	r4, r0
 800aa78:	4608      	mov	r0, r1
 800aa7a:	4611      	mov	r1, r2
 800aa7c:	602b      	str	r3, [r5, #0]
 800aa7e:	f7f7 ff78 	bl	8002972 <_fstat>
 800aa82:	1c43      	adds	r3, r0, #1
 800aa84:	d102      	bne.n	800aa8c <_fstat_r+0x1c>
 800aa86:	682b      	ldr	r3, [r5, #0]
 800aa88:	b103      	cbz	r3, 800aa8c <_fstat_r+0x1c>
 800aa8a:	6023      	str	r3, [r4, #0]
 800aa8c:	bd38      	pop	{r3, r4, r5, pc}
 800aa8e:	bf00      	nop
 800aa90:	200004d0 	.word	0x200004d0

0800aa94 <_isatty_r>:
 800aa94:	b538      	push	{r3, r4, r5, lr}
 800aa96:	4d06      	ldr	r5, [pc, #24]	; (800aab0 <_isatty_r+0x1c>)
 800aa98:	2300      	movs	r3, #0
 800aa9a:	4604      	mov	r4, r0
 800aa9c:	4608      	mov	r0, r1
 800aa9e:	602b      	str	r3, [r5, #0]
 800aaa0:	f7f7 ff77 	bl	8002992 <_isatty>
 800aaa4:	1c43      	adds	r3, r0, #1
 800aaa6:	d102      	bne.n	800aaae <_isatty_r+0x1a>
 800aaa8:	682b      	ldr	r3, [r5, #0]
 800aaaa:	b103      	cbz	r3, 800aaae <_isatty_r+0x1a>
 800aaac:	6023      	str	r3, [r4, #0]
 800aaae:	bd38      	pop	{r3, r4, r5, pc}
 800aab0:	200004d0 	.word	0x200004d0

0800aab4 <_lseek_r>:
 800aab4:	b538      	push	{r3, r4, r5, lr}
 800aab6:	4d07      	ldr	r5, [pc, #28]	; (800aad4 <_lseek_r+0x20>)
 800aab8:	4604      	mov	r4, r0
 800aaba:	4608      	mov	r0, r1
 800aabc:	4611      	mov	r1, r2
 800aabe:	2200      	movs	r2, #0
 800aac0:	602a      	str	r2, [r5, #0]
 800aac2:	461a      	mov	r2, r3
 800aac4:	f7f7 ff70 	bl	80029a8 <_lseek>
 800aac8:	1c43      	adds	r3, r0, #1
 800aaca:	d102      	bne.n	800aad2 <_lseek_r+0x1e>
 800aacc:	682b      	ldr	r3, [r5, #0]
 800aace:	b103      	cbz	r3, 800aad2 <_lseek_r+0x1e>
 800aad0:	6023      	str	r3, [r4, #0]
 800aad2:	bd38      	pop	{r3, r4, r5, pc}
 800aad4:	200004d0 	.word	0x200004d0

0800aad8 <_read_r>:
 800aad8:	b538      	push	{r3, r4, r5, lr}
 800aada:	4d07      	ldr	r5, [pc, #28]	; (800aaf8 <_read_r+0x20>)
 800aadc:	4604      	mov	r4, r0
 800aade:	4608      	mov	r0, r1
 800aae0:	4611      	mov	r1, r2
 800aae2:	2200      	movs	r2, #0
 800aae4:	602a      	str	r2, [r5, #0]
 800aae6:	461a      	mov	r2, r3
 800aae8:	f7f7 fefe 	bl	80028e8 <_read>
 800aaec:	1c43      	adds	r3, r0, #1
 800aaee:	d102      	bne.n	800aaf6 <_read_r+0x1e>
 800aaf0:	682b      	ldr	r3, [r5, #0]
 800aaf2:	b103      	cbz	r3, 800aaf6 <_read_r+0x1e>
 800aaf4:	6023      	str	r3, [r4, #0]
 800aaf6:	bd38      	pop	{r3, r4, r5, pc}
 800aaf8:	200004d0 	.word	0x200004d0

0800aafc <atan2>:
 800aafc:	f000 b800 	b.w	800ab00 <__ieee754_atan2>

0800ab00 <__ieee754_atan2>:
 800ab00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab04:	ec57 6b11 	vmov	r6, r7, d1
 800ab08:	4273      	negs	r3, r6
 800ab0a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800ac90 <__ieee754_atan2+0x190>
 800ab0e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800ab12:	4333      	orrs	r3, r6
 800ab14:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ab18:	4573      	cmp	r3, lr
 800ab1a:	ec51 0b10 	vmov	r0, r1, d0
 800ab1e:	ee11 8a10 	vmov	r8, s2
 800ab22:	d80a      	bhi.n	800ab3a <__ieee754_atan2+0x3a>
 800ab24:	4244      	negs	r4, r0
 800ab26:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ab2a:	4304      	orrs	r4, r0
 800ab2c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800ab30:	4574      	cmp	r4, lr
 800ab32:	ee10 9a10 	vmov	r9, s0
 800ab36:	468c      	mov	ip, r1
 800ab38:	d907      	bls.n	800ab4a <__ieee754_atan2+0x4a>
 800ab3a:	4632      	mov	r2, r6
 800ab3c:	463b      	mov	r3, r7
 800ab3e:	f7f5 fbad 	bl	800029c <__adddf3>
 800ab42:	ec41 0b10 	vmov	d0, r0, r1
 800ab46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab4a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800ab4e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ab52:	4334      	orrs	r4, r6
 800ab54:	d103      	bne.n	800ab5e <__ieee754_atan2+0x5e>
 800ab56:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab5a:	f000 b89d 	b.w	800ac98 <atan>
 800ab5e:	17bc      	asrs	r4, r7, #30
 800ab60:	f004 0402 	and.w	r4, r4, #2
 800ab64:	ea53 0909 	orrs.w	r9, r3, r9
 800ab68:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800ab6c:	d107      	bne.n	800ab7e <__ieee754_atan2+0x7e>
 800ab6e:	2c02      	cmp	r4, #2
 800ab70:	d060      	beq.n	800ac34 <__ieee754_atan2+0x134>
 800ab72:	2c03      	cmp	r4, #3
 800ab74:	d1e5      	bne.n	800ab42 <__ieee754_atan2+0x42>
 800ab76:	a142      	add	r1, pc, #264	; (adr r1, 800ac80 <__ieee754_atan2+0x180>)
 800ab78:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab7c:	e7e1      	b.n	800ab42 <__ieee754_atan2+0x42>
 800ab7e:	ea52 0808 	orrs.w	r8, r2, r8
 800ab82:	d106      	bne.n	800ab92 <__ieee754_atan2+0x92>
 800ab84:	f1bc 0f00 	cmp.w	ip, #0
 800ab88:	da5f      	bge.n	800ac4a <__ieee754_atan2+0x14a>
 800ab8a:	a13f      	add	r1, pc, #252	; (adr r1, 800ac88 <__ieee754_atan2+0x188>)
 800ab8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab90:	e7d7      	b.n	800ab42 <__ieee754_atan2+0x42>
 800ab92:	4572      	cmp	r2, lr
 800ab94:	d10f      	bne.n	800abb6 <__ieee754_atan2+0xb6>
 800ab96:	4293      	cmp	r3, r2
 800ab98:	f104 34ff 	add.w	r4, r4, #4294967295
 800ab9c:	d107      	bne.n	800abae <__ieee754_atan2+0xae>
 800ab9e:	2c02      	cmp	r4, #2
 800aba0:	d84c      	bhi.n	800ac3c <__ieee754_atan2+0x13c>
 800aba2:	4b35      	ldr	r3, [pc, #212]	; (800ac78 <__ieee754_atan2+0x178>)
 800aba4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800aba8:	e9d4 0100 	ldrd	r0, r1, [r4]
 800abac:	e7c9      	b.n	800ab42 <__ieee754_atan2+0x42>
 800abae:	2c02      	cmp	r4, #2
 800abb0:	d848      	bhi.n	800ac44 <__ieee754_atan2+0x144>
 800abb2:	4b32      	ldr	r3, [pc, #200]	; (800ac7c <__ieee754_atan2+0x17c>)
 800abb4:	e7f6      	b.n	800aba4 <__ieee754_atan2+0xa4>
 800abb6:	4573      	cmp	r3, lr
 800abb8:	d0e4      	beq.n	800ab84 <__ieee754_atan2+0x84>
 800abba:	1a9b      	subs	r3, r3, r2
 800abbc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800abc0:	ea4f 5223 	mov.w	r2, r3, asr #20
 800abc4:	da1e      	bge.n	800ac04 <__ieee754_atan2+0x104>
 800abc6:	2f00      	cmp	r7, #0
 800abc8:	da01      	bge.n	800abce <__ieee754_atan2+0xce>
 800abca:	323c      	adds	r2, #60	; 0x3c
 800abcc:	db1e      	blt.n	800ac0c <__ieee754_atan2+0x10c>
 800abce:	4632      	mov	r2, r6
 800abd0:	463b      	mov	r3, r7
 800abd2:	f7f5 fe43 	bl	800085c <__aeabi_ddiv>
 800abd6:	ec41 0b10 	vmov	d0, r0, r1
 800abda:	f000 f9fd 	bl	800afd8 <fabs>
 800abde:	f000 f85b 	bl	800ac98 <atan>
 800abe2:	ec51 0b10 	vmov	r0, r1, d0
 800abe6:	2c01      	cmp	r4, #1
 800abe8:	d013      	beq.n	800ac12 <__ieee754_atan2+0x112>
 800abea:	2c02      	cmp	r4, #2
 800abec:	d015      	beq.n	800ac1a <__ieee754_atan2+0x11a>
 800abee:	2c00      	cmp	r4, #0
 800abf0:	d0a7      	beq.n	800ab42 <__ieee754_atan2+0x42>
 800abf2:	a319      	add	r3, pc, #100	; (adr r3, 800ac58 <__ieee754_atan2+0x158>)
 800abf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf8:	f7f5 fb4e 	bl	8000298 <__aeabi_dsub>
 800abfc:	a318      	add	r3, pc, #96	; (adr r3, 800ac60 <__ieee754_atan2+0x160>)
 800abfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac02:	e014      	b.n	800ac2e <__ieee754_atan2+0x12e>
 800ac04:	a118      	add	r1, pc, #96	; (adr r1, 800ac68 <__ieee754_atan2+0x168>)
 800ac06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac0a:	e7ec      	b.n	800abe6 <__ieee754_atan2+0xe6>
 800ac0c:	2000      	movs	r0, #0
 800ac0e:	2100      	movs	r1, #0
 800ac10:	e7e9      	b.n	800abe6 <__ieee754_atan2+0xe6>
 800ac12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac16:	4619      	mov	r1, r3
 800ac18:	e793      	b.n	800ab42 <__ieee754_atan2+0x42>
 800ac1a:	a30f      	add	r3, pc, #60	; (adr r3, 800ac58 <__ieee754_atan2+0x158>)
 800ac1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac20:	f7f5 fb3a 	bl	8000298 <__aeabi_dsub>
 800ac24:	4602      	mov	r2, r0
 800ac26:	460b      	mov	r3, r1
 800ac28:	a10d      	add	r1, pc, #52	; (adr r1, 800ac60 <__ieee754_atan2+0x160>)
 800ac2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac2e:	f7f5 fb33 	bl	8000298 <__aeabi_dsub>
 800ac32:	e786      	b.n	800ab42 <__ieee754_atan2+0x42>
 800ac34:	a10a      	add	r1, pc, #40	; (adr r1, 800ac60 <__ieee754_atan2+0x160>)
 800ac36:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac3a:	e782      	b.n	800ab42 <__ieee754_atan2+0x42>
 800ac3c:	a10c      	add	r1, pc, #48	; (adr r1, 800ac70 <__ieee754_atan2+0x170>)
 800ac3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac42:	e77e      	b.n	800ab42 <__ieee754_atan2+0x42>
 800ac44:	2000      	movs	r0, #0
 800ac46:	2100      	movs	r1, #0
 800ac48:	e77b      	b.n	800ab42 <__ieee754_atan2+0x42>
 800ac4a:	a107      	add	r1, pc, #28	; (adr r1, 800ac68 <__ieee754_atan2+0x168>)
 800ac4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac50:	e777      	b.n	800ab42 <__ieee754_atan2+0x42>
 800ac52:	bf00      	nop
 800ac54:	f3af 8000 	nop.w
 800ac58:	33145c07 	.word	0x33145c07
 800ac5c:	3ca1a626 	.word	0x3ca1a626
 800ac60:	54442d18 	.word	0x54442d18
 800ac64:	400921fb 	.word	0x400921fb
 800ac68:	54442d18 	.word	0x54442d18
 800ac6c:	3ff921fb 	.word	0x3ff921fb
 800ac70:	54442d18 	.word	0x54442d18
 800ac74:	3fe921fb 	.word	0x3fe921fb
 800ac78:	0800b448 	.word	0x0800b448
 800ac7c:	0800b460 	.word	0x0800b460
 800ac80:	54442d18 	.word	0x54442d18
 800ac84:	c00921fb 	.word	0xc00921fb
 800ac88:	54442d18 	.word	0x54442d18
 800ac8c:	bff921fb 	.word	0xbff921fb
 800ac90:	7ff00000 	.word	0x7ff00000
 800ac94:	00000000 	.word	0x00000000

0800ac98 <atan>:
 800ac98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac9c:	ec55 4b10 	vmov	r4, r5, d0
 800aca0:	4bc3      	ldr	r3, [pc, #780]	; (800afb0 <atan+0x318>)
 800aca2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800aca6:	429e      	cmp	r6, r3
 800aca8:	46ab      	mov	fp, r5
 800acaa:	dd18      	ble.n	800acde <atan+0x46>
 800acac:	4bc1      	ldr	r3, [pc, #772]	; (800afb4 <atan+0x31c>)
 800acae:	429e      	cmp	r6, r3
 800acb0:	dc01      	bgt.n	800acb6 <atan+0x1e>
 800acb2:	d109      	bne.n	800acc8 <atan+0x30>
 800acb4:	b144      	cbz	r4, 800acc8 <atan+0x30>
 800acb6:	4622      	mov	r2, r4
 800acb8:	462b      	mov	r3, r5
 800acba:	4620      	mov	r0, r4
 800acbc:	4629      	mov	r1, r5
 800acbe:	f7f5 faed 	bl	800029c <__adddf3>
 800acc2:	4604      	mov	r4, r0
 800acc4:	460d      	mov	r5, r1
 800acc6:	e006      	b.n	800acd6 <atan+0x3e>
 800acc8:	f1bb 0f00 	cmp.w	fp, #0
 800accc:	f300 8131 	bgt.w	800af32 <atan+0x29a>
 800acd0:	a59b      	add	r5, pc, #620	; (adr r5, 800af40 <atan+0x2a8>)
 800acd2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800acd6:	ec45 4b10 	vmov	d0, r4, r5
 800acda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acde:	4bb6      	ldr	r3, [pc, #728]	; (800afb8 <atan+0x320>)
 800ace0:	429e      	cmp	r6, r3
 800ace2:	dc14      	bgt.n	800ad0e <atan+0x76>
 800ace4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800ace8:	429e      	cmp	r6, r3
 800acea:	dc0d      	bgt.n	800ad08 <atan+0x70>
 800acec:	a396      	add	r3, pc, #600	; (adr r3, 800af48 <atan+0x2b0>)
 800acee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf2:	ee10 0a10 	vmov	r0, s0
 800acf6:	4629      	mov	r1, r5
 800acf8:	f7f5 fad0 	bl	800029c <__adddf3>
 800acfc:	4baf      	ldr	r3, [pc, #700]	; (800afbc <atan+0x324>)
 800acfe:	2200      	movs	r2, #0
 800ad00:	f7f5 ff12 	bl	8000b28 <__aeabi_dcmpgt>
 800ad04:	2800      	cmp	r0, #0
 800ad06:	d1e6      	bne.n	800acd6 <atan+0x3e>
 800ad08:	f04f 3aff 	mov.w	sl, #4294967295
 800ad0c:	e02b      	b.n	800ad66 <atan+0xce>
 800ad0e:	f000 f963 	bl	800afd8 <fabs>
 800ad12:	4bab      	ldr	r3, [pc, #684]	; (800afc0 <atan+0x328>)
 800ad14:	429e      	cmp	r6, r3
 800ad16:	ec55 4b10 	vmov	r4, r5, d0
 800ad1a:	f300 80bf 	bgt.w	800ae9c <atan+0x204>
 800ad1e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800ad22:	429e      	cmp	r6, r3
 800ad24:	f300 80a0 	bgt.w	800ae68 <atan+0x1d0>
 800ad28:	ee10 2a10 	vmov	r2, s0
 800ad2c:	ee10 0a10 	vmov	r0, s0
 800ad30:	462b      	mov	r3, r5
 800ad32:	4629      	mov	r1, r5
 800ad34:	f7f5 fab2 	bl	800029c <__adddf3>
 800ad38:	4ba0      	ldr	r3, [pc, #640]	; (800afbc <atan+0x324>)
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	f7f5 faac 	bl	8000298 <__aeabi_dsub>
 800ad40:	2200      	movs	r2, #0
 800ad42:	4606      	mov	r6, r0
 800ad44:	460f      	mov	r7, r1
 800ad46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ad4a:	4620      	mov	r0, r4
 800ad4c:	4629      	mov	r1, r5
 800ad4e:	f7f5 faa5 	bl	800029c <__adddf3>
 800ad52:	4602      	mov	r2, r0
 800ad54:	460b      	mov	r3, r1
 800ad56:	4630      	mov	r0, r6
 800ad58:	4639      	mov	r1, r7
 800ad5a:	f7f5 fd7f 	bl	800085c <__aeabi_ddiv>
 800ad5e:	f04f 0a00 	mov.w	sl, #0
 800ad62:	4604      	mov	r4, r0
 800ad64:	460d      	mov	r5, r1
 800ad66:	4622      	mov	r2, r4
 800ad68:	462b      	mov	r3, r5
 800ad6a:	4620      	mov	r0, r4
 800ad6c:	4629      	mov	r1, r5
 800ad6e:	f7f5 fc4b 	bl	8000608 <__aeabi_dmul>
 800ad72:	4602      	mov	r2, r0
 800ad74:	460b      	mov	r3, r1
 800ad76:	4680      	mov	r8, r0
 800ad78:	4689      	mov	r9, r1
 800ad7a:	f7f5 fc45 	bl	8000608 <__aeabi_dmul>
 800ad7e:	a374      	add	r3, pc, #464	; (adr r3, 800af50 <atan+0x2b8>)
 800ad80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad84:	4606      	mov	r6, r0
 800ad86:	460f      	mov	r7, r1
 800ad88:	f7f5 fc3e 	bl	8000608 <__aeabi_dmul>
 800ad8c:	a372      	add	r3, pc, #456	; (adr r3, 800af58 <atan+0x2c0>)
 800ad8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad92:	f7f5 fa83 	bl	800029c <__adddf3>
 800ad96:	4632      	mov	r2, r6
 800ad98:	463b      	mov	r3, r7
 800ad9a:	f7f5 fc35 	bl	8000608 <__aeabi_dmul>
 800ad9e:	a370      	add	r3, pc, #448	; (adr r3, 800af60 <atan+0x2c8>)
 800ada0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada4:	f7f5 fa7a 	bl	800029c <__adddf3>
 800ada8:	4632      	mov	r2, r6
 800adaa:	463b      	mov	r3, r7
 800adac:	f7f5 fc2c 	bl	8000608 <__aeabi_dmul>
 800adb0:	a36d      	add	r3, pc, #436	; (adr r3, 800af68 <atan+0x2d0>)
 800adb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb6:	f7f5 fa71 	bl	800029c <__adddf3>
 800adba:	4632      	mov	r2, r6
 800adbc:	463b      	mov	r3, r7
 800adbe:	f7f5 fc23 	bl	8000608 <__aeabi_dmul>
 800adc2:	a36b      	add	r3, pc, #428	; (adr r3, 800af70 <atan+0x2d8>)
 800adc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc8:	f7f5 fa68 	bl	800029c <__adddf3>
 800adcc:	4632      	mov	r2, r6
 800adce:	463b      	mov	r3, r7
 800add0:	f7f5 fc1a 	bl	8000608 <__aeabi_dmul>
 800add4:	a368      	add	r3, pc, #416	; (adr r3, 800af78 <atan+0x2e0>)
 800add6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adda:	f7f5 fa5f 	bl	800029c <__adddf3>
 800adde:	4642      	mov	r2, r8
 800ade0:	464b      	mov	r3, r9
 800ade2:	f7f5 fc11 	bl	8000608 <__aeabi_dmul>
 800ade6:	a366      	add	r3, pc, #408	; (adr r3, 800af80 <atan+0x2e8>)
 800ade8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adec:	4680      	mov	r8, r0
 800adee:	4689      	mov	r9, r1
 800adf0:	4630      	mov	r0, r6
 800adf2:	4639      	mov	r1, r7
 800adf4:	f7f5 fc08 	bl	8000608 <__aeabi_dmul>
 800adf8:	a363      	add	r3, pc, #396	; (adr r3, 800af88 <atan+0x2f0>)
 800adfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adfe:	f7f5 fa4b 	bl	8000298 <__aeabi_dsub>
 800ae02:	4632      	mov	r2, r6
 800ae04:	463b      	mov	r3, r7
 800ae06:	f7f5 fbff 	bl	8000608 <__aeabi_dmul>
 800ae0a:	a361      	add	r3, pc, #388	; (adr r3, 800af90 <atan+0x2f8>)
 800ae0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae10:	f7f5 fa42 	bl	8000298 <__aeabi_dsub>
 800ae14:	4632      	mov	r2, r6
 800ae16:	463b      	mov	r3, r7
 800ae18:	f7f5 fbf6 	bl	8000608 <__aeabi_dmul>
 800ae1c:	a35e      	add	r3, pc, #376	; (adr r3, 800af98 <atan+0x300>)
 800ae1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae22:	f7f5 fa39 	bl	8000298 <__aeabi_dsub>
 800ae26:	4632      	mov	r2, r6
 800ae28:	463b      	mov	r3, r7
 800ae2a:	f7f5 fbed 	bl	8000608 <__aeabi_dmul>
 800ae2e:	a35c      	add	r3, pc, #368	; (adr r3, 800afa0 <atan+0x308>)
 800ae30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae34:	f7f5 fa30 	bl	8000298 <__aeabi_dsub>
 800ae38:	4632      	mov	r2, r6
 800ae3a:	463b      	mov	r3, r7
 800ae3c:	f7f5 fbe4 	bl	8000608 <__aeabi_dmul>
 800ae40:	4602      	mov	r2, r0
 800ae42:	460b      	mov	r3, r1
 800ae44:	4640      	mov	r0, r8
 800ae46:	4649      	mov	r1, r9
 800ae48:	f7f5 fa28 	bl	800029c <__adddf3>
 800ae4c:	4622      	mov	r2, r4
 800ae4e:	462b      	mov	r3, r5
 800ae50:	f7f5 fbda 	bl	8000608 <__aeabi_dmul>
 800ae54:	f1ba 3fff 	cmp.w	sl, #4294967295
 800ae58:	4602      	mov	r2, r0
 800ae5a:	460b      	mov	r3, r1
 800ae5c:	d14b      	bne.n	800aef6 <atan+0x25e>
 800ae5e:	4620      	mov	r0, r4
 800ae60:	4629      	mov	r1, r5
 800ae62:	f7f5 fa19 	bl	8000298 <__aeabi_dsub>
 800ae66:	e72c      	b.n	800acc2 <atan+0x2a>
 800ae68:	ee10 0a10 	vmov	r0, s0
 800ae6c:	4b53      	ldr	r3, [pc, #332]	; (800afbc <atan+0x324>)
 800ae6e:	2200      	movs	r2, #0
 800ae70:	4629      	mov	r1, r5
 800ae72:	f7f5 fa11 	bl	8000298 <__aeabi_dsub>
 800ae76:	4b51      	ldr	r3, [pc, #324]	; (800afbc <atan+0x324>)
 800ae78:	4606      	mov	r6, r0
 800ae7a:	460f      	mov	r7, r1
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	4620      	mov	r0, r4
 800ae80:	4629      	mov	r1, r5
 800ae82:	f7f5 fa0b 	bl	800029c <__adddf3>
 800ae86:	4602      	mov	r2, r0
 800ae88:	460b      	mov	r3, r1
 800ae8a:	4630      	mov	r0, r6
 800ae8c:	4639      	mov	r1, r7
 800ae8e:	f7f5 fce5 	bl	800085c <__aeabi_ddiv>
 800ae92:	f04f 0a01 	mov.w	sl, #1
 800ae96:	4604      	mov	r4, r0
 800ae98:	460d      	mov	r5, r1
 800ae9a:	e764      	b.n	800ad66 <atan+0xce>
 800ae9c:	4b49      	ldr	r3, [pc, #292]	; (800afc4 <atan+0x32c>)
 800ae9e:	429e      	cmp	r6, r3
 800aea0:	da1d      	bge.n	800aede <atan+0x246>
 800aea2:	ee10 0a10 	vmov	r0, s0
 800aea6:	4b48      	ldr	r3, [pc, #288]	; (800afc8 <atan+0x330>)
 800aea8:	2200      	movs	r2, #0
 800aeaa:	4629      	mov	r1, r5
 800aeac:	f7f5 f9f4 	bl	8000298 <__aeabi_dsub>
 800aeb0:	4b45      	ldr	r3, [pc, #276]	; (800afc8 <atan+0x330>)
 800aeb2:	4606      	mov	r6, r0
 800aeb4:	460f      	mov	r7, r1
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	4620      	mov	r0, r4
 800aeba:	4629      	mov	r1, r5
 800aebc:	f7f5 fba4 	bl	8000608 <__aeabi_dmul>
 800aec0:	4b3e      	ldr	r3, [pc, #248]	; (800afbc <atan+0x324>)
 800aec2:	2200      	movs	r2, #0
 800aec4:	f7f5 f9ea 	bl	800029c <__adddf3>
 800aec8:	4602      	mov	r2, r0
 800aeca:	460b      	mov	r3, r1
 800aecc:	4630      	mov	r0, r6
 800aece:	4639      	mov	r1, r7
 800aed0:	f7f5 fcc4 	bl	800085c <__aeabi_ddiv>
 800aed4:	f04f 0a02 	mov.w	sl, #2
 800aed8:	4604      	mov	r4, r0
 800aeda:	460d      	mov	r5, r1
 800aedc:	e743      	b.n	800ad66 <atan+0xce>
 800aede:	462b      	mov	r3, r5
 800aee0:	ee10 2a10 	vmov	r2, s0
 800aee4:	4939      	ldr	r1, [pc, #228]	; (800afcc <atan+0x334>)
 800aee6:	2000      	movs	r0, #0
 800aee8:	f7f5 fcb8 	bl	800085c <__aeabi_ddiv>
 800aeec:	f04f 0a03 	mov.w	sl, #3
 800aef0:	4604      	mov	r4, r0
 800aef2:	460d      	mov	r5, r1
 800aef4:	e737      	b.n	800ad66 <atan+0xce>
 800aef6:	4b36      	ldr	r3, [pc, #216]	; (800afd0 <atan+0x338>)
 800aef8:	4e36      	ldr	r6, [pc, #216]	; (800afd4 <atan+0x33c>)
 800aefa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800aefe:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800af02:	e9da 2300 	ldrd	r2, r3, [sl]
 800af06:	f7f5 f9c7 	bl	8000298 <__aeabi_dsub>
 800af0a:	4622      	mov	r2, r4
 800af0c:	462b      	mov	r3, r5
 800af0e:	f7f5 f9c3 	bl	8000298 <__aeabi_dsub>
 800af12:	4602      	mov	r2, r0
 800af14:	460b      	mov	r3, r1
 800af16:	e9d6 0100 	ldrd	r0, r1, [r6]
 800af1a:	f7f5 f9bd 	bl	8000298 <__aeabi_dsub>
 800af1e:	f1bb 0f00 	cmp.w	fp, #0
 800af22:	4604      	mov	r4, r0
 800af24:	460d      	mov	r5, r1
 800af26:	f6bf aed6 	bge.w	800acd6 <atan+0x3e>
 800af2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800af2e:	461d      	mov	r5, r3
 800af30:	e6d1      	b.n	800acd6 <atan+0x3e>
 800af32:	a51d      	add	r5, pc, #116	; (adr r5, 800afa8 <atan+0x310>)
 800af34:	e9d5 4500 	ldrd	r4, r5, [r5]
 800af38:	e6cd      	b.n	800acd6 <atan+0x3e>
 800af3a:	bf00      	nop
 800af3c:	f3af 8000 	nop.w
 800af40:	54442d18 	.word	0x54442d18
 800af44:	bff921fb 	.word	0xbff921fb
 800af48:	8800759c 	.word	0x8800759c
 800af4c:	7e37e43c 	.word	0x7e37e43c
 800af50:	e322da11 	.word	0xe322da11
 800af54:	3f90ad3a 	.word	0x3f90ad3a
 800af58:	24760deb 	.word	0x24760deb
 800af5c:	3fa97b4b 	.word	0x3fa97b4b
 800af60:	a0d03d51 	.word	0xa0d03d51
 800af64:	3fb10d66 	.word	0x3fb10d66
 800af68:	c54c206e 	.word	0xc54c206e
 800af6c:	3fb745cd 	.word	0x3fb745cd
 800af70:	920083ff 	.word	0x920083ff
 800af74:	3fc24924 	.word	0x3fc24924
 800af78:	5555550d 	.word	0x5555550d
 800af7c:	3fd55555 	.word	0x3fd55555
 800af80:	2c6a6c2f 	.word	0x2c6a6c2f
 800af84:	bfa2b444 	.word	0xbfa2b444
 800af88:	52defd9a 	.word	0x52defd9a
 800af8c:	3fadde2d 	.word	0x3fadde2d
 800af90:	af749a6d 	.word	0xaf749a6d
 800af94:	3fb3b0f2 	.word	0x3fb3b0f2
 800af98:	fe231671 	.word	0xfe231671
 800af9c:	3fbc71c6 	.word	0x3fbc71c6
 800afa0:	9998ebc4 	.word	0x9998ebc4
 800afa4:	3fc99999 	.word	0x3fc99999
 800afa8:	54442d18 	.word	0x54442d18
 800afac:	3ff921fb 	.word	0x3ff921fb
 800afb0:	440fffff 	.word	0x440fffff
 800afb4:	7ff00000 	.word	0x7ff00000
 800afb8:	3fdbffff 	.word	0x3fdbffff
 800afbc:	3ff00000 	.word	0x3ff00000
 800afc0:	3ff2ffff 	.word	0x3ff2ffff
 800afc4:	40038000 	.word	0x40038000
 800afc8:	3ff80000 	.word	0x3ff80000
 800afcc:	bff00000 	.word	0xbff00000
 800afd0:	0800b498 	.word	0x0800b498
 800afd4:	0800b478 	.word	0x0800b478

0800afd8 <fabs>:
 800afd8:	ec51 0b10 	vmov	r0, r1, d0
 800afdc:	ee10 2a10 	vmov	r2, s0
 800afe0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800afe4:	ec43 2b10 	vmov	d0, r2, r3
 800afe8:	4770      	bx	lr
	...

0800afec <_init>:
 800afec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afee:	bf00      	nop
 800aff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aff2:	bc08      	pop	{r3}
 800aff4:	469e      	mov	lr, r3
 800aff6:	4770      	bx	lr

0800aff8 <_fini>:
 800aff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800affa:	bf00      	nop
 800affc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800affe:	bc08      	pop	{r3}
 800b000:	469e      	mov	lr, r3
 800b002:	4770      	bx	lr
