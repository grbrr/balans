
balans.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  0800a190  0800a190  0001a190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a640  0800a640  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a640  0800a640  0001a640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a648  0800a648  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a648  0800a648  0001a648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a64c  0800a64c  0001a64c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a650  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  200001dc  0800a82c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  0800a82c  00020494  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001590a  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031e9  00000000  00000000  00035b16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d00  00000000  00000000  00038d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc0  00000000  00000000  00039a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d48  00000000  00000000  0003a5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014159  00000000  00000000  00054308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000959a6  00000000  00000000  00068461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fde07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000453c  00000000  00000000  000fde5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a174 	.word	0x0800a174

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	0800a174 	.word	0x0800a174

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f56:	463b      	mov	r3, r7
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f62:	4b21      	ldr	r3, [pc, #132]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f64:	4a21      	ldr	r2, [pc, #132]	; (8000fec <MX_ADC1_Init+0x9c>)
 8000f66:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f68:	4b1f      	ldr	r3, [pc, #124]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000f6e:	4b1e      	ldr	r3, [pc, #120]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f74:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f76:	4b1c      	ldr	r3, [pc, #112]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f7c:	4b1a      	ldr	r3, [pc, #104]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f82:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f8a:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f90:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f92:	4a17      	ldr	r2, [pc, #92]	; (8000ff0 <MX_ADC1_Init+0xa0>)
 8000f94:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f96:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fa2:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000faa:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fb0:	480d      	ldr	r0, [pc, #52]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000fb2:	f001 ff63 	bl	8002e7c <HAL_ADC_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000fbc:	f000 fe88 	bl	8001cd0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000fc0:	2305      	movs	r3, #5
 8000fc2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fcc:	463b      	mov	r3, r7
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <MX_ADC1_Init+0x98>)
 8000fd2:	f002 f8e3 	bl	800319c <HAL_ADC_ConfigChannel>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000fdc:	f000 fe78 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fe0:	bf00      	nop
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000268 	.word	0x20000268
 8000fec:	40012000 	.word	0x40012000
 8000ff0:	0f000001 	.word	0x0f000001

08000ff4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	; 0x28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a17      	ldr	r2, [pc, #92]	; (8001070 <HAL_ADC_MspInit+0x7c>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d127      	bne.n	8001066 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	613b      	str	r3, [r7, #16]
 800101a:	4b16      	ldr	r3, [pc, #88]	; (8001074 <HAL_ADC_MspInit+0x80>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101e:	4a15      	ldr	r2, [pc, #84]	; (8001074 <HAL_ADC_MspInit+0x80>)
 8001020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001024:	6453      	str	r3, [r2, #68]	; 0x44
 8001026:	4b13      	ldr	r3, [pc, #76]	; (8001074 <HAL_ADC_MspInit+0x80>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <HAL_ADC_MspInit+0x80>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a0e      	ldr	r2, [pc, #56]	; (8001074 <HAL_ADC_MspInit+0x80>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <HAL_ADC_MspInit+0x80>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800104e:	2320      	movs	r3, #32
 8001050:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001052:	2303      	movs	r3, #3
 8001054:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	4619      	mov	r1, r3
 8001060:	4805      	ldr	r0, [pc, #20]	; (8001078 <HAL_ADC_MspInit+0x84>)
 8001062:	f002 ffcd 	bl	8004000 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001066:	bf00      	nop
 8001068:	3728      	adds	r7, #40	; 0x28
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40012000 	.word	0x40012000
 8001074:	40023800 	.word	0x40023800
 8001078:	40020000 	.word	0x40020000

0800107c <map>:
 */

#include "additives.h"

int32_t map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min,
		int32_t out_max) {
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
 8001088:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	69b9      	ldr	r1, [r7, #24]
 8001092:	683a      	ldr	r2, [r7, #0]
 8001094:	1a8a      	subs	r2, r1, r2
 8001096:	fb02 f203 	mul.w	r2, r2, r3
 800109a:	6879      	ldr	r1, [r7, #4]
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	1acb      	subs	r3, r1, r3
 80010a0:	fb92 f2f3 	sdiv	r2, r2, r3
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	4413      	add	r3, r2
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <mapfloat>:

float mapfloat(float x, float in_min, float in_max, float out_min,
		float out_max) {
 80010b4:	b480      	push	{r7}
 80010b6:	b087      	sub	sp, #28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	ed87 0a05 	vstr	s0, [r7, #20]
 80010be:	edc7 0a04 	vstr	s1, [r7, #16]
 80010c2:	ed87 1a03 	vstr	s2, [r7, #12]
 80010c6:	edc7 1a02 	vstr	s3, [r7, #8]
 80010ca:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80010ce:	ed97 7a05 	vldr	s14, [r7, #20]
 80010d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80010d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010da:	edd7 6a01 	vldr	s13, [r7, #4]
 80010de:	edd7 7a02 	vldr	s15, [r7, #8]
 80010e2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80010e6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80010ea:	ed97 7a03 	vldr	s14, [r7, #12]
 80010ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80010f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80010fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80010fe:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001102:	eeb0 0a67 	vmov.f32	s0, s15
 8001106:	371c      	adds	r7, #28
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <LL_SYSTICK_IsActiveCounterFlag>:

static inline uint32_t LL_SYSTICK_IsActiveCounterFlag(void) {
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
	return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)
 8001114:	4b07      	ldr	r3, [pc, #28]	; (8001134 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
			== (SysTick_CTRL_COUNTFLAG_Msk));
 800111c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001120:	bf0c      	ite	eq
 8001122:	2301      	moveq	r3, #1
 8001124:	2300      	movne	r3, #0
 8001126:	b2db      	uxtb	r3, r3
}
 8001128:	4618      	mov	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	e000e010 	.word	0xe000e010

08001138 <getCurrentMicros>:

uint32_t getCurrentMicros(void) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
	/* Ensure COUNTFLAG is reset by reading SysTick control and status register */
	LL_SYSTICK_IsActiveCounterFlag();
 800113e:	f7ff ffe7 	bl	8001110 <LL_SYSTICK_IsActiveCounterFlag>
	uint32_t m = HAL_GetTick();
 8001142:	f001 fe6b 	bl	8002e1c <HAL_GetTick>
 8001146:	60f8      	str	r0, [r7, #12]
	const uint32_t tms = SysTick->LOAD + 1;
 8001148:	4b13      	ldr	r3, [pc, #76]	; (8001198 <getCurrentMicros+0x60>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	3301      	adds	r3, #1
 800114e:	60bb      	str	r3, [r7, #8]
	__IO uint32_t u = tms - SysTick->VAL;
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <getCurrentMicros+0x60>)
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	68ba      	ldr	r2, [r7, #8]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	607b      	str	r3, [r7, #4]
	if (LL_SYSTICK_IsActiveCounterFlag()) {
 800115a:	f7ff ffd9 	bl	8001110 <LL_SYSTICK_IsActiveCounterFlag>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d007      	beq.n	8001174 <getCurrentMicros+0x3c>
		m = HAL_GetTick();
 8001164:	f001 fe5a 	bl	8002e1c <HAL_GetTick>
 8001168:	60f8      	str	r0, [r7, #12]
		u = tms - SysTick->VAL;
 800116a:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <getCurrentMicros+0x60>)
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	607b      	str	r3, [r7, #4]
	}
	return (m * 1000 + (u * 1000) / tms);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800117a:	fb02 f203 	mul.w	r2, r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001184:	fb01 f103 	mul.w	r1, r1, r3
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	fbb1 f3f3 	udiv	r3, r1, r3
 800118e:	4413      	add	r3, r2
}
 8001190:	4618      	mov	r0, r3
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	e000e010 	.word	0xe000e010

0800119c <potentiometer_value>:

float potentiometer_value(void) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
	float x = 0.0;
 80011a2:	f04f 0300 	mov.w	r3, #0
 80011a6:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 10; i++) {
 80011a8:	2300      	movs	r3, #0
 80011aa:	603b      	str	r3, [r7, #0]
 80011ac:	e024      	b.n	80011f8 <potentiometer_value+0x5c>
		HAL_ADC_Start(&hadc1);
 80011ae:	481c      	ldr	r0, [pc, #112]	; (8001220 <potentiometer_value+0x84>)
 80011b0:	f001 fea8 	bl	8002f04 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100);
 80011b4:	2164      	movs	r1, #100	; 0x64
 80011b6:	481a      	ldr	r0, [pc, #104]	; (8001220 <potentiometer_value+0x84>)
 80011b8:	f001 ff58 	bl	800306c <HAL_ADC_PollForConversion>
		x += mapfloat(HAL_ADC_GetValue(&hadc1), 0, 1023, -5, 5);
 80011bc:	4818      	ldr	r0, [pc, #96]	; (8001220 <potentiometer_value+0x84>)
 80011be:	f001 ffe0 	bl	8003182 <HAL_ADC_GetValue>
 80011c2:	ee07 0a90 	vmov	s15, r0
 80011c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011ca:	eeb1 2a04 	vmov.f32	s4, #20	; 0x40a00000  5.0
 80011ce:	eef9 1a04 	vmov.f32	s3, #148	; 0xc0a00000 -5.0
 80011d2:	ed9f 1a14 	vldr	s2, [pc, #80]	; 8001224 <potentiometer_value+0x88>
 80011d6:	eddf 0a14 	vldr	s1, [pc, #80]	; 8001228 <potentiometer_value+0x8c>
 80011da:	eeb0 0a67 	vmov.f32	s0, s15
 80011de:	f7ff ff69 	bl	80010b4 <mapfloat>
 80011e2:	eeb0 7a40 	vmov.f32	s14, s0
 80011e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80011ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011ee:	edc7 7a01 	vstr	s15, [r7, #4]
	for (int i = 0; i < 10; i++) {
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	3301      	adds	r3, #1
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	2b09      	cmp	r3, #9
 80011fc:	ddd7      	ble.n	80011ae <potentiometer_value+0x12>
	}
	x /= 10;
 80011fe:	ed97 7a01 	vldr	s14, [r7, #4]
 8001202:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001206:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800120a:	edc7 7a01 	vstr	s15, [r7, #4]
	return x;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	ee07 3a90 	vmov	s15, r3
}
 8001214:	eeb0 0a67 	vmov.f32	s0, s15
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000268 	.word	0x20000268
 8001224:	447fc000 	.word	0x447fc000
 8001228:	00000000 	.word	0x00000000

0800122c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <MX_DMA_Init+0x3c>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a0b      	ldr	r2, [pc, #44]	; (8001268 <MX_DMA_Init+0x3c>)
 800123c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b09      	ldr	r3, [pc, #36]	; (8001268 <MX_DMA_Init+0x3c>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800124e:	2200      	movs	r2, #0
 8001250:	2100      	movs	r1, #0
 8001252:	203a      	movs	r0, #58	; 0x3a
 8001254:	f002 fa9b 	bl	800378e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001258:	203a      	movs	r0, #58	; 0x3a
 800125a:	f002 fab4 	bl	80037c6 <HAL_NVIC_EnableIRQ>

}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40023800 	.word	0x40023800

0800126c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08a      	sub	sp, #40	; 0x28
 8001270:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
 8001280:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	4b27      	ldr	r3, [pc, #156]	; (8001324 <MX_GPIO_Init+0xb8>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a26      	ldr	r2, [pc, #152]	; (8001324 <MX_GPIO_Init+0xb8>)
 800128c:	f043 0304 	orr.w	r3, r3, #4
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b24      	ldr	r3, [pc, #144]	; (8001324 <MX_GPIO_Init+0xb8>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f003 0304 	and.w	r3, r3, #4
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	4b20      	ldr	r3, [pc, #128]	; (8001324 <MX_GPIO_Init+0xb8>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a1f      	ldr	r2, [pc, #124]	; (8001324 <MX_GPIO_Init+0xb8>)
 80012a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b1d      	ldr	r3, [pc, #116]	; (8001324 <MX_GPIO_Init+0xb8>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	4b19      	ldr	r3, [pc, #100]	; (8001324 <MX_GPIO_Init+0xb8>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a18      	ldr	r2, [pc, #96]	; (8001324 <MX_GPIO_Init+0xb8>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b16      	ldr	r3, [pc, #88]	; (8001324 <MX_GPIO_Init+0xb8>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	607b      	str	r3, [r7, #4]
 80012da:	4b12      	ldr	r3, [pc, #72]	; (8001324 <MX_GPIO_Init+0xb8>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a11      	ldr	r2, [pc, #68]	; (8001324 <MX_GPIO_Init+0xb8>)
 80012e0:	f043 0302 	orr.w	r3, r3, #2
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <MX_GPIO_Init+0xb8>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80012f2:	2200      	movs	r2, #0
 80012f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012f8:	480b      	ldr	r0, [pc, #44]	; (8001328 <MX_GPIO_Init+0xbc>)
 80012fa:	f003 f805 	bl	8004308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80012fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001302:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001304:	2301      	movs	r3, #1
 8001306:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130c:	2300      	movs	r3, #0
 800130e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	4619      	mov	r1, r3
 8001316:	4804      	ldr	r0, [pc, #16]	; (8001328 <MX_GPIO_Init+0xbc>)
 8001318:	f002 fe72 	bl	8004000 <HAL_GPIO_Init>

}
 800131c:	bf00      	nop
 800131e:	3728      	adds	r7, #40	; 0x28
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40023800 	.word	0x40023800
 8001328:	40020800 	.word	0x40020800

0800132c <Send>:



// ########################## SEND ##########################
void Send(int16_t uSteer, int16_t uSpeed)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	460a      	mov	r2, r1
 8001336:	80fb      	strh	r3, [r7, #6]
 8001338:	4613      	mov	r3, r2
 800133a:	80bb      	strh	r3, [r7, #4]
  // Create command
  Command.start    = (uint16_t)START_FRAME;
 800133c:	4b11      	ldr	r3, [pc, #68]	; (8001384 <Send+0x58>)
 800133e:	f64a 32cd 	movw	r2, #43981	; 0xabcd
 8001342:	801a      	strh	r2, [r3, #0]
  Command.steer    = (int16_t)uSteer;
 8001344:	4a0f      	ldr	r2, [pc, #60]	; (8001384 <Send+0x58>)
 8001346:	88fb      	ldrh	r3, [r7, #6]
 8001348:	8053      	strh	r3, [r2, #2]
  Command.speed    = (int16_t)uSpeed;
 800134a:	4a0e      	ldr	r2, [pc, #56]	; (8001384 <Send+0x58>)
 800134c:	88bb      	ldrh	r3, [r7, #4]
 800134e:	8093      	strh	r3, [r2, #4]
  Command.checksum = (uint16_t)(Command.start ^ Command.steer ^ Command.speed);
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <Send+0x58>)
 8001352:	881b      	ldrh	r3, [r3, #0]
 8001354:	b21a      	sxth	r2, r3
 8001356:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <Send+0x58>)
 8001358:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800135c:	4053      	eors	r3, r2
 800135e:	b21a      	sxth	r2, r3
 8001360:	4b08      	ldr	r3, [pc, #32]	; (8001384 <Send+0x58>)
 8001362:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001366:	4053      	eors	r3, r2
 8001368:	b21b      	sxth	r3, r3
 800136a:	b29a      	uxth	r2, r3
 800136c:	4b05      	ldr	r3, [pc, #20]	; (8001384 <Send+0x58>)
 800136e:	80da      	strh	r2, [r3, #6]

  // Write to Serial
  //HoverSerial.write((uint8_t *) &Command, sizeof(Command));
  HAL_UART_Transmit(&huart2, (uint8_t*) &Command, sizeof(Command), 100);
 8001370:	2364      	movs	r3, #100	; 0x64
 8001372:	2208      	movs	r2, #8
 8001374:	4903      	ldr	r1, [pc, #12]	; (8001384 <Send+0x58>)
 8001376:	4804      	ldr	r0, [pc, #16]	; (8001388 <Send+0x5c>)
 8001378:	f004 fc4f 	bl	8005c1a <HAL_UART_Transmit>
}
 800137c:	bf00      	nop
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	200002e0 	.word	0x200002e0
 8001388:	2000043c 	.word	0x2000043c

0800138c <Receive>:

// ########################## RECEIVE ##########################
void Receive(uint8_t* byte)
{
 800138c:	b5b0      	push	{r4, r5, r7, lr}
 800138e:	b08a      	sub	sp, #40	; 0x28
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
	char buffer[30];

	if(data_available)
 8001394:	4bad      	ldr	r3, [pc, #692]	; (800164c <Receive+0x2c0>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d01b      	beq.n	80013d4 <Receive+0x48>
	{
		incomingByte = *byte;             // Read the incoming byte
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	781a      	ldrb	r2, [r3, #0]
 80013a0:	4bab      	ldr	r3, [pc, #684]	; (8001650 <Receive+0x2c4>)
 80013a2:	701a      	strb	r2, [r3, #0]
		bufStartFrame = ((uint16_t) (incomingByte) << 8) | incomingBytePrev; // Construct the start frame
 80013a4:	4baa      	ldr	r3, [pc, #680]	; (8001650 <Receive+0x2c4>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	021b      	lsls	r3, r3, #8
 80013aa:	b21a      	sxth	r2, r3
 80013ac:	4ba9      	ldr	r3, [pc, #676]	; (8001654 <Receive+0x2c8>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	4313      	orrs	r3, r2
 80013b4:	b21b      	sxth	r3, r3
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	4ba7      	ldr	r3, [pc, #668]	; (8001658 <Receive+0x2cc>)
 80013ba:	801a      	strh	r2, [r3, #0]
		incomingBytePrev = incomingByte;
 80013bc:	4ba4      	ldr	r3, [pc, #656]	; (8001650 <Receive+0x2c4>)
 80013be:	781a      	ldrb	r2, [r3, #0]
 80013c0:	4ba4      	ldr	r3, [pc, #656]	; (8001654 <Receive+0x2c8>)
 80013c2:	701a      	strb	r2, [r3, #0]
		data_available = 0;
 80013c4:	4ba1      	ldr	r3, [pc, #644]	; (800164c <Receive+0x2c0>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, byte, sizeof(*byte)); //ponowne oczekiwanie na przerwanie
 80013ca:	2201      	movs	r2, #1
 80013cc:	6879      	ldr	r1, [r7, #4]
 80013ce:	48a3      	ldr	r0, [pc, #652]	; (800165c <Receive+0x2d0>)
 80013d0:	f004 fcb5 	bl	8005d3e <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart1, (uint8_t*) &bufStartFrame, sizeof(bufStartFrame),100);
        return;
    #endif

    // Copy received data
    if (bufStartFrame == START_FRAME) {	                    // Initialize if new data is detected
 80013d4:	4ba0      	ldr	r3, [pc, #640]	; (8001658 <Receive+0x2cc>)
 80013d6:	881b      	ldrh	r3, [r3, #0]
 80013d8:	f64a 32cd 	movw	r2, #43981	; 0xabcd
 80013dc:	4293      	cmp	r3, r2
 80013de:	d116      	bne.n	800140e <Receive+0x82>
        p       = (uint8_t *)&NewFeedback;
 80013e0:	4b9f      	ldr	r3, [pc, #636]	; (8001660 <Receive+0x2d4>)
 80013e2:	4aa0      	ldr	r2, [pc, #640]	; (8001664 <Receive+0x2d8>)
 80013e4:	601a      	str	r2, [r3, #0]
        *p++    = incomingBytePrev;
 80013e6:	4b9e      	ldr	r3, [pc, #632]	; (8001660 <Receive+0x2d4>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	1c5a      	adds	r2, r3, #1
 80013ec:	499c      	ldr	r1, [pc, #624]	; (8001660 <Receive+0x2d4>)
 80013ee:	600a      	str	r2, [r1, #0]
 80013f0:	4a98      	ldr	r2, [pc, #608]	; (8001654 <Receive+0x2c8>)
 80013f2:	7812      	ldrb	r2, [r2, #0]
 80013f4:	701a      	strb	r2, [r3, #0]
        *p++    = incomingByte;
 80013f6:	4b9a      	ldr	r3, [pc, #616]	; (8001660 <Receive+0x2d4>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	1c5a      	adds	r2, r3, #1
 80013fc:	4998      	ldr	r1, [pc, #608]	; (8001660 <Receive+0x2d4>)
 80013fe:	600a      	str	r2, [r1, #0]
 8001400:	4a93      	ldr	r2, [pc, #588]	; (8001650 <Receive+0x2c4>)
 8001402:	7812      	ldrb	r2, [r2, #0]
 8001404:	701a      	strb	r2, [r3, #0]
        idx     = 2;
 8001406:	4b98      	ldr	r3, [pc, #608]	; (8001668 <Receive+0x2dc>)
 8001408:	2202      	movs	r2, #2
 800140a:	701a      	strb	r2, [r3, #0]
 800140c:	e015      	b.n	800143a <Receive+0xae>
    } else if (idx >= 2 && idx < sizeof(SerialFeedback)) {  // Save the new received data
 800140e:	4b96      	ldr	r3, [pc, #600]	; (8001668 <Receive+0x2dc>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d911      	bls.n	800143a <Receive+0xae>
 8001416:	4b94      	ldr	r3, [pc, #592]	; (8001668 <Receive+0x2dc>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b11      	cmp	r3, #17
 800141c:	d80d      	bhi.n	800143a <Receive+0xae>
        *p++    = incomingByte;
 800141e:	4b90      	ldr	r3, [pc, #576]	; (8001660 <Receive+0x2d4>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	1c5a      	adds	r2, r3, #1
 8001424:	498e      	ldr	r1, [pc, #568]	; (8001660 <Receive+0x2d4>)
 8001426:	600a      	str	r2, [r1, #0]
 8001428:	4a89      	ldr	r2, [pc, #548]	; (8001650 <Receive+0x2c4>)
 800142a:	7812      	ldrb	r2, [r2, #0]
 800142c:	701a      	strb	r2, [r3, #0]
        idx++;
 800142e:	4b8e      	ldr	r3, [pc, #568]	; (8001668 <Receive+0x2dc>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	3301      	adds	r3, #1
 8001434:	b2da      	uxtb	r2, r3
 8001436:	4b8c      	ldr	r3, [pc, #560]	; (8001668 <Receive+0x2dc>)
 8001438:	701a      	strb	r2, [r3, #0]
    }

    // Check if we reached the end of the package
    if (idx == sizeof(SerialFeedback)) {
 800143a:	4b8b      	ldr	r3, [pc, #556]	; (8001668 <Receive+0x2dc>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b12      	cmp	r3, #18
 8001440:	f040 815d 	bne.w	80016fe <Receive+0x372>
        uint16_t checksum;
        checksum = (uint16_t)(NewFeedback.start ^ NewFeedback.cmd1 ^ NewFeedback.cmd2 ^ NewFeedback.speedR_meas ^ NewFeedback.speedL_meas
 8001444:	4b87      	ldr	r3, [pc, #540]	; (8001664 <Receive+0x2d8>)
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	b21a      	sxth	r2, r3
 800144a:	4b86      	ldr	r3, [pc, #536]	; (8001664 <Receive+0x2d8>)
 800144c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001450:	4053      	eors	r3, r2
 8001452:	b21a      	sxth	r2, r3
 8001454:	4b83      	ldr	r3, [pc, #524]	; (8001664 <Receive+0x2d8>)
 8001456:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800145a:	4053      	eors	r3, r2
 800145c:	b21a      	sxth	r2, r3
 800145e:	4b81      	ldr	r3, [pc, #516]	; (8001664 <Receive+0x2d8>)
 8001460:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001464:	4053      	eors	r3, r2
 8001466:	b21a      	sxth	r2, r3
 8001468:	4b7e      	ldr	r3, [pc, #504]	; (8001664 <Receive+0x2d8>)
 800146a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800146e:	4053      	eors	r3, r2
 8001470:	b21a      	sxth	r2, r3
                            ^ NewFeedback.batVoltage ^ NewFeedback.boardTemp ^ NewFeedback.cmdLed);
 8001472:	4b7c      	ldr	r3, [pc, #496]	; (8001664 <Receive+0x2d8>)
 8001474:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001478:	4053      	eors	r3, r2
 800147a:	b21a      	sxth	r2, r3
 800147c:	4b79      	ldr	r3, [pc, #484]	; (8001664 <Receive+0x2d8>)
 800147e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001482:	4053      	eors	r3, r2
 8001484:	b21a      	sxth	r2, r3
 8001486:	4b77      	ldr	r3, [pc, #476]	; (8001664 <Receive+0x2d8>)
 8001488:	89db      	ldrh	r3, [r3, #14]
 800148a:	b21b      	sxth	r3, r3
 800148c:	4053      	eors	r3, r2
 800148e:	b21b      	sxth	r3, r3
        checksum = (uint16_t)(NewFeedback.start ^ NewFeedback.cmd1 ^ NewFeedback.cmd2 ^ NewFeedback.speedR_meas ^ NewFeedback.speedL_meas
 8001490:	84fb      	strh	r3, [r7, #38]	; 0x26

        // Check validity of the new data
        if (NewFeedback.start == START_FRAME && checksum == NewFeedback.checksum) {
 8001492:	4b74      	ldr	r3, [pc, #464]	; (8001664 <Receive+0x2d8>)
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	f64a 32cd 	movw	r2, #43981	; 0xabcd
 800149a:	4293      	cmp	r3, r2
 800149c:	f040 8106 	bne.w	80016ac <Receive+0x320>
 80014a0:	4b70      	ldr	r3, [pc, #448]	; (8001664 <Receive+0x2d8>)
 80014a2:	8a1b      	ldrh	r3, [r3, #16]
 80014a4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80014a6:	429a      	cmp	r2, r3
 80014a8:	f040 8100 	bne.w	80016ac <Receive+0x320>
            // Copy the new data
            memcpy(&Feedback, &NewFeedback, sizeof(SerialFeedback));
 80014ac:	4b6f      	ldr	r3, [pc, #444]	; (800166c <Receive+0x2e0>)
 80014ae:	4a6d      	ldr	r2, [pc, #436]	; (8001664 <Receive+0x2d8>)
 80014b0:	6815      	ldr	r5, [r2, #0]
 80014b2:	6854      	ldr	r4, [r2, #4]
 80014b4:	6890      	ldr	r0, [r2, #8]
 80014b6:	68d1      	ldr	r1, [r2, #12]
 80014b8:	601d      	str	r5, [r3, #0]
 80014ba:	605c      	str	r4, [r3, #4]
 80014bc:	6098      	str	r0, [r3, #8]
 80014be:	60d9      	str	r1, [r3, #12]
 80014c0:	8a12      	ldrh	r2, [r2, #16]
 80014c2:	821a      	strh	r2, [r3, #16]

            // Print data to built-in Serial
            sprintf(buffer, "1: ");
 80014c4:	f107 0308 	add.w	r3, r7, #8
 80014c8:	4969      	ldr	r1, [pc, #420]	; (8001670 <Receive+0x2e4>)
 80014ca:	4618      	mov	r0, r3
 80014cc:	f006 f9b0 	bl	8007830 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*) &buffer, strlen(buffer), 100);
 80014d0:	f107 0308 	add.w	r3, r7, #8
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7fe fe83 	bl	80001e0 <strlen>
 80014da:	4603      	mov	r3, r0
 80014dc:	b29a      	uxth	r2, r3
 80014de:	f107 0108 	add.w	r1, r7, #8
 80014e2:	2364      	movs	r3, #100	; 0x64
 80014e4:	485d      	ldr	r0, [pc, #372]	; (800165c <Receive+0x2d0>)
 80014e6:	f004 fb98 	bl	8005c1a <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, (uint8_t*) &Feedback.cmd1, sizeof(Feedback.cmd1), 100);
 80014ea:	2364      	movs	r3, #100	; 0x64
 80014ec:	2202      	movs	r2, #2
 80014ee:	4961      	ldr	r1, [pc, #388]	; (8001674 <Receive+0x2e8>)
 80014f0:	485a      	ldr	r0, [pc, #360]	; (800165c <Receive+0x2d0>)
 80014f2:	f004 fb92 	bl	8005c1a <HAL_UART_Transmit>
            sprintf(buffer, "2: ");
 80014f6:	f107 0308 	add.w	r3, r7, #8
 80014fa:	495f      	ldr	r1, [pc, #380]	; (8001678 <Receive+0x2ec>)
 80014fc:	4618      	mov	r0, r3
 80014fe:	f006 f997 	bl	8007830 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*) &buffer, strlen(buffer), 100);
 8001502:	f107 0308 	add.w	r3, r7, #8
 8001506:	4618      	mov	r0, r3
 8001508:	f7fe fe6a 	bl	80001e0 <strlen>
 800150c:	4603      	mov	r3, r0
 800150e:	b29a      	uxth	r2, r3
 8001510:	f107 0108 	add.w	r1, r7, #8
 8001514:	2364      	movs	r3, #100	; 0x64
 8001516:	4851      	ldr	r0, [pc, #324]	; (800165c <Receive+0x2d0>)
 8001518:	f004 fb7f 	bl	8005c1a <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, (uint8_t*) &Feedback.cmd2, sizeof(Feedback.cmd2), 100);
 800151c:	2364      	movs	r3, #100	; 0x64
 800151e:	2202      	movs	r2, #2
 8001520:	4956      	ldr	r1, [pc, #344]	; (800167c <Receive+0x2f0>)
 8001522:	484e      	ldr	r0, [pc, #312]	; (800165c <Receive+0x2d0>)
 8001524:	f004 fb79 	bl	8005c1a <HAL_UART_Transmit>
            sprintf(buffer, "3: ");
 8001528:	f107 0308 	add.w	r3, r7, #8
 800152c:	4954      	ldr	r1, [pc, #336]	; (8001680 <Receive+0x2f4>)
 800152e:	4618      	mov	r0, r3
 8001530:	f006 f97e 	bl	8007830 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*) &buffer, strlen(buffer), 100);
 8001534:	f107 0308 	add.w	r3, r7, #8
 8001538:	4618      	mov	r0, r3
 800153a:	f7fe fe51 	bl	80001e0 <strlen>
 800153e:	4603      	mov	r3, r0
 8001540:	b29a      	uxth	r2, r3
 8001542:	f107 0108 	add.w	r1, r7, #8
 8001546:	2364      	movs	r3, #100	; 0x64
 8001548:	4844      	ldr	r0, [pc, #272]	; (800165c <Receive+0x2d0>)
 800154a:	f004 fb66 	bl	8005c1a <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, (uint8_t*) &Feedback.speedR_meas, sizeof(Feedback.speedR_meas), 100);
 800154e:	2364      	movs	r3, #100	; 0x64
 8001550:	2202      	movs	r2, #2
 8001552:	494c      	ldr	r1, [pc, #304]	; (8001684 <Receive+0x2f8>)
 8001554:	4841      	ldr	r0, [pc, #260]	; (800165c <Receive+0x2d0>)
 8001556:	f004 fb60 	bl	8005c1a <HAL_UART_Transmit>
            sprintf(buffer, "4: ");
 800155a:	f107 0308 	add.w	r3, r7, #8
 800155e:	494a      	ldr	r1, [pc, #296]	; (8001688 <Receive+0x2fc>)
 8001560:	4618      	mov	r0, r3
 8001562:	f006 f965 	bl	8007830 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*) &buffer, strlen(buffer), 100);
 8001566:	f107 0308 	add.w	r3, r7, #8
 800156a:	4618      	mov	r0, r3
 800156c:	f7fe fe38 	bl	80001e0 <strlen>
 8001570:	4603      	mov	r3, r0
 8001572:	b29a      	uxth	r2, r3
 8001574:	f107 0108 	add.w	r1, r7, #8
 8001578:	2364      	movs	r3, #100	; 0x64
 800157a:	4838      	ldr	r0, [pc, #224]	; (800165c <Receive+0x2d0>)
 800157c:	f004 fb4d 	bl	8005c1a <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, (uint8_t*) &Feedback.speedL_meas, sizeof(Feedback.speedL_meas), 100);
 8001580:	2364      	movs	r3, #100	; 0x64
 8001582:	2202      	movs	r2, #2
 8001584:	4941      	ldr	r1, [pc, #260]	; (800168c <Receive+0x300>)
 8001586:	4835      	ldr	r0, [pc, #212]	; (800165c <Receive+0x2d0>)
 8001588:	f004 fb47 	bl	8005c1a <HAL_UART_Transmit>
            sprintf(buffer, "5: ");
 800158c:	f107 0308 	add.w	r3, r7, #8
 8001590:	493f      	ldr	r1, [pc, #252]	; (8001690 <Receive+0x304>)
 8001592:	4618      	mov	r0, r3
 8001594:	f006 f94c 	bl	8007830 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*) &buffer, strlen(buffer), 100);
 8001598:	f107 0308 	add.w	r3, r7, #8
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe fe1f 	bl	80001e0 <strlen>
 80015a2:	4603      	mov	r3, r0
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	f107 0108 	add.w	r1, r7, #8
 80015aa:	2364      	movs	r3, #100	; 0x64
 80015ac:	482b      	ldr	r0, [pc, #172]	; (800165c <Receive+0x2d0>)
 80015ae:	f004 fb34 	bl	8005c1a <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, (uint8_t*) &Feedback.batVoltage, sizeof(Feedback.batVoltage), 100);
 80015b2:	2364      	movs	r3, #100	; 0x64
 80015b4:	2202      	movs	r2, #2
 80015b6:	4937      	ldr	r1, [pc, #220]	; (8001694 <Receive+0x308>)
 80015b8:	4828      	ldr	r0, [pc, #160]	; (800165c <Receive+0x2d0>)
 80015ba:	f004 fb2e 	bl	8005c1a <HAL_UART_Transmit>
            sprintf(buffer, "6: ");
 80015be:	f107 0308 	add.w	r3, r7, #8
 80015c2:	4935      	ldr	r1, [pc, #212]	; (8001698 <Receive+0x30c>)
 80015c4:	4618      	mov	r0, r3
 80015c6:	f006 f933 	bl	8007830 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*) &buffer, strlen(buffer), 100);
 80015ca:	f107 0308 	add.w	r3, r7, #8
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7fe fe06 	bl	80001e0 <strlen>
 80015d4:	4603      	mov	r3, r0
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	f107 0108 	add.w	r1, r7, #8
 80015dc:	2364      	movs	r3, #100	; 0x64
 80015de:	481f      	ldr	r0, [pc, #124]	; (800165c <Receive+0x2d0>)
 80015e0:	f004 fb1b 	bl	8005c1a <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, (uint8_t*) &Feedback.boardTemp, sizeof(Feedback.boardTemp), 100);
 80015e4:	2364      	movs	r3, #100	; 0x64
 80015e6:	2202      	movs	r2, #2
 80015e8:	492c      	ldr	r1, [pc, #176]	; (800169c <Receive+0x310>)
 80015ea:	481c      	ldr	r0, [pc, #112]	; (800165c <Receive+0x2d0>)
 80015ec:	f004 fb15 	bl	8005c1a <HAL_UART_Transmit>
            sprintf(buffer, "7: ");
 80015f0:	f107 0308 	add.w	r3, r7, #8
 80015f4:	492a      	ldr	r1, [pc, #168]	; (80016a0 <Receive+0x314>)
 80015f6:	4618      	mov	r0, r3
 80015f8:	f006 f91a 	bl	8007830 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*) &buffer, strlen(buffer), 100);
 80015fc:	f107 0308 	add.w	r3, r7, #8
 8001600:	4618      	mov	r0, r3
 8001602:	f7fe fded 	bl	80001e0 <strlen>
 8001606:	4603      	mov	r3, r0
 8001608:	b29a      	uxth	r2, r3
 800160a:	f107 0108 	add.w	r1, r7, #8
 800160e:	2364      	movs	r3, #100	; 0x64
 8001610:	4812      	ldr	r0, [pc, #72]	; (800165c <Receive+0x2d0>)
 8001612:	f004 fb02 	bl	8005c1a <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, (uint8_t*) &Feedback.cmdLed, sizeof(Feedback.cmdLed), 100);
 8001616:	2364      	movs	r3, #100	; 0x64
 8001618:	2202      	movs	r2, #2
 800161a:	4922      	ldr	r1, [pc, #136]	; (80016a4 <Receive+0x318>)
 800161c:	480f      	ldr	r0, [pc, #60]	; (800165c <Receive+0x2d0>)
 800161e:	f004 fafc 	bl	8005c1a <HAL_UART_Transmit>
            sprintf(buffer, "\n\r");
 8001622:	f107 0308 	add.w	r3, r7, #8
 8001626:	4920      	ldr	r1, [pc, #128]	; (80016a8 <Receive+0x31c>)
 8001628:	4618      	mov	r0, r3
 800162a:	f006 f901 	bl	8007830 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*) &buffer, strlen(buffer), 100);
 800162e:	f107 0308 	add.w	r3, r7, #8
 8001632:	4618      	mov	r0, r3
 8001634:	f7fe fdd4 	bl	80001e0 <strlen>
 8001638:	4603      	mov	r3, r0
 800163a:	b29a      	uxth	r2, r3
 800163c:	f107 0108 	add.w	r1, r7, #8
 8001640:	2364      	movs	r3, #100	; 0x64
 8001642:	4806      	ldr	r0, [pc, #24]	; (800165c <Receive+0x2d0>)
 8001644:	f004 fae9 	bl	8005c1a <HAL_UART_Transmit>
 8001648:	e056      	b.n	80016f8 <Receive+0x36c>
 800164a:	bf00      	nop
 800164c:	200002c8 	.word	0x200002c8
 8001650:	200001f9 	.word	0x200001f9
 8001654:	200001fa 	.word	0x200001fa
 8001658:	200002c6 	.word	0x200002c6
 800165c:	2000043c 	.word	0x2000043c
 8001660:	200002b0 	.word	0x200002b0
 8001664:	200002b4 	.word	0x200002b4
 8001668:	200001f8 	.word	0x200001f8
 800166c:	200002cc 	.word	0x200002cc
 8001670:	0800a190 	.word	0x0800a190
 8001674:	200002ce 	.word	0x200002ce
 8001678:	0800a194 	.word	0x0800a194
 800167c:	200002d0 	.word	0x200002d0
 8001680:	0800a198 	.word	0x0800a198
 8001684:	200002d2 	.word	0x200002d2
 8001688:	0800a19c 	.word	0x0800a19c
 800168c:	200002d4 	.word	0x200002d4
 8001690:	0800a1a0 	.word	0x0800a1a0
 8001694:	200002d6 	.word	0x200002d6
 8001698:	0800a1a4 	.word	0x0800a1a4
 800169c:	200002d8 	.word	0x200002d8
 80016a0:	0800a1a8 	.word	0x0800a1a8
 80016a4:	200002da 	.word	0x200002da
 80016a8:	0800a1ac 	.word	0x0800a1ac
            Serial.print(" 4: ");  Serial.print(Feedback.speedL_meas);
            Serial.print(" 5: ");  Serial.print(Feedback.batVoltage);
            Serial.print(" 6: ");  Serial.print(Feedback.boardTemp);
            Serial.print(" 7: ");  Serial.println(Feedback.cmdLed);*/
        } else {
        	sprintf(buffer, "Non-valid data skipped");
 80016ac:	f107 0308 	add.w	r3, r7, #8
 80016b0:	4917      	ldr	r1, [pc, #92]	; (8001710 <Receive+0x384>)
 80016b2:	4618      	mov	r0, r3
 80016b4:	f006 f8bc 	bl	8007830 <siprintf>
        	HAL_UART_Transmit(&huart2, (uint8_t*) &buffer, strlen(buffer), 100);
 80016b8:	f107 0308 	add.w	r3, r7, #8
 80016bc:	4618      	mov	r0, r3
 80016be:	f7fe fd8f 	bl	80001e0 <strlen>
 80016c2:	4603      	mov	r3, r0
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	f107 0108 	add.w	r1, r7, #8
 80016ca:	2364      	movs	r3, #100	; 0x64
 80016cc:	4811      	ldr	r0, [pc, #68]	; (8001714 <Receive+0x388>)
 80016ce:	f004 faa4 	bl	8005c1a <HAL_UART_Transmit>
        	sprintf(buffer, "\n\r");
 80016d2:	f107 0308 	add.w	r3, r7, #8
 80016d6:	4910      	ldr	r1, [pc, #64]	; (8001718 <Receive+0x38c>)
 80016d8:	4618      	mov	r0, r3
 80016da:	f006 f8a9 	bl	8007830 <siprintf>
        	HAL_UART_Transmit(&huart2, (uint8_t*) &buffer, strlen(buffer), 100);
 80016de:	f107 0308 	add.w	r3, r7, #8
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7fe fd7c 	bl	80001e0 <strlen>
 80016e8:	4603      	mov	r3, r0
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	f107 0108 	add.w	r1, r7, #8
 80016f0:	2364      	movs	r3, #100	; 0x64
 80016f2:	4808      	ldr	r0, [pc, #32]	; (8001714 <Receive+0x388>)
 80016f4:	f004 fa91 	bl	8005c1a <HAL_UART_Transmit>
          //Serial.println("Non-valid data skipped");
        }
        idx = 0;    // Reset the index (it prevents to enter in this if condition in the next cycle)
 80016f8:	4b08      	ldr	r3, [pc, #32]	; (800171c <Receive+0x390>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	701a      	strb	r2, [r3, #0]
    }

    // Update previous states
    incomingBytePrev = incomingByte;
 80016fe:	4b08      	ldr	r3, [pc, #32]	; (8001720 <Receive+0x394>)
 8001700:	781a      	ldrb	r2, [r3, #0]
 8001702:	4b08      	ldr	r3, [pc, #32]	; (8001724 <Receive+0x398>)
 8001704:	701a      	strb	r2, [r3, #0]
}
 8001706:	bf00      	nop
 8001708:	3728      	adds	r7, #40	; 0x28
 800170a:	46bd      	mov	sp, r7
 800170c:	bdb0      	pop	{r4, r5, r7, pc}
 800170e:	bf00      	nop
 8001710:	0800a1b0 	.word	0x0800a1b0
 8001714:	2000043c 	.word	0x2000043c
 8001718:	0800a1ac 	.word	0x0800a1ac
 800171c:	200001f8 	.word	0x200001f8
 8001720:	200001f9 	.word	0x200001f9
 8001724:	200001fa 	.word	0x200001fa

08001728 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <MX_I2C1_Init+0x50>)
 800172e:	4a13      	ldr	r2, [pc, #76]	; (800177c <MX_I2C1_Init+0x54>)
 8001730:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <MX_I2C1_Init+0x50>)
 8001734:	4a12      	ldr	r2, [pc, #72]	; (8001780 <MX_I2C1_Init+0x58>)
 8001736:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001738:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <MX_I2C1_Init+0x50>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800173e:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <MX_I2C1_Init+0x50>)
 8001740:	2200      	movs	r2, #0
 8001742:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001744:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <MX_I2C1_Init+0x50>)
 8001746:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800174a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800174c:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <MX_I2C1_Init+0x50>)
 800174e:	2200      	movs	r2, #0
 8001750:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001752:	4b09      	ldr	r3, [pc, #36]	; (8001778 <MX_I2C1_Init+0x50>)
 8001754:	2200      	movs	r2, #0
 8001756:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001758:	4b07      	ldr	r3, [pc, #28]	; (8001778 <MX_I2C1_Init+0x50>)
 800175a:	2200      	movs	r2, #0
 800175c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800175e:	4b06      	ldr	r3, [pc, #24]	; (8001778 <MX_I2C1_Init+0x50>)
 8001760:	2200      	movs	r2, #0
 8001762:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001764:	4804      	ldr	r0, [pc, #16]	; (8001778 <MX_I2C1_Init+0x50>)
 8001766:	f002 fe03 	bl	8004370 <HAL_I2C_Init>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001770:	f000 faae 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}
 8001778:	200002e8 	.word	0x200002e8
 800177c:	40005400 	.word	0x40005400
 8001780:	00061a80 	.word	0x00061a80

08001784 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08a      	sub	sp, #40	; 0x28
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a19      	ldr	r2, [pc, #100]	; (8001808 <HAL_I2C_MspInit+0x84>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d12b      	bne.n	80017fe <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	613b      	str	r3, [r7, #16]
 80017aa:	4b18      	ldr	r3, [pc, #96]	; (800180c <HAL_I2C_MspInit+0x88>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	4a17      	ldr	r2, [pc, #92]	; (800180c <HAL_I2C_MspInit+0x88>)
 80017b0:	f043 0302 	orr.w	r3, r3, #2
 80017b4:	6313      	str	r3, [r2, #48]	; 0x30
 80017b6:	4b15      	ldr	r3, [pc, #84]	; (800180c <HAL_I2C_MspInit+0x88>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017c2:	23c0      	movs	r3, #192	; 0xc0
 80017c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017c6:	2312      	movs	r3, #18
 80017c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ce:	2303      	movs	r3, #3
 80017d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017d2:	2304      	movs	r3, #4
 80017d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d6:	f107 0314 	add.w	r3, r7, #20
 80017da:	4619      	mov	r1, r3
 80017dc:	480c      	ldr	r0, [pc, #48]	; (8001810 <HAL_I2C_MspInit+0x8c>)
 80017de:	f002 fc0f 	bl	8004000 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	4b09      	ldr	r3, [pc, #36]	; (800180c <HAL_I2C_MspInit+0x88>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	4a08      	ldr	r2, [pc, #32]	; (800180c <HAL_I2C_MspInit+0x88>)
 80017ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017f0:	6413      	str	r3, [r2, #64]	; 0x40
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_I2C_MspInit+0x88>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80017fe:	bf00      	nop
 8001800:	3728      	adds	r7, #40	; 0x28
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40005400 	.word	0x40005400
 800180c:	40023800 	.word	0x40023800
 8001810:	40020400 	.word	0x40020400

08001814 <ibus_init>:
static uint8_t fail_safe_flag = 0;


/* Main Functions */
void ibus_init()
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(IBUS_UART, uart_rx_buffer, 32);
 8001818:	2220      	movs	r2, #32
 800181a:	4903      	ldr	r1, [pc, #12]	; (8001828 <ibus_init+0x14>)
 800181c:	4803      	ldr	r0, [pc, #12]	; (800182c <ibus_init+0x18>)
 800181e:	f004 fabe 	bl	8005d9e <HAL_UART_Receive_DMA>
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	200001fc 	.word	0x200001fc
 800182c:	200003f8 	.word	0x200003f8

08001830 <ibus_read>:

bool ibus_read(uint16_t* ibus_data)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	if(!ibus_is_valid()) 
 8001838:	f000 f81a 	bl	8001870 <ibus_is_valid>
 800183c:	4603      	mov	r3, r0
 800183e:	f083 0301 	eor.w	r3, r3, #1
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <ibus_read+0x1c>
		return false;
 8001848:	2300      	movs	r3, #0
 800184a:	e00d      	b.n	8001868 <ibus_read+0x38>

	if(!ibus_checksum())
 800184c:	f000 f828 	bl	80018a0 <ibus_checksum>
 8001850:	4603      	mov	r3, r0
 8001852:	f083 0301 	eor.w	r3, r3, #1
 8001856:	b2db      	uxtb	r3, r3
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <ibus_read+0x30>
		return false;
 800185c:	2300      	movs	r3, #0
 800185e:	e003      	b.n	8001868 <ibus_read+0x38>

	ibus_update(ibus_data);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f000 f84d 	bl	8001900 <ibus_update>
	return true;
 8001866:	2301      	movs	r3, #1
}
 8001868:	4618      	mov	r0, r3
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <ibus_is_valid>:


/* Sub Functions */
bool ibus_is_valid()
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
	// is it ibus?
	return (uart_rx_buffer[0] == IBUS_LENGTH && uart_rx_buffer[1] == IBUS_COMMAND40);
 8001874:	4b09      	ldr	r3, [pc, #36]	; (800189c <ibus_is_valid+0x2c>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b20      	cmp	r3, #32
 800187a:	d105      	bne.n	8001888 <ibus_is_valid+0x18>
 800187c:	4b07      	ldr	r3, [pc, #28]	; (800189c <ibus_is_valid+0x2c>)
 800187e:	785b      	ldrb	r3, [r3, #1]
 8001880:	2b40      	cmp	r3, #64	; 0x40
 8001882:	d101      	bne.n	8001888 <ibus_is_valid+0x18>
 8001884:	2301      	movs	r3, #1
 8001886:	e000      	b.n	800188a <ibus_is_valid+0x1a>
 8001888:	2300      	movs	r3, #0
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	b2db      	uxtb	r3, r3
}
 8001890:	4618      	mov	r0, r3
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	200001fc 	.word	0x200001fc

080018a0 <ibus_checksum>:

bool ibus_checksum()
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 	uint16_t checksum_cal = 0xffff;
 80018a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018aa:	81fb      	strh	r3, [r7, #14]
	uint16_t checksum_ibus;

	for(int i = 0; i < 30; i++)
 80018ac:	2300      	movs	r3, #0
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	e00a      	b.n	80018c8 <ibus_checksum+0x28>
	{
		checksum_cal -= uart_rx_buffer[i];
 80018b2:	4a12      	ldr	r2, [pc, #72]	; (80018fc <ibus_checksum+0x5c>)
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	4413      	add	r3, r2
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	89fa      	ldrh	r2, [r7, #14]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < 30; i++)
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	3301      	adds	r3, #1
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	2b1d      	cmp	r3, #29
 80018cc:	ddf1      	ble.n	80018b2 <ibus_checksum+0x12>
	}

	checksum_ibus = uart_rx_buffer[31] << 8 | uart_rx_buffer[30]; // checksum value from ibus
 80018ce:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <ibus_checksum+0x5c>)
 80018d0:	7fdb      	ldrb	r3, [r3, #31]
 80018d2:	021b      	lsls	r3, r3, #8
 80018d4:	b21a      	sxth	r2, r3
 80018d6:	4b09      	ldr	r3, [pc, #36]	; (80018fc <ibus_checksum+0x5c>)
 80018d8:	7f9b      	ldrb	r3, [r3, #30]
 80018da:	b21b      	sxth	r3, r3
 80018dc:	4313      	orrs	r3, r2
 80018de:	b21b      	sxth	r3, r3
 80018e0:	80fb      	strh	r3, [r7, #6]
	return (checksum_ibus == checksum_cal);
 80018e2:	88fa      	ldrh	r2, [r7, #6]
 80018e4:	89fb      	ldrh	r3, [r7, #14]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	bf0c      	ite	eq
 80018ea:	2301      	moveq	r3, #1
 80018ec:	2300      	movne	r3, #0
 80018ee:	b2db      	uxtb	r3, r3
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	200001fc 	.word	0x200001fc

08001900 <ibus_update>:

void ibus_update(uint16_t* ibus_data)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
	for(int ch_index = 0, bf_index = 2; ch_index < IBUS_USER_CHANNELS; ch_index++, bf_index += 2)
 8001908:	2300      	movs	r3, #0
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	2302      	movs	r3, #2
 800190e:	60bb      	str	r3, [r7, #8]
 8001910:	e018      	b.n	8001944 <ibus_update+0x44>
	{
		ibus_data[ch_index] = uart_rx_buffer[bf_index + 1] << 8 | uart_rx_buffer[bf_index];
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	3301      	adds	r3, #1
 8001916:	4a10      	ldr	r2, [pc, #64]	; (8001958 <ibus_update+0x58>)
 8001918:	5cd3      	ldrb	r3, [r2, r3]
 800191a:	021b      	lsls	r3, r3, #8
 800191c:	b21a      	sxth	r2, r3
 800191e:	490e      	ldr	r1, [pc, #56]	; (8001958 <ibus_update+0x58>)
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	440b      	add	r3, r1
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	b21b      	sxth	r3, r3
 8001928:	4313      	orrs	r3, r2
 800192a:	b219      	sxth	r1, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	4413      	add	r3, r2
 8001934:	b28a      	uxth	r2, r1
 8001936:	801a      	strh	r2, [r3, #0]
	for(int ch_index = 0, bf_index = 2; ch_index < IBUS_USER_CHANNELS; ch_index++, bf_index += 2)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	3301      	adds	r3, #1
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	3302      	adds	r3, #2
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2b09      	cmp	r3, #9
 8001948:	dde3      	ble.n	8001912 <ibus_update+0x12>
	}
}
 800194a:	bf00      	nop
 800194c:	bf00      	nop
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	200001fc 	.word	0x200001fc

0800195c <ibus_soft_failsafe>:

/**
 * @note FS-A8S don't have fail safe feature, So make software fail-safe.
 */
void ibus_soft_failsafe(uint16_t* ibus_data, uint8_t fail_safe_max)
{	
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	70fb      	strb	r3, [r7, #3]
	fail_safe_flag++;
 8001968:	4b18      	ldr	r3, [pc, #96]	; (80019cc <ibus_soft_failsafe+0x70>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	3301      	adds	r3, #1
 800196e:	b2da      	uxtb	r2, r3
 8001970:	4b16      	ldr	r3, [pc, #88]	; (80019cc <ibus_soft_failsafe+0x70>)
 8001972:	701a      	strb	r2, [r3, #0]

	if(fail_safe_max > fail_safe_flag)
 8001974:	4b15      	ldr	r3, [pc, #84]	; (80019cc <ibus_soft_failsafe+0x70>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	78fa      	ldrb	r2, [r7, #3]
 800197a:	429a      	cmp	r2, r3
 800197c:	d820      	bhi.n	80019c0 <ibus_soft_failsafe+0x64>
		return;

	// Clear ibus data
	for(int i = 0; i < IBUS_USER_CHANNELS; i++)
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	e008      	b.n	8001996 <ibus_soft_failsafe+0x3a>
		ibus_data[i] = 0;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	4413      	add	r3, r2
 800198c:	2200      	movs	r2, #0
 800198e:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < IBUS_USER_CHANNELS; i++)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	3301      	adds	r3, #1
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2b09      	cmp	r3, #9
 800199a:	ddf3      	ble.n	8001984 <ibus_soft_failsafe+0x28>

	// Clear ibus buffer
	for(int j = 0; j < IBUS_LENGTH; j++)
 800199c:	2300      	movs	r3, #0
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	e007      	b.n	80019b2 <ibus_soft_failsafe+0x56>
		uart_rx_buffer[j] = 0;
 80019a2:	4a0b      	ldr	r2, [pc, #44]	; (80019d0 <ibus_soft_failsafe+0x74>)
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	4413      	add	r3, r2
 80019a8:	2200      	movs	r2, #0
 80019aa:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < IBUS_LENGTH; j++)
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	3301      	adds	r3, #1
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	2b1f      	cmp	r3, #31
 80019b6:	ddf4      	ble.n	80019a2 <ibus_soft_failsafe+0x46>

	fail_safe_flag = 0;
 80019b8:	4b04      	ldr	r3, [pc, #16]	; (80019cc <ibus_soft_failsafe+0x70>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	701a      	strb	r2, [r3, #0]
	return;
 80019be:	e000      	b.n	80019c2 <ibus_soft_failsafe+0x66>
		return;
 80019c0:	bf00      	nop
}
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	2000021c 	.word	0x2000021c
 80019d0:	200001fc 	.word	0x200001fc

080019d4 <ibus_reset_failsafe>:

/**
 * @note This function is located in HAL_UART_RxCpltCallback.
 */
void ibus_reset_failsafe()
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
		fail_safe_flag = 0; // flag reset
 80019d8:	4b03      	ldr	r3, [pc, #12]	; (80019e8 <ibus_reset_failsafe+0x14>)
 80019da:	2200      	movs	r2, #0
 80019dc:	701a      	strb	r2, [r3, #0]
}
 80019de:	bf00      	nop
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	2000021c 	.word	0x2000021c
 80019ec:	00000000 	.word	0x00000000

080019f0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80019f0:	b5b0      	push	{r4, r5, r7, lr}
 80019f2:	b0a8      	sub	sp, #160	; 0xa0
 80019f4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	char buffer[100];
	uint8_t byte;

	float gyrotesttheta = 0;
 80019f6:	f04f 0300 	mov.w	r3, #0
 80019fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	_Bool mpu6050_ready = 0, start_balancing = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 8001a04:	2300      	movs	r3, #0
 8001a06:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
	uint16_t ibus_data[IBUS_USER_CHANNELS];
	uint32_t loop_timer = 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	float time = 0;
 8001a10:	f04f 0300 	mov.w	r3, #0
 8001a14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001a18:	f001 f99a 	bl	8002d50 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001a1c:	f000 f8de 	bl	8001bdc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001a20:	f7ff fc24 	bl	800126c <MX_GPIO_Init>
	MX_I2C1_Init();
 8001a24:	f7ff fe80 	bl	8001728 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8001a28:	f000 fffc 	bl	8002a24 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8001a2c:	f001 f824 	bl	8002a78 <MX_USART2_UART_Init>
	MX_DMA_Init();
 8001a30:	f7ff fbfc 	bl	800122c <MX_DMA_Init>
	MX_USART6_UART_Init();
 8001a34:	f001 f84a 	bl	8002acc <MX_USART6_UART_Init>
	MX_ADC1_Init();
 8001a38:	f7ff fa8a 	bl	8000f50 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	mpu6050_ready = MPU6050_Init();	//może podmienić rezystory na I2C bo musiałem dać pullup software'owy
 8001a3c:	f000 f94e 	bl	8001cdc <MPU6050_Init>
 8001a40:	4603      	mov	r3, r0
 8001a42:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
	ibus_init();
 8001a46:	f7ff fee5 	bl	8001814 <ibus_init>
	HAL_UART_Receive_IT(&huart2, &byte, sizeof(byte)); //oczekiwanie na przerwanie
 8001a4a:	f107 031b 	add.w	r3, r7, #27
 8001a4e:	2201      	movs	r2, #1
 8001a50:	4619      	mov	r1, r3
 8001a52:	485f      	ldr	r0, [pc, #380]	; (8001bd0 <main+0x1e0>)
 8001a54:	f004 f973 	bl	8005d3e <HAL_UART_Receive_IT>
	loop_timer = getCurrentMicros();
 8001a58:	f7ff fb6e 	bl	8001138 <getCurrentMicros>
 8001a5c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (mpu6050_ready) {
 8001a60:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d0fb      	beq.n	8001a60 <main+0x70>

			// Check for new received data
			Receive(&byte);
 8001a68:	f107 031b 	add.w	r3, r7, #27
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff fc8d 	bl	800138c <Receive>

			ibus_read(ibus_data);
 8001a72:	1d3b      	adds	r3, r7, #4
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff fedb 	bl	8001830 <ibus_read>
			ibus_soft_failsafe(ibus_data, 10); // if ibus is not updated, clear ibus data.
 8001a7a:	1d3b      	adds	r3, r7, #4
 8001a7c:	210a      	movs	r1, #10
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff ff6c 	bl	800195c <ibus_soft_failsafe>

			if (!start_balancing) {
 8001a84:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8001a88:	f083 0301 	eor.w	r3, r3, #1
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <main+0xaa>
				horizontal_control(ibus_data);
 8001a92:	1d3b      	adds	r3, r7, #4
 8001a94:	4618      	mov	r0, r3
 8001a96:	f000 fc7f 	bl	8002398 <horizontal_control>
			}

			float acctheta = MPU6050_Read_Accel();
 8001a9a:	f000 f995 	bl	8001dc8 <MPU6050_Read_Accel>
 8001a9e:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
			float gyrotheta = MPU6050_Read_Gyro(time);
 8001aa2:	ed97 0a24 	vldr	s0, [r7, #144]	; 0x90
 8001aa6:	f000 fa15 	bl	8001ed4 <MPU6050_Read_Gyro>
 8001aaa:	ed87 0a20 	vstr	s0, [r7, #128]	; 0x80
			gyrotesttheta += (gyrotheta * time);
 8001aae:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001ab2:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aba:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8001abe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ac2:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
			float theta = 0.9995 * (theta + gyrotheta * time)
 8001ac6:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001aca:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001ace:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ad2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001ad6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ada:	ee17 0a90 	vmov	r0, s15
 8001ade:	f7fe fd3b 	bl	8000558 <__aeabi_f2d>
 8001ae2:	a335      	add	r3, pc, #212	; (adr r3, 8001bb8 <main+0x1c8>)
 8001ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae8:	f7fe fd8e 	bl	8000608 <__aeabi_dmul>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4614      	mov	r4, r2
 8001af2:	461d      	mov	r5, r3
					+ (1 - 0.9995) * acctheta;
 8001af4:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001af8:	f7fe fd2e 	bl	8000558 <__aeabi_f2d>
 8001afc:	a330      	add	r3, pc, #192	; (adr r3, 8001bc0 <main+0x1d0>)
 8001afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b02:	f7fe fd81 	bl	8000608 <__aeabi_dmul>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	4629      	mov	r1, r5
 8001b0e:	f7fe fbc5 	bl	800029c <__adddf3>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
			float theta = 0.9995 * (theta + gyrotheta * time)
 8001b16:	4610      	mov	r0, r2
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f7ff f84d 	bl	8000bb8 <__aeabi_d2f>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
//			sprintf(buffer, "%3.2f, %3.2f, %3.2f\n\r", acctheta, gyrotesttheta,
//					theta);
//			HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 100);

			//bezpieczenstwo
			if (start_balancing == 0 && acctheta > (theta_ref - 1)
 8001b24:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8001b28:	f083 0301 	eor.w	r3, r3, #1
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d014      	beq.n	8001b5c <main+0x16c>
 8001b32:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001b36:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001bd4 <main+0x1e4>
 8001b3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b42:	dd0b      	ble.n	8001b5c <main+0x16c>
					&& acctheta < (theta_ref + 1)) {
 8001b44:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001b48:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001bd8 <main+0x1e8>
 8001b4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b54:	d502      	bpl.n	8001b5c <main+0x16c>
				start_balancing = 1;
 8001b56:	2301      	movs	r3, #1
 8001b58:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
			}

			if (start_balancing == 1)
 8001b5c:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d00c      	beq.n	8001b7e <main+0x18e>
				start_balancing = vertical_control(ibus_data, theta);
 8001b64:	1d3b      	adds	r3, r7, #4
 8001b66:	ed97 0a23 	vldr	s0, [r7, #140]	; 0x8c
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f000 fcec 	bl	8002548 <vertical_control>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	bf14      	ite	ne
 8001b76:	2301      	movne	r3, #1
 8001b78:	2300      	moveq	r3, #0
 8001b7a:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b

			/* USER CODE END WHILE */

			/* USER CODE BEGIN 3 */

			time = (getCurrentMicros() - loop_timer) * 1e-6;
 8001b7e:	f7ff fadb 	bl	8001138 <getCurrentMicros>
 8001b82:	4602      	mov	r2, r0
 8001b84:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fcc2 	bl	8000514 <__aeabi_ui2d>
 8001b90:	a30d      	add	r3, pc, #52	; (adr r3, 8001bc8 <main+0x1d8>)
 8001b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b96:	f7fe fd37 	bl	8000608 <__aeabi_dmul>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	4610      	mov	r0, r2
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	f7ff f809 	bl	8000bb8 <__aeabi_d2f>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			loop_timer = getCurrentMicros();
 8001bac:	f7ff fac4 	bl	8001138 <getCurrentMicros>
 8001bb0:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
		if (mpu6050_ready) {
 8001bb4:	e754      	b.n	8001a60 <main+0x70>
 8001bb6:	bf00      	nop
 8001bb8:	6c8b4396 	.word	0x6c8b4396
 8001bbc:	3feffbe7 	.word	0x3feffbe7
 8001bc0:	d2f1a800 	.word	0xd2f1a800
 8001bc4:	3f40624d 	.word	0x3f40624d
 8001bc8:	a0b5ed8d 	.word	0xa0b5ed8d
 8001bcc:	3eb0c6f7 	.word	0x3eb0c6f7
 8001bd0:	2000043c 	.word	0x2000043c
 8001bd4:	429e0000 	.word	0x429e0000
 8001bd8:	42a20000 	.word	0x42a20000

08001bdc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b094      	sub	sp, #80	; 0x50
 8001be0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001be2:	f107 0320 	add.w	r3, r7, #32
 8001be6:	2230      	movs	r2, #48	; 0x30
 8001be8:	2100      	movs	r1, #0
 8001bea:	4618      	mov	r0, r3
 8001bec:	f005 f9ae 	bl	8006f4c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001bf0:	f107 030c 	add.w	r3, r7, #12
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001c00:	2300      	movs	r3, #0
 8001c02:	60bb      	str	r3, [r7, #8]
 8001c04:	4b22      	ldr	r3, [pc, #136]	; (8001c90 <SystemClock_Config+0xb4>)
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	4a21      	ldr	r2, [pc, #132]	; (8001c90 <SystemClock_Config+0xb4>)
 8001c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c10:	4b1f      	ldr	r3, [pc, #124]	; (8001c90 <SystemClock_Config+0xb4>)
 8001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	607b      	str	r3, [r7, #4]
 8001c20:	4b1c      	ldr	r3, [pc, #112]	; (8001c94 <SystemClock_Config+0xb8>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c28:	4a1a      	ldr	r2, [pc, #104]	; (8001c94 <SystemClock_Config+0xb8>)
 8001c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c2e:	6013      	str	r3, [r2, #0]
 8001c30:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <SystemClock_Config+0xb8>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c38:	607b      	str	r3, [r7, #4]
 8001c3a:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c46:	2300      	movs	r3, #0
 8001c48:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001c4a:	f107 0320 	add.w	r3, r7, #32
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f003 fb4e 	bl	80052f0 <HAL_RCC_OscConfig>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <SystemClock_Config+0x82>
		Error_Handler();
 8001c5a:	f000 f839 	bl	8001cd0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001c5e:	230f      	movs	r3, #15
 8001c60:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001c62:	2301      	movs	r3, #1
 8001c64:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001c72:	f107 030c 	add.w	r3, r7, #12
 8001c76:	2100      	movs	r1, #0
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f003 fdb1 	bl	80057e0 <HAL_RCC_ClockConfig>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <SystemClock_Config+0xac>
		Error_Handler();
 8001c84:	f000 f824 	bl	8001cd0 <Error_Handler>
	}
}
 8001c88:	bf00      	nop
 8001c8a:	3750      	adds	r7, #80	; 0x50
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40023800 	.word	0x40023800
 8001c94:	40007000 	.word	0x40007000

08001c98 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) { //sprawdzenie czy przyszło z właściwego usarta
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a07      	ldr	r2, [pc, #28]	; (8001cc4 <HAL_UART_RxCpltCallback+0x2c>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d102      	bne.n	8001cb0 <HAL_UART_RxCpltCallback+0x18>
		data_available = 1;
 8001caa:	4b07      	ldr	r3, [pc, #28]	; (8001cc8 <HAL_UART_RxCpltCallback+0x30>)
 8001cac:	2201      	movs	r2, #1
 8001cae:	701a      	strb	r2, [r3, #0]
		//ponowne wywołanie oczekiwania na przerwania dzieje się po przetworzeniu danych w hoverserial.c
	}
	if (huart == IBUS_UART)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a06      	ldr	r2, [pc, #24]	; (8001ccc <HAL_UART_RxCpltCallback+0x34>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d101      	bne.n	8001cbc <HAL_UART_RxCpltCallback+0x24>
		ibus_reset_failsafe();
 8001cb8:	f7ff fe8c 	bl	80019d4 <ibus_reset_failsafe>
}
 8001cbc:	bf00      	nop
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40004400 	.word	0x40004400
 8001cc8:	200002c8 	.word	0x200002c8
 8001ccc:	200003f8 	.word	0x200003f8

08001cd0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cd4:	b672      	cpsid	i
}
 8001cd6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001cd8:	e7fe      	b.n	8001cd8 <Error_Handler+0x8>
	...

08001cdc <MPU6050_Init>:
uint32_t loop_timer;
float gyro_calibr = 0, acc_calibr = 0;

float angle_acc, Gx = 0, Gy, Gz;

_Bool MPU6050_Init(void) {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;
	_Bool mpu6050_status = 0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	71fb      	strb	r3, [r7, #7]

	// sprawdzenie czy to MPU6050

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I, 1, &check, 1, 1000);
 8001ce6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cea:	9302      	str	r3, [sp, #8]
 8001cec:	2301      	movs	r3, #1
 8001cee:	9301      	str	r3, [sp, #4]
 8001cf0:	1dbb      	adds	r3, r7, #6
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	2275      	movs	r2, #117	; 0x75
 8001cf8:	21d0      	movs	r1, #208	; 0xd0
 8001cfa:	482e      	ldr	r0, [pc, #184]	; (8001db4 <MPU6050_Init+0xd8>)
 8001cfc:	f002 fd76 	bl	80047ec <HAL_I2C_Mem_Read>

	if (check == 0x72) // powinno być 0x68 ale w tym przypadku to jakiś klon
 8001d00:	79bb      	ldrb	r3, [r7, #6]
 8001d02:	2b72      	cmp	r3, #114	; 0x72
 8001d04:	d14b      	bne.n	8001d9e <MPU6050_Init+0xc2>
			{
		// power management register: brak resetu, wyłączone tryby sleep i cycle, wyłączony czujnik temp. (bit wysoki), wewnętrzny zegar 8MHz
		Data = 0b00001000;
 8001d06:	2308      	movs	r3, #8
 8001d08:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1, 1, &Data, 1, 1000);
 8001d0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d0e:	9302      	str	r3, [sp, #8]
 8001d10:	2301      	movs	r3, #1
 8001d12:	9301      	str	r3, [sp, #4]
 8001d14:	1d7b      	adds	r3, r7, #5
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	2301      	movs	r3, #1
 8001d1a:	226b      	movs	r2, #107	; 0x6b
 8001d1c:	21d0      	movs	r1, #208	; 0xd0
 8001d1e:	4825      	ldr	r0, [pc, #148]	; (8001db4 <MPU6050_Init+0xd8>)
 8001d20:	f002 fc6a 	bl	80045f8 <HAL_I2C_Mem_Write>
		//Data = 0x07;
		//HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV, 1, &Data, 1, 1000);

		// konfiguracja akcelerometru
		// bity 3 = 0; 4 = 0 - zakres akcelerometru na +-0g, pozostałe bity to selftest bądź zastrzeżone (oba nieistotne)
		Data = 0x00;
 8001d24:	2300      	movs	r3, #0
 8001d26:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG, 1, &Data, 1,
 8001d28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d2c:	9302      	str	r3, [sp, #8]
 8001d2e:	2301      	movs	r3, #1
 8001d30:	9301      	str	r3, [sp, #4]
 8001d32:	1d7b      	adds	r3, r7, #5
 8001d34:	9300      	str	r3, [sp, #0]
 8001d36:	2301      	movs	r3, #1
 8001d38:	221c      	movs	r2, #28
 8001d3a:	21d0      	movs	r1, #208	; 0xd0
 8001d3c:	481d      	ldr	r0, [pc, #116]	; (8001db4 <MPU6050_Init+0xd8>)
 8001d3e:	f002 fc5b 	bl	80045f8 <HAL_I2C_Mem_Write>
				1000);

		// konfiguracja żyroskopu
		// bity 3 = 0; 4 = 0 - zakres żyroskopu na +-250 deg/s, pozostałe bity to selftest bądź zastrzeżone (oba nieistotne)
		Data = 0x00;
 8001d42:	2300      	movs	r3, #0
 8001d44:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG, 1, &Data, 1, 1000);
 8001d46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d4a:	9302      	str	r3, [sp, #8]
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	9301      	str	r3, [sp, #4]
 8001d50:	1d7b      	adds	r3, r7, #5
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	2301      	movs	r3, #1
 8001d56:	221b      	movs	r2, #27
 8001d58:	21d0      	movs	r1, #208	; 0xd0
 8001d5a:	4816      	ldr	r0, [pc, #88]	; (8001db4 <MPU6050_Init+0xd8>)
 8001d5c:	f002 fc4c 	bl	80045f8 <HAL_I2C_Mem_Write>

		Data = 0b00000101;	////ostatnie 3 bity to filtr LPF, 43Hz 011
 8001d60:	2305      	movs	r3, #5
 8001d62:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x1A, 1, &Data, 1, 1000);
 8001d64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d68:	9302      	str	r3, [sp, #8]
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	9301      	str	r3, [sp, #4]
 8001d6e:	1d7b      	adds	r3, r7, #5
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	2301      	movs	r3, #1
 8001d74:	221a      	movs	r2, #26
 8001d76:	21d0      	movs	r1, #208	; 0xd0
 8001d78:	480e      	ldr	r0, [pc, #56]	; (8001db4 <MPU6050_Init+0xd8>)
 8001d7a:	f002 fc3d 	bl	80045f8 <HAL_I2C_Mem_Write>

		gyro_calibr = kalibracja_gyro();
 8001d7e:	f000 f9d1 	bl	8002124 <kalibracja_gyro>
 8001d82:	eef0 7a40 	vmov.f32	s15, s0
 8001d86:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <MPU6050_Init+0xdc>)
 8001d88:	edc3 7a00 	vstr	s15, [r3]
		acc_calibr = kalibracja_acc();
 8001d8c:	f000 f90c 	bl	8001fa8 <kalibracja_acc>
 8001d90:	eef0 7a40 	vmov.f32	s15, s0
 8001d94:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <MPU6050_Init+0xe0>)
 8001d96:	edc3 7a00 	vstr	s15, [r3]
		mpu6050_status = 1;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	71fb      	strb	r3, [r7, #7]
	}
	loop_timer = HAL_GetTick();
 8001d9e:	f001 f83d 	bl	8002e1c <HAL_GetTick>
 8001da2:	4603      	mov	r3, r0
 8001da4:	4a06      	ldr	r2, [pc, #24]	; (8001dc0 <MPU6050_Init+0xe4>)
 8001da6:	6013      	str	r3, [r2, #0]
	return mpu6050_status;
 8001da8:	79fb      	ldrb	r3, [r7, #7]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	200002e8 	.word	0x200002e8
 8001db8:	2000022c 	.word	0x2000022c
 8001dbc:	20000230 	.word	0x20000230
 8001dc0:	20000348 	.word	0x20000348
 8001dc4:	00000000 	.word	0x00000000

08001dc8 <MPU6050_Read_Accel>:

float MPU6050_Read_Accel(void) {
 8001dc8:	b5b0      	push	{r4, r5, r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// odczytanie 6 bajtów począwszy od rejestru ACCEL_XOUT_H, wymagane dwa do obliczeń

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H, 1, Rec_Data, 6, 1000);
 8001dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dd2:	9302      	str	r3, [sp, #8]
 8001dd4:	2306      	movs	r3, #6
 8001dd6:	9301      	str	r3, [sp, #4]
 8001dd8:	463b      	mov	r3, r7
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	2301      	movs	r3, #1
 8001dde:	223b      	movs	r2, #59	; 0x3b
 8001de0:	21d0      	movs	r1, #208	; 0xd0
 8001de2:	4835      	ldr	r0, [pc, #212]	; (8001eb8 <MPU6050_Read_Accel+0xf0>)
 8001de4:	f002 fd02 	bl	80047ec <HAL_I2C_Mem_Read>

	acc_rawX = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8001de8:	783b      	ldrb	r3, [r7, #0]
 8001dea:	021b      	lsls	r3, r3, #8
 8001dec:	b21a      	sxth	r2, r3
 8001dee:	787b      	ldrb	r3, [r7, #1]
 8001df0:	b21b      	sxth	r3, r3
 8001df2:	4313      	orrs	r3, r2
 8001df4:	b21a      	sxth	r2, r3
 8001df6:	4b31      	ldr	r3, [pc, #196]	; (8001ebc <MPU6050_Read_Accel+0xf4>)
 8001df8:	801a      	strh	r2, [r3, #0]
	acc_rawY = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001dfa:	78bb      	ldrb	r3, [r7, #2]
 8001dfc:	021b      	lsls	r3, r3, #8
 8001dfe:	b21a      	sxth	r2, r3
 8001e00:	78fb      	ldrb	r3, [r7, #3]
 8001e02:	b21b      	sxth	r3, r3
 8001e04:	4313      	orrs	r3, r2
 8001e06:	b21a      	sxth	r2, r3
 8001e08:	4b2d      	ldr	r3, [pc, #180]	; (8001ec0 <MPU6050_Read_Accel+0xf8>)
 8001e0a:	801a      	strh	r2, [r3, #0]
	acc_rawZ = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8001e0c:	793b      	ldrb	r3, [r7, #4]
 8001e0e:	021b      	lsls	r3, r3, #8
 8001e10:	b21a      	sxth	r2, r3
 8001e12:	797b      	ldrb	r3, [r7, #5]
 8001e14:	b21b      	sxth	r3, r3
 8001e16:	4313      	orrs	r3, r2
 8001e18:	b21a      	sxth	r2, r3
 8001e1a:	4b2a      	ldr	r3, [pc, #168]	; (8001ec4 <MPU6050_Read_Accel+0xfc>)
 8001e1c:	801a      	strh	r2, [r3, #0]

	//kąt jest atanem ilorazu przyspieszeń zatem nie trzeba konwertować do g

	angle_acc = atan2((float) acc_rawX, (float) acc_rawZ) * -180 / M_PI;
 8001e1e:	4b27      	ldr	r3, [pc, #156]	; (8001ebc <MPU6050_Read_Accel+0xf4>)
 8001e20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e24:	ee07 3a90 	vmov	s15, r3
 8001e28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e2c:	ee17 0a90 	vmov	r0, s15
 8001e30:	f7fe fb92 	bl	8000558 <__aeabi_f2d>
 8001e34:	4604      	mov	r4, r0
 8001e36:	460d      	mov	r5, r1
 8001e38:	4b22      	ldr	r3, [pc, #136]	; (8001ec4 <MPU6050_Read_Accel+0xfc>)
 8001e3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e3e:	ee07 3a90 	vmov	s15, r3
 8001e42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e46:	ee17 0a90 	vmov	r0, s15
 8001e4a:	f7fe fb85 	bl	8000558 <__aeabi_f2d>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	ec43 2b11 	vmov	d1, r2, r3
 8001e56:	ec45 4b10 	vmov	d0, r4, r5
 8001e5a:	f007 ff13 	bl	8009c84 <atan2>
 8001e5e:	ec51 0b10 	vmov	r0, r1, d0
 8001e62:	f04f 0200 	mov.w	r2, #0
 8001e66:	4b18      	ldr	r3, [pc, #96]	; (8001ec8 <MPU6050_Read_Accel+0x100>)
 8001e68:	f7fe fbce 	bl	8000608 <__aeabi_dmul>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	4610      	mov	r0, r2
 8001e72:	4619      	mov	r1, r3
 8001e74:	a30e      	add	r3, pc, #56	; (adr r3, 8001eb0 <MPU6050_Read_Accel+0xe8>)
 8001e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e7a:	f7fe fcef 	bl	800085c <__aeabi_ddiv>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	4610      	mov	r0, r2
 8001e84:	4619      	mov	r1, r3
 8001e86:	f7fe fe97 	bl	8000bb8 <__aeabi_d2f>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	4a0f      	ldr	r2, [pc, #60]	; (8001ecc <MPU6050_Read_Accel+0x104>)
 8001e8e:	6013      	str	r3, [r2, #0]

	return angle_acc - acc_calibr;
 8001e90:	4b0e      	ldr	r3, [pc, #56]	; (8001ecc <MPU6050_Read_Accel+0x104>)
 8001e92:	ed93 7a00 	vldr	s14, [r3]
 8001e96:	4b0e      	ldr	r3, [pc, #56]	; (8001ed0 <MPU6050_Read_Accel+0x108>)
 8001e98:	edd3 7a00 	vldr	s15, [r3]
 8001e9c:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8001ea0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bdb0      	pop	{r4, r5, r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	f3af 8000 	nop.w
 8001eb0:	54442d18 	.word	0x54442d18
 8001eb4:	400921fb 	.word	0x400921fb
 8001eb8:	200002e8 	.word	0x200002e8
 8001ebc:	2000021e 	.word	0x2000021e
 8001ec0:	20000220 	.word	0x20000220
 8001ec4:	20000222 	.word	0x20000222
 8001ec8:	c0668000 	.word	0xc0668000
 8001ecc:	2000033c 	.word	0x2000033c
 8001ed0:	20000230 	.word	0x20000230

08001ed4 <MPU6050_Read_Gyro>:

float MPU6050_Read_Gyro(float time) {
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af04      	add	r7, sp, #16
 8001eda:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t Rec_Data[6];	//odczytanie rejestru GYRO_XOUT_H
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H, 1, Rec_Data, 6, 1000);
 8001ede:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ee2:	9302      	str	r3, [sp, #8]
 8001ee4:	2306      	movs	r3, #6
 8001ee6:	9301      	str	r3, [sp, #4]
 8001ee8:	f107 0308 	add.w	r3, r7, #8
 8001eec:	9300      	str	r3, [sp, #0]
 8001eee:	2301      	movs	r3, #1
 8001ef0:	2243      	movs	r2, #67	; 0x43
 8001ef2:	21d0      	movs	r1, #208	; 0xd0
 8001ef4:	4825      	ldr	r0, [pc, #148]	; (8001f8c <MPU6050_Read_Gyro+0xb8>)
 8001ef6:	f002 fc79 	bl	80047ec <HAL_I2C_Mem_Read>
	Gyro_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8001efa:	7a3b      	ldrb	r3, [r7, #8]
 8001efc:	021b      	lsls	r3, r3, #8
 8001efe:	b21a      	sxth	r2, r3
 8001f00:	7a7b      	ldrb	r3, [r7, #9]
 8001f02:	b21b      	sxth	r3, r3
 8001f04:	4313      	orrs	r3, r2
 8001f06:	b21a      	sxth	r2, r3
 8001f08:	4b21      	ldr	r3, [pc, #132]	; (8001f90 <MPU6050_Read_Gyro+0xbc>)
 8001f0a:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001f0c:	7abb      	ldrb	r3, [r7, #10]
 8001f0e:	021b      	lsls	r3, r3, #8
 8001f10:	b21a      	sxth	r2, r3
 8001f12:	7afb      	ldrb	r3, [r7, #11]
 8001f14:	b21b      	sxth	r3, r3
 8001f16:	4313      	orrs	r3, r2
 8001f18:	b21a      	sxth	r2, r3
 8001f1a:	4b1e      	ldr	r3, [pc, #120]	; (8001f94 <MPU6050_Read_Gyro+0xc0>)
 8001f1c:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8001f1e:	7b3b      	ldrb	r3, [r7, #12]
 8001f20:	021b      	lsls	r3, r3, #8
 8001f22:	b21a      	sxth	r2, r3
 8001f24:	7b7b      	ldrb	r3, [r7, #13]
 8001f26:	b21b      	sxth	r3, r3
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	b21a      	sxth	r2, r3
 8001f2c:	4b1a      	ldr	r3, [pc, #104]	; (8001f98 <MPU6050_Read_Gyro+0xc4>)
 8001f2e:	801a      	strh	r2, [r3, #0]

	Gyro_Y_RAW -= gyro_calibr;          //uwzględnienie odczytu kalibracyjnego
 8001f30:	4b18      	ldr	r3, [pc, #96]	; (8001f94 <MPU6050_Read_Gyro+0xc0>)
 8001f32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f36:	ee07 3a90 	vmov	s15, r3
 8001f3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f3e:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <MPU6050_Read_Gyro+0xc8>)
 8001f40:	edd3 7a00 	vldr	s15, [r3]
 8001f44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f4c:	ee17 3a90 	vmov	r3, s15
 8001f50:	b21a      	sxth	r2, r3
 8001f52:	4b10      	ldr	r3, [pc, #64]	; (8001f94 <MPU6050_Read_Gyro+0xc0>)
 8001f54:	801a      	strh	r2, [r3, #0]
	Gx = Gyro_Y_RAW / 131;
 8001f56:	4b0f      	ldr	r3, [pc, #60]	; (8001f94 <MPU6050_Read_Gyro+0xc0>)
 8001f58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f5c:	4a10      	ldr	r2, [pc, #64]	; (8001fa0 <MPU6050_Read_Gyro+0xcc>)
 8001f5e:	fb82 1203 	smull	r1, r2, r2, r3
 8001f62:	1152      	asrs	r2, r2, #5
 8001f64:	17db      	asrs	r3, r3, #31
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	b21b      	sxth	r3, r3
 8001f6a:	ee07 3a90 	vmov	s15, r3
 8001f6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f72:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <MPU6050_Read_Gyro+0xd0>)
 8001f74:	edc3 7a00 	vstr	s15, [r3]
	//Gx += Gyro_X_RAW * time / 131; //kąt z poprzedniej pętli + kąt przebyty w tej pętli - 131 LSB dla 1deg/s, czas petli wynosi 0.004s, zatem pokonana droga wyniesie 131/0.004 deg
	return (Gx);
 8001f78:	4b0a      	ldr	r3, [pc, #40]	; (8001fa4 <MPU6050_Read_Gyro+0xd0>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	ee07 3a90 	vmov	s15, r3
}
 8001f80:	eeb0 0a67 	vmov.f32	s0, s15
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	200002e8 	.word	0x200002e8
 8001f90:	20000224 	.word	0x20000224
 8001f94:	20000226 	.word	0x20000226
 8001f98:	20000228 	.word	0x20000228
 8001f9c:	2000022c 	.word	0x2000022c
 8001fa0:	3e88cb3d 	.word	0x3e88cb3d
 8001fa4:	20000234 	.word	0x20000234

08001fa8 <kalibracja_acc>:

float kalibracja_acc(void) {
 8001fa8:	b5b0      	push	{r4, r5, r7, lr}
 8001faa:	b088      	sub	sp, #32
 8001fac:	af04      	add	r7, sp, #16
	for (int i = 0; i < 5000; i++) {
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	e085      	b.n	80020c0 <kalibracja_acc+0x118>
		if (i % 400 == 0)
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	4b52      	ldr	r3, [pc, #328]	; (8002100 <kalibracja_acc+0x158>)
 8001fb8:	fb83 1302 	smull	r1, r3, r3, r2
 8001fbc:	11d9      	asrs	r1, r3, #7
 8001fbe:	17d3      	asrs	r3, r2, #31
 8001fc0:	1acb      	subs	r3, r1, r3
 8001fc2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001fc6:	fb01 f303 	mul.w	r3, r1, r3
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d104      	bne.n	8001fda <kalibracja_acc+0x32>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001fd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fd4:	484b      	ldr	r0, [pc, #300]	; (8002104 <kalibracja_acc+0x15c>)
 8001fd6:	f002 f9b0 	bl	800433a <HAL_GPIO_TogglePin>

		uint8_t Rec_Data[6];
		HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H, 1, Rec_Data, 6,
 8001fda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fde:	9302      	str	r3, [sp, #8]
 8001fe0:	2306      	movs	r3, #6
 8001fe2:	9301      	str	r3, [sp, #4]
 8001fe4:	1d3b      	adds	r3, r7, #4
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	2301      	movs	r3, #1
 8001fea:	223b      	movs	r2, #59	; 0x3b
 8001fec:	21d0      	movs	r1, #208	; 0xd0
 8001fee:	4846      	ldr	r0, [pc, #280]	; (8002108 <kalibracja_acc+0x160>)
 8001ff0:	f002 fbfc 	bl	80047ec <HAL_I2C_Mem_Read>
				1000);
		acc_rawX = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8001ff4:	793b      	ldrb	r3, [r7, #4]
 8001ff6:	021b      	lsls	r3, r3, #8
 8001ff8:	b21a      	sxth	r2, r3
 8001ffa:	797b      	ldrb	r3, [r7, #5]
 8001ffc:	b21b      	sxth	r3, r3
 8001ffe:	4313      	orrs	r3, r2
 8002000:	b21a      	sxth	r2, r3
 8002002:	4b42      	ldr	r3, [pc, #264]	; (800210c <kalibracja_acc+0x164>)
 8002004:	801a      	strh	r2, [r3, #0]
		acc_rawY = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8002006:	79bb      	ldrb	r3, [r7, #6]
 8002008:	021b      	lsls	r3, r3, #8
 800200a:	b21a      	sxth	r2, r3
 800200c:	79fb      	ldrb	r3, [r7, #7]
 800200e:	b21b      	sxth	r3, r3
 8002010:	4313      	orrs	r3, r2
 8002012:	b21a      	sxth	r2, r3
 8002014:	4b3e      	ldr	r3, [pc, #248]	; (8002110 <kalibracja_acc+0x168>)
 8002016:	801a      	strh	r2, [r3, #0]
		acc_rawZ = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8002018:	7a3b      	ldrb	r3, [r7, #8]
 800201a:	021b      	lsls	r3, r3, #8
 800201c:	b21a      	sxth	r2, r3
 800201e:	7a7b      	ldrb	r3, [r7, #9]
 8002020:	b21b      	sxth	r3, r3
 8002022:	4313      	orrs	r3, r2
 8002024:	b21a      	sxth	r2, r3
 8002026:	4b3b      	ldr	r3, [pc, #236]	; (8002114 <kalibracja_acc+0x16c>)
 8002028:	801a      	strh	r2, [r3, #0]

		//kąt jest atanem ilorazu przyspieszeń zatem nie trzeba konwertować do g

		acc_calibr += atan2((float) acc_rawX, (float) acc_rawZ) * -180 / M_PI;
 800202a:	4b38      	ldr	r3, [pc, #224]	; (800210c <kalibracja_acc+0x164>)
 800202c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002030:	ee07 3a90 	vmov	s15, r3
 8002034:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002038:	ee17 0a90 	vmov	r0, s15
 800203c:	f7fe fa8c 	bl	8000558 <__aeabi_f2d>
 8002040:	4604      	mov	r4, r0
 8002042:	460d      	mov	r5, r1
 8002044:	4b33      	ldr	r3, [pc, #204]	; (8002114 <kalibracja_acc+0x16c>)
 8002046:	f9b3 3000 	ldrsh.w	r3, [r3]
 800204a:	ee07 3a90 	vmov	s15, r3
 800204e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002052:	ee17 0a90 	vmov	r0, s15
 8002056:	f7fe fa7f 	bl	8000558 <__aeabi_f2d>
 800205a:	4602      	mov	r2, r0
 800205c:	460b      	mov	r3, r1
 800205e:	ec43 2b11 	vmov	d1, r2, r3
 8002062:	ec45 4b10 	vmov	d0, r4, r5
 8002066:	f007 fe0d 	bl	8009c84 <atan2>
 800206a:	ec51 0b10 	vmov	r0, r1, d0
 800206e:	f04f 0200 	mov.w	r2, #0
 8002072:	4b29      	ldr	r3, [pc, #164]	; (8002118 <kalibracja_acc+0x170>)
 8002074:	f7fe fac8 	bl	8000608 <__aeabi_dmul>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	4610      	mov	r0, r2
 800207e:	4619      	mov	r1, r3
 8002080:	a31d      	add	r3, pc, #116	; (adr r3, 80020f8 <kalibracja_acc+0x150>)
 8002082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002086:	f7fe fbe9 	bl	800085c <__aeabi_ddiv>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	4614      	mov	r4, r2
 8002090:	461d      	mov	r5, r3
 8002092:	4b22      	ldr	r3, [pc, #136]	; (800211c <kalibracja_acc+0x174>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f7fe fa5e 	bl	8000558 <__aeabi_f2d>
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	4620      	mov	r0, r4
 80020a2:	4629      	mov	r1, r5
 80020a4:	f7fe f8fa 	bl	800029c <__adddf3>
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	4610      	mov	r0, r2
 80020ae:	4619      	mov	r1, r3
 80020b0:	f7fe fd82 	bl	8000bb8 <__aeabi_d2f>
 80020b4:	4603      	mov	r3, r0
 80020b6:	4a19      	ldr	r2, [pc, #100]	; (800211c <kalibracja_acc+0x174>)
 80020b8:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 5000; i++) {
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	3301      	adds	r3, #1
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f241 3287 	movw	r2, #4999	; 0x1387
 80020c6:	4293      	cmp	r3, r2
 80020c8:	f77f af74 	ble.w	8001fb4 <kalibracja_acc+0xc>
	}
	acc_calibr /= 5000;
 80020cc:	4b13      	ldr	r3, [pc, #76]	; (800211c <kalibracja_acc+0x174>)
 80020ce:	ed93 7a00 	vldr	s14, [r3]
 80020d2:	eddf 6a13 	vldr	s13, [pc, #76]	; 8002120 <kalibracja_acc+0x178>
 80020d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020da:	4b10      	ldr	r3, [pc, #64]	; (800211c <kalibracja_acc+0x174>)
 80020dc:	edc3 7a00 	vstr	s15, [r3]

	return acc_calibr;
 80020e0:	4b0e      	ldr	r3, [pc, #56]	; (800211c <kalibracja_acc+0x174>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	ee07 3a90 	vmov	s15, r3
}
 80020e8:	eeb0 0a67 	vmov.f32	s0, s15
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bdb0      	pop	{r4, r5, r7, pc}
 80020f2:	bf00      	nop
 80020f4:	f3af 8000 	nop.w
 80020f8:	54442d18 	.word	0x54442d18
 80020fc:	400921fb 	.word	0x400921fb
 8002100:	51eb851f 	.word	0x51eb851f
 8002104:	40020800 	.word	0x40020800
 8002108:	200002e8 	.word	0x200002e8
 800210c:	2000021e 	.word	0x2000021e
 8002110:	20000220 	.word	0x20000220
 8002114:	20000222 	.word	0x20000222
 8002118:	c0668000 	.word	0xc0668000
 800211c:	20000230 	.word	0x20000230
 8002120:	459c4000 	.word	0x459c4000

08002124 <kalibracja_gyro>:

float kalibracja_gyro(void) {
 8002124:	b580      	push	{r7, lr}
 8002126:	b088      	sub	sp, #32
 8002128:	af04      	add	r7, sp, #16
	for (int i = 0; i < 5000; i++) {
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	e04c      	b.n	80021ca <kalibracja_gyro+0xa6>
		if (i % 400 == 0)
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	4b32      	ldr	r3, [pc, #200]	; (80021fc <kalibracja_gyro+0xd8>)
 8002134:	fb83 1302 	smull	r1, r3, r3, r2
 8002138:	11d9      	asrs	r1, r3, #7
 800213a:	17d3      	asrs	r3, r2, #31
 800213c:	1acb      	subs	r3, r1, r3
 800213e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002142:	fb01 f303 	mul.w	r3, r1, r3
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b00      	cmp	r3, #0
 800214a:	d104      	bne.n	8002156 <kalibracja_gyro+0x32>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); //migająca dioda - informacja o procesie kalibracji
 800214c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002150:	482b      	ldr	r0, [pc, #172]	; (8002200 <kalibracja_gyro+0xdc>)
 8002152:	f002 f8f2 	bl	800433a <HAL_GPIO_TogglePin>
		uint8_t Rec_Data[6];
		HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H, 1, Rec_Data, 6,
 8002156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800215a:	9302      	str	r3, [sp, #8]
 800215c:	2306      	movs	r3, #6
 800215e:	9301      	str	r3, [sp, #4]
 8002160:	1d3b      	adds	r3, r7, #4
 8002162:	9300      	str	r3, [sp, #0]
 8002164:	2301      	movs	r3, #1
 8002166:	2243      	movs	r2, #67	; 0x43
 8002168:	21d0      	movs	r1, #208	; 0xd0
 800216a:	4826      	ldr	r0, [pc, #152]	; (8002204 <kalibracja_gyro+0xe0>)
 800216c:	f002 fb3e 	bl	80047ec <HAL_I2C_Mem_Read>
				1000);

		Gyro_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8002170:	793b      	ldrb	r3, [r7, #4]
 8002172:	021b      	lsls	r3, r3, #8
 8002174:	b21a      	sxth	r2, r3
 8002176:	797b      	ldrb	r3, [r7, #5]
 8002178:	b21b      	sxth	r3, r3
 800217a:	4313      	orrs	r3, r2
 800217c:	b21a      	sxth	r2, r3
 800217e:	4b22      	ldr	r3, [pc, #136]	; (8002208 <kalibracja_gyro+0xe4>)
 8002180:	801a      	strh	r2, [r3, #0]
		Gyro_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8002182:	79bb      	ldrb	r3, [r7, #6]
 8002184:	021b      	lsls	r3, r3, #8
 8002186:	b21a      	sxth	r2, r3
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	b21b      	sxth	r3, r3
 800218c:	4313      	orrs	r3, r2
 800218e:	b21a      	sxth	r2, r3
 8002190:	4b1e      	ldr	r3, [pc, #120]	; (800220c <kalibracja_gyro+0xe8>)
 8002192:	801a      	strh	r2, [r3, #0]
		Gyro_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8002194:	7a3b      	ldrb	r3, [r7, #8]
 8002196:	021b      	lsls	r3, r3, #8
 8002198:	b21a      	sxth	r2, r3
 800219a:	7a7b      	ldrb	r3, [r7, #9]
 800219c:	b21b      	sxth	r3, r3
 800219e:	4313      	orrs	r3, r2
 80021a0:	b21a      	sxth	r2, r3
 80021a2:	4b1b      	ldr	r3, [pc, #108]	; (8002210 <kalibracja_gyro+0xec>)
 80021a4:	801a      	strh	r2, [r3, #0]
		gyro_calibr += Gyro_Y_RAW;
 80021a6:	4b19      	ldr	r3, [pc, #100]	; (800220c <kalibracja_gyro+0xe8>)
 80021a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021ac:	ee07 3a90 	vmov	s15, r3
 80021b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021b4:	4b17      	ldr	r3, [pc, #92]	; (8002214 <kalibracja_gyro+0xf0>)
 80021b6:	edd3 7a00 	vldr	s15, [r3]
 80021ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021be:	4b15      	ldr	r3, [pc, #84]	; (8002214 <kalibracja_gyro+0xf0>)
 80021c0:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 5000; i++) {
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	3301      	adds	r3, #1
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f241 3287 	movw	r2, #4999	; 0x1387
 80021d0:	4293      	cmp	r3, r2
 80021d2:	ddad      	ble.n	8002130 <kalibracja_gyro+0xc>

	}
	gyro_calibr /= 5000;                                      //wartosc srednia
 80021d4:	4b0f      	ldr	r3, [pc, #60]	; (8002214 <kalibracja_gyro+0xf0>)
 80021d6:	ed93 7a00 	vldr	s14, [r3]
 80021da:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8002218 <kalibracja_gyro+0xf4>
 80021de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021e2:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <kalibracja_gyro+0xf0>)
 80021e4:	edc3 7a00 	vstr	s15, [r3]

	return gyro_calibr;
 80021e8:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <kalibracja_gyro+0xf0>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	ee07 3a90 	vmov	s15, r3
}
 80021f0:	eeb0 0a67 	vmov.f32	s0, s15
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	51eb851f 	.word	0x51eb851f
 8002200:	40020800 	.word	0x40020800
 8002204:	200002e8 	.word	0x200002e8
 8002208:	20000224 	.word	0x20000224
 800220c:	20000226 	.word	0x20000226
 8002210:	20000228 	.word	0x20000228
 8002214:	2000022c 	.word	0x2000022c
 8002218:	459c4000 	.word	0x459c4000
 800221c:	00000000 	.word	0x00000000

08002220 <pid_calculations>:

#include "pid.h"

float e_n, poprzedni_e_n = 0;

float pid_calculations(float angle, float *suma_e_n, float steering_angle) {
 8002220:	b5b0      	push	{r4, r5, r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	ed87 0a03 	vstr	s0, [r7, #12]
 800222a:	60b8      	str	r0, [r7, #8]
 800222c:	edc7 0a01 	vstr	s1, [r7, #4]
	//definicja uchybu - aktualny kat odjac kat zadany
	//theta_ref += x;
	float potentiometer = potentiometer_value();
 8002230:	f7fe ffb4 	bl	800119c <potentiometer_value>
 8002234:	ed87 0a04 	vstr	s0, [r7, #16]

	e_n = (theta_ref - steering_angle) - angle - potentiometer;
 8002238:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8002378 <pid_calculations+0x158>
 800223c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002240:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002244:	edd7 7a03 	vldr	s15, [r7, #12]
 8002248:	ee37 7a67 	vsub.f32	s14, s14, s15
 800224c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002250:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002254:	4b49      	ldr	r3, [pc, #292]	; (800237c <pid_calculations+0x15c>)
 8002256:	edc3 7a00 	vstr	s15, [r3]

	//Obliczenie i ograniczenie sumy wszystkich błędów
	*suma_e_n += e_n;
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	ed93 7a00 	vldr	s14, [r3]
 8002260:	4b46      	ldr	r3, [pc, #280]	; (800237c <pid_calculations+0x15c>)
 8002262:	edd3 7a00 	vldr	s15, [r3]
 8002266:	ee77 7a27 	vadd.f32	s15, s14, s15
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	edc3 7a00 	vstr	s15, [r3]
	if (*suma_e_n > ograniczenie_regulatora)
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	edd3 7a00 	vldr	s15, [r3]
 8002276:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8002380 <pid_calculations+0x160>
 800227a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800227e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002282:	dd03      	ble.n	800228c <pid_calculations+0x6c>
		*suma_e_n = ograniczenie_regulatora;
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	4a3f      	ldr	r2, [pc, #252]	; (8002384 <pid_calculations+0x164>)
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	e00c      	b.n	80022a6 <pid_calculations+0x86>
	else if (*suma_e_n < -ograniczenie_regulatora)
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	edd3 7a00 	vldr	s15, [r3]
 8002292:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8002388 <pid_calculations+0x168>
 8002296:	eef4 7ac7 	vcmpe.f32	s15, s14
 800229a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800229e:	d502      	bpl.n	80022a6 <pid_calculations+0x86>
		*suma_e_n = -ograniczenie_regulatora;
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	4a3a      	ldr	r2, [pc, #232]	; (800238c <pid_calculations+0x16c>)
 80022a4:	601a      	str	r2, [r3, #0]
	//PID
	float output = k_p * e_n + k_i * *suma_e_n + k_d * (e_n - poprzedni_e_n);
 80022a6:	4b35      	ldr	r3, [pc, #212]	; (800237c <pid_calculations+0x15c>)
 80022a8:	edd3 7a00 	vldr	s15, [r3]
 80022ac:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80022b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022b4:	ee17 0a90 	vmov	r0, s15
 80022b8:	f7fe f94e 	bl	8000558 <__aeabi_f2d>
 80022bc:	4604      	mov	r4, r0
 80022be:	460d      	mov	r5, r1
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7fe f947 	bl	8000558 <__aeabi_f2d>
 80022ca:	a329      	add	r3, pc, #164	; (adr r3, 8002370 <pid_calculations+0x150>)
 80022cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d0:	f7fe f99a 	bl	8000608 <__aeabi_dmul>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	4620      	mov	r0, r4
 80022da:	4629      	mov	r1, r5
 80022dc:	f7fd ffde 	bl	800029c <__adddf3>
 80022e0:	4602      	mov	r2, r0
 80022e2:	460b      	mov	r3, r1
 80022e4:	4614      	mov	r4, r2
 80022e6:	461d      	mov	r5, r3
 80022e8:	4b24      	ldr	r3, [pc, #144]	; (800237c <pid_calculations+0x15c>)
 80022ea:	ed93 7a00 	vldr	s14, [r3]
 80022ee:	4b28      	ldr	r3, [pc, #160]	; (8002390 <pid_calculations+0x170>)
 80022f0:	edd3 7a00 	vldr	s15, [r3]
 80022f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022f8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002394 <pid_calculations+0x174>
 80022fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002300:	ee17 0a90 	vmov	r0, s15
 8002304:	f7fe f928 	bl	8000558 <__aeabi_f2d>
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	4620      	mov	r0, r4
 800230e:	4629      	mov	r1, r5
 8002310:	f7fd ffc4 	bl	800029c <__adddf3>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	4610      	mov	r0, r2
 800231a:	4619      	mov	r1, r3
 800231c:	f7fe fc4c 	bl	8000bb8 <__aeabi_d2f>
 8002320:	4603      	mov	r3, r0
 8002322:	617b      	str	r3, [r7, #20]

	//ograniczenie wyjścia PID
	if (output > ograniczenie_regulatora)
 8002324:	edd7 7a05 	vldr	s15, [r7, #20]
 8002328:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002380 <pid_calculations+0x160>
 800232c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002334:	dd02      	ble.n	800233c <pid_calculations+0x11c>
		output = ograniczenie_regulatora;
 8002336:	4b13      	ldr	r3, [pc, #76]	; (8002384 <pid_calculations+0x164>)
 8002338:	617b      	str	r3, [r7, #20]
 800233a:	e00a      	b.n	8002352 <pid_calculations+0x132>
	else if (output < -ograniczenie_regulatora)
 800233c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002340:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002388 <pid_calculations+0x168>
 8002344:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800234c:	d501      	bpl.n	8002352 <pid_calculations+0x132>
		output = -ograniczenie_regulatora;
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <pid_calculations+0x16c>)
 8002350:	617b      	str	r3, [r7, #20]

	//Zapamiętanie ostatniego błędu
	poprzedni_e_n = e_n;
 8002352:	4b0a      	ldr	r3, [pc, #40]	; (800237c <pid_calculations+0x15c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a0e      	ldr	r2, [pc, #56]	; (8002390 <pid_calculations+0x170>)
 8002358:	6013      	str	r3, [r2, #0]

	//przełącznik histerezowy (zapobiega ciągłym próbom regulacji w pobliżu theta_ref)
//			if (pid_output < theta_ref+0.5 && pid_output > theta_ref-0.5)
//				pid_output = 0;
	return output;
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	ee07 3a90 	vmov	s15, r3
}
 8002360:	eeb0 0a67 	vmov.f32	s0, s15
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bdb0      	pop	{r4, r5, r7, pc}
 800236a:	bf00      	nop
 800236c:	f3af 8000 	nop.w
 8002370:	33333333 	.word	0x33333333
 8002374:	3fd33333 	.word	0x3fd33333
 8002378:	42a00000 	.word	0x42a00000
 800237c:	2000034c 	.word	0x2000034c
 8002380:	43c80000 	.word	0x43c80000
 8002384:	43c80000 	.word	0x43c80000
 8002388:	c3c80000 	.word	0xc3c80000
 800238c:	c3c80000 	.word	0xc3c80000
 8002390:	20000238 	.word	0x20000238
 8002394:	44960000 	.word	0x44960000

08002398 <horizontal_control>:
int16_t VR_out = 0;
int16_t V_nierownosc = 0;
int16_t Relay_SW = 0;
int16_t Funkcja_SW = 0;

void horizontal_control(uint16_t *control_data) {
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af02      	add	r7, sp, #8
 800239e:	6078      	str	r0, [r7, #4]
	V_bok_apar = control_data[1 - 1];	//predkosc boki
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	881b      	ldrh	r3, [r3, #0]
 80023a4:	b21a      	sxth	r2, r3
 80023a6:	4b5d      	ldr	r3, [pc, #372]	; (800251c <horizontal_control+0x184>)
 80023a8:	801a      	strh	r2, [r3, #0]
	V_apar = control_data[2 - 1];   //predkosc
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	3302      	adds	r3, #2
 80023ae:	881b      	ldrh	r3, [r3, #0]
 80023b0:	b21a      	sxth	r2, r3
 80023b2:	4b5b      	ldr	r3, [pc, #364]	; (8002520 <horizontal_control+0x188>)
 80023b4:	801a      	strh	r2, [r3, #0]
	Funkcja_SW = control_data[7 - 1];
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	330c      	adds	r3, #12
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	b21a      	sxth	r2, r3
 80023be:	4b59      	ldr	r3, [pc, #356]	; (8002524 <horizontal_control+0x18c>)
 80023c0:	801a      	strh	r2, [r3, #0]
	Relay_SW = control_data[6 - 1];	//zalacz silniki
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	330a      	adds	r3, #10
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	b21a      	sxth	r2, r3
 80023ca:	4b57      	ldr	r3, [pc, #348]	; (8002528 <horizontal_control+0x190>)
 80023cc:	801a      	strh	r2, [r3, #0]
	V_max_apar = control_data[5 - 1];	//regulacja predkosci silnikow
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	3308      	adds	r3, #8
 80023d2:	881b      	ldrh	r3, [r3, #0]
 80023d4:	b21a      	sxth	r2, r3
 80023d6:	4b55      	ldr	r3, [pc, #340]	; (800252c <horizontal_control+0x194>)
 80023d8:	801a      	strh	r2, [r3, #0]

	V_max = map(V_max_apar, 1000, 2000, 0, 500);
 80023da:	4b54      	ldr	r3, [pc, #336]	; (800252c <horizontal_control+0x194>)
 80023dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	2300      	movs	r3, #0
 80023ea:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80023ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80023f2:	f7fe fe43 	bl	800107c <map>
 80023f6:	4603      	mov	r3, r0
 80023f8:	b21a      	sxth	r2, r3
 80023fa:	4b4d      	ldr	r3, [pc, #308]	; (8002530 <horizontal_control+0x198>)
 80023fc:	801a      	strh	r2, [r3, #0]
	//                                      / tu jest wartocm maskymalnej rotacji
	Fi_max = map(Fi_max_apar, 1000, 2000, 0, 200);
 80023fe:	4b4d      	ldr	r3, [pc, #308]	; (8002534 <horizontal_control+0x19c>)
 8002400:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002404:	4618      	mov	r0, r3
 8002406:	23c8      	movs	r3, #200	; 0xc8
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	2300      	movs	r3, #0
 800240c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002410:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002414:	f7fe fe32 	bl	800107c <map>
 8002418:	4603      	mov	r3, r0
 800241a:	b21a      	sxth	r2, r3
 800241c:	4b46      	ldr	r3, [pc, #280]	; (8002538 <horizontal_control+0x1a0>)
 800241e:	801a      	strh	r2, [r3, #0]

	if ((Relay_SW > 1900) && (Relay_SW < 2100)) {
 8002420:	4b41      	ldr	r3, [pc, #260]	; (8002528 <horizontal_control+0x190>)
 8002422:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002426:	f240 726c 	movw	r2, #1900	; 0x76c
 800242a:	4293      	cmp	r3, r2
 800242c:	dd0a      	ble.n	8002444 <horizontal_control+0xac>
 800242e:	4b3e      	ldr	r3, [pc, #248]	; (8002528 <horizontal_control+0x190>)
 8002430:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002434:	f640 0233 	movw	r2, #2099	; 0x833
 8002438:	4293      	cmp	r3, r2
 800243a:	dc03      	bgt.n	8002444 <horizontal_control+0xac>
		Jazda = 1;
 800243c:	4b3f      	ldr	r3, [pc, #252]	; (800253c <horizontal_control+0x1a4>)
 800243e:	2201      	movs	r2, #1
 8002440:	801a      	strh	r2, [r3, #0]
 8002442:	e002      	b.n	800244a <horizontal_control+0xb2>
	} else {
		Jazda = 0;
 8002444:	4b3d      	ldr	r3, [pc, #244]	; (800253c <horizontal_control+0x1a4>)
 8002446:	2200      	movs	r2, #0
 8002448:	801a      	strh	r2, [r3, #0]
	}

	if (Jazda == 1) {
 800244a:	4b3c      	ldr	r3, [pc, #240]	; (800253c <horizontal_control+0x1a4>)
 800244c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d12f      	bne.n	80024b4 <horizontal_control+0x11c>
		Robot_V = map(V_apar, 1000, 2000, -V_max, V_max);
 8002454:	4b32      	ldr	r3, [pc, #200]	; (8002520 <horizontal_control+0x188>)
 8002456:	f9b3 3000 	ldrsh.w	r3, [r3]
 800245a:	4618      	mov	r0, r3
 800245c:	4b34      	ldr	r3, [pc, #208]	; (8002530 <horizontal_control+0x198>)
 800245e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002462:	425b      	negs	r3, r3
 8002464:	4a32      	ldr	r2, [pc, #200]	; (8002530 <horizontal_control+0x198>)
 8002466:	f9b2 2000 	ldrsh.w	r2, [r2]
 800246a:	9200      	str	r2, [sp, #0]
 800246c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002470:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002474:	f7fe fe02 	bl	800107c <map>
 8002478:	4603      	mov	r3, r0
 800247a:	b21a      	sxth	r2, r3
 800247c:	4b30      	ldr	r3, [pc, #192]	; (8002540 <horizontal_control+0x1a8>)
 800247e:	801a      	strh	r2, [r3, #0]
		Robot_Fi = -map(V_bok_apar, 1000, 2000, -Fi_max, Fi_max);
 8002480:	4b26      	ldr	r3, [pc, #152]	; (800251c <horizontal_control+0x184>)
 8002482:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002486:	4618      	mov	r0, r3
 8002488:	4b2b      	ldr	r3, [pc, #172]	; (8002538 <horizontal_control+0x1a0>)
 800248a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800248e:	425b      	negs	r3, r3
 8002490:	4a29      	ldr	r2, [pc, #164]	; (8002538 <horizontal_control+0x1a0>)
 8002492:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002496:	9200      	str	r2, [sp, #0]
 8002498:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800249c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80024a0:	f7fe fdec 	bl	800107c <map>
 80024a4:	4603      	mov	r3, r0
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	425b      	negs	r3, r3
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	b21a      	sxth	r2, r3
 80024ae:	4b25      	ldr	r3, [pc, #148]	; (8002544 <horizontal_control+0x1ac>)
 80024b0:	801a      	strh	r2, [r3, #0]
 80024b2:	e005      	b.n	80024c0 <horizontal_control+0x128>
	} else {
		Robot_V = 0;
 80024b4:	4b22      	ldr	r3, [pc, #136]	; (8002540 <horizontal_control+0x1a8>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	801a      	strh	r2, [r3, #0]
		Robot_Fi = 0;
 80024ba:	4b22      	ldr	r3, [pc, #136]	; (8002544 <horizontal_control+0x1ac>)
 80024bc:	2200      	movs	r2, #0
 80024be:	801a      	strh	r2, [r3, #0]
	}
	if ((Robot_V < 5) && (Robot_V > -5))
 80024c0:	4b1f      	ldr	r3, [pc, #124]	; (8002540 <horizontal_control+0x1a8>)
 80024c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	dc08      	bgt.n	80024dc <horizontal_control+0x144>
 80024ca:	4b1d      	ldr	r3, [pc, #116]	; (8002540 <horizontal_control+0x1a8>)
 80024cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024d0:	f113 0f04 	cmn.w	r3, #4
 80024d4:	db02      	blt.n	80024dc <horizontal_control+0x144>
		Robot_V = 0;
 80024d6:	4b1a      	ldr	r3, [pc, #104]	; (8002540 <horizontal_control+0x1a8>)
 80024d8:	2200      	movs	r2, #0
 80024da:	801a      	strh	r2, [r3, #0]
	if ((Robot_Fi < 5) && (Robot_Fi > -5))
 80024dc:	4b19      	ldr	r3, [pc, #100]	; (8002544 <horizontal_control+0x1ac>)
 80024de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	dc08      	bgt.n	80024f8 <horizontal_control+0x160>
 80024e6:	4b17      	ldr	r3, [pc, #92]	; (8002544 <horizontal_control+0x1ac>)
 80024e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024ec:	f113 0f04 	cmn.w	r3, #4
 80024f0:	db02      	blt.n	80024f8 <horizontal_control+0x160>
		Robot_Fi = 0;
 80024f2:	4b14      	ldr	r3, [pc, #80]	; (8002544 <horizontal_control+0x1ac>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	801a      	strh	r2, [r3, #0]

	Send(Robot_Fi, Robot_V);
 80024f8:	4b12      	ldr	r3, [pc, #72]	; (8002544 <horizontal_control+0x1ac>)
 80024fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024fe:	4a10      	ldr	r2, [pc, #64]	; (8002540 <horizontal_control+0x1a8>)
 8002500:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002504:	4611      	mov	r1, r2
 8002506:	4618      	mov	r0, r3
 8002508:	f7fe ff10 	bl	800132c <Send>
	HAL_Delay(7);//need wait a little before next usage, may reduce later (should be at least 7 ms)
 800250c:	2007      	movs	r0, #7
 800250e:	f000 fc91 	bl	8002e34 <HAL_Delay>
}
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	20000244 	.word	0x20000244
 8002520:	20000242 	.word	0x20000242
 8002524:	20000250 	.word	0x20000250
 8002528:	2000024e 	.word	0x2000024e
 800252c:	20000246 	.word	0x20000246
 8002530:	2000024a 	.word	0x2000024a
 8002534:	20000248 	.word	0x20000248
 8002538:	2000024c 	.word	0x2000024c
 800253c:	2000023c 	.word	0x2000023c
 8002540:	2000023e 	.word	0x2000023e
 8002544:	20000240 	.word	0x20000240

08002548 <vertical_control>:

float pid_output = 0, suma_e_n = 0, steering_angle = 0;
int start;
int vertical_control(uint16_t *control_data, float angle) {
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af02      	add	r7, sp, #8
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	ed87 0a00 	vstr	s0, [r7]

	V_bok_apar = control_data[1 - 1];	//predkosc boki
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	b21a      	sxth	r2, r3
 800255a:	4b81      	ldr	r3, [pc, #516]	; (8002760 <vertical_control+0x218>)
 800255c:	801a      	strh	r2, [r3, #0]
	V_apar = control_data[2 - 1];   //predkosc
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	3302      	adds	r3, #2
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	b21a      	sxth	r2, r3
 8002566:	4b7f      	ldr	r3, [pc, #508]	; (8002764 <vertical_control+0x21c>)
 8002568:	801a      	strh	r2, [r3, #0]
	Funkcja_SW = control_data[7 - 1];
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	330c      	adds	r3, #12
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	b21a      	sxth	r2, r3
 8002572:	4b7d      	ldr	r3, [pc, #500]	; (8002768 <vertical_control+0x220>)
 8002574:	801a      	strh	r2, [r3, #0]
	Relay_SW = control_data[6 - 1];	//zalacz silniki
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	330a      	adds	r3, #10
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	b21a      	sxth	r2, r3
 800257e:	4b7b      	ldr	r3, [pc, #492]	; (800276c <vertical_control+0x224>)
 8002580:	801a      	strh	r2, [r3, #0]
	V_max_apar = control_data[5 - 1];	//regulacja predkosci silnikow
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3308      	adds	r3, #8
 8002586:	881b      	ldrh	r3, [r3, #0]
 8002588:	b21a      	sxth	r2, r3
 800258a:	4b79      	ldr	r3, [pc, #484]	; (8002770 <vertical_control+0x228>)
 800258c:	801a      	strh	r2, [r3, #0]

	V_max = map(V_max_apar, 1000, 2000, 0, 7); //zadawany kat
 800258e:	4b78      	ldr	r3, [pc, #480]	; (8002770 <vertical_control+0x228>)
 8002590:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002594:	4618      	mov	r0, r3
 8002596:	2307      	movs	r3, #7
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	2300      	movs	r3, #0
 800259c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80025a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80025a4:	f7fe fd6a 	bl	800107c <map>
 80025a8:	4603      	mov	r3, r0
 80025aa:	b21a      	sxth	r2, r3
 80025ac:	4b71      	ldr	r3, [pc, #452]	; (8002774 <vertical_control+0x22c>)
 80025ae:	801a      	strh	r2, [r3, #0]
	//                                      / tu jest wartocm maskymalnej rotacji
	Fi_max = map(Fi_max_apar, 1000, 2000, 0, 200);
 80025b0:	4b71      	ldr	r3, [pc, #452]	; (8002778 <vertical_control+0x230>)
 80025b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025b6:	4618      	mov	r0, r3
 80025b8:	23c8      	movs	r3, #200	; 0xc8
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	2300      	movs	r3, #0
 80025be:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80025c2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80025c6:	f7fe fd59 	bl	800107c <map>
 80025ca:	4603      	mov	r3, r0
 80025cc:	b21a      	sxth	r2, r3
 80025ce:	4b6b      	ldr	r3, [pc, #428]	; (800277c <vertical_control+0x234>)
 80025d0:	801a      	strh	r2, [r3, #0]

	steering_angle = mapfloat((float) V_apar, 1000, 2000, (float) -V_max,
 80025d2:	4b64      	ldr	r3, [pc, #400]	; (8002764 <vertical_control+0x21c>)
 80025d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025d8:	ee07 3a90 	vmov	s15, r3
 80025dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025e0:	4b64      	ldr	r3, [pc, #400]	; (8002774 <vertical_control+0x22c>)
 80025e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025e6:	425b      	negs	r3, r3
 80025e8:	ee07 3a10 	vmov	s14, r3
 80025ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80025f0:	4b60      	ldr	r3, [pc, #384]	; (8002774 <vertical_control+0x22c>)
 80025f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025f6:	ee06 3a90 	vmov	s13, r3
 80025fa:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80025fe:	eeb0 2a66 	vmov.f32	s4, s13
 8002602:	eef0 1a47 	vmov.f32	s3, s14
 8002606:	ed9f 1a5e 	vldr	s2, [pc, #376]	; 8002780 <vertical_control+0x238>
 800260a:	eddf 0a5e 	vldr	s1, [pc, #376]	; 8002784 <vertical_control+0x23c>
 800260e:	eeb0 0a67 	vmov.f32	s0, s15
 8002612:	f7fe fd4f 	bl	80010b4 <mapfloat>
 8002616:	eef0 7a40 	vmov.f32	s15, s0
 800261a:	4b5b      	ldr	r3, [pc, #364]	; (8002788 <vertical_control+0x240>)
 800261c:	edc3 7a00 	vstr	s15, [r3]
			(float) V_max);
	float pid_output = pid_calculations(angle, &suma_e_n, steering_angle);
 8002620:	4b59      	ldr	r3, [pc, #356]	; (8002788 <vertical_control+0x240>)
 8002622:	edd3 7a00 	vldr	s15, [r3]
 8002626:	eef0 0a67 	vmov.f32	s1, s15
 800262a:	4858      	ldr	r0, [pc, #352]	; (800278c <vertical_control+0x244>)
 800262c:	ed97 0a00 	vldr	s0, [r7]
 8002630:	f7ff fdf6 	bl	8002220 <pid_calculations>
 8002634:	ed87 0a03 	vstr	s0, [r7, #12]

	if ((Relay_SW > 1900) && (Relay_SW < 2100) && angle > (theta_ref - 45)
 8002638:	4b4c      	ldr	r3, [pc, #304]	; (800276c <vertical_control+0x224>)
 800263a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800263e:	f240 726c 	movw	r2, #1900	; 0x76c
 8002642:	4293      	cmp	r3, r2
 8002644:	dd26      	ble.n	8002694 <vertical_control+0x14c>
 8002646:	4b49      	ldr	r3, [pc, #292]	; (800276c <vertical_control+0x224>)
 8002648:	f9b3 3000 	ldrsh.w	r3, [r3]
 800264c:	f640 0233 	movw	r2, #2099	; 0x833
 8002650:	4293      	cmp	r3, r2
 8002652:	dc1f      	bgt.n	8002694 <vertical_control+0x14c>
 8002654:	edd7 7a00 	vldr	s15, [r7]
 8002658:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8002790 <vertical_control+0x248>
 800265c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002664:	dd16      	ble.n	8002694 <vertical_control+0x14c>
			&& angle < (theta_ref + 45) && (Funkcja_SW > 1500)) {
 8002666:	edd7 7a00 	vldr	s15, [r7]
 800266a:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8002794 <vertical_control+0x24c>
 800266e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002676:	d50d      	bpl.n	8002694 <vertical_control+0x14c>
 8002678:	4b3b      	ldr	r3, [pc, #236]	; (8002768 <vertical_control+0x220>)
 800267a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800267e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002682:	4293      	cmp	r3, r2
 8002684:	dd06      	ble.n	8002694 <vertical_control+0x14c>
		Jazda = 1;
 8002686:	4b44      	ldr	r3, [pc, #272]	; (8002798 <vertical_control+0x250>)
 8002688:	2201      	movs	r2, #1
 800268a:	801a      	strh	r2, [r3, #0]
		start = 1;
 800268c:	4b43      	ldr	r3, [pc, #268]	; (800279c <vertical_control+0x254>)
 800268e:	2201      	movs	r2, #1
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	e00c      	b.n	80026ae <vertical_control+0x166>
	} else {
		Jazda = 0;
 8002694:	4b40      	ldr	r3, [pc, #256]	; (8002798 <vertical_control+0x250>)
 8002696:	2200      	movs	r2, #0
 8002698:	801a      	strh	r2, [r3, #0]
		suma_e_n = 0;
 800269a:	4b3c      	ldr	r3, [pc, #240]	; (800278c <vertical_control+0x244>)
 800269c:	f04f 0200 	mov.w	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
		pid_output = 0;
 80026a2:	f04f 0300 	mov.w	r3, #0
 80026a6:	60fb      	str	r3, [r7, #12]
		start = 0;
 80026a8:	4b3c      	ldr	r3, [pc, #240]	; (800279c <vertical_control+0x254>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]
	}

	if (Jazda == 1) {
 80026ae:	4b3a      	ldr	r3, [pc, #232]	; (8002798 <vertical_control+0x250>)
 80026b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d122      	bne.n	80026fe <vertical_control+0x1b6>
		Robot_V = pid_output;
 80026b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80026bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026c0:	ee17 3a90 	vmov	r3, s15
 80026c4:	b21a      	sxth	r2, r3
 80026c6:	4b36      	ldr	r3, [pc, #216]	; (80027a0 <vertical_control+0x258>)
 80026c8:	801a      	strh	r2, [r3, #0]
		Robot_Fi = -map(V_bok_apar, 1000, 2000, -Fi_max, Fi_max);
 80026ca:	4b25      	ldr	r3, [pc, #148]	; (8002760 <vertical_control+0x218>)
 80026cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026d0:	4618      	mov	r0, r3
 80026d2:	4b2a      	ldr	r3, [pc, #168]	; (800277c <vertical_control+0x234>)
 80026d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026d8:	425b      	negs	r3, r3
 80026da:	4a28      	ldr	r2, [pc, #160]	; (800277c <vertical_control+0x234>)
 80026dc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80026e0:	9200      	str	r2, [sp, #0]
 80026e2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80026e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80026ea:	f7fe fcc7 	bl	800107c <map>
 80026ee:	4603      	mov	r3, r0
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	425b      	negs	r3, r3
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	b21a      	sxth	r2, r3
 80026f8:	4b2a      	ldr	r3, [pc, #168]	; (80027a4 <vertical_control+0x25c>)
 80026fa:	801a      	strh	r2, [r3, #0]
 80026fc:	e005      	b.n	800270a <vertical_control+0x1c2>
	} else {
		Robot_V = 0;
 80026fe:	4b28      	ldr	r3, [pc, #160]	; (80027a0 <vertical_control+0x258>)
 8002700:	2200      	movs	r2, #0
 8002702:	801a      	strh	r2, [r3, #0]
		Robot_Fi = 0;
 8002704:	4b27      	ldr	r3, [pc, #156]	; (80027a4 <vertical_control+0x25c>)
 8002706:	2200      	movs	r2, #0
 8002708:	801a      	strh	r2, [r3, #0]
	}
	if ((Robot_V < 1) && (Robot_V > -1))
 800270a:	4b25      	ldr	r3, [pc, #148]	; (80027a0 <vertical_control+0x258>)
 800270c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002710:	2b00      	cmp	r3, #0
 8002712:	dc07      	bgt.n	8002724 <vertical_control+0x1dc>
 8002714:	4b22      	ldr	r3, [pc, #136]	; (80027a0 <vertical_control+0x258>)
 8002716:	f9b3 3000 	ldrsh.w	r3, [r3]
 800271a:	2b00      	cmp	r3, #0
 800271c:	db02      	blt.n	8002724 <vertical_control+0x1dc>
		Robot_V = 0;
 800271e:	4b20      	ldr	r3, [pc, #128]	; (80027a0 <vertical_control+0x258>)
 8002720:	2200      	movs	r2, #0
 8002722:	801a      	strh	r2, [r3, #0]
	if ((Robot_Fi < 5) && (Robot_Fi > -5))
 8002724:	4b1f      	ldr	r3, [pc, #124]	; (80027a4 <vertical_control+0x25c>)
 8002726:	f9b3 3000 	ldrsh.w	r3, [r3]
 800272a:	2b04      	cmp	r3, #4
 800272c:	dc08      	bgt.n	8002740 <vertical_control+0x1f8>
 800272e:	4b1d      	ldr	r3, [pc, #116]	; (80027a4 <vertical_control+0x25c>)
 8002730:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002734:	f113 0f04 	cmn.w	r3, #4
 8002738:	db02      	blt.n	8002740 <vertical_control+0x1f8>
		Robot_Fi = 0;
 800273a:	4b1a      	ldr	r3, [pc, #104]	; (80027a4 <vertical_control+0x25c>)
 800273c:	2200      	movs	r2, #0
 800273e:	801a      	strh	r2, [r3, #0]

//	Robot_V = pid_output;
//	Robot_Fi = 0;
	Send(Robot_Fi, Robot_V);
 8002740:	4b18      	ldr	r3, [pc, #96]	; (80027a4 <vertical_control+0x25c>)
 8002742:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002746:	4a16      	ldr	r2, [pc, #88]	; (80027a0 <vertical_control+0x258>)
 8002748:	f9b2 2000 	ldrsh.w	r2, [r2]
 800274c:	4611      	mov	r1, r2
 800274e:	4618      	mov	r0, r3
 8002750:	f7fe fdec 	bl	800132c <Send>
	return start;
 8002754:	4b11      	ldr	r3, [pc, #68]	; (800279c <vertical_control+0x254>)
 8002756:	681b      	ldr	r3, [r3, #0]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	20000244 	.word	0x20000244
 8002764:	20000242 	.word	0x20000242
 8002768:	20000250 	.word	0x20000250
 800276c:	2000024e 	.word	0x2000024e
 8002770:	20000246 	.word	0x20000246
 8002774:	2000024a 	.word	0x2000024a
 8002778:	20000248 	.word	0x20000248
 800277c:	2000024c 	.word	0x2000024c
 8002780:	44fa0000 	.word	0x44fa0000
 8002784:	447a0000 	.word	0x447a0000
 8002788:	20000258 	.word	0x20000258
 800278c:	20000254 	.word	0x20000254
 8002790:	420c0000 	.word	0x420c0000
 8002794:	42fa0000 	.word	0x42fa0000
 8002798:	2000023c 	.word	0x2000023c
 800279c:	20000350 	.word	0x20000350
 80027a0:	2000023e 	.word	0x2000023e
 80027a4:	20000240 	.word	0x20000240

080027a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	607b      	str	r3, [r7, #4]
 80027b2:	4b10      	ldr	r3, [pc, #64]	; (80027f4 <HAL_MspInit+0x4c>)
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	4a0f      	ldr	r2, [pc, #60]	; (80027f4 <HAL_MspInit+0x4c>)
 80027b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027bc:	6453      	str	r3, [r2, #68]	; 0x44
 80027be:	4b0d      	ldr	r3, [pc, #52]	; (80027f4 <HAL_MspInit+0x4c>)
 80027c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027c6:	607b      	str	r3, [r7, #4]
 80027c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	603b      	str	r3, [r7, #0]
 80027ce:	4b09      	ldr	r3, [pc, #36]	; (80027f4 <HAL_MspInit+0x4c>)
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	4a08      	ldr	r2, [pc, #32]	; (80027f4 <HAL_MspInit+0x4c>)
 80027d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d8:	6413      	str	r3, [r2, #64]	; 0x40
 80027da:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <HAL_MspInit+0x4c>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e2:	603b      	str	r3, [r7, #0]
 80027e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	40023800 	.word	0x40023800

080027f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027fc:	e7fe      	b.n	80027fc <NMI_Handler+0x4>

080027fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027fe:	b480      	push	{r7}
 8002800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002802:	e7fe      	b.n	8002802 <HardFault_Handler+0x4>

08002804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002808:	e7fe      	b.n	8002808 <MemManage_Handler+0x4>

0800280a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800280a:	b480      	push	{r7}
 800280c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800280e:	e7fe      	b.n	800280e <BusFault_Handler+0x4>

08002810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002814:	e7fe      	b.n	8002814 <UsageFault_Handler+0x4>

08002816 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002816:	b480      	push	{r7}
 8002818:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800281a:	bf00      	nop
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002828:	bf00      	nop
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002832:	b480      	push	{r7}
 8002834:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002836:	bf00      	nop
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002844:	f000 fad6 	bl	8002df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002848:	bf00      	nop
 800284a:	bd80      	pop	{r7, pc}

0800284c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002850:	4802      	ldr	r0, [pc, #8]	; (800285c <USART2_IRQHandler+0x10>)
 8002852:	f003 fad5 	bl	8005e00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	2000043c 	.word	0x2000043c

08002860 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002864:	4802      	ldr	r0, [pc, #8]	; (8002870 <DMA2_Stream2_IRQHandler+0x10>)
 8002866:	f001 f961 	bl	8003b2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800286a:	bf00      	nop
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20000354 	.word	0x20000354

08002874 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
	return 1;
 8002878:	2301      	movs	r3, #1
}
 800287a:	4618      	mov	r0, r3
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <_kill>:

int _kill(int pid, int sig)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800288e:	f004 fb33 	bl	8006ef8 <__errno>
 8002892:	4603      	mov	r3, r0
 8002894:	2216      	movs	r2, #22
 8002896:	601a      	str	r2, [r3, #0]
	return -1;
 8002898:	f04f 33ff 	mov.w	r3, #4294967295
}
 800289c:	4618      	mov	r0, r3
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <_exit>:

void _exit (int status)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80028ac:	f04f 31ff 	mov.w	r1, #4294967295
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7ff ffe7 	bl	8002884 <_kill>
	while (1) {}		/* Make sure we hang here */
 80028b6:	e7fe      	b.n	80028b6 <_exit+0x12>

080028b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028c4:	2300      	movs	r3, #0
 80028c6:	617b      	str	r3, [r7, #20]
 80028c8:	e00a      	b.n	80028e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80028ca:	f3af 8000 	nop.w
 80028ce:	4601      	mov	r1, r0
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	1c5a      	adds	r2, r3, #1
 80028d4:	60ba      	str	r2, [r7, #8]
 80028d6:	b2ca      	uxtb	r2, r1
 80028d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	3301      	adds	r3, #1
 80028de:	617b      	str	r3, [r7, #20]
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	dbf0      	blt.n	80028ca <_read+0x12>
	}

return len;
 80028e8:	687b      	ldr	r3, [r7, #4]
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3718      	adds	r7, #24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b086      	sub	sp, #24
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	60f8      	str	r0, [r7, #12]
 80028fa:	60b9      	str	r1, [r7, #8]
 80028fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028fe:	2300      	movs	r3, #0
 8002900:	617b      	str	r3, [r7, #20]
 8002902:	e009      	b.n	8002918 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	1c5a      	adds	r2, r3, #1
 8002908:	60ba      	str	r2, [r7, #8]
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	3301      	adds	r3, #1
 8002916:	617b      	str	r3, [r7, #20]
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	429a      	cmp	r2, r3
 800291e:	dbf1      	blt.n	8002904 <_write+0x12>
	}
	return len;
 8002920:	687b      	ldr	r3, [r7, #4]
}
 8002922:	4618      	mov	r0, r3
 8002924:	3718      	adds	r7, #24
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <_close>:

int _close(int file)
{
 800292a:	b480      	push	{r7}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
	return -1;
 8002932:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002936:	4618      	mov	r0, r3
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
 800294a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002952:	605a      	str	r2, [r3, #4]
	return 0;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <_isatty>:

int _isatty(int file)
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
	return 1;
 800296a:	2301      	movs	r3, #1
}
 800296c:	4618      	mov	r0, r3
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
	return 0;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
	...

08002994 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800299c:	4a14      	ldr	r2, [pc, #80]	; (80029f0 <_sbrk+0x5c>)
 800299e:	4b15      	ldr	r3, [pc, #84]	; (80029f4 <_sbrk+0x60>)
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029a8:	4b13      	ldr	r3, [pc, #76]	; (80029f8 <_sbrk+0x64>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d102      	bne.n	80029b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029b0:	4b11      	ldr	r3, [pc, #68]	; (80029f8 <_sbrk+0x64>)
 80029b2:	4a12      	ldr	r2, [pc, #72]	; (80029fc <_sbrk+0x68>)
 80029b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029b6:	4b10      	ldr	r3, [pc, #64]	; (80029f8 <_sbrk+0x64>)
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4413      	add	r3, r2
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d207      	bcs.n	80029d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029c4:	f004 fa98 	bl	8006ef8 <__errno>
 80029c8:	4603      	mov	r3, r0
 80029ca:	220c      	movs	r2, #12
 80029cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029ce:	f04f 33ff 	mov.w	r3, #4294967295
 80029d2:	e009      	b.n	80029e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029d4:	4b08      	ldr	r3, [pc, #32]	; (80029f8 <_sbrk+0x64>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029da:	4b07      	ldr	r3, [pc, #28]	; (80029f8 <_sbrk+0x64>)
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4413      	add	r3, r2
 80029e2:	4a05      	ldr	r2, [pc, #20]	; (80029f8 <_sbrk+0x64>)
 80029e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029e6:	68fb      	ldr	r3, [r7, #12]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3718      	adds	r7, #24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	20010000 	.word	0x20010000
 80029f4:	00000400 	.word	0x00000400
 80029f8:	2000025c 	.word	0x2000025c
 80029fc:	20000498 	.word	0x20000498

08002a00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a04:	4b06      	ldr	r3, [pc, #24]	; (8002a20 <SystemInit+0x20>)
 8002a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0a:	4a05      	ldr	r2, [pc, #20]	; (8002a20 <SystemInit+0x20>)
 8002a0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a14:	bf00      	nop
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	e000ed00 	.word	0xe000ed00

08002a24 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a28:	4b11      	ldr	r3, [pc, #68]	; (8002a70 <MX_USART1_UART_Init+0x4c>)
 8002a2a:	4a12      	ldr	r2, [pc, #72]	; (8002a74 <MX_USART1_UART_Init+0x50>)
 8002a2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002a2e:	4b10      	ldr	r3, [pc, #64]	; (8002a70 <MX_USART1_UART_Init+0x4c>)
 8002a30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a36:	4b0e      	ldr	r3, [pc, #56]	; (8002a70 <MX_USART1_UART_Init+0x4c>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a3c:	4b0c      	ldr	r3, [pc, #48]	; (8002a70 <MX_USART1_UART_Init+0x4c>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a42:	4b0b      	ldr	r3, [pc, #44]	; (8002a70 <MX_USART1_UART_Init+0x4c>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a48:	4b09      	ldr	r3, [pc, #36]	; (8002a70 <MX_USART1_UART_Init+0x4c>)
 8002a4a:	220c      	movs	r2, #12
 8002a4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a4e:	4b08      	ldr	r3, [pc, #32]	; (8002a70 <MX_USART1_UART_Init+0x4c>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a54:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <MX_USART1_UART_Init+0x4c>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a5a:	4805      	ldr	r0, [pc, #20]	; (8002a70 <MX_USART1_UART_Init+0x4c>)
 8002a5c:	f003 f890 	bl	8005b80 <HAL_UART_Init>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002a66:	f7ff f933 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a6a:	bf00      	nop
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	200003b4 	.word	0x200003b4
 8002a74:	40011000 	.word	0x40011000

08002a78 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a7c:	4b11      	ldr	r3, [pc, #68]	; (8002ac4 <MX_USART2_UART_Init+0x4c>)
 8002a7e:	4a12      	ldr	r2, [pc, #72]	; (8002ac8 <MX_USART2_UART_Init+0x50>)
 8002a80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002a82:	4b10      	ldr	r3, [pc, #64]	; (8002ac4 <MX_USART2_UART_Init+0x4c>)
 8002a84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a8a:	4b0e      	ldr	r3, [pc, #56]	; (8002ac4 <MX_USART2_UART_Init+0x4c>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a90:	4b0c      	ldr	r3, [pc, #48]	; (8002ac4 <MX_USART2_UART_Init+0x4c>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a96:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <MX_USART2_UART_Init+0x4c>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a9c:	4b09      	ldr	r3, [pc, #36]	; (8002ac4 <MX_USART2_UART_Init+0x4c>)
 8002a9e:	220c      	movs	r2, #12
 8002aa0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002aa2:	4b08      	ldr	r3, [pc, #32]	; (8002ac4 <MX_USART2_UART_Init+0x4c>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002aa8:	4b06      	ldr	r3, [pc, #24]	; (8002ac4 <MX_USART2_UART_Init+0x4c>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002aae:	4805      	ldr	r0, [pc, #20]	; (8002ac4 <MX_USART2_UART_Init+0x4c>)
 8002ab0:	f003 f866 	bl	8005b80 <HAL_UART_Init>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002aba:	f7ff f909 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002abe:	bf00      	nop
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	2000043c 	.word	0x2000043c
 8002ac8:	40004400 	.word	0x40004400

08002acc <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002ad0:	4b11      	ldr	r3, [pc, #68]	; (8002b18 <MX_USART6_UART_Init+0x4c>)
 8002ad2:	4a12      	ldr	r2, [pc, #72]	; (8002b1c <MX_USART6_UART_Init+0x50>)
 8002ad4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002ad6:	4b10      	ldr	r3, [pc, #64]	; (8002b18 <MX_USART6_UART_Init+0x4c>)
 8002ad8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002adc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002ade:	4b0e      	ldr	r3, [pc, #56]	; (8002b18 <MX_USART6_UART_Init+0x4c>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002ae4:	4b0c      	ldr	r3, [pc, #48]	; (8002b18 <MX_USART6_UART_Init+0x4c>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002aea:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <MX_USART6_UART_Init+0x4c>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002af0:	4b09      	ldr	r3, [pc, #36]	; (8002b18 <MX_USART6_UART_Init+0x4c>)
 8002af2:	220c      	movs	r2, #12
 8002af4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002af6:	4b08      	ldr	r3, [pc, #32]	; (8002b18 <MX_USART6_UART_Init+0x4c>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002afc:	4b06      	ldr	r3, [pc, #24]	; (8002b18 <MX_USART6_UART_Init+0x4c>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002b02:	4805      	ldr	r0, [pc, #20]	; (8002b18 <MX_USART6_UART_Init+0x4c>)
 8002b04:	f003 f83c 	bl	8005b80 <HAL_UART_Init>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002b0e:	f7ff f8df 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002b12:	bf00      	nop
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	200003f8 	.word	0x200003f8
 8002b1c:	40011400 	.word	0x40011400

08002b20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b08e      	sub	sp, #56	; 0x38
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	605a      	str	r2, [r3, #4]
 8002b32:	609a      	str	r2, [r3, #8]
 8002b34:	60da      	str	r2, [r3, #12]
 8002b36:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a68      	ldr	r2, [pc, #416]	; (8002ce0 <HAL_UART_MspInit+0x1c0>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d12d      	bne.n	8002b9e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b42:	2300      	movs	r3, #0
 8002b44:	623b      	str	r3, [r7, #32]
 8002b46:	4b67      	ldr	r3, [pc, #412]	; (8002ce4 <HAL_UART_MspInit+0x1c4>)
 8002b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4a:	4a66      	ldr	r2, [pc, #408]	; (8002ce4 <HAL_UART_MspInit+0x1c4>)
 8002b4c:	f043 0310 	orr.w	r3, r3, #16
 8002b50:	6453      	str	r3, [r2, #68]	; 0x44
 8002b52:	4b64      	ldr	r3, [pc, #400]	; (8002ce4 <HAL_UART_MspInit+0x1c4>)
 8002b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b56:	f003 0310 	and.w	r3, r3, #16
 8002b5a:	623b      	str	r3, [r7, #32]
 8002b5c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61fb      	str	r3, [r7, #28]
 8002b62:	4b60      	ldr	r3, [pc, #384]	; (8002ce4 <HAL_UART_MspInit+0x1c4>)
 8002b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b66:	4a5f      	ldr	r2, [pc, #380]	; (8002ce4 <HAL_UART_MspInit+0x1c4>)
 8002b68:	f043 0301 	orr.w	r3, r3, #1
 8002b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b6e:	4b5d      	ldr	r3, [pc, #372]	; (8002ce4 <HAL_UART_MspInit+0x1c4>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	61fb      	str	r3, [r7, #28]
 8002b78:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002b7a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002b7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b80:	2302      	movs	r3, #2
 8002b82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b84:	2300      	movs	r3, #0
 8002b86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b8c:	2307      	movs	r3, #7
 8002b8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b94:	4619      	mov	r1, r3
 8002b96:	4854      	ldr	r0, [pc, #336]	; (8002ce8 <HAL_UART_MspInit+0x1c8>)
 8002b98:	f001 fa32 	bl	8004000 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002b9c:	e09b      	b.n	8002cd6 <HAL_UART_MspInit+0x1b6>
  else if(uartHandle->Instance==USART2)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a52      	ldr	r2, [pc, #328]	; (8002cec <HAL_UART_MspInit+0x1cc>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d134      	bne.n	8002c12 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ba8:	2300      	movs	r3, #0
 8002baa:	61bb      	str	r3, [r7, #24]
 8002bac:	4b4d      	ldr	r3, [pc, #308]	; (8002ce4 <HAL_UART_MspInit+0x1c4>)
 8002bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb0:	4a4c      	ldr	r2, [pc, #304]	; (8002ce4 <HAL_UART_MspInit+0x1c4>)
 8002bb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bb6:	6413      	str	r3, [r2, #64]	; 0x40
 8002bb8:	4b4a      	ldr	r3, [pc, #296]	; (8002ce4 <HAL_UART_MspInit+0x1c4>)
 8002bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc0:	61bb      	str	r3, [r7, #24]
 8002bc2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	617b      	str	r3, [r7, #20]
 8002bc8:	4b46      	ldr	r3, [pc, #280]	; (8002ce4 <HAL_UART_MspInit+0x1c4>)
 8002bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bcc:	4a45      	ldr	r2, [pc, #276]	; (8002ce4 <HAL_UART_MspInit+0x1c4>)
 8002bce:	f043 0301 	orr.w	r3, r3, #1
 8002bd2:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd4:	4b43      	ldr	r3, [pc, #268]	; (8002ce4 <HAL_UART_MspInit+0x1c4>)
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	617b      	str	r3, [r7, #20]
 8002bde:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002be0:	230c      	movs	r3, #12
 8002be2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be4:	2302      	movs	r3, #2
 8002be6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be8:	2300      	movs	r3, #0
 8002bea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bec:	2303      	movs	r3, #3
 8002bee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002bf0:	2307      	movs	r3, #7
 8002bf2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	483b      	ldr	r0, [pc, #236]	; (8002ce8 <HAL_UART_MspInit+0x1c8>)
 8002bfc:	f001 fa00 	bl	8004000 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002c00:	2200      	movs	r2, #0
 8002c02:	2100      	movs	r1, #0
 8002c04:	2026      	movs	r0, #38	; 0x26
 8002c06:	f000 fdc2 	bl	800378e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002c0a:	2026      	movs	r0, #38	; 0x26
 8002c0c:	f000 fddb 	bl	80037c6 <HAL_NVIC_EnableIRQ>
}
 8002c10:	e061      	b.n	8002cd6 <HAL_UART_MspInit+0x1b6>
  else if(uartHandle->Instance==USART6)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a36      	ldr	r2, [pc, #216]	; (8002cf0 <HAL_UART_MspInit+0x1d0>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d15c      	bne.n	8002cd6 <HAL_UART_MspInit+0x1b6>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	613b      	str	r3, [r7, #16]
 8002c20:	4b30      	ldr	r3, [pc, #192]	; (8002ce4 <HAL_UART_MspInit+0x1c4>)
 8002c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c24:	4a2f      	ldr	r2, [pc, #188]	; (8002ce4 <HAL_UART_MspInit+0x1c4>)
 8002c26:	f043 0320 	orr.w	r3, r3, #32
 8002c2a:	6453      	str	r3, [r2, #68]	; 0x44
 8002c2c:	4b2d      	ldr	r3, [pc, #180]	; (8002ce4 <HAL_UART_MspInit+0x1c4>)
 8002c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c30:	f003 0320 	and.w	r3, r3, #32
 8002c34:	613b      	str	r3, [r7, #16]
 8002c36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c38:	2300      	movs	r3, #0
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	4b29      	ldr	r3, [pc, #164]	; (8002ce4 <HAL_UART_MspInit+0x1c4>)
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c40:	4a28      	ldr	r2, [pc, #160]	; (8002ce4 <HAL_UART_MspInit+0x1c4>)
 8002c42:	f043 0301 	orr.w	r3, r3, #1
 8002c46:	6313      	str	r3, [r2, #48]	; 0x30
 8002c48:	4b26      	ldr	r3, [pc, #152]	; (8002ce4 <HAL_UART_MspInit+0x1c4>)
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002c54:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002c58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c62:	2303      	movs	r3, #3
 8002c64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002c66:	2308      	movs	r3, #8
 8002c68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c6e:	4619      	mov	r1, r3
 8002c70:	481d      	ldr	r0, [pc, #116]	; (8002ce8 <HAL_UART_MspInit+0x1c8>)
 8002c72:	f001 f9c5 	bl	8004000 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream2;
 8002c76:	4b1f      	ldr	r3, [pc, #124]	; (8002cf4 <HAL_UART_MspInit+0x1d4>)
 8002c78:	4a1f      	ldr	r2, [pc, #124]	; (8002cf8 <HAL_UART_MspInit+0x1d8>)
 8002c7a:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002c7c:	4b1d      	ldr	r3, [pc, #116]	; (8002cf4 <HAL_UART_MspInit+0x1d4>)
 8002c7e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002c82:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c84:	4b1b      	ldr	r3, [pc, #108]	; (8002cf4 <HAL_UART_MspInit+0x1d4>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c8a:	4b1a      	ldr	r3, [pc, #104]	; (8002cf4 <HAL_UART_MspInit+0x1d4>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c90:	4b18      	ldr	r3, [pc, #96]	; (8002cf4 <HAL_UART_MspInit+0x1d4>)
 8002c92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c96:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c98:	4b16      	ldr	r3, [pc, #88]	; (8002cf4 <HAL_UART_MspInit+0x1d4>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c9e:	4b15      	ldr	r3, [pc, #84]	; (8002cf4 <HAL_UART_MspInit+0x1d4>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8002ca4:	4b13      	ldr	r3, [pc, #76]	; (8002cf4 <HAL_UART_MspInit+0x1d4>)
 8002ca6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002caa:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002cac:	4b11      	ldr	r3, [pc, #68]	; (8002cf4 <HAL_UART_MspInit+0x1d4>)
 8002cae:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002cb2:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cb4:	4b0f      	ldr	r3, [pc, #60]	; (8002cf4 <HAL_UART_MspInit+0x1d4>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002cba:	480e      	ldr	r0, [pc, #56]	; (8002cf4 <HAL_UART_MspInit+0x1d4>)
 8002cbc:	f000 fd9e 	bl	80037fc <HAL_DMA_Init>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <HAL_UART_MspInit+0x1aa>
      Error_Handler();
 8002cc6:	f7ff f803 	bl	8001cd0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a09      	ldr	r2, [pc, #36]	; (8002cf4 <HAL_UART_MspInit+0x1d4>)
 8002cce:	639a      	str	r2, [r3, #56]	; 0x38
 8002cd0:	4a08      	ldr	r2, [pc, #32]	; (8002cf4 <HAL_UART_MspInit+0x1d4>)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002cd6:	bf00      	nop
 8002cd8:	3738      	adds	r7, #56	; 0x38
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	40011000 	.word	0x40011000
 8002ce4:	40023800 	.word	0x40023800
 8002ce8:	40020000 	.word	0x40020000
 8002cec:	40004400 	.word	0x40004400
 8002cf0:	40011400 	.word	0x40011400
 8002cf4:	20000354 	.word	0x20000354
 8002cf8:	40026440 	.word	0x40026440

08002cfc <Reset_Handler>:
 8002cfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d34 <LoopFillZerobss+0x12>
 8002d00:	480d      	ldr	r0, [pc, #52]	; (8002d38 <LoopFillZerobss+0x16>)
 8002d02:	490e      	ldr	r1, [pc, #56]	; (8002d3c <LoopFillZerobss+0x1a>)
 8002d04:	4a0e      	ldr	r2, [pc, #56]	; (8002d40 <LoopFillZerobss+0x1e>)
 8002d06:	2300      	movs	r3, #0
 8002d08:	e002      	b.n	8002d10 <LoopCopyDataInit>

08002d0a <CopyDataInit>:
 8002d0a:	58d4      	ldr	r4, [r2, r3]
 8002d0c:	50c4      	str	r4, [r0, r3]
 8002d0e:	3304      	adds	r3, #4

08002d10 <LoopCopyDataInit>:
 8002d10:	18c4      	adds	r4, r0, r3
 8002d12:	428c      	cmp	r4, r1
 8002d14:	d3f9      	bcc.n	8002d0a <CopyDataInit>
 8002d16:	4a0b      	ldr	r2, [pc, #44]	; (8002d44 <LoopFillZerobss+0x22>)
 8002d18:	4c0b      	ldr	r4, [pc, #44]	; (8002d48 <LoopFillZerobss+0x26>)
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	e001      	b.n	8002d22 <LoopFillZerobss>

08002d1e <FillZerobss>:
 8002d1e:	6013      	str	r3, [r2, #0]
 8002d20:	3204      	adds	r2, #4

08002d22 <LoopFillZerobss>:
 8002d22:	42a2      	cmp	r2, r4
 8002d24:	d3fb      	bcc.n	8002d1e <FillZerobss>
 8002d26:	f7ff fe6b 	bl	8002a00 <SystemInit>
 8002d2a:	f004 f8eb 	bl	8006f04 <__libc_init_array>
 8002d2e:	f7fe fe5f 	bl	80019f0 <main>
 8002d32:	4770      	bx	lr
 8002d34:	20010000 	.word	0x20010000
 8002d38:	20000000 	.word	0x20000000
 8002d3c:	200001dc 	.word	0x200001dc
 8002d40:	0800a650 	.word	0x0800a650
 8002d44:	200001dc 	.word	0x200001dc
 8002d48:	20000494 	.word	0x20000494

08002d4c <ADC_IRQHandler>:
 8002d4c:	e7fe      	b.n	8002d4c <ADC_IRQHandler>
	...

08002d50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d54:	4b0e      	ldr	r3, [pc, #56]	; (8002d90 <HAL_Init+0x40>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a0d      	ldr	r2, [pc, #52]	; (8002d90 <HAL_Init+0x40>)
 8002d5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d60:	4b0b      	ldr	r3, [pc, #44]	; (8002d90 <HAL_Init+0x40>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a0a      	ldr	r2, [pc, #40]	; (8002d90 <HAL_Init+0x40>)
 8002d66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d6c:	4b08      	ldr	r3, [pc, #32]	; (8002d90 <HAL_Init+0x40>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a07      	ldr	r2, [pc, #28]	; (8002d90 <HAL_Init+0x40>)
 8002d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d78:	2003      	movs	r0, #3
 8002d7a:	f000 fcfd 	bl	8003778 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d7e:	200f      	movs	r0, #15
 8002d80:	f000 f808 	bl	8002d94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d84:	f7ff fd10 	bl	80027a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	40023c00 	.word	0x40023c00

08002d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d9c:	4b12      	ldr	r3, [pc, #72]	; (8002de8 <HAL_InitTick+0x54>)
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	4b12      	ldr	r3, [pc, #72]	; (8002dec <HAL_InitTick+0x58>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	4619      	mov	r1, r3
 8002da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db2:	4618      	mov	r0, r3
 8002db4:	f000 fd15 	bl	80037e2 <HAL_SYSTICK_Config>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e00e      	b.n	8002de0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b0f      	cmp	r3, #15
 8002dc6:	d80a      	bhi.n	8002dde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dc8:	2200      	movs	r2, #0
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8002dd0:	f000 fcdd 	bl	800378e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dd4:	4a06      	ldr	r2, [pc, #24]	; (8002df0 <HAL_InitTick+0x5c>)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	e000      	b.n	8002de0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	20000000 	.word	0x20000000
 8002dec:	20000008 	.word	0x20000008
 8002df0:	20000004 	.word	0x20000004

08002df4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002df8:	4b06      	ldr	r3, [pc, #24]	; (8002e14 <HAL_IncTick+0x20>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <HAL_IncTick+0x24>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4413      	add	r3, r2
 8002e04:	4a04      	ldr	r2, [pc, #16]	; (8002e18 <HAL_IncTick+0x24>)
 8002e06:	6013      	str	r3, [r2, #0]
}
 8002e08:	bf00      	nop
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	20000008 	.word	0x20000008
 8002e18:	20000480 	.word	0x20000480

08002e1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e20:	4b03      	ldr	r3, [pc, #12]	; (8002e30 <HAL_GetTick+0x14>)
 8002e22:	681b      	ldr	r3, [r3, #0]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	20000480 	.word	0x20000480

08002e34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e3c:	f7ff ffee 	bl	8002e1c <HAL_GetTick>
 8002e40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4c:	d005      	beq.n	8002e5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e4e:	4b0a      	ldr	r3, [pc, #40]	; (8002e78 <HAL_Delay+0x44>)
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	461a      	mov	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	4413      	add	r3, r2
 8002e58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e5a:	bf00      	nop
 8002e5c:	f7ff ffde 	bl	8002e1c <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d8f7      	bhi.n	8002e5c <HAL_Delay+0x28>
  {
  }
}
 8002e6c:	bf00      	nop
 8002e6e:	bf00      	nop
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	20000008 	.word	0x20000008

08002e7c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e84:	2300      	movs	r3, #0
 8002e86:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e033      	b.n	8002efa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d109      	bne.n	8002eae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7fe f8aa 	bl	8000ff4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	f003 0310 	and.w	r3, r3, #16
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d118      	bne.n	8002eec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ec2:	f023 0302 	bic.w	r3, r3, #2
 8002ec6:	f043 0202 	orr.w	r2, r3, #2
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 fa86 	bl	80033e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	f023 0303 	bic.w	r3, r3, #3
 8002ee2:	f043 0201 	orr.w	r2, r3, #1
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	641a      	str	r2, [r3, #64]	; 0x40
 8002eea:	e001      	b.n	8002ef0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
	...

08002f04 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d101      	bne.n	8002f1e <HAL_ADC_Start+0x1a>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	e097      	b.n	800304e <HAL_ADC_Start+0x14a>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d018      	beq.n	8002f66 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689a      	ldr	r2, [r3, #8]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0201 	orr.w	r2, r2, #1
 8002f42:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f44:	4b45      	ldr	r3, [pc, #276]	; (800305c <HAL_ADC_Start+0x158>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a45      	ldr	r2, [pc, #276]	; (8003060 <HAL_ADC_Start+0x15c>)
 8002f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4e:	0c9a      	lsrs	r2, r3, #18
 8002f50:	4613      	mov	r3, r2
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	4413      	add	r3, r2
 8002f56:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002f58:	e002      	b.n	8002f60 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f9      	bne.n	8002f5a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d15f      	bne.n	8003034 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f78:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002f7c:	f023 0301 	bic.w	r3, r3, #1
 8002f80:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d007      	beq.n	8002fa6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f9e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fb2:	d106      	bne.n	8002fc2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb8:	f023 0206 	bic.w	r2, r3, #6
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	645a      	str	r2, [r3, #68]	; 0x44
 8002fc0:	e002      	b.n	8002fc8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fd0:	4b24      	ldr	r3, [pc, #144]	; (8003064 <HAL_ADC_Start+0x160>)
 8002fd2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002fdc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f003 031f 	and.w	r3, r3, #31
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10f      	bne.n	800300a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d129      	bne.n	800304c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689a      	ldr	r2, [r3, #8]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003006:	609a      	str	r2, [r3, #8]
 8003008:	e020      	b.n	800304c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a16      	ldr	r2, [pc, #88]	; (8003068 <HAL_ADC_Start+0x164>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d11b      	bne.n	800304c <HAL_ADC_Start+0x148>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d114      	bne.n	800304c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003030:	609a      	str	r2, [r3, #8]
 8003032:	e00b      	b.n	800304c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003038:	f043 0210 	orr.w	r2, r3, #16
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003044:	f043 0201 	orr.w	r2, r3, #1
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3714      	adds	r7, #20
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	20000000 	.word	0x20000000
 8003060:	431bde83 	.word	0x431bde83
 8003064:	40012300 	.word	0x40012300
 8003068:	40012000 	.word	0x40012000

0800306c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003076:	2300      	movs	r3, #0
 8003078:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003088:	d113      	bne.n	80030b2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003098:	d10b      	bne.n	80030b2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	f043 0220 	orr.w	r2, r3, #32
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e063      	b.n	800317a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80030b2:	f7ff feb3 	bl	8002e1c <HAL_GetTick>
 80030b6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80030b8:	e021      	b.n	80030fe <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c0:	d01d      	beq.n	80030fe <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d007      	beq.n	80030d8 <HAL_ADC_PollForConversion+0x6c>
 80030c8:	f7ff fea8 	bl	8002e1c <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d212      	bcs.n	80030fe <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d00b      	beq.n	80030fe <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	f043 0204 	orr.w	r2, r3, #4
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e03d      	b.n	800317a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b02      	cmp	r3, #2
 800310a:	d1d6      	bne.n	80030ba <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f06f 0212 	mvn.w	r2, #18
 8003114:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d123      	bne.n	8003178 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003134:	2b00      	cmp	r3, #0
 8003136:	d11f      	bne.n	8003178 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003142:	2b00      	cmp	r3, #0
 8003144:	d006      	beq.n	8003154 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003150:	2b00      	cmp	r3, #0
 8003152:	d111      	bne.n	8003178 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003158:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003164:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d105      	bne.n	8003178 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003170:	f043 0201 	orr.w	r2, r3, #1
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003182:	b480      	push	{r7}
 8003184:	b083      	sub	sp, #12
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003190:	4618      	mov	r0, r3
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d101      	bne.n	80031b8 <HAL_ADC_ConfigChannel+0x1c>
 80031b4:	2302      	movs	r3, #2
 80031b6:	e105      	b.n	80033c4 <HAL_ADC_ConfigChannel+0x228>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2b09      	cmp	r3, #9
 80031c6:	d925      	bls.n	8003214 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68d9      	ldr	r1, [r3, #12]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	461a      	mov	r2, r3
 80031d6:	4613      	mov	r3, r2
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	4413      	add	r3, r2
 80031dc:	3b1e      	subs	r3, #30
 80031de:	2207      	movs	r2, #7
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	43da      	mvns	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	400a      	ands	r2, r1
 80031ec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68d9      	ldr	r1, [r3, #12]
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	4618      	mov	r0, r3
 8003200:	4603      	mov	r3, r0
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	4403      	add	r3, r0
 8003206:	3b1e      	subs	r3, #30
 8003208:	409a      	lsls	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	60da      	str	r2, [r3, #12]
 8003212:	e022      	b.n	800325a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6919      	ldr	r1, [r3, #16]
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	b29b      	uxth	r3, r3
 8003220:	461a      	mov	r2, r3
 8003222:	4613      	mov	r3, r2
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	4413      	add	r3, r2
 8003228:	2207      	movs	r2, #7
 800322a:	fa02 f303 	lsl.w	r3, r2, r3
 800322e:	43da      	mvns	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	400a      	ands	r2, r1
 8003236:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6919      	ldr	r1, [r3, #16]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	b29b      	uxth	r3, r3
 8003248:	4618      	mov	r0, r3
 800324a:	4603      	mov	r3, r0
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	4403      	add	r3, r0
 8003250:	409a      	lsls	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b06      	cmp	r3, #6
 8003260:	d824      	bhi.n	80032ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	4613      	mov	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	3b05      	subs	r3, #5
 8003274:	221f      	movs	r2, #31
 8003276:	fa02 f303 	lsl.w	r3, r2, r3
 800327a:	43da      	mvns	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	400a      	ands	r2, r1
 8003282:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	b29b      	uxth	r3, r3
 8003290:	4618      	mov	r0, r3
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	4613      	mov	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	3b05      	subs	r3, #5
 800329e:	fa00 f203 	lsl.w	r2, r0, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	635a      	str	r2, [r3, #52]	; 0x34
 80032aa:	e04c      	b.n	8003346 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2b0c      	cmp	r3, #12
 80032b2:	d824      	bhi.n	80032fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	4613      	mov	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4413      	add	r3, r2
 80032c4:	3b23      	subs	r3, #35	; 0x23
 80032c6:	221f      	movs	r2, #31
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	43da      	mvns	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	400a      	ands	r2, r1
 80032d4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	4618      	mov	r0, r3
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	4613      	mov	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4413      	add	r3, r2
 80032ee:	3b23      	subs	r3, #35	; 0x23
 80032f0:	fa00 f203 	lsl.w	r2, r0, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	631a      	str	r2, [r3, #48]	; 0x30
 80032fc:	e023      	b.n	8003346 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	3b41      	subs	r3, #65	; 0x41
 8003310:	221f      	movs	r2, #31
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	43da      	mvns	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	400a      	ands	r2, r1
 800331e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	b29b      	uxth	r3, r3
 800332c:	4618      	mov	r0, r3
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	3b41      	subs	r3, #65	; 0x41
 800333a:	fa00 f203 	lsl.w	r2, r0, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003346:	4b22      	ldr	r3, [pc, #136]	; (80033d0 <HAL_ADC_ConfigChannel+0x234>)
 8003348:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a21      	ldr	r2, [pc, #132]	; (80033d4 <HAL_ADC_ConfigChannel+0x238>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d109      	bne.n	8003368 <HAL_ADC_ConfigChannel+0x1cc>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2b12      	cmp	r3, #18
 800335a:	d105      	bne.n	8003368 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a19      	ldr	r2, [pc, #100]	; (80033d4 <HAL_ADC_ConfigChannel+0x238>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d123      	bne.n	80033ba <HAL_ADC_ConfigChannel+0x21e>
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2b10      	cmp	r3, #16
 8003378:	d003      	beq.n	8003382 <HAL_ADC_ConfigChannel+0x1e6>
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2b11      	cmp	r3, #17
 8003380:	d11b      	bne.n	80033ba <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2b10      	cmp	r3, #16
 8003394:	d111      	bne.n	80033ba <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003396:	4b10      	ldr	r3, [pc, #64]	; (80033d8 <HAL_ADC_ConfigChannel+0x23c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a10      	ldr	r2, [pc, #64]	; (80033dc <HAL_ADC_ConfigChannel+0x240>)
 800339c:	fba2 2303 	umull	r2, r3, r2, r3
 80033a0:	0c9a      	lsrs	r2, r3, #18
 80033a2:	4613      	mov	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80033ac:	e002      	b.n	80033b4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	3b01      	subs	r3, #1
 80033b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1f9      	bne.n	80033ae <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3714      	adds	r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	40012300 	.word	0x40012300
 80033d4:	40012000 	.word	0x40012000
 80033d8:	20000000 	.word	0x20000000
 80033dc:	431bde83 	.word	0x431bde83

080033e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033e8:	4b79      	ldr	r3, [pc, #484]	; (80035d0 <ADC_Init+0x1f0>)
 80033ea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	431a      	orrs	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003414:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6859      	ldr	r1, [r3, #4]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	021a      	lsls	r2, r3, #8
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003438:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	6859      	ldr	r1, [r3, #4]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689a      	ldr	r2, [r3, #8]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800345a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6899      	ldr	r1, [r3, #8]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68da      	ldr	r2, [r3, #12]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003472:	4a58      	ldr	r2, [pc, #352]	; (80035d4 <ADC_Init+0x1f4>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d022      	beq.n	80034be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003486:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6899      	ldr	r1, [r3, #8]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80034a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6899      	ldr	r1, [r3, #8]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	609a      	str	r2, [r3, #8]
 80034bc:	e00f      	b.n	80034de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80034dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0202 	bic.w	r2, r2, #2
 80034ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6899      	ldr	r1, [r3, #8]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	7e1b      	ldrb	r3, [r3, #24]
 80034f8:	005a      	lsls	r2, r3, #1
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d01b      	beq.n	8003544 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800351a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	685a      	ldr	r2, [r3, #4]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800352a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6859      	ldr	r1, [r3, #4]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003536:	3b01      	subs	r3, #1
 8003538:	035a      	lsls	r2, r3, #13
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	605a      	str	r2, [r3, #4]
 8003542:	e007      	b.n	8003554 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003552:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003562:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	3b01      	subs	r3, #1
 8003570:	051a      	lsls	r2, r3, #20
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	430a      	orrs	r2, r1
 8003578:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003588:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6899      	ldr	r1, [r3, #8]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003596:	025a      	lsls	r2, r3, #9
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	430a      	orrs	r2, r1
 800359e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689a      	ldr	r2, [r3, #8]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6899      	ldr	r1, [r3, #8]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	029a      	lsls	r2, r3, #10
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	609a      	str	r2, [r3, #8]
}
 80035c4:	bf00      	nop
 80035c6:	3714      	adds	r7, #20
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr
 80035d0:	40012300 	.word	0x40012300
 80035d4:	0f000001 	.word	0x0f000001

080035d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f003 0307 	and.w	r3, r3, #7
 80035e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035e8:	4b0c      	ldr	r3, [pc, #48]	; (800361c <__NVIC_SetPriorityGrouping+0x44>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035f4:	4013      	ands	r3, r2
 80035f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003600:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003608:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800360a:	4a04      	ldr	r2, [pc, #16]	; (800361c <__NVIC_SetPriorityGrouping+0x44>)
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	60d3      	str	r3, [r2, #12]
}
 8003610:	bf00      	nop
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	e000ed00 	.word	0xe000ed00

08003620 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003624:	4b04      	ldr	r3, [pc, #16]	; (8003638 <__NVIC_GetPriorityGrouping+0x18>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	0a1b      	lsrs	r3, r3, #8
 800362a:	f003 0307 	and.w	r3, r3, #7
}
 800362e:	4618      	mov	r0, r3
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	e000ed00 	.word	0xe000ed00

0800363c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	4603      	mov	r3, r0
 8003644:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800364a:	2b00      	cmp	r3, #0
 800364c:	db0b      	blt.n	8003666 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800364e:	79fb      	ldrb	r3, [r7, #7]
 8003650:	f003 021f 	and.w	r2, r3, #31
 8003654:	4907      	ldr	r1, [pc, #28]	; (8003674 <__NVIC_EnableIRQ+0x38>)
 8003656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800365a:	095b      	lsrs	r3, r3, #5
 800365c:	2001      	movs	r0, #1
 800365e:	fa00 f202 	lsl.w	r2, r0, r2
 8003662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	e000e100 	.word	0xe000e100

08003678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	4603      	mov	r3, r0
 8003680:	6039      	str	r1, [r7, #0]
 8003682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003688:	2b00      	cmp	r3, #0
 800368a:	db0a      	blt.n	80036a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	b2da      	uxtb	r2, r3
 8003690:	490c      	ldr	r1, [pc, #48]	; (80036c4 <__NVIC_SetPriority+0x4c>)
 8003692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003696:	0112      	lsls	r2, r2, #4
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	440b      	add	r3, r1
 800369c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036a0:	e00a      	b.n	80036b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	b2da      	uxtb	r2, r3
 80036a6:	4908      	ldr	r1, [pc, #32]	; (80036c8 <__NVIC_SetPriority+0x50>)
 80036a8:	79fb      	ldrb	r3, [r7, #7]
 80036aa:	f003 030f 	and.w	r3, r3, #15
 80036ae:	3b04      	subs	r3, #4
 80036b0:	0112      	lsls	r2, r2, #4
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	440b      	add	r3, r1
 80036b6:	761a      	strb	r2, [r3, #24]
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	e000e100 	.word	0xe000e100
 80036c8:	e000ed00 	.word	0xe000ed00

080036cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b089      	sub	sp, #36	; 0x24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f003 0307 	and.w	r3, r3, #7
 80036de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	f1c3 0307 	rsb	r3, r3, #7
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	bf28      	it	cs
 80036ea:	2304      	movcs	r3, #4
 80036ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	3304      	adds	r3, #4
 80036f2:	2b06      	cmp	r3, #6
 80036f4:	d902      	bls.n	80036fc <NVIC_EncodePriority+0x30>
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	3b03      	subs	r3, #3
 80036fa:	e000      	b.n	80036fe <NVIC_EncodePriority+0x32>
 80036fc:	2300      	movs	r3, #0
 80036fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003700:	f04f 32ff 	mov.w	r2, #4294967295
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	43da      	mvns	r2, r3
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	401a      	ands	r2, r3
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003714:	f04f 31ff 	mov.w	r1, #4294967295
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	fa01 f303 	lsl.w	r3, r1, r3
 800371e:	43d9      	mvns	r1, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003724:	4313      	orrs	r3, r2
         );
}
 8003726:	4618      	mov	r0, r3
 8003728:	3724      	adds	r7, #36	; 0x24
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
	...

08003734 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	3b01      	subs	r3, #1
 8003740:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003744:	d301      	bcc.n	800374a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003746:	2301      	movs	r3, #1
 8003748:	e00f      	b.n	800376a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800374a:	4a0a      	ldr	r2, [pc, #40]	; (8003774 <SysTick_Config+0x40>)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	3b01      	subs	r3, #1
 8003750:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003752:	210f      	movs	r1, #15
 8003754:	f04f 30ff 	mov.w	r0, #4294967295
 8003758:	f7ff ff8e 	bl	8003678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800375c:	4b05      	ldr	r3, [pc, #20]	; (8003774 <SysTick_Config+0x40>)
 800375e:	2200      	movs	r2, #0
 8003760:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003762:	4b04      	ldr	r3, [pc, #16]	; (8003774 <SysTick_Config+0x40>)
 8003764:	2207      	movs	r2, #7
 8003766:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	e000e010 	.word	0xe000e010

08003778 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f7ff ff29 	bl	80035d8 <__NVIC_SetPriorityGrouping>
}
 8003786:	bf00      	nop
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800378e:	b580      	push	{r7, lr}
 8003790:	b086      	sub	sp, #24
 8003792:	af00      	add	r7, sp, #0
 8003794:	4603      	mov	r3, r0
 8003796:	60b9      	str	r1, [r7, #8]
 8003798:	607a      	str	r2, [r7, #4]
 800379a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800379c:	2300      	movs	r3, #0
 800379e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037a0:	f7ff ff3e 	bl	8003620 <__NVIC_GetPriorityGrouping>
 80037a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	68b9      	ldr	r1, [r7, #8]
 80037aa:	6978      	ldr	r0, [r7, #20]
 80037ac:	f7ff ff8e 	bl	80036cc <NVIC_EncodePriority>
 80037b0:	4602      	mov	r2, r0
 80037b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037b6:	4611      	mov	r1, r2
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7ff ff5d 	bl	8003678 <__NVIC_SetPriority>
}
 80037be:	bf00      	nop
 80037c0:	3718      	adds	r7, #24
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b082      	sub	sp, #8
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	4603      	mov	r3, r0
 80037ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7ff ff31 	bl	800363c <__NVIC_EnableIRQ>
}
 80037da:	bf00      	nop
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b082      	sub	sp, #8
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7ff ffa2 	bl	8003734 <SysTick_Config>
 80037f0:	4603      	mov	r3, r0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
	...

080037fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003804:	2300      	movs	r3, #0
 8003806:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003808:	f7ff fb08 	bl	8002e1c <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d101      	bne.n	8003818 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e099      	b.n	800394c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2202      	movs	r2, #2
 800381c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 0201 	bic.w	r2, r2, #1
 8003836:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003838:	e00f      	b.n	800385a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800383a:	f7ff faef 	bl	8002e1c <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b05      	cmp	r3, #5
 8003846:	d908      	bls.n	800385a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2220      	movs	r2, #32
 800384c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2203      	movs	r2, #3
 8003852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e078      	b.n	800394c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1e8      	bne.n	800383a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	4b38      	ldr	r3, [pc, #224]	; (8003954 <HAL_DMA_Init+0x158>)
 8003874:	4013      	ands	r3, r2
 8003876:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003886:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003892:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800389e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	2b04      	cmp	r3, #4
 80038b2:	d107      	bne.n	80038c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038bc:	4313      	orrs	r3, r2
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	f023 0307 	bic.w	r3, r3, #7
 80038da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	d117      	bne.n	800391e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00e      	beq.n	800391e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 fb01 	bl	8003f08 <DMA_CheckFifoParam>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d008      	beq.n	800391e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2240      	movs	r2, #64	; 0x40
 8003910:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800391a:	2301      	movs	r3, #1
 800391c:	e016      	b.n	800394c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 fab8 	bl	8003e9c <DMA_CalcBaseAndBitshift>
 800392c:	4603      	mov	r3, r0
 800392e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003934:	223f      	movs	r2, #63	; 0x3f
 8003936:	409a      	lsls	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3718      	adds	r7, #24
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	f010803f 	.word	0xf010803f

08003958 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
 8003964:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003966:	2300      	movs	r3, #0
 8003968:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003976:	2b01      	cmp	r3, #1
 8003978:	d101      	bne.n	800397e <HAL_DMA_Start_IT+0x26>
 800397a:	2302      	movs	r3, #2
 800397c:	e040      	b.n	8003a00 <HAL_DMA_Start_IT+0xa8>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b01      	cmp	r3, #1
 8003990:	d12f      	bne.n	80039f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2202      	movs	r2, #2
 8003996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	68b9      	ldr	r1, [r7, #8]
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 fa4a 	bl	8003e40 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b0:	223f      	movs	r2, #63	; 0x3f
 80039b2:	409a      	lsls	r2, r3
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f042 0216 	orr.w	r2, r2, #22
 80039c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d007      	beq.n	80039e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f042 0208 	orr.w	r2, r2, #8
 80039de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f042 0201 	orr.w	r2, r2, #1
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	e005      	b.n	80039fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80039fa:	2302      	movs	r3, #2
 80039fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80039fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3718      	adds	r7, #24
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a14:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003a16:	f7ff fa01 	bl	8002e1c <HAL_GetTick>
 8003a1a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d008      	beq.n	8003a3a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2280      	movs	r2, #128	; 0x80
 8003a2c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e052      	b.n	8003ae0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f022 0216 	bic.w	r2, r2, #22
 8003a48:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	695a      	ldr	r2, [r3, #20]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a58:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d103      	bne.n	8003a6a <HAL_DMA_Abort+0x62>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d007      	beq.n	8003a7a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 0208 	bic.w	r2, r2, #8
 8003a78:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 0201 	bic.w	r2, r2, #1
 8003a88:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a8a:	e013      	b.n	8003ab4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a8c:	f7ff f9c6 	bl	8002e1c <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b05      	cmp	r3, #5
 8003a98:	d90c      	bls.n	8003ab4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2203      	movs	r2, #3
 8003aa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e015      	b.n	8003ae0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1e4      	bne.n	8003a8c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac6:	223f      	movs	r2, #63	; 0x3f
 8003ac8:	409a      	lsls	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d004      	beq.n	8003b06 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2280      	movs	r2, #128	; 0x80
 8003b00:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e00c      	b.n	8003b20 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2205      	movs	r2, #5
 8003b0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 0201 	bic.w	r2, r2, #1
 8003b1c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b38:	4b92      	ldr	r3, [pc, #584]	; (8003d84 <HAL_DMA_IRQHandler+0x258>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a92      	ldr	r2, [pc, #584]	; (8003d88 <HAL_DMA_IRQHandler+0x25c>)
 8003b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b42:	0a9b      	lsrs	r3, r3, #10
 8003b44:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b4a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b56:	2208      	movs	r2, #8
 8003b58:	409a      	lsls	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d01a      	beq.n	8003b98 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d013      	beq.n	8003b98 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 0204 	bic.w	r2, r2, #4
 8003b7e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b84:	2208      	movs	r2, #8
 8003b86:	409a      	lsls	r2, r3
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b90:	f043 0201 	orr.w	r2, r3, #1
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	409a      	lsls	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d012      	beq.n	8003bce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00b      	beq.n	8003bce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bba:	2201      	movs	r2, #1
 8003bbc:	409a      	lsls	r2, r3
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc6:	f043 0202 	orr.w	r2, r3, #2
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd2:	2204      	movs	r2, #4
 8003bd4:	409a      	lsls	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d012      	beq.n	8003c04 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00b      	beq.n	8003c04 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf0:	2204      	movs	r2, #4
 8003bf2:	409a      	lsls	r2, r3
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bfc:	f043 0204 	orr.w	r2, r3, #4
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c08:	2210      	movs	r2, #16
 8003c0a:	409a      	lsls	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d043      	beq.n	8003c9c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0308 	and.w	r3, r3, #8
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d03c      	beq.n	8003c9c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c26:	2210      	movs	r2, #16
 8003c28:	409a      	lsls	r2, r3
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d018      	beq.n	8003c6e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d108      	bne.n	8003c5c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d024      	beq.n	8003c9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	4798      	blx	r3
 8003c5a:	e01f      	b.n	8003c9c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d01b      	beq.n	8003c9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	4798      	blx	r3
 8003c6c:	e016      	b.n	8003c9c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d107      	bne.n	8003c8c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f022 0208 	bic.w	r2, r2, #8
 8003c8a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d003      	beq.n	8003c9c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	409a      	lsls	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 808e 	beq.w	8003dca <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0310 	and.w	r3, r3, #16
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 8086 	beq.w	8003dca <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	409a      	lsls	r2, r3
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b05      	cmp	r3, #5
 8003cd4:	d136      	bne.n	8003d44 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0216 	bic.w	r2, r2, #22
 8003ce4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	695a      	ldr	r2, [r3, #20]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cf4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d103      	bne.n	8003d06 <HAL_DMA_IRQHandler+0x1da>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d007      	beq.n	8003d16 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 0208 	bic.w	r2, r2, #8
 8003d14:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d1a:	223f      	movs	r2, #63	; 0x3f
 8003d1c:	409a      	lsls	r2, r3
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d07d      	beq.n	8003e36 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	4798      	blx	r3
        }
        return;
 8003d42:	e078      	b.n	8003e36 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d01c      	beq.n	8003d8c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d108      	bne.n	8003d72 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d030      	beq.n	8003dca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	4798      	blx	r3
 8003d70:	e02b      	b.n	8003dca <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d027      	beq.n	8003dca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	4798      	blx	r3
 8003d82:	e022      	b.n	8003dca <HAL_DMA_IRQHandler+0x29e>
 8003d84:	20000000 	.word	0x20000000
 8003d88:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10f      	bne.n	8003dba <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 0210 	bic.w	r2, r2, #16
 8003da8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d032      	beq.n	8003e38 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d022      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2205      	movs	r2, #5
 8003de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 0201 	bic.w	r2, r2, #1
 8003df4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	60bb      	str	r3, [r7, #8]
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d307      	bcc.n	8003e12 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1f2      	bne.n	8003df6 <HAL_DMA_IRQHandler+0x2ca>
 8003e10:	e000      	b.n	8003e14 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003e12:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d005      	beq.n	8003e38 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	4798      	blx	r3
 8003e34:	e000      	b.n	8003e38 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003e36:	bf00      	nop
    }
  }
}
 8003e38:	3718      	adds	r7, #24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop

08003e40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
 8003e4c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e5c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	2b40      	cmp	r3, #64	; 0x40
 8003e6c:	d108      	bne.n	8003e80 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68ba      	ldr	r2, [r7, #8]
 8003e7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e7e:	e007      	b.n	8003e90 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68ba      	ldr	r2, [r7, #8]
 8003e86:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	60da      	str	r2, [r3, #12]
}
 8003e90:	bf00      	nop
 8003e92:	3714      	adds	r7, #20
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	3b10      	subs	r3, #16
 8003eac:	4a14      	ldr	r2, [pc, #80]	; (8003f00 <DMA_CalcBaseAndBitshift+0x64>)
 8003eae:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb2:	091b      	lsrs	r3, r3, #4
 8003eb4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003eb6:	4a13      	ldr	r2, [pc, #76]	; (8003f04 <DMA_CalcBaseAndBitshift+0x68>)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4413      	add	r3, r2
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2b03      	cmp	r3, #3
 8003ec8:	d909      	bls.n	8003ede <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ed2:	f023 0303 	bic.w	r3, r3, #3
 8003ed6:	1d1a      	adds	r2, r3, #4
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	659a      	str	r2, [r3, #88]	; 0x58
 8003edc:	e007      	b.n	8003eee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ee6:	f023 0303 	bic.w	r3, r3, #3
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3714      	adds	r7, #20
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	aaaaaaab 	.word	0xaaaaaaab
 8003f04:	0800a1e0 	.word	0x0800a1e0

08003f08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f10:	2300      	movs	r3, #0
 8003f12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d11f      	bne.n	8003f62 <DMA_CheckFifoParam+0x5a>
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	2b03      	cmp	r3, #3
 8003f26:	d856      	bhi.n	8003fd6 <DMA_CheckFifoParam+0xce>
 8003f28:	a201      	add	r2, pc, #4	; (adr r2, 8003f30 <DMA_CheckFifoParam+0x28>)
 8003f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f2e:	bf00      	nop
 8003f30:	08003f41 	.word	0x08003f41
 8003f34:	08003f53 	.word	0x08003f53
 8003f38:	08003f41 	.word	0x08003f41
 8003f3c:	08003fd7 	.word	0x08003fd7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d046      	beq.n	8003fda <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f50:	e043      	b.n	8003fda <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f5a:	d140      	bne.n	8003fde <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f60:	e03d      	b.n	8003fde <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f6a:	d121      	bne.n	8003fb0 <DMA_CheckFifoParam+0xa8>
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	2b03      	cmp	r3, #3
 8003f70:	d837      	bhi.n	8003fe2 <DMA_CheckFifoParam+0xda>
 8003f72:	a201      	add	r2, pc, #4	; (adr r2, 8003f78 <DMA_CheckFifoParam+0x70>)
 8003f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f78:	08003f89 	.word	0x08003f89
 8003f7c:	08003f8f 	.word	0x08003f8f
 8003f80:	08003f89 	.word	0x08003f89
 8003f84:	08003fa1 	.word	0x08003fa1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f8c:	e030      	b.n	8003ff0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d025      	beq.n	8003fe6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f9e:	e022      	b.n	8003fe6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003fa8:	d11f      	bne.n	8003fea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003fae:	e01c      	b.n	8003fea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d903      	bls.n	8003fbe <DMA_CheckFifoParam+0xb6>
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	2b03      	cmp	r3, #3
 8003fba:	d003      	beq.n	8003fc4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003fbc:	e018      	b.n	8003ff0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	73fb      	strb	r3, [r7, #15]
      break;
 8003fc2:	e015      	b.n	8003ff0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00e      	beq.n	8003fee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	73fb      	strb	r3, [r7, #15]
      break;
 8003fd4:	e00b      	b.n	8003fee <DMA_CheckFifoParam+0xe6>
      break;
 8003fd6:	bf00      	nop
 8003fd8:	e00a      	b.n	8003ff0 <DMA_CheckFifoParam+0xe8>
      break;
 8003fda:	bf00      	nop
 8003fdc:	e008      	b.n	8003ff0 <DMA_CheckFifoParam+0xe8>
      break;
 8003fde:	bf00      	nop
 8003fe0:	e006      	b.n	8003ff0 <DMA_CheckFifoParam+0xe8>
      break;
 8003fe2:	bf00      	nop
 8003fe4:	e004      	b.n	8003ff0 <DMA_CheckFifoParam+0xe8>
      break;
 8003fe6:	bf00      	nop
 8003fe8:	e002      	b.n	8003ff0 <DMA_CheckFifoParam+0xe8>
      break;   
 8003fea:	bf00      	nop
 8003fec:	e000      	b.n	8003ff0 <DMA_CheckFifoParam+0xe8>
      break;
 8003fee:	bf00      	nop
    }
  } 
  
  return status; 
 8003ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3714      	adds	r7, #20
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop

08004000 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004000:	b480      	push	{r7}
 8004002:	b089      	sub	sp, #36	; 0x24
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800400a:	2300      	movs	r3, #0
 800400c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800400e:	2300      	movs	r3, #0
 8004010:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004012:	2300      	movs	r3, #0
 8004014:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004016:	2300      	movs	r3, #0
 8004018:	61fb      	str	r3, [r7, #28]
 800401a:	e159      	b.n	80042d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800401c:	2201      	movs	r2, #1
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	fa02 f303 	lsl.w	r3, r2, r3
 8004024:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	4013      	ands	r3, r2
 800402e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	429a      	cmp	r2, r3
 8004036:	f040 8148 	bne.w	80042ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f003 0303 	and.w	r3, r3, #3
 8004042:	2b01      	cmp	r3, #1
 8004044:	d005      	beq.n	8004052 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800404e:	2b02      	cmp	r3, #2
 8004050:	d130      	bne.n	80040b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	005b      	lsls	r3, r3, #1
 800405c:	2203      	movs	r2, #3
 800405e:	fa02 f303 	lsl.w	r3, r2, r3
 8004062:	43db      	mvns	r3, r3
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	4013      	ands	r3, r2
 8004068:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	68da      	ldr	r2, [r3, #12]
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	005b      	lsls	r3, r3, #1
 8004072:	fa02 f303 	lsl.w	r3, r2, r3
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	4313      	orrs	r3, r2
 800407a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	69ba      	ldr	r2, [r7, #24]
 8004080:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004088:	2201      	movs	r2, #1
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	fa02 f303 	lsl.w	r3, r2, r3
 8004090:	43db      	mvns	r3, r3
 8004092:	69ba      	ldr	r2, [r7, #24]
 8004094:	4013      	ands	r3, r2
 8004096:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	091b      	lsrs	r3, r3, #4
 800409e:	f003 0201 	and.w	r2, r3, #1
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	fa02 f303 	lsl.w	r3, r2, r3
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f003 0303 	and.w	r3, r3, #3
 80040bc:	2b03      	cmp	r3, #3
 80040be:	d017      	beq.n	80040f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	2203      	movs	r2, #3
 80040cc:	fa02 f303 	lsl.w	r3, r2, r3
 80040d0:	43db      	mvns	r3, r3
 80040d2:	69ba      	ldr	r2, [r7, #24]
 80040d4:	4013      	ands	r3, r2
 80040d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	689a      	ldr	r2, [r3, #8]
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	005b      	lsls	r3, r3, #1
 80040e0:	fa02 f303 	lsl.w	r3, r2, r3
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f003 0303 	and.w	r3, r3, #3
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d123      	bne.n	8004144 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	08da      	lsrs	r2, r3, #3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3208      	adds	r2, #8
 8004104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004108:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	f003 0307 	and.w	r3, r3, #7
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	220f      	movs	r2, #15
 8004114:	fa02 f303 	lsl.w	r3, r2, r3
 8004118:	43db      	mvns	r3, r3
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	4013      	ands	r3, r2
 800411e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	691a      	ldr	r2, [r3, #16]
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	f003 0307 	and.w	r3, r3, #7
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	fa02 f303 	lsl.w	r3, r2, r3
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	4313      	orrs	r3, r2
 8004134:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	08da      	lsrs	r2, r3, #3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	3208      	adds	r2, #8
 800413e:	69b9      	ldr	r1, [r7, #24]
 8004140:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	2203      	movs	r2, #3
 8004150:	fa02 f303 	lsl.w	r3, r2, r3
 8004154:	43db      	mvns	r3, r3
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	4013      	ands	r3, r2
 800415a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f003 0203 	and.w	r2, r3, #3
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	005b      	lsls	r3, r3, #1
 8004168:	fa02 f303 	lsl.w	r3, r2, r3
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	4313      	orrs	r3, r2
 8004170:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004180:	2b00      	cmp	r3, #0
 8004182:	f000 80a2 	beq.w	80042ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004186:	2300      	movs	r3, #0
 8004188:	60fb      	str	r3, [r7, #12]
 800418a:	4b57      	ldr	r3, [pc, #348]	; (80042e8 <HAL_GPIO_Init+0x2e8>)
 800418c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418e:	4a56      	ldr	r2, [pc, #344]	; (80042e8 <HAL_GPIO_Init+0x2e8>)
 8004190:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004194:	6453      	str	r3, [r2, #68]	; 0x44
 8004196:	4b54      	ldr	r3, [pc, #336]	; (80042e8 <HAL_GPIO_Init+0x2e8>)
 8004198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800419a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800419e:	60fb      	str	r3, [r7, #12]
 80041a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041a2:	4a52      	ldr	r2, [pc, #328]	; (80042ec <HAL_GPIO_Init+0x2ec>)
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	089b      	lsrs	r3, r3, #2
 80041a8:	3302      	adds	r3, #2
 80041aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	f003 0303 	and.w	r3, r3, #3
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	220f      	movs	r2, #15
 80041ba:	fa02 f303 	lsl.w	r3, r2, r3
 80041be:	43db      	mvns	r3, r3
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	4013      	ands	r3, r2
 80041c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a49      	ldr	r2, [pc, #292]	; (80042f0 <HAL_GPIO_Init+0x2f0>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d019      	beq.n	8004202 <HAL_GPIO_Init+0x202>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a48      	ldr	r2, [pc, #288]	; (80042f4 <HAL_GPIO_Init+0x2f4>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d013      	beq.n	80041fe <HAL_GPIO_Init+0x1fe>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a47      	ldr	r2, [pc, #284]	; (80042f8 <HAL_GPIO_Init+0x2f8>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d00d      	beq.n	80041fa <HAL_GPIO_Init+0x1fa>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a46      	ldr	r2, [pc, #280]	; (80042fc <HAL_GPIO_Init+0x2fc>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d007      	beq.n	80041f6 <HAL_GPIO_Init+0x1f6>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a45      	ldr	r2, [pc, #276]	; (8004300 <HAL_GPIO_Init+0x300>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d101      	bne.n	80041f2 <HAL_GPIO_Init+0x1f2>
 80041ee:	2304      	movs	r3, #4
 80041f0:	e008      	b.n	8004204 <HAL_GPIO_Init+0x204>
 80041f2:	2307      	movs	r3, #7
 80041f4:	e006      	b.n	8004204 <HAL_GPIO_Init+0x204>
 80041f6:	2303      	movs	r3, #3
 80041f8:	e004      	b.n	8004204 <HAL_GPIO_Init+0x204>
 80041fa:	2302      	movs	r3, #2
 80041fc:	e002      	b.n	8004204 <HAL_GPIO_Init+0x204>
 80041fe:	2301      	movs	r3, #1
 8004200:	e000      	b.n	8004204 <HAL_GPIO_Init+0x204>
 8004202:	2300      	movs	r3, #0
 8004204:	69fa      	ldr	r2, [r7, #28]
 8004206:	f002 0203 	and.w	r2, r2, #3
 800420a:	0092      	lsls	r2, r2, #2
 800420c:	4093      	lsls	r3, r2
 800420e:	69ba      	ldr	r2, [r7, #24]
 8004210:	4313      	orrs	r3, r2
 8004212:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004214:	4935      	ldr	r1, [pc, #212]	; (80042ec <HAL_GPIO_Init+0x2ec>)
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	089b      	lsrs	r3, r3, #2
 800421a:	3302      	adds	r3, #2
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004222:	4b38      	ldr	r3, [pc, #224]	; (8004304 <HAL_GPIO_Init+0x304>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	43db      	mvns	r3, r3
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	4013      	ands	r3, r2
 8004230:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d003      	beq.n	8004246 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	4313      	orrs	r3, r2
 8004244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004246:	4a2f      	ldr	r2, [pc, #188]	; (8004304 <HAL_GPIO_Init+0x304>)
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800424c:	4b2d      	ldr	r3, [pc, #180]	; (8004304 <HAL_GPIO_Init+0x304>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	43db      	mvns	r3, r3
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	4013      	ands	r3, r2
 800425a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d003      	beq.n	8004270 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	4313      	orrs	r3, r2
 800426e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004270:	4a24      	ldr	r2, [pc, #144]	; (8004304 <HAL_GPIO_Init+0x304>)
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004276:	4b23      	ldr	r3, [pc, #140]	; (8004304 <HAL_GPIO_Init+0x304>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	43db      	mvns	r3, r3
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	4013      	ands	r3, r2
 8004284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d003      	beq.n	800429a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004292:	69ba      	ldr	r2, [r7, #24]
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	4313      	orrs	r3, r2
 8004298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800429a:	4a1a      	ldr	r2, [pc, #104]	; (8004304 <HAL_GPIO_Init+0x304>)
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042a0:	4b18      	ldr	r3, [pc, #96]	; (8004304 <HAL_GPIO_Init+0x304>)
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	43db      	mvns	r3, r3
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	4013      	ands	r3, r2
 80042ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d003      	beq.n	80042c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80042c4:	4a0f      	ldr	r2, [pc, #60]	; (8004304 <HAL_GPIO_Init+0x304>)
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	3301      	adds	r3, #1
 80042ce:	61fb      	str	r3, [r7, #28]
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	2b0f      	cmp	r3, #15
 80042d4:	f67f aea2 	bls.w	800401c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042d8:	bf00      	nop
 80042da:	bf00      	nop
 80042dc:	3724      	adds	r7, #36	; 0x24
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	40023800 	.word	0x40023800
 80042ec:	40013800 	.word	0x40013800
 80042f0:	40020000 	.word	0x40020000
 80042f4:	40020400 	.word	0x40020400
 80042f8:	40020800 	.word	0x40020800
 80042fc:	40020c00 	.word	0x40020c00
 8004300:	40021000 	.word	0x40021000
 8004304:	40013c00 	.word	0x40013c00

08004308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	460b      	mov	r3, r1
 8004312:	807b      	strh	r3, [r7, #2]
 8004314:	4613      	mov	r3, r2
 8004316:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004318:	787b      	ldrb	r3, [r7, #1]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800431e:	887a      	ldrh	r2, [r7, #2]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004324:	e003      	b.n	800432e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004326:	887b      	ldrh	r3, [r7, #2]
 8004328:	041a      	lsls	r2, r3, #16
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	619a      	str	r2, [r3, #24]
}
 800432e:	bf00      	nop
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr

0800433a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800433a:	b480      	push	{r7}
 800433c:	b085      	sub	sp, #20
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
 8004342:	460b      	mov	r3, r1
 8004344:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800434c:	887a      	ldrh	r2, [r7, #2]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	4013      	ands	r3, r2
 8004352:	041a      	lsls	r2, r3, #16
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	43d9      	mvns	r1, r3
 8004358:	887b      	ldrh	r3, [r7, #2]
 800435a:	400b      	ands	r3, r1
 800435c:	431a      	orrs	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	619a      	str	r2, [r3, #24]
}
 8004362:	bf00      	nop
 8004364:	3714      	adds	r7, #20
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
	...

08004370 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e12b      	b.n	80045da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d106      	bne.n	800439c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f7fd f9f4 	bl	8001784 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2224      	movs	r2, #36	; 0x24
 80043a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f022 0201 	bic.w	r2, r2, #1
 80043b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80043d4:	f001 fbac 	bl	8005b30 <HAL_RCC_GetPCLK1Freq>
 80043d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	4a81      	ldr	r2, [pc, #516]	; (80045e4 <HAL_I2C_Init+0x274>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d807      	bhi.n	80043f4 <HAL_I2C_Init+0x84>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4a80      	ldr	r2, [pc, #512]	; (80045e8 <HAL_I2C_Init+0x278>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	bf94      	ite	ls
 80043ec:	2301      	movls	r3, #1
 80043ee:	2300      	movhi	r3, #0
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	e006      	b.n	8004402 <HAL_I2C_Init+0x92>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	4a7d      	ldr	r2, [pc, #500]	; (80045ec <HAL_I2C_Init+0x27c>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	bf94      	ite	ls
 80043fc:	2301      	movls	r3, #1
 80043fe:	2300      	movhi	r3, #0
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e0e7      	b.n	80045da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	4a78      	ldr	r2, [pc, #480]	; (80045f0 <HAL_I2C_Init+0x280>)
 800440e:	fba2 2303 	umull	r2, r3, r2, r3
 8004412:	0c9b      	lsrs	r3, r3, #18
 8004414:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68ba      	ldr	r2, [r7, #8]
 8004426:	430a      	orrs	r2, r1
 8004428:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	6a1b      	ldr	r3, [r3, #32]
 8004430:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	4a6a      	ldr	r2, [pc, #424]	; (80045e4 <HAL_I2C_Init+0x274>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d802      	bhi.n	8004444 <HAL_I2C_Init+0xd4>
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	3301      	adds	r3, #1
 8004442:	e009      	b.n	8004458 <HAL_I2C_Init+0xe8>
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800444a:	fb02 f303 	mul.w	r3, r2, r3
 800444e:	4a69      	ldr	r2, [pc, #420]	; (80045f4 <HAL_I2C_Init+0x284>)
 8004450:	fba2 2303 	umull	r2, r3, r2, r3
 8004454:	099b      	lsrs	r3, r3, #6
 8004456:	3301      	adds	r3, #1
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6812      	ldr	r2, [r2, #0]
 800445c:	430b      	orrs	r3, r1
 800445e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800446a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	495c      	ldr	r1, [pc, #368]	; (80045e4 <HAL_I2C_Init+0x274>)
 8004474:	428b      	cmp	r3, r1
 8004476:	d819      	bhi.n	80044ac <HAL_I2C_Init+0x13c>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	1e59      	subs	r1, r3, #1
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	005b      	lsls	r3, r3, #1
 8004482:	fbb1 f3f3 	udiv	r3, r1, r3
 8004486:	1c59      	adds	r1, r3, #1
 8004488:	f640 73fc 	movw	r3, #4092	; 0xffc
 800448c:	400b      	ands	r3, r1
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00a      	beq.n	80044a8 <HAL_I2C_Init+0x138>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	1e59      	subs	r1, r3, #1
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	fbb1 f3f3 	udiv	r3, r1, r3
 80044a0:	3301      	adds	r3, #1
 80044a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044a6:	e051      	b.n	800454c <HAL_I2C_Init+0x1dc>
 80044a8:	2304      	movs	r3, #4
 80044aa:	e04f      	b.n	800454c <HAL_I2C_Init+0x1dc>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d111      	bne.n	80044d8 <HAL_I2C_Init+0x168>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	1e58      	subs	r0, r3, #1
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6859      	ldr	r1, [r3, #4]
 80044bc:	460b      	mov	r3, r1
 80044be:	005b      	lsls	r3, r3, #1
 80044c0:	440b      	add	r3, r1
 80044c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80044c6:	3301      	adds	r3, #1
 80044c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	bf0c      	ite	eq
 80044d0:	2301      	moveq	r3, #1
 80044d2:	2300      	movne	r3, #0
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	e012      	b.n	80044fe <HAL_I2C_Init+0x18e>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	1e58      	subs	r0, r3, #1
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6859      	ldr	r1, [r3, #4]
 80044e0:	460b      	mov	r3, r1
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	440b      	add	r3, r1
 80044e6:	0099      	lsls	r1, r3, #2
 80044e8:	440b      	add	r3, r1
 80044ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80044ee:	3301      	adds	r3, #1
 80044f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	bf0c      	ite	eq
 80044f8:	2301      	moveq	r3, #1
 80044fa:	2300      	movne	r3, #0
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <HAL_I2C_Init+0x196>
 8004502:	2301      	movs	r3, #1
 8004504:	e022      	b.n	800454c <HAL_I2C_Init+0x1dc>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10e      	bne.n	800452c <HAL_I2C_Init+0x1bc>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	1e58      	subs	r0, r3, #1
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6859      	ldr	r1, [r3, #4]
 8004516:	460b      	mov	r3, r1
 8004518:	005b      	lsls	r3, r3, #1
 800451a:	440b      	add	r3, r1
 800451c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004520:	3301      	adds	r3, #1
 8004522:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004526:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800452a:	e00f      	b.n	800454c <HAL_I2C_Init+0x1dc>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	1e58      	subs	r0, r3, #1
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6859      	ldr	r1, [r3, #4]
 8004534:	460b      	mov	r3, r1
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	440b      	add	r3, r1
 800453a:	0099      	lsls	r1, r3, #2
 800453c:	440b      	add	r3, r1
 800453e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004542:	3301      	adds	r3, #1
 8004544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004548:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800454c:	6879      	ldr	r1, [r7, #4]
 800454e:	6809      	ldr	r1, [r1, #0]
 8004550:	4313      	orrs	r3, r2
 8004552:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	69da      	ldr	r2, [r3, #28]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a1b      	ldr	r3, [r3, #32]
 8004566:	431a      	orrs	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	430a      	orrs	r2, r1
 800456e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800457a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	6911      	ldr	r1, [r2, #16]
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	68d2      	ldr	r2, [r2, #12]
 8004586:	4311      	orrs	r1, r2
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	6812      	ldr	r2, [r2, #0]
 800458c:	430b      	orrs	r3, r1
 800458e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	695a      	ldr	r2, [r3, #20]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	431a      	orrs	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	430a      	orrs	r2, r1
 80045aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f042 0201 	orr.w	r2, r2, #1
 80045ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2220      	movs	r2, #32
 80045c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	000186a0 	.word	0x000186a0
 80045e8:	001e847f 	.word	0x001e847f
 80045ec:	003d08ff 	.word	0x003d08ff
 80045f0:	431bde83 	.word	0x431bde83
 80045f4:	10624dd3 	.word	0x10624dd3

080045f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b088      	sub	sp, #32
 80045fc:	af02      	add	r7, sp, #8
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	4608      	mov	r0, r1
 8004602:	4611      	mov	r1, r2
 8004604:	461a      	mov	r2, r3
 8004606:	4603      	mov	r3, r0
 8004608:	817b      	strh	r3, [r7, #10]
 800460a:	460b      	mov	r3, r1
 800460c:	813b      	strh	r3, [r7, #8]
 800460e:	4613      	mov	r3, r2
 8004610:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004612:	f7fe fc03 	bl	8002e1c <HAL_GetTick>
 8004616:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800461e:	b2db      	uxtb	r3, r3
 8004620:	2b20      	cmp	r3, #32
 8004622:	f040 80d9 	bne.w	80047d8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	9300      	str	r3, [sp, #0]
 800462a:	2319      	movs	r3, #25
 800462c:	2201      	movs	r2, #1
 800462e:	496d      	ldr	r1, [pc, #436]	; (80047e4 <HAL_I2C_Mem_Write+0x1ec>)
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f000 fc7f 	bl	8004f34 <I2C_WaitOnFlagUntilTimeout>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d001      	beq.n	8004640 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800463c:	2302      	movs	r3, #2
 800463e:	e0cc      	b.n	80047da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004646:	2b01      	cmp	r3, #1
 8004648:	d101      	bne.n	800464e <HAL_I2C_Mem_Write+0x56>
 800464a:	2302      	movs	r3, #2
 800464c:	e0c5      	b.n	80047da <HAL_I2C_Mem_Write+0x1e2>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	2b01      	cmp	r3, #1
 8004662:	d007      	beq.n	8004674 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f042 0201 	orr.w	r2, r2, #1
 8004672:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004682:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2221      	movs	r2, #33	; 0x21
 8004688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2240      	movs	r2, #64	; 0x40
 8004690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6a3a      	ldr	r2, [r7, #32]
 800469e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80046a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	4a4d      	ldr	r2, [pc, #308]	; (80047e8 <HAL_I2C_Mem_Write+0x1f0>)
 80046b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046b6:	88f8      	ldrh	r0, [r7, #6]
 80046b8:	893a      	ldrh	r2, [r7, #8]
 80046ba:	8979      	ldrh	r1, [r7, #10]
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	9301      	str	r3, [sp, #4]
 80046c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	4603      	mov	r3, r0
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f000 fab6 	bl	8004c38 <I2C_RequestMemoryWrite>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d052      	beq.n	8004778 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e081      	b.n	80047da <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f000 fd00 	bl	80050e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00d      	beq.n	8004702 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	2b04      	cmp	r3, #4
 80046ec:	d107      	bne.n	80046fe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e06b      	b.n	80047da <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004706:	781a      	ldrb	r2, [r3, #0]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004712:	1c5a      	adds	r2, r3, #1
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800471c:	3b01      	subs	r3, #1
 800471e:	b29a      	uxth	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004728:	b29b      	uxth	r3, r3
 800472a:	3b01      	subs	r3, #1
 800472c:	b29a      	uxth	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b04      	cmp	r3, #4
 800473e:	d11b      	bne.n	8004778 <HAL_I2C_Mem_Write+0x180>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004744:	2b00      	cmp	r3, #0
 8004746:	d017      	beq.n	8004778 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	781a      	ldrb	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004758:	1c5a      	adds	r2, r3, #1
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004762:	3b01      	subs	r3, #1
 8004764:	b29a      	uxth	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800476e:	b29b      	uxth	r3, r3
 8004770:	3b01      	subs	r3, #1
 8004772:	b29a      	uxth	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1aa      	bne.n	80046d6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f000 fcec 	bl	8005162 <I2C_WaitOnBTFFlagUntilTimeout>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00d      	beq.n	80047ac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004794:	2b04      	cmp	r3, #4
 8004796:	d107      	bne.n	80047a8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047a6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e016      	b.n	80047da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2220      	movs	r2, #32
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80047d4:	2300      	movs	r3, #0
 80047d6:	e000      	b.n	80047da <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80047d8:	2302      	movs	r3, #2
  }
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3718      	adds	r7, #24
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	00100002 	.word	0x00100002
 80047e8:	ffff0000 	.word	0xffff0000

080047ec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b08c      	sub	sp, #48	; 0x30
 80047f0:	af02      	add	r7, sp, #8
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	4608      	mov	r0, r1
 80047f6:	4611      	mov	r1, r2
 80047f8:	461a      	mov	r2, r3
 80047fa:	4603      	mov	r3, r0
 80047fc:	817b      	strh	r3, [r7, #10]
 80047fe:	460b      	mov	r3, r1
 8004800:	813b      	strh	r3, [r7, #8]
 8004802:	4613      	mov	r3, r2
 8004804:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004806:	f7fe fb09 	bl	8002e1c <HAL_GetTick>
 800480a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b20      	cmp	r3, #32
 8004816:	f040 8208 	bne.w	8004c2a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800481a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481c:	9300      	str	r3, [sp, #0]
 800481e:	2319      	movs	r3, #25
 8004820:	2201      	movs	r2, #1
 8004822:	497b      	ldr	r1, [pc, #492]	; (8004a10 <HAL_I2C_Mem_Read+0x224>)
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f000 fb85 	bl	8004f34 <I2C_WaitOnFlagUntilTimeout>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d001      	beq.n	8004834 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004830:	2302      	movs	r3, #2
 8004832:	e1fb      	b.n	8004c2c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800483a:	2b01      	cmp	r3, #1
 800483c:	d101      	bne.n	8004842 <HAL_I2C_Mem_Read+0x56>
 800483e:	2302      	movs	r3, #2
 8004840:	e1f4      	b.n	8004c2c <HAL_I2C_Mem_Read+0x440>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0301 	and.w	r3, r3, #1
 8004854:	2b01      	cmp	r3, #1
 8004856:	d007      	beq.n	8004868 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f042 0201 	orr.w	r2, r2, #1
 8004866:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004876:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2222      	movs	r2, #34	; 0x22
 800487c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2240      	movs	r2, #64	; 0x40
 8004884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004892:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004898:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800489e:	b29a      	uxth	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	4a5b      	ldr	r2, [pc, #364]	; (8004a14 <HAL_I2C_Mem_Read+0x228>)
 80048a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80048aa:	88f8      	ldrh	r0, [r7, #6]
 80048ac:	893a      	ldrh	r2, [r7, #8]
 80048ae:	8979      	ldrh	r1, [r7, #10]
 80048b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b2:	9301      	str	r3, [sp, #4]
 80048b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	4603      	mov	r3, r0
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f000 fa52 	bl	8004d64 <I2C_RequestMemoryRead>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e1b0      	b.n	8004c2c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d113      	bne.n	80048fa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048d2:	2300      	movs	r3, #0
 80048d4:	623b      	str	r3, [r7, #32]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	695b      	ldr	r3, [r3, #20]
 80048dc:	623b      	str	r3, [r7, #32]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	623b      	str	r3, [r7, #32]
 80048e6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048f6:	601a      	str	r2, [r3, #0]
 80048f8:	e184      	b.n	8004c04 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d11b      	bne.n	800493a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004910:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004912:	2300      	movs	r3, #0
 8004914:	61fb      	str	r3, [r7, #28]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	695b      	ldr	r3, [r3, #20]
 800491c:	61fb      	str	r3, [r7, #28]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	699b      	ldr	r3, [r3, #24]
 8004924:	61fb      	str	r3, [r7, #28]
 8004926:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	e164      	b.n	8004c04 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800493e:	2b02      	cmp	r3, #2
 8004940:	d11b      	bne.n	800497a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004950:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004960:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004962:	2300      	movs	r3, #0
 8004964:	61bb      	str	r3, [r7, #24]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	61bb      	str	r3, [r7, #24]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	61bb      	str	r3, [r7, #24]
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	e144      	b.n	8004c04 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800497a:	2300      	movs	r3, #0
 800497c:	617b      	str	r3, [r7, #20]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	695b      	ldr	r3, [r3, #20]
 8004984:	617b      	str	r3, [r7, #20]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	617b      	str	r3, [r7, #20]
 800498e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004990:	e138      	b.n	8004c04 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004996:	2b03      	cmp	r3, #3
 8004998:	f200 80f1 	bhi.w	8004b7e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d123      	bne.n	80049ec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f000 fc1b 	bl	80051e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d001      	beq.n	80049b8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e139      	b.n	8004c2c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	691a      	ldr	r2, [r3, #16]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c2:	b2d2      	uxtb	r2, r2
 80049c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ca:	1c5a      	adds	r2, r3, #1
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049d4:	3b01      	subs	r3, #1
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	3b01      	subs	r3, #1
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049ea:	e10b      	b.n	8004c04 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d14e      	bne.n	8004a92 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f6:	9300      	str	r3, [sp, #0]
 80049f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fa:	2200      	movs	r2, #0
 80049fc:	4906      	ldr	r1, [pc, #24]	; (8004a18 <HAL_I2C_Mem_Read+0x22c>)
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f000 fa98 	bl	8004f34 <I2C_WaitOnFlagUntilTimeout>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d008      	beq.n	8004a1c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e10e      	b.n	8004c2c <HAL_I2C_Mem_Read+0x440>
 8004a0e:	bf00      	nop
 8004a10:	00100002 	.word	0x00100002
 8004a14:	ffff0000 	.word	0xffff0000
 8004a18:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	691a      	ldr	r2, [r3, #16]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a36:	b2d2      	uxtb	r2, r2
 8004a38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3e:	1c5a      	adds	r2, r3, #1
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	3b01      	subs	r3, #1
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	691a      	ldr	r2, [r3, #16]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a68:	b2d2      	uxtb	r2, r2
 8004a6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a70:	1c5a      	adds	r2, r3, #1
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a90:	e0b8      	b.n	8004c04 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	9300      	str	r3, [sp, #0]
 8004a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a98:	2200      	movs	r2, #0
 8004a9a:	4966      	ldr	r1, [pc, #408]	; (8004c34 <HAL_I2C_Mem_Read+0x448>)
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 fa49 	bl	8004f34 <I2C_WaitOnFlagUntilTimeout>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e0bf      	b.n	8004c2c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	691a      	ldr	r2, [r3, #16]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac6:	b2d2      	uxtb	r2, r2
 8004ac8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	1c5a      	adds	r2, r3, #1
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af4:	2200      	movs	r2, #0
 8004af6:	494f      	ldr	r1, [pc, #316]	; (8004c34 <HAL_I2C_Mem_Read+0x448>)
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f000 fa1b 	bl	8004f34 <I2C_WaitOnFlagUntilTimeout>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d001      	beq.n	8004b08 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e091      	b.n	8004c2c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	691a      	ldr	r2, [r3, #16]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b22:	b2d2      	uxtb	r2, r2
 8004b24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2a:	1c5a      	adds	r2, r3, #1
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b34:	3b01      	subs	r3, #1
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	3b01      	subs	r3, #1
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	691a      	ldr	r2, [r3, #16]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b54:	b2d2      	uxtb	r2, r2
 8004b56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5c:	1c5a      	adds	r2, r3, #1
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b66:	3b01      	subs	r3, #1
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	3b01      	subs	r3, #1
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b7c:	e042      	b.n	8004c04 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f000 fb2e 	bl	80051e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e04c      	b.n	8004c2c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	691a      	ldr	r2, [r3, #16]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9c:	b2d2      	uxtb	r2, r2
 8004b9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	1c5a      	adds	r2, r3, #1
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	f003 0304 	and.w	r3, r3, #4
 8004bce:	2b04      	cmp	r3, #4
 8004bd0:	d118      	bne.n	8004c04 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	691a      	ldr	r2, [r3, #16]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bdc:	b2d2      	uxtb	r2, r2
 8004bde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be4:	1c5a      	adds	r2, r3, #1
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f47f aec2 	bne.w	8004992 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2220      	movs	r2, #32
 8004c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c26:	2300      	movs	r3, #0
 8004c28:	e000      	b.n	8004c2c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004c2a:	2302      	movs	r3, #2
  }
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3728      	adds	r7, #40	; 0x28
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	00010004 	.word	0x00010004

08004c38 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b088      	sub	sp, #32
 8004c3c:	af02      	add	r7, sp, #8
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	4608      	mov	r0, r1
 8004c42:	4611      	mov	r1, r2
 8004c44:	461a      	mov	r2, r3
 8004c46:	4603      	mov	r3, r0
 8004c48:	817b      	strh	r3, [r7, #10]
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	813b      	strh	r3, [r7, #8]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c60:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c64:	9300      	str	r3, [sp, #0]
 8004c66:	6a3b      	ldr	r3, [r7, #32]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f000 f960 	bl	8004f34 <I2C_WaitOnFlagUntilTimeout>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00d      	beq.n	8004c96 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c88:	d103      	bne.n	8004c92 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c90:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e05f      	b.n	8004d56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c96:	897b      	ldrh	r3, [r7, #10]
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ca4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	6a3a      	ldr	r2, [r7, #32]
 8004caa:	492d      	ldr	r1, [pc, #180]	; (8004d60 <I2C_RequestMemoryWrite+0x128>)
 8004cac:	68f8      	ldr	r0, [r7, #12]
 8004cae:	f000 f998 	bl	8004fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d001      	beq.n	8004cbc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e04c      	b.n	8004d56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	617b      	str	r3, [r7, #20]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	617b      	str	r3, [r7, #20]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	617b      	str	r3, [r7, #20]
 8004cd0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cd4:	6a39      	ldr	r1, [r7, #32]
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f000 fa02 	bl	80050e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00d      	beq.n	8004cfe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	2b04      	cmp	r3, #4
 8004ce8:	d107      	bne.n	8004cfa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cf8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e02b      	b.n	8004d56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004cfe:	88fb      	ldrh	r3, [r7, #6]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d105      	bne.n	8004d10 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d04:	893b      	ldrh	r3, [r7, #8]
 8004d06:	b2da      	uxtb	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	611a      	str	r2, [r3, #16]
 8004d0e:	e021      	b.n	8004d54 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d10:	893b      	ldrh	r3, [r7, #8]
 8004d12:	0a1b      	lsrs	r3, r3, #8
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	b2da      	uxtb	r2, r3
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d20:	6a39      	ldr	r1, [r7, #32]
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f000 f9dc 	bl	80050e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00d      	beq.n	8004d4a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d32:	2b04      	cmp	r3, #4
 8004d34:	d107      	bne.n	8004d46 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d44:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e005      	b.n	8004d56 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d4a:	893b      	ldrh	r3, [r7, #8]
 8004d4c:	b2da      	uxtb	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3718      	adds	r7, #24
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	00010002 	.word	0x00010002

08004d64 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b088      	sub	sp, #32
 8004d68:	af02      	add	r7, sp, #8
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	4608      	mov	r0, r1
 8004d6e:	4611      	mov	r1, r2
 8004d70:	461a      	mov	r2, r3
 8004d72:	4603      	mov	r3, r0
 8004d74:	817b      	strh	r3, [r7, #10]
 8004d76:	460b      	mov	r3, r1
 8004d78:	813b      	strh	r3, [r7, #8]
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d8c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da0:	9300      	str	r3, [sp, #0]
 8004da2:	6a3b      	ldr	r3, [r7, #32]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f000 f8c2 	bl	8004f34 <I2C_WaitOnFlagUntilTimeout>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00d      	beq.n	8004dd2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dc4:	d103      	bne.n	8004dce <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dcc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e0aa      	b.n	8004f28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004dd2:	897b      	ldrh	r3, [r7, #10]
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004de0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de4:	6a3a      	ldr	r2, [r7, #32]
 8004de6:	4952      	ldr	r1, [pc, #328]	; (8004f30 <I2C_RequestMemoryRead+0x1cc>)
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f000 f8fa 	bl	8004fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d001      	beq.n	8004df8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e097      	b.n	8004f28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004df8:	2300      	movs	r3, #0
 8004dfa:	617b      	str	r3, [r7, #20]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	617b      	str	r3, [r7, #20]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	617b      	str	r3, [r7, #20]
 8004e0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e10:	6a39      	ldr	r1, [r7, #32]
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f000 f964 	bl	80050e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00d      	beq.n	8004e3a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e22:	2b04      	cmp	r3, #4
 8004e24:	d107      	bne.n	8004e36 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e076      	b.n	8004f28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e3a:	88fb      	ldrh	r3, [r7, #6]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d105      	bne.n	8004e4c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e40:	893b      	ldrh	r3, [r7, #8]
 8004e42:	b2da      	uxtb	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	611a      	str	r2, [r3, #16]
 8004e4a:	e021      	b.n	8004e90 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e4c:	893b      	ldrh	r3, [r7, #8]
 8004e4e:	0a1b      	lsrs	r3, r3, #8
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	b2da      	uxtb	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e5c:	6a39      	ldr	r1, [r7, #32]
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f000 f93e 	bl	80050e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00d      	beq.n	8004e86 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6e:	2b04      	cmp	r3, #4
 8004e70:	d107      	bne.n	8004e82 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e050      	b.n	8004f28 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e86:	893b      	ldrh	r3, [r7, #8]
 8004e88:	b2da      	uxtb	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e92:	6a39      	ldr	r1, [r7, #32]
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f000 f923 	bl	80050e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00d      	beq.n	8004ebc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea4:	2b04      	cmp	r3, #4
 8004ea6:	d107      	bne.n	8004eb8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eb6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e035      	b.n	8004f28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004eca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ece:	9300      	str	r3, [sp, #0]
 8004ed0:	6a3b      	ldr	r3, [r7, #32]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ed8:	68f8      	ldr	r0, [r7, #12]
 8004eda:	f000 f82b 	bl	8004f34 <I2C_WaitOnFlagUntilTimeout>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00d      	beq.n	8004f00 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ef2:	d103      	bne.n	8004efc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004efa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e013      	b.n	8004f28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004f00:	897b      	ldrh	r3, [r7, #10]
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	f043 0301 	orr.w	r3, r3, #1
 8004f08:	b2da      	uxtb	r2, r3
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	6a3a      	ldr	r2, [r7, #32]
 8004f14:	4906      	ldr	r1, [pc, #24]	; (8004f30 <I2C_RequestMemoryRead+0x1cc>)
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f000 f863 	bl	8004fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d001      	beq.n	8004f26 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e000      	b.n	8004f28 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3718      	adds	r7, #24
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	00010002 	.word	0x00010002

08004f34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	603b      	str	r3, [r7, #0]
 8004f40:	4613      	mov	r3, r2
 8004f42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f44:	e025      	b.n	8004f92 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f4c:	d021      	beq.n	8004f92 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f4e:	f7fd ff65 	bl	8002e1c <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	683a      	ldr	r2, [r7, #0]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d302      	bcc.n	8004f64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d116      	bne.n	8004f92 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2220      	movs	r2, #32
 8004f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7e:	f043 0220 	orr.w	r2, r3, #32
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e023      	b.n	8004fda <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	0c1b      	lsrs	r3, r3, #16
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d10d      	bne.n	8004fb8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	43da      	mvns	r2, r3
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	bf0c      	ite	eq
 8004fae:	2301      	moveq	r3, #1
 8004fb0:	2300      	movne	r3, #0
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	e00c      	b.n	8004fd2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	43da      	mvns	r2, r3
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	bf0c      	ite	eq
 8004fca:	2301      	moveq	r3, #1
 8004fcc:	2300      	movne	r3, #0
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	79fb      	ldrb	r3, [r7, #7]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d0b6      	beq.n	8004f46 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b084      	sub	sp, #16
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	60f8      	str	r0, [r7, #12]
 8004fea:	60b9      	str	r1, [r7, #8]
 8004fec:	607a      	str	r2, [r7, #4]
 8004fee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ff0:	e051      	b.n	8005096 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	695b      	ldr	r3, [r3, #20]
 8004ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ffc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005000:	d123      	bne.n	800504a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005010:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800501a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2220      	movs	r2, #32
 8005026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005036:	f043 0204 	orr.w	r2, r3, #4
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e046      	b.n	80050d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005050:	d021      	beq.n	8005096 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005052:	f7fd fee3 	bl	8002e1c <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	429a      	cmp	r2, r3
 8005060:	d302      	bcc.n	8005068 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d116      	bne.n	8005096 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2220      	movs	r2, #32
 8005072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005082:	f043 0220 	orr.w	r2, r3, #32
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e020      	b.n	80050d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	0c1b      	lsrs	r3, r3, #16
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2b01      	cmp	r3, #1
 800509e:	d10c      	bne.n	80050ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	43da      	mvns	r2, r3
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	4013      	ands	r3, r2
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	bf14      	ite	ne
 80050b2:	2301      	movne	r3, #1
 80050b4:	2300      	moveq	r3, #0
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	e00b      	b.n	80050d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	43da      	mvns	r2, r3
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	4013      	ands	r3, r2
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	bf14      	ite	ne
 80050cc:	2301      	movne	r3, #1
 80050ce:	2300      	moveq	r3, #0
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d18d      	bne.n	8004ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050ec:	e02d      	b.n	800514a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 f8ce 	bl	8005290 <I2C_IsAcknowledgeFailed>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e02d      	b.n	800515a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005104:	d021      	beq.n	800514a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005106:	f7fd fe89 	bl	8002e1c <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	68ba      	ldr	r2, [r7, #8]
 8005112:	429a      	cmp	r2, r3
 8005114:	d302      	bcc.n	800511c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d116      	bne.n	800514a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2220      	movs	r2, #32
 8005126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005136:	f043 0220 	orr.w	r2, r3, #32
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e007      	b.n	800515a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	695b      	ldr	r3, [r3, #20]
 8005150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005154:	2b80      	cmp	r3, #128	; 0x80
 8005156:	d1ca      	bne.n	80050ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b084      	sub	sp, #16
 8005166:	af00      	add	r7, sp, #0
 8005168:	60f8      	str	r0, [r7, #12]
 800516a:	60b9      	str	r1, [r7, #8]
 800516c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800516e:	e02d      	b.n	80051cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f000 f88d 	bl	8005290 <I2C_IsAcknowledgeFailed>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d001      	beq.n	8005180 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e02d      	b.n	80051dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005186:	d021      	beq.n	80051cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005188:	f7fd fe48 	bl	8002e1c <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	68ba      	ldr	r2, [r7, #8]
 8005194:	429a      	cmp	r2, r3
 8005196:	d302      	bcc.n	800519e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d116      	bne.n	80051cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2220      	movs	r2, #32
 80051a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b8:	f043 0220 	orr.w	r2, r3, #32
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e007      	b.n	80051dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	f003 0304 	and.w	r3, r3, #4
 80051d6:	2b04      	cmp	r3, #4
 80051d8:	d1ca      	bne.n	8005170 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3710      	adds	r7, #16
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051f0:	e042      	b.n	8005278 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	695b      	ldr	r3, [r3, #20]
 80051f8:	f003 0310 	and.w	r3, r3, #16
 80051fc:	2b10      	cmp	r3, #16
 80051fe:	d119      	bne.n	8005234 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f06f 0210 	mvn.w	r2, #16
 8005208:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2220      	movs	r2, #32
 8005214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e029      	b.n	8005288 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005234:	f7fd fdf2 	bl	8002e1c <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	429a      	cmp	r2, r3
 8005242:	d302      	bcc.n	800524a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d116      	bne.n	8005278 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2220      	movs	r2, #32
 8005254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005264:	f043 0220 	orr.w	r2, r3, #32
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e007      	b.n	8005288 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	695b      	ldr	r3, [r3, #20]
 800527e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005282:	2b40      	cmp	r3, #64	; 0x40
 8005284:	d1b5      	bne.n	80051f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005286:	2300      	movs	r3, #0
}
 8005288:	4618      	mov	r0, r3
 800528a:	3710      	adds	r7, #16
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052a6:	d11b      	bne.n	80052e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2220      	movs	r2, #32
 80052bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052cc:	f043 0204 	orr.w	r2, r3, #4
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e000      	b.n	80052e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	370c      	adds	r7, #12
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
	...

080052f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b086      	sub	sp, #24
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d101      	bne.n	8005302 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e264      	b.n	80057cc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b00      	cmp	r3, #0
 800530c:	d075      	beq.n	80053fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800530e:	4ba3      	ldr	r3, [pc, #652]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f003 030c 	and.w	r3, r3, #12
 8005316:	2b04      	cmp	r3, #4
 8005318:	d00c      	beq.n	8005334 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800531a:	4ba0      	ldr	r3, [pc, #640]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005322:	2b08      	cmp	r3, #8
 8005324:	d112      	bne.n	800534c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005326:	4b9d      	ldr	r3, [pc, #628]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800532e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005332:	d10b      	bne.n	800534c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005334:	4b99      	ldr	r3, [pc, #612]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d05b      	beq.n	80053f8 <HAL_RCC_OscConfig+0x108>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d157      	bne.n	80053f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e23f      	b.n	80057cc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005354:	d106      	bne.n	8005364 <HAL_RCC_OscConfig+0x74>
 8005356:	4b91      	ldr	r3, [pc, #580]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a90      	ldr	r2, [pc, #576]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 800535c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005360:	6013      	str	r3, [r2, #0]
 8005362:	e01d      	b.n	80053a0 <HAL_RCC_OscConfig+0xb0>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800536c:	d10c      	bne.n	8005388 <HAL_RCC_OscConfig+0x98>
 800536e:	4b8b      	ldr	r3, [pc, #556]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a8a      	ldr	r2, [pc, #552]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005374:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005378:	6013      	str	r3, [r2, #0]
 800537a:	4b88      	ldr	r3, [pc, #544]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a87      	ldr	r2, [pc, #540]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005384:	6013      	str	r3, [r2, #0]
 8005386:	e00b      	b.n	80053a0 <HAL_RCC_OscConfig+0xb0>
 8005388:	4b84      	ldr	r3, [pc, #528]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a83      	ldr	r2, [pc, #524]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 800538e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005392:	6013      	str	r3, [r2, #0]
 8005394:	4b81      	ldr	r3, [pc, #516]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a80      	ldr	r2, [pc, #512]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 800539a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800539e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d013      	beq.n	80053d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053a8:	f7fd fd38 	bl	8002e1c <HAL_GetTick>
 80053ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ae:	e008      	b.n	80053c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053b0:	f7fd fd34 	bl	8002e1c <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b64      	cmp	r3, #100	; 0x64
 80053bc:	d901      	bls.n	80053c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e204      	b.n	80057cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053c2:	4b76      	ldr	r3, [pc, #472]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d0f0      	beq.n	80053b0 <HAL_RCC_OscConfig+0xc0>
 80053ce:	e014      	b.n	80053fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d0:	f7fd fd24 	bl	8002e1c <HAL_GetTick>
 80053d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053d6:	e008      	b.n	80053ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053d8:	f7fd fd20 	bl	8002e1c <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b64      	cmp	r3, #100	; 0x64
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e1f0      	b.n	80057cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053ea:	4b6c      	ldr	r3, [pc, #432]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1f0      	bne.n	80053d8 <HAL_RCC_OscConfig+0xe8>
 80053f6:	e000      	b.n	80053fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0302 	and.w	r3, r3, #2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d063      	beq.n	80054ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005406:	4b65      	ldr	r3, [pc, #404]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f003 030c 	and.w	r3, r3, #12
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00b      	beq.n	800542a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005412:	4b62      	ldr	r3, [pc, #392]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800541a:	2b08      	cmp	r3, #8
 800541c:	d11c      	bne.n	8005458 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800541e:	4b5f      	ldr	r3, [pc, #380]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d116      	bne.n	8005458 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800542a:	4b5c      	ldr	r3, [pc, #368]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d005      	beq.n	8005442 <HAL_RCC_OscConfig+0x152>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d001      	beq.n	8005442 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e1c4      	b.n	80057cc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005442:	4b56      	ldr	r3, [pc, #344]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	00db      	lsls	r3, r3, #3
 8005450:	4952      	ldr	r1, [pc, #328]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005452:	4313      	orrs	r3, r2
 8005454:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005456:	e03a      	b.n	80054ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d020      	beq.n	80054a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005460:	4b4f      	ldr	r3, [pc, #316]	; (80055a0 <HAL_RCC_OscConfig+0x2b0>)
 8005462:	2201      	movs	r2, #1
 8005464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005466:	f7fd fcd9 	bl	8002e1c <HAL_GetTick>
 800546a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800546c:	e008      	b.n	8005480 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800546e:	f7fd fcd5 	bl	8002e1c <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	2b02      	cmp	r3, #2
 800547a:	d901      	bls.n	8005480 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e1a5      	b.n	80057cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005480:	4b46      	ldr	r3, [pc, #280]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0302 	and.w	r3, r3, #2
 8005488:	2b00      	cmp	r3, #0
 800548a:	d0f0      	beq.n	800546e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800548c:	4b43      	ldr	r3, [pc, #268]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	00db      	lsls	r3, r3, #3
 800549a:	4940      	ldr	r1, [pc, #256]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 800549c:	4313      	orrs	r3, r2
 800549e:	600b      	str	r3, [r1, #0]
 80054a0:	e015      	b.n	80054ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054a2:	4b3f      	ldr	r3, [pc, #252]	; (80055a0 <HAL_RCC_OscConfig+0x2b0>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a8:	f7fd fcb8 	bl	8002e1c <HAL_GetTick>
 80054ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054ae:	e008      	b.n	80054c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054b0:	f7fd fcb4 	bl	8002e1c <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e184      	b.n	80057cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054c2:	4b36      	ldr	r3, [pc, #216]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 0302 	and.w	r3, r3, #2
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1f0      	bne.n	80054b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0308 	and.w	r3, r3, #8
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d030      	beq.n	800553c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d016      	beq.n	8005510 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054e2:	4b30      	ldr	r3, [pc, #192]	; (80055a4 <HAL_RCC_OscConfig+0x2b4>)
 80054e4:	2201      	movs	r2, #1
 80054e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054e8:	f7fd fc98 	bl	8002e1c <HAL_GetTick>
 80054ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054ee:	e008      	b.n	8005502 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054f0:	f7fd fc94 	bl	8002e1c <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d901      	bls.n	8005502 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e164      	b.n	80057cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005502:	4b26      	ldr	r3, [pc, #152]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	2b00      	cmp	r3, #0
 800550c:	d0f0      	beq.n	80054f0 <HAL_RCC_OscConfig+0x200>
 800550e:	e015      	b.n	800553c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005510:	4b24      	ldr	r3, [pc, #144]	; (80055a4 <HAL_RCC_OscConfig+0x2b4>)
 8005512:	2200      	movs	r2, #0
 8005514:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005516:	f7fd fc81 	bl	8002e1c <HAL_GetTick>
 800551a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800551c:	e008      	b.n	8005530 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800551e:	f7fd fc7d 	bl	8002e1c <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	2b02      	cmp	r3, #2
 800552a:	d901      	bls.n	8005530 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e14d      	b.n	80057cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005530:	4b1a      	ldr	r3, [pc, #104]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005534:	f003 0302 	and.w	r3, r3, #2
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1f0      	bne.n	800551e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0304 	and.w	r3, r3, #4
 8005544:	2b00      	cmp	r3, #0
 8005546:	f000 80a0 	beq.w	800568a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800554a:	2300      	movs	r3, #0
 800554c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800554e:	4b13      	ldr	r3, [pc, #76]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10f      	bne.n	800557a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800555a:	2300      	movs	r3, #0
 800555c:	60bb      	str	r3, [r7, #8]
 800555e:	4b0f      	ldr	r3, [pc, #60]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005562:	4a0e      	ldr	r2, [pc, #56]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005568:	6413      	str	r3, [r2, #64]	; 0x40
 800556a:	4b0c      	ldr	r3, [pc, #48]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 800556c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005572:	60bb      	str	r3, [r7, #8]
 8005574:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005576:	2301      	movs	r3, #1
 8005578:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800557a:	4b0b      	ldr	r3, [pc, #44]	; (80055a8 <HAL_RCC_OscConfig+0x2b8>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005582:	2b00      	cmp	r3, #0
 8005584:	d121      	bne.n	80055ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005586:	4b08      	ldr	r3, [pc, #32]	; (80055a8 <HAL_RCC_OscConfig+0x2b8>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a07      	ldr	r2, [pc, #28]	; (80055a8 <HAL_RCC_OscConfig+0x2b8>)
 800558c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005590:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005592:	f7fd fc43 	bl	8002e1c <HAL_GetTick>
 8005596:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005598:	e011      	b.n	80055be <HAL_RCC_OscConfig+0x2ce>
 800559a:	bf00      	nop
 800559c:	40023800 	.word	0x40023800
 80055a0:	42470000 	.word	0x42470000
 80055a4:	42470e80 	.word	0x42470e80
 80055a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055ac:	f7fd fc36 	bl	8002e1c <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d901      	bls.n	80055be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e106      	b.n	80057cc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055be:	4b85      	ldr	r3, [pc, #532]	; (80057d4 <HAL_RCC_OscConfig+0x4e4>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d0f0      	beq.n	80055ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d106      	bne.n	80055e0 <HAL_RCC_OscConfig+0x2f0>
 80055d2:	4b81      	ldr	r3, [pc, #516]	; (80057d8 <HAL_RCC_OscConfig+0x4e8>)
 80055d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d6:	4a80      	ldr	r2, [pc, #512]	; (80057d8 <HAL_RCC_OscConfig+0x4e8>)
 80055d8:	f043 0301 	orr.w	r3, r3, #1
 80055dc:	6713      	str	r3, [r2, #112]	; 0x70
 80055de:	e01c      	b.n	800561a <HAL_RCC_OscConfig+0x32a>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	2b05      	cmp	r3, #5
 80055e6:	d10c      	bne.n	8005602 <HAL_RCC_OscConfig+0x312>
 80055e8:	4b7b      	ldr	r3, [pc, #492]	; (80057d8 <HAL_RCC_OscConfig+0x4e8>)
 80055ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ec:	4a7a      	ldr	r2, [pc, #488]	; (80057d8 <HAL_RCC_OscConfig+0x4e8>)
 80055ee:	f043 0304 	orr.w	r3, r3, #4
 80055f2:	6713      	str	r3, [r2, #112]	; 0x70
 80055f4:	4b78      	ldr	r3, [pc, #480]	; (80057d8 <HAL_RCC_OscConfig+0x4e8>)
 80055f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055f8:	4a77      	ldr	r2, [pc, #476]	; (80057d8 <HAL_RCC_OscConfig+0x4e8>)
 80055fa:	f043 0301 	orr.w	r3, r3, #1
 80055fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005600:	e00b      	b.n	800561a <HAL_RCC_OscConfig+0x32a>
 8005602:	4b75      	ldr	r3, [pc, #468]	; (80057d8 <HAL_RCC_OscConfig+0x4e8>)
 8005604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005606:	4a74      	ldr	r2, [pc, #464]	; (80057d8 <HAL_RCC_OscConfig+0x4e8>)
 8005608:	f023 0301 	bic.w	r3, r3, #1
 800560c:	6713      	str	r3, [r2, #112]	; 0x70
 800560e:	4b72      	ldr	r3, [pc, #456]	; (80057d8 <HAL_RCC_OscConfig+0x4e8>)
 8005610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005612:	4a71      	ldr	r2, [pc, #452]	; (80057d8 <HAL_RCC_OscConfig+0x4e8>)
 8005614:	f023 0304 	bic.w	r3, r3, #4
 8005618:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d015      	beq.n	800564e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005622:	f7fd fbfb 	bl	8002e1c <HAL_GetTick>
 8005626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005628:	e00a      	b.n	8005640 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800562a:	f7fd fbf7 	bl	8002e1c <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	f241 3288 	movw	r2, #5000	; 0x1388
 8005638:	4293      	cmp	r3, r2
 800563a:	d901      	bls.n	8005640 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e0c5      	b.n	80057cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005640:	4b65      	ldr	r3, [pc, #404]	; (80057d8 <HAL_RCC_OscConfig+0x4e8>)
 8005642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005644:	f003 0302 	and.w	r3, r3, #2
 8005648:	2b00      	cmp	r3, #0
 800564a:	d0ee      	beq.n	800562a <HAL_RCC_OscConfig+0x33a>
 800564c:	e014      	b.n	8005678 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800564e:	f7fd fbe5 	bl	8002e1c <HAL_GetTick>
 8005652:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005654:	e00a      	b.n	800566c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005656:	f7fd fbe1 	bl	8002e1c <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	f241 3288 	movw	r2, #5000	; 0x1388
 8005664:	4293      	cmp	r3, r2
 8005666:	d901      	bls.n	800566c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e0af      	b.n	80057cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800566c:	4b5a      	ldr	r3, [pc, #360]	; (80057d8 <HAL_RCC_OscConfig+0x4e8>)
 800566e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005670:	f003 0302 	and.w	r3, r3, #2
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1ee      	bne.n	8005656 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005678:	7dfb      	ldrb	r3, [r7, #23]
 800567a:	2b01      	cmp	r3, #1
 800567c:	d105      	bne.n	800568a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800567e:	4b56      	ldr	r3, [pc, #344]	; (80057d8 <HAL_RCC_OscConfig+0x4e8>)
 8005680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005682:	4a55      	ldr	r2, [pc, #340]	; (80057d8 <HAL_RCC_OscConfig+0x4e8>)
 8005684:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005688:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	2b00      	cmp	r3, #0
 8005690:	f000 809b 	beq.w	80057ca <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005694:	4b50      	ldr	r3, [pc, #320]	; (80057d8 <HAL_RCC_OscConfig+0x4e8>)
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f003 030c 	and.w	r3, r3, #12
 800569c:	2b08      	cmp	r3, #8
 800569e:	d05c      	beq.n	800575a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	d141      	bne.n	800572c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056a8:	4b4c      	ldr	r3, [pc, #304]	; (80057dc <HAL_RCC_OscConfig+0x4ec>)
 80056aa:	2200      	movs	r2, #0
 80056ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ae:	f7fd fbb5 	bl	8002e1c <HAL_GetTick>
 80056b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056b4:	e008      	b.n	80056c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056b6:	f7fd fbb1 	bl	8002e1c <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d901      	bls.n	80056c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e081      	b.n	80057cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056c8:	4b43      	ldr	r3, [pc, #268]	; (80057d8 <HAL_RCC_OscConfig+0x4e8>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1f0      	bne.n	80056b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	69da      	ldr	r2, [r3, #28]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a1b      	ldr	r3, [r3, #32]
 80056dc:	431a      	orrs	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e2:	019b      	lsls	r3, r3, #6
 80056e4:	431a      	orrs	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ea:	085b      	lsrs	r3, r3, #1
 80056ec:	3b01      	subs	r3, #1
 80056ee:	041b      	lsls	r3, r3, #16
 80056f0:	431a      	orrs	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f6:	061b      	lsls	r3, r3, #24
 80056f8:	4937      	ldr	r1, [pc, #220]	; (80057d8 <HAL_RCC_OscConfig+0x4e8>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056fe:	4b37      	ldr	r3, [pc, #220]	; (80057dc <HAL_RCC_OscConfig+0x4ec>)
 8005700:	2201      	movs	r2, #1
 8005702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005704:	f7fd fb8a 	bl	8002e1c <HAL_GetTick>
 8005708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800570a:	e008      	b.n	800571e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800570c:	f7fd fb86 	bl	8002e1c <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	2b02      	cmp	r3, #2
 8005718:	d901      	bls.n	800571e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e056      	b.n	80057cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800571e:	4b2e      	ldr	r3, [pc, #184]	; (80057d8 <HAL_RCC_OscConfig+0x4e8>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d0f0      	beq.n	800570c <HAL_RCC_OscConfig+0x41c>
 800572a:	e04e      	b.n	80057ca <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800572c:	4b2b      	ldr	r3, [pc, #172]	; (80057dc <HAL_RCC_OscConfig+0x4ec>)
 800572e:	2200      	movs	r2, #0
 8005730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005732:	f7fd fb73 	bl	8002e1c <HAL_GetTick>
 8005736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005738:	e008      	b.n	800574c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800573a:	f7fd fb6f 	bl	8002e1c <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	2b02      	cmp	r3, #2
 8005746:	d901      	bls.n	800574c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e03f      	b.n	80057cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800574c:	4b22      	ldr	r3, [pc, #136]	; (80057d8 <HAL_RCC_OscConfig+0x4e8>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1f0      	bne.n	800573a <HAL_RCC_OscConfig+0x44a>
 8005758:	e037      	b.n	80057ca <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d101      	bne.n	8005766 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e032      	b.n	80057cc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005766:	4b1c      	ldr	r3, [pc, #112]	; (80057d8 <HAL_RCC_OscConfig+0x4e8>)
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d028      	beq.n	80057c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800577e:	429a      	cmp	r2, r3
 8005780:	d121      	bne.n	80057c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800578c:	429a      	cmp	r2, r3
 800578e:	d11a      	bne.n	80057c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005796:	4013      	ands	r3, r2
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800579c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800579e:	4293      	cmp	r3, r2
 80057a0:	d111      	bne.n	80057c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ac:	085b      	lsrs	r3, r3, #1
 80057ae:	3b01      	subs	r3, #1
 80057b0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d107      	bne.n	80057c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d001      	beq.n	80057ca <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e000      	b.n	80057cc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3718      	adds	r7, #24
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	40007000 	.word	0x40007000
 80057d8:	40023800 	.word	0x40023800
 80057dc:	42470060 	.word	0x42470060

080057e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d101      	bne.n	80057f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e0cc      	b.n	800598e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057f4:	4b68      	ldr	r3, [pc, #416]	; (8005998 <HAL_RCC_ClockConfig+0x1b8>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0307 	and.w	r3, r3, #7
 80057fc:	683a      	ldr	r2, [r7, #0]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d90c      	bls.n	800581c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005802:	4b65      	ldr	r3, [pc, #404]	; (8005998 <HAL_RCC_ClockConfig+0x1b8>)
 8005804:	683a      	ldr	r2, [r7, #0]
 8005806:	b2d2      	uxtb	r2, r2
 8005808:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800580a:	4b63      	ldr	r3, [pc, #396]	; (8005998 <HAL_RCC_ClockConfig+0x1b8>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0307 	and.w	r3, r3, #7
 8005812:	683a      	ldr	r2, [r7, #0]
 8005814:	429a      	cmp	r2, r3
 8005816:	d001      	beq.n	800581c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e0b8      	b.n	800598e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0302 	and.w	r3, r3, #2
 8005824:	2b00      	cmp	r3, #0
 8005826:	d020      	beq.n	800586a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0304 	and.w	r3, r3, #4
 8005830:	2b00      	cmp	r3, #0
 8005832:	d005      	beq.n	8005840 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005834:	4b59      	ldr	r3, [pc, #356]	; (800599c <HAL_RCC_ClockConfig+0x1bc>)
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	4a58      	ldr	r2, [pc, #352]	; (800599c <HAL_RCC_ClockConfig+0x1bc>)
 800583a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800583e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0308 	and.w	r3, r3, #8
 8005848:	2b00      	cmp	r3, #0
 800584a:	d005      	beq.n	8005858 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800584c:	4b53      	ldr	r3, [pc, #332]	; (800599c <HAL_RCC_ClockConfig+0x1bc>)
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	4a52      	ldr	r2, [pc, #328]	; (800599c <HAL_RCC_ClockConfig+0x1bc>)
 8005852:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005856:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005858:	4b50      	ldr	r3, [pc, #320]	; (800599c <HAL_RCC_ClockConfig+0x1bc>)
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	494d      	ldr	r1, [pc, #308]	; (800599c <HAL_RCC_ClockConfig+0x1bc>)
 8005866:	4313      	orrs	r3, r2
 8005868:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b00      	cmp	r3, #0
 8005874:	d044      	beq.n	8005900 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	2b01      	cmp	r3, #1
 800587c:	d107      	bne.n	800588e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800587e:	4b47      	ldr	r3, [pc, #284]	; (800599c <HAL_RCC_ClockConfig+0x1bc>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d119      	bne.n	80058be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e07f      	b.n	800598e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	2b02      	cmp	r3, #2
 8005894:	d003      	beq.n	800589e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800589a:	2b03      	cmp	r3, #3
 800589c:	d107      	bne.n	80058ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800589e:	4b3f      	ldr	r3, [pc, #252]	; (800599c <HAL_RCC_ClockConfig+0x1bc>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d109      	bne.n	80058be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e06f      	b.n	800598e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058ae:	4b3b      	ldr	r3, [pc, #236]	; (800599c <HAL_RCC_ClockConfig+0x1bc>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0302 	and.w	r3, r3, #2
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d101      	bne.n	80058be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e067      	b.n	800598e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058be:	4b37      	ldr	r3, [pc, #220]	; (800599c <HAL_RCC_ClockConfig+0x1bc>)
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f023 0203 	bic.w	r2, r3, #3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	4934      	ldr	r1, [pc, #208]	; (800599c <HAL_RCC_ClockConfig+0x1bc>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058d0:	f7fd faa4 	bl	8002e1c <HAL_GetTick>
 80058d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058d6:	e00a      	b.n	80058ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058d8:	f7fd faa0 	bl	8002e1c <HAL_GetTick>
 80058dc:	4602      	mov	r2, r0
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d901      	bls.n	80058ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e04f      	b.n	800598e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ee:	4b2b      	ldr	r3, [pc, #172]	; (800599c <HAL_RCC_ClockConfig+0x1bc>)
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	f003 020c 	and.w	r2, r3, #12
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d1eb      	bne.n	80058d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005900:	4b25      	ldr	r3, [pc, #148]	; (8005998 <HAL_RCC_ClockConfig+0x1b8>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0307 	and.w	r3, r3, #7
 8005908:	683a      	ldr	r2, [r7, #0]
 800590a:	429a      	cmp	r2, r3
 800590c:	d20c      	bcs.n	8005928 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800590e:	4b22      	ldr	r3, [pc, #136]	; (8005998 <HAL_RCC_ClockConfig+0x1b8>)
 8005910:	683a      	ldr	r2, [r7, #0]
 8005912:	b2d2      	uxtb	r2, r2
 8005914:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005916:	4b20      	ldr	r3, [pc, #128]	; (8005998 <HAL_RCC_ClockConfig+0x1b8>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0307 	and.w	r3, r3, #7
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	429a      	cmp	r2, r3
 8005922:	d001      	beq.n	8005928 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e032      	b.n	800598e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0304 	and.w	r3, r3, #4
 8005930:	2b00      	cmp	r3, #0
 8005932:	d008      	beq.n	8005946 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005934:	4b19      	ldr	r3, [pc, #100]	; (800599c <HAL_RCC_ClockConfig+0x1bc>)
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	4916      	ldr	r1, [pc, #88]	; (800599c <HAL_RCC_ClockConfig+0x1bc>)
 8005942:	4313      	orrs	r3, r2
 8005944:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0308 	and.w	r3, r3, #8
 800594e:	2b00      	cmp	r3, #0
 8005950:	d009      	beq.n	8005966 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005952:	4b12      	ldr	r3, [pc, #72]	; (800599c <HAL_RCC_ClockConfig+0x1bc>)
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	00db      	lsls	r3, r3, #3
 8005960:	490e      	ldr	r1, [pc, #56]	; (800599c <HAL_RCC_ClockConfig+0x1bc>)
 8005962:	4313      	orrs	r3, r2
 8005964:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005966:	f000 f821 	bl	80059ac <HAL_RCC_GetSysClockFreq>
 800596a:	4602      	mov	r2, r0
 800596c:	4b0b      	ldr	r3, [pc, #44]	; (800599c <HAL_RCC_ClockConfig+0x1bc>)
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	091b      	lsrs	r3, r3, #4
 8005972:	f003 030f 	and.w	r3, r3, #15
 8005976:	490a      	ldr	r1, [pc, #40]	; (80059a0 <HAL_RCC_ClockConfig+0x1c0>)
 8005978:	5ccb      	ldrb	r3, [r1, r3]
 800597a:	fa22 f303 	lsr.w	r3, r2, r3
 800597e:	4a09      	ldr	r2, [pc, #36]	; (80059a4 <HAL_RCC_ClockConfig+0x1c4>)
 8005980:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005982:	4b09      	ldr	r3, [pc, #36]	; (80059a8 <HAL_RCC_ClockConfig+0x1c8>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4618      	mov	r0, r3
 8005988:	f7fd fa04 	bl	8002d94 <HAL_InitTick>

  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	40023c00 	.word	0x40023c00
 800599c:	40023800 	.word	0x40023800
 80059a0:	0800a1c8 	.word	0x0800a1c8
 80059a4:	20000000 	.word	0x20000000
 80059a8:	20000004 	.word	0x20000004

080059ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059ac:	b5b0      	push	{r4, r5, r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80059b2:	2100      	movs	r1, #0
 80059b4:	6079      	str	r1, [r7, #4]
 80059b6:	2100      	movs	r1, #0
 80059b8:	60f9      	str	r1, [r7, #12]
 80059ba:	2100      	movs	r1, #0
 80059bc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80059be:	2100      	movs	r1, #0
 80059c0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059c2:	4952      	ldr	r1, [pc, #328]	; (8005b0c <HAL_RCC_GetSysClockFreq+0x160>)
 80059c4:	6889      	ldr	r1, [r1, #8]
 80059c6:	f001 010c 	and.w	r1, r1, #12
 80059ca:	2908      	cmp	r1, #8
 80059cc:	d00d      	beq.n	80059ea <HAL_RCC_GetSysClockFreq+0x3e>
 80059ce:	2908      	cmp	r1, #8
 80059d0:	f200 8094 	bhi.w	8005afc <HAL_RCC_GetSysClockFreq+0x150>
 80059d4:	2900      	cmp	r1, #0
 80059d6:	d002      	beq.n	80059de <HAL_RCC_GetSysClockFreq+0x32>
 80059d8:	2904      	cmp	r1, #4
 80059da:	d003      	beq.n	80059e4 <HAL_RCC_GetSysClockFreq+0x38>
 80059dc:	e08e      	b.n	8005afc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80059de:	4b4c      	ldr	r3, [pc, #304]	; (8005b10 <HAL_RCC_GetSysClockFreq+0x164>)
 80059e0:	60bb      	str	r3, [r7, #8]
       break;
 80059e2:	e08e      	b.n	8005b02 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80059e4:	4b4b      	ldr	r3, [pc, #300]	; (8005b14 <HAL_RCC_GetSysClockFreq+0x168>)
 80059e6:	60bb      	str	r3, [r7, #8]
      break;
 80059e8:	e08b      	b.n	8005b02 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059ea:	4948      	ldr	r1, [pc, #288]	; (8005b0c <HAL_RCC_GetSysClockFreq+0x160>)
 80059ec:	6849      	ldr	r1, [r1, #4]
 80059ee:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80059f2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059f4:	4945      	ldr	r1, [pc, #276]	; (8005b0c <HAL_RCC_GetSysClockFreq+0x160>)
 80059f6:	6849      	ldr	r1, [r1, #4]
 80059f8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80059fc:	2900      	cmp	r1, #0
 80059fe:	d024      	beq.n	8005a4a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a00:	4942      	ldr	r1, [pc, #264]	; (8005b0c <HAL_RCC_GetSysClockFreq+0x160>)
 8005a02:	6849      	ldr	r1, [r1, #4]
 8005a04:	0989      	lsrs	r1, r1, #6
 8005a06:	4608      	mov	r0, r1
 8005a08:	f04f 0100 	mov.w	r1, #0
 8005a0c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005a10:	f04f 0500 	mov.w	r5, #0
 8005a14:	ea00 0204 	and.w	r2, r0, r4
 8005a18:	ea01 0305 	and.w	r3, r1, r5
 8005a1c:	493d      	ldr	r1, [pc, #244]	; (8005b14 <HAL_RCC_GetSysClockFreq+0x168>)
 8005a1e:	fb01 f003 	mul.w	r0, r1, r3
 8005a22:	2100      	movs	r1, #0
 8005a24:	fb01 f102 	mul.w	r1, r1, r2
 8005a28:	1844      	adds	r4, r0, r1
 8005a2a:	493a      	ldr	r1, [pc, #232]	; (8005b14 <HAL_RCC_GetSysClockFreq+0x168>)
 8005a2c:	fba2 0101 	umull	r0, r1, r2, r1
 8005a30:	1863      	adds	r3, r4, r1
 8005a32:	4619      	mov	r1, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	461a      	mov	r2, r3
 8005a38:	f04f 0300 	mov.w	r3, #0
 8005a3c:	f7fb f90c 	bl	8000c58 <__aeabi_uldivmod>
 8005a40:	4602      	mov	r2, r0
 8005a42:	460b      	mov	r3, r1
 8005a44:	4613      	mov	r3, r2
 8005a46:	60fb      	str	r3, [r7, #12]
 8005a48:	e04a      	b.n	8005ae0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a4a:	4b30      	ldr	r3, [pc, #192]	; (8005b0c <HAL_RCC_GetSysClockFreq+0x160>)
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	099b      	lsrs	r3, r3, #6
 8005a50:	461a      	mov	r2, r3
 8005a52:	f04f 0300 	mov.w	r3, #0
 8005a56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005a5a:	f04f 0100 	mov.w	r1, #0
 8005a5e:	ea02 0400 	and.w	r4, r2, r0
 8005a62:	ea03 0501 	and.w	r5, r3, r1
 8005a66:	4620      	mov	r0, r4
 8005a68:	4629      	mov	r1, r5
 8005a6a:	f04f 0200 	mov.w	r2, #0
 8005a6e:	f04f 0300 	mov.w	r3, #0
 8005a72:	014b      	lsls	r3, r1, #5
 8005a74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005a78:	0142      	lsls	r2, r0, #5
 8005a7a:	4610      	mov	r0, r2
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	1b00      	subs	r0, r0, r4
 8005a80:	eb61 0105 	sbc.w	r1, r1, r5
 8005a84:	f04f 0200 	mov.w	r2, #0
 8005a88:	f04f 0300 	mov.w	r3, #0
 8005a8c:	018b      	lsls	r3, r1, #6
 8005a8e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005a92:	0182      	lsls	r2, r0, #6
 8005a94:	1a12      	subs	r2, r2, r0
 8005a96:	eb63 0301 	sbc.w	r3, r3, r1
 8005a9a:	f04f 0000 	mov.w	r0, #0
 8005a9e:	f04f 0100 	mov.w	r1, #0
 8005aa2:	00d9      	lsls	r1, r3, #3
 8005aa4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005aa8:	00d0      	lsls	r0, r2, #3
 8005aaa:	4602      	mov	r2, r0
 8005aac:	460b      	mov	r3, r1
 8005aae:	1912      	adds	r2, r2, r4
 8005ab0:	eb45 0303 	adc.w	r3, r5, r3
 8005ab4:	f04f 0000 	mov.w	r0, #0
 8005ab8:	f04f 0100 	mov.w	r1, #0
 8005abc:	0299      	lsls	r1, r3, #10
 8005abe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005ac2:	0290      	lsls	r0, r2, #10
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	4610      	mov	r0, r2
 8005aca:	4619      	mov	r1, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	461a      	mov	r2, r3
 8005ad0:	f04f 0300 	mov.w	r3, #0
 8005ad4:	f7fb f8c0 	bl	8000c58 <__aeabi_uldivmod>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	460b      	mov	r3, r1
 8005adc:	4613      	mov	r3, r2
 8005ade:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ae0:	4b0a      	ldr	r3, [pc, #40]	; (8005b0c <HAL_RCC_GetSysClockFreq+0x160>)
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	0c1b      	lsrs	r3, r3, #16
 8005ae6:	f003 0303 	and.w	r3, r3, #3
 8005aea:	3301      	adds	r3, #1
 8005aec:	005b      	lsls	r3, r3, #1
 8005aee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af8:	60bb      	str	r3, [r7, #8]
      break;
 8005afa:	e002      	b.n	8005b02 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005afc:	4b04      	ldr	r3, [pc, #16]	; (8005b10 <HAL_RCC_GetSysClockFreq+0x164>)
 8005afe:	60bb      	str	r3, [r7, #8]
      break;
 8005b00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b02:	68bb      	ldr	r3, [r7, #8]
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bdb0      	pop	{r4, r5, r7, pc}
 8005b0c:	40023800 	.word	0x40023800
 8005b10:	00f42400 	.word	0x00f42400
 8005b14:	017d7840 	.word	0x017d7840

08005b18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b1c:	4b03      	ldr	r3, [pc, #12]	; (8005b2c <HAL_RCC_GetHCLKFreq+0x14>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	20000000 	.word	0x20000000

08005b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b34:	f7ff fff0 	bl	8005b18 <HAL_RCC_GetHCLKFreq>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	4b05      	ldr	r3, [pc, #20]	; (8005b50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	0a9b      	lsrs	r3, r3, #10
 8005b40:	f003 0307 	and.w	r3, r3, #7
 8005b44:	4903      	ldr	r1, [pc, #12]	; (8005b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b46:	5ccb      	ldrb	r3, [r1, r3]
 8005b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	40023800 	.word	0x40023800
 8005b54:	0800a1d8 	.word	0x0800a1d8

08005b58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005b5c:	f7ff ffdc 	bl	8005b18 <HAL_RCC_GetHCLKFreq>
 8005b60:	4602      	mov	r2, r0
 8005b62:	4b05      	ldr	r3, [pc, #20]	; (8005b78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	0b5b      	lsrs	r3, r3, #13
 8005b68:	f003 0307 	and.w	r3, r3, #7
 8005b6c:	4903      	ldr	r1, [pc, #12]	; (8005b7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b6e:	5ccb      	ldrb	r3, [r1, r3]
 8005b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	40023800 	.word	0x40023800
 8005b7c:	0800a1d8 	.word	0x0800a1d8

08005b80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d101      	bne.n	8005b92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e03f      	b.n	8005c12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d106      	bne.n	8005bac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f7fc ffba 	bl	8002b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2224      	movs	r2, #36	; 0x24
 8005bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68da      	ldr	r2, [r3, #12]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 ffcf 	bl	8006b68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	691a      	ldr	r2, [r3, #16]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	695a      	ldr	r2, [r3, #20]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005be8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68da      	ldr	r2, [r3, #12]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005bf8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2220      	movs	r2, #32
 8005c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3708      	adds	r7, #8
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b08a      	sub	sp, #40	; 0x28
 8005c1e:	af02      	add	r7, sp, #8
 8005c20:	60f8      	str	r0, [r7, #12]
 8005c22:	60b9      	str	r1, [r7, #8]
 8005c24:	603b      	str	r3, [r7, #0]
 8005c26:	4613      	mov	r3, r2
 8005c28:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	2b20      	cmp	r3, #32
 8005c38:	d17c      	bne.n	8005d34 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d002      	beq.n	8005c46 <HAL_UART_Transmit+0x2c>
 8005c40:	88fb      	ldrh	r3, [r7, #6]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d101      	bne.n	8005c4a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e075      	b.n	8005d36 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d101      	bne.n	8005c58 <HAL_UART_Transmit+0x3e>
 8005c54:	2302      	movs	r3, #2
 8005c56:	e06e      	b.n	8005d36 <HAL_UART_Transmit+0x11c>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2200      	movs	r2, #0
 8005c64:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2221      	movs	r2, #33	; 0x21
 8005c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c6e:	f7fd f8d5 	bl	8002e1c <HAL_GetTick>
 8005c72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	88fa      	ldrh	r2, [r7, #6]
 8005c78:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	88fa      	ldrh	r2, [r7, #6]
 8005c7e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c88:	d108      	bne.n	8005c9c <HAL_UART_Transmit+0x82>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d104      	bne.n	8005c9c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005c92:	2300      	movs	r3, #0
 8005c94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	61bb      	str	r3, [r7, #24]
 8005c9a:	e003      	b.n	8005ca4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005cac:	e02a      	b.n	8005d04 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	9300      	str	r3, [sp, #0]
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	2180      	movs	r1, #128	; 0x80
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f000 fc51 	bl	8006560 <UART_WaitOnFlagUntilTimeout>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d001      	beq.n	8005cc8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e036      	b.n	8005d36 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10b      	bne.n	8005ce6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	881b      	ldrh	r3, [r3, #0]
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cdc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	3302      	adds	r3, #2
 8005ce2:	61bb      	str	r3, [r7, #24]
 8005ce4:	e007      	b.n	8005cf6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	781a      	ldrb	r2, [r3, #0]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d1cf      	bne.n	8005cae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	9300      	str	r3, [sp, #0]
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	2200      	movs	r2, #0
 8005d16:	2140      	movs	r1, #64	; 0x40
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f000 fc21 	bl	8006560 <UART_WaitOnFlagUntilTimeout>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d001      	beq.n	8005d28 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	e006      	b.n	8005d36 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005d30:	2300      	movs	r3, #0
 8005d32:	e000      	b.n	8005d36 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005d34:	2302      	movs	r3, #2
  }
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3720      	adds	r7, #32
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}

08005d3e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d3e:	b580      	push	{r7, lr}
 8005d40:	b084      	sub	sp, #16
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	60f8      	str	r0, [r7, #12]
 8005d46:	60b9      	str	r1, [r7, #8]
 8005d48:	4613      	mov	r3, r2
 8005d4a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	2b20      	cmp	r3, #32
 8005d56:	d11d      	bne.n	8005d94 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d002      	beq.n	8005d64 <HAL_UART_Receive_IT+0x26>
 8005d5e:	88fb      	ldrh	r3, [r7, #6]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d101      	bne.n	8005d68 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e016      	b.n	8005d96 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d101      	bne.n	8005d76 <HAL_UART_Receive_IT+0x38>
 8005d72:	2302      	movs	r3, #2
 8005d74:	e00f      	b.n	8005d96 <HAL_UART_Receive_IT+0x58>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005d84:	88fb      	ldrh	r3, [r7, #6]
 8005d86:	461a      	mov	r2, r3
 8005d88:	68b9      	ldr	r1, [r7, #8]
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f000 fc56 	bl	800663c <UART_Start_Receive_IT>
 8005d90:	4603      	mov	r3, r0
 8005d92:	e000      	b.n	8005d96 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005d94:	2302      	movs	r3, #2
  }
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3710      	adds	r7, #16
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b084      	sub	sp, #16
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	60f8      	str	r0, [r7, #12]
 8005da6:	60b9      	str	r1, [r7, #8]
 8005da8:	4613      	mov	r3, r2
 8005daa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	2b20      	cmp	r3, #32
 8005db6:	d11d      	bne.n	8005df4 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d002      	beq.n	8005dc4 <HAL_UART_Receive_DMA+0x26>
 8005dbe:	88fb      	ldrh	r3, [r7, #6]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d101      	bne.n	8005dc8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e016      	b.n	8005df6 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d101      	bne.n	8005dd6 <HAL_UART_Receive_DMA+0x38>
 8005dd2:	2302      	movs	r3, #2
 8005dd4:	e00f      	b.n	8005df6 <HAL_UART_Receive_DMA+0x58>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005de4:	88fb      	ldrh	r3, [r7, #6]
 8005de6:	461a      	mov	r2, r3
 8005de8:	68b9      	ldr	r1, [r7, #8]
 8005dea:	68f8      	ldr	r0, [r7, #12]
 8005dec:	f000 fc60 	bl	80066b0 <UART_Start_Receive_DMA>
 8005df0:	4603      	mov	r3, r0
 8005df2:	e000      	b.n	8005df6 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005df4:	2302      	movs	r3, #2
  }
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
	...

08005e00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b0ba      	sub	sp, #232	; 0xe8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005e26:	2300      	movs	r3, #0
 8005e28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e36:	f003 030f 	and.w	r3, r3, #15
 8005e3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005e3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d10f      	bne.n	8005e66 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e4a:	f003 0320 	and.w	r3, r3, #32
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d009      	beq.n	8005e66 <HAL_UART_IRQHandler+0x66>
 8005e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e56:	f003 0320 	and.w	r3, r3, #32
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d003      	beq.n	8005e66 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 fdc7 	bl	80069f2 <UART_Receive_IT>
      return;
 8005e64:	e256      	b.n	8006314 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005e66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f000 80de 	beq.w	800602c <HAL_UART_IRQHandler+0x22c>
 8005e70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d106      	bne.n	8005e8a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e80:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f000 80d1 	beq.w	800602c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00b      	beq.n	8005eae <HAL_UART_IRQHandler+0xae>
 8005e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d005      	beq.n	8005eae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea6:	f043 0201 	orr.w	r2, r3, #1
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eb2:	f003 0304 	and.w	r3, r3, #4
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00b      	beq.n	8005ed2 <HAL_UART_IRQHandler+0xd2>
 8005eba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ebe:	f003 0301 	and.w	r3, r3, #1
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d005      	beq.n	8005ed2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eca:	f043 0202 	orr.w	r2, r3, #2
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ed6:	f003 0302 	and.w	r3, r3, #2
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00b      	beq.n	8005ef6 <HAL_UART_IRQHandler+0xf6>
 8005ede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ee2:	f003 0301 	and.w	r3, r3, #1
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d005      	beq.n	8005ef6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eee:	f043 0204 	orr.w	r2, r3, #4
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005efa:	f003 0308 	and.w	r3, r3, #8
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d011      	beq.n	8005f26 <HAL_UART_IRQHandler+0x126>
 8005f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f06:	f003 0320 	and.w	r3, r3, #32
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d105      	bne.n	8005f1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005f0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d005      	beq.n	8005f26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1e:	f043 0208 	orr.w	r2, r3, #8
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 81ed 	beq.w	800630a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f34:	f003 0320 	and.w	r3, r3, #32
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d008      	beq.n	8005f4e <HAL_UART_IRQHandler+0x14e>
 8005f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f40:	f003 0320 	and.w	r3, r3, #32
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d002      	beq.n	8005f4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 fd52 	bl	80069f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f58:	2b40      	cmp	r3, #64	; 0x40
 8005f5a:	bf0c      	ite	eq
 8005f5c:	2301      	moveq	r3, #1
 8005f5e:	2300      	movne	r3, #0
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6a:	f003 0308 	and.w	r3, r3, #8
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d103      	bne.n	8005f7a <HAL_UART_IRQHandler+0x17a>
 8005f72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d04f      	beq.n	800601a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 fc5a 	bl	8006834 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f8a:	2b40      	cmp	r3, #64	; 0x40
 8005f8c:	d141      	bne.n	8006012 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	3314      	adds	r3, #20
 8005f94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f9c:	e853 3f00 	ldrex	r3, [r3]
 8005fa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005fa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005fa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	3314      	adds	r3, #20
 8005fb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005fba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005fbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005fc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005fca:	e841 2300 	strex	r3, r2, [r1]
 8005fce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005fd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d1d9      	bne.n	8005f8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d013      	beq.n	800600a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe6:	4a7d      	ldr	r2, [pc, #500]	; (80061dc <HAL_UART_IRQHandler+0x3dc>)
 8005fe8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7fd fd7a 	bl	8003ae8 <HAL_DMA_Abort_IT>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d016      	beq.n	8006028 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006004:	4610      	mov	r0, r2
 8006006:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006008:	e00e      	b.n	8006028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 f99a 	bl	8006344 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006010:	e00a      	b.n	8006028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f996 	bl	8006344 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006018:	e006      	b.n	8006028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 f992 	bl	8006344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006026:	e170      	b.n	800630a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006028:	bf00      	nop
    return;
 800602a:	e16e      	b.n	800630a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006030:	2b01      	cmp	r3, #1
 8006032:	f040 814a 	bne.w	80062ca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800603a:	f003 0310 	and.w	r3, r3, #16
 800603e:	2b00      	cmp	r3, #0
 8006040:	f000 8143 	beq.w	80062ca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006048:	f003 0310 	and.w	r3, r3, #16
 800604c:	2b00      	cmp	r3, #0
 800604e:	f000 813c 	beq.w	80062ca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006052:	2300      	movs	r3, #0
 8006054:	60bb      	str	r3, [r7, #8]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	60bb      	str	r3, [r7, #8]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	60bb      	str	r3, [r7, #8]
 8006066:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006072:	2b40      	cmp	r3, #64	; 0x40
 8006074:	f040 80b4 	bne.w	80061e0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006084:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006088:	2b00      	cmp	r3, #0
 800608a:	f000 8140 	beq.w	800630e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006092:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006096:	429a      	cmp	r2, r3
 8006098:	f080 8139 	bcs.w	800630e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80060a2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a8:	69db      	ldr	r3, [r3, #28]
 80060aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060ae:	f000 8088 	beq.w	80061c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	330c      	adds	r3, #12
 80060b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060c0:	e853 3f00 	ldrex	r3, [r3]
 80060c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80060c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	330c      	adds	r3, #12
 80060da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80060de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80060e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80060ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80060ee:	e841 2300 	strex	r3, r2, [r1]
 80060f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80060f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1d9      	bne.n	80060b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	3314      	adds	r3, #20
 8006104:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006106:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006108:	e853 3f00 	ldrex	r3, [r3]
 800610c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800610e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006110:	f023 0301 	bic.w	r3, r3, #1
 8006114:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	3314      	adds	r3, #20
 800611e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006122:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006126:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006128:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800612a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800612e:	e841 2300 	strex	r3, r2, [r1]
 8006132:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006134:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1e1      	bne.n	80060fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	3314      	adds	r3, #20
 8006140:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006142:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006144:	e853 3f00 	ldrex	r3, [r3]
 8006148:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800614a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800614c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006150:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	3314      	adds	r3, #20
 800615a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800615e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006160:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006162:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006164:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006166:	e841 2300 	strex	r3, r2, [r1]
 800616a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800616c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1e3      	bne.n	800613a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2220      	movs	r2, #32
 8006176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	330c      	adds	r3, #12
 8006186:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800618a:	e853 3f00 	ldrex	r3, [r3]
 800618e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006190:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006192:	f023 0310 	bic.w	r3, r3, #16
 8006196:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	330c      	adds	r3, #12
 80061a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80061a4:	65ba      	str	r2, [r7, #88]	; 0x58
 80061a6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80061aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061ac:	e841 2300 	strex	r3, r2, [r1]
 80061b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80061b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d1e3      	bne.n	8006180 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061bc:	4618      	mov	r0, r3
 80061be:	f7fd fc23 	bl	8003a08 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	4619      	mov	r1, r3
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 f8c0 	bl	8006358 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061d8:	e099      	b.n	800630e <HAL_UART_IRQHandler+0x50e>
 80061da:	bf00      	nop
 80061dc:	080068fb 	.word	0x080068fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	f000 808b 	beq.w	8006312 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80061fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006200:	2b00      	cmp	r3, #0
 8006202:	f000 8086 	beq.w	8006312 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	330c      	adds	r3, #12
 800620c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006210:	e853 3f00 	ldrex	r3, [r3]
 8006214:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006218:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800621c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	330c      	adds	r3, #12
 8006226:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800622a:	647a      	str	r2, [r7, #68]	; 0x44
 800622c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006230:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006232:	e841 2300 	strex	r3, r2, [r1]
 8006236:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1e3      	bne.n	8006206 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	3314      	adds	r3, #20
 8006244:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006248:	e853 3f00 	ldrex	r3, [r3]
 800624c:	623b      	str	r3, [r7, #32]
   return(result);
 800624e:	6a3b      	ldr	r3, [r7, #32]
 8006250:	f023 0301 	bic.w	r3, r3, #1
 8006254:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	3314      	adds	r3, #20
 800625e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006262:	633a      	str	r2, [r7, #48]	; 0x30
 8006264:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006266:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006268:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800626a:	e841 2300 	strex	r3, r2, [r1]
 800626e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1e3      	bne.n	800623e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2220      	movs	r2, #32
 800627a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	330c      	adds	r3, #12
 800628a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	e853 3f00 	ldrex	r3, [r3]
 8006292:	60fb      	str	r3, [r7, #12]
   return(result);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f023 0310 	bic.w	r3, r3, #16
 800629a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	330c      	adds	r3, #12
 80062a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80062a8:	61fa      	str	r2, [r7, #28]
 80062aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ac:	69b9      	ldr	r1, [r7, #24]
 80062ae:	69fa      	ldr	r2, [r7, #28]
 80062b0:	e841 2300 	strex	r3, r2, [r1]
 80062b4:	617b      	str	r3, [r7, #20]
   return(result);
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1e3      	bne.n	8006284 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062c0:	4619      	mov	r1, r3
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f848 	bl	8006358 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80062c8:	e023      	b.n	8006312 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80062ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d009      	beq.n	80062ea <HAL_UART_IRQHandler+0x4ea>
 80062d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d003      	beq.n	80062ea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 fb1d 	bl	8006922 <UART_Transmit_IT>
    return;
 80062e8:	e014      	b.n	8006314 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80062ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00e      	beq.n	8006314 <HAL_UART_IRQHandler+0x514>
 80062f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d008      	beq.n	8006314 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 fb5d 	bl	80069c2 <UART_EndTransmit_IT>
    return;
 8006308:	e004      	b.n	8006314 <HAL_UART_IRQHandler+0x514>
    return;
 800630a:	bf00      	nop
 800630c:	e002      	b.n	8006314 <HAL_UART_IRQHandler+0x514>
      return;
 800630e:	bf00      	nop
 8006310:	e000      	b.n	8006314 <HAL_UART_IRQHandler+0x514>
      return;
 8006312:	bf00      	nop
  }
}
 8006314:	37e8      	adds	r7, #232	; 0xe8
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop

0800631c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800634c:	bf00      	nop
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	460b      	mov	r3, r1
 8006362:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b09c      	sub	sp, #112	; 0x70
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006388:	2b00      	cmp	r3, #0
 800638a:	d172      	bne.n	8006472 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800638c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800638e:	2200      	movs	r2, #0
 8006390:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	330c      	adds	r3, #12
 8006398:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800639a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800639c:	e853 3f00 	ldrex	r3, [r3]
 80063a0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80063a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80063aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	330c      	adds	r3, #12
 80063b0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80063b2:	65ba      	str	r2, [r7, #88]	; 0x58
 80063b4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80063b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80063ba:	e841 2300 	strex	r3, r2, [r1]
 80063be:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80063c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1e5      	bne.n	8006392 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	3314      	adds	r3, #20
 80063cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d0:	e853 3f00 	ldrex	r3, [r3]
 80063d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80063d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063d8:	f023 0301 	bic.w	r3, r3, #1
 80063dc:	667b      	str	r3, [r7, #100]	; 0x64
 80063de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	3314      	adds	r3, #20
 80063e4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80063e6:	647a      	str	r2, [r7, #68]	; 0x44
 80063e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80063ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063ee:	e841 2300 	strex	r3, r2, [r1]
 80063f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80063f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1e5      	bne.n	80063c6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	3314      	adds	r3, #20
 8006400:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006404:	e853 3f00 	ldrex	r3, [r3]
 8006408:	623b      	str	r3, [r7, #32]
   return(result);
 800640a:	6a3b      	ldr	r3, [r7, #32]
 800640c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006410:	663b      	str	r3, [r7, #96]	; 0x60
 8006412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	3314      	adds	r3, #20
 8006418:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800641a:	633a      	str	r2, [r7, #48]	; 0x30
 800641c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006422:	e841 2300 	strex	r3, r2, [r1]
 8006426:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642a:	2b00      	cmp	r3, #0
 800642c:	d1e5      	bne.n	80063fa <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800642e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006430:	2220      	movs	r2, #32
 8006432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643a:	2b01      	cmp	r3, #1
 800643c:	d119      	bne.n	8006472 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800643e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	330c      	adds	r3, #12
 8006444:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	e853 3f00 	ldrex	r3, [r3]
 800644c:	60fb      	str	r3, [r7, #12]
   return(result);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f023 0310 	bic.w	r3, r3, #16
 8006454:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	330c      	adds	r3, #12
 800645c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800645e:	61fa      	str	r2, [r7, #28]
 8006460:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006462:	69b9      	ldr	r1, [r7, #24]
 8006464:	69fa      	ldr	r2, [r7, #28]
 8006466:	e841 2300 	strex	r3, r2, [r1]
 800646a:	617b      	str	r3, [r7, #20]
   return(result);
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1e5      	bne.n	800643e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006476:	2b01      	cmp	r3, #1
 8006478:	d106      	bne.n	8006488 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800647a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800647c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800647e:	4619      	mov	r1, r3
 8006480:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006482:	f7ff ff69 	bl	8006358 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006486:	e002      	b.n	800648e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006488:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800648a:	f7fb fc05 	bl	8001c98 <HAL_UART_RxCpltCallback>
}
 800648e:	bf00      	nop
 8006490:	3770      	adds	r7, #112	; 0x70
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}

08006496 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006496:	b580      	push	{r7, lr}
 8006498:	b084      	sub	sp, #16
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d108      	bne.n	80064be <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80064b0:	085b      	lsrs	r3, r3, #1
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	4619      	mov	r1, r3
 80064b6:	68f8      	ldr	r0, [r7, #12]
 80064b8:	f7ff ff4e 	bl	8006358 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80064bc:	e002      	b.n	80064c4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f7ff ff36 	bl	8006330 <HAL_UART_RxHalfCpltCallback>
}
 80064c4:	bf00      	nop
 80064c6:	3710      	adds	r7, #16
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80064d4:	2300      	movs	r3, #0
 80064d6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064dc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	695b      	ldr	r3, [r3, #20]
 80064e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064e8:	2b80      	cmp	r3, #128	; 0x80
 80064ea:	bf0c      	ite	eq
 80064ec:	2301      	moveq	r3, #1
 80064ee:	2300      	movne	r3, #0
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	2b21      	cmp	r3, #33	; 0x21
 80064fe:	d108      	bne.n	8006512 <UART_DMAError+0x46>
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d005      	beq.n	8006512 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	2200      	movs	r2, #0
 800650a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800650c:	68b8      	ldr	r0, [r7, #8]
 800650e:	f000 f969 	bl	80067e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	695b      	ldr	r3, [r3, #20]
 8006518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800651c:	2b40      	cmp	r3, #64	; 0x40
 800651e:	bf0c      	ite	eq
 8006520:	2301      	moveq	r3, #1
 8006522:	2300      	movne	r3, #0
 8006524:	b2db      	uxtb	r3, r3
 8006526:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800652e:	b2db      	uxtb	r3, r3
 8006530:	2b22      	cmp	r3, #34	; 0x22
 8006532:	d108      	bne.n	8006546 <UART_DMAError+0x7a>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d005      	beq.n	8006546 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	2200      	movs	r2, #0
 800653e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006540:	68b8      	ldr	r0, [r7, #8]
 8006542:	f000 f977 	bl	8006834 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654a:	f043 0210 	orr.w	r2, r3, #16
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006552:	68b8      	ldr	r0, [r7, #8]
 8006554:	f7ff fef6 	bl	8006344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006558:	bf00      	nop
 800655a:	3710      	adds	r7, #16
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b090      	sub	sp, #64	; 0x40
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	603b      	str	r3, [r7, #0]
 800656c:	4613      	mov	r3, r2
 800656e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006570:	e050      	b.n	8006614 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006572:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006578:	d04c      	beq.n	8006614 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800657a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800657c:	2b00      	cmp	r3, #0
 800657e:	d007      	beq.n	8006590 <UART_WaitOnFlagUntilTimeout+0x30>
 8006580:	f7fc fc4c 	bl	8002e1c <HAL_GetTick>
 8006584:	4602      	mov	r2, r0
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800658c:	429a      	cmp	r2, r3
 800658e:	d241      	bcs.n	8006614 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	330c      	adds	r3, #12
 8006596:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659a:	e853 3f00 	ldrex	r3, [r3]
 800659e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80065a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	330c      	adds	r3, #12
 80065ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80065b0:	637a      	str	r2, [r7, #52]	; 0x34
 80065b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065b8:	e841 2300 	strex	r3, r2, [r1]
 80065bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80065be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d1e5      	bne.n	8006590 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	3314      	adds	r3, #20
 80065ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	e853 3f00 	ldrex	r3, [r3]
 80065d2:	613b      	str	r3, [r7, #16]
   return(result);
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	f023 0301 	bic.w	r3, r3, #1
 80065da:	63bb      	str	r3, [r7, #56]	; 0x38
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	3314      	adds	r3, #20
 80065e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065e4:	623a      	str	r2, [r7, #32]
 80065e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e8:	69f9      	ldr	r1, [r7, #28]
 80065ea:	6a3a      	ldr	r2, [r7, #32]
 80065ec:	e841 2300 	strex	r3, r2, [r1]
 80065f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d1e5      	bne.n	80065c4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2220      	movs	r2, #32
 80065fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2220      	movs	r2, #32
 8006604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006610:	2303      	movs	r3, #3
 8006612:	e00f      	b.n	8006634 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	4013      	ands	r3, r2
 800661e:	68ba      	ldr	r2, [r7, #8]
 8006620:	429a      	cmp	r2, r3
 8006622:	bf0c      	ite	eq
 8006624:	2301      	moveq	r3, #1
 8006626:	2300      	movne	r3, #0
 8006628:	b2db      	uxtb	r3, r3
 800662a:	461a      	mov	r2, r3
 800662c:	79fb      	ldrb	r3, [r7, #7]
 800662e:	429a      	cmp	r2, r3
 8006630:	d09f      	beq.n	8006572 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	3740      	adds	r7, #64	; 0x40
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800663c:	b480      	push	{r7}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	4613      	mov	r3, r2
 8006648:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	68ba      	ldr	r2, [r7, #8]
 800664e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	88fa      	ldrh	r2, [r7, #6]
 8006654:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	88fa      	ldrh	r2, [r7, #6]
 800665a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2222      	movs	r2, #34	; 0x22
 8006666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2200      	movs	r2, #0
 800666e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68da      	ldr	r2, [r3, #12]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006680:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	695a      	ldr	r2, [r3, #20]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f042 0201 	orr.w	r2, r2, #1
 8006690:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68da      	ldr	r2, [r3, #12]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f042 0220 	orr.w	r2, r2, #32
 80066a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3714      	adds	r7, #20
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b098      	sub	sp, #96	; 0x60
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	4613      	mov	r3, r2
 80066bc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80066be:	68ba      	ldr	r2, [r7, #8]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	88fa      	ldrh	r2, [r7, #6]
 80066c8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2200      	movs	r2, #0
 80066ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2222      	movs	r2, #34	; 0x22
 80066d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066dc:	4a3e      	ldr	r2, [pc, #248]	; (80067d8 <UART_Start_Receive_DMA+0x128>)
 80066de:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e4:	4a3d      	ldr	r2, [pc, #244]	; (80067dc <UART_Start_Receive_DMA+0x12c>)
 80066e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ec:	4a3c      	ldr	r2, [pc, #240]	; (80067e0 <UART_Start_Receive_DMA+0x130>)
 80066ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f4:	2200      	movs	r2, #0
 80066f6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80066f8:	f107 0308 	add.w	r3, r7, #8
 80066fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	3304      	adds	r3, #4
 8006708:	4619      	mov	r1, r3
 800670a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	88fb      	ldrh	r3, [r7, #6]
 8006710:	f7fd f922 	bl	8003958 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006714:	2300      	movs	r3, #0
 8006716:	613b      	str	r3, [r7, #16]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	613b      	str	r3, [r7, #16]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	613b      	str	r3, [r7, #16]
 8006728:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	330c      	adds	r3, #12
 8006738:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800673c:	e853 3f00 	ldrex	r3, [r3]
 8006740:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006748:	65bb      	str	r3, [r7, #88]	; 0x58
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	330c      	adds	r3, #12
 8006750:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006752:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006754:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006756:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006758:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800675a:	e841 2300 	strex	r3, r2, [r1]
 800675e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006760:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1e5      	bne.n	8006732 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	3314      	adds	r3, #20
 800676c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006770:	e853 3f00 	ldrex	r3, [r3]
 8006774:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006778:	f043 0301 	orr.w	r3, r3, #1
 800677c:	657b      	str	r3, [r7, #84]	; 0x54
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	3314      	adds	r3, #20
 8006784:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006786:	63ba      	str	r2, [r7, #56]	; 0x38
 8006788:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800678a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800678c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800678e:	e841 2300 	strex	r3, r2, [r1]
 8006792:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1e5      	bne.n	8006766 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	3314      	adds	r3, #20
 80067a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	e853 3f00 	ldrex	r3, [r3]
 80067a8:	617b      	str	r3, [r7, #20]
   return(result);
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067b0:	653b      	str	r3, [r7, #80]	; 0x50
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	3314      	adds	r3, #20
 80067b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80067ba:	627a      	str	r2, [r7, #36]	; 0x24
 80067bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067be:	6a39      	ldr	r1, [r7, #32]
 80067c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067c2:	e841 2300 	strex	r3, r2, [r1]
 80067c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1e5      	bne.n	800679a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3760      	adds	r7, #96	; 0x60
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	08006371 	.word	0x08006371
 80067dc:	08006497 	.word	0x08006497
 80067e0:	080064cd 	.word	0x080064cd

080067e4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b089      	sub	sp, #36	; 0x24
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	330c      	adds	r3, #12
 80067f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	e853 3f00 	ldrex	r3, [r3]
 80067fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006802:	61fb      	str	r3, [r7, #28]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	330c      	adds	r3, #12
 800680a:	69fa      	ldr	r2, [r7, #28]
 800680c:	61ba      	str	r2, [r7, #24]
 800680e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006810:	6979      	ldr	r1, [r7, #20]
 8006812:	69ba      	ldr	r2, [r7, #24]
 8006814:	e841 2300 	strex	r3, r2, [r1]
 8006818:	613b      	str	r3, [r7, #16]
   return(result);
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1e5      	bne.n	80067ec <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2220      	movs	r2, #32
 8006824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006828:	bf00      	nop
 800682a:	3724      	adds	r7, #36	; 0x24
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006834:	b480      	push	{r7}
 8006836:	b095      	sub	sp, #84	; 0x54
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	330c      	adds	r3, #12
 8006842:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006846:	e853 3f00 	ldrex	r3, [r3]
 800684a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800684c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006852:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	330c      	adds	r3, #12
 800685a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800685c:	643a      	str	r2, [r7, #64]	; 0x40
 800685e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006860:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006862:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006864:	e841 2300 	strex	r3, r2, [r1]
 8006868:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800686a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800686c:	2b00      	cmp	r3, #0
 800686e:	d1e5      	bne.n	800683c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	3314      	adds	r3, #20
 8006876:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006878:	6a3b      	ldr	r3, [r7, #32]
 800687a:	e853 3f00 	ldrex	r3, [r3]
 800687e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	f023 0301 	bic.w	r3, r3, #1
 8006886:	64bb      	str	r3, [r7, #72]	; 0x48
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	3314      	adds	r3, #20
 800688e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006890:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006892:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006894:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006896:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006898:	e841 2300 	strex	r3, r2, [r1]
 800689c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800689e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d1e5      	bne.n	8006870 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d119      	bne.n	80068e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	330c      	adds	r3, #12
 80068b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	e853 3f00 	ldrex	r3, [r3]
 80068ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	f023 0310 	bic.w	r3, r3, #16
 80068c2:	647b      	str	r3, [r7, #68]	; 0x44
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	330c      	adds	r3, #12
 80068ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068cc:	61ba      	str	r2, [r7, #24]
 80068ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d0:	6979      	ldr	r1, [r7, #20]
 80068d2:	69ba      	ldr	r2, [r7, #24]
 80068d4:	e841 2300 	strex	r3, r2, [r1]
 80068d8:	613b      	str	r3, [r7, #16]
   return(result);
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1e5      	bne.n	80068ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2220      	movs	r2, #32
 80068e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 80068ee:	bf00      	nop
 80068f0:	3754      	adds	r7, #84	; 0x54
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr

080068fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b084      	sub	sp, #16
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006906:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	f7ff fd15 	bl	8006344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800691a:	bf00      	nop
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006922:	b480      	push	{r7}
 8006924:	b085      	sub	sp, #20
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006930:	b2db      	uxtb	r3, r3
 8006932:	2b21      	cmp	r3, #33	; 0x21
 8006934:	d13e      	bne.n	80069b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800693e:	d114      	bne.n	800696a <UART_Transmit_IT+0x48>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	691b      	ldr	r3, [r3, #16]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d110      	bne.n	800696a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6a1b      	ldr	r3, [r3, #32]
 800694c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	881b      	ldrh	r3, [r3, #0]
 8006952:	461a      	mov	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800695c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a1b      	ldr	r3, [r3, #32]
 8006962:	1c9a      	adds	r2, r3, #2
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	621a      	str	r2, [r3, #32]
 8006968:	e008      	b.n	800697c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a1b      	ldr	r3, [r3, #32]
 800696e:	1c59      	adds	r1, r3, #1
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	6211      	str	r1, [r2, #32]
 8006974:	781a      	ldrb	r2, [r3, #0]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006980:	b29b      	uxth	r3, r3
 8006982:	3b01      	subs	r3, #1
 8006984:	b29b      	uxth	r3, r3
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	4619      	mov	r1, r3
 800698a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800698c:	2b00      	cmp	r3, #0
 800698e:	d10f      	bne.n	80069b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68da      	ldr	r2, [r3, #12]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800699e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	68da      	ldr	r2, [r3, #12]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80069b0:	2300      	movs	r3, #0
 80069b2:	e000      	b.n	80069b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80069b4:	2302      	movs	r3, #2
  }
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3714      	adds	r7, #20
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr

080069c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b082      	sub	sp, #8
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	68da      	ldr	r2, [r3, #12]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2220      	movs	r2, #32
 80069de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f7ff fc9a 	bl	800631c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3708      	adds	r7, #8
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b08c      	sub	sp, #48	; 0x30
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	2b22      	cmp	r3, #34	; 0x22
 8006a04:	f040 80ab 	bne.w	8006b5e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a10:	d117      	bne.n	8006a42 <UART_Receive_IT+0x50>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d113      	bne.n	8006a42 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a22:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a34:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a3a:	1c9a      	adds	r2, r3, #2
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	629a      	str	r2, [r3, #40]	; 0x28
 8006a40:	e026      	b.n	8006a90 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a46:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a54:	d007      	beq.n	8006a66 <UART_Receive_IT+0x74>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d10a      	bne.n	8006a74 <UART_Receive_IT+0x82>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d106      	bne.n	8006a74 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	b2da      	uxtb	r2, r3
 8006a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a70:	701a      	strb	r2, [r3, #0]
 8006a72:	e008      	b.n	8006a86 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a80:	b2da      	uxtb	r2, r3
 8006a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a84:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a8a:	1c5a      	adds	r2, r3, #1
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	3b01      	subs	r3, #1
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d15a      	bne.n	8006b5a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68da      	ldr	r2, [r3, #12]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f022 0220 	bic.w	r2, r2, #32
 8006ab2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68da      	ldr	r2, [r3, #12]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ac2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	695a      	ldr	r2, [r3, #20]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f022 0201 	bic.w	r2, r2, #1
 8006ad2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2220      	movs	r2, #32
 8006ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d135      	bne.n	8006b50 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	330c      	adds	r3, #12
 8006af0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	e853 3f00 	ldrex	r3, [r3]
 8006af8:	613b      	str	r3, [r7, #16]
   return(result);
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	f023 0310 	bic.w	r3, r3, #16
 8006b00:	627b      	str	r3, [r7, #36]	; 0x24
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	330c      	adds	r3, #12
 8006b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b0a:	623a      	str	r2, [r7, #32]
 8006b0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0e:	69f9      	ldr	r1, [r7, #28]
 8006b10:	6a3a      	ldr	r2, [r7, #32]
 8006b12:	e841 2300 	strex	r3, r2, [r1]
 8006b16:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1e5      	bne.n	8006aea <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 0310 	and.w	r3, r3, #16
 8006b28:	2b10      	cmp	r3, #16
 8006b2a:	d10a      	bne.n	8006b42 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	60fb      	str	r3, [r7, #12]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	60fb      	str	r3, [r7, #12]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	60fb      	str	r3, [r7, #12]
 8006b40:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b46:	4619      	mov	r1, r3
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f7ff fc05 	bl	8006358 <HAL_UARTEx_RxEventCallback>
 8006b4e:	e002      	b.n	8006b56 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f7fb f8a1 	bl	8001c98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006b56:	2300      	movs	r3, #0
 8006b58:	e002      	b.n	8006b60 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	e000      	b.n	8006b60 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006b5e:	2302      	movs	r3, #2
  }
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3730      	adds	r7, #48	; 0x30
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b6c:	b09f      	sub	sp, #124	; 0x7c
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006b7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b7e:	68d9      	ldr	r1, [r3, #12]
 8006b80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	ea40 0301 	orr.w	r3, r0, r1
 8006b88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b8c:	689a      	ldr	r2, [r3, #8]
 8006b8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	431a      	orrs	r2, r3
 8006b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b96:	695b      	ldr	r3, [r3, #20]
 8006b98:	431a      	orrs	r2, r3
 8006b9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b9c:	69db      	ldr	r3, [r3, #28]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006bac:	f021 010c 	bic.w	r1, r1, #12
 8006bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006bb6:	430b      	orrs	r3, r1
 8006bb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	695b      	ldr	r3, [r3, #20]
 8006bc0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bc6:	6999      	ldr	r1, [r3, #24]
 8006bc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	ea40 0301 	orr.w	r3, r0, r1
 8006bd0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	4bc5      	ldr	r3, [pc, #788]	; (8006eec <UART_SetConfig+0x384>)
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d004      	beq.n	8006be6 <UART_SetConfig+0x7e>
 8006bdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	4bc3      	ldr	r3, [pc, #780]	; (8006ef0 <UART_SetConfig+0x388>)
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d103      	bne.n	8006bee <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006be6:	f7fe ffb7 	bl	8005b58 <HAL_RCC_GetPCLK2Freq>
 8006bea:	6778      	str	r0, [r7, #116]	; 0x74
 8006bec:	e002      	b.n	8006bf4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006bee:	f7fe ff9f 	bl	8005b30 <HAL_RCC_GetPCLK1Freq>
 8006bf2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bf6:	69db      	ldr	r3, [r3, #28]
 8006bf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bfc:	f040 80b6 	bne.w	8006d6c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c02:	461c      	mov	r4, r3
 8006c04:	f04f 0500 	mov.w	r5, #0
 8006c08:	4622      	mov	r2, r4
 8006c0a:	462b      	mov	r3, r5
 8006c0c:	1891      	adds	r1, r2, r2
 8006c0e:	6439      	str	r1, [r7, #64]	; 0x40
 8006c10:	415b      	adcs	r3, r3
 8006c12:	647b      	str	r3, [r7, #68]	; 0x44
 8006c14:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006c18:	1912      	adds	r2, r2, r4
 8006c1a:	eb45 0303 	adc.w	r3, r5, r3
 8006c1e:	f04f 0000 	mov.w	r0, #0
 8006c22:	f04f 0100 	mov.w	r1, #0
 8006c26:	00d9      	lsls	r1, r3, #3
 8006c28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006c2c:	00d0      	lsls	r0, r2, #3
 8006c2e:	4602      	mov	r2, r0
 8006c30:	460b      	mov	r3, r1
 8006c32:	1911      	adds	r1, r2, r4
 8006c34:	6639      	str	r1, [r7, #96]	; 0x60
 8006c36:	416b      	adcs	r3, r5
 8006c38:	667b      	str	r3, [r7, #100]	; 0x64
 8006c3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	461a      	mov	r2, r3
 8006c40:	f04f 0300 	mov.w	r3, #0
 8006c44:	1891      	adds	r1, r2, r2
 8006c46:	63b9      	str	r1, [r7, #56]	; 0x38
 8006c48:	415b      	adcs	r3, r3
 8006c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006c50:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006c54:	f7fa f800 	bl	8000c58 <__aeabi_uldivmod>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	4ba5      	ldr	r3, [pc, #660]	; (8006ef4 <UART_SetConfig+0x38c>)
 8006c5e:	fba3 2302 	umull	r2, r3, r3, r2
 8006c62:	095b      	lsrs	r3, r3, #5
 8006c64:	011e      	lsls	r6, r3, #4
 8006c66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c68:	461c      	mov	r4, r3
 8006c6a:	f04f 0500 	mov.w	r5, #0
 8006c6e:	4622      	mov	r2, r4
 8006c70:	462b      	mov	r3, r5
 8006c72:	1891      	adds	r1, r2, r2
 8006c74:	6339      	str	r1, [r7, #48]	; 0x30
 8006c76:	415b      	adcs	r3, r3
 8006c78:	637b      	str	r3, [r7, #52]	; 0x34
 8006c7a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006c7e:	1912      	adds	r2, r2, r4
 8006c80:	eb45 0303 	adc.w	r3, r5, r3
 8006c84:	f04f 0000 	mov.w	r0, #0
 8006c88:	f04f 0100 	mov.w	r1, #0
 8006c8c:	00d9      	lsls	r1, r3, #3
 8006c8e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006c92:	00d0      	lsls	r0, r2, #3
 8006c94:	4602      	mov	r2, r0
 8006c96:	460b      	mov	r3, r1
 8006c98:	1911      	adds	r1, r2, r4
 8006c9a:	65b9      	str	r1, [r7, #88]	; 0x58
 8006c9c:	416b      	adcs	r3, r5
 8006c9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	f04f 0300 	mov.w	r3, #0
 8006caa:	1891      	adds	r1, r2, r2
 8006cac:	62b9      	str	r1, [r7, #40]	; 0x28
 8006cae:	415b      	adcs	r3, r3
 8006cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006cb6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006cba:	f7f9 ffcd 	bl	8000c58 <__aeabi_uldivmod>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	4b8c      	ldr	r3, [pc, #560]	; (8006ef4 <UART_SetConfig+0x38c>)
 8006cc4:	fba3 1302 	umull	r1, r3, r3, r2
 8006cc8:	095b      	lsrs	r3, r3, #5
 8006cca:	2164      	movs	r1, #100	; 0x64
 8006ccc:	fb01 f303 	mul.w	r3, r1, r3
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	00db      	lsls	r3, r3, #3
 8006cd4:	3332      	adds	r3, #50	; 0x32
 8006cd6:	4a87      	ldr	r2, [pc, #540]	; (8006ef4 <UART_SetConfig+0x38c>)
 8006cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cdc:	095b      	lsrs	r3, r3, #5
 8006cde:	005b      	lsls	r3, r3, #1
 8006ce0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006ce4:	441e      	add	r6, r3
 8006ce6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f04f 0100 	mov.w	r1, #0
 8006cee:	4602      	mov	r2, r0
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	1894      	adds	r4, r2, r2
 8006cf4:	623c      	str	r4, [r7, #32]
 8006cf6:	415b      	adcs	r3, r3
 8006cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8006cfa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006cfe:	1812      	adds	r2, r2, r0
 8006d00:	eb41 0303 	adc.w	r3, r1, r3
 8006d04:	f04f 0400 	mov.w	r4, #0
 8006d08:	f04f 0500 	mov.w	r5, #0
 8006d0c:	00dd      	lsls	r5, r3, #3
 8006d0e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006d12:	00d4      	lsls	r4, r2, #3
 8006d14:	4622      	mov	r2, r4
 8006d16:	462b      	mov	r3, r5
 8006d18:	1814      	adds	r4, r2, r0
 8006d1a:	653c      	str	r4, [r7, #80]	; 0x50
 8006d1c:	414b      	adcs	r3, r1
 8006d1e:	657b      	str	r3, [r7, #84]	; 0x54
 8006d20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	461a      	mov	r2, r3
 8006d26:	f04f 0300 	mov.w	r3, #0
 8006d2a:	1891      	adds	r1, r2, r2
 8006d2c:	61b9      	str	r1, [r7, #24]
 8006d2e:	415b      	adcs	r3, r3
 8006d30:	61fb      	str	r3, [r7, #28]
 8006d32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d36:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006d3a:	f7f9 ff8d 	bl	8000c58 <__aeabi_uldivmod>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	460b      	mov	r3, r1
 8006d42:	4b6c      	ldr	r3, [pc, #432]	; (8006ef4 <UART_SetConfig+0x38c>)
 8006d44:	fba3 1302 	umull	r1, r3, r3, r2
 8006d48:	095b      	lsrs	r3, r3, #5
 8006d4a:	2164      	movs	r1, #100	; 0x64
 8006d4c:	fb01 f303 	mul.w	r3, r1, r3
 8006d50:	1ad3      	subs	r3, r2, r3
 8006d52:	00db      	lsls	r3, r3, #3
 8006d54:	3332      	adds	r3, #50	; 0x32
 8006d56:	4a67      	ldr	r2, [pc, #412]	; (8006ef4 <UART_SetConfig+0x38c>)
 8006d58:	fba2 2303 	umull	r2, r3, r2, r3
 8006d5c:	095b      	lsrs	r3, r3, #5
 8006d5e:	f003 0207 	and.w	r2, r3, #7
 8006d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4432      	add	r2, r6
 8006d68:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006d6a:	e0b9      	b.n	8006ee0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d6e:	461c      	mov	r4, r3
 8006d70:	f04f 0500 	mov.w	r5, #0
 8006d74:	4622      	mov	r2, r4
 8006d76:	462b      	mov	r3, r5
 8006d78:	1891      	adds	r1, r2, r2
 8006d7a:	6139      	str	r1, [r7, #16]
 8006d7c:	415b      	adcs	r3, r3
 8006d7e:	617b      	str	r3, [r7, #20]
 8006d80:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006d84:	1912      	adds	r2, r2, r4
 8006d86:	eb45 0303 	adc.w	r3, r5, r3
 8006d8a:	f04f 0000 	mov.w	r0, #0
 8006d8e:	f04f 0100 	mov.w	r1, #0
 8006d92:	00d9      	lsls	r1, r3, #3
 8006d94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d98:	00d0      	lsls	r0, r2, #3
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	eb12 0804 	adds.w	r8, r2, r4
 8006da2:	eb43 0905 	adc.w	r9, r3, r5
 8006da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	4618      	mov	r0, r3
 8006dac:	f04f 0100 	mov.w	r1, #0
 8006db0:	f04f 0200 	mov.w	r2, #0
 8006db4:	f04f 0300 	mov.w	r3, #0
 8006db8:	008b      	lsls	r3, r1, #2
 8006dba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006dbe:	0082      	lsls	r2, r0, #2
 8006dc0:	4640      	mov	r0, r8
 8006dc2:	4649      	mov	r1, r9
 8006dc4:	f7f9 ff48 	bl	8000c58 <__aeabi_uldivmod>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	460b      	mov	r3, r1
 8006dcc:	4b49      	ldr	r3, [pc, #292]	; (8006ef4 <UART_SetConfig+0x38c>)
 8006dce:	fba3 2302 	umull	r2, r3, r3, r2
 8006dd2:	095b      	lsrs	r3, r3, #5
 8006dd4:	011e      	lsls	r6, r3, #4
 8006dd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f04f 0100 	mov.w	r1, #0
 8006dde:	4602      	mov	r2, r0
 8006de0:	460b      	mov	r3, r1
 8006de2:	1894      	adds	r4, r2, r2
 8006de4:	60bc      	str	r4, [r7, #8]
 8006de6:	415b      	adcs	r3, r3
 8006de8:	60fb      	str	r3, [r7, #12]
 8006dea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006dee:	1812      	adds	r2, r2, r0
 8006df0:	eb41 0303 	adc.w	r3, r1, r3
 8006df4:	f04f 0400 	mov.w	r4, #0
 8006df8:	f04f 0500 	mov.w	r5, #0
 8006dfc:	00dd      	lsls	r5, r3, #3
 8006dfe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006e02:	00d4      	lsls	r4, r2, #3
 8006e04:	4622      	mov	r2, r4
 8006e06:	462b      	mov	r3, r5
 8006e08:	1814      	adds	r4, r2, r0
 8006e0a:	64bc      	str	r4, [r7, #72]	; 0x48
 8006e0c:	414b      	adcs	r3, r1
 8006e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	4618      	mov	r0, r3
 8006e16:	f04f 0100 	mov.w	r1, #0
 8006e1a:	f04f 0200 	mov.w	r2, #0
 8006e1e:	f04f 0300 	mov.w	r3, #0
 8006e22:	008b      	lsls	r3, r1, #2
 8006e24:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006e28:	0082      	lsls	r2, r0, #2
 8006e2a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006e2e:	f7f9 ff13 	bl	8000c58 <__aeabi_uldivmod>
 8006e32:	4602      	mov	r2, r0
 8006e34:	460b      	mov	r3, r1
 8006e36:	4b2f      	ldr	r3, [pc, #188]	; (8006ef4 <UART_SetConfig+0x38c>)
 8006e38:	fba3 1302 	umull	r1, r3, r3, r2
 8006e3c:	095b      	lsrs	r3, r3, #5
 8006e3e:	2164      	movs	r1, #100	; 0x64
 8006e40:	fb01 f303 	mul.w	r3, r1, r3
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	011b      	lsls	r3, r3, #4
 8006e48:	3332      	adds	r3, #50	; 0x32
 8006e4a:	4a2a      	ldr	r2, [pc, #168]	; (8006ef4 <UART_SetConfig+0x38c>)
 8006e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e50:	095b      	lsrs	r3, r3, #5
 8006e52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e56:	441e      	add	r6, r3
 8006e58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f04f 0100 	mov.w	r1, #0
 8006e60:	4602      	mov	r2, r0
 8006e62:	460b      	mov	r3, r1
 8006e64:	1894      	adds	r4, r2, r2
 8006e66:	603c      	str	r4, [r7, #0]
 8006e68:	415b      	adcs	r3, r3
 8006e6a:	607b      	str	r3, [r7, #4]
 8006e6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e70:	1812      	adds	r2, r2, r0
 8006e72:	eb41 0303 	adc.w	r3, r1, r3
 8006e76:	f04f 0400 	mov.w	r4, #0
 8006e7a:	f04f 0500 	mov.w	r5, #0
 8006e7e:	00dd      	lsls	r5, r3, #3
 8006e80:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006e84:	00d4      	lsls	r4, r2, #3
 8006e86:	4622      	mov	r2, r4
 8006e88:	462b      	mov	r3, r5
 8006e8a:	eb12 0a00 	adds.w	sl, r2, r0
 8006e8e:	eb43 0b01 	adc.w	fp, r3, r1
 8006e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	4618      	mov	r0, r3
 8006e98:	f04f 0100 	mov.w	r1, #0
 8006e9c:	f04f 0200 	mov.w	r2, #0
 8006ea0:	f04f 0300 	mov.w	r3, #0
 8006ea4:	008b      	lsls	r3, r1, #2
 8006ea6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006eaa:	0082      	lsls	r2, r0, #2
 8006eac:	4650      	mov	r0, sl
 8006eae:	4659      	mov	r1, fp
 8006eb0:	f7f9 fed2 	bl	8000c58 <__aeabi_uldivmod>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	4b0e      	ldr	r3, [pc, #56]	; (8006ef4 <UART_SetConfig+0x38c>)
 8006eba:	fba3 1302 	umull	r1, r3, r3, r2
 8006ebe:	095b      	lsrs	r3, r3, #5
 8006ec0:	2164      	movs	r1, #100	; 0x64
 8006ec2:	fb01 f303 	mul.w	r3, r1, r3
 8006ec6:	1ad3      	subs	r3, r2, r3
 8006ec8:	011b      	lsls	r3, r3, #4
 8006eca:	3332      	adds	r3, #50	; 0x32
 8006ecc:	4a09      	ldr	r2, [pc, #36]	; (8006ef4 <UART_SetConfig+0x38c>)
 8006ece:	fba2 2303 	umull	r2, r3, r2, r3
 8006ed2:	095b      	lsrs	r3, r3, #5
 8006ed4:	f003 020f 	and.w	r2, r3, #15
 8006ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4432      	add	r2, r6
 8006ede:	609a      	str	r2, [r3, #8]
}
 8006ee0:	bf00      	nop
 8006ee2:	377c      	adds	r7, #124	; 0x7c
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eea:	bf00      	nop
 8006eec:	40011000 	.word	0x40011000
 8006ef0:	40011400 	.word	0x40011400
 8006ef4:	51eb851f 	.word	0x51eb851f

08006ef8 <__errno>:
 8006ef8:	4b01      	ldr	r3, [pc, #4]	; (8006f00 <__errno+0x8>)
 8006efa:	6818      	ldr	r0, [r3, #0]
 8006efc:	4770      	bx	lr
 8006efe:	bf00      	nop
 8006f00:	2000000c 	.word	0x2000000c

08006f04 <__libc_init_array>:
 8006f04:	b570      	push	{r4, r5, r6, lr}
 8006f06:	4d0d      	ldr	r5, [pc, #52]	; (8006f3c <__libc_init_array+0x38>)
 8006f08:	4c0d      	ldr	r4, [pc, #52]	; (8006f40 <__libc_init_array+0x3c>)
 8006f0a:	1b64      	subs	r4, r4, r5
 8006f0c:	10a4      	asrs	r4, r4, #2
 8006f0e:	2600      	movs	r6, #0
 8006f10:	42a6      	cmp	r6, r4
 8006f12:	d109      	bne.n	8006f28 <__libc_init_array+0x24>
 8006f14:	4d0b      	ldr	r5, [pc, #44]	; (8006f44 <__libc_init_array+0x40>)
 8006f16:	4c0c      	ldr	r4, [pc, #48]	; (8006f48 <__libc_init_array+0x44>)
 8006f18:	f003 f92c 	bl	800a174 <_init>
 8006f1c:	1b64      	subs	r4, r4, r5
 8006f1e:	10a4      	asrs	r4, r4, #2
 8006f20:	2600      	movs	r6, #0
 8006f22:	42a6      	cmp	r6, r4
 8006f24:	d105      	bne.n	8006f32 <__libc_init_array+0x2e>
 8006f26:	bd70      	pop	{r4, r5, r6, pc}
 8006f28:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f2c:	4798      	blx	r3
 8006f2e:	3601      	adds	r6, #1
 8006f30:	e7ee      	b.n	8006f10 <__libc_init_array+0xc>
 8006f32:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f36:	4798      	blx	r3
 8006f38:	3601      	adds	r6, #1
 8006f3a:	e7f2      	b.n	8006f22 <__libc_init_array+0x1e>
 8006f3c:	0800a648 	.word	0x0800a648
 8006f40:	0800a648 	.word	0x0800a648
 8006f44:	0800a648 	.word	0x0800a648
 8006f48:	0800a64c 	.word	0x0800a64c

08006f4c <memset>:
 8006f4c:	4402      	add	r2, r0
 8006f4e:	4603      	mov	r3, r0
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d100      	bne.n	8006f56 <memset+0xa>
 8006f54:	4770      	bx	lr
 8006f56:	f803 1b01 	strb.w	r1, [r3], #1
 8006f5a:	e7f9      	b.n	8006f50 <memset+0x4>

08006f5c <__cvt>:
 8006f5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f60:	ec55 4b10 	vmov	r4, r5, d0
 8006f64:	2d00      	cmp	r5, #0
 8006f66:	460e      	mov	r6, r1
 8006f68:	4619      	mov	r1, r3
 8006f6a:	462b      	mov	r3, r5
 8006f6c:	bfbb      	ittet	lt
 8006f6e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006f72:	461d      	movlt	r5, r3
 8006f74:	2300      	movge	r3, #0
 8006f76:	232d      	movlt	r3, #45	; 0x2d
 8006f78:	700b      	strb	r3, [r1, #0]
 8006f7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f7c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006f80:	4691      	mov	r9, r2
 8006f82:	f023 0820 	bic.w	r8, r3, #32
 8006f86:	bfbc      	itt	lt
 8006f88:	4622      	movlt	r2, r4
 8006f8a:	4614      	movlt	r4, r2
 8006f8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f90:	d005      	beq.n	8006f9e <__cvt+0x42>
 8006f92:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006f96:	d100      	bne.n	8006f9a <__cvt+0x3e>
 8006f98:	3601      	adds	r6, #1
 8006f9a:	2102      	movs	r1, #2
 8006f9c:	e000      	b.n	8006fa0 <__cvt+0x44>
 8006f9e:	2103      	movs	r1, #3
 8006fa0:	ab03      	add	r3, sp, #12
 8006fa2:	9301      	str	r3, [sp, #4]
 8006fa4:	ab02      	add	r3, sp, #8
 8006fa6:	9300      	str	r3, [sp, #0]
 8006fa8:	ec45 4b10 	vmov	d0, r4, r5
 8006fac:	4653      	mov	r3, sl
 8006fae:	4632      	mov	r2, r6
 8006fb0:	f000 fcea 	bl	8007988 <_dtoa_r>
 8006fb4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006fb8:	4607      	mov	r7, r0
 8006fba:	d102      	bne.n	8006fc2 <__cvt+0x66>
 8006fbc:	f019 0f01 	tst.w	r9, #1
 8006fc0:	d022      	beq.n	8007008 <__cvt+0xac>
 8006fc2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006fc6:	eb07 0906 	add.w	r9, r7, r6
 8006fca:	d110      	bne.n	8006fee <__cvt+0x92>
 8006fcc:	783b      	ldrb	r3, [r7, #0]
 8006fce:	2b30      	cmp	r3, #48	; 0x30
 8006fd0:	d10a      	bne.n	8006fe8 <__cvt+0x8c>
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	4620      	mov	r0, r4
 8006fd8:	4629      	mov	r1, r5
 8006fda:	f7f9 fd7d 	bl	8000ad8 <__aeabi_dcmpeq>
 8006fde:	b918      	cbnz	r0, 8006fe8 <__cvt+0x8c>
 8006fe0:	f1c6 0601 	rsb	r6, r6, #1
 8006fe4:	f8ca 6000 	str.w	r6, [sl]
 8006fe8:	f8da 3000 	ldr.w	r3, [sl]
 8006fec:	4499      	add	r9, r3
 8006fee:	2200      	movs	r2, #0
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	4620      	mov	r0, r4
 8006ff4:	4629      	mov	r1, r5
 8006ff6:	f7f9 fd6f 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ffa:	b108      	cbz	r0, 8007000 <__cvt+0xa4>
 8006ffc:	f8cd 900c 	str.w	r9, [sp, #12]
 8007000:	2230      	movs	r2, #48	; 0x30
 8007002:	9b03      	ldr	r3, [sp, #12]
 8007004:	454b      	cmp	r3, r9
 8007006:	d307      	bcc.n	8007018 <__cvt+0xbc>
 8007008:	9b03      	ldr	r3, [sp, #12]
 800700a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800700c:	1bdb      	subs	r3, r3, r7
 800700e:	4638      	mov	r0, r7
 8007010:	6013      	str	r3, [r2, #0]
 8007012:	b004      	add	sp, #16
 8007014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007018:	1c59      	adds	r1, r3, #1
 800701a:	9103      	str	r1, [sp, #12]
 800701c:	701a      	strb	r2, [r3, #0]
 800701e:	e7f0      	b.n	8007002 <__cvt+0xa6>

08007020 <__exponent>:
 8007020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007022:	4603      	mov	r3, r0
 8007024:	2900      	cmp	r1, #0
 8007026:	bfb8      	it	lt
 8007028:	4249      	neglt	r1, r1
 800702a:	f803 2b02 	strb.w	r2, [r3], #2
 800702e:	bfb4      	ite	lt
 8007030:	222d      	movlt	r2, #45	; 0x2d
 8007032:	222b      	movge	r2, #43	; 0x2b
 8007034:	2909      	cmp	r1, #9
 8007036:	7042      	strb	r2, [r0, #1]
 8007038:	dd2a      	ble.n	8007090 <__exponent+0x70>
 800703a:	f10d 0407 	add.w	r4, sp, #7
 800703e:	46a4      	mov	ip, r4
 8007040:	270a      	movs	r7, #10
 8007042:	46a6      	mov	lr, r4
 8007044:	460a      	mov	r2, r1
 8007046:	fb91 f6f7 	sdiv	r6, r1, r7
 800704a:	fb07 1516 	mls	r5, r7, r6, r1
 800704e:	3530      	adds	r5, #48	; 0x30
 8007050:	2a63      	cmp	r2, #99	; 0x63
 8007052:	f104 34ff 	add.w	r4, r4, #4294967295
 8007056:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800705a:	4631      	mov	r1, r6
 800705c:	dcf1      	bgt.n	8007042 <__exponent+0x22>
 800705e:	3130      	adds	r1, #48	; 0x30
 8007060:	f1ae 0502 	sub.w	r5, lr, #2
 8007064:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007068:	1c44      	adds	r4, r0, #1
 800706a:	4629      	mov	r1, r5
 800706c:	4561      	cmp	r1, ip
 800706e:	d30a      	bcc.n	8007086 <__exponent+0x66>
 8007070:	f10d 0209 	add.w	r2, sp, #9
 8007074:	eba2 020e 	sub.w	r2, r2, lr
 8007078:	4565      	cmp	r5, ip
 800707a:	bf88      	it	hi
 800707c:	2200      	movhi	r2, #0
 800707e:	4413      	add	r3, r2
 8007080:	1a18      	subs	r0, r3, r0
 8007082:	b003      	add	sp, #12
 8007084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007086:	f811 2b01 	ldrb.w	r2, [r1], #1
 800708a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800708e:	e7ed      	b.n	800706c <__exponent+0x4c>
 8007090:	2330      	movs	r3, #48	; 0x30
 8007092:	3130      	adds	r1, #48	; 0x30
 8007094:	7083      	strb	r3, [r0, #2]
 8007096:	70c1      	strb	r1, [r0, #3]
 8007098:	1d03      	adds	r3, r0, #4
 800709a:	e7f1      	b.n	8007080 <__exponent+0x60>

0800709c <_printf_float>:
 800709c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a0:	ed2d 8b02 	vpush	{d8}
 80070a4:	b08d      	sub	sp, #52	; 0x34
 80070a6:	460c      	mov	r4, r1
 80070a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80070ac:	4616      	mov	r6, r2
 80070ae:	461f      	mov	r7, r3
 80070b0:	4605      	mov	r5, r0
 80070b2:	f001 fa55 	bl	8008560 <_localeconv_r>
 80070b6:	f8d0 a000 	ldr.w	sl, [r0]
 80070ba:	4650      	mov	r0, sl
 80070bc:	f7f9 f890 	bl	80001e0 <strlen>
 80070c0:	2300      	movs	r3, #0
 80070c2:	930a      	str	r3, [sp, #40]	; 0x28
 80070c4:	6823      	ldr	r3, [r4, #0]
 80070c6:	9305      	str	r3, [sp, #20]
 80070c8:	f8d8 3000 	ldr.w	r3, [r8]
 80070cc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80070d0:	3307      	adds	r3, #7
 80070d2:	f023 0307 	bic.w	r3, r3, #7
 80070d6:	f103 0208 	add.w	r2, r3, #8
 80070da:	f8c8 2000 	str.w	r2, [r8]
 80070de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80070e6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80070ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80070ee:	9307      	str	r3, [sp, #28]
 80070f0:	f8cd 8018 	str.w	r8, [sp, #24]
 80070f4:	ee08 0a10 	vmov	s16, r0
 80070f8:	4b9f      	ldr	r3, [pc, #636]	; (8007378 <_printf_float+0x2dc>)
 80070fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007102:	f7f9 fd1b 	bl	8000b3c <__aeabi_dcmpun>
 8007106:	bb88      	cbnz	r0, 800716c <_printf_float+0xd0>
 8007108:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800710c:	4b9a      	ldr	r3, [pc, #616]	; (8007378 <_printf_float+0x2dc>)
 800710e:	f04f 32ff 	mov.w	r2, #4294967295
 8007112:	f7f9 fcf5 	bl	8000b00 <__aeabi_dcmple>
 8007116:	bb48      	cbnz	r0, 800716c <_printf_float+0xd0>
 8007118:	2200      	movs	r2, #0
 800711a:	2300      	movs	r3, #0
 800711c:	4640      	mov	r0, r8
 800711e:	4649      	mov	r1, r9
 8007120:	f7f9 fce4 	bl	8000aec <__aeabi_dcmplt>
 8007124:	b110      	cbz	r0, 800712c <_printf_float+0x90>
 8007126:	232d      	movs	r3, #45	; 0x2d
 8007128:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800712c:	4b93      	ldr	r3, [pc, #588]	; (800737c <_printf_float+0x2e0>)
 800712e:	4894      	ldr	r0, [pc, #592]	; (8007380 <_printf_float+0x2e4>)
 8007130:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007134:	bf94      	ite	ls
 8007136:	4698      	movls	r8, r3
 8007138:	4680      	movhi	r8, r0
 800713a:	2303      	movs	r3, #3
 800713c:	6123      	str	r3, [r4, #16]
 800713e:	9b05      	ldr	r3, [sp, #20]
 8007140:	f023 0204 	bic.w	r2, r3, #4
 8007144:	6022      	str	r2, [r4, #0]
 8007146:	f04f 0900 	mov.w	r9, #0
 800714a:	9700      	str	r7, [sp, #0]
 800714c:	4633      	mov	r3, r6
 800714e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007150:	4621      	mov	r1, r4
 8007152:	4628      	mov	r0, r5
 8007154:	f000 f9d8 	bl	8007508 <_printf_common>
 8007158:	3001      	adds	r0, #1
 800715a:	f040 8090 	bne.w	800727e <_printf_float+0x1e2>
 800715e:	f04f 30ff 	mov.w	r0, #4294967295
 8007162:	b00d      	add	sp, #52	; 0x34
 8007164:	ecbd 8b02 	vpop	{d8}
 8007168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800716c:	4642      	mov	r2, r8
 800716e:	464b      	mov	r3, r9
 8007170:	4640      	mov	r0, r8
 8007172:	4649      	mov	r1, r9
 8007174:	f7f9 fce2 	bl	8000b3c <__aeabi_dcmpun>
 8007178:	b140      	cbz	r0, 800718c <_printf_float+0xf0>
 800717a:	464b      	mov	r3, r9
 800717c:	2b00      	cmp	r3, #0
 800717e:	bfbc      	itt	lt
 8007180:	232d      	movlt	r3, #45	; 0x2d
 8007182:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007186:	487f      	ldr	r0, [pc, #508]	; (8007384 <_printf_float+0x2e8>)
 8007188:	4b7f      	ldr	r3, [pc, #508]	; (8007388 <_printf_float+0x2ec>)
 800718a:	e7d1      	b.n	8007130 <_printf_float+0x94>
 800718c:	6863      	ldr	r3, [r4, #4]
 800718e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007192:	9206      	str	r2, [sp, #24]
 8007194:	1c5a      	adds	r2, r3, #1
 8007196:	d13f      	bne.n	8007218 <_printf_float+0x17c>
 8007198:	2306      	movs	r3, #6
 800719a:	6063      	str	r3, [r4, #4]
 800719c:	9b05      	ldr	r3, [sp, #20]
 800719e:	6861      	ldr	r1, [r4, #4]
 80071a0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80071a4:	2300      	movs	r3, #0
 80071a6:	9303      	str	r3, [sp, #12]
 80071a8:	ab0a      	add	r3, sp, #40	; 0x28
 80071aa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80071ae:	ab09      	add	r3, sp, #36	; 0x24
 80071b0:	ec49 8b10 	vmov	d0, r8, r9
 80071b4:	9300      	str	r3, [sp, #0]
 80071b6:	6022      	str	r2, [r4, #0]
 80071b8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80071bc:	4628      	mov	r0, r5
 80071be:	f7ff fecd 	bl	8006f5c <__cvt>
 80071c2:	9b06      	ldr	r3, [sp, #24]
 80071c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071c6:	2b47      	cmp	r3, #71	; 0x47
 80071c8:	4680      	mov	r8, r0
 80071ca:	d108      	bne.n	80071de <_printf_float+0x142>
 80071cc:	1cc8      	adds	r0, r1, #3
 80071ce:	db02      	blt.n	80071d6 <_printf_float+0x13a>
 80071d0:	6863      	ldr	r3, [r4, #4]
 80071d2:	4299      	cmp	r1, r3
 80071d4:	dd41      	ble.n	800725a <_printf_float+0x1be>
 80071d6:	f1ab 0b02 	sub.w	fp, fp, #2
 80071da:	fa5f fb8b 	uxtb.w	fp, fp
 80071de:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80071e2:	d820      	bhi.n	8007226 <_printf_float+0x18a>
 80071e4:	3901      	subs	r1, #1
 80071e6:	465a      	mov	r2, fp
 80071e8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80071ec:	9109      	str	r1, [sp, #36]	; 0x24
 80071ee:	f7ff ff17 	bl	8007020 <__exponent>
 80071f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071f4:	1813      	adds	r3, r2, r0
 80071f6:	2a01      	cmp	r2, #1
 80071f8:	4681      	mov	r9, r0
 80071fa:	6123      	str	r3, [r4, #16]
 80071fc:	dc02      	bgt.n	8007204 <_printf_float+0x168>
 80071fe:	6822      	ldr	r2, [r4, #0]
 8007200:	07d2      	lsls	r2, r2, #31
 8007202:	d501      	bpl.n	8007208 <_printf_float+0x16c>
 8007204:	3301      	adds	r3, #1
 8007206:	6123      	str	r3, [r4, #16]
 8007208:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800720c:	2b00      	cmp	r3, #0
 800720e:	d09c      	beq.n	800714a <_printf_float+0xae>
 8007210:	232d      	movs	r3, #45	; 0x2d
 8007212:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007216:	e798      	b.n	800714a <_printf_float+0xae>
 8007218:	9a06      	ldr	r2, [sp, #24]
 800721a:	2a47      	cmp	r2, #71	; 0x47
 800721c:	d1be      	bne.n	800719c <_printf_float+0x100>
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1bc      	bne.n	800719c <_printf_float+0x100>
 8007222:	2301      	movs	r3, #1
 8007224:	e7b9      	b.n	800719a <_printf_float+0xfe>
 8007226:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800722a:	d118      	bne.n	800725e <_printf_float+0x1c2>
 800722c:	2900      	cmp	r1, #0
 800722e:	6863      	ldr	r3, [r4, #4]
 8007230:	dd0b      	ble.n	800724a <_printf_float+0x1ae>
 8007232:	6121      	str	r1, [r4, #16]
 8007234:	b913      	cbnz	r3, 800723c <_printf_float+0x1a0>
 8007236:	6822      	ldr	r2, [r4, #0]
 8007238:	07d0      	lsls	r0, r2, #31
 800723a:	d502      	bpl.n	8007242 <_printf_float+0x1a6>
 800723c:	3301      	adds	r3, #1
 800723e:	440b      	add	r3, r1
 8007240:	6123      	str	r3, [r4, #16]
 8007242:	65a1      	str	r1, [r4, #88]	; 0x58
 8007244:	f04f 0900 	mov.w	r9, #0
 8007248:	e7de      	b.n	8007208 <_printf_float+0x16c>
 800724a:	b913      	cbnz	r3, 8007252 <_printf_float+0x1b6>
 800724c:	6822      	ldr	r2, [r4, #0]
 800724e:	07d2      	lsls	r2, r2, #31
 8007250:	d501      	bpl.n	8007256 <_printf_float+0x1ba>
 8007252:	3302      	adds	r3, #2
 8007254:	e7f4      	b.n	8007240 <_printf_float+0x1a4>
 8007256:	2301      	movs	r3, #1
 8007258:	e7f2      	b.n	8007240 <_printf_float+0x1a4>
 800725a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800725e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007260:	4299      	cmp	r1, r3
 8007262:	db05      	blt.n	8007270 <_printf_float+0x1d4>
 8007264:	6823      	ldr	r3, [r4, #0]
 8007266:	6121      	str	r1, [r4, #16]
 8007268:	07d8      	lsls	r0, r3, #31
 800726a:	d5ea      	bpl.n	8007242 <_printf_float+0x1a6>
 800726c:	1c4b      	adds	r3, r1, #1
 800726e:	e7e7      	b.n	8007240 <_printf_float+0x1a4>
 8007270:	2900      	cmp	r1, #0
 8007272:	bfd4      	ite	le
 8007274:	f1c1 0202 	rsble	r2, r1, #2
 8007278:	2201      	movgt	r2, #1
 800727a:	4413      	add	r3, r2
 800727c:	e7e0      	b.n	8007240 <_printf_float+0x1a4>
 800727e:	6823      	ldr	r3, [r4, #0]
 8007280:	055a      	lsls	r2, r3, #21
 8007282:	d407      	bmi.n	8007294 <_printf_float+0x1f8>
 8007284:	6923      	ldr	r3, [r4, #16]
 8007286:	4642      	mov	r2, r8
 8007288:	4631      	mov	r1, r6
 800728a:	4628      	mov	r0, r5
 800728c:	47b8      	blx	r7
 800728e:	3001      	adds	r0, #1
 8007290:	d12c      	bne.n	80072ec <_printf_float+0x250>
 8007292:	e764      	b.n	800715e <_printf_float+0xc2>
 8007294:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007298:	f240 80e0 	bls.w	800745c <_printf_float+0x3c0>
 800729c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80072a0:	2200      	movs	r2, #0
 80072a2:	2300      	movs	r3, #0
 80072a4:	f7f9 fc18 	bl	8000ad8 <__aeabi_dcmpeq>
 80072a8:	2800      	cmp	r0, #0
 80072aa:	d034      	beq.n	8007316 <_printf_float+0x27a>
 80072ac:	4a37      	ldr	r2, [pc, #220]	; (800738c <_printf_float+0x2f0>)
 80072ae:	2301      	movs	r3, #1
 80072b0:	4631      	mov	r1, r6
 80072b2:	4628      	mov	r0, r5
 80072b4:	47b8      	blx	r7
 80072b6:	3001      	adds	r0, #1
 80072b8:	f43f af51 	beq.w	800715e <_printf_float+0xc2>
 80072bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072c0:	429a      	cmp	r2, r3
 80072c2:	db02      	blt.n	80072ca <_printf_float+0x22e>
 80072c4:	6823      	ldr	r3, [r4, #0]
 80072c6:	07d8      	lsls	r0, r3, #31
 80072c8:	d510      	bpl.n	80072ec <_printf_float+0x250>
 80072ca:	ee18 3a10 	vmov	r3, s16
 80072ce:	4652      	mov	r2, sl
 80072d0:	4631      	mov	r1, r6
 80072d2:	4628      	mov	r0, r5
 80072d4:	47b8      	blx	r7
 80072d6:	3001      	adds	r0, #1
 80072d8:	f43f af41 	beq.w	800715e <_printf_float+0xc2>
 80072dc:	f04f 0800 	mov.w	r8, #0
 80072e0:	f104 091a 	add.w	r9, r4, #26
 80072e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072e6:	3b01      	subs	r3, #1
 80072e8:	4543      	cmp	r3, r8
 80072ea:	dc09      	bgt.n	8007300 <_printf_float+0x264>
 80072ec:	6823      	ldr	r3, [r4, #0]
 80072ee:	079b      	lsls	r3, r3, #30
 80072f0:	f100 8105 	bmi.w	80074fe <_printf_float+0x462>
 80072f4:	68e0      	ldr	r0, [r4, #12]
 80072f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072f8:	4298      	cmp	r0, r3
 80072fa:	bfb8      	it	lt
 80072fc:	4618      	movlt	r0, r3
 80072fe:	e730      	b.n	8007162 <_printf_float+0xc6>
 8007300:	2301      	movs	r3, #1
 8007302:	464a      	mov	r2, r9
 8007304:	4631      	mov	r1, r6
 8007306:	4628      	mov	r0, r5
 8007308:	47b8      	blx	r7
 800730a:	3001      	adds	r0, #1
 800730c:	f43f af27 	beq.w	800715e <_printf_float+0xc2>
 8007310:	f108 0801 	add.w	r8, r8, #1
 8007314:	e7e6      	b.n	80072e4 <_printf_float+0x248>
 8007316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007318:	2b00      	cmp	r3, #0
 800731a:	dc39      	bgt.n	8007390 <_printf_float+0x2f4>
 800731c:	4a1b      	ldr	r2, [pc, #108]	; (800738c <_printf_float+0x2f0>)
 800731e:	2301      	movs	r3, #1
 8007320:	4631      	mov	r1, r6
 8007322:	4628      	mov	r0, r5
 8007324:	47b8      	blx	r7
 8007326:	3001      	adds	r0, #1
 8007328:	f43f af19 	beq.w	800715e <_printf_float+0xc2>
 800732c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007330:	4313      	orrs	r3, r2
 8007332:	d102      	bne.n	800733a <_printf_float+0x29e>
 8007334:	6823      	ldr	r3, [r4, #0]
 8007336:	07d9      	lsls	r1, r3, #31
 8007338:	d5d8      	bpl.n	80072ec <_printf_float+0x250>
 800733a:	ee18 3a10 	vmov	r3, s16
 800733e:	4652      	mov	r2, sl
 8007340:	4631      	mov	r1, r6
 8007342:	4628      	mov	r0, r5
 8007344:	47b8      	blx	r7
 8007346:	3001      	adds	r0, #1
 8007348:	f43f af09 	beq.w	800715e <_printf_float+0xc2>
 800734c:	f04f 0900 	mov.w	r9, #0
 8007350:	f104 0a1a 	add.w	sl, r4, #26
 8007354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007356:	425b      	negs	r3, r3
 8007358:	454b      	cmp	r3, r9
 800735a:	dc01      	bgt.n	8007360 <_printf_float+0x2c4>
 800735c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800735e:	e792      	b.n	8007286 <_printf_float+0x1ea>
 8007360:	2301      	movs	r3, #1
 8007362:	4652      	mov	r2, sl
 8007364:	4631      	mov	r1, r6
 8007366:	4628      	mov	r0, r5
 8007368:	47b8      	blx	r7
 800736a:	3001      	adds	r0, #1
 800736c:	f43f aef7 	beq.w	800715e <_printf_float+0xc2>
 8007370:	f109 0901 	add.w	r9, r9, #1
 8007374:	e7ee      	b.n	8007354 <_printf_float+0x2b8>
 8007376:	bf00      	nop
 8007378:	7fefffff 	.word	0x7fefffff
 800737c:	0800a1ec 	.word	0x0800a1ec
 8007380:	0800a1f0 	.word	0x0800a1f0
 8007384:	0800a1f8 	.word	0x0800a1f8
 8007388:	0800a1f4 	.word	0x0800a1f4
 800738c:	0800a1fc 	.word	0x0800a1fc
 8007390:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007392:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007394:	429a      	cmp	r2, r3
 8007396:	bfa8      	it	ge
 8007398:	461a      	movge	r2, r3
 800739a:	2a00      	cmp	r2, #0
 800739c:	4691      	mov	r9, r2
 800739e:	dc37      	bgt.n	8007410 <_printf_float+0x374>
 80073a0:	f04f 0b00 	mov.w	fp, #0
 80073a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073a8:	f104 021a 	add.w	r2, r4, #26
 80073ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80073ae:	9305      	str	r3, [sp, #20]
 80073b0:	eba3 0309 	sub.w	r3, r3, r9
 80073b4:	455b      	cmp	r3, fp
 80073b6:	dc33      	bgt.n	8007420 <_printf_float+0x384>
 80073b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073bc:	429a      	cmp	r2, r3
 80073be:	db3b      	blt.n	8007438 <_printf_float+0x39c>
 80073c0:	6823      	ldr	r3, [r4, #0]
 80073c2:	07da      	lsls	r2, r3, #31
 80073c4:	d438      	bmi.n	8007438 <_printf_float+0x39c>
 80073c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073c8:	9b05      	ldr	r3, [sp, #20]
 80073ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	eba2 0901 	sub.w	r9, r2, r1
 80073d2:	4599      	cmp	r9, r3
 80073d4:	bfa8      	it	ge
 80073d6:	4699      	movge	r9, r3
 80073d8:	f1b9 0f00 	cmp.w	r9, #0
 80073dc:	dc35      	bgt.n	800744a <_printf_float+0x3ae>
 80073de:	f04f 0800 	mov.w	r8, #0
 80073e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073e6:	f104 0a1a 	add.w	sl, r4, #26
 80073ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073ee:	1a9b      	subs	r3, r3, r2
 80073f0:	eba3 0309 	sub.w	r3, r3, r9
 80073f4:	4543      	cmp	r3, r8
 80073f6:	f77f af79 	ble.w	80072ec <_printf_float+0x250>
 80073fa:	2301      	movs	r3, #1
 80073fc:	4652      	mov	r2, sl
 80073fe:	4631      	mov	r1, r6
 8007400:	4628      	mov	r0, r5
 8007402:	47b8      	blx	r7
 8007404:	3001      	adds	r0, #1
 8007406:	f43f aeaa 	beq.w	800715e <_printf_float+0xc2>
 800740a:	f108 0801 	add.w	r8, r8, #1
 800740e:	e7ec      	b.n	80073ea <_printf_float+0x34e>
 8007410:	4613      	mov	r3, r2
 8007412:	4631      	mov	r1, r6
 8007414:	4642      	mov	r2, r8
 8007416:	4628      	mov	r0, r5
 8007418:	47b8      	blx	r7
 800741a:	3001      	adds	r0, #1
 800741c:	d1c0      	bne.n	80073a0 <_printf_float+0x304>
 800741e:	e69e      	b.n	800715e <_printf_float+0xc2>
 8007420:	2301      	movs	r3, #1
 8007422:	4631      	mov	r1, r6
 8007424:	4628      	mov	r0, r5
 8007426:	9205      	str	r2, [sp, #20]
 8007428:	47b8      	blx	r7
 800742a:	3001      	adds	r0, #1
 800742c:	f43f ae97 	beq.w	800715e <_printf_float+0xc2>
 8007430:	9a05      	ldr	r2, [sp, #20]
 8007432:	f10b 0b01 	add.w	fp, fp, #1
 8007436:	e7b9      	b.n	80073ac <_printf_float+0x310>
 8007438:	ee18 3a10 	vmov	r3, s16
 800743c:	4652      	mov	r2, sl
 800743e:	4631      	mov	r1, r6
 8007440:	4628      	mov	r0, r5
 8007442:	47b8      	blx	r7
 8007444:	3001      	adds	r0, #1
 8007446:	d1be      	bne.n	80073c6 <_printf_float+0x32a>
 8007448:	e689      	b.n	800715e <_printf_float+0xc2>
 800744a:	9a05      	ldr	r2, [sp, #20]
 800744c:	464b      	mov	r3, r9
 800744e:	4442      	add	r2, r8
 8007450:	4631      	mov	r1, r6
 8007452:	4628      	mov	r0, r5
 8007454:	47b8      	blx	r7
 8007456:	3001      	adds	r0, #1
 8007458:	d1c1      	bne.n	80073de <_printf_float+0x342>
 800745a:	e680      	b.n	800715e <_printf_float+0xc2>
 800745c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800745e:	2a01      	cmp	r2, #1
 8007460:	dc01      	bgt.n	8007466 <_printf_float+0x3ca>
 8007462:	07db      	lsls	r3, r3, #31
 8007464:	d538      	bpl.n	80074d8 <_printf_float+0x43c>
 8007466:	2301      	movs	r3, #1
 8007468:	4642      	mov	r2, r8
 800746a:	4631      	mov	r1, r6
 800746c:	4628      	mov	r0, r5
 800746e:	47b8      	blx	r7
 8007470:	3001      	adds	r0, #1
 8007472:	f43f ae74 	beq.w	800715e <_printf_float+0xc2>
 8007476:	ee18 3a10 	vmov	r3, s16
 800747a:	4652      	mov	r2, sl
 800747c:	4631      	mov	r1, r6
 800747e:	4628      	mov	r0, r5
 8007480:	47b8      	blx	r7
 8007482:	3001      	adds	r0, #1
 8007484:	f43f ae6b 	beq.w	800715e <_printf_float+0xc2>
 8007488:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800748c:	2200      	movs	r2, #0
 800748e:	2300      	movs	r3, #0
 8007490:	f7f9 fb22 	bl	8000ad8 <__aeabi_dcmpeq>
 8007494:	b9d8      	cbnz	r0, 80074ce <_printf_float+0x432>
 8007496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007498:	f108 0201 	add.w	r2, r8, #1
 800749c:	3b01      	subs	r3, #1
 800749e:	4631      	mov	r1, r6
 80074a0:	4628      	mov	r0, r5
 80074a2:	47b8      	blx	r7
 80074a4:	3001      	adds	r0, #1
 80074a6:	d10e      	bne.n	80074c6 <_printf_float+0x42a>
 80074a8:	e659      	b.n	800715e <_printf_float+0xc2>
 80074aa:	2301      	movs	r3, #1
 80074ac:	4652      	mov	r2, sl
 80074ae:	4631      	mov	r1, r6
 80074b0:	4628      	mov	r0, r5
 80074b2:	47b8      	blx	r7
 80074b4:	3001      	adds	r0, #1
 80074b6:	f43f ae52 	beq.w	800715e <_printf_float+0xc2>
 80074ba:	f108 0801 	add.w	r8, r8, #1
 80074be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074c0:	3b01      	subs	r3, #1
 80074c2:	4543      	cmp	r3, r8
 80074c4:	dcf1      	bgt.n	80074aa <_printf_float+0x40e>
 80074c6:	464b      	mov	r3, r9
 80074c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80074cc:	e6dc      	b.n	8007288 <_printf_float+0x1ec>
 80074ce:	f04f 0800 	mov.w	r8, #0
 80074d2:	f104 0a1a 	add.w	sl, r4, #26
 80074d6:	e7f2      	b.n	80074be <_printf_float+0x422>
 80074d8:	2301      	movs	r3, #1
 80074da:	4642      	mov	r2, r8
 80074dc:	e7df      	b.n	800749e <_printf_float+0x402>
 80074de:	2301      	movs	r3, #1
 80074e0:	464a      	mov	r2, r9
 80074e2:	4631      	mov	r1, r6
 80074e4:	4628      	mov	r0, r5
 80074e6:	47b8      	blx	r7
 80074e8:	3001      	adds	r0, #1
 80074ea:	f43f ae38 	beq.w	800715e <_printf_float+0xc2>
 80074ee:	f108 0801 	add.w	r8, r8, #1
 80074f2:	68e3      	ldr	r3, [r4, #12]
 80074f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80074f6:	1a5b      	subs	r3, r3, r1
 80074f8:	4543      	cmp	r3, r8
 80074fa:	dcf0      	bgt.n	80074de <_printf_float+0x442>
 80074fc:	e6fa      	b.n	80072f4 <_printf_float+0x258>
 80074fe:	f04f 0800 	mov.w	r8, #0
 8007502:	f104 0919 	add.w	r9, r4, #25
 8007506:	e7f4      	b.n	80074f2 <_printf_float+0x456>

08007508 <_printf_common>:
 8007508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800750c:	4616      	mov	r6, r2
 800750e:	4699      	mov	r9, r3
 8007510:	688a      	ldr	r2, [r1, #8]
 8007512:	690b      	ldr	r3, [r1, #16]
 8007514:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007518:	4293      	cmp	r3, r2
 800751a:	bfb8      	it	lt
 800751c:	4613      	movlt	r3, r2
 800751e:	6033      	str	r3, [r6, #0]
 8007520:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007524:	4607      	mov	r7, r0
 8007526:	460c      	mov	r4, r1
 8007528:	b10a      	cbz	r2, 800752e <_printf_common+0x26>
 800752a:	3301      	adds	r3, #1
 800752c:	6033      	str	r3, [r6, #0]
 800752e:	6823      	ldr	r3, [r4, #0]
 8007530:	0699      	lsls	r1, r3, #26
 8007532:	bf42      	ittt	mi
 8007534:	6833      	ldrmi	r3, [r6, #0]
 8007536:	3302      	addmi	r3, #2
 8007538:	6033      	strmi	r3, [r6, #0]
 800753a:	6825      	ldr	r5, [r4, #0]
 800753c:	f015 0506 	ands.w	r5, r5, #6
 8007540:	d106      	bne.n	8007550 <_printf_common+0x48>
 8007542:	f104 0a19 	add.w	sl, r4, #25
 8007546:	68e3      	ldr	r3, [r4, #12]
 8007548:	6832      	ldr	r2, [r6, #0]
 800754a:	1a9b      	subs	r3, r3, r2
 800754c:	42ab      	cmp	r3, r5
 800754e:	dc26      	bgt.n	800759e <_printf_common+0x96>
 8007550:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007554:	1e13      	subs	r3, r2, #0
 8007556:	6822      	ldr	r2, [r4, #0]
 8007558:	bf18      	it	ne
 800755a:	2301      	movne	r3, #1
 800755c:	0692      	lsls	r2, r2, #26
 800755e:	d42b      	bmi.n	80075b8 <_printf_common+0xb0>
 8007560:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007564:	4649      	mov	r1, r9
 8007566:	4638      	mov	r0, r7
 8007568:	47c0      	blx	r8
 800756a:	3001      	adds	r0, #1
 800756c:	d01e      	beq.n	80075ac <_printf_common+0xa4>
 800756e:	6823      	ldr	r3, [r4, #0]
 8007570:	68e5      	ldr	r5, [r4, #12]
 8007572:	6832      	ldr	r2, [r6, #0]
 8007574:	f003 0306 	and.w	r3, r3, #6
 8007578:	2b04      	cmp	r3, #4
 800757a:	bf08      	it	eq
 800757c:	1aad      	subeq	r5, r5, r2
 800757e:	68a3      	ldr	r3, [r4, #8]
 8007580:	6922      	ldr	r2, [r4, #16]
 8007582:	bf0c      	ite	eq
 8007584:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007588:	2500      	movne	r5, #0
 800758a:	4293      	cmp	r3, r2
 800758c:	bfc4      	itt	gt
 800758e:	1a9b      	subgt	r3, r3, r2
 8007590:	18ed      	addgt	r5, r5, r3
 8007592:	2600      	movs	r6, #0
 8007594:	341a      	adds	r4, #26
 8007596:	42b5      	cmp	r5, r6
 8007598:	d11a      	bne.n	80075d0 <_printf_common+0xc8>
 800759a:	2000      	movs	r0, #0
 800759c:	e008      	b.n	80075b0 <_printf_common+0xa8>
 800759e:	2301      	movs	r3, #1
 80075a0:	4652      	mov	r2, sl
 80075a2:	4649      	mov	r1, r9
 80075a4:	4638      	mov	r0, r7
 80075a6:	47c0      	blx	r8
 80075a8:	3001      	adds	r0, #1
 80075aa:	d103      	bne.n	80075b4 <_printf_common+0xac>
 80075ac:	f04f 30ff 	mov.w	r0, #4294967295
 80075b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075b4:	3501      	adds	r5, #1
 80075b6:	e7c6      	b.n	8007546 <_printf_common+0x3e>
 80075b8:	18e1      	adds	r1, r4, r3
 80075ba:	1c5a      	adds	r2, r3, #1
 80075bc:	2030      	movs	r0, #48	; 0x30
 80075be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075c2:	4422      	add	r2, r4
 80075c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075cc:	3302      	adds	r3, #2
 80075ce:	e7c7      	b.n	8007560 <_printf_common+0x58>
 80075d0:	2301      	movs	r3, #1
 80075d2:	4622      	mov	r2, r4
 80075d4:	4649      	mov	r1, r9
 80075d6:	4638      	mov	r0, r7
 80075d8:	47c0      	blx	r8
 80075da:	3001      	adds	r0, #1
 80075dc:	d0e6      	beq.n	80075ac <_printf_common+0xa4>
 80075de:	3601      	adds	r6, #1
 80075e0:	e7d9      	b.n	8007596 <_printf_common+0x8e>
	...

080075e4 <_printf_i>:
 80075e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075e8:	460c      	mov	r4, r1
 80075ea:	4691      	mov	r9, r2
 80075ec:	7e27      	ldrb	r7, [r4, #24]
 80075ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80075f0:	2f78      	cmp	r7, #120	; 0x78
 80075f2:	4680      	mov	r8, r0
 80075f4:	469a      	mov	sl, r3
 80075f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80075fa:	d807      	bhi.n	800760c <_printf_i+0x28>
 80075fc:	2f62      	cmp	r7, #98	; 0x62
 80075fe:	d80a      	bhi.n	8007616 <_printf_i+0x32>
 8007600:	2f00      	cmp	r7, #0
 8007602:	f000 80d8 	beq.w	80077b6 <_printf_i+0x1d2>
 8007606:	2f58      	cmp	r7, #88	; 0x58
 8007608:	f000 80a3 	beq.w	8007752 <_printf_i+0x16e>
 800760c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007610:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007614:	e03a      	b.n	800768c <_printf_i+0xa8>
 8007616:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800761a:	2b15      	cmp	r3, #21
 800761c:	d8f6      	bhi.n	800760c <_printf_i+0x28>
 800761e:	a001      	add	r0, pc, #4	; (adr r0, 8007624 <_printf_i+0x40>)
 8007620:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007624:	0800767d 	.word	0x0800767d
 8007628:	08007691 	.word	0x08007691
 800762c:	0800760d 	.word	0x0800760d
 8007630:	0800760d 	.word	0x0800760d
 8007634:	0800760d 	.word	0x0800760d
 8007638:	0800760d 	.word	0x0800760d
 800763c:	08007691 	.word	0x08007691
 8007640:	0800760d 	.word	0x0800760d
 8007644:	0800760d 	.word	0x0800760d
 8007648:	0800760d 	.word	0x0800760d
 800764c:	0800760d 	.word	0x0800760d
 8007650:	0800779d 	.word	0x0800779d
 8007654:	080076c1 	.word	0x080076c1
 8007658:	0800777f 	.word	0x0800777f
 800765c:	0800760d 	.word	0x0800760d
 8007660:	0800760d 	.word	0x0800760d
 8007664:	080077bf 	.word	0x080077bf
 8007668:	0800760d 	.word	0x0800760d
 800766c:	080076c1 	.word	0x080076c1
 8007670:	0800760d 	.word	0x0800760d
 8007674:	0800760d 	.word	0x0800760d
 8007678:	08007787 	.word	0x08007787
 800767c:	680b      	ldr	r3, [r1, #0]
 800767e:	1d1a      	adds	r2, r3, #4
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	600a      	str	r2, [r1, #0]
 8007684:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007688:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800768c:	2301      	movs	r3, #1
 800768e:	e0a3      	b.n	80077d8 <_printf_i+0x1f4>
 8007690:	6825      	ldr	r5, [r4, #0]
 8007692:	6808      	ldr	r0, [r1, #0]
 8007694:	062e      	lsls	r6, r5, #24
 8007696:	f100 0304 	add.w	r3, r0, #4
 800769a:	d50a      	bpl.n	80076b2 <_printf_i+0xce>
 800769c:	6805      	ldr	r5, [r0, #0]
 800769e:	600b      	str	r3, [r1, #0]
 80076a0:	2d00      	cmp	r5, #0
 80076a2:	da03      	bge.n	80076ac <_printf_i+0xc8>
 80076a4:	232d      	movs	r3, #45	; 0x2d
 80076a6:	426d      	negs	r5, r5
 80076a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076ac:	485e      	ldr	r0, [pc, #376]	; (8007828 <_printf_i+0x244>)
 80076ae:	230a      	movs	r3, #10
 80076b0:	e019      	b.n	80076e6 <_printf_i+0x102>
 80076b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80076b6:	6805      	ldr	r5, [r0, #0]
 80076b8:	600b      	str	r3, [r1, #0]
 80076ba:	bf18      	it	ne
 80076bc:	b22d      	sxthne	r5, r5
 80076be:	e7ef      	b.n	80076a0 <_printf_i+0xbc>
 80076c0:	680b      	ldr	r3, [r1, #0]
 80076c2:	6825      	ldr	r5, [r4, #0]
 80076c4:	1d18      	adds	r0, r3, #4
 80076c6:	6008      	str	r0, [r1, #0]
 80076c8:	0628      	lsls	r0, r5, #24
 80076ca:	d501      	bpl.n	80076d0 <_printf_i+0xec>
 80076cc:	681d      	ldr	r5, [r3, #0]
 80076ce:	e002      	b.n	80076d6 <_printf_i+0xf2>
 80076d0:	0669      	lsls	r1, r5, #25
 80076d2:	d5fb      	bpl.n	80076cc <_printf_i+0xe8>
 80076d4:	881d      	ldrh	r5, [r3, #0]
 80076d6:	4854      	ldr	r0, [pc, #336]	; (8007828 <_printf_i+0x244>)
 80076d8:	2f6f      	cmp	r7, #111	; 0x6f
 80076da:	bf0c      	ite	eq
 80076dc:	2308      	moveq	r3, #8
 80076de:	230a      	movne	r3, #10
 80076e0:	2100      	movs	r1, #0
 80076e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076e6:	6866      	ldr	r6, [r4, #4]
 80076e8:	60a6      	str	r6, [r4, #8]
 80076ea:	2e00      	cmp	r6, #0
 80076ec:	bfa2      	ittt	ge
 80076ee:	6821      	ldrge	r1, [r4, #0]
 80076f0:	f021 0104 	bicge.w	r1, r1, #4
 80076f4:	6021      	strge	r1, [r4, #0]
 80076f6:	b90d      	cbnz	r5, 80076fc <_printf_i+0x118>
 80076f8:	2e00      	cmp	r6, #0
 80076fa:	d04d      	beq.n	8007798 <_printf_i+0x1b4>
 80076fc:	4616      	mov	r6, r2
 80076fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8007702:	fb03 5711 	mls	r7, r3, r1, r5
 8007706:	5dc7      	ldrb	r7, [r0, r7]
 8007708:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800770c:	462f      	mov	r7, r5
 800770e:	42bb      	cmp	r3, r7
 8007710:	460d      	mov	r5, r1
 8007712:	d9f4      	bls.n	80076fe <_printf_i+0x11a>
 8007714:	2b08      	cmp	r3, #8
 8007716:	d10b      	bne.n	8007730 <_printf_i+0x14c>
 8007718:	6823      	ldr	r3, [r4, #0]
 800771a:	07df      	lsls	r7, r3, #31
 800771c:	d508      	bpl.n	8007730 <_printf_i+0x14c>
 800771e:	6923      	ldr	r3, [r4, #16]
 8007720:	6861      	ldr	r1, [r4, #4]
 8007722:	4299      	cmp	r1, r3
 8007724:	bfde      	ittt	le
 8007726:	2330      	movle	r3, #48	; 0x30
 8007728:	f806 3c01 	strble.w	r3, [r6, #-1]
 800772c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007730:	1b92      	subs	r2, r2, r6
 8007732:	6122      	str	r2, [r4, #16]
 8007734:	f8cd a000 	str.w	sl, [sp]
 8007738:	464b      	mov	r3, r9
 800773a:	aa03      	add	r2, sp, #12
 800773c:	4621      	mov	r1, r4
 800773e:	4640      	mov	r0, r8
 8007740:	f7ff fee2 	bl	8007508 <_printf_common>
 8007744:	3001      	adds	r0, #1
 8007746:	d14c      	bne.n	80077e2 <_printf_i+0x1fe>
 8007748:	f04f 30ff 	mov.w	r0, #4294967295
 800774c:	b004      	add	sp, #16
 800774e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007752:	4835      	ldr	r0, [pc, #212]	; (8007828 <_printf_i+0x244>)
 8007754:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007758:	6823      	ldr	r3, [r4, #0]
 800775a:	680e      	ldr	r6, [r1, #0]
 800775c:	061f      	lsls	r7, r3, #24
 800775e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007762:	600e      	str	r6, [r1, #0]
 8007764:	d514      	bpl.n	8007790 <_printf_i+0x1ac>
 8007766:	07d9      	lsls	r1, r3, #31
 8007768:	bf44      	itt	mi
 800776a:	f043 0320 	orrmi.w	r3, r3, #32
 800776e:	6023      	strmi	r3, [r4, #0]
 8007770:	b91d      	cbnz	r5, 800777a <_printf_i+0x196>
 8007772:	6823      	ldr	r3, [r4, #0]
 8007774:	f023 0320 	bic.w	r3, r3, #32
 8007778:	6023      	str	r3, [r4, #0]
 800777a:	2310      	movs	r3, #16
 800777c:	e7b0      	b.n	80076e0 <_printf_i+0xfc>
 800777e:	6823      	ldr	r3, [r4, #0]
 8007780:	f043 0320 	orr.w	r3, r3, #32
 8007784:	6023      	str	r3, [r4, #0]
 8007786:	2378      	movs	r3, #120	; 0x78
 8007788:	4828      	ldr	r0, [pc, #160]	; (800782c <_printf_i+0x248>)
 800778a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800778e:	e7e3      	b.n	8007758 <_printf_i+0x174>
 8007790:	065e      	lsls	r6, r3, #25
 8007792:	bf48      	it	mi
 8007794:	b2ad      	uxthmi	r5, r5
 8007796:	e7e6      	b.n	8007766 <_printf_i+0x182>
 8007798:	4616      	mov	r6, r2
 800779a:	e7bb      	b.n	8007714 <_printf_i+0x130>
 800779c:	680b      	ldr	r3, [r1, #0]
 800779e:	6826      	ldr	r6, [r4, #0]
 80077a0:	6960      	ldr	r0, [r4, #20]
 80077a2:	1d1d      	adds	r5, r3, #4
 80077a4:	600d      	str	r5, [r1, #0]
 80077a6:	0635      	lsls	r5, r6, #24
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	d501      	bpl.n	80077b0 <_printf_i+0x1cc>
 80077ac:	6018      	str	r0, [r3, #0]
 80077ae:	e002      	b.n	80077b6 <_printf_i+0x1d2>
 80077b0:	0671      	lsls	r1, r6, #25
 80077b2:	d5fb      	bpl.n	80077ac <_printf_i+0x1c8>
 80077b4:	8018      	strh	r0, [r3, #0]
 80077b6:	2300      	movs	r3, #0
 80077b8:	6123      	str	r3, [r4, #16]
 80077ba:	4616      	mov	r6, r2
 80077bc:	e7ba      	b.n	8007734 <_printf_i+0x150>
 80077be:	680b      	ldr	r3, [r1, #0]
 80077c0:	1d1a      	adds	r2, r3, #4
 80077c2:	600a      	str	r2, [r1, #0]
 80077c4:	681e      	ldr	r6, [r3, #0]
 80077c6:	6862      	ldr	r2, [r4, #4]
 80077c8:	2100      	movs	r1, #0
 80077ca:	4630      	mov	r0, r6
 80077cc:	f7f8 fd10 	bl	80001f0 <memchr>
 80077d0:	b108      	cbz	r0, 80077d6 <_printf_i+0x1f2>
 80077d2:	1b80      	subs	r0, r0, r6
 80077d4:	6060      	str	r0, [r4, #4]
 80077d6:	6863      	ldr	r3, [r4, #4]
 80077d8:	6123      	str	r3, [r4, #16]
 80077da:	2300      	movs	r3, #0
 80077dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077e0:	e7a8      	b.n	8007734 <_printf_i+0x150>
 80077e2:	6923      	ldr	r3, [r4, #16]
 80077e4:	4632      	mov	r2, r6
 80077e6:	4649      	mov	r1, r9
 80077e8:	4640      	mov	r0, r8
 80077ea:	47d0      	blx	sl
 80077ec:	3001      	adds	r0, #1
 80077ee:	d0ab      	beq.n	8007748 <_printf_i+0x164>
 80077f0:	6823      	ldr	r3, [r4, #0]
 80077f2:	079b      	lsls	r3, r3, #30
 80077f4:	d413      	bmi.n	800781e <_printf_i+0x23a>
 80077f6:	68e0      	ldr	r0, [r4, #12]
 80077f8:	9b03      	ldr	r3, [sp, #12]
 80077fa:	4298      	cmp	r0, r3
 80077fc:	bfb8      	it	lt
 80077fe:	4618      	movlt	r0, r3
 8007800:	e7a4      	b.n	800774c <_printf_i+0x168>
 8007802:	2301      	movs	r3, #1
 8007804:	4632      	mov	r2, r6
 8007806:	4649      	mov	r1, r9
 8007808:	4640      	mov	r0, r8
 800780a:	47d0      	blx	sl
 800780c:	3001      	adds	r0, #1
 800780e:	d09b      	beq.n	8007748 <_printf_i+0x164>
 8007810:	3501      	adds	r5, #1
 8007812:	68e3      	ldr	r3, [r4, #12]
 8007814:	9903      	ldr	r1, [sp, #12]
 8007816:	1a5b      	subs	r3, r3, r1
 8007818:	42ab      	cmp	r3, r5
 800781a:	dcf2      	bgt.n	8007802 <_printf_i+0x21e>
 800781c:	e7eb      	b.n	80077f6 <_printf_i+0x212>
 800781e:	2500      	movs	r5, #0
 8007820:	f104 0619 	add.w	r6, r4, #25
 8007824:	e7f5      	b.n	8007812 <_printf_i+0x22e>
 8007826:	bf00      	nop
 8007828:	0800a1fe 	.word	0x0800a1fe
 800782c:	0800a20f 	.word	0x0800a20f

08007830 <siprintf>:
 8007830:	b40e      	push	{r1, r2, r3}
 8007832:	b500      	push	{lr}
 8007834:	b09c      	sub	sp, #112	; 0x70
 8007836:	ab1d      	add	r3, sp, #116	; 0x74
 8007838:	9002      	str	r0, [sp, #8]
 800783a:	9006      	str	r0, [sp, #24]
 800783c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007840:	4809      	ldr	r0, [pc, #36]	; (8007868 <siprintf+0x38>)
 8007842:	9107      	str	r1, [sp, #28]
 8007844:	9104      	str	r1, [sp, #16]
 8007846:	4909      	ldr	r1, [pc, #36]	; (800786c <siprintf+0x3c>)
 8007848:	f853 2b04 	ldr.w	r2, [r3], #4
 800784c:	9105      	str	r1, [sp, #20]
 800784e:	6800      	ldr	r0, [r0, #0]
 8007850:	9301      	str	r3, [sp, #4]
 8007852:	a902      	add	r1, sp, #8
 8007854:	f001 fb32 	bl	8008ebc <_svfiprintf_r>
 8007858:	9b02      	ldr	r3, [sp, #8]
 800785a:	2200      	movs	r2, #0
 800785c:	701a      	strb	r2, [r3, #0]
 800785e:	b01c      	add	sp, #112	; 0x70
 8007860:	f85d eb04 	ldr.w	lr, [sp], #4
 8007864:	b003      	add	sp, #12
 8007866:	4770      	bx	lr
 8007868:	2000000c 	.word	0x2000000c
 800786c:	ffff0208 	.word	0xffff0208

08007870 <quorem>:
 8007870:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007874:	6903      	ldr	r3, [r0, #16]
 8007876:	690c      	ldr	r4, [r1, #16]
 8007878:	42a3      	cmp	r3, r4
 800787a:	4607      	mov	r7, r0
 800787c:	f2c0 8081 	blt.w	8007982 <quorem+0x112>
 8007880:	3c01      	subs	r4, #1
 8007882:	f101 0814 	add.w	r8, r1, #20
 8007886:	f100 0514 	add.w	r5, r0, #20
 800788a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800788e:	9301      	str	r3, [sp, #4]
 8007890:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007894:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007898:	3301      	adds	r3, #1
 800789a:	429a      	cmp	r2, r3
 800789c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80078a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80078a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80078a8:	d331      	bcc.n	800790e <quorem+0x9e>
 80078aa:	f04f 0e00 	mov.w	lr, #0
 80078ae:	4640      	mov	r0, r8
 80078b0:	46ac      	mov	ip, r5
 80078b2:	46f2      	mov	sl, lr
 80078b4:	f850 2b04 	ldr.w	r2, [r0], #4
 80078b8:	b293      	uxth	r3, r2
 80078ba:	fb06 e303 	mla	r3, r6, r3, lr
 80078be:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	ebaa 0303 	sub.w	r3, sl, r3
 80078c8:	0c12      	lsrs	r2, r2, #16
 80078ca:	f8dc a000 	ldr.w	sl, [ip]
 80078ce:	fb06 e202 	mla	r2, r6, r2, lr
 80078d2:	fa13 f38a 	uxtah	r3, r3, sl
 80078d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80078da:	fa1f fa82 	uxth.w	sl, r2
 80078de:	f8dc 2000 	ldr.w	r2, [ip]
 80078e2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80078e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80078f0:	4581      	cmp	r9, r0
 80078f2:	f84c 3b04 	str.w	r3, [ip], #4
 80078f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80078fa:	d2db      	bcs.n	80078b4 <quorem+0x44>
 80078fc:	f855 300b 	ldr.w	r3, [r5, fp]
 8007900:	b92b      	cbnz	r3, 800790e <quorem+0x9e>
 8007902:	9b01      	ldr	r3, [sp, #4]
 8007904:	3b04      	subs	r3, #4
 8007906:	429d      	cmp	r5, r3
 8007908:	461a      	mov	r2, r3
 800790a:	d32e      	bcc.n	800796a <quorem+0xfa>
 800790c:	613c      	str	r4, [r7, #16]
 800790e:	4638      	mov	r0, r7
 8007910:	f001 f8be 	bl	8008a90 <__mcmp>
 8007914:	2800      	cmp	r0, #0
 8007916:	db24      	blt.n	8007962 <quorem+0xf2>
 8007918:	3601      	adds	r6, #1
 800791a:	4628      	mov	r0, r5
 800791c:	f04f 0c00 	mov.w	ip, #0
 8007920:	f858 2b04 	ldr.w	r2, [r8], #4
 8007924:	f8d0 e000 	ldr.w	lr, [r0]
 8007928:	b293      	uxth	r3, r2
 800792a:	ebac 0303 	sub.w	r3, ip, r3
 800792e:	0c12      	lsrs	r2, r2, #16
 8007930:	fa13 f38e 	uxtah	r3, r3, lr
 8007934:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007938:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800793c:	b29b      	uxth	r3, r3
 800793e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007942:	45c1      	cmp	r9, r8
 8007944:	f840 3b04 	str.w	r3, [r0], #4
 8007948:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800794c:	d2e8      	bcs.n	8007920 <quorem+0xb0>
 800794e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007952:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007956:	b922      	cbnz	r2, 8007962 <quorem+0xf2>
 8007958:	3b04      	subs	r3, #4
 800795a:	429d      	cmp	r5, r3
 800795c:	461a      	mov	r2, r3
 800795e:	d30a      	bcc.n	8007976 <quorem+0x106>
 8007960:	613c      	str	r4, [r7, #16]
 8007962:	4630      	mov	r0, r6
 8007964:	b003      	add	sp, #12
 8007966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800796a:	6812      	ldr	r2, [r2, #0]
 800796c:	3b04      	subs	r3, #4
 800796e:	2a00      	cmp	r2, #0
 8007970:	d1cc      	bne.n	800790c <quorem+0x9c>
 8007972:	3c01      	subs	r4, #1
 8007974:	e7c7      	b.n	8007906 <quorem+0x96>
 8007976:	6812      	ldr	r2, [r2, #0]
 8007978:	3b04      	subs	r3, #4
 800797a:	2a00      	cmp	r2, #0
 800797c:	d1f0      	bne.n	8007960 <quorem+0xf0>
 800797e:	3c01      	subs	r4, #1
 8007980:	e7eb      	b.n	800795a <quorem+0xea>
 8007982:	2000      	movs	r0, #0
 8007984:	e7ee      	b.n	8007964 <quorem+0xf4>
	...

08007988 <_dtoa_r>:
 8007988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800798c:	ed2d 8b02 	vpush	{d8}
 8007990:	ec57 6b10 	vmov	r6, r7, d0
 8007994:	b095      	sub	sp, #84	; 0x54
 8007996:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007998:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800799c:	9105      	str	r1, [sp, #20]
 800799e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80079a2:	4604      	mov	r4, r0
 80079a4:	9209      	str	r2, [sp, #36]	; 0x24
 80079a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80079a8:	b975      	cbnz	r5, 80079c8 <_dtoa_r+0x40>
 80079aa:	2010      	movs	r0, #16
 80079ac:	f000 fddc 	bl	8008568 <malloc>
 80079b0:	4602      	mov	r2, r0
 80079b2:	6260      	str	r0, [r4, #36]	; 0x24
 80079b4:	b920      	cbnz	r0, 80079c0 <_dtoa_r+0x38>
 80079b6:	4bb2      	ldr	r3, [pc, #712]	; (8007c80 <_dtoa_r+0x2f8>)
 80079b8:	21ea      	movs	r1, #234	; 0xea
 80079ba:	48b2      	ldr	r0, [pc, #712]	; (8007c84 <_dtoa_r+0x2fc>)
 80079bc:	f001 fb8e 	bl	80090dc <__assert_func>
 80079c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80079c4:	6005      	str	r5, [r0, #0]
 80079c6:	60c5      	str	r5, [r0, #12]
 80079c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079ca:	6819      	ldr	r1, [r3, #0]
 80079cc:	b151      	cbz	r1, 80079e4 <_dtoa_r+0x5c>
 80079ce:	685a      	ldr	r2, [r3, #4]
 80079d0:	604a      	str	r2, [r1, #4]
 80079d2:	2301      	movs	r3, #1
 80079d4:	4093      	lsls	r3, r2
 80079d6:	608b      	str	r3, [r1, #8]
 80079d8:	4620      	mov	r0, r4
 80079da:	f000 fe1b 	bl	8008614 <_Bfree>
 80079de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079e0:	2200      	movs	r2, #0
 80079e2:	601a      	str	r2, [r3, #0]
 80079e4:	1e3b      	subs	r3, r7, #0
 80079e6:	bfb9      	ittee	lt
 80079e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80079ec:	9303      	strlt	r3, [sp, #12]
 80079ee:	2300      	movge	r3, #0
 80079f0:	f8c8 3000 	strge.w	r3, [r8]
 80079f4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80079f8:	4ba3      	ldr	r3, [pc, #652]	; (8007c88 <_dtoa_r+0x300>)
 80079fa:	bfbc      	itt	lt
 80079fc:	2201      	movlt	r2, #1
 80079fe:	f8c8 2000 	strlt.w	r2, [r8]
 8007a02:	ea33 0309 	bics.w	r3, r3, r9
 8007a06:	d11b      	bne.n	8007a40 <_dtoa_r+0xb8>
 8007a08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007a0a:	f242 730f 	movw	r3, #9999	; 0x270f
 8007a0e:	6013      	str	r3, [r2, #0]
 8007a10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a14:	4333      	orrs	r3, r6
 8007a16:	f000 857a 	beq.w	800850e <_dtoa_r+0xb86>
 8007a1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a1c:	b963      	cbnz	r3, 8007a38 <_dtoa_r+0xb0>
 8007a1e:	4b9b      	ldr	r3, [pc, #620]	; (8007c8c <_dtoa_r+0x304>)
 8007a20:	e024      	b.n	8007a6c <_dtoa_r+0xe4>
 8007a22:	4b9b      	ldr	r3, [pc, #620]	; (8007c90 <_dtoa_r+0x308>)
 8007a24:	9300      	str	r3, [sp, #0]
 8007a26:	3308      	adds	r3, #8
 8007a28:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007a2a:	6013      	str	r3, [r2, #0]
 8007a2c:	9800      	ldr	r0, [sp, #0]
 8007a2e:	b015      	add	sp, #84	; 0x54
 8007a30:	ecbd 8b02 	vpop	{d8}
 8007a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a38:	4b94      	ldr	r3, [pc, #592]	; (8007c8c <_dtoa_r+0x304>)
 8007a3a:	9300      	str	r3, [sp, #0]
 8007a3c:	3303      	adds	r3, #3
 8007a3e:	e7f3      	b.n	8007a28 <_dtoa_r+0xa0>
 8007a40:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007a44:	2200      	movs	r2, #0
 8007a46:	ec51 0b17 	vmov	r0, r1, d7
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007a50:	f7f9 f842 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a54:	4680      	mov	r8, r0
 8007a56:	b158      	cbz	r0, 8007a70 <_dtoa_r+0xe8>
 8007a58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	6013      	str	r3, [r2, #0]
 8007a5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f000 8551 	beq.w	8008508 <_dtoa_r+0xb80>
 8007a66:	488b      	ldr	r0, [pc, #556]	; (8007c94 <_dtoa_r+0x30c>)
 8007a68:	6018      	str	r0, [r3, #0]
 8007a6a:	1e43      	subs	r3, r0, #1
 8007a6c:	9300      	str	r3, [sp, #0]
 8007a6e:	e7dd      	b.n	8007a2c <_dtoa_r+0xa4>
 8007a70:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007a74:	aa12      	add	r2, sp, #72	; 0x48
 8007a76:	a913      	add	r1, sp, #76	; 0x4c
 8007a78:	4620      	mov	r0, r4
 8007a7a:	f001 f8ad 	bl	8008bd8 <__d2b>
 8007a7e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007a82:	4683      	mov	fp, r0
 8007a84:	2d00      	cmp	r5, #0
 8007a86:	d07c      	beq.n	8007b82 <_dtoa_r+0x1fa>
 8007a88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a8a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007a8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a92:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007a96:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007a9a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007a9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007aa2:	4b7d      	ldr	r3, [pc, #500]	; (8007c98 <_dtoa_r+0x310>)
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	4630      	mov	r0, r6
 8007aa8:	4639      	mov	r1, r7
 8007aaa:	f7f8 fbf5 	bl	8000298 <__aeabi_dsub>
 8007aae:	a36e      	add	r3, pc, #440	; (adr r3, 8007c68 <_dtoa_r+0x2e0>)
 8007ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab4:	f7f8 fda8 	bl	8000608 <__aeabi_dmul>
 8007ab8:	a36d      	add	r3, pc, #436	; (adr r3, 8007c70 <_dtoa_r+0x2e8>)
 8007aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007abe:	f7f8 fbed 	bl	800029c <__adddf3>
 8007ac2:	4606      	mov	r6, r0
 8007ac4:	4628      	mov	r0, r5
 8007ac6:	460f      	mov	r7, r1
 8007ac8:	f7f8 fd34 	bl	8000534 <__aeabi_i2d>
 8007acc:	a36a      	add	r3, pc, #424	; (adr r3, 8007c78 <_dtoa_r+0x2f0>)
 8007ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad2:	f7f8 fd99 	bl	8000608 <__aeabi_dmul>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	460b      	mov	r3, r1
 8007ada:	4630      	mov	r0, r6
 8007adc:	4639      	mov	r1, r7
 8007ade:	f7f8 fbdd 	bl	800029c <__adddf3>
 8007ae2:	4606      	mov	r6, r0
 8007ae4:	460f      	mov	r7, r1
 8007ae6:	f7f9 f83f 	bl	8000b68 <__aeabi_d2iz>
 8007aea:	2200      	movs	r2, #0
 8007aec:	4682      	mov	sl, r0
 8007aee:	2300      	movs	r3, #0
 8007af0:	4630      	mov	r0, r6
 8007af2:	4639      	mov	r1, r7
 8007af4:	f7f8 fffa 	bl	8000aec <__aeabi_dcmplt>
 8007af8:	b148      	cbz	r0, 8007b0e <_dtoa_r+0x186>
 8007afa:	4650      	mov	r0, sl
 8007afc:	f7f8 fd1a 	bl	8000534 <__aeabi_i2d>
 8007b00:	4632      	mov	r2, r6
 8007b02:	463b      	mov	r3, r7
 8007b04:	f7f8 ffe8 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b08:	b908      	cbnz	r0, 8007b0e <_dtoa_r+0x186>
 8007b0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b0e:	f1ba 0f16 	cmp.w	sl, #22
 8007b12:	d854      	bhi.n	8007bbe <_dtoa_r+0x236>
 8007b14:	4b61      	ldr	r3, [pc, #388]	; (8007c9c <_dtoa_r+0x314>)
 8007b16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007b22:	f7f8 ffe3 	bl	8000aec <__aeabi_dcmplt>
 8007b26:	2800      	cmp	r0, #0
 8007b28:	d04b      	beq.n	8007bc2 <_dtoa_r+0x23a>
 8007b2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b2e:	2300      	movs	r3, #0
 8007b30:	930e      	str	r3, [sp, #56]	; 0x38
 8007b32:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007b34:	1b5d      	subs	r5, r3, r5
 8007b36:	1e6b      	subs	r3, r5, #1
 8007b38:	9304      	str	r3, [sp, #16]
 8007b3a:	bf43      	ittte	mi
 8007b3c:	2300      	movmi	r3, #0
 8007b3e:	f1c5 0801 	rsbmi	r8, r5, #1
 8007b42:	9304      	strmi	r3, [sp, #16]
 8007b44:	f04f 0800 	movpl.w	r8, #0
 8007b48:	f1ba 0f00 	cmp.w	sl, #0
 8007b4c:	db3b      	blt.n	8007bc6 <_dtoa_r+0x23e>
 8007b4e:	9b04      	ldr	r3, [sp, #16]
 8007b50:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007b54:	4453      	add	r3, sl
 8007b56:	9304      	str	r3, [sp, #16]
 8007b58:	2300      	movs	r3, #0
 8007b5a:	9306      	str	r3, [sp, #24]
 8007b5c:	9b05      	ldr	r3, [sp, #20]
 8007b5e:	2b09      	cmp	r3, #9
 8007b60:	d869      	bhi.n	8007c36 <_dtoa_r+0x2ae>
 8007b62:	2b05      	cmp	r3, #5
 8007b64:	bfc4      	itt	gt
 8007b66:	3b04      	subgt	r3, #4
 8007b68:	9305      	strgt	r3, [sp, #20]
 8007b6a:	9b05      	ldr	r3, [sp, #20]
 8007b6c:	f1a3 0302 	sub.w	r3, r3, #2
 8007b70:	bfcc      	ite	gt
 8007b72:	2500      	movgt	r5, #0
 8007b74:	2501      	movle	r5, #1
 8007b76:	2b03      	cmp	r3, #3
 8007b78:	d869      	bhi.n	8007c4e <_dtoa_r+0x2c6>
 8007b7a:	e8df f003 	tbb	[pc, r3]
 8007b7e:	4e2c      	.short	0x4e2c
 8007b80:	5a4c      	.short	0x5a4c
 8007b82:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007b86:	441d      	add	r5, r3
 8007b88:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007b8c:	2b20      	cmp	r3, #32
 8007b8e:	bfc1      	itttt	gt
 8007b90:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007b94:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007b98:	fa09 f303 	lslgt.w	r3, r9, r3
 8007b9c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007ba0:	bfda      	itte	le
 8007ba2:	f1c3 0320 	rsble	r3, r3, #32
 8007ba6:	fa06 f003 	lslle.w	r0, r6, r3
 8007baa:	4318      	orrgt	r0, r3
 8007bac:	f7f8 fcb2 	bl	8000514 <__aeabi_ui2d>
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	4606      	mov	r6, r0
 8007bb4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007bb8:	3d01      	subs	r5, #1
 8007bba:	9310      	str	r3, [sp, #64]	; 0x40
 8007bbc:	e771      	b.n	8007aa2 <_dtoa_r+0x11a>
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e7b6      	b.n	8007b30 <_dtoa_r+0x1a8>
 8007bc2:	900e      	str	r0, [sp, #56]	; 0x38
 8007bc4:	e7b5      	b.n	8007b32 <_dtoa_r+0x1aa>
 8007bc6:	f1ca 0300 	rsb	r3, sl, #0
 8007bca:	9306      	str	r3, [sp, #24]
 8007bcc:	2300      	movs	r3, #0
 8007bce:	eba8 080a 	sub.w	r8, r8, sl
 8007bd2:	930d      	str	r3, [sp, #52]	; 0x34
 8007bd4:	e7c2      	b.n	8007b5c <_dtoa_r+0x1d4>
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	9308      	str	r3, [sp, #32]
 8007bda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	dc39      	bgt.n	8007c54 <_dtoa_r+0x2cc>
 8007be0:	f04f 0901 	mov.w	r9, #1
 8007be4:	f8cd 9004 	str.w	r9, [sp, #4]
 8007be8:	464b      	mov	r3, r9
 8007bea:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007bee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	6042      	str	r2, [r0, #4]
 8007bf4:	2204      	movs	r2, #4
 8007bf6:	f102 0614 	add.w	r6, r2, #20
 8007bfa:	429e      	cmp	r6, r3
 8007bfc:	6841      	ldr	r1, [r0, #4]
 8007bfe:	d92f      	bls.n	8007c60 <_dtoa_r+0x2d8>
 8007c00:	4620      	mov	r0, r4
 8007c02:	f000 fcc7 	bl	8008594 <_Balloc>
 8007c06:	9000      	str	r0, [sp, #0]
 8007c08:	2800      	cmp	r0, #0
 8007c0a:	d14b      	bne.n	8007ca4 <_dtoa_r+0x31c>
 8007c0c:	4b24      	ldr	r3, [pc, #144]	; (8007ca0 <_dtoa_r+0x318>)
 8007c0e:	4602      	mov	r2, r0
 8007c10:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007c14:	e6d1      	b.n	80079ba <_dtoa_r+0x32>
 8007c16:	2301      	movs	r3, #1
 8007c18:	e7de      	b.n	8007bd8 <_dtoa_r+0x250>
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	9308      	str	r3, [sp, #32]
 8007c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c20:	eb0a 0903 	add.w	r9, sl, r3
 8007c24:	f109 0301 	add.w	r3, r9, #1
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	9301      	str	r3, [sp, #4]
 8007c2c:	bfb8      	it	lt
 8007c2e:	2301      	movlt	r3, #1
 8007c30:	e7dd      	b.n	8007bee <_dtoa_r+0x266>
 8007c32:	2301      	movs	r3, #1
 8007c34:	e7f2      	b.n	8007c1c <_dtoa_r+0x294>
 8007c36:	2501      	movs	r5, #1
 8007c38:	2300      	movs	r3, #0
 8007c3a:	9305      	str	r3, [sp, #20]
 8007c3c:	9508      	str	r5, [sp, #32]
 8007c3e:	f04f 39ff 	mov.w	r9, #4294967295
 8007c42:	2200      	movs	r2, #0
 8007c44:	f8cd 9004 	str.w	r9, [sp, #4]
 8007c48:	2312      	movs	r3, #18
 8007c4a:	9209      	str	r2, [sp, #36]	; 0x24
 8007c4c:	e7cf      	b.n	8007bee <_dtoa_r+0x266>
 8007c4e:	2301      	movs	r3, #1
 8007c50:	9308      	str	r3, [sp, #32]
 8007c52:	e7f4      	b.n	8007c3e <_dtoa_r+0x2b6>
 8007c54:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007c58:	f8cd 9004 	str.w	r9, [sp, #4]
 8007c5c:	464b      	mov	r3, r9
 8007c5e:	e7c6      	b.n	8007bee <_dtoa_r+0x266>
 8007c60:	3101      	adds	r1, #1
 8007c62:	6041      	str	r1, [r0, #4]
 8007c64:	0052      	lsls	r2, r2, #1
 8007c66:	e7c6      	b.n	8007bf6 <_dtoa_r+0x26e>
 8007c68:	636f4361 	.word	0x636f4361
 8007c6c:	3fd287a7 	.word	0x3fd287a7
 8007c70:	8b60c8b3 	.word	0x8b60c8b3
 8007c74:	3fc68a28 	.word	0x3fc68a28
 8007c78:	509f79fb 	.word	0x509f79fb
 8007c7c:	3fd34413 	.word	0x3fd34413
 8007c80:	0800a22d 	.word	0x0800a22d
 8007c84:	0800a244 	.word	0x0800a244
 8007c88:	7ff00000 	.word	0x7ff00000
 8007c8c:	0800a229 	.word	0x0800a229
 8007c90:	0800a220 	.word	0x0800a220
 8007c94:	0800a1fd 	.word	0x0800a1fd
 8007c98:	3ff80000 	.word	0x3ff80000
 8007c9c:	0800a340 	.word	0x0800a340
 8007ca0:	0800a2a3 	.word	0x0800a2a3
 8007ca4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ca6:	9a00      	ldr	r2, [sp, #0]
 8007ca8:	601a      	str	r2, [r3, #0]
 8007caa:	9b01      	ldr	r3, [sp, #4]
 8007cac:	2b0e      	cmp	r3, #14
 8007cae:	f200 80ad 	bhi.w	8007e0c <_dtoa_r+0x484>
 8007cb2:	2d00      	cmp	r5, #0
 8007cb4:	f000 80aa 	beq.w	8007e0c <_dtoa_r+0x484>
 8007cb8:	f1ba 0f00 	cmp.w	sl, #0
 8007cbc:	dd36      	ble.n	8007d2c <_dtoa_r+0x3a4>
 8007cbe:	4ac3      	ldr	r2, [pc, #780]	; (8007fcc <_dtoa_r+0x644>)
 8007cc0:	f00a 030f 	and.w	r3, sl, #15
 8007cc4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007cc8:	ed93 7b00 	vldr	d7, [r3]
 8007ccc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007cd0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007cd4:	eeb0 8a47 	vmov.f32	s16, s14
 8007cd8:	eef0 8a67 	vmov.f32	s17, s15
 8007cdc:	d016      	beq.n	8007d0c <_dtoa_r+0x384>
 8007cde:	4bbc      	ldr	r3, [pc, #752]	; (8007fd0 <_dtoa_r+0x648>)
 8007ce0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007ce4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ce8:	f7f8 fdb8 	bl	800085c <__aeabi_ddiv>
 8007cec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007cf0:	f007 070f 	and.w	r7, r7, #15
 8007cf4:	2503      	movs	r5, #3
 8007cf6:	4eb6      	ldr	r6, [pc, #728]	; (8007fd0 <_dtoa_r+0x648>)
 8007cf8:	b957      	cbnz	r7, 8007d10 <_dtoa_r+0x388>
 8007cfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cfe:	ec53 2b18 	vmov	r2, r3, d8
 8007d02:	f7f8 fdab 	bl	800085c <__aeabi_ddiv>
 8007d06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d0a:	e029      	b.n	8007d60 <_dtoa_r+0x3d8>
 8007d0c:	2502      	movs	r5, #2
 8007d0e:	e7f2      	b.n	8007cf6 <_dtoa_r+0x36e>
 8007d10:	07f9      	lsls	r1, r7, #31
 8007d12:	d508      	bpl.n	8007d26 <_dtoa_r+0x39e>
 8007d14:	ec51 0b18 	vmov	r0, r1, d8
 8007d18:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007d1c:	f7f8 fc74 	bl	8000608 <__aeabi_dmul>
 8007d20:	ec41 0b18 	vmov	d8, r0, r1
 8007d24:	3501      	adds	r5, #1
 8007d26:	107f      	asrs	r7, r7, #1
 8007d28:	3608      	adds	r6, #8
 8007d2a:	e7e5      	b.n	8007cf8 <_dtoa_r+0x370>
 8007d2c:	f000 80a6 	beq.w	8007e7c <_dtoa_r+0x4f4>
 8007d30:	f1ca 0600 	rsb	r6, sl, #0
 8007d34:	4ba5      	ldr	r3, [pc, #660]	; (8007fcc <_dtoa_r+0x644>)
 8007d36:	4fa6      	ldr	r7, [pc, #664]	; (8007fd0 <_dtoa_r+0x648>)
 8007d38:	f006 020f 	and.w	r2, r6, #15
 8007d3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d44:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007d48:	f7f8 fc5e 	bl	8000608 <__aeabi_dmul>
 8007d4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d50:	1136      	asrs	r6, r6, #4
 8007d52:	2300      	movs	r3, #0
 8007d54:	2502      	movs	r5, #2
 8007d56:	2e00      	cmp	r6, #0
 8007d58:	f040 8085 	bne.w	8007e66 <_dtoa_r+0x4de>
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d1d2      	bne.n	8007d06 <_dtoa_r+0x37e>
 8007d60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	f000 808c 	beq.w	8007e80 <_dtoa_r+0x4f8>
 8007d68:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007d6c:	4b99      	ldr	r3, [pc, #612]	; (8007fd4 <_dtoa_r+0x64c>)
 8007d6e:	2200      	movs	r2, #0
 8007d70:	4630      	mov	r0, r6
 8007d72:	4639      	mov	r1, r7
 8007d74:	f7f8 feba 	bl	8000aec <__aeabi_dcmplt>
 8007d78:	2800      	cmp	r0, #0
 8007d7a:	f000 8081 	beq.w	8007e80 <_dtoa_r+0x4f8>
 8007d7e:	9b01      	ldr	r3, [sp, #4]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d07d      	beq.n	8007e80 <_dtoa_r+0x4f8>
 8007d84:	f1b9 0f00 	cmp.w	r9, #0
 8007d88:	dd3c      	ble.n	8007e04 <_dtoa_r+0x47c>
 8007d8a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007d8e:	9307      	str	r3, [sp, #28]
 8007d90:	2200      	movs	r2, #0
 8007d92:	4b91      	ldr	r3, [pc, #580]	; (8007fd8 <_dtoa_r+0x650>)
 8007d94:	4630      	mov	r0, r6
 8007d96:	4639      	mov	r1, r7
 8007d98:	f7f8 fc36 	bl	8000608 <__aeabi_dmul>
 8007d9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007da0:	3501      	adds	r5, #1
 8007da2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007da6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007daa:	4628      	mov	r0, r5
 8007dac:	f7f8 fbc2 	bl	8000534 <__aeabi_i2d>
 8007db0:	4632      	mov	r2, r6
 8007db2:	463b      	mov	r3, r7
 8007db4:	f7f8 fc28 	bl	8000608 <__aeabi_dmul>
 8007db8:	4b88      	ldr	r3, [pc, #544]	; (8007fdc <_dtoa_r+0x654>)
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f7f8 fa6e 	bl	800029c <__adddf3>
 8007dc0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007dc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dc8:	9303      	str	r3, [sp, #12]
 8007dca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d15c      	bne.n	8007e8a <_dtoa_r+0x502>
 8007dd0:	4b83      	ldr	r3, [pc, #524]	; (8007fe0 <_dtoa_r+0x658>)
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	4630      	mov	r0, r6
 8007dd6:	4639      	mov	r1, r7
 8007dd8:	f7f8 fa5e 	bl	8000298 <__aeabi_dsub>
 8007ddc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007de0:	4606      	mov	r6, r0
 8007de2:	460f      	mov	r7, r1
 8007de4:	f7f8 fea0 	bl	8000b28 <__aeabi_dcmpgt>
 8007de8:	2800      	cmp	r0, #0
 8007dea:	f040 8296 	bne.w	800831a <_dtoa_r+0x992>
 8007dee:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007df2:	4630      	mov	r0, r6
 8007df4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007df8:	4639      	mov	r1, r7
 8007dfa:	f7f8 fe77 	bl	8000aec <__aeabi_dcmplt>
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	f040 8288 	bne.w	8008314 <_dtoa_r+0x98c>
 8007e04:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007e08:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f2c0 8158 	blt.w	80080c4 <_dtoa_r+0x73c>
 8007e14:	f1ba 0f0e 	cmp.w	sl, #14
 8007e18:	f300 8154 	bgt.w	80080c4 <_dtoa_r+0x73c>
 8007e1c:	4b6b      	ldr	r3, [pc, #428]	; (8007fcc <_dtoa_r+0x644>)
 8007e1e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007e22:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f280 80e3 	bge.w	8007ff4 <_dtoa_r+0x66c>
 8007e2e:	9b01      	ldr	r3, [sp, #4]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	f300 80df 	bgt.w	8007ff4 <_dtoa_r+0x66c>
 8007e36:	f040 826d 	bne.w	8008314 <_dtoa_r+0x98c>
 8007e3a:	4b69      	ldr	r3, [pc, #420]	; (8007fe0 <_dtoa_r+0x658>)
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	4640      	mov	r0, r8
 8007e40:	4649      	mov	r1, r9
 8007e42:	f7f8 fbe1 	bl	8000608 <__aeabi_dmul>
 8007e46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e4a:	f7f8 fe63 	bl	8000b14 <__aeabi_dcmpge>
 8007e4e:	9e01      	ldr	r6, [sp, #4]
 8007e50:	4637      	mov	r7, r6
 8007e52:	2800      	cmp	r0, #0
 8007e54:	f040 8243 	bne.w	80082de <_dtoa_r+0x956>
 8007e58:	9d00      	ldr	r5, [sp, #0]
 8007e5a:	2331      	movs	r3, #49	; 0x31
 8007e5c:	f805 3b01 	strb.w	r3, [r5], #1
 8007e60:	f10a 0a01 	add.w	sl, sl, #1
 8007e64:	e23f      	b.n	80082e6 <_dtoa_r+0x95e>
 8007e66:	07f2      	lsls	r2, r6, #31
 8007e68:	d505      	bpl.n	8007e76 <_dtoa_r+0x4ee>
 8007e6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e6e:	f7f8 fbcb 	bl	8000608 <__aeabi_dmul>
 8007e72:	3501      	adds	r5, #1
 8007e74:	2301      	movs	r3, #1
 8007e76:	1076      	asrs	r6, r6, #1
 8007e78:	3708      	adds	r7, #8
 8007e7a:	e76c      	b.n	8007d56 <_dtoa_r+0x3ce>
 8007e7c:	2502      	movs	r5, #2
 8007e7e:	e76f      	b.n	8007d60 <_dtoa_r+0x3d8>
 8007e80:	9b01      	ldr	r3, [sp, #4]
 8007e82:	f8cd a01c 	str.w	sl, [sp, #28]
 8007e86:	930c      	str	r3, [sp, #48]	; 0x30
 8007e88:	e78d      	b.n	8007da6 <_dtoa_r+0x41e>
 8007e8a:	9900      	ldr	r1, [sp, #0]
 8007e8c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007e8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e90:	4b4e      	ldr	r3, [pc, #312]	; (8007fcc <_dtoa_r+0x644>)
 8007e92:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007e96:	4401      	add	r1, r0
 8007e98:	9102      	str	r1, [sp, #8]
 8007e9a:	9908      	ldr	r1, [sp, #32]
 8007e9c:	eeb0 8a47 	vmov.f32	s16, s14
 8007ea0:	eef0 8a67 	vmov.f32	s17, s15
 8007ea4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ea8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007eac:	2900      	cmp	r1, #0
 8007eae:	d045      	beq.n	8007f3c <_dtoa_r+0x5b4>
 8007eb0:	494c      	ldr	r1, [pc, #304]	; (8007fe4 <_dtoa_r+0x65c>)
 8007eb2:	2000      	movs	r0, #0
 8007eb4:	f7f8 fcd2 	bl	800085c <__aeabi_ddiv>
 8007eb8:	ec53 2b18 	vmov	r2, r3, d8
 8007ebc:	f7f8 f9ec 	bl	8000298 <__aeabi_dsub>
 8007ec0:	9d00      	ldr	r5, [sp, #0]
 8007ec2:	ec41 0b18 	vmov	d8, r0, r1
 8007ec6:	4639      	mov	r1, r7
 8007ec8:	4630      	mov	r0, r6
 8007eca:	f7f8 fe4d 	bl	8000b68 <__aeabi_d2iz>
 8007ece:	900c      	str	r0, [sp, #48]	; 0x30
 8007ed0:	f7f8 fb30 	bl	8000534 <__aeabi_i2d>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	4630      	mov	r0, r6
 8007eda:	4639      	mov	r1, r7
 8007edc:	f7f8 f9dc 	bl	8000298 <__aeabi_dsub>
 8007ee0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ee2:	3330      	adds	r3, #48	; 0x30
 8007ee4:	f805 3b01 	strb.w	r3, [r5], #1
 8007ee8:	ec53 2b18 	vmov	r2, r3, d8
 8007eec:	4606      	mov	r6, r0
 8007eee:	460f      	mov	r7, r1
 8007ef0:	f7f8 fdfc 	bl	8000aec <__aeabi_dcmplt>
 8007ef4:	2800      	cmp	r0, #0
 8007ef6:	d165      	bne.n	8007fc4 <_dtoa_r+0x63c>
 8007ef8:	4632      	mov	r2, r6
 8007efa:	463b      	mov	r3, r7
 8007efc:	4935      	ldr	r1, [pc, #212]	; (8007fd4 <_dtoa_r+0x64c>)
 8007efe:	2000      	movs	r0, #0
 8007f00:	f7f8 f9ca 	bl	8000298 <__aeabi_dsub>
 8007f04:	ec53 2b18 	vmov	r2, r3, d8
 8007f08:	f7f8 fdf0 	bl	8000aec <__aeabi_dcmplt>
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	f040 80b9 	bne.w	8008084 <_dtoa_r+0x6fc>
 8007f12:	9b02      	ldr	r3, [sp, #8]
 8007f14:	429d      	cmp	r5, r3
 8007f16:	f43f af75 	beq.w	8007e04 <_dtoa_r+0x47c>
 8007f1a:	4b2f      	ldr	r3, [pc, #188]	; (8007fd8 <_dtoa_r+0x650>)
 8007f1c:	ec51 0b18 	vmov	r0, r1, d8
 8007f20:	2200      	movs	r2, #0
 8007f22:	f7f8 fb71 	bl	8000608 <__aeabi_dmul>
 8007f26:	4b2c      	ldr	r3, [pc, #176]	; (8007fd8 <_dtoa_r+0x650>)
 8007f28:	ec41 0b18 	vmov	d8, r0, r1
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	4630      	mov	r0, r6
 8007f30:	4639      	mov	r1, r7
 8007f32:	f7f8 fb69 	bl	8000608 <__aeabi_dmul>
 8007f36:	4606      	mov	r6, r0
 8007f38:	460f      	mov	r7, r1
 8007f3a:	e7c4      	b.n	8007ec6 <_dtoa_r+0x53e>
 8007f3c:	ec51 0b17 	vmov	r0, r1, d7
 8007f40:	f7f8 fb62 	bl	8000608 <__aeabi_dmul>
 8007f44:	9b02      	ldr	r3, [sp, #8]
 8007f46:	9d00      	ldr	r5, [sp, #0]
 8007f48:	930c      	str	r3, [sp, #48]	; 0x30
 8007f4a:	ec41 0b18 	vmov	d8, r0, r1
 8007f4e:	4639      	mov	r1, r7
 8007f50:	4630      	mov	r0, r6
 8007f52:	f7f8 fe09 	bl	8000b68 <__aeabi_d2iz>
 8007f56:	9011      	str	r0, [sp, #68]	; 0x44
 8007f58:	f7f8 faec 	bl	8000534 <__aeabi_i2d>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	460b      	mov	r3, r1
 8007f60:	4630      	mov	r0, r6
 8007f62:	4639      	mov	r1, r7
 8007f64:	f7f8 f998 	bl	8000298 <__aeabi_dsub>
 8007f68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f6a:	3330      	adds	r3, #48	; 0x30
 8007f6c:	f805 3b01 	strb.w	r3, [r5], #1
 8007f70:	9b02      	ldr	r3, [sp, #8]
 8007f72:	429d      	cmp	r5, r3
 8007f74:	4606      	mov	r6, r0
 8007f76:	460f      	mov	r7, r1
 8007f78:	f04f 0200 	mov.w	r2, #0
 8007f7c:	d134      	bne.n	8007fe8 <_dtoa_r+0x660>
 8007f7e:	4b19      	ldr	r3, [pc, #100]	; (8007fe4 <_dtoa_r+0x65c>)
 8007f80:	ec51 0b18 	vmov	r0, r1, d8
 8007f84:	f7f8 f98a 	bl	800029c <__adddf3>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	4630      	mov	r0, r6
 8007f8e:	4639      	mov	r1, r7
 8007f90:	f7f8 fdca 	bl	8000b28 <__aeabi_dcmpgt>
 8007f94:	2800      	cmp	r0, #0
 8007f96:	d175      	bne.n	8008084 <_dtoa_r+0x6fc>
 8007f98:	ec53 2b18 	vmov	r2, r3, d8
 8007f9c:	4911      	ldr	r1, [pc, #68]	; (8007fe4 <_dtoa_r+0x65c>)
 8007f9e:	2000      	movs	r0, #0
 8007fa0:	f7f8 f97a 	bl	8000298 <__aeabi_dsub>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	4630      	mov	r0, r6
 8007faa:	4639      	mov	r1, r7
 8007fac:	f7f8 fd9e 	bl	8000aec <__aeabi_dcmplt>
 8007fb0:	2800      	cmp	r0, #0
 8007fb2:	f43f af27 	beq.w	8007e04 <_dtoa_r+0x47c>
 8007fb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007fb8:	1e6b      	subs	r3, r5, #1
 8007fba:	930c      	str	r3, [sp, #48]	; 0x30
 8007fbc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007fc0:	2b30      	cmp	r3, #48	; 0x30
 8007fc2:	d0f8      	beq.n	8007fb6 <_dtoa_r+0x62e>
 8007fc4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007fc8:	e04a      	b.n	8008060 <_dtoa_r+0x6d8>
 8007fca:	bf00      	nop
 8007fcc:	0800a340 	.word	0x0800a340
 8007fd0:	0800a318 	.word	0x0800a318
 8007fd4:	3ff00000 	.word	0x3ff00000
 8007fd8:	40240000 	.word	0x40240000
 8007fdc:	401c0000 	.word	0x401c0000
 8007fe0:	40140000 	.word	0x40140000
 8007fe4:	3fe00000 	.word	0x3fe00000
 8007fe8:	4baf      	ldr	r3, [pc, #700]	; (80082a8 <_dtoa_r+0x920>)
 8007fea:	f7f8 fb0d 	bl	8000608 <__aeabi_dmul>
 8007fee:	4606      	mov	r6, r0
 8007ff0:	460f      	mov	r7, r1
 8007ff2:	e7ac      	b.n	8007f4e <_dtoa_r+0x5c6>
 8007ff4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007ff8:	9d00      	ldr	r5, [sp, #0]
 8007ffa:	4642      	mov	r2, r8
 8007ffc:	464b      	mov	r3, r9
 8007ffe:	4630      	mov	r0, r6
 8008000:	4639      	mov	r1, r7
 8008002:	f7f8 fc2b 	bl	800085c <__aeabi_ddiv>
 8008006:	f7f8 fdaf 	bl	8000b68 <__aeabi_d2iz>
 800800a:	9002      	str	r0, [sp, #8]
 800800c:	f7f8 fa92 	bl	8000534 <__aeabi_i2d>
 8008010:	4642      	mov	r2, r8
 8008012:	464b      	mov	r3, r9
 8008014:	f7f8 faf8 	bl	8000608 <__aeabi_dmul>
 8008018:	4602      	mov	r2, r0
 800801a:	460b      	mov	r3, r1
 800801c:	4630      	mov	r0, r6
 800801e:	4639      	mov	r1, r7
 8008020:	f7f8 f93a 	bl	8000298 <__aeabi_dsub>
 8008024:	9e02      	ldr	r6, [sp, #8]
 8008026:	9f01      	ldr	r7, [sp, #4]
 8008028:	3630      	adds	r6, #48	; 0x30
 800802a:	f805 6b01 	strb.w	r6, [r5], #1
 800802e:	9e00      	ldr	r6, [sp, #0]
 8008030:	1bae      	subs	r6, r5, r6
 8008032:	42b7      	cmp	r7, r6
 8008034:	4602      	mov	r2, r0
 8008036:	460b      	mov	r3, r1
 8008038:	d137      	bne.n	80080aa <_dtoa_r+0x722>
 800803a:	f7f8 f92f 	bl	800029c <__adddf3>
 800803e:	4642      	mov	r2, r8
 8008040:	464b      	mov	r3, r9
 8008042:	4606      	mov	r6, r0
 8008044:	460f      	mov	r7, r1
 8008046:	f7f8 fd6f 	bl	8000b28 <__aeabi_dcmpgt>
 800804a:	b9c8      	cbnz	r0, 8008080 <_dtoa_r+0x6f8>
 800804c:	4642      	mov	r2, r8
 800804e:	464b      	mov	r3, r9
 8008050:	4630      	mov	r0, r6
 8008052:	4639      	mov	r1, r7
 8008054:	f7f8 fd40 	bl	8000ad8 <__aeabi_dcmpeq>
 8008058:	b110      	cbz	r0, 8008060 <_dtoa_r+0x6d8>
 800805a:	9b02      	ldr	r3, [sp, #8]
 800805c:	07d9      	lsls	r1, r3, #31
 800805e:	d40f      	bmi.n	8008080 <_dtoa_r+0x6f8>
 8008060:	4620      	mov	r0, r4
 8008062:	4659      	mov	r1, fp
 8008064:	f000 fad6 	bl	8008614 <_Bfree>
 8008068:	2300      	movs	r3, #0
 800806a:	702b      	strb	r3, [r5, #0]
 800806c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800806e:	f10a 0001 	add.w	r0, sl, #1
 8008072:	6018      	str	r0, [r3, #0]
 8008074:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008076:	2b00      	cmp	r3, #0
 8008078:	f43f acd8 	beq.w	8007a2c <_dtoa_r+0xa4>
 800807c:	601d      	str	r5, [r3, #0]
 800807e:	e4d5      	b.n	8007a2c <_dtoa_r+0xa4>
 8008080:	f8cd a01c 	str.w	sl, [sp, #28]
 8008084:	462b      	mov	r3, r5
 8008086:	461d      	mov	r5, r3
 8008088:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800808c:	2a39      	cmp	r2, #57	; 0x39
 800808e:	d108      	bne.n	80080a2 <_dtoa_r+0x71a>
 8008090:	9a00      	ldr	r2, [sp, #0]
 8008092:	429a      	cmp	r2, r3
 8008094:	d1f7      	bne.n	8008086 <_dtoa_r+0x6fe>
 8008096:	9a07      	ldr	r2, [sp, #28]
 8008098:	9900      	ldr	r1, [sp, #0]
 800809a:	3201      	adds	r2, #1
 800809c:	9207      	str	r2, [sp, #28]
 800809e:	2230      	movs	r2, #48	; 0x30
 80080a0:	700a      	strb	r2, [r1, #0]
 80080a2:	781a      	ldrb	r2, [r3, #0]
 80080a4:	3201      	adds	r2, #1
 80080a6:	701a      	strb	r2, [r3, #0]
 80080a8:	e78c      	b.n	8007fc4 <_dtoa_r+0x63c>
 80080aa:	4b7f      	ldr	r3, [pc, #508]	; (80082a8 <_dtoa_r+0x920>)
 80080ac:	2200      	movs	r2, #0
 80080ae:	f7f8 faab 	bl	8000608 <__aeabi_dmul>
 80080b2:	2200      	movs	r2, #0
 80080b4:	2300      	movs	r3, #0
 80080b6:	4606      	mov	r6, r0
 80080b8:	460f      	mov	r7, r1
 80080ba:	f7f8 fd0d 	bl	8000ad8 <__aeabi_dcmpeq>
 80080be:	2800      	cmp	r0, #0
 80080c0:	d09b      	beq.n	8007ffa <_dtoa_r+0x672>
 80080c2:	e7cd      	b.n	8008060 <_dtoa_r+0x6d8>
 80080c4:	9a08      	ldr	r2, [sp, #32]
 80080c6:	2a00      	cmp	r2, #0
 80080c8:	f000 80c4 	beq.w	8008254 <_dtoa_r+0x8cc>
 80080cc:	9a05      	ldr	r2, [sp, #20]
 80080ce:	2a01      	cmp	r2, #1
 80080d0:	f300 80a8 	bgt.w	8008224 <_dtoa_r+0x89c>
 80080d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80080d6:	2a00      	cmp	r2, #0
 80080d8:	f000 80a0 	beq.w	800821c <_dtoa_r+0x894>
 80080dc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80080e0:	9e06      	ldr	r6, [sp, #24]
 80080e2:	4645      	mov	r5, r8
 80080e4:	9a04      	ldr	r2, [sp, #16]
 80080e6:	2101      	movs	r1, #1
 80080e8:	441a      	add	r2, r3
 80080ea:	4620      	mov	r0, r4
 80080ec:	4498      	add	r8, r3
 80080ee:	9204      	str	r2, [sp, #16]
 80080f0:	f000 fb4c 	bl	800878c <__i2b>
 80080f4:	4607      	mov	r7, r0
 80080f6:	2d00      	cmp	r5, #0
 80080f8:	dd0b      	ble.n	8008112 <_dtoa_r+0x78a>
 80080fa:	9b04      	ldr	r3, [sp, #16]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	dd08      	ble.n	8008112 <_dtoa_r+0x78a>
 8008100:	42ab      	cmp	r3, r5
 8008102:	9a04      	ldr	r2, [sp, #16]
 8008104:	bfa8      	it	ge
 8008106:	462b      	movge	r3, r5
 8008108:	eba8 0803 	sub.w	r8, r8, r3
 800810c:	1aed      	subs	r5, r5, r3
 800810e:	1ad3      	subs	r3, r2, r3
 8008110:	9304      	str	r3, [sp, #16]
 8008112:	9b06      	ldr	r3, [sp, #24]
 8008114:	b1fb      	cbz	r3, 8008156 <_dtoa_r+0x7ce>
 8008116:	9b08      	ldr	r3, [sp, #32]
 8008118:	2b00      	cmp	r3, #0
 800811a:	f000 809f 	beq.w	800825c <_dtoa_r+0x8d4>
 800811e:	2e00      	cmp	r6, #0
 8008120:	dd11      	ble.n	8008146 <_dtoa_r+0x7be>
 8008122:	4639      	mov	r1, r7
 8008124:	4632      	mov	r2, r6
 8008126:	4620      	mov	r0, r4
 8008128:	f000 fbec 	bl	8008904 <__pow5mult>
 800812c:	465a      	mov	r2, fp
 800812e:	4601      	mov	r1, r0
 8008130:	4607      	mov	r7, r0
 8008132:	4620      	mov	r0, r4
 8008134:	f000 fb40 	bl	80087b8 <__multiply>
 8008138:	4659      	mov	r1, fp
 800813a:	9007      	str	r0, [sp, #28]
 800813c:	4620      	mov	r0, r4
 800813e:	f000 fa69 	bl	8008614 <_Bfree>
 8008142:	9b07      	ldr	r3, [sp, #28]
 8008144:	469b      	mov	fp, r3
 8008146:	9b06      	ldr	r3, [sp, #24]
 8008148:	1b9a      	subs	r2, r3, r6
 800814a:	d004      	beq.n	8008156 <_dtoa_r+0x7ce>
 800814c:	4659      	mov	r1, fp
 800814e:	4620      	mov	r0, r4
 8008150:	f000 fbd8 	bl	8008904 <__pow5mult>
 8008154:	4683      	mov	fp, r0
 8008156:	2101      	movs	r1, #1
 8008158:	4620      	mov	r0, r4
 800815a:	f000 fb17 	bl	800878c <__i2b>
 800815e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008160:	2b00      	cmp	r3, #0
 8008162:	4606      	mov	r6, r0
 8008164:	dd7c      	ble.n	8008260 <_dtoa_r+0x8d8>
 8008166:	461a      	mov	r2, r3
 8008168:	4601      	mov	r1, r0
 800816a:	4620      	mov	r0, r4
 800816c:	f000 fbca 	bl	8008904 <__pow5mult>
 8008170:	9b05      	ldr	r3, [sp, #20]
 8008172:	2b01      	cmp	r3, #1
 8008174:	4606      	mov	r6, r0
 8008176:	dd76      	ble.n	8008266 <_dtoa_r+0x8de>
 8008178:	2300      	movs	r3, #0
 800817a:	9306      	str	r3, [sp, #24]
 800817c:	6933      	ldr	r3, [r6, #16]
 800817e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008182:	6918      	ldr	r0, [r3, #16]
 8008184:	f000 fab2 	bl	80086ec <__hi0bits>
 8008188:	f1c0 0020 	rsb	r0, r0, #32
 800818c:	9b04      	ldr	r3, [sp, #16]
 800818e:	4418      	add	r0, r3
 8008190:	f010 001f 	ands.w	r0, r0, #31
 8008194:	f000 8086 	beq.w	80082a4 <_dtoa_r+0x91c>
 8008198:	f1c0 0320 	rsb	r3, r0, #32
 800819c:	2b04      	cmp	r3, #4
 800819e:	dd7f      	ble.n	80082a0 <_dtoa_r+0x918>
 80081a0:	f1c0 001c 	rsb	r0, r0, #28
 80081a4:	9b04      	ldr	r3, [sp, #16]
 80081a6:	4403      	add	r3, r0
 80081a8:	4480      	add	r8, r0
 80081aa:	4405      	add	r5, r0
 80081ac:	9304      	str	r3, [sp, #16]
 80081ae:	f1b8 0f00 	cmp.w	r8, #0
 80081b2:	dd05      	ble.n	80081c0 <_dtoa_r+0x838>
 80081b4:	4659      	mov	r1, fp
 80081b6:	4642      	mov	r2, r8
 80081b8:	4620      	mov	r0, r4
 80081ba:	f000 fbfd 	bl	80089b8 <__lshift>
 80081be:	4683      	mov	fp, r0
 80081c0:	9b04      	ldr	r3, [sp, #16]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	dd05      	ble.n	80081d2 <_dtoa_r+0x84a>
 80081c6:	4631      	mov	r1, r6
 80081c8:	461a      	mov	r2, r3
 80081ca:	4620      	mov	r0, r4
 80081cc:	f000 fbf4 	bl	80089b8 <__lshift>
 80081d0:	4606      	mov	r6, r0
 80081d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d069      	beq.n	80082ac <_dtoa_r+0x924>
 80081d8:	4631      	mov	r1, r6
 80081da:	4658      	mov	r0, fp
 80081dc:	f000 fc58 	bl	8008a90 <__mcmp>
 80081e0:	2800      	cmp	r0, #0
 80081e2:	da63      	bge.n	80082ac <_dtoa_r+0x924>
 80081e4:	2300      	movs	r3, #0
 80081e6:	4659      	mov	r1, fp
 80081e8:	220a      	movs	r2, #10
 80081ea:	4620      	mov	r0, r4
 80081ec:	f000 fa34 	bl	8008658 <__multadd>
 80081f0:	9b08      	ldr	r3, [sp, #32]
 80081f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80081f6:	4683      	mov	fp, r0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	f000 818f 	beq.w	800851c <_dtoa_r+0xb94>
 80081fe:	4639      	mov	r1, r7
 8008200:	2300      	movs	r3, #0
 8008202:	220a      	movs	r2, #10
 8008204:	4620      	mov	r0, r4
 8008206:	f000 fa27 	bl	8008658 <__multadd>
 800820a:	f1b9 0f00 	cmp.w	r9, #0
 800820e:	4607      	mov	r7, r0
 8008210:	f300 808e 	bgt.w	8008330 <_dtoa_r+0x9a8>
 8008214:	9b05      	ldr	r3, [sp, #20]
 8008216:	2b02      	cmp	r3, #2
 8008218:	dc50      	bgt.n	80082bc <_dtoa_r+0x934>
 800821a:	e089      	b.n	8008330 <_dtoa_r+0x9a8>
 800821c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800821e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008222:	e75d      	b.n	80080e0 <_dtoa_r+0x758>
 8008224:	9b01      	ldr	r3, [sp, #4]
 8008226:	1e5e      	subs	r6, r3, #1
 8008228:	9b06      	ldr	r3, [sp, #24]
 800822a:	42b3      	cmp	r3, r6
 800822c:	bfbf      	itttt	lt
 800822e:	9b06      	ldrlt	r3, [sp, #24]
 8008230:	9606      	strlt	r6, [sp, #24]
 8008232:	1af2      	sublt	r2, r6, r3
 8008234:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008236:	bfb6      	itet	lt
 8008238:	189b      	addlt	r3, r3, r2
 800823a:	1b9e      	subge	r6, r3, r6
 800823c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800823e:	9b01      	ldr	r3, [sp, #4]
 8008240:	bfb8      	it	lt
 8008242:	2600      	movlt	r6, #0
 8008244:	2b00      	cmp	r3, #0
 8008246:	bfb5      	itete	lt
 8008248:	eba8 0503 	sublt.w	r5, r8, r3
 800824c:	9b01      	ldrge	r3, [sp, #4]
 800824e:	2300      	movlt	r3, #0
 8008250:	4645      	movge	r5, r8
 8008252:	e747      	b.n	80080e4 <_dtoa_r+0x75c>
 8008254:	9e06      	ldr	r6, [sp, #24]
 8008256:	9f08      	ldr	r7, [sp, #32]
 8008258:	4645      	mov	r5, r8
 800825a:	e74c      	b.n	80080f6 <_dtoa_r+0x76e>
 800825c:	9a06      	ldr	r2, [sp, #24]
 800825e:	e775      	b.n	800814c <_dtoa_r+0x7c4>
 8008260:	9b05      	ldr	r3, [sp, #20]
 8008262:	2b01      	cmp	r3, #1
 8008264:	dc18      	bgt.n	8008298 <_dtoa_r+0x910>
 8008266:	9b02      	ldr	r3, [sp, #8]
 8008268:	b9b3      	cbnz	r3, 8008298 <_dtoa_r+0x910>
 800826a:	9b03      	ldr	r3, [sp, #12]
 800826c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008270:	b9a3      	cbnz	r3, 800829c <_dtoa_r+0x914>
 8008272:	9b03      	ldr	r3, [sp, #12]
 8008274:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008278:	0d1b      	lsrs	r3, r3, #20
 800827a:	051b      	lsls	r3, r3, #20
 800827c:	b12b      	cbz	r3, 800828a <_dtoa_r+0x902>
 800827e:	9b04      	ldr	r3, [sp, #16]
 8008280:	3301      	adds	r3, #1
 8008282:	9304      	str	r3, [sp, #16]
 8008284:	f108 0801 	add.w	r8, r8, #1
 8008288:	2301      	movs	r3, #1
 800828a:	9306      	str	r3, [sp, #24]
 800828c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800828e:	2b00      	cmp	r3, #0
 8008290:	f47f af74 	bne.w	800817c <_dtoa_r+0x7f4>
 8008294:	2001      	movs	r0, #1
 8008296:	e779      	b.n	800818c <_dtoa_r+0x804>
 8008298:	2300      	movs	r3, #0
 800829a:	e7f6      	b.n	800828a <_dtoa_r+0x902>
 800829c:	9b02      	ldr	r3, [sp, #8]
 800829e:	e7f4      	b.n	800828a <_dtoa_r+0x902>
 80082a0:	d085      	beq.n	80081ae <_dtoa_r+0x826>
 80082a2:	4618      	mov	r0, r3
 80082a4:	301c      	adds	r0, #28
 80082a6:	e77d      	b.n	80081a4 <_dtoa_r+0x81c>
 80082a8:	40240000 	.word	0x40240000
 80082ac:	9b01      	ldr	r3, [sp, #4]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	dc38      	bgt.n	8008324 <_dtoa_r+0x99c>
 80082b2:	9b05      	ldr	r3, [sp, #20]
 80082b4:	2b02      	cmp	r3, #2
 80082b6:	dd35      	ble.n	8008324 <_dtoa_r+0x99c>
 80082b8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80082bc:	f1b9 0f00 	cmp.w	r9, #0
 80082c0:	d10d      	bne.n	80082de <_dtoa_r+0x956>
 80082c2:	4631      	mov	r1, r6
 80082c4:	464b      	mov	r3, r9
 80082c6:	2205      	movs	r2, #5
 80082c8:	4620      	mov	r0, r4
 80082ca:	f000 f9c5 	bl	8008658 <__multadd>
 80082ce:	4601      	mov	r1, r0
 80082d0:	4606      	mov	r6, r0
 80082d2:	4658      	mov	r0, fp
 80082d4:	f000 fbdc 	bl	8008a90 <__mcmp>
 80082d8:	2800      	cmp	r0, #0
 80082da:	f73f adbd 	bgt.w	8007e58 <_dtoa_r+0x4d0>
 80082de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082e0:	9d00      	ldr	r5, [sp, #0]
 80082e2:	ea6f 0a03 	mvn.w	sl, r3
 80082e6:	f04f 0800 	mov.w	r8, #0
 80082ea:	4631      	mov	r1, r6
 80082ec:	4620      	mov	r0, r4
 80082ee:	f000 f991 	bl	8008614 <_Bfree>
 80082f2:	2f00      	cmp	r7, #0
 80082f4:	f43f aeb4 	beq.w	8008060 <_dtoa_r+0x6d8>
 80082f8:	f1b8 0f00 	cmp.w	r8, #0
 80082fc:	d005      	beq.n	800830a <_dtoa_r+0x982>
 80082fe:	45b8      	cmp	r8, r7
 8008300:	d003      	beq.n	800830a <_dtoa_r+0x982>
 8008302:	4641      	mov	r1, r8
 8008304:	4620      	mov	r0, r4
 8008306:	f000 f985 	bl	8008614 <_Bfree>
 800830a:	4639      	mov	r1, r7
 800830c:	4620      	mov	r0, r4
 800830e:	f000 f981 	bl	8008614 <_Bfree>
 8008312:	e6a5      	b.n	8008060 <_dtoa_r+0x6d8>
 8008314:	2600      	movs	r6, #0
 8008316:	4637      	mov	r7, r6
 8008318:	e7e1      	b.n	80082de <_dtoa_r+0x956>
 800831a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800831c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008320:	4637      	mov	r7, r6
 8008322:	e599      	b.n	8007e58 <_dtoa_r+0x4d0>
 8008324:	9b08      	ldr	r3, [sp, #32]
 8008326:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800832a:	2b00      	cmp	r3, #0
 800832c:	f000 80fd 	beq.w	800852a <_dtoa_r+0xba2>
 8008330:	2d00      	cmp	r5, #0
 8008332:	dd05      	ble.n	8008340 <_dtoa_r+0x9b8>
 8008334:	4639      	mov	r1, r7
 8008336:	462a      	mov	r2, r5
 8008338:	4620      	mov	r0, r4
 800833a:	f000 fb3d 	bl	80089b8 <__lshift>
 800833e:	4607      	mov	r7, r0
 8008340:	9b06      	ldr	r3, [sp, #24]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d05c      	beq.n	8008400 <_dtoa_r+0xa78>
 8008346:	6879      	ldr	r1, [r7, #4]
 8008348:	4620      	mov	r0, r4
 800834a:	f000 f923 	bl	8008594 <_Balloc>
 800834e:	4605      	mov	r5, r0
 8008350:	b928      	cbnz	r0, 800835e <_dtoa_r+0x9d6>
 8008352:	4b80      	ldr	r3, [pc, #512]	; (8008554 <_dtoa_r+0xbcc>)
 8008354:	4602      	mov	r2, r0
 8008356:	f240 21ea 	movw	r1, #746	; 0x2ea
 800835a:	f7ff bb2e 	b.w	80079ba <_dtoa_r+0x32>
 800835e:	693a      	ldr	r2, [r7, #16]
 8008360:	3202      	adds	r2, #2
 8008362:	0092      	lsls	r2, r2, #2
 8008364:	f107 010c 	add.w	r1, r7, #12
 8008368:	300c      	adds	r0, #12
 800836a:	f000 f905 	bl	8008578 <memcpy>
 800836e:	2201      	movs	r2, #1
 8008370:	4629      	mov	r1, r5
 8008372:	4620      	mov	r0, r4
 8008374:	f000 fb20 	bl	80089b8 <__lshift>
 8008378:	9b00      	ldr	r3, [sp, #0]
 800837a:	3301      	adds	r3, #1
 800837c:	9301      	str	r3, [sp, #4]
 800837e:	9b00      	ldr	r3, [sp, #0]
 8008380:	444b      	add	r3, r9
 8008382:	9307      	str	r3, [sp, #28]
 8008384:	9b02      	ldr	r3, [sp, #8]
 8008386:	f003 0301 	and.w	r3, r3, #1
 800838a:	46b8      	mov	r8, r7
 800838c:	9306      	str	r3, [sp, #24]
 800838e:	4607      	mov	r7, r0
 8008390:	9b01      	ldr	r3, [sp, #4]
 8008392:	4631      	mov	r1, r6
 8008394:	3b01      	subs	r3, #1
 8008396:	4658      	mov	r0, fp
 8008398:	9302      	str	r3, [sp, #8]
 800839a:	f7ff fa69 	bl	8007870 <quorem>
 800839e:	4603      	mov	r3, r0
 80083a0:	3330      	adds	r3, #48	; 0x30
 80083a2:	9004      	str	r0, [sp, #16]
 80083a4:	4641      	mov	r1, r8
 80083a6:	4658      	mov	r0, fp
 80083a8:	9308      	str	r3, [sp, #32]
 80083aa:	f000 fb71 	bl	8008a90 <__mcmp>
 80083ae:	463a      	mov	r2, r7
 80083b0:	4681      	mov	r9, r0
 80083b2:	4631      	mov	r1, r6
 80083b4:	4620      	mov	r0, r4
 80083b6:	f000 fb87 	bl	8008ac8 <__mdiff>
 80083ba:	68c2      	ldr	r2, [r0, #12]
 80083bc:	9b08      	ldr	r3, [sp, #32]
 80083be:	4605      	mov	r5, r0
 80083c0:	bb02      	cbnz	r2, 8008404 <_dtoa_r+0xa7c>
 80083c2:	4601      	mov	r1, r0
 80083c4:	4658      	mov	r0, fp
 80083c6:	f000 fb63 	bl	8008a90 <__mcmp>
 80083ca:	9b08      	ldr	r3, [sp, #32]
 80083cc:	4602      	mov	r2, r0
 80083ce:	4629      	mov	r1, r5
 80083d0:	4620      	mov	r0, r4
 80083d2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80083d6:	f000 f91d 	bl	8008614 <_Bfree>
 80083da:	9b05      	ldr	r3, [sp, #20]
 80083dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083de:	9d01      	ldr	r5, [sp, #4]
 80083e0:	ea43 0102 	orr.w	r1, r3, r2
 80083e4:	9b06      	ldr	r3, [sp, #24]
 80083e6:	430b      	orrs	r3, r1
 80083e8:	9b08      	ldr	r3, [sp, #32]
 80083ea:	d10d      	bne.n	8008408 <_dtoa_r+0xa80>
 80083ec:	2b39      	cmp	r3, #57	; 0x39
 80083ee:	d029      	beq.n	8008444 <_dtoa_r+0xabc>
 80083f0:	f1b9 0f00 	cmp.w	r9, #0
 80083f4:	dd01      	ble.n	80083fa <_dtoa_r+0xa72>
 80083f6:	9b04      	ldr	r3, [sp, #16]
 80083f8:	3331      	adds	r3, #49	; 0x31
 80083fa:	9a02      	ldr	r2, [sp, #8]
 80083fc:	7013      	strb	r3, [r2, #0]
 80083fe:	e774      	b.n	80082ea <_dtoa_r+0x962>
 8008400:	4638      	mov	r0, r7
 8008402:	e7b9      	b.n	8008378 <_dtoa_r+0x9f0>
 8008404:	2201      	movs	r2, #1
 8008406:	e7e2      	b.n	80083ce <_dtoa_r+0xa46>
 8008408:	f1b9 0f00 	cmp.w	r9, #0
 800840c:	db06      	blt.n	800841c <_dtoa_r+0xa94>
 800840e:	9905      	ldr	r1, [sp, #20]
 8008410:	ea41 0909 	orr.w	r9, r1, r9
 8008414:	9906      	ldr	r1, [sp, #24]
 8008416:	ea59 0101 	orrs.w	r1, r9, r1
 800841a:	d120      	bne.n	800845e <_dtoa_r+0xad6>
 800841c:	2a00      	cmp	r2, #0
 800841e:	ddec      	ble.n	80083fa <_dtoa_r+0xa72>
 8008420:	4659      	mov	r1, fp
 8008422:	2201      	movs	r2, #1
 8008424:	4620      	mov	r0, r4
 8008426:	9301      	str	r3, [sp, #4]
 8008428:	f000 fac6 	bl	80089b8 <__lshift>
 800842c:	4631      	mov	r1, r6
 800842e:	4683      	mov	fp, r0
 8008430:	f000 fb2e 	bl	8008a90 <__mcmp>
 8008434:	2800      	cmp	r0, #0
 8008436:	9b01      	ldr	r3, [sp, #4]
 8008438:	dc02      	bgt.n	8008440 <_dtoa_r+0xab8>
 800843a:	d1de      	bne.n	80083fa <_dtoa_r+0xa72>
 800843c:	07da      	lsls	r2, r3, #31
 800843e:	d5dc      	bpl.n	80083fa <_dtoa_r+0xa72>
 8008440:	2b39      	cmp	r3, #57	; 0x39
 8008442:	d1d8      	bne.n	80083f6 <_dtoa_r+0xa6e>
 8008444:	9a02      	ldr	r2, [sp, #8]
 8008446:	2339      	movs	r3, #57	; 0x39
 8008448:	7013      	strb	r3, [r2, #0]
 800844a:	462b      	mov	r3, r5
 800844c:	461d      	mov	r5, r3
 800844e:	3b01      	subs	r3, #1
 8008450:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008454:	2a39      	cmp	r2, #57	; 0x39
 8008456:	d050      	beq.n	80084fa <_dtoa_r+0xb72>
 8008458:	3201      	adds	r2, #1
 800845a:	701a      	strb	r2, [r3, #0]
 800845c:	e745      	b.n	80082ea <_dtoa_r+0x962>
 800845e:	2a00      	cmp	r2, #0
 8008460:	dd03      	ble.n	800846a <_dtoa_r+0xae2>
 8008462:	2b39      	cmp	r3, #57	; 0x39
 8008464:	d0ee      	beq.n	8008444 <_dtoa_r+0xabc>
 8008466:	3301      	adds	r3, #1
 8008468:	e7c7      	b.n	80083fa <_dtoa_r+0xa72>
 800846a:	9a01      	ldr	r2, [sp, #4]
 800846c:	9907      	ldr	r1, [sp, #28]
 800846e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008472:	428a      	cmp	r2, r1
 8008474:	d02a      	beq.n	80084cc <_dtoa_r+0xb44>
 8008476:	4659      	mov	r1, fp
 8008478:	2300      	movs	r3, #0
 800847a:	220a      	movs	r2, #10
 800847c:	4620      	mov	r0, r4
 800847e:	f000 f8eb 	bl	8008658 <__multadd>
 8008482:	45b8      	cmp	r8, r7
 8008484:	4683      	mov	fp, r0
 8008486:	f04f 0300 	mov.w	r3, #0
 800848a:	f04f 020a 	mov.w	r2, #10
 800848e:	4641      	mov	r1, r8
 8008490:	4620      	mov	r0, r4
 8008492:	d107      	bne.n	80084a4 <_dtoa_r+0xb1c>
 8008494:	f000 f8e0 	bl	8008658 <__multadd>
 8008498:	4680      	mov	r8, r0
 800849a:	4607      	mov	r7, r0
 800849c:	9b01      	ldr	r3, [sp, #4]
 800849e:	3301      	adds	r3, #1
 80084a0:	9301      	str	r3, [sp, #4]
 80084a2:	e775      	b.n	8008390 <_dtoa_r+0xa08>
 80084a4:	f000 f8d8 	bl	8008658 <__multadd>
 80084a8:	4639      	mov	r1, r7
 80084aa:	4680      	mov	r8, r0
 80084ac:	2300      	movs	r3, #0
 80084ae:	220a      	movs	r2, #10
 80084b0:	4620      	mov	r0, r4
 80084b2:	f000 f8d1 	bl	8008658 <__multadd>
 80084b6:	4607      	mov	r7, r0
 80084b8:	e7f0      	b.n	800849c <_dtoa_r+0xb14>
 80084ba:	f1b9 0f00 	cmp.w	r9, #0
 80084be:	9a00      	ldr	r2, [sp, #0]
 80084c0:	bfcc      	ite	gt
 80084c2:	464d      	movgt	r5, r9
 80084c4:	2501      	movle	r5, #1
 80084c6:	4415      	add	r5, r2
 80084c8:	f04f 0800 	mov.w	r8, #0
 80084cc:	4659      	mov	r1, fp
 80084ce:	2201      	movs	r2, #1
 80084d0:	4620      	mov	r0, r4
 80084d2:	9301      	str	r3, [sp, #4]
 80084d4:	f000 fa70 	bl	80089b8 <__lshift>
 80084d8:	4631      	mov	r1, r6
 80084da:	4683      	mov	fp, r0
 80084dc:	f000 fad8 	bl	8008a90 <__mcmp>
 80084e0:	2800      	cmp	r0, #0
 80084e2:	dcb2      	bgt.n	800844a <_dtoa_r+0xac2>
 80084e4:	d102      	bne.n	80084ec <_dtoa_r+0xb64>
 80084e6:	9b01      	ldr	r3, [sp, #4]
 80084e8:	07db      	lsls	r3, r3, #31
 80084ea:	d4ae      	bmi.n	800844a <_dtoa_r+0xac2>
 80084ec:	462b      	mov	r3, r5
 80084ee:	461d      	mov	r5, r3
 80084f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80084f4:	2a30      	cmp	r2, #48	; 0x30
 80084f6:	d0fa      	beq.n	80084ee <_dtoa_r+0xb66>
 80084f8:	e6f7      	b.n	80082ea <_dtoa_r+0x962>
 80084fa:	9a00      	ldr	r2, [sp, #0]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d1a5      	bne.n	800844c <_dtoa_r+0xac4>
 8008500:	f10a 0a01 	add.w	sl, sl, #1
 8008504:	2331      	movs	r3, #49	; 0x31
 8008506:	e779      	b.n	80083fc <_dtoa_r+0xa74>
 8008508:	4b13      	ldr	r3, [pc, #76]	; (8008558 <_dtoa_r+0xbd0>)
 800850a:	f7ff baaf 	b.w	8007a6c <_dtoa_r+0xe4>
 800850e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008510:	2b00      	cmp	r3, #0
 8008512:	f47f aa86 	bne.w	8007a22 <_dtoa_r+0x9a>
 8008516:	4b11      	ldr	r3, [pc, #68]	; (800855c <_dtoa_r+0xbd4>)
 8008518:	f7ff baa8 	b.w	8007a6c <_dtoa_r+0xe4>
 800851c:	f1b9 0f00 	cmp.w	r9, #0
 8008520:	dc03      	bgt.n	800852a <_dtoa_r+0xba2>
 8008522:	9b05      	ldr	r3, [sp, #20]
 8008524:	2b02      	cmp	r3, #2
 8008526:	f73f aec9 	bgt.w	80082bc <_dtoa_r+0x934>
 800852a:	9d00      	ldr	r5, [sp, #0]
 800852c:	4631      	mov	r1, r6
 800852e:	4658      	mov	r0, fp
 8008530:	f7ff f99e 	bl	8007870 <quorem>
 8008534:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008538:	f805 3b01 	strb.w	r3, [r5], #1
 800853c:	9a00      	ldr	r2, [sp, #0]
 800853e:	1aaa      	subs	r2, r5, r2
 8008540:	4591      	cmp	r9, r2
 8008542:	ddba      	ble.n	80084ba <_dtoa_r+0xb32>
 8008544:	4659      	mov	r1, fp
 8008546:	2300      	movs	r3, #0
 8008548:	220a      	movs	r2, #10
 800854a:	4620      	mov	r0, r4
 800854c:	f000 f884 	bl	8008658 <__multadd>
 8008550:	4683      	mov	fp, r0
 8008552:	e7eb      	b.n	800852c <_dtoa_r+0xba4>
 8008554:	0800a2a3 	.word	0x0800a2a3
 8008558:	0800a1fc 	.word	0x0800a1fc
 800855c:	0800a220 	.word	0x0800a220

08008560 <_localeconv_r>:
 8008560:	4800      	ldr	r0, [pc, #0]	; (8008564 <_localeconv_r+0x4>)
 8008562:	4770      	bx	lr
 8008564:	20000160 	.word	0x20000160

08008568 <malloc>:
 8008568:	4b02      	ldr	r3, [pc, #8]	; (8008574 <malloc+0xc>)
 800856a:	4601      	mov	r1, r0
 800856c:	6818      	ldr	r0, [r3, #0]
 800856e:	f000 bbef 	b.w	8008d50 <_malloc_r>
 8008572:	bf00      	nop
 8008574:	2000000c 	.word	0x2000000c

08008578 <memcpy>:
 8008578:	440a      	add	r2, r1
 800857a:	4291      	cmp	r1, r2
 800857c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008580:	d100      	bne.n	8008584 <memcpy+0xc>
 8008582:	4770      	bx	lr
 8008584:	b510      	push	{r4, lr}
 8008586:	f811 4b01 	ldrb.w	r4, [r1], #1
 800858a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800858e:	4291      	cmp	r1, r2
 8008590:	d1f9      	bne.n	8008586 <memcpy+0xe>
 8008592:	bd10      	pop	{r4, pc}

08008594 <_Balloc>:
 8008594:	b570      	push	{r4, r5, r6, lr}
 8008596:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008598:	4604      	mov	r4, r0
 800859a:	460d      	mov	r5, r1
 800859c:	b976      	cbnz	r6, 80085bc <_Balloc+0x28>
 800859e:	2010      	movs	r0, #16
 80085a0:	f7ff ffe2 	bl	8008568 <malloc>
 80085a4:	4602      	mov	r2, r0
 80085a6:	6260      	str	r0, [r4, #36]	; 0x24
 80085a8:	b920      	cbnz	r0, 80085b4 <_Balloc+0x20>
 80085aa:	4b18      	ldr	r3, [pc, #96]	; (800860c <_Balloc+0x78>)
 80085ac:	4818      	ldr	r0, [pc, #96]	; (8008610 <_Balloc+0x7c>)
 80085ae:	2166      	movs	r1, #102	; 0x66
 80085b0:	f000 fd94 	bl	80090dc <__assert_func>
 80085b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085b8:	6006      	str	r6, [r0, #0]
 80085ba:	60c6      	str	r6, [r0, #12]
 80085bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80085be:	68f3      	ldr	r3, [r6, #12]
 80085c0:	b183      	cbz	r3, 80085e4 <_Balloc+0x50>
 80085c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085c4:	68db      	ldr	r3, [r3, #12]
 80085c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80085ca:	b9b8      	cbnz	r0, 80085fc <_Balloc+0x68>
 80085cc:	2101      	movs	r1, #1
 80085ce:	fa01 f605 	lsl.w	r6, r1, r5
 80085d2:	1d72      	adds	r2, r6, #5
 80085d4:	0092      	lsls	r2, r2, #2
 80085d6:	4620      	mov	r0, r4
 80085d8:	f000 fb5a 	bl	8008c90 <_calloc_r>
 80085dc:	b160      	cbz	r0, 80085f8 <_Balloc+0x64>
 80085de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80085e2:	e00e      	b.n	8008602 <_Balloc+0x6e>
 80085e4:	2221      	movs	r2, #33	; 0x21
 80085e6:	2104      	movs	r1, #4
 80085e8:	4620      	mov	r0, r4
 80085ea:	f000 fb51 	bl	8008c90 <_calloc_r>
 80085ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085f0:	60f0      	str	r0, [r6, #12]
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d1e4      	bne.n	80085c2 <_Balloc+0x2e>
 80085f8:	2000      	movs	r0, #0
 80085fa:	bd70      	pop	{r4, r5, r6, pc}
 80085fc:	6802      	ldr	r2, [r0, #0]
 80085fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008602:	2300      	movs	r3, #0
 8008604:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008608:	e7f7      	b.n	80085fa <_Balloc+0x66>
 800860a:	bf00      	nop
 800860c:	0800a22d 	.word	0x0800a22d
 8008610:	0800a2b4 	.word	0x0800a2b4

08008614 <_Bfree>:
 8008614:	b570      	push	{r4, r5, r6, lr}
 8008616:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008618:	4605      	mov	r5, r0
 800861a:	460c      	mov	r4, r1
 800861c:	b976      	cbnz	r6, 800863c <_Bfree+0x28>
 800861e:	2010      	movs	r0, #16
 8008620:	f7ff ffa2 	bl	8008568 <malloc>
 8008624:	4602      	mov	r2, r0
 8008626:	6268      	str	r0, [r5, #36]	; 0x24
 8008628:	b920      	cbnz	r0, 8008634 <_Bfree+0x20>
 800862a:	4b09      	ldr	r3, [pc, #36]	; (8008650 <_Bfree+0x3c>)
 800862c:	4809      	ldr	r0, [pc, #36]	; (8008654 <_Bfree+0x40>)
 800862e:	218a      	movs	r1, #138	; 0x8a
 8008630:	f000 fd54 	bl	80090dc <__assert_func>
 8008634:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008638:	6006      	str	r6, [r0, #0]
 800863a:	60c6      	str	r6, [r0, #12]
 800863c:	b13c      	cbz	r4, 800864e <_Bfree+0x3a>
 800863e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008640:	6862      	ldr	r2, [r4, #4]
 8008642:	68db      	ldr	r3, [r3, #12]
 8008644:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008648:	6021      	str	r1, [r4, #0]
 800864a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800864e:	bd70      	pop	{r4, r5, r6, pc}
 8008650:	0800a22d 	.word	0x0800a22d
 8008654:	0800a2b4 	.word	0x0800a2b4

08008658 <__multadd>:
 8008658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800865c:	690e      	ldr	r6, [r1, #16]
 800865e:	4607      	mov	r7, r0
 8008660:	4698      	mov	r8, r3
 8008662:	460c      	mov	r4, r1
 8008664:	f101 0014 	add.w	r0, r1, #20
 8008668:	2300      	movs	r3, #0
 800866a:	6805      	ldr	r5, [r0, #0]
 800866c:	b2a9      	uxth	r1, r5
 800866e:	fb02 8101 	mla	r1, r2, r1, r8
 8008672:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008676:	0c2d      	lsrs	r5, r5, #16
 8008678:	fb02 c505 	mla	r5, r2, r5, ip
 800867c:	b289      	uxth	r1, r1
 800867e:	3301      	adds	r3, #1
 8008680:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008684:	429e      	cmp	r6, r3
 8008686:	f840 1b04 	str.w	r1, [r0], #4
 800868a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800868e:	dcec      	bgt.n	800866a <__multadd+0x12>
 8008690:	f1b8 0f00 	cmp.w	r8, #0
 8008694:	d022      	beq.n	80086dc <__multadd+0x84>
 8008696:	68a3      	ldr	r3, [r4, #8]
 8008698:	42b3      	cmp	r3, r6
 800869a:	dc19      	bgt.n	80086d0 <__multadd+0x78>
 800869c:	6861      	ldr	r1, [r4, #4]
 800869e:	4638      	mov	r0, r7
 80086a0:	3101      	adds	r1, #1
 80086a2:	f7ff ff77 	bl	8008594 <_Balloc>
 80086a6:	4605      	mov	r5, r0
 80086a8:	b928      	cbnz	r0, 80086b6 <__multadd+0x5e>
 80086aa:	4602      	mov	r2, r0
 80086ac:	4b0d      	ldr	r3, [pc, #52]	; (80086e4 <__multadd+0x8c>)
 80086ae:	480e      	ldr	r0, [pc, #56]	; (80086e8 <__multadd+0x90>)
 80086b0:	21b5      	movs	r1, #181	; 0xb5
 80086b2:	f000 fd13 	bl	80090dc <__assert_func>
 80086b6:	6922      	ldr	r2, [r4, #16]
 80086b8:	3202      	adds	r2, #2
 80086ba:	f104 010c 	add.w	r1, r4, #12
 80086be:	0092      	lsls	r2, r2, #2
 80086c0:	300c      	adds	r0, #12
 80086c2:	f7ff ff59 	bl	8008578 <memcpy>
 80086c6:	4621      	mov	r1, r4
 80086c8:	4638      	mov	r0, r7
 80086ca:	f7ff ffa3 	bl	8008614 <_Bfree>
 80086ce:	462c      	mov	r4, r5
 80086d0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80086d4:	3601      	adds	r6, #1
 80086d6:	f8c3 8014 	str.w	r8, [r3, #20]
 80086da:	6126      	str	r6, [r4, #16]
 80086dc:	4620      	mov	r0, r4
 80086de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086e2:	bf00      	nop
 80086e4:	0800a2a3 	.word	0x0800a2a3
 80086e8:	0800a2b4 	.word	0x0800a2b4

080086ec <__hi0bits>:
 80086ec:	0c03      	lsrs	r3, r0, #16
 80086ee:	041b      	lsls	r3, r3, #16
 80086f0:	b9d3      	cbnz	r3, 8008728 <__hi0bits+0x3c>
 80086f2:	0400      	lsls	r0, r0, #16
 80086f4:	2310      	movs	r3, #16
 80086f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80086fa:	bf04      	itt	eq
 80086fc:	0200      	lsleq	r0, r0, #8
 80086fe:	3308      	addeq	r3, #8
 8008700:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008704:	bf04      	itt	eq
 8008706:	0100      	lsleq	r0, r0, #4
 8008708:	3304      	addeq	r3, #4
 800870a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800870e:	bf04      	itt	eq
 8008710:	0080      	lsleq	r0, r0, #2
 8008712:	3302      	addeq	r3, #2
 8008714:	2800      	cmp	r0, #0
 8008716:	db05      	blt.n	8008724 <__hi0bits+0x38>
 8008718:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800871c:	f103 0301 	add.w	r3, r3, #1
 8008720:	bf08      	it	eq
 8008722:	2320      	moveq	r3, #32
 8008724:	4618      	mov	r0, r3
 8008726:	4770      	bx	lr
 8008728:	2300      	movs	r3, #0
 800872a:	e7e4      	b.n	80086f6 <__hi0bits+0xa>

0800872c <__lo0bits>:
 800872c:	6803      	ldr	r3, [r0, #0]
 800872e:	f013 0207 	ands.w	r2, r3, #7
 8008732:	4601      	mov	r1, r0
 8008734:	d00b      	beq.n	800874e <__lo0bits+0x22>
 8008736:	07da      	lsls	r2, r3, #31
 8008738:	d424      	bmi.n	8008784 <__lo0bits+0x58>
 800873a:	0798      	lsls	r0, r3, #30
 800873c:	bf49      	itett	mi
 800873e:	085b      	lsrmi	r3, r3, #1
 8008740:	089b      	lsrpl	r3, r3, #2
 8008742:	2001      	movmi	r0, #1
 8008744:	600b      	strmi	r3, [r1, #0]
 8008746:	bf5c      	itt	pl
 8008748:	600b      	strpl	r3, [r1, #0]
 800874a:	2002      	movpl	r0, #2
 800874c:	4770      	bx	lr
 800874e:	b298      	uxth	r0, r3
 8008750:	b9b0      	cbnz	r0, 8008780 <__lo0bits+0x54>
 8008752:	0c1b      	lsrs	r3, r3, #16
 8008754:	2010      	movs	r0, #16
 8008756:	f013 0fff 	tst.w	r3, #255	; 0xff
 800875a:	bf04      	itt	eq
 800875c:	0a1b      	lsreq	r3, r3, #8
 800875e:	3008      	addeq	r0, #8
 8008760:	071a      	lsls	r2, r3, #28
 8008762:	bf04      	itt	eq
 8008764:	091b      	lsreq	r3, r3, #4
 8008766:	3004      	addeq	r0, #4
 8008768:	079a      	lsls	r2, r3, #30
 800876a:	bf04      	itt	eq
 800876c:	089b      	lsreq	r3, r3, #2
 800876e:	3002      	addeq	r0, #2
 8008770:	07da      	lsls	r2, r3, #31
 8008772:	d403      	bmi.n	800877c <__lo0bits+0x50>
 8008774:	085b      	lsrs	r3, r3, #1
 8008776:	f100 0001 	add.w	r0, r0, #1
 800877a:	d005      	beq.n	8008788 <__lo0bits+0x5c>
 800877c:	600b      	str	r3, [r1, #0]
 800877e:	4770      	bx	lr
 8008780:	4610      	mov	r0, r2
 8008782:	e7e8      	b.n	8008756 <__lo0bits+0x2a>
 8008784:	2000      	movs	r0, #0
 8008786:	4770      	bx	lr
 8008788:	2020      	movs	r0, #32
 800878a:	4770      	bx	lr

0800878c <__i2b>:
 800878c:	b510      	push	{r4, lr}
 800878e:	460c      	mov	r4, r1
 8008790:	2101      	movs	r1, #1
 8008792:	f7ff feff 	bl	8008594 <_Balloc>
 8008796:	4602      	mov	r2, r0
 8008798:	b928      	cbnz	r0, 80087a6 <__i2b+0x1a>
 800879a:	4b05      	ldr	r3, [pc, #20]	; (80087b0 <__i2b+0x24>)
 800879c:	4805      	ldr	r0, [pc, #20]	; (80087b4 <__i2b+0x28>)
 800879e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80087a2:	f000 fc9b 	bl	80090dc <__assert_func>
 80087a6:	2301      	movs	r3, #1
 80087a8:	6144      	str	r4, [r0, #20]
 80087aa:	6103      	str	r3, [r0, #16]
 80087ac:	bd10      	pop	{r4, pc}
 80087ae:	bf00      	nop
 80087b0:	0800a2a3 	.word	0x0800a2a3
 80087b4:	0800a2b4 	.word	0x0800a2b4

080087b8 <__multiply>:
 80087b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087bc:	4614      	mov	r4, r2
 80087be:	690a      	ldr	r2, [r1, #16]
 80087c0:	6923      	ldr	r3, [r4, #16]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	bfb8      	it	lt
 80087c6:	460b      	movlt	r3, r1
 80087c8:	460d      	mov	r5, r1
 80087ca:	bfbc      	itt	lt
 80087cc:	4625      	movlt	r5, r4
 80087ce:	461c      	movlt	r4, r3
 80087d0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80087d4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80087d8:	68ab      	ldr	r3, [r5, #8]
 80087da:	6869      	ldr	r1, [r5, #4]
 80087dc:	eb0a 0709 	add.w	r7, sl, r9
 80087e0:	42bb      	cmp	r3, r7
 80087e2:	b085      	sub	sp, #20
 80087e4:	bfb8      	it	lt
 80087e6:	3101      	addlt	r1, #1
 80087e8:	f7ff fed4 	bl	8008594 <_Balloc>
 80087ec:	b930      	cbnz	r0, 80087fc <__multiply+0x44>
 80087ee:	4602      	mov	r2, r0
 80087f0:	4b42      	ldr	r3, [pc, #264]	; (80088fc <__multiply+0x144>)
 80087f2:	4843      	ldr	r0, [pc, #268]	; (8008900 <__multiply+0x148>)
 80087f4:	f240 115d 	movw	r1, #349	; 0x15d
 80087f8:	f000 fc70 	bl	80090dc <__assert_func>
 80087fc:	f100 0614 	add.w	r6, r0, #20
 8008800:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008804:	4633      	mov	r3, r6
 8008806:	2200      	movs	r2, #0
 8008808:	4543      	cmp	r3, r8
 800880a:	d31e      	bcc.n	800884a <__multiply+0x92>
 800880c:	f105 0c14 	add.w	ip, r5, #20
 8008810:	f104 0314 	add.w	r3, r4, #20
 8008814:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008818:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800881c:	9202      	str	r2, [sp, #8]
 800881e:	ebac 0205 	sub.w	r2, ip, r5
 8008822:	3a15      	subs	r2, #21
 8008824:	f022 0203 	bic.w	r2, r2, #3
 8008828:	3204      	adds	r2, #4
 800882a:	f105 0115 	add.w	r1, r5, #21
 800882e:	458c      	cmp	ip, r1
 8008830:	bf38      	it	cc
 8008832:	2204      	movcc	r2, #4
 8008834:	9201      	str	r2, [sp, #4]
 8008836:	9a02      	ldr	r2, [sp, #8]
 8008838:	9303      	str	r3, [sp, #12]
 800883a:	429a      	cmp	r2, r3
 800883c:	d808      	bhi.n	8008850 <__multiply+0x98>
 800883e:	2f00      	cmp	r7, #0
 8008840:	dc55      	bgt.n	80088ee <__multiply+0x136>
 8008842:	6107      	str	r7, [r0, #16]
 8008844:	b005      	add	sp, #20
 8008846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800884a:	f843 2b04 	str.w	r2, [r3], #4
 800884e:	e7db      	b.n	8008808 <__multiply+0x50>
 8008850:	f8b3 a000 	ldrh.w	sl, [r3]
 8008854:	f1ba 0f00 	cmp.w	sl, #0
 8008858:	d020      	beq.n	800889c <__multiply+0xe4>
 800885a:	f105 0e14 	add.w	lr, r5, #20
 800885e:	46b1      	mov	r9, r6
 8008860:	2200      	movs	r2, #0
 8008862:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008866:	f8d9 b000 	ldr.w	fp, [r9]
 800886a:	b2a1      	uxth	r1, r4
 800886c:	fa1f fb8b 	uxth.w	fp, fp
 8008870:	fb0a b101 	mla	r1, sl, r1, fp
 8008874:	4411      	add	r1, r2
 8008876:	f8d9 2000 	ldr.w	r2, [r9]
 800887a:	0c24      	lsrs	r4, r4, #16
 800887c:	0c12      	lsrs	r2, r2, #16
 800887e:	fb0a 2404 	mla	r4, sl, r4, r2
 8008882:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008886:	b289      	uxth	r1, r1
 8008888:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800888c:	45f4      	cmp	ip, lr
 800888e:	f849 1b04 	str.w	r1, [r9], #4
 8008892:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008896:	d8e4      	bhi.n	8008862 <__multiply+0xaa>
 8008898:	9901      	ldr	r1, [sp, #4]
 800889a:	5072      	str	r2, [r6, r1]
 800889c:	9a03      	ldr	r2, [sp, #12]
 800889e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80088a2:	3304      	adds	r3, #4
 80088a4:	f1b9 0f00 	cmp.w	r9, #0
 80088a8:	d01f      	beq.n	80088ea <__multiply+0x132>
 80088aa:	6834      	ldr	r4, [r6, #0]
 80088ac:	f105 0114 	add.w	r1, r5, #20
 80088b0:	46b6      	mov	lr, r6
 80088b2:	f04f 0a00 	mov.w	sl, #0
 80088b6:	880a      	ldrh	r2, [r1, #0]
 80088b8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80088bc:	fb09 b202 	mla	r2, r9, r2, fp
 80088c0:	4492      	add	sl, r2
 80088c2:	b2a4      	uxth	r4, r4
 80088c4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80088c8:	f84e 4b04 	str.w	r4, [lr], #4
 80088cc:	f851 4b04 	ldr.w	r4, [r1], #4
 80088d0:	f8be 2000 	ldrh.w	r2, [lr]
 80088d4:	0c24      	lsrs	r4, r4, #16
 80088d6:	fb09 2404 	mla	r4, r9, r4, r2
 80088da:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80088de:	458c      	cmp	ip, r1
 80088e0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80088e4:	d8e7      	bhi.n	80088b6 <__multiply+0xfe>
 80088e6:	9a01      	ldr	r2, [sp, #4]
 80088e8:	50b4      	str	r4, [r6, r2]
 80088ea:	3604      	adds	r6, #4
 80088ec:	e7a3      	b.n	8008836 <__multiply+0x7e>
 80088ee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d1a5      	bne.n	8008842 <__multiply+0x8a>
 80088f6:	3f01      	subs	r7, #1
 80088f8:	e7a1      	b.n	800883e <__multiply+0x86>
 80088fa:	bf00      	nop
 80088fc:	0800a2a3 	.word	0x0800a2a3
 8008900:	0800a2b4 	.word	0x0800a2b4

08008904 <__pow5mult>:
 8008904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008908:	4615      	mov	r5, r2
 800890a:	f012 0203 	ands.w	r2, r2, #3
 800890e:	4606      	mov	r6, r0
 8008910:	460f      	mov	r7, r1
 8008912:	d007      	beq.n	8008924 <__pow5mult+0x20>
 8008914:	4c25      	ldr	r4, [pc, #148]	; (80089ac <__pow5mult+0xa8>)
 8008916:	3a01      	subs	r2, #1
 8008918:	2300      	movs	r3, #0
 800891a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800891e:	f7ff fe9b 	bl	8008658 <__multadd>
 8008922:	4607      	mov	r7, r0
 8008924:	10ad      	asrs	r5, r5, #2
 8008926:	d03d      	beq.n	80089a4 <__pow5mult+0xa0>
 8008928:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800892a:	b97c      	cbnz	r4, 800894c <__pow5mult+0x48>
 800892c:	2010      	movs	r0, #16
 800892e:	f7ff fe1b 	bl	8008568 <malloc>
 8008932:	4602      	mov	r2, r0
 8008934:	6270      	str	r0, [r6, #36]	; 0x24
 8008936:	b928      	cbnz	r0, 8008944 <__pow5mult+0x40>
 8008938:	4b1d      	ldr	r3, [pc, #116]	; (80089b0 <__pow5mult+0xac>)
 800893a:	481e      	ldr	r0, [pc, #120]	; (80089b4 <__pow5mult+0xb0>)
 800893c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008940:	f000 fbcc 	bl	80090dc <__assert_func>
 8008944:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008948:	6004      	str	r4, [r0, #0]
 800894a:	60c4      	str	r4, [r0, #12]
 800894c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008950:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008954:	b94c      	cbnz	r4, 800896a <__pow5mult+0x66>
 8008956:	f240 2171 	movw	r1, #625	; 0x271
 800895a:	4630      	mov	r0, r6
 800895c:	f7ff ff16 	bl	800878c <__i2b>
 8008960:	2300      	movs	r3, #0
 8008962:	f8c8 0008 	str.w	r0, [r8, #8]
 8008966:	4604      	mov	r4, r0
 8008968:	6003      	str	r3, [r0, #0]
 800896a:	f04f 0900 	mov.w	r9, #0
 800896e:	07eb      	lsls	r3, r5, #31
 8008970:	d50a      	bpl.n	8008988 <__pow5mult+0x84>
 8008972:	4639      	mov	r1, r7
 8008974:	4622      	mov	r2, r4
 8008976:	4630      	mov	r0, r6
 8008978:	f7ff ff1e 	bl	80087b8 <__multiply>
 800897c:	4639      	mov	r1, r7
 800897e:	4680      	mov	r8, r0
 8008980:	4630      	mov	r0, r6
 8008982:	f7ff fe47 	bl	8008614 <_Bfree>
 8008986:	4647      	mov	r7, r8
 8008988:	106d      	asrs	r5, r5, #1
 800898a:	d00b      	beq.n	80089a4 <__pow5mult+0xa0>
 800898c:	6820      	ldr	r0, [r4, #0]
 800898e:	b938      	cbnz	r0, 80089a0 <__pow5mult+0x9c>
 8008990:	4622      	mov	r2, r4
 8008992:	4621      	mov	r1, r4
 8008994:	4630      	mov	r0, r6
 8008996:	f7ff ff0f 	bl	80087b8 <__multiply>
 800899a:	6020      	str	r0, [r4, #0]
 800899c:	f8c0 9000 	str.w	r9, [r0]
 80089a0:	4604      	mov	r4, r0
 80089a2:	e7e4      	b.n	800896e <__pow5mult+0x6a>
 80089a4:	4638      	mov	r0, r7
 80089a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089aa:	bf00      	nop
 80089ac:	0800a408 	.word	0x0800a408
 80089b0:	0800a22d 	.word	0x0800a22d
 80089b4:	0800a2b4 	.word	0x0800a2b4

080089b8 <__lshift>:
 80089b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089bc:	460c      	mov	r4, r1
 80089be:	6849      	ldr	r1, [r1, #4]
 80089c0:	6923      	ldr	r3, [r4, #16]
 80089c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80089c6:	68a3      	ldr	r3, [r4, #8]
 80089c8:	4607      	mov	r7, r0
 80089ca:	4691      	mov	r9, r2
 80089cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80089d0:	f108 0601 	add.w	r6, r8, #1
 80089d4:	42b3      	cmp	r3, r6
 80089d6:	db0b      	blt.n	80089f0 <__lshift+0x38>
 80089d8:	4638      	mov	r0, r7
 80089da:	f7ff fddb 	bl	8008594 <_Balloc>
 80089de:	4605      	mov	r5, r0
 80089e0:	b948      	cbnz	r0, 80089f6 <__lshift+0x3e>
 80089e2:	4602      	mov	r2, r0
 80089e4:	4b28      	ldr	r3, [pc, #160]	; (8008a88 <__lshift+0xd0>)
 80089e6:	4829      	ldr	r0, [pc, #164]	; (8008a8c <__lshift+0xd4>)
 80089e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80089ec:	f000 fb76 	bl	80090dc <__assert_func>
 80089f0:	3101      	adds	r1, #1
 80089f2:	005b      	lsls	r3, r3, #1
 80089f4:	e7ee      	b.n	80089d4 <__lshift+0x1c>
 80089f6:	2300      	movs	r3, #0
 80089f8:	f100 0114 	add.w	r1, r0, #20
 80089fc:	f100 0210 	add.w	r2, r0, #16
 8008a00:	4618      	mov	r0, r3
 8008a02:	4553      	cmp	r3, sl
 8008a04:	db33      	blt.n	8008a6e <__lshift+0xb6>
 8008a06:	6920      	ldr	r0, [r4, #16]
 8008a08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a0c:	f104 0314 	add.w	r3, r4, #20
 8008a10:	f019 091f 	ands.w	r9, r9, #31
 8008a14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008a1c:	d02b      	beq.n	8008a76 <__lshift+0xbe>
 8008a1e:	f1c9 0e20 	rsb	lr, r9, #32
 8008a22:	468a      	mov	sl, r1
 8008a24:	2200      	movs	r2, #0
 8008a26:	6818      	ldr	r0, [r3, #0]
 8008a28:	fa00 f009 	lsl.w	r0, r0, r9
 8008a2c:	4302      	orrs	r2, r0
 8008a2e:	f84a 2b04 	str.w	r2, [sl], #4
 8008a32:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a36:	459c      	cmp	ip, r3
 8008a38:	fa22 f20e 	lsr.w	r2, r2, lr
 8008a3c:	d8f3      	bhi.n	8008a26 <__lshift+0x6e>
 8008a3e:	ebac 0304 	sub.w	r3, ip, r4
 8008a42:	3b15      	subs	r3, #21
 8008a44:	f023 0303 	bic.w	r3, r3, #3
 8008a48:	3304      	adds	r3, #4
 8008a4a:	f104 0015 	add.w	r0, r4, #21
 8008a4e:	4584      	cmp	ip, r0
 8008a50:	bf38      	it	cc
 8008a52:	2304      	movcc	r3, #4
 8008a54:	50ca      	str	r2, [r1, r3]
 8008a56:	b10a      	cbz	r2, 8008a5c <__lshift+0xa4>
 8008a58:	f108 0602 	add.w	r6, r8, #2
 8008a5c:	3e01      	subs	r6, #1
 8008a5e:	4638      	mov	r0, r7
 8008a60:	612e      	str	r6, [r5, #16]
 8008a62:	4621      	mov	r1, r4
 8008a64:	f7ff fdd6 	bl	8008614 <_Bfree>
 8008a68:	4628      	mov	r0, r5
 8008a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a6e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a72:	3301      	adds	r3, #1
 8008a74:	e7c5      	b.n	8008a02 <__lshift+0x4a>
 8008a76:	3904      	subs	r1, #4
 8008a78:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a7c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a80:	459c      	cmp	ip, r3
 8008a82:	d8f9      	bhi.n	8008a78 <__lshift+0xc0>
 8008a84:	e7ea      	b.n	8008a5c <__lshift+0xa4>
 8008a86:	bf00      	nop
 8008a88:	0800a2a3 	.word	0x0800a2a3
 8008a8c:	0800a2b4 	.word	0x0800a2b4

08008a90 <__mcmp>:
 8008a90:	b530      	push	{r4, r5, lr}
 8008a92:	6902      	ldr	r2, [r0, #16]
 8008a94:	690c      	ldr	r4, [r1, #16]
 8008a96:	1b12      	subs	r2, r2, r4
 8008a98:	d10e      	bne.n	8008ab8 <__mcmp+0x28>
 8008a9a:	f100 0314 	add.w	r3, r0, #20
 8008a9e:	3114      	adds	r1, #20
 8008aa0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008aa4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008aa8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008aac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008ab0:	42a5      	cmp	r5, r4
 8008ab2:	d003      	beq.n	8008abc <__mcmp+0x2c>
 8008ab4:	d305      	bcc.n	8008ac2 <__mcmp+0x32>
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	4610      	mov	r0, r2
 8008aba:	bd30      	pop	{r4, r5, pc}
 8008abc:	4283      	cmp	r3, r0
 8008abe:	d3f3      	bcc.n	8008aa8 <__mcmp+0x18>
 8008ac0:	e7fa      	b.n	8008ab8 <__mcmp+0x28>
 8008ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ac6:	e7f7      	b.n	8008ab8 <__mcmp+0x28>

08008ac8 <__mdiff>:
 8008ac8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008acc:	460c      	mov	r4, r1
 8008ace:	4606      	mov	r6, r0
 8008ad0:	4611      	mov	r1, r2
 8008ad2:	4620      	mov	r0, r4
 8008ad4:	4617      	mov	r7, r2
 8008ad6:	f7ff ffdb 	bl	8008a90 <__mcmp>
 8008ada:	1e05      	subs	r5, r0, #0
 8008adc:	d110      	bne.n	8008b00 <__mdiff+0x38>
 8008ade:	4629      	mov	r1, r5
 8008ae0:	4630      	mov	r0, r6
 8008ae2:	f7ff fd57 	bl	8008594 <_Balloc>
 8008ae6:	b930      	cbnz	r0, 8008af6 <__mdiff+0x2e>
 8008ae8:	4b39      	ldr	r3, [pc, #228]	; (8008bd0 <__mdiff+0x108>)
 8008aea:	4602      	mov	r2, r0
 8008aec:	f240 2132 	movw	r1, #562	; 0x232
 8008af0:	4838      	ldr	r0, [pc, #224]	; (8008bd4 <__mdiff+0x10c>)
 8008af2:	f000 faf3 	bl	80090dc <__assert_func>
 8008af6:	2301      	movs	r3, #1
 8008af8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008afc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b00:	bfa4      	itt	ge
 8008b02:	463b      	movge	r3, r7
 8008b04:	4627      	movge	r7, r4
 8008b06:	4630      	mov	r0, r6
 8008b08:	6879      	ldr	r1, [r7, #4]
 8008b0a:	bfa6      	itte	ge
 8008b0c:	461c      	movge	r4, r3
 8008b0e:	2500      	movge	r5, #0
 8008b10:	2501      	movlt	r5, #1
 8008b12:	f7ff fd3f 	bl	8008594 <_Balloc>
 8008b16:	b920      	cbnz	r0, 8008b22 <__mdiff+0x5a>
 8008b18:	4b2d      	ldr	r3, [pc, #180]	; (8008bd0 <__mdiff+0x108>)
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008b20:	e7e6      	b.n	8008af0 <__mdiff+0x28>
 8008b22:	693e      	ldr	r6, [r7, #16]
 8008b24:	60c5      	str	r5, [r0, #12]
 8008b26:	6925      	ldr	r5, [r4, #16]
 8008b28:	f107 0114 	add.w	r1, r7, #20
 8008b2c:	f104 0914 	add.w	r9, r4, #20
 8008b30:	f100 0e14 	add.w	lr, r0, #20
 8008b34:	f107 0210 	add.w	r2, r7, #16
 8008b38:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008b3c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008b40:	46f2      	mov	sl, lr
 8008b42:	2700      	movs	r7, #0
 8008b44:	f859 3b04 	ldr.w	r3, [r9], #4
 8008b48:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008b4c:	fa1f f883 	uxth.w	r8, r3
 8008b50:	fa17 f78b 	uxtah	r7, r7, fp
 8008b54:	0c1b      	lsrs	r3, r3, #16
 8008b56:	eba7 0808 	sub.w	r8, r7, r8
 8008b5a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008b5e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008b62:	fa1f f888 	uxth.w	r8, r8
 8008b66:	141f      	asrs	r7, r3, #16
 8008b68:	454d      	cmp	r5, r9
 8008b6a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008b6e:	f84a 3b04 	str.w	r3, [sl], #4
 8008b72:	d8e7      	bhi.n	8008b44 <__mdiff+0x7c>
 8008b74:	1b2b      	subs	r3, r5, r4
 8008b76:	3b15      	subs	r3, #21
 8008b78:	f023 0303 	bic.w	r3, r3, #3
 8008b7c:	3304      	adds	r3, #4
 8008b7e:	3415      	adds	r4, #21
 8008b80:	42a5      	cmp	r5, r4
 8008b82:	bf38      	it	cc
 8008b84:	2304      	movcc	r3, #4
 8008b86:	4419      	add	r1, r3
 8008b88:	4473      	add	r3, lr
 8008b8a:	469e      	mov	lr, r3
 8008b8c:	460d      	mov	r5, r1
 8008b8e:	4565      	cmp	r5, ip
 8008b90:	d30e      	bcc.n	8008bb0 <__mdiff+0xe8>
 8008b92:	f10c 0203 	add.w	r2, ip, #3
 8008b96:	1a52      	subs	r2, r2, r1
 8008b98:	f022 0203 	bic.w	r2, r2, #3
 8008b9c:	3903      	subs	r1, #3
 8008b9e:	458c      	cmp	ip, r1
 8008ba0:	bf38      	it	cc
 8008ba2:	2200      	movcc	r2, #0
 8008ba4:	441a      	add	r2, r3
 8008ba6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008baa:	b17b      	cbz	r3, 8008bcc <__mdiff+0x104>
 8008bac:	6106      	str	r6, [r0, #16]
 8008bae:	e7a5      	b.n	8008afc <__mdiff+0x34>
 8008bb0:	f855 8b04 	ldr.w	r8, [r5], #4
 8008bb4:	fa17 f488 	uxtah	r4, r7, r8
 8008bb8:	1422      	asrs	r2, r4, #16
 8008bba:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008bbe:	b2a4      	uxth	r4, r4
 8008bc0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008bc4:	f84e 4b04 	str.w	r4, [lr], #4
 8008bc8:	1417      	asrs	r7, r2, #16
 8008bca:	e7e0      	b.n	8008b8e <__mdiff+0xc6>
 8008bcc:	3e01      	subs	r6, #1
 8008bce:	e7ea      	b.n	8008ba6 <__mdiff+0xde>
 8008bd0:	0800a2a3 	.word	0x0800a2a3
 8008bd4:	0800a2b4 	.word	0x0800a2b4

08008bd8 <__d2b>:
 8008bd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008bdc:	4689      	mov	r9, r1
 8008bde:	2101      	movs	r1, #1
 8008be0:	ec57 6b10 	vmov	r6, r7, d0
 8008be4:	4690      	mov	r8, r2
 8008be6:	f7ff fcd5 	bl	8008594 <_Balloc>
 8008bea:	4604      	mov	r4, r0
 8008bec:	b930      	cbnz	r0, 8008bfc <__d2b+0x24>
 8008bee:	4602      	mov	r2, r0
 8008bf0:	4b25      	ldr	r3, [pc, #148]	; (8008c88 <__d2b+0xb0>)
 8008bf2:	4826      	ldr	r0, [pc, #152]	; (8008c8c <__d2b+0xb4>)
 8008bf4:	f240 310a 	movw	r1, #778	; 0x30a
 8008bf8:	f000 fa70 	bl	80090dc <__assert_func>
 8008bfc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008c00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008c04:	bb35      	cbnz	r5, 8008c54 <__d2b+0x7c>
 8008c06:	2e00      	cmp	r6, #0
 8008c08:	9301      	str	r3, [sp, #4]
 8008c0a:	d028      	beq.n	8008c5e <__d2b+0x86>
 8008c0c:	4668      	mov	r0, sp
 8008c0e:	9600      	str	r6, [sp, #0]
 8008c10:	f7ff fd8c 	bl	800872c <__lo0bits>
 8008c14:	9900      	ldr	r1, [sp, #0]
 8008c16:	b300      	cbz	r0, 8008c5a <__d2b+0x82>
 8008c18:	9a01      	ldr	r2, [sp, #4]
 8008c1a:	f1c0 0320 	rsb	r3, r0, #32
 8008c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c22:	430b      	orrs	r3, r1
 8008c24:	40c2      	lsrs	r2, r0
 8008c26:	6163      	str	r3, [r4, #20]
 8008c28:	9201      	str	r2, [sp, #4]
 8008c2a:	9b01      	ldr	r3, [sp, #4]
 8008c2c:	61a3      	str	r3, [r4, #24]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	bf14      	ite	ne
 8008c32:	2202      	movne	r2, #2
 8008c34:	2201      	moveq	r2, #1
 8008c36:	6122      	str	r2, [r4, #16]
 8008c38:	b1d5      	cbz	r5, 8008c70 <__d2b+0x98>
 8008c3a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008c3e:	4405      	add	r5, r0
 8008c40:	f8c9 5000 	str.w	r5, [r9]
 8008c44:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008c48:	f8c8 0000 	str.w	r0, [r8]
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	b003      	add	sp, #12
 8008c50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c58:	e7d5      	b.n	8008c06 <__d2b+0x2e>
 8008c5a:	6161      	str	r1, [r4, #20]
 8008c5c:	e7e5      	b.n	8008c2a <__d2b+0x52>
 8008c5e:	a801      	add	r0, sp, #4
 8008c60:	f7ff fd64 	bl	800872c <__lo0bits>
 8008c64:	9b01      	ldr	r3, [sp, #4]
 8008c66:	6163      	str	r3, [r4, #20]
 8008c68:	2201      	movs	r2, #1
 8008c6a:	6122      	str	r2, [r4, #16]
 8008c6c:	3020      	adds	r0, #32
 8008c6e:	e7e3      	b.n	8008c38 <__d2b+0x60>
 8008c70:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c74:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008c78:	f8c9 0000 	str.w	r0, [r9]
 8008c7c:	6918      	ldr	r0, [r3, #16]
 8008c7e:	f7ff fd35 	bl	80086ec <__hi0bits>
 8008c82:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008c86:	e7df      	b.n	8008c48 <__d2b+0x70>
 8008c88:	0800a2a3 	.word	0x0800a2a3
 8008c8c:	0800a2b4 	.word	0x0800a2b4

08008c90 <_calloc_r>:
 8008c90:	b513      	push	{r0, r1, r4, lr}
 8008c92:	434a      	muls	r2, r1
 8008c94:	4611      	mov	r1, r2
 8008c96:	9201      	str	r2, [sp, #4]
 8008c98:	f000 f85a 	bl	8008d50 <_malloc_r>
 8008c9c:	4604      	mov	r4, r0
 8008c9e:	b118      	cbz	r0, 8008ca8 <_calloc_r+0x18>
 8008ca0:	9a01      	ldr	r2, [sp, #4]
 8008ca2:	2100      	movs	r1, #0
 8008ca4:	f7fe f952 	bl	8006f4c <memset>
 8008ca8:	4620      	mov	r0, r4
 8008caa:	b002      	add	sp, #8
 8008cac:	bd10      	pop	{r4, pc}
	...

08008cb0 <_free_r>:
 8008cb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008cb2:	2900      	cmp	r1, #0
 8008cb4:	d048      	beq.n	8008d48 <_free_r+0x98>
 8008cb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cba:	9001      	str	r0, [sp, #4]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	f1a1 0404 	sub.w	r4, r1, #4
 8008cc2:	bfb8      	it	lt
 8008cc4:	18e4      	addlt	r4, r4, r3
 8008cc6:	f000 fa65 	bl	8009194 <__malloc_lock>
 8008cca:	4a20      	ldr	r2, [pc, #128]	; (8008d4c <_free_r+0x9c>)
 8008ccc:	9801      	ldr	r0, [sp, #4]
 8008cce:	6813      	ldr	r3, [r2, #0]
 8008cd0:	4615      	mov	r5, r2
 8008cd2:	b933      	cbnz	r3, 8008ce2 <_free_r+0x32>
 8008cd4:	6063      	str	r3, [r4, #4]
 8008cd6:	6014      	str	r4, [r2, #0]
 8008cd8:	b003      	add	sp, #12
 8008cda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008cde:	f000 ba5f 	b.w	80091a0 <__malloc_unlock>
 8008ce2:	42a3      	cmp	r3, r4
 8008ce4:	d90b      	bls.n	8008cfe <_free_r+0x4e>
 8008ce6:	6821      	ldr	r1, [r4, #0]
 8008ce8:	1862      	adds	r2, r4, r1
 8008cea:	4293      	cmp	r3, r2
 8008cec:	bf04      	itt	eq
 8008cee:	681a      	ldreq	r2, [r3, #0]
 8008cf0:	685b      	ldreq	r3, [r3, #4]
 8008cf2:	6063      	str	r3, [r4, #4]
 8008cf4:	bf04      	itt	eq
 8008cf6:	1852      	addeq	r2, r2, r1
 8008cf8:	6022      	streq	r2, [r4, #0]
 8008cfa:	602c      	str	r4, [r5, #0]
 8008cfc:	e7ec      	b.n	8008cd8 <_free_r+0x28>
 8008cfe:	461a      	mov	r2, r3
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	b10b      	cbz	r3, 8008d08 <_free_r+0x58>
 8008d04:	42a3      	cmp	r3, r4
 8008d06:	d9fa      	bls.n	8008cfe <_free_r+0x4e>
 8008d08:	6811      	ldr	r1, [r2, #0]
 8008d0a:	1855      	adds	r5, r2, r1
 8008d0c:	42a5      	cmp	r5, r4
 8008d0e:	d10b      	bne.n	8008d28 <_free_r+0x78>
 8008d10:	6824      	ldr	r4, [r4, #0]
 8008d12:	4421      	add	r1, r4
 8008d14:	1854      	adds	r4, r2, r1
 8008d16:	42a3      	cmp	r3, r4
 8008d18:	6011      	str	r1, [r2, #0]
 8008d1a:	d1dd      	bne.n	8008cd8 <_free_r+0x28>
 8008d1c:	681c      	ldr	r4, [r3, #0]
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	6053      	str	r3, [r2, #4]
 8008d22:	4421      	add	r1, r4
 8008d24:	6011      	str	r1, [r2, #0]
 8008d26:	e7d7      	b.n	8008cd8 <_free_r+0x28>
 8008d28:	d902      	bls.n	8008d30 <_free_r+0x80>
 8008d2a:	230c      	movs	r3, #12
 8008d2c:	6003      	str	r3, [r0, #0]
 8008d2e:	e7d3      	b.n	8008cd8 <_free_r+0x28>
 8008d30:	6825      	ldr	r5, [r4, #0]
 8008d32:	1961      	adds	r1, r4, r5
 8008d34:	428b      	cmp	r3, r1
 8008d36:	bf04      	itt	eq
 8008d38:	6819      	ldreq	r1, [r3, #0]
 8008d3a:	685b      	ldreq	r3, [r3, #4]
 8008d3c:	6063      	str	r3, [r4, #4]
 8008d3e:	bf04      	itt	eq
 8008d40:	1949      	addeq	r1, r1, r5
 8008d42:	6021      	streq	r1, [r4, #0]
 8008d44:	6054      	str	r4, [r2, #4]
 8008d46:	e7c7      	b.n	8008cd8 <_free_r+0x28>
 8008d48:	b003      	add	sp, #12
 8008d4a:	bd30      	pop	{r4, r5, pc}
 8008d4c:	20000260 	.word	0x20000260

08008d50 <_malloc_r>:
 8008d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d52:	1ccd      	adds	r5, r1, #3
 8008d54:	f025 0503 	bic.w	r5, r5, #3
 8008d58:	3508      	adds	r5, #8
 8008d5a:	2d0c      	cmp	r5, #12
 8008d5c:	bf38      	it	cc
 8008d5e:	250c      	movcc	r5, #12
 8008d60:	2d00      	cmp	r5, #0
 8008d62:	4606      	mov	r6, r0
 8008d64:	db01      	blt.n	8008d6a <_malloc_r+0x1a>
 8008d66:	42a9      	cmp	r1, r5
 8008d68:	d903      	bls.n	8008d72 <_malloc_r+0x22>
 8008d6a:	230c      	movs	r3, #12
 8008d6c:	6033      	str	r3, [r6, #0]
 8008d6e:	2000      	movs	r0, #0
 8008d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d72:	f000 fa0f 	bl	8009194 <__malloc_lock>
 8008d76:	4921      	ldr	r1, [pc, #132]	; (8008dfc <_malloc_r+0xac>)
 8008d78:	680a      	ldr	r2, [r1, #0]
 8008d7a:	4614      	mov	r4, r2
 8008d7c:	b99c      	cbnz	r4, 8008da6 <_malloc_r+0x56>
 8008d7e:	4f20      	ldr	r7, [pc, #128]	; (8008e00 <_malloc_r+0xb0>)
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	b923      	cbnz	r3, 8008d8e <_malloc_r+0x3e>
 8008d84:	4621      	mov	r1, r4
 8008d86:	4630      	mov	r0, r6
 8008d88:	f000 f998 	bl	80090bc <_sbrk_r>
 8008d8c:	6038      	str	r0, [r7, #0]
 8008d8e:	4629      	mov	r1, r5
 8008d90:	4630      	mov	r0, r6
 8008d92:	f000 f993 	bl	80090bc <_sbrk_r>
 8008d96:	1c43      	adds	r3, r0, #1
 8008d98:	d123      	bne.n	8008de2 <_malloc_r+0x92>
 8008d9a:	230c      	movs	r3, #12
 8008d9c:	6033      	str	r3, [r6, #0]
 8008d9e:	4630      	mov	r0, r6
 8008da0:	f000 f9fe 	bl	80091a0 <__malloc_unlock>
 8008da4:	e7e3      	b.n	8008d6e <_malloc_r+0x1e>
 8008da6:	6823      	ldr	r3, [r4, #0]
 8008da8:	1b5b      	subs	r3, r3, r5
 8008daa:	d417      	bmi.n	8008ddc <_malloc_r+0x8c>
 8008dac:	2b0b      	cmp	r3, #11
 8008dae:	d903      	bls.n	8008db8 <_malloc_r+0x68>
 8008db0:	6023      	str	r3, [r4, #0]
 8008db2:	441c      	add	r4, r3
 8008db4:	6025      	str	r5, [r4, #0]
 8008db6:	e004      	b.n	8008dc2 <_malloc_r+0x72>
 8008db8:	6863      	ldr	r3, [r4, #4]
 8008dba:	42a2      	cmp	r2, r4
 8008dbc:	bf0c      	ite	eq
 8008dbe:	600b      	streq	r3, [r1, #0]
 8008dc0:	6053      	strne	r3, [r2, #4]
 8008dc2:	4630      	mov	r0, r6
 8008dc4:	f000 f9ec 	bl	80091a0 <__malloc_unlock>
 8008dc8:	f104 000b 	add.w	r0, r4, #11
 8008dcc:	1d23      	adds	r3, r4, #4
 8008dce:	f020 0007 	bic.w	r0, r0, #7
 8008dd2:	1ac2      	subs	r2, r0, r3
 8008dd4:	d0cc      	beq.n	8008d70 <_malloc_r+0x20>
 8008dd6:	1a1b      	subs	r3, r3, r0
 8008dd8:	50a3      	str	r3, [r4, r2]
 8008dda:	e7c9      	b.n	8008d70 <_malloc_r+0x20>
 8008ddc:	4622      	mov	r2, r4
 8008dde:	6864      	ldr	r4, [r4, #4]
 8008de0:	e7cc      	b.n	8008d7c <_malloc_r+0x2c>
 8008de2:	1cc4      	adds	r4, r0, #3
 8008de4:	f024 0403 	bic.w	r4, r4, #3
 8008de8:	42a0      	cmp	r0, r4
 8008dea:	d0e3      	beq.n	8008db4 <_malloc_r+0x64>
 8008dec:	1a21      	subs	r1, r4, r0
 8008dee:	4630      	mov	r0, r6
 8008df0:	f000 f964 	bl	80090bc <_sbrk_r>
 8008df4:	3001      	adds	r0, #1
 8008df6:	d1dd      	bne.n	8008db4 <_malloc_r+0x64>
 8008df8:	e7cf      	b.n	8008d9a <_malloc_r+0x4a>
 8008dfa:	bf00      	nop
 8008dfc:	20000260 	.word	0x20000260
 8008e00:	20000264 	.word	0x20000264

08008e04 <__ssputs_r>:
 8008e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e08:	688e      	ldr	r6, [r1, #8]
 8008e0a:	429e      	cmp	r6, r3
 8008e0c:	4682      	mov	sl, r0
 8008e0e:	460c      	mov	r4, r1
 8008e10:	4690      	mov	r8, r2
 8008e12:	461f      	mov	r7, r3
 8008e14:	d838      	bhi.n	8008e88 <__ssputs_r+0x84>
 8008e16:	898a      	ldrh	r2, [r1, #12]
 8008e18:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e1c:	d032      	beq.n	8008e84 <__ssputs_r+0x80>
 8008e1e:	6825      	ldr	r5, [r4, #0]
 8008e20:	6909      	ldr	r1, [r1, #16]
 8008e22:	eba5 0901 	sub.w	r9, r5, r1
 8008e26:	6965      	ldr	r5, [r4, #20]
 8008e28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e30:	3301      	adds	r3, #1
 8008e32:	444b      	add	r3, r9
 8008e34:	106d      	asrs	r5, r5, #1
 8008e36:	429d      	cmp	r5, r3
 8008e38:	bf38      	it	cc
 8008e3a:	461d      	movcc	r5, r3
 8008e3c:	0553      	lsls	r3, r2, #21
 8008e3e:	d531      	bpl.n	8008ea4 <__ssputs_r+0xa0>
 8008e40:	4629      	mov	r1, r5
 8008e42:	f7ff ff85 	bl	8008d50 <_malloc_r>
 8008e46:	4606      	mov	r6, r0
 8008e48:	b950      	cbnz	r0, 8008e60 <__ssputs_r+0x5c>
 8008e4a:	230c      	movs	r3, #12
 8008e4c:	f8ca 3000 	str.w	r3, [sl]
 8008e50:	89a3      	ldrh	r3, [r4, #12]
 8008e52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e56:	81a3      	strh	r3, [r4, #12]
 8008e58:	f04f 30ff 	mov.w	r0, #4294967295
 8008e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e60:	6921      	ldr	r1, [r4, #16]
 8008e62:	464a      	mov	r2, r9
 8008e64:	f7ff fb88 	bl	8008578 <memcpy>
 8008e68:	89a3      	ldrh	r3, [r4, #12]
 8008e6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e72:	81a3      	strh	r3, [r4, #12]
 8008e74:	6126      	str	r6, [r4, #16]
 8008e76:	6165      	str	r5, [r4, #20]
 8008e78:	444e      	add	r6, r9
 8008e7a:	eba5 0509 	sub.w	r5, r5, r9
 8008e7e:	6026      	str	r6, [r4, #0]
 8008e80:	60a5      	str	r5, [r4, #8]
 8008e82:	463e      	mov	r6, r7
 8008e84:	42be      	cmp	r6, r7
 8008e86:	d900      	bls.n	8008e8a <__ssputs_r+0x86>
 8008e88:	463e      	mov	r6, r7
 8008e8a:	4632      	mov	r2, r6
 8008e8c:	6820      	ldr	r0, [r4, #0]
 8008e8e:	4641      	mov	r1, r8
 8008e90:	f000 f966 	bl	8009160 <memmove>
 8008e94:	68a3      	ldr	r3, [r4, #8]
 8008e96:	6822      	ldr	r2, [r4, #0]
 8008e98:	1b9b      	subs	r3, r3, r6
 8008e9a:	4432      	add	r2, r6
 8008e9c:	60a3      	str	r3, [r4, #8]
 8008e9e:	6022      	str	r2, [r4, #0]
 8008ea0:	2000      	movs	r0, #0
 8008ea2:	e7db      	b.n	8008e5c <__ssputs_r+0x58>
 8008ea4:	462a      	mov	r2, r5
 8008ea6:	f000 f981 	bl	80091ac <_realloc_r>
 8008eaa:	4606      	mov	r6, r0
 8008eac:	2800      	cmp	r0, #0
 8008eae:	d1e1      	bne.n	8008e74 <__ssputs_r+0x70>
 8008eb0:	6921      	ldr	r1, [r4, #16]
 8008eb2:	4650      	mov	r0, sl
 8008eb4:	f7ff fefc 	bl	8008cb0 <_free_r>
 8008eb8:	e7c7      	b.n	8008e4a <__ssputs_r+0x46>
	...

08008ebc <_svfiprintf_r>:
 8008ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ec0:	4698      	mov	r8, r3
 8008ec2:	898b      	ldrh	r3, [r1, #12]
 8008ec4:	061b      	lsls	r3, r3, #24
 8008ec6:	b09d      	sub	sp, #116	; 0x74
 8008ec8:	4607      	mov	r7, r0
 8008eca:	460d      	mov	r5, r1
 8008ecc:	4614      	mov	r4, r2
 8008ece:	d50e      	bpl.n	8008eee <_svfiprintf_r+0x32>
 8008ed0:	690b      	ldr	r3, [r1, #16]
 8008ed2:	b963      	cbnz	r3, 8008eee <_svfiprintf_r+0x32>
 8008ed4:	2140      	movs	r1, #64	; 0x40
 8008ed6:	f7ff ff3b 	bl	8008d50 <_malloc_r>
 8008eda:	6028      	str	r0, [r5, #0]
 8008edc:	6128      	str	r0, [r5, #16]
 8008ede:	b920      	cbnz	r0, 8008eea <_svfiprintf_r+0x2e>
 8008ee0:	230c      	movs	r3, #12
 8008ee2:	603b      	str	r3, [r7, #0]
 8008ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ee8:	e0d1      	b.n	800908e <_svfiprintf_r+0x1d2>
 8008eea:	2340      	movs	r3, #64	; 0x40
 8008eec:	616b      	str	r3, [r5, #20]
 8008eee:	2300      	movs	r3, #0
 8008ef0:	9309      	str	r3, [sp, #36]	; 0x24
 8008ef2:	2320      	movs	r3, #32
 8008ef4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ef8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008efc:	2330      	movs	r3, #48	; 0x30
 8008efe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80090a8 <_svfiprintf_r+0x1ec>
 8008f02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f06:	f04f 0901 	mov.w	r9, #1
 8008f0a:	4623      	mov	r3, r4
 8008f0c:	469a      	mov	sl, r3
 8008f0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f12:	b10a      	cbz	r2, 8008f18 <_svfiprintf_r+0x5c>
 8008f14:	2a25      	cmp	r2, #37	; 0x25
 8008f16:	d1f9      	bne.n	8008f0c <_svfiprintf_r+0x50>
 8008f18:	ebba 0b04 	subs.w	fp, sl, r4
 8008f1c:	d00b      	beq.n	8008f36 <_svfiprintf_r+0x7a>
 8008f1e:	465b      	mov	r3, fp
 8008f20:	4622      	mov	r2, r4
 8008f22:	4629      	mov	r1, r5
 8008f24:	4638      	mov	r0, r7
 8008f26:	f7ff ff6d 	bl	8008e04 <__ssputs_r>
 8008f2a:	3001      	adds	r0, #1
 8008f2c:	f000 80aa 	beq.w	8009084 <_svfiprintf_r+0x1c8>
 8008f30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f32:	445a      	add	r2, fp
 8008f34:	9209      	str	r2, [sp, #36]	; 0x24
 8008f36:	f89a 3000 	ldrb.w	r3, [sl]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	f000 80a2 	beq.w	8009084 <_svfiprintf_r+0x1c8>
 8008f40:	2300      	movs	r3, #0
 8008f42:	f04f 32ff 	mov.w	r2, #4294967295
 8008f46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f4a:	f10a 0a01 	add.w	sl, sl, #1
 8008f4e:	9304      	str	r3, [sp, #16]
 8008f50:	9307      	str	r3, [sp, #28]
 8008f52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f56:	931a      	str	r3, [sp, #104]	; 0x68
 8008f58:	4654      	mov	r4, sl
 8008f5a:	2205      	movs	r2, #5
 8008f5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f60:	4851      	ldr	r0, [pc, #324]	; (80090a8 <_svfiprintf_r+0x1ec>)
 8008f62:	f7f7 f945 	bl	80001f0 <memchr>
 8008f66:	9a04      	ldr	r2, [sp, #16]
 8008f68:	b9d8      	cbnz	r0, 8008fa2 <_svfiprintf_r+0xe6>
 8008f6a:	06d0      	lsls	r0, r2, #27
 8008f6c:	bf44      	itt	mi
 8008f6e:	2320      	movmi	r3, #32
 8008f70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f74:	0711      	lsls	r1, r2, #28
 8008f76:	bf44      	itt	mi
 8008f78:	232b      	movmi	r3, #43	; 0x2b
 8008f7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f7e:	f89a 3000 	ldrb.w	r3, [sl]
 8008f82:	2b2a      	cmp	r3, #42	; 0x2a
 8008f84:	d015      	beq.n	8008fb2 <_svfiprintf_r+0xf6>
 8008f86:	9a07      	ldr	r2, [sp, #28]
 8008f88:	4654      	mov	r4, sl
 8008f8a:	2000      	movs	r0, #0
 8008f8c:	f04f 0c0a 	mov.w	ip, #10
 8008f90:	4621      	mov	r1, r4
 8008f92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f96:	3b30      	subs	r3, #48	; 0x30
 8008f98:	2b09      	cmp	r3, #9
 8008f9a:	d94e      	bls.n	800903a <_svfiprintf_r+0x17e>
 8008f9c:	b1b0      	cbz	r0, 8008fcc <_svfiprintf_r+0x110>
 8008f9e:	9207      	str	r2, [sp, #28]
 8008fa0:	e014      	b.n	8008fcc <_svfiprintf_r+0x110>
 8008fa2:	eba0 0308 	sub.w	r3, r0, r8
 8008fa6:	fa09 f303 	lsl.w	r3, r9, r3
 8008faa:	4313      	orrs	r3, r2
 8008fac:	9304      	str	r3, [sp, #16]
 8008fae:	46a2      	mov	sl, r4
 8008fb0:	e7d2      	b.n	8008f58 <_svfiprintf_r+0x9c>
 8008fb2:	9b03      	ldr	r3, [sp, #12]
 8008fb4:	1d19      	adds	r1, r3, #4
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	9103      	str	r1, [sp, #12]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	bfbb      	ittet	lt
 8008fbe:	425b      	neglt	r3, r3
 8008fc0:	f042 0202 	orrlt.w	r2, r2, #2
 8008fc4:	9307      	strge	r3, [sp, #28]
 8008fc6:	9307      	strlt	r3, [sp, #28]
 8008fc8:	bfb8      	it	lt
 8008fca:	9204      	strlt	r2, [sp, #16]
 8008fcc:	7823      	ldrb	r3, [r4, #0]
 8008fce:	2b2e      	cmp	r3, #46	; 0x2e
 8008fd0:	d10c      	bne.n	8008fec <_svfiprintf_r+0x130>
 8008fd2:	7863      	ldrb	r3, [r4, #1]
 8008fd4:	2b2a      	cmp	r3, #42	; 0x2a
 8008fd6:	d135      	bne.n	8009044 <_svfiprintf_r+0x188>
 8008fd8:	9b03      	ldr	r3, [sp, #12]
 8008fda:	1d1a      	adds	r2, r3, #4
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	9203      	str	r2, [sp, #12]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	bfb8      	it	lt
 8008fe4:	f04f 33ff 	movlt.w	r3, #4294967295
 8008fe8:	3402      	adds	r4, #2
 8008fea:	9305      	str	r3, [sp, #20]
 8008fec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80090b8 <_svfiprintf_r+0x1fc>
 8008ff0:	7821      	ldrb	r1, [r4, #0]
 8008ff2:	2203      	movs	r2, #3
 8008ff4:	4650      	mov	r0, sl
 8008ff6:	f7f7 f8fb 	bl	80001f0 <memchr>
 8008ffa:	b140      	cbz	r0, 800900e <_svfiprintf_r+0x152>
 8008ffc:	2340      	movs	r3, #64	; 0x40
 8008ffe:	eba0 000a 	sub.w	r0, r0, sl
 8009002:	fa03 f000 	lsl.w	r0, r3, r0
 8009006:	9b04      	ldr	r3, [sp, #16]
 8009008:	4303      	orrs	r3, r0
 800900a:	3401      	adds	r4, #1
 800900c:	9304      	str	r3, [sp, #16]
 800900e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009012:	4826      	ldr	r0, [pc, #152]	; (80090ac <_svfiprintf_r+0x1f0>)
 8009014:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009018:	2206      	movs	r2, #6
 800901a:	f7f7 f8e9 	bl	80001f0 <memchr>
 800901e:	2800      	cmp	r0, #0
 8009020:	d038      	beq.n	8009094 <_svfiprintf_r+0x1d8>
 8009022:	4b23      	ldr	r3, [pc, #140]	; (80090b0 <_svfiprintf_r+0x1f4>)
 8009024:	bb1b      	cbnz	r3, 800906e <_svfiprintf_r+0x1b2>
 8009026:	9b03      	ldr	r3, [sp, #12]
 8009028:	3307      	adds	r3, #7
 800902a:	f023 0307 	bic.w	r3, r3, #7
 800902e:	3308      	adds	r3, #8
 8009030:	9303      	str	r3, [sp, #12]
 8009032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009034:	4433      	add	r3, r6
 8009036:	9309      	str	r3, [sp, #36]	; 0x24
 8009038:	e767      	b.n	8008f0a <_svfiprintf_r+0x4e>
 800903a:	fb0c 3202 	mla	r2, ip, r2, r3
 800903e:	460c      	mov	r4, r1
 8009040:	2001      	movs	r0, #1
 8009042:	e7a5      	b.n	8008f90 <_svfiprintf_r+0xd4>
 8009044:	2300      	movs	r3, #0
 8009046:	3401      	adds	r4, #1
 8009048:	9305      	str	r3, [sp, #20]
 800904a:	4619      	mov	r1, r3
 800904c:	f04f 0c0a 	mov.w	ip, #10
 8009050:	4620      	mov	r0, r4
 8009052:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009056:	3a30      	subs	r2, #48	; 0x30
 8009058:	2a09      	cmp	r2, #9
 800905a:	d903      	bls.n	8009064 <_svfiprintf_r+0x1a8>
 800905c:	2b00      	cmp	r3, #0
 800905e:	d0c5      	beq.n	8008fec <_svfiprintf_r+0x130>
 8009060:	9105      	str	r1, [sp, #20]
 8009062:	e7c3      	b.n	8008fec <_svfiprintf_r+0x130>
 8009064:	fb0c 2101 	mla	r1, ip, r1, r2
 8009068:	4604      	mov	r4, r0
 800906a:	2301      	movs	r3, #1
 800906c:	e7f0      	b.n	8009050 <_svfiprintf_r+0x194>
 800906e:	ab03      	add	r3, sp, #12
 8009070:	9300      	str	r3, [sp, #0]
 8009072:	462a      	mov	r2, r5
 8009074:	4b0f      	ldr	r3, [pc, #60]	; (80090b4 <_svfiprintf_r+0x1f8>)
 8009076:	a904      	add	r1, sp, #16
 8009078:	4638      	mov	r0, r7
 800907a:	f7fe f80f 	bl	800709c <_printf_float>
 800907e:	1c42      	adds	r2, r0, #1
 8009080:	4606      	mov	r6, r0
 8009082:	d1d6      	bne.n	8009032 <_svfiprintf_r+0x176>
 8009084:	89ab      	ldrh	r3, [r5, #12]
 8009086:	065b      	lsls	r3, r3, #25
 8009088:	f53f af2c 	bmi.w	8008ee4 <_svfiprintf_r+0x28>
 800908c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800908e:	b01d      	add	sp, #116	; 0x74
 8009090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009094:	ab03      	add	r3, sp, #12
 8009096:	9300      	str	r3, [sp, #0]
 8009098:	462a      	mov	r2, r5
 800909a:	4b06      	ldr	r3, [pc, #24]	; (80090b4 <_svfiprintf_r+0x1f8>)
 800909c:	a904      	add	r1, sp, #16
 800909e:	4638      	mov	r0, r7
 80090a0:	f7fe faa0 	bl	80075e4 <_printf_i>
 80090a4:	e7eb      	b.n	800907e <_svfiprintf_r+0x1c2>
 80090a6:	bf00      	nop
 80090a8:	0800a414 	.word	0x0800a414
 80090ac:	0800a41e 	.word	0x0800a41e
 80090b0:	0800709d 	.word	0x0800709d
 80090b4:	08008e05 	.word	0x08008e05
 80090b8:	0800a41a 	.word	0x0800a41a

080090bc <_sbrk_r>:
 80090bc:	b538      	push	{r3, r4, r5, lr}
 80090be:	4d06      	ldr	r5, [pc, #24]	; (80090d8 <_sbrk_r+0x1c>)
 80090c0:	2300      	movs	r3, #0
 80090c2:	4604      	mov	r4, r0
 80090c4:	4608      	mov	r0, r1
 80090c6:	602b      	str	r3, [r5, #0]
 80090c8:	f7f9 fc64 	bl	8002994 <_sbrk>
 80090cc:	1c43      	adds	r3, r0, #1
 80090ce:	d102      	bne.n	80090d6 <_sbrk_r+0x1a>
 80090d0:	682b      	ldr	r3, [r5, #0]
 80090d2:	b103      	cbz	r3, 80090d6 <_sbrk_r+0x1a>
 80090d4:	6023      	str	r3, [r4, #0]
 80090d6:	bd38      	pop	{r3, r4, r5, pc}
 80090d8:	20000484 	.word	0x20000484

080090dc <__assert_func>:
 80090dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80090de:	4614      	mov	r4, r2
 80090e0:	461a      	mov	r2, r3
 80090e2:	4b09      	ldr	r3, [pc, #36]	; (8009108 <__assert_func+0x2c>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4605      	mov	r5, r0
 80090e8:	68d8      	ldr	r0, [r3, #12]
 80090ea:	b14c      	cbz	r4, 8009100 <__assert_func+0x24>
 80090ec:	4b07      	ldr	r3, [pc, #28]	; (800910c <__assert_func+0x30>)
 80090ee:	9100      	str	r1, [sp, #0]
 80090f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80090f4:	4906      	ldr	r1, [pc, #24]	; (8009110 <__assert_func+0x34>)
 80090f6:	462b      	mov	r3, r5
 80090f8:	f000 f80e 	bl	8009118 <fiprintf>
 80090fc:	f000 faa4 	bl	8009648 <abort>
 8009100:	4b04      	ldr	r3, [pc, #16]	; (8009114 <__assert_func+0x38>)
 8009102:	461c      	mov	r4, r3
 8009104:	e7f3      	b.n	80090ee <__assert_func+0x12>
 8009106:	bf00      	nop
 8009108:	2000000c 	.word	0x2000000c
 800910c:	0800a425 	.word	0x0800a425
 8009110:	0800a432 	.word	0x0800a432
 8009114:	0800a460 	.word	0x0800a460

08009118 <fiprintf>:
 8009118:	b40e      	push	{r1, r2, r3}
 800911a:	b503      	push	{r0, r1, lr}
 800911c:	4601      	mov	r1, r0
 800911e:	ab03      	add	r3, sp, #12
 8009120:	4805      	ldr	r0, [pc, #20]	; (8009138 <fiprintf+0x20>)
 8009122:	f853 2b04 	ldr.w	r2, [r3], #4
 8009126:	6800      	ldr	r0, [r0, #0]
 8009128:	9301      	str	r3, [sp, #4]
 800912a:	f000 f88f 	bl	800924c <_vfiprintf_r>
 800912e:	b002      	add	sp, #8
 8009130:	f85d eb04 	ldr.w	lr, [sp], #4
 8009134:	b003      	add	sp, #12
 8009136:	4770      	bx	lr
 8009138:	2000000c 	.word	0x2000000c

0800913c <__ascii_mbtowc>:
 800913c:	b082      	sub	sp, #8
 800913e:	b901      	cbnz	r1, 8009142 <__ascii_mbtowc+0x6>
 8009140:	a901      	add	r1, sp, #4
 8009142:	b142      	cbz	r2, 8009156 <__ascii_mbtowc+0x1a>
 8009144:	b14b      	cbz	r3, 800915a <__ascii_mbtowc+0x1e>
 8009146:	7813      	ldrb	r3, [r2, #0]
 8009148:	600b      	str	r3, [r1, #0]
 800914a:	7812      	ldrb	r2, [r2, #0]
 800914c:	1e10      	subs	r0, r2, #0
 800914e:	bf18      	it	ne
 8009150:	2001      	movne	r0, #1
 8009152:	b002      	add	sp, #8
 8009154:	4770      	bx	lr
 8009156:	4610      	mov	r0, r2
 8009158:	e7fb      	b.n	8009152 <__ascii_mbtowc+0x16>
 800915a:	f06f 0001 	mvn.w	r0, #1
 800915e:	e7f8      	b.n	8009152 <__ascii_mbtowc+0x16>

08009160 <memmove>:
 8009160:	4288      	cmp	r0, r1
 8009162:	b510      	push	{r4, lr}
 8009164:	eb01 0402 	add.w	r4, r1, r2
 8009168:	d902      	bls.n	8009170 <memmove+0x10>
 800916a:	4284      	cmp	r4, r0
 800916c:	4623      	mov	r3, r4
 800916e:	d807      	bhi.n	8009180 <memmove+0x20>
 8009170:	1e43      	subs	r3, r0, #1
 8009172:	42a1      	cmp	r1, r4
 8009174:	d008      	beq.n	8009188 <memmove+0x28>
 8009176:	f811 2b01 	ldrb.w	r2, [r1], #1
 800917a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800917e:	e7f8      	b.n	8009172 <memmove+0x12>
 8009180:	4402      	add	r2, r0
 8009182:	4601      	mov	r1, r0
 8009184:	428a      	cmp	r2, r1
 8009186:	d100      	bne.n	800918a <memmove+0x2a>
 8009188:	bd10      	pop	{r4, pc}
 800918a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800918e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009192:	e7f7      	b.n	8009184 <memmove+0x24>

08009194 <__malloc_lock>:
 8009194:	4801      	ldr	r0, [pc, #4]	; (800919c <__malloc_lock+0x8>)
 8009196:	f000 bc17 	b.w	80099c8 <__retarget_lock_acquire_recursive>
 800919a:	bf00      	nop
 800919c:	2000048c 	.word	0x2000048c

080091a0 <__malloc_unlock>:
 80091a0:	4801      	ldr	r0, [pc, #4]	; (80091a8 <__malloc_unlock+0x8>)
 80091a2:	f000 bc12 	b.w	80099ca <__retarget_lock_release_recursive>
 80091a6:	bf00      	nop
 80091a8:	2000048c 	.word	0x2000048c

080091ac <_realloc_r>:
 80091ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ae:	4607      	mov	r7, r0
 80091b0:	4614      	mov	r4, r2
 80091b2:	460e      	mov	r6, r1
 80091b4:	b921      	cbnz	r1, 80091c0 <_realloc_r+0x14>
 80091b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80091ba:	4611      	mov	r1, r2
 80091bc:	f7ff bdc8 	b.w	8008d50 <_malloc_r>
 80091c0:	b922      	cbnz	r2, 80091cc <_realloc_r+0x20>
 80091c2:	f7ff fd75 	bl	8008cb0 <_free_r>
 80091c6:	4625      	mov	r5, r4
 80091c8:	4628      	mov	r0, r5
 80091ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091cc:	f000 fc62 	bl	8009a94 <_malloc_usable_size_r>
 80091d0:	42a0      	cmp	r0, r4
 80091d2:	d20f      	bcs.n	80091f4 <_realloc_r+0x48>
 80091d4:	4621      	mov	r1, r4
 80091d6:	4638      	mov	r0, r7
 80091d8:	f7ff fdba 	bl	8008d50 <_malloc_r>
 80091dc:	4605      	mov	r5, r0
 80091de:	2800      	cmp	r0, #0
 80091e0:	d0f2      	beq.n	80091c8 <_realloc_r+0x1c>
 80091e2:	4631      	mov	r1, r6
 80091e4:	4622      	mov	r2, r4
 80091e6:	f7ff f9c7 	bl	8008578 <memcpy>
 80091ea:	4631      	mov	r1, r6
 80091ec:	4638      	mov	r0, r7
 80091ee:	f7ff fd5f 	bl	8008cb0 <_free_r>
 80091f2:	e7e9      	b.n	80091c8 <_realloc_r+0x1c>
 80091f4:	4635      	mov	r5, r6
 80091f6:	e7e7      	b.n	80091c8 <_realloc_r+0x1c>

080091f8 <__sfputc_r>:
 80091f8:	6893      	ldr	r3, [r2, #8]
 80091fa:	3b01      	subs	r3, #1
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	b410      	push	{r4}
 8009200:	6093      	str	r3, [r2, #8]
 8009202:	da08      	bge.n	8009216 <__sfputc_r+0x1e>
 8009204:	6994      	ldr	r4, [r2, #24]
 8009206:	42a3      	cmp	r3, r4
 8009208:	db01      	blt.n	800920e <__sfputc_r+0x16>
 800920a:	290a      	cmp	r1, #10
 800920c:	d103      	bne.n	8009216 <__sfputc_r+0x1e>
 800920e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009212:	f000 b94b 	b.w	80094ac <__swbuf_r>
 8009216:	6813      	ldr	r3, [r2, #0]
 8009218:	1c58      	adds	r0, r3, #1
 800921a:	6010      	str	r0, [r2, #0]
 800921c:	7019      	strb	r1, [r3, #0]
 800921e:	4608      	mov	r0, r1
 8009220:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009224:	4770      	bx	lr

08009226 <__sfputs_r>:
 8009226:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009228:	4606      	mov	r6, r0
 800922a:	460f      	mov	r7, r1
 800922c:	4614      	mov	r4, r2
 800922e:	18d5      	adds	r5, r2, r3
 8009230:	42ac      	cmp	r4, r5
 8009232:	d101      	bne.n	8009238 <__sfputs_r+0x12>
 8009234:	2000      	movs	r0, #0
 8009236:	e007      	b.n	8009248 <__sfputs_r+0x22>
 8009238:	f814 1b01 	ldrb.w	r1, [r4], #1
 800923c:	463a      	mov	r2, r7
 800923e:	4630      	mov	r0, r6
 8009240:	f7ff ffda 	bl	80091f8 <__sfputc_r>
 8009244:	1c43      	adds	r3, r0, #1
 8009246:	d1f3      	bne.n	8009230 <__sfputs_r+0xa>
 8009248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800924c <_vfiprintf_r>:
 800924c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009250:	460d      	mov	r5, r1
 8009252:	b09d      	sub	sp, #116	; 0x74
 8009254:	4614      	mov	r4, r2
 8009256:	4698      	mov	r8, r3
 8009258:	4606      	mov	r6, r0
 800925a:	b118      	cbz	r0, 8009264 <_vfiprintf_r+0x18>
 800925c:	6983      	ldr	r3, [r0, #24]
 800925e:	b90b      	cbnz	r3, 8009264 <_vfiprintf_r+0x18>
 8009260:	f000 fb14 	bl	800988c <__sinit>
 8009264:	4b89      	ldr	r3, [pc, #548]	; (800948c <_vfiprintf_r+0x240>)
 8009266:	429d      	cmp	r5, r3
 8009268:	d11b      	bne.n	80092a2 <_vfiprintf_r+0x56>
 800926a:	6875      	ldr	r5, [r6, #4]
 800926c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800926e:	07d9      	lsls	r1, r3, #31
 8009270:	d405      	bmi.n	800927e <_vfiprintf_r+0x32>
 8009272:	89ab      	ldrh	r3, [r5, #12]
 8009274:	059a      	lsls	r2, r3, #22
 8009276:	d402      	bmi.n	800927e <_vfiprintf_r+0x32>
 8009278:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800927a:	f000 fba5 	bl	80099c8 <__retarget_lock_acquire_recursive>
 800927e:	89ab      	ldrh	r3, [r5, #12]
 8009280:	071b      	lsls	r3, r3, #28
 8009282:	d501      	bpl.n	8009288 <_vfiprintf_r+0x3c>
 8009284:	692b      	ldr	r3, [r5, #16]
 8009286:	b9eb      	cbnz	r3, 80092c4 <_vfiprintf_r+0x78>
 8009288:	4629      	mov	r1, r5
 800928a:	4630      	mov	r0, r6
 800928c:	f000 f96e 	bl	800956c <__swsetup_r>
 8009290:	b1c0      	cbz	r0, 80092c4 <_vfiprintf_r+0x78>
 8009292:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009294:	07dc      	lsls	r4, r3, #31
 8009296:	d50e      	bpl.n	80092b6 <_vfiprintf_r+0x6a>
 8009298:	f04f 30ff 	mov.w	r0, #4294967295
 800929c:	b01d      	add	sp, #116	; 0x74
 800929e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092a2:	4b7b      	ldr	r3, [pc, #492]	; (8009490 <_vfiprintf_r+0x244>)
 80092a4:	429d      	cmp	r5, r3
 80092a6:	d101      	bne.n	80092ac <_vfiprintf_r+0x60>
 80092a8:	68b5      	ldr	r5, [r6, #8]
 80092aa:	e7df      	b.n	800926c <_vfiprintf_r+0x20>
 80092ac:	4b79      	ldr	r3, [pc, #484]	; (8009494 <_vfiprintf_r+0x248>)
 80092ae:	429d      	cmp	r5, r3
 80092b0:	bf08      	it	eq
 80092b2:	68f5      	ldreq	r5, [r6, #12]
 80092b4:	e7da      	b.n	800926c <_vfiprintf_r+0x20>
 80092b6:	89ab      	ldrh	r3, [r5, #12]
 80092b8:	0598      	lsls	r0, r3, #22
 80092ba:	d4ed      	bmi.n	8009298 <_vfiprintf_r+0x4c>
 80092bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092be:	f000 fb84 	bl	80099ca <__retarget_lock_release_recursive>
 80092c2:	e7e9      	b.n	8009298 <_vfiprintf_r+0x4c>
 80092c4:	2300      	movs	r3, #0
 80092c6:	9309      	str	r3, [sp, #36]	; 0x24
 80092c8:	2320      	movs	r3, #32
 80092ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80092ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80092d2:	2330      	movs	r3, #48	; 0x30
 80092d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009498 <_vfiprintf_r+0x24c>
 80092d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80092dc:	f04f 0901 	mov.w	r9, #1
 80092e0:	4623      	mov	r3, r4
 80092e2:	469a      	mov	sl, r3
 80092e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092e8:	b10a      	cbz	r2, 80092ee <_vfiprintf_r+0xa2>
 80092ea:	2a25      	cmp	r2, #37	; 0x25
 80092ec:	d1f9      	bne.n	80092e2 <_vfiprintf_r+0x96>
 80092ee:	ebba 0b04 	subs.w	fp, sl, r4
 80092f2:	d00b      	beq.n	800930c <_vfiprintf_r+0xc0>
 80092f4:	465b      	mov	r3, fp
 80092f6:	4622      	mov	r2, r4
 80092f8:	4629      	mov	r1, r5
 80092fa:	4630      	mov	r0, r6
 80092fc:	f7ff ff93 	bl	8009226 <__sfputs_r>
 8009300:	3001      	adds	r0, #1
 8009302:	f000 80aa 	beq.w	800945a <_vfiprintf_r+0x20e>
 8009306:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009308:	445a      	add	r2, fp
 800930a:	9209      	str	r2, [sp, #36]	; 0x24
 800930c:	f89a 3000 	ldrb.w	r3, [sl]
 8009310:	2b00      	cmp	r3, #0
 8009312:	f000 80a2 	beq.w	800945a <_vfiprintf_r+0x20e>
 8009316:	2300      	movs	r3, #0
 8009318:	f04f 32ff 	mov.w	r2, #4294967295
 800931c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009320:	f10a 0a01 	add.w	sl, sl, #1
 8009324:	9304      	str	r3, [sp, #16]
 8009326:	9307      	str	r3, [sp, #28]
 8009328:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800932c:	931a      	str	r3, [sp, #104]	; 0x68
 800932e:	4654      	mov	r4, sl
 8009330:	2205      	movs	r2, #5
 8009332:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009336:	4858      	ldr	r0, [pc, #352]	; (8009498 <_vfiprintf_r+0x24c>)
 8009338:	f7f6 ff5a 	bl	80001f0 <memchr>
 800933c:	9a04      	ldr	r2, [sp, #16]
 800933e:	b9d8      	cbnz	r0, 8009378 <_vfiprintf_r+0x12c>
 8009340:	06d1      	lsls	r1, r2, #27
 8009342:	bf44      	itt	mi
 8009344:	2320      	movmi	r3, #32
 8009346:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800934a:	0713      	lsls	r3, r2, #28
 800934c:	bf44      	itt	mi
 800934e:	232b      	movmi	r3, #43	; 0x2b
 8009350:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009354:	f89a 3000 	ldrb.w	r3, [sl]
 8009358:	2b2a      	cmp	r3, #42	; 0x2a
 800935a:	d015      	beq.n	8009388 <_vfiprintf_r+0x13c>
 800935c:	9a07      	ldr	r2, [sp, #28]
 800935e:	4654      	mov	r4, sl
 8009360:	2000      	movs	r0, #0
 8009362:	f04f 0c0a 	mov.w	ip, #10
 8009366:	4621      	mov	r1, r4
 8009368:	f811 3b01 	ldrb.w	r3, [r1], #1
 800936c:	3b30      	subs	r3, #48	; 0x30
 800936e:	2b09      	cmp	r3, #9
 8009370:	d94e      	bls.n	8009410 <_vfiprintf_r+0x1c4>
 8009372:	b1b0      	cbz	r0, 80093a2 <_vfiprintf_r+0x156>
 8009374:	9207      	str	r2, [sp, #28]
 8009376:	e014      	b.n	80093a2 <_vfiprintf_r+0x156>
 8009378:	eba0 0308 	sub.w	r3, r0, r8
 800937c:	fa09 f303 	lsl.w	r3, r9, r3
 8009380:	4313      	orrs	r3, r2
 8009382:	9304      	str	r3, [sp, #16]
 8009384:	46a2      	mov	sl, r4
 8009386:	e7d2      	b.n	800932e <_vfiprintf_r+0xe2>
 8009388:	9b03      	ldr	r3, [sp, #12]
 800938a:	1d19      	adds	r1, r3, #4
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	9103      	str	r1, [sp, #12]
 8009390:	2b00      	cmp	r3, #0
 8009392:	bfbb      	ittet	lt
 8009394:	425b      	neglt	r3, r3
 8009396:	f042 0202 	orrlt.w	r2, r2, #2
 800939a:	9307      	strge	r3, [sp, #28]
 800939c:	9307      	strlt	r3, [sp, #28]
 800939e:	bfb8      	it	lt
 80093a0:	9204      	strlt	r2, [sp, #16]
 80093a2:	7823      	ldrb	r3, [r4, #0]
 80093a4:	2b2e      	cmp	r3, #46	; 0x2e
 80093a6:	d10c      	bne.n	80093c2 <_vfiprintf_r+0x176>
 80093a8:	7863      	ldrb	r3, [r4, #1]
 80093aa:	2b2a      	cmp	r3, #42	; 0x2a
 80093ac:	d135      	bne.n	800941a <_vfiprintf_r+0x1ce>
 80093ae:	9b03      	ldr	r3, [sp, #12]
 80093b0:	1d1a      	adds	r2, r3, #4
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	9203      	str	r2, [sp, #12]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	bfb8      	it	lt
 80093ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80093be:	3402      	adds	r4, #2
 80093c0:	9305      	str	r3, [sp, #20]
 80093c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80094a8 <_vfiprintf_r+0x25c>
 80093c6:	7821      	ldrb	r1, [r4, #0]
 80093c8:	2203      	movs	r2, #3
 80093ca:	4650      	mov	r0, sl
 80093cc:	f7f6 ff10 	bl	80001f0 <memchr>
 80093d0:	b140      	cbz	r0, 80093e4 <_vfiprintf_r+0x198>
 80093d2:	2340      	movs	r3, #64	; 0x40
 80093d4:	eba0 000a 	sub.w	r0, r0, sl
 80093d8:	fa03 f000 	lsl.w	r0, r3, r0
 80093dc:	9b04      	ldr	r3, [sp, #16]
 80093de:	4303      	orrs	r3, r0
 80093e0:	3401      	adds	r4, #1
 80093e2:	9304      	str	r3, [sp, #16]
 80093e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093e8:	482c      	ldr	r0, [pc, #176]	; (800949c <_vfiprintf_r+0x250>)
 80093ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80093ee:	2206      	movs	r2, #6
 80093f0:	f7f6 fefe 	bl	80001f0 <memchr>
 80093f4:	2800      	cmp	r0, #0
 80093f6:	d03f      	beq.n	8009478 <_vfiprintf_r+0x22c>
 80093f8:	4b29      	ldr	r3, [pc, #164]	; (80094a0 <_vfiprintf_r+0x254>)
 80093fa:	bb1b      	cbnz	r3, 8009444 <_vfiprintf_r+0x1f8>
 80093fc:	9b03      	ldr	r3, [sp, #12]
 80093fe:	3307      	adds	r3, #7
 8009400:	f023 0307 	bic.w	r3, r3, #7
 8009404:	3308      	adds	r3, #8
 8009406:	9303      	str	r3, [sp, #12]
 8009408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800940a:	443b      	add	r3, r7
 800940c:	9309      	str	r3, [sp, #36]	; 0x24
 800940e:	e767      	b.n	80092e0 <_vfiprintf_r+0x94>
 8009410:	fb0c 3202 	mla	r2, ip, r2, r3
 8009414:	460c      	mov	r4, r1
 8009416:	2001      	movs	r0, #1
 8009418:	e7a5      	b.n	8009366 <_vfiprintf_r+0x11a>
 800941a:	2300      	movs	r3, #0
 800941c:	3401      	adds	r4, #1
 800941e:	9305      	str	r3, [sp, #20]
 8009420:	4619      	mov	r1, r3
 8009422:	f04f 0c0a 	mov.w	ip, #10
 8009426:	4620      	mov	r0, r4
 8009428:	f810 2b01 	ldrb.w	r2, [r0], #1
 800942c:	3a30      	subs	r2, #48	; 0x30
 800942e:	2a09      	cmp	r2, #9
 8009430:	d903      	bls.n	800943a <_vfiprintf_r+0x1ee>
 8009432:	2b00      	cmp	r3, #0
 8009434:	d0c5      	beq.n	80093c2 <_vfiprintf_r+0x176>
 8009436:	9105      	str	r1, [sp, #20]
 8009438:	e7c3      	b.n	80093c2 <_vfiprintf_r+0x176>
 800943a:	fb0c 2101 	mla	r1, ip, r1, r2
 800943e:	4604      	mov	r4, r0
 8009440:	2301      	movs	r3, #1
 8009442:	e7f0      	b.n	8009426 <_vfiprintf_r+0x1da>
 8009444:	ab03      	add	r3, sp, #12
 8009446:	9300      	str	r3, [sp, #0]
 8009448:	462a      	mov	r2, r5
 800944a:	4b16      	ldr	r3, [pc, #88]	; (80094a4 <_vfiprintf_r+0x258>)
 800944c:	a904      	add	r1, sp, #16
 800944e:	4630      	mov	r0, r6
 8009450:	f7fd fe24 	bl	800709c <_printf_float>
 8009454:	4607      	mov	r7, r0
 8009456:	1c78      	adds	r0, r7, #1
 8009458:	d1d6      	bne.n	8009408 <_vfiprintf_r+0x1bc>
 800945a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800945c:	07d9      	lsls	r1, r3, #31
 800945e:	d405      	bmi.n	800946c <_vfiprintf_r+0x220>
 8009460:	89ab      	ldrh	r3, [r5, #12]
 8009462:	059a      	lsls	r2, r3, #22
 8009464:	d402      	bmi.n	800946c <_vfiprintf_r+0x220>
 8009466:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009468:	f000 faaf 	bl	80099ca <__retarget_lock_release_recursive>
 800946c:	89ab      	ldrh	r3, [r5, #12]
 800946e:	065b      	lsls	r3, r3, #25
 8009470:	f53f af12 	bmi.w	8009298 <_vfiprintf_r+0x4c>
 8009474:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009476:	e711      	b.n	800929c <_vfiprintf_r+0x50>
 8009478:	ab03      	add	r3, sp, #12
 800947a:	9300      	str	r3, [sp, #0]
 800947c:	462a      	mov	r2, r5
 800947e:	4b09      	ldr	r3, [pc, #36]	; (80094a4 <_vfiprintf_r+0x258>)
 8009480:	a904      	add	r1, sp, #16
 8009482:	4630      	mov	r0, r6
 8009484:	f7fe f8ae 	bl	80075e4 <_printf_i>
 8009488:	e7e4      	b.n	8009454 <_vfiprintf_r+0x208>
 800948a:	bf00      	nop
 800948c:	0800a58c 	.word	0x0800a58c
 8009490:	0800a5ac 	.word	0x0800a5ac
 8009494:	0800a56c 	.word	0x0800a56c
 8009498:	0800a414 	.word	0x0800a414
 800949c:	0800a41e 	.word	0x0800a41e
 80094a0:	0800709d 	.word	0x0800709d
 80094a4:	08009227 	.word	0x08009227
 80094a8:	0800a41a 	.word	0x0800a41a

080094ac <__swbuf_r>:
 80094ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ae:	460e      	mov	r6, r1
 80094b0:	4614      	mov	r4, r2
 80094b2:	4605      	mov	r5, r0
 80094b4:	b118      	cbz	r0, 80094be <__swbuf_r+0x12>
 80094b6:	6983      	ldr	r3, [r0, #24]
 80094b8:	b90b      	cbnz	r3, 80094be <__swbuf_r+0x12>
 80094ba:	f000 f9e7 	bl	800988c <__sinit>
 80094be:	4b21      	ldr	r3, [pc, #132]	; (8009544 <__swbuf_r+0x98>)
 80094c0:	429c      	cmp	r4, r3
 80094c2:	d12b      	bne.n	800951c <__swbuf_r+0x70>
 80094c4:	686c      	ldr	r4, [r5, #4]
 80094c6:	69a3      	ldr	r3, [r4, #24]
 80094c8:	60a3      	str	r3, [r4, #8]
 80094ca:	89a3      	ldrh	r3, [r4, #12]
 80094cc:	071a      	lsls	r2, r3, #28
 80094ce:	d52f      	bpl.n	8009530 <__swbuf_r+0x84>
 80094d0:	6923      	ldr	r3, [r4, #16]
 80094d2:	b36b      	cbz	r3, 8009530 <__swbuf_r+0x84>
 80094d4:	6923      	ldr	r3, [r4, #16]
 80094d6:	6820      	ldr	r0, [r4, #0]
 80094d8:	1ac0      	subs	r0, r0, r3
 80094da:	6963      	ldr	r3, [r4, #20]
 80094dc:	b2f6      	uxtb	r6, r6
 80094de:	4283      	cmp	r3, r0
 80094e0:	4637      	mov	r7, r6
 80094e2:	dc04      	bgt.n	80094ee <__swbuf_r+0x42>
 80094e4:	4621      	mov	r1, r4
 80094e6:	4628      	mov	r0, r5
 80094e8:	f000 f93c 	bl	8009764 <_fflush_r>
 80094ec:	bb30      	cbnz	r0, 800953c <__swbuf_r+0x90>
 80094ee:	68a3      	ldr	r3, [r4, #8]
 80094f0:	3b01      	subs	r3, #1
 80094f2:	60a3      	str	r3, [r4, #8]
 80094f4:	6823      	ldr	r3, [r4, #0]
 80094f6:	1c5a      	adds	r2, r3, #1
 80094f8:	6022      	str	r2, [r4, #0]
 80094fa:	701e      	strb	r6, [r3, #0]
 80094fc:	6963      	ldr	r3, [r4, #20]
 80094fe:	3001      	adds	r0, #1
 8009500:	4283      	cmp	r3, r0
 8009502:	d004      	beq.n	800950e <__swbuf_r+0x62>
 8009504:	89a3      	ldrh	r3, [r4, #12]
 8009506:	07db      	lsls	r3, r3, #31
 8009508:	d506      	bpl.n	8009518 <__swbuf_r+0x6c>
 800950a:	2e0a      	cmp	r6, #10
 800950c:	d104      	bne.n	8009518 <__swbuf_r+0x6c>
 800950e:	4621      	mov	r1, r4
 8009510:	4628      	mov	r0, r5
 8009512:	f000 f927 	bl	8009764 <_fflush_r>
 8009516:	b988      	cbnz	r0, 800953c <__swbuf_r+0x90>
 8009518:	4638      	mov	r0, r7
 800951a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800951c:	4b0a      	ldr	r3, [pc, #40]	; (8009548 <__swbuf_r+0x9c>)
 800951e:	429c      	cmp	r4, r3
 8009520:	d101      	bne.n	8009526 <__swbuf_r+0x7a>
 8009522:	68ac      	ldr	r4, [r5, #8]
 8009524:	e7cf      	b.n	80094c6 <__swbuf_r+0x1a>
 8009526:	4b09      	ldr	r3, [pc, #36]	; (800954c <__swbuf_r+0xa0>)
 8009528:	429c      	cmp	r4, r3
 800952a:	bf08      	it	eq
 800952c:	68ec      	ldreq	r4, [r5, #12]
 800952e:	e7ca      	b.n	80094c6 <__swbuf_r+0x1a>
 8009530:	4621      	mov	r1, r4
 8009532:	4628      	mov	r0, r5
 8009534:	f000 f81a 	bl	800956c <__swsetup_r>
 8009538:	2800      	cmp	r0, #0
 800953a:	d0cb      	beq.n	80094d4 <__swbuf_r+0x28>
 800953c:	f04f 37ff 	mov.w	r7, #4294967295
 8009540:	e7ea      	b.n	8009518 <__swbuf_r+0x6c>
 8009542:	bf00      	nop
 8009544:	0800a58c 	.word	0x0800a58c
 8009548:	0800a5ac 	.word	0x0800a5ac
 800954c:	0800a56c 	.word	0x0800a56c

08009550 <__ascii_wctomb>:
 8009550:	b149      	cbz	r1, 8009566 <__ascii_wctomb+0x16>
 8009552:	2aff      	cmp	r2, #255	; 0xff
 8009554:	bf85      	ittet	hi
 8009556:	238a      	movhi	r3, #138	; 0x8a
 8009558:	6003      	strhi	r3, [r0, #0]
 800955a:	700a      	strbls	r2, [r1, #0]
 800955c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009560:	bf98      	it	ls
 8009562:	2001      	movls	r0, #1
 8009564:	4770      	bx	lr
 8009566:	4608      	mov	r0, r1
 8009568:	4770      	bx	lr
	...

0800956c <__swsetup_r>:
 800956c:	4b32      	ldr	r3, [pc, #200]	; (8009638 <__swsetup_r+0xcc>)
 800956e:	b570      	push	{r4, r5, r6, lr}
 8009570:	681d      	ldr	r5, [r3, #0]
 8009572:	4606      	mov	r6, r0
 8009574:	460c      	mov	r4, r1
 8009576:	b125      	cbz	r5, 8009582 <__swsetup_r+0x16>
 8009578:	69ab      	ldr	r3, [r5, #24]
 800957a:	b913      	cbnz	r3, 8009582 <__swsetup_r+0x16>
 800957c:	4628      	mov	r0, r5
 800957e:	f000 f985 	bl	800988c <__sinit>
 8009582:	4b2e      	ldr	r3, [pc, #184]	; (800963c <__swsetup_r+0xd0>)
 8009584:	429c      	cmp	r4, r3
 8009586:	d10f      	bne.n	80095a8 <__swsetup_r+0x3c>
 8009588:	686c      	ldr	r4, [r5, #4]
 800958a:	89a3      	ldrh	r3, [r4, #12]
 800958c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009590:	0719      	lsls	r1, r3, #28
 8009592:	d42c      	bmi.n	80095ee <__swsetup_r+0x82>
 8009594:	06dd      	lsls	r5, r3, #27
 8009596:	d411      	bmi.n	80095bc <__swsetup_r+0x50>
 8009598:	2309      	movs	r3, #9
 800959a:	6033      	str	r3, [r6, #0]
 800959c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80095a0:	81a3      	strh	r3, [r4, #12]
 80095a2:	f04f 30ff 	mov.w	r0, #4294967295
 80095a6:	e03e      	b.n	8009626 <__swsetup_r+0xba>
 80095a8:	4b25      	ldr	r3, [pc, #148]	; (8009640 <__swsetup_r+0xd4>)
 80095aa:	429c      	cmp	r4, r3
 80095ac:	d101      	bne.n	80095b2 <__swsetup_r+0x46>
 80095ae:	68ac      	ldr	r4, [r5, #8]
 80095b0:	e7eb      	b.n	800958a <__swsetup_r+0x1e>
 80095b2:	4b24      	ldr	r3, [pc, #144]	; (8009644 <__swsetup_r+0xd8>)
 80095b4:	429c      	cmp	r4, r3
 80095b6:	bf08      	it	eq
 80095b8:	68ec      	ldreq	r4, [r5, #12]
 80095ba:	e7e6      	b.n	800958a <__swsetup_r+0x1e>
 80095bc:	0758      	lsls	r0, r3, #29
 80095be:	d512      	bpl.n	80095e6 <__swsetup_r+0x7a>
 80095c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095c2:	b141      	cbz	r1, 80095d6 <__swsetup_r+0x6a>
 80095c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095c8:	4299      	cmp	r1, r3
 80095ca:	d002      	beq.n	80095d2 <__swsetup_r+0x66>
 80095cc:	4630      	mov	r0, r6
 80095ce:	f7ff fb6f 	bl	8008cb0 <_free_r>
 80095d2:	2300      	movs	r3, #0
 80095d4:	6363      	str	r3, [r4, #52]	; 0x34
 80095d6:	89a3      	ldrh	r3, [r4, #12]
 80095d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80095dc:	81a3      	strh	r3, [r4, #12]
 80095de:	2300      	movs	r3, #0
 80095e0:	6063      	str	r3, [r4, #4]
 80095e2:	6923      	ldr	r3, [r4, #16]
 80095e4:	6023      	str	r3, [r4, #0]
 80095e6:	89a3      	ldrh	r3, [r4, #12]
 80095e8:	f043 0308 	orr.w	r3, r3, #8
 80095ec:	81a3      	strh	r3, [r4, #12]
 80095ee:	6923      	ldr	r3, [r4, #16]
 80095f0:	b94b      	cbnz	r3, 8009606 <__swsetup_r+0x9a>
 80095f2:	89a3      	ldrh	r3, [r4, #12]
 80095f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80095f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095fc:	d003      	beq.n	8009606 <__swsetup_r+0x9a>
 80095fe:	4621      	mov	r1, r4
 8009600:	4630      	mov	r0, r6
 8009602:	f000 fa07 	bl	8009a14 <__smakebuf_r>
 8009606:	89a0      	ldrh	r0, [r4, #12]
 8009608:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800960c:	f010 0301 	ands.w	r3, r0, #1
 8009610:	d00a      	beq.n	8009628 <__swsetup_r+0xbc>
 8009612:	2300      	movs	r3, #0
 8009614:	60a3      	str	r3, [r4, #8]
 8009616:	6963      	ldr	r3, [r4, #20]
 8009618:	425b      	negs	r3, r3
 800961a:	61a3      	str	r3, [r4, #24]
 800961c:	6923      	ldr	r3, [r4, #16]
 800961e:	b943      	cbnz	r3, 8009632 <__swsetup_r+0xc6>
 8009620:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009624:	d1ba      	bne.n	800959c <__swsetup_r+0x30>
 8009626:	bd70      	pop	{r4, r5, r6, pc}
 8009628:	0781      	lsls	r1, r0, #30
 800962a:	bf58      	it	pl
 800962c:	6963      	ldrpl	r3, [r4, #20]
 800962e:	60a3      	str	r3, [r4, #8]
 8009630:	e7f4      	b.n	800961c <__swsetup_r+0xb0>
 8009632:	2000      	movs	r0, #0
 8009634:	e7f7      	b.n	8009626 <__swsetup_r+0xba>
 8009636:	bf00      	nop
 8009638:	2000000c 	.word	0x2000000c
 800963c:	0800a58c 	.word	0x0800a58c
 8009640:	0800a5ac 	.word	0x0800a5ac
 8009644:	0800a56c 	.word	0x0800a56c

08009648 <abort>:
 8009648:	b508      	push	{r3, lr}
 800964a:	2006      	movs	r0, #6
 800964c:	f000 fa52 	bl	8009af4 <raise>
 8009650:	2001      	movs	r0, #1
 8009652:	f7f9 f927 	bl	80028a4 <_exit>
	...

08009658 <__sflush_r>:
 8009658:	898a      	ldrh	r2, [r1, #12]
 800965a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800965e:	4605      	mov	r5, r0
 8009660:	0710      	lsls	r0, r2, #28
 8009662:	460c      	mov	r4, r1
 8009664:	d458      	bmi.n	8009718 <__sflush_r+0xc0>
 8009666:	684b      	ldr	r3, [r1, #4]
 8009668:	2b00      	cmp	r3, #0
 800966a:	dc05      	bgt.n	8009678 <__sflush_r+0x20>
 800966c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800966e:	2b00      	cmp	r3, #0
 8009670:	dc02      	bgt.n	8009678 <__sflush_r+0x20>
 8009672:	2000      	movs	r0, #0
 8009674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009678:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800967a:	2e00      	cmp	r6, #0
 800967c:	d0f9      	beq.n	8009672 <__sflush_r+0x1a>
 800967e:	2300      	movs	r3, #0
 8009680:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009684:	682f      	ldr	r7, [r5, #0]
 8009686:	602b      	str	r3, [r5, #0]
 8009688:	d032      	beq.n	80096f0 <__sflush_r+0x98>
 800968a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800968c:	89a3      	ldrh	r3, [r4, #12]
 800968e:	075a      	lsls	r2, r3, #29
 8009690:	d505      	bpl.n	800969e <__sflush_r+0x46>
 8009692:	6863      	ldr	r3, [r4, #4]
 8009694:	1ac0      	subs	r0, r0, r3
 8009696:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009698:	b10b      	cbz	r3, 800969e <__sflush_r+0x46>
 800969a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800969c:	1ac0      	subs	r0, r0, r3
 800969e:	2300      	movs	r3, #0
 80096a0:	4602      	mov	r2, r0
 80096a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096a4:	6a21      	ldr	r1, [r4, #32]
 80096a6:	4628      	mov	r0, r5
 80096a8:	47b0      	blx	r6
 80096aa:	1c43      	adds	r3, r0, #1
 80096ac:	89a3      	ldrh	r3, [r4, #12]
 80096ae:	d106      	bne.n	80096be <__sflush_r+0x66>
 80096b0:	6829      	ldr	r1, [r5, #0]
 80096b2:	291d      	cmp	r1, #29
 80096b4:	d82c      	bhi.n	8009710 <__sflush_r+0xb8>
 80096b6:	4a2a      	ldr	r2, [pc, #168]	; (8009760 <__sflush_r+0x108>)
 80096b8:	40ca      	lsrs	r2, r1
 80096ba:	07d6      	lsls	r6, r2, #31
 80096bc:	d528      	bpl.n	8009710 <__sflush_r+0xb8>
 80096be:	2200      	movs	r2, #0
 80096c0:	6062      	str	r2, [r4, #4]
 80096c2:	04d9      	lsls	r1, r3, #19
 80096c4:	6922      	ldr	r2, [r4, #16]
 80096c6:	6022      	str	r2, [r4, #0]
 80096c8:	d504      	bpl.n	80096d4 <__sflush_r+0x7c>
 80096ca:	1c42      	adds	r2, r0, #1
 80096cc:	d101      	bne.n	80096d2 <__sflush_r+0x7a>
 80096ce:	682b      	ldr	r3, [r5, #0]
 80096d0:	b903      	cbnz	r3, 80096d4 <__sflush_r+0x7c>
 80096d2:	6560      	str	r0, [r4, #84]	; 0x54
 80096d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096d6:	602f      	str	r7, [r5, #0]
 80096d8:	2900      	cmp	r1, #0
 80096da:	d0ca      	beq.n	8009672 <__sflush_r+0x1a>
 80096dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096e0:	4299      	cmp	r1, r3
 80096e2:	d002      	beq.n	80096ea <__sflush_r+0x92>
 80096e4:	4628      	mov	r0, r5
 80096e6:	f7ff fae3 	bl	8008cb0 <_free_r>
 80096ea:	2000      	movs	r0, #0
 80096ec:	6360      	str	r0, [r4, #52]	; 0x34
 80096ee:	e7c1      	b.n	8009674 <__sflush_r+0x1c>
 80096f0:	6a21      	ldr	r1, [r4, #32]
 80096f2:	2301      	movs	r3, #1
 80096f4:	4628      	mov	r0, r5
 80096f6:	47b0      	blx	r6
 80096f8:	1c41      	adds	r1, r0, #1
 80096fa:	d1c7      	bne.n	800968c <__sflush_r+0x34>
 80096fc:	682b      	ldr	r3, [r5, #0]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d0c4      	beq.n	800968c <__sflush_r+0x34>
 8009702:	2b1d      	cmp	r3, #29
 8009704:	d001      	beq.n	800970a <__sflush_r+0xb2>
 8009706:	2b16      	cmp	r3, #22
 8009708:	d101      	bne.n	800970e <__sflush_r+0xb6>
 800970a:	602f      	str	r7, [r5, #0]
 800970c:	e7b1      	b.n	8009672 <__sflush_r+0x1a>
 800970e:	89a3      	ldrh	r3, [r4, #12]
 8009710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009714:	81a3      	strh	r3, [r4, #12]
 8009716:	e7ad      	b.n	8009674 <__sflush_r+0x1c>
 8009718:	690f      	ldr	r7, [r1, #16]
 800971a:	2f00      	cmp	r7, #0
 800971c:	d0a9      	beq.n	8009672 <__sflush_r+0x1a>
 800971e:	0793      	lsls	r3, r2, #30
 8009720:	680e      	ldr	r6, [r1, #0]
 8009722:	bf08      	it	eq
 8009724:	694b      	ldreq	r3, [r1, #20]
 8009726:	600f      	str	r7, [r1, #0]
 8009728:	bf18      	it	ne
 800972a:	2300      	movne	r3, #0
 800972c:	eba6 0807 	sub.w	r8, r6, r7
 8009730:	608b      	str	r3, [r1, #8]
 8009732:	f1b8 0f00 	cmp.w	r8, #0
 8009736:	dd9c      	ble.n	8009672 <__sflush_r+0x1a>
 8009738:	6a21      	ldr	r1, [r4, #32]
 800973a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800973c:	4643      	mov	r3, r8
 800973e:	463a      	mov	r2, r7
 8009740:	4628      	mov	r0, r5
 8009742:	47b0      	blx	r6
 8009744:	2800      	cmp	r0, #0
 8009746:	dc06      	bgt.n	8009756 <__sflush_r+0xfe>
 8009748:	89a3      	ldrh	r3, [r4, #12]
 800974a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800974e:	81a3      	strh	r3, [r4, #12]
 8009750:	f04f 30ff 	mov.w	r0, #4294967295
 8009754:	e78e      	b.n	8009674 <__sflush_r+0x1c>
 8009756:	4407      	add	r7, r0
 8009758:	eba8 0800 	sub.w	r8, r8, r0
 800975c:	e7e9      	b.n	8009732 <__sflush_r+0xda>
 800975e:	bf00      	nop
 8009760:	20400001 	.word	0x20400001

08009764 <_fflush_r>:
 8009764:	b538      	push	{r3, r4, r5, lr}
 8009766:	690b      	ldr	r3, [r1, #16]
 8009768:	4605      	mov	r5, r0
 800976a:	460c      	mov	r4, r1
 800976c:	b913      	cbnz	r3, 8009774 <_fflush_r+0x10>
 800976e:	2500      	movs	r5, #0
 8009770:	4628      	mov	r0, r5
 8009772:	bd38      	pop	{r3, r4, r5, pc}
 8009774:	b118      	cbz	r0, 800977e <_fflush_r+0x1a>
 8009776:	6983      	ldr	r3, [r0, #24]
 8009778:	b90b      	cbnz	r3, 800977e <_fflush_r+0x1a>
 800977a:	f000 f887 	bl	800988c <__sinit>
 800977e:	4b14      	ldr	r3, [pc, #80]	; (80097d0 <_fflush_r+0x6c>)
 8009780:	429c      	cmp	r4, r3
 8009782:	d11b      	bne.n	80097bc <_fflush_r+0x58>
 8009784:	686c      	ldr	r4, [r5, #4]
 8009786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d0ef      	beq.n	800976e <_fflush_r+0xa>
 800978e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009790:	07d0      	lsls	r0, r2, #31
 8009792:	d404      	bmi.n	800979e <_fflush_r+0x3a>
 8009794:	0599      	lsls	r1, r3, #22
 8009796:	d402      	bmi.n	800979e <_fflush_r+0x3a>
 8009798:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800979a:	f000 f915 	bl	80099c8 <__retarget_lock_acquire_recursive>
 800979e:	4628      	mov	r0, r5
 80097a0:	4621      	mov	r1, r4
 80097a2:	f7ff ff59 	bl	8009658 <__sflush_r>
 80097a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097a8:	07da      	lsls	r2, r3, #31
 80097aa:	4605      	mov	r5, r0
 80097ac:	d4e0      	bmi.n	8009770 <_fflush_r+0xc>
 80097ae:	89a3      	ldrh	r3, [r4, #12]
 80097b0:	059b      	lsls	r3, r3, #22
 80097b2:	d4dd      	bmi.n	8009770 <_fflush_r+0xc>
 80097b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097b6:	f000 f908 	bl	80099ca <__retarget_lock_release_recursive>
 80097ba:	e7d9      	b.n	8009770 <_fflush_r+0xc>
 80097bc:	4b05      	ldr	r3, [pc, #20]	; (80097d4 <_fflush_r+0x70>)
 80097be:	429c      	cmp	r4, r3
 80097c0:	d101      	bne.n	80097c6 <_fflush_r+0x62>
 80097c2:	68ac      	ldr	r4, [r5, #8]
 80097c4:	e7df      	b.n	8009786 <_fflush_r+0x22>
 80097c6:	4b04      	ldr	r3, [pc, #16]	; (80097d8 <_fflush_r+0x74>)
 80097c8:	429c      	cmp	r4, r3
 80097ca:	bf08      	it	eq
 80097cc:	68ec      	ldreq	r4, [r5, #12]
 80097ce:	e7da      	b.n	8009786 <_fflush_r+0x22>
 80097d0:	0800a58c 	.word	0x0800a58c
 80097d4:	0800a5ac 	.word	0x0800a5ac
 80097d8:	0800a56c 	.word	0x0800a56c

080097dc <std>:
 80097dc:	2300      	movs	r3, #0
 80097de:	b510      	push	{r4, lr}
 80097e0:	4604      	mov	r4, r0
 80097e2:	e9c0 3300 	strd	r3, r3, [r0]
 80097e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097ea:	6083      	str	r3, [r0, #8]
 80097ec:	8181      	strh	r1, [r0, #12]
 80097ee:	6643      	str	r3, [r0, #100]	; 0x64
 80097f0:	81c2      	strh	r2, [r0, #14]
 80097f2:	6183      	str	r3, [r0, #24]
 80097f4:	4619      	mov	r1, r3
 80097f6:	2208      	movs	r2, #8
 80097f8:	305c      	adds	r0, #92	; 0x5c
 80097fa:	f7fd fba7 	bl	8006f4c <memset>
 80097fe:	4b05      	ldr	r3, [pc, #20]	; (8009814 <std+0x38>)
 8009800:	6263      	str	r3, [r4, #36]	; 0x24
 8009802:	4b05      	ldr	r3, [pc, #20]	; (8009818 <std+0x3c>)
 8009804:	62a3      	str	r3, [r4, #40]	; 0x28
 8009806:	4b05      	ldr	r3, [pc, #20]	; (800981c <std+0x40>)
 8009808:	62e3      	str	r3, [r4, #44]	; 0x2c
 800980a:	4b05      	ldr	r3, [pc, #20]	; (8009820 <std+0x44>)
 800980c:	6224      	str	r4, [r4, #32]
 800980e:	6323      	str	r3, [r4, #48]	; 0x30
 8009810:	bd10      	pop	{r4, pc}
 8009812:	bf00      	nop
 8009814:	08009b2d 	.word	0x08009b2d
 8009818:	08009b4f 	.word	0x08009b4f
 800981c:	08009b87 	.word	0x08009b87
 8009820:	08009bab 	.word	0x08009bab

08009824 <_cleanup_r>:
 8009824:	4901      	ldr	r1, [pc, #4]	; (800982c <_cleanup_r+0x8>)
 8009826:	f000 b8af 	b.w	8009988 <_fwalk_reent>
 800982a:	bf00      	nop
 800982c:	08009765 	.word	0x08009765

08009830 <__sfmoreglue>:
 8009830:	b570      	push	{r4, r5, r6, lr}
 8009832:	1e4a      	subs	r2, r1, #1
 8009834:	2568      	movs	r5, #104	; 0x68
 8009836:	4355      	muls	r5, r2
 8009838:	460e      	mov	r6, r1
 800983a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800983e:	f7ff fa87 	bl	8008d50 <_malloc_r>
 8009842:	4604      	mov	r4, r0
 8009844:	b140      	cbz	r0, 8009858 <__sfmoreglue+0x28>
 8009846:	2100      	movs	r1, #0
 8009848:	e9c0 1600 	strd	r1, r6, [r0]
 800984c:	300c      	adds	r0, #12
 800984e:	60a0      	str	r0, [r4, #8]
 8009850:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009854:	f7fd fb7a 	bl	8006f4c <memset>
 8009858:	4620      	mov	r0, r4
 800985a:	bd70      	pop	{r4, r5, r6, pc}

0800985c <__sfp_lock_acquire>:
 800985c:	4801      	ldr	r0, [pc, #4]	; (8009864 <__sfp_lock_acquire+0x8>)
 800985e:	f000 b8b3 	b.w	80099c8 <__retarget_lock_acquire_recursive>
 8009862:	bf00      	nop
 8009864:	20000490 	.word	0x20000490

08009868 <__sfp_lock_release>:
 8009868:	4801      	ldr	r0, [pc, #4]	; (8009870 <__sfp_lock_release+0x8>)
 800986a:	f000 b8ae 	b.w	80099ca <__retarget_lock_release_recursive>
 800986e:	bf00      	nop
 8009870:	20000490 	.word	0x20000490

08009874 <__sinit_lock_acquire>:
 8009874:	4801      	ldr	r0, [pc, #4]	; (800987c <__sinit_lock_acquire+0x8>)
 8009876:	f000 b8a7 	b.w	80099c8 <__retarget_lock_acquire_recursive>
 800987a:	bf00      	nop
 800987c:	2000048b 	.word	0x2000048b

08009880 <__sinit_lock_release>:
 8009880:	4801      	ldr	r0, [pc, #4]	; (8009888 <__sinit_lock_release+0x8>)
 8009882:	f000 b8a2 	b.w	80099ca <__retarget_lock_release_recursive>
 8009886:	bf00      	nop
 8009888:	2000048b 	.word	0x2000048b

0800988c <__sinit>:
 800988c:	b510      	push	{r4, lr}
 800988e:	4604      	mov	r4, r0
 8009890:	f7ff fff0 	bl	8009874 <__sinit_lock_acquire>
 8009894:	69a3      	ldr	r3, [r4, #24]
 8009896:	b11b      	cbz	r3, 80098a0 <__sinit+0x14>
 8009898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800989c:	f7ff bff0 	b.w	8009880 <__sinit_lock_release>
 80098a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80098a4:	6523      	str	r3, [r4, #80]	; 0x50
 80098a6:	4b13      	ldr	r3, [pc, #76]	; (80098f4 <__sinit+0x68>)
 80098a8:	4a13      	ldr	r2, [pc, #76]	; (80098f8 <__sinit+0x6c>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80098ae:	42a3      	cmp	r3, r4
 80098b0:	bf04      	itt	eq
 80098b2:	2301      	moveq	r3, #1
 80098b4:	61a3      	streq	r3, [r4, #24]
 80098b6:	4620      	mov	r0, r4
 80098b8:	f000 f820 	bl	80098fc <__sfp>
 80098bc:	6060      	str	r0, [r4, #4]
 80098be:	4620      	mov	r0, r4
 80098c0:	f000 f81c 	bl	80098fc <__sfp>
 80098c4:	60a0      	str	r0, [r4, #8]
 80098c6:	4620      	mov	r0, r4
 80098c8:	f000 f818 	bl	80098fc <__sfp>
 80098cc:	2200      	movs	r2, #0
 80098ce:	60e0      	str	r0, [r4, #12]
 80098d0:	2104      	movs	r1, #4
 80098d2:	6860      	ldr	r0, [r4, #4]
 80098d4:	f7ff ff82 	bl	80097dc <std>
 80098d8:	68a0      	ldr	r0, [r4, #8]
 80098da:	2201      	movs	r2, #1
 80098dc:	2109      	movs	r1, #9
 80098de:	f7ff ff7d 	bl	80097dc <std>
 80098e2:	68e0      	ldr	r0, [r4, #12]
 80098e4:	2202      	movs	r2, #2
 80098e6:	2112      	movs	r1, #18
 80098e8:	f7ff ff78 	bl	80097dc <std>
 80098ec:	2301      	movs	r3, #1
 80098ee:	61a3      	str	r3, [r4, #24]
 80098f0:	e7d2      	b.n	8009898 <__sinit+0xc>
 80098f2:	bf00      	nop
 80098f4:	0800a1e8 	.word	0x0800a1e8
 80098f8:	08009825 	.word	0x08009825

080098fc <__sfp>:
 80098fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098fe:	4607      	mov	r7, r0
 8009900:	f7ff ffac 	bl	800985c <__sfp_lock_acquire>
 8009904:	4b1e      	ldr	r3, [pc, #120]	; (8009980 <__sfp+0x84>)
 8009906:	681e      	ldr	r6, [r3, #0]
 8009908:	69b3      	ldr	r3, [r6, #24]
 800990a:	b913      	cbnz	r3, 8009912 <__sfp+0x16>
 800990c:	4630      	mov	r0, r6
 800990e:	f7ff ffbd 	bl	800988c <__sinit>
 8009912:	3648      	adds	r6, #72	; 0x48
 8009914:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009918:	3b01      	subs	r3, #1
 800991a:	d503      	bpl.n	8009924 <__sfp+0x28>
 800991c:	6833      	ldr	r3, [r6, #0]
 800991e:	b30b      	cbz	r3, 8009964 <__sfp+0x68>
 8009920:	6836      	ldr	r6, [r6, #0]
 8009922:	e7f7      	b.n	8009914 <__sfp+0x18>
 8009924:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009928:	b9d5      	cbnz	r5, 8009960 <__sfp+0x64>
 800992a:	4b16      	ldr	r3, [pc, #88]	; (8009984 <__sfp+0x88>)
 800992c:	60e3      	str	r3, [r4, #12]
 800992e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009932:	6665      	str	r5, [r4, #100]	; 0x64
 8009934:	f000 f847 	bl	80099c6 <__retarget_lock_init_recursive>
 8009938:	f7ff ff96 	bl	8009868 <__sfp_lock_release>
 800993c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009940:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009944:	6025      	str	r5, [r4, #0]
 8009946:	61a5      	str	r5, [r4, #24]
 8009948:	2208      	movs	r2, #8
 800994a:	4629      	mov	r1, r5
 800994c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009950:	f7fd fafc 	bl	8006f4c <memset>
 8009954:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009958:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800995c:	4620      	mov	r0, r4
 800995e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009960:	3468      	adds	r4, #104	; 0x68
 8009962:	e7d9      	b.n	8009918 <__sfp+0x1c>
 8009964:	2104      	movs	r1, #4
 8009966:	4638      	mov	r0, r7
 8009968:	f7ff ff62 	bl	8009830 <__sfmoreglue>
 800996c:	4604      	mov	r4, r0
 800996e:	6030      	str	r0, [r6, #0]
 8009970:	2800      	cmp	r0, #0
 8009972:	d1d5      	bne.n	8009920 <__sfp+0x24>
 8009974:	f7ff ff78 	bl	8009868 <__sfp_lock_release>
 8009978:	230c      	movs	r3, #12
 800997a:	603b      	str	r3, [r7, #0]
 800997c:	e7ee      	b.n	800995c <__sfp+0x60>
 800997e:	bf00      	nop
 8009980:	0800a1e8 	.word	0x0800a1e8
 8009984:	ffff0001 	.word	0xffff0001

08009988 <_fwalk_reent>:
 8009988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800998c:	4606      	mov	r6, r0
 800998e:	4688      	mov	r8, r1
 8009990:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009994:	2700      	movs	r7, #0
 8009996:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800999a:	f1b9 0901 	subs.w	r9, r9, #1
 800999e:	d505      	bpl.n	80099ac <_fwalk_reent+0x24>
 80099a0:	6824      	ldr	r4, [r4, #0]
 80099a2:	2c00      	cmp	r4, #0
 80099a4:	d1f7      	bne.n	8009996 <_fwalk_reent+0xe>
 80099a6:	4638      	mov	r0, r7
 80099a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099ac:	89ab      	ldrh	r3, [r5, #12]
 80099ae:	2b01      	cmp	r3, #1
 80099b0:	d907      	bls.n	80099c2 <_fwalk_reent+0x3a>
 80099b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80099b6:	3301      	adds	r3, #1
 80099b8:	d003      	beq.n	80099c2 <_fwalk_reent+0x3a>
 80099ba:	4629      	mov	r1, r5
 80099bc:	4630      	mov	r0, r6
 80099be:	47c0      	blx	r8
 80099c0:	4307      	orrs	r7, r0
 80099c2:	3568      	adds	r5, #104	; 0x68
 80099c4:	e7e9      	b.n	800999a <_fwalk_reent+0x12>

080099c6 <__retarget_lock_init_recursive>:
 80099c6:	4770      	bx	lr

080099c8 <__retarget_lock_acquire_recursive>:
 80099c8:	4770      	bx	lr

080099ca <__retarget_lock_release_recursive>:
 80099ca:	4770      	bx	lr

080099cc <__swhatbuf_r>:
 80099cc:	b570      	push	{r4, r5, r6, lr}
 80099ce:	460e      	mov	r6, r1
 80099d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099d4:	2900      	cmp	r1, #0
 80099d6:	b096      	sub	sp, #88	; 0x58
 80099d8:	4614      	mov	r4, r2
 80099da:	461d      	mov	r5, r3
 80099dc:	da07      	bge.n	80099ee <__swhatbuf_r+0x22>
 80099de:	2300      	movs	r3, #0
 80099e0:	602b      	str	r3, [r5, #0]
 80099e2:	89b3      	ldrh	r3, [r6, #12]
 80099e4:	061a      	lsls	r2, r3, #24
 80099e6:	d410      	bmi.n	8009a0a <__swhatbuf_r+0x3e>
 80099e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099ec:	e00e      	b.n	8009a0c <__swhatbuf_r+0x40>
 80099ee:	466a      	mov	r2, sp
 80099f0:	f000 f902 	bl	8009bf8 <_fstat_r>
 80099f4:	2800      	cmp	r0, #0
 80099f6:	dbf2      	blt.n	80099de <__swhatbuf_r+0x12>
 80099f8:	9a01      	ldr	r2, [sp, #4]
 80099fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80099fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009a02:	425a      	negs	r2, r3
 8009a04:	415a      	adcs	r2, r3
 8009a06:	602a      	str	r2, [r5, #0]
 8009a08:	e7ee      	b.n	80099e8 <__swhatbuf_r+0x1c>
 8009a0a:	2340      	movs	r3, #64	; 0x40
 8009a0c:	2000      	movs	r0, #0
 8009a0e:	6023      	str	r3, [r4, #0]
 8009a10:	b016      	add	sp, #88	; 0x58
 8009a12:	bd70      	pop	{r4, r5, r6, pc}

08009a14 <__smakebuf_r>:
 8009a14:	898b      	ldrh	r3, [r1, #12]
 8009a16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009a18:	079d      	lsls	r5, r3, #30
 8009a1a:	4606      	mov	r6, r0
 8009a1c:	460c      	mov	r4, r1
 8009a1e:	d507      	bpl.n	8009a30 <__smakebuf_r+0x1c>
 8009a20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009a24:	6023      	str	r3, [r4, #0]
 8009a26:	6123      	str	r3, [r4, #16]
 8009a28:	2301      	movs	r3, #1
 8009a2a:	6163      	str	r3, [r4, #20]
 8009a2c:	b002      	add	sp, #8
 8009a2e:	bd70      	pop	{r4, r5, r6, pc}
 8009a30:	ab01      	add	r3, sp, #4
 8009a32:	466a      	mov	r2, sp
 8009a34:	f7ff ffca 	bl	80099cc <__swhatbuf_r>
 8009a38:	9900      	ldr	r1, [sp, #0]
 8009a3a:	4605      	mov	r5, r0
 8009a3c:	4630      	mov	r0, r6
 8009a3e:	f7ff f987 	bl	8008d50 <_malloc_r>
 8009a42:	b948      	cbnz	r0, 8009a58 <__smakebuf_r+0x44>
 8009a44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a48:	059a      	lsls	r2, r3, #22
 8009a4a:	d4ef      	bmi.n	8009a2c <__smakebuf_r+0x18>
 8009a4c:	f023 0303 	bic.w	r3, r3, #3
 8009a50:	f043 0302 	orr.w	r3, r3, #2
 8009a54:	81a3      	strh	r3, [r4, #12]
 8009a56:	e7e3      	b.n	8009a20 <__smakebuf_r+0xc>
 8009a58:	4b0d      	ldr	r3, [pc, #52]	; (8009a90 <__smakebuf_r+0x7c>)
 8009a5a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009a5c:	89a3      	ldrh	r3, [r4, #12]
 8009a5e:	6020      	str	r0, [r4, #0]
 8009a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a64:	81a3      	strh	r3, [r4, #12]
 8009a66:	9b00      	ldr	r3, [sp, #0]
 8009a68:	6163      	str	r3, [r4, #20]
 8009a6a:	9b01      	ldr	r3, [sp, #4]
 8009a6c:	6120      	str	r0, [r4, #16]
 8009a6e:	b15b      	cbz	r3, 8009a88 <__smakebuf_r+0x74>
 8009a70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a74:	4630      	mov	r0, r6
 8009a76:	f000 f8d1 	bl	8009c1c <_isatty_r>
 8009a7a:	b128      	cbz	r0, 8009a88 <__smakebuf_r+0x74>
 8009a7c:	89a3      	ldrh	r3, [r4, #12]
 8009a7e:	f023 0303 	bic.w	r3, r3, #3
 8009a82:	f043 0301 	orr.w	r3, r3, #1
 8009a86:	81a3      	strh	r3, [r4, #12]
 8009a88:	89a0      	ldrh	r0, [r4, #12]
 8009a8a:	4305      	orrs	r5, r0
 8009a8c:	81a5      	strh	r5, [r4, #12]
 8009a8e:	e7cd      	b.n	8009a2c <__smakebuf_r+0x18>
 8009a90:	08009825 	.word	0x08009825

08009a94 <_malloc_usable_size_r>:
 8009a94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a98:	1f18      	subs	r0, r3, #4
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	bfbc      	itt	lt
 8009a9e:	580b      	ldrlt	r3, [r1, r0]
 8009aa0:	18c0      	addlt	r0, r0, r3
 8009aa2:	4770      	bx	lr

08009aa4 <_raise_r>:
 8009aa4:	291f      	cmp	r1, #31
 8009aa6:	b538      	push	{r3, r4, r5, lr}
 8009aa8:	4604      	mov	r4, r0
 8009aaa:	460d      	mov	r5, r1
 8009aac:	d904      	bls.n	8009ab8 <_raise_r+0x14>
 8009aae:	2316      	movs	r3, #22
 8009ab0:	6003      	str	r3, [r0, #0]
 8009ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ab6:	bd38      	pop	{r3, r4, r5, pc}
 8009ab8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009aba:	b112      	cbz	r2, 8009ac2 <_raise_r+0x1e>
 8009abc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ac0:	b94b      	cbnz	r3, 8009ad6 <_raise_r+0x32>
 8009ac2:	4620      	mov	r0, r4
 8009ac4:	f000 f830 	bl	8009b28 <_getpid_r>
 8009ac8:	462a      	mov	r2, r5
 8009aca:	4601      	mov	r1, r0
 8009acc:	4620      	mov	r0, r4
 8009ace:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ad2:	f000 b817 	b.w	8009b04 <_kill_r>
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d00a      	beq.n	8009af0 <_raise_r+0x4c>
 8009ada:	1c59      	adds	r1, r3, #1
 8009adc:	d103      	bne.n	8009ae6 <_raise_r+0x42>
 8009ade:	2316      	movs	r3, #22
 8009ae0:	6003      	str	r3, [r0, #0]
 8009ae2:	2001      	movs	r0, #1
 8009ae4:	e7e7      	b.n	8009ab6 <_raise_r+0x12>
 8009ae6:	2400      	movs	r4, #0
 8009ae8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009aec:	4628      	mov	r0, r5
 8009aee:	4798      	blx	r3
 8009af0:	2000      	movs	r0, #0
 8009af2:	e7e0      	b.n	8009ab6 <_raise_r+0x12>

08009af4 <raise>:
 8009af4:	4b02      	ldr	r3, [pc, #8]	; (8009b00 <raise+0xc>)
 8009af6:	4601      	mov	r1, r0
 8009af8:	6818      	ldr	r0, [r3, #0]
 8009afa:	f7ff bfd3 	b.w	8009aa4 <_raise_r>
 8009afe:	bf00      	nop
 8009b00:	2000000c 	.word	0x2000000c

08009b04 <_kill_r>:
 8009b04:	b538      	push	{r3, r4, r5, lr}
 8009b06:	4d07      	ldr	r5, [pc, #28]	; (8009b24 <_kill_r+0x20>)
 8009b08:	2300      	movs	r3, #0
 8009b0a:	4604      	mov	r4, r0
 8009b0c:	4608      	mov	r0, r1
 8009b0e:	4611      	mov	r1, r2
 8009b10:	602b      	str	r3, [r5, #0]
 8009b12:	f7f8 feb7 	bl	8002884 <_kill>
 8009b16:	1c43      	adds	r3, r0, #1
 8009b18:	d102      	bne.n	8009b20 <_kill_r+0x1c>
 8009b1a:	682b      	ldr	r3, [r5, #0]
 8009b1c:	b103      	cbz	r3, 8009b20 <_kill_r+0x1c>
 8009b1e:	6023      	str	r3, [r4, #0]
 8009b20:	bd38      	pop	{r3, r4, r5, pc}
 8009b22:	bf00      	nop
 8009b24:	20000484 	.word	0x20000484

08009b28 <_getpid_r>:
 8009b28:	f7f8 bea4 	b.w	8002874 <_getpid>

08009b2c <__sread>:
 8009b2c:	b510      	push	{r4, lr}
 8009b2e:	460c      	mov	r4, r1
 8009b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b34:	f000 f894 	bl	8009c60 <_read_r>
 8009b38:	2800      	cmp	r0, #0
 8009b3a:	bfab      	itete	ge
 8009b3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009b3e:	89a3      	ldrhlt	r3, [r4, #12]
 8009b40:	181b      	addge	r3, r3, r0
 8009b42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009b46:	bfac      	ite	ge
 8009b48:	6563      	strge	r3, [r4, #84]	; 0x54
 8009b4a:	81a3      	strhlt	r3, [r4, #12]
 8009b4c:	bd10      	pop	{r4, pc}

08009b4e <__swrite>:
 8009b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b52:	461f      	mov	r7, r3
 8009b54:	898b      	ldrh	r3, [r1, #12]
 8009b56:	05db      	lsls	r3, r3, #23
 8009b58:	4605      	mov	r5, r0
 8009b5a:	460c      	mov	r4, r1
 8009b5c:	4616      	mov	r6, r2
 8009b5e:	d505      	bpl.n	8009b6c <__swrite+0x1e>
 8009b60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b64:	2302      	movs	r3, #2
 8009b66:	2200      	movs	r2, #0
 8009b68:	f000 f868 	bl	8009c3c <_lseek_r>
 8009b6c:	89a3      	ldrh	r3, [r4, #12]
 8009b6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b76:	81a3      	strh	r3, [r4, #12]
 8009b78:	4632      	mov	r2, r6
 8009b7a:	463b      	mov	r3, r7
 8009b7c:	4628      	mov	r0, r5
 8009b7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b82:	f000 b817 	b.w	8009bb4 <_write_r>

08009b86 <__sseek>:
 8009b86:	b510      	push	{r4, lr}
 8009b88:	460c      	mov	r4, r1
 8009b8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b8e:	f000 f855 	bl	8009c3c <_lseek_r>
 8009b92:	1c43      	adds	r3, r0, #1
 8009b94:	89a3      	ldrh	r3, [r4, #12]
 8009b96:	bf15      	itete	ne
 8009b98:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009ba2:	81a3      	strheq	r3, [r4, #12]
 8009ba4:	bf18      	it	ne
 8009ba6:	81a3      	strhne	r3, [r4, #12]
 8009ba8:	bd10      	pop	{r4, pc}

08009baa <__sclose>:
 8009baa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bae:	f000 b813 	b.w	8009bd8 <_close_r>
	...

08009bb4 <_write_r>:
 8009bb4:	b538      	push	{r3, r4, r5, lr}
 8009bb6:	4d07      	ldr	r5, [pc, #28]	; (8009bd4 <_write_r+0x20>)
 8009bb8:	4604      	mov	r4, r0
 8009bba:	4608      	mov	r0, r1
 8009bbc:	4611      	mov	r1, r2
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	602a      	str	r2, [r5, #0]
 8009bc2:	461a      	mov	r2, r3
 8009bc4:	f7f8 fe95 	bl	80028f2 <_write>
 8009bc8:	1c43      	adds	r3, r0, #1
 8009bca:	d102      	bne.n	8009bd2 <_write_r+0x1e>
 8009bcc:	682b      	ldr	r3, [r5, #0]
 8009bce:	b103      	cbz	r3, 8009bd2 <_write_r+0x1e>
 8009bd0:	6023      	str	r3, [r4, #0]
 8009bd2:	bd38      	pop	{r3, r4, r5, pc}
 8009bd4:	20000484 	.word	0x20000484

08009bd8 <_close_r>:
 8009bd8:	b538      	push	{r3, r4, r5, lr}
 8009bda:	4d06      	ldr	r5, [pc, #24]	; (8009bf4 <_close_r+0x1c>)
 8009bdc:	2300      	movs	r3, #0
 8009bde:	4604      	mov	r4, r0
 8009be0:	4608      	mov	r0, r1
 8009be2:	602b      	str	r3, [r5, #0]
 8009be4:	f7f8 fea1 	bl	800292a <_close>
 8009be8:	1c43      	adds	r3, r0, #1
 8009bea:	d102      	bne.n	8009bf2 <_close_r+0x1a>
 8009bec:	682b      	ldr	r3, [r5, #0]
 8009bee:	b103      	cbz	r3, 8009bf2 <_close_r+0x1a>
 8009bf0:	6023      	str	r3, [r4, #0]
 8009bf2:	bd38      	pop	{r3, r4, r5, pc}
 8009bf4:	20000484 	.word	0x20000484

08009bf8 <_fstat_r>:
 8009bf8:	b538      	push	{r3, r4, r5, lr}
 8009bfa:	4d07      	ldr	r5, [pc, #28]	; (8009c18 <_fstat_r+0x20>)
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	4604      	mov	r4, r0
 8009c00:	4608      	mov	r0, r1
 8009c02:	4611      	mov	r1, r2
 8009c04:	602b      	str	r3, [r5, #0]
 8009c06:	f7f8 fe9c 	bl	8002942 <_fstat>
 8009c0a:	1c43      	adds	r3, r0, #1
 8009c0c:	d102      	bne.n	8009c14 <_fstat_r+0x1c>
 8009c0e:	682b      	ldr	r3, [r5, #0]
 8009c10:	b103      	cbz	r3, 8009c14 <_fstat_r+0x1c>
 8009c12:	6023      	str	r3, [r4, #0]
 8009c14:	bd38      	pop	{r3, r4, r5, pc}
 8009c16:	bf00      	nop
 8009c18:	20000484 	.word	0x20000484

08009c1c <_isatty_r>:
 8009c1c:	b538      	push	{r3, r4, r5, lr}
 8009c1e:	4d06      	ldr	r5, [pc, #24]	; (8009c38 <_isatty_r+0x1c>)
 8009c20:	2300      	movs	r3, #0
 8009c22:	4604      	mov	r4, r0
 8009c24:	4608      	mov	r0, r1
 8009c26:	602b      	str	r3, [r5, #0]
 8009c28:	f7f8 fe9b 	bl	8002962 <_isatty>
 8009c2c:	1c43      	adds	r3, r0, #1
 8009c2e:	d102      	bne.n	8009c36 <_isatty_r+0x1a>
 8009c30:	682b      	ldr	r3, [r5, #0]
 8009c32:	b103      	cbz	r3, 8009c36 <_isatty_r+0x1a>
 8009c34:	6023      	str	r3, [r4, #0]
 8009c36:	bd38      	pop	{r3, r4, r5, pc}
 8009c38:	20000484 	.word	0x20000484

08009c3c <_lseek_r>:
 8009c3c:	b538      	push	{r3, r4, r5, lr}
 8009c3e:	4d07      	ldr	r5, [pc, #28]	; (8009c5c <_lseek_r+0x20>)
 8009c40:	4604      	mov	r4, r0
 8009c42:	4608      	mov	r0, r1
 8009c44:	4611      	mov	r1, r2
 8009c46:	2200      	movs	r2, #0
 8009c48:	602a      	str	r2, [r5, #0]
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	f7f8 fe94 	bl	8002978 <_lseek>
 8009c50:	1c43      	adds	r3, r0, #1
 8009c52:	d102      	bne.n	8009c5a <_lseek_r+0x1e>
 8009c54:	682b      	ldr	r3, [r5, #0]
 8009c56:	b103      	cbz	r3, 8009c5a <_lseek_r+0x1e>
 8009c58:	6023      	str	r3, [r4, #0]
 8009c5a:	bd38      	pop	{r3, r4, r5, pc}
 8009c5c:	20000484 	.word	0x20000484

08009c60 <_read_r>:
 8009c60:	b538      	push	{r3, r4, r5, lr}
 8009c62:	4d07      	ldr	r5, [pc, #28]	; (8009c80 <_read_r+0x20>)
 8009c64:	4604      	mov	r4, r0
 8009c66:	4608      	mov	r0, r1
 8009c68:	4611      	mov	r1, r2
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	602a      	str	r2, [r5, #0]
 8009c6e:	461a      	mov	r2, r3
 8009c70:	f7f8 fe22 	bl	80028b8 <_read>
 8009c74:	1c43      	adds	r3, r0, #1
 8009c76:	d102      	bne.n	8009c7e <_read_r+0x1e>
 8009c78:	682b      	ldr	r3, [r5, #0]
 8009c7a:	b103      	cbz	r3, 8009c7e <_read_r+0x1e>
 8009c7c:	6023      	str	r3, [r4, #0]
 8009c7e:	bd38      	pop	{r3, r4, r5, pc}
 8009c80:	20000484 	.word	0x20000484

08009c84 <atan2>:
 8009c84:	f000 b800 	b.w	8009c88 <__ieee754_atan2>

08009c88 <__ieee754_atan2>:
 8009c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c8c:	ec57 6b11 	vmov	r6, r7, d1
 8009c90:	4273      	negs	r3, r6
 8009c92:	f8df e184 	ldr.w	lr, [pc, #388]	; 8009e18 <__ieee754_atan2+0x190>
 8009c96:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8009c9a:	4333      	orrs	r3, r6
 8009c9c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009ca0:	4573      	cmp	r3, lr
 8009ca2:	ec51 0b10 	vmov	r0, r1, d0
 8009ca6:	ee11 8a10 	vmov	r8, s2
 8009caa:	d80a      	bhi.n	8009cc2 <__ieee754_atan2+0x3a>
 8009cac:	4244      	negs	r4, r0
 8009cae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009cb2:	4304      	orrs	r4, r0
 8009cb4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8009cb8:	4574      	cmp	r4, lr
 8009cba:	ee10 9a10 	vmov	r9, s0
 8009cbe:	468c      	mov	ip, r1
 8009cc0:	d907      	bls.n	8009cd2 <__ieee754_atan2+0x4a>
 8009cc2:	4632      	mov	r2, r6
 8009cc4:	463b      	mov	r3, r7
 8009cc6:	f7f6 fae9 	bl	800029c <__adddf3>
 8009cca:	ec41 0b10 	vmov	d0, r0, r1
 8009cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cd2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8009cd6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009cda:	4334      	orrs	r4, r6
 8009cdc:	d103      	bne.n	8009ce6 <__ieee754_atan2+0x5e>
 8009cde:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ce2:	f000 b89d 	b.w	8009e20 <atan>
 8009ce6:	17bc      	asrs	r4, r7, #30
 8009ce8:	f004 0402 	and.w	r4, r4, #2
 8009cec:	ea53 0909 	orrs.w	r9, r3, r9
 8009cf0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8009cf4:	d107      	bne.n	8009d06 <__ieee754_atan2+0x7e>
 8009cf6:	2c02      	cmp	r4, #2
 8009cf8:	d060      	beq.n	8009dbc <__ieee754_atan2+0x134>
 8009cfa:	2c03      	cmp	r4, #3
 8009cfc:	d1e5      	bne.n	8009cca <__ieee754_atan2+0x42>
 8009cfe:	a142      	add	r1, pc, #264	; (adr r1, 8009e08 <__ieee754_atan2+0x180>)
 8009d00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d04:	e7e1      	b.n	8009cca <__ieee754_atan2+0x42>
 8009d06:	ea52 0808 	orrs.w	r8, r2, r8
 8009d0a:	d106      	bne.n	8009d1a <__ieee754_atan2+0x92>
 8009d0c:	f1bc 0f00 	cmp.w	ip, #0
 8009d10:	da5f      	bge.n	8009dd2 <__ieee754_atan2+0x14a>
 8009d12:	a13f      	add	r1, pc, #252	; (adr r1, 8009e10 <__ieee754_atan2+0x188>)
 8009d14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d18:	e7d7      	b.n	8009cca <__ieee754_atan2+0x42>
 8009d1a:	4572      	cmp	r2, lr
 8009d1c:	d10f      	bne.n	8009d3e <__ieee754_atan2+0xb6>
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	f104 34ff 	add.w	r4, r4, #4294967295
 8009d24:	d107      	bne.n	8009d36 <__ieee754_atan2+0xae>
 8009d26:	2c02      	cmp	r4, #2
 8009d28:	d84c      	bhi.n	8009dc4 <__ieee754_atan2+0x13c>
 8009d2a:	4b35      	ldr	r3, [pc, #212]	; (8009e00 <__ieee754_atan2+0x178>)
 8009d2c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8009d30:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009d34:	e7c9      	b.n	8009cca <__ieee754_atan2+0x42>
 8009d36:	2c02      	cmp	r4, #2
 8009d38:	d848      	bhi.n	8009dcc <__ieee754_atan2+0x144>
 8009d3a:	4b32      	ldr	r3, [pc, #200]	; (8009e04 <__ieee754_atan2+0x17c>)
 8009d3c:	e7f6      	b.n	8009d2c <__ieee754_atan2+0xa4>
 8009d3e:	4573      	cmp	r3, lr
 8009d40:	d0e4      	beq.n	8009d0c <__ieee754_atan2+0x84>
 8009d42:	1a9b      	subs	r3, r3, r2
 8009d44:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009d48:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009d4c:	da1e      	bge.n	8009d8c <__ieee754_atan2+0x104>
 8009d4e:	2f00      	cmp	r7, #0
 8009d50:	da01      	bge.n	8009d56 <__ieee754_atan2+0xce>
 8009d52:	323c      	adds	r2, #60	; 0x3c
 8009d54:	db1e      	blt.n	8009d94 <__ieee754_atan2+0x10c>
 8009d56:	4632      	mov	r2, r6
 8009d58:	463b      	mov	r3, r7
 8009d5a:	f7f6 fd7f 	bl	800085c <__aeabi_ddiv>
 8009d5e:	ec41 0b10 	vmov	d0, r0, r1
 8009d62:	f000 f9fd 	bl	800a160 <fabs>
 8009d66:	f000 f85b 	bl	8009e20 <atan>
 8009d6a:	ec51 0b10 	vmov	r0, r1, d0
 8009d6e:	2c01      	cmp	r4, #1
 8009d70:	d013      	beq.n	8009d9a <__ieee754_atan2+0x112>
 8009d72:	2c02      	cmp	r4, #2
 8009d74:	d015      	beq.n	8009da2 <__ieee754_atan2+0x11a>
 8009d76:	2c00      	cmp	r4, #0
 8009d78:	d0a7      	beq.n	8009cca <__ieee754_atan2+0x42>
 8009d7a:	a319      	add	r3, pc, #100	; (adr r3, 8009de0 <__ieee754_atan2+0x158>)
 8009d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d80:	f7f6 fa8a 	bl	8000298 <__aeabi_dsub>
 8009d84:	a318      	add	r3, pc, #96	; (adr r3, 8009de8 <__ieee754_atan2+0x160>)
 8009d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d8a:	e014      	b.n	8009db6 <__ieee754_atan2+0x12e>
 8009d8c:	a118      	add	r1, pc, #96	; (adr r1, 8009df0 <__ieee754_atan2+0x168>)
 8009d8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d92:	e7ec      	b.n	8009d6e <__ieee754_atan2+0xe6>
 8009d94:	2000      	movs	r0, #0
 8009d96:	2100      	movs	r1, #0
 8009d98:	e7e9      	b.n	8009d6e <__ieee754_atan2+0xe6>
 8009d9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d9e:	4619      	mov	r1, r3
 8009da0:	e793      	b.n	8009cca <__ieee754_atan2+0x42>
 8009da2:	a30f      	add	r3, pc, #60	; (adr r3, 8009de0 <__ieee754_atan2+0x158>)
 8009da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da8:	f7f6 fa76 	bl	8000298 <__aeabi_dsub>
 8009dac:	4602      	mov	r2, r0
 8009dae:	460b      	mov	r3, r1
 8009db0:	a10d      	add	r1, pc, #52	; (adr r1, 8009de8 <__ieee754_atan2+0x160>)
 8009db2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009db6:	f7f6 fa6f 	bl	8000298 <__aeabi_dsub>
 8009dba:	e786      	b.n	8009cca <__ieee754_atan2+0x42>
 8009dbc:	a10a      	add	r1, pc, #40	; (adr r1, 8009de8 <__ieee754_atan2+0x160>)
 8009dbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dc2:	e782      	b.n	8009cca <__ieee754_atan2+0x42>
 8009dc4:	a10c      	add	r1, pc, #48	; (adr r1, 8009df8 <__ieee754_atan2+0x170>)
 8009dc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dca:	e77e      	b.n	8009cca <__ieee754_atan2+0x42>
 8009dcc:	2000      	movs	r0, #0
 8009dce:	2100      	movs	r1, #0
 8009dd0:	e77b      	b.n	8009cca <__ieee754_atan2+0x42>
 8009dd2:	a107      	add	r1, pc, #28	; (adr r1, 8009df0 <__ieee754_atan2+0x168>)
 8009dd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dd8:	e777      	b.n	8009cca <__ieee754_atan2+0x42>
 8009dda:	bf00      	nop
 8009ddc:	f3af 8000 	nop.w
 8009de0:	33145c07 	.word	0x33145c07
 8009de4:	3ca1a626 	.word	0x3ca1a626
 8009de8:	54442d18 	.word	0x54442d18
 8009dec:	400921fb 	.word	0x400921fb
 8009df0:	54442d18 	.word	0x54442d18
 8009df4:	3ff921fb 	.word	0x3ff921fb
 8009df8:	54442d18 	.word	0x54442d18
 8009dfc:	3fe921fb 	.word	0x3fe921fb
 8009e00:	0800a5d0 	.word	0x0800a5d0
 8009e04:	0800a5e8 	.word	0x0800a5e8
 8009e08:	54442d18 	.word	0x54442d18
 8009e0c:	c00921fb 	.word	0xc00921fb
 8009e10:	54442d18 	.word	0x54442d18
 8009e14:	bff921fb 	.word	0xbff921fb
 8009e18:	7ff00000 	.word	0x7ff00000
 8009e1c:	00000000 	.word	0x00000000

08009e20 <atan>:
 8009e20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e24:	ec55 4b10 	vmov	r4, r5, d0
 8009e28:	4bc3      	ldr	r3, [pc, #780]	; (800a138 <atan+0x318>)
 8009e2a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009e2e:	429e      	cmp	r6, r3
 8009e30:	46ab      	mov	fp, r5
 8009e32:	dd18      	ble.n	8009e66 <atan+0x46>
 8009e34:	4bc1      	ldr	r3, [pc, #772]	; (800a13c <atan+0x31c>)
 8009e36:	429e      	cmp	r6, r3
 8009e38:	dc01      	bgt.n	8009e3e <atan+0x1e>
 8009e3a:	d109      	bne.n	8009e50 <atan+0x30>
 8009e3c:	b144      	cbz	r4, 8009e50 <atan+0x30>
 8009e3e:	4622      	mov	r2, r4
 8009e40:	462b      	mov	r3, r5
 8009e42:	4620      	mov	r0, r4
 8009e44:	4629      	mov	r1, r5
 8009e46:	f7f6 fa29 	bl	800029c <__adddf3>
 8009e4a:	4604      	mov	r4, r0
 8009e4c:	460d      	mov	r5, r1
 8009e4e:	e006      	b.n	8009e5e <atan+0x3e>
 8009e50:	f1bb 0f00 	cmp.w	fp, #0
 8009e54:	f300 8131 	bgt.w	800a0ba <atan+0x29a>
 8009e58:	a59b      	add	r5, pc, #620	; (adr r5, 800a0c8 <atan+0x2a8>)
 8009e5a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009e5e:	ec45 4b10 	vmov	d0, r4, r5
 8009e62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e66:	4bb6      	ldr	r3, [pc, #728]	; (800a140 <atan+0x320>)
 8009e68:	429e      	cmp	r6, r3
 8009e6a:	dc14      	bgt.n	8009e96 <atan+0x76>
 8009e6c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009e70:	429e      	cmp	r6, r3
 8009e72:	dc0d      	bgt.n	8009e90 <atan+0x70>
 8009e74:	a396      	add	r3, pc, #600	; (adr r3, 800a0d0 <atan+0x2b0>)
 8009e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e7a:	ee10 0a10 	vmov	r0, s0
 8009e7e:	4629      	mov	r1, r5
 8009e80:	f7f6 fa0c 	bl	800029c <__adddf3>
 8009e84:	4baf      	ldr	r3, [pc, #700]	; (800a144 <atan+0x324>)
 8009e86:	2200      	movs	r2, #0
 8009e88:	f7f6 fe4e 	bl	8000b28 <__aeabi_dcmpgt>
 8009e8c:	2800      	cmp	r0, #0
 8009e8e:	d1e6      	bne.n	8009e5e <atan+0x3e>
 8009e90:	f04f 3aff 	mov.w	sl, #4294967295
 8009e94:	e02b      	b.n	8009eee <atan+0xce>
 8009e96:	f000 f963 	bl	800a160 <fabs>
 8009e9a:	4bab      	ldr	r3, [pc, #684]	; (800a148 <atan+0x328>)
 8009e9c:	429e      	cmp	r6, r3
 8009e9e:	ec55 4b10 	vmov	r4, r5, d0
 8009ea2:	f300 80bf 	bgt.w	800a024 <atan+0x204>
 8009ea6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009eaa:	429e      	cmp	r6, r3
 8009eac:	f300 80a0 	bgt.w	8009ff0 <atan+0x1d0>
 8009eb0:	ee10 2a10 	vmov	r2, s0
 8009eb4:	ee10 0a10 	vmov	r0, s0
 8009eb8:	462b      	mov	r3, r5
 8009eba:	4629      	mov	r1, r5
 8009ebc:	f7f6 f9ee 	bl	800029c <__adddf3>
 8009ec0:	4ba0      	ldr	r3, [pc, #640]	; (800a144 <atan+0x324>)
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f7f6 f9e8 	bl	8000298 <__aeabi_dsub>
 8009ec8:	2200      	movs	r2, #0
 8009eca:	4606      	mov	r6, r0
 8009ecc:	460f      	mov	r7, r1
 8009ece:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009ed2:	4620      	mov	r0, r4
 8009ed4:	4629      	mov	r1, r5
 8009ed6:	f7f6 f9e1 	bl	800029c <__adddf3>
 8009eda:	4602      	mov	r2, r0
 8009edc:	460b      	mov	r3, r1
 8009ede:	4630      	mov	r0, r6
 8009ee0:	4639      	mov	r1, r7
 8009ee2:	f7f6 fcbb 	bl	800085c <__aeabi_ddiv>
 8009ee6:	f04f 0a00 	mov.w	sl, #0
 8009eea:	4604      	mov	r4, r0
 8009eec:	460d      	mov	r5, r1
 8009eee:	4622      	mov	r2, r4
 8009ef0:	462b      	mov	r3, r5
 8009ef2:	4620      	mov	r0, r4
 8009ef4:	4629      	mov	r1, r5
 8009ef6:	f7f6 fb87 	bl	8000608 <__aeabi_dmul>
 8009efa:	4602      	mov	r2, r0
 8009efc:	460b      	mov	r3, r1
 8009efe:	4680      	mov	r8, r0
 8009f00:	4689      	mov	r9, r1
 8009f02:	f7f6 fb81 	bl	8000608 <__aeabi_dmul>
 8009f06:	a374      	add	r3, pc, #464	; (adr r3, 800a0d8 <atan+0x2b8>)
 8009f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0c:	4606      	mov	r6, r0
 8009f0e:	460f      	mov	r7, r1
 8009f10:	f7f6 fb7a 	bl	8000608 <__aeabi_dmul>
 8009f14:	a372      	add	r3, pc, #456	; (adr r3, 800a0e0 <atan+0x2c0>)
 8009f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1a:	f7f6 f9bf 	bl	800029c <__adddf3>
 8009f1e:	4632      	mov	r2, r6
 8009f20:	463b      	mov	r3, r7
 8009f22:	f7f6 fb71 	bl	8000608 <__aeabi_dmul>
 8009f26:	a370      	add	r3, pc, #448	; (adr r3, 800a0e8 <atan+0x2c8>)
 8009f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f2c:	f7f6 f9b6 	bl	800029c <__adddf3>
 8009f30:	4632      	mov	r2, r6
 8009f32:	463b      	mov	r3, r7
 8009f34:	f7f6 fb68 	bl	8000608 <__aeabi_dmul>
 8009f38:	a36d      	add	r3, pc, #436	; (adr r3, 800a0f0 <atan+0x2d0>)
 8009f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f3e:	f7f6 f9ad 	bl	800029c <__adddf3>
 8009f42:	4632      	mov	r2, r6
 8009f44:	463b      	mov	r3, r7
 8009f46:	f7f6 fb5f 	bl	8000608 <__aeabi_dmul>
 8009f4a:	a36b      	add	r3, pc, #428	; (adr r3, 800a0f8 <atan+0x2d8>)
 8009f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f50:	f7f6 f9a4 	bl	800029c <__adddf3>
 8009f54:	4632      	mov	r2, r6
 8009f56:	463b      	mov	r3, r7
 8009f58:	f7f6 fb56 	bl	8000608 <__aeabi_dmul>
 8009f5c:	a368      	add	r3, pc, #416	; (adr r3, 800a100 <atan+0x2e0>)
 8009f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f62:	f7f6 f99b 	bl	800029c <__adddf3>
 8009f66:	4642      	mov	r2, r8
 8009f68:	464b      	mov	r3, r9
 8009f6a:	f7f6 fb4d 	bl	8000608 <__aeabi_dmul>
 8009f6e:	a366      	add	r3, pc, #408	; (adr r3, 800a108 <atan+0x2e8>)
 8009f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f74:	4680      	mov	r8, r0
 8009f76:	4689      	mov	r9, r1
 8009f78:	4630      	mov	r0, r6
 8009f7a:	4639      	mov	r1, r7
 8009f7c:	f7f6 fb44 	bl	8000608 <__aeabi_dmul>
 8009f80:	a363      	add	r3, pc, #396	; (adr r3, 800a110 <atan+0x2f0>)
 8009f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f86:	f7f6 f987 	bl	8000298 <__aeabi_dsub>
 8009f8a:	4632      	mov	r2, r6
 8009f8c:	463b      	mov	r3, r7
 8009f8e:	f7f6 fb3b 	bl	8000608 <__aeabi_dmul>
 8009f92:	a361      	add	r3, pc, #388	; (adr r3, 800a118 <atan+0x2f8>)
 8009f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f98:	f7f6 f97e 	bl	8000298 <__aeabi_dsub>
 8009f9c:	4632      	mov	r2, r6
 8009f9e:	463b      	mov	r3, r7
 8009fa0:	f7f6 fb32 	bl	8000608 <__aeabi_dmul>
 8009fa4:	a35e      	add	r3, pc, #376	; (adr r3, 800a120 <atan+0x300>)
 8009fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009faa:	f7f6 f975 	bl	8000298 <__aeabi_dsub>
 8009fae:	4632      	mov	r2, r6
 8009fb0:	463b      	mov	r3, r7
 8009fb2:	f7f6 fb29 	bl	8000608 <__aeabi_dmul>
 8009fb6:	a35c      	add	r3, pc, #368	; (adr r3, 800a128 <atan+0x308>)
 8009fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fbc:	f7f6 f96c 	bl	8000298 <__aeabi_dsub>
 8009fc0:	4632      	mov	r2, r6
 8009fc2:	463b      	mov	r3, r7
 8009fc4:	f7f6 fb20 	bl	8000608 <__aeabi_dmul>
 8009fc8:	4602      	mov	r2, r0
 8009fca:	460b      	mov	r3, r1
 8009fcc:	4640      	mov	r0, r8
 8009fce:	4649      	mov	r1, r9
 8009fd0:	f7f6 f964 	bl	800029c <__adddf3>
 8009fd4:	4622      	mov	r2, r4
 8009fd6:	462b      	mov	r3, r5
 8009fd8:	f7f6 fb16 	bl	8000608 <__aeabi_dmul>
 8009fdc:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009fe0:	4602      	mov	r2, r0
 8009fe2:	460b      	mov	r3, r1
 8009fe4:	d14b      	bne.n	800a07e <atan+0x25e>
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	4629      	mov	r1, r5
 8009fea:	f7f6 f955 	bl	8000298 <__aeabi_dsub>
 8009fee:	e72c      	b.n	8009e4a <atan+0x2a>
 8009ff0:	ee10 0a10 	vmov	r0, s0
 8009ff4:	4b53      	ldr	r3, [pc, #332]	; (800a144 <atan+0x324>)
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	4629      	mov	r1, r5
 8009ffa:	f7f6 f94d 	bl	8000298 <__aeabi_dsub>
 8009ffe:	4b51      	ldr	r3, [pc, #324]	; (800a144 <atan+0x324>)
 800a000:	4606      	mov	r6, r0
 800a002:	460f      	mov	r7, r1
 800a004:	2200      	movs	r2, #0
 800a006:	4620      	mov	r0, r4
 800a008:	4629      	mov	r1, r5
 800a00a:	f7f6 f947 	bl	800029c <__adddf3>
 800a00e:	4602      	mov	r2, r0
 800a010:	460b      	mov	r3, r1
 800a012:	4630      	mov	r0, r6
 800a014:	4639      	mov	r1, r7
 800a016:	f7f6 fc21 	bl	800085c <__aeabi_ddiv>
 800a01a:	f04f 0a01 	mov.w	sl, #1
 800a01e:	4604      	mov	r4, r0
 800a020:	460d      	mov	r5, r1
 800a022:	e764      	b.n	8009eee <atan+0xce>
 800a024:	4b49      	ldr	r3, [pc, #292]	; (800a14c <atan+0x32c>)
 800a026:	429e      	cmp	r6, r3
 800a028:	da1d      	bge.n	800a066 <atan+0x246>
 800a02a:	ee10 0a10 	vmov	r0, s0
 800a02e:	4b48      	ldr	r3, [pc, #288]	; (800a150 <atan+0x330>)
 800a030:	2200      	movs	r2, #0
 800a032:	4629      	mov	r1, r5
 800a034:	f7f6 f930 	bl	8000298 <__aeabi_dsub>
 800a038:	4b45      	ldr	r3, [pc, #276]	; (800a150 <atan+0x330>)
 800a03a:	4606      	mov	r6, r0
 800a03c:	460f      	mov	r7, r1
 800a03e:	2200      	movs	r2, #0
 800a040:	4620      	mov	r0, r4
 800a042:	4629      	mov	r1, r5
 800a044:	f7f6 fae0 	bl	8000608 <__aeabi_dmul>
 800a048:	4b3e      	ldr	r3, [pc, #248]	; (800a144 <atan+0x324>)
 800a04a:	2200      	movs	r2, #0
 800a04c:	f7f6 f926 	bl	800029c <__adddf3>
 800a050:	4602      	mov	r2, r0
 800a052:	460b      	mov	r3, r1
 800a054:	4630      	mov	r0, r6
 800a056:	4639      	mov	r1, r7
 800a058:	f7f6 fc00 	bl	800085c <__aeabi_ddiv>
 800a05c:	f04f 0a02 	mov.w	sl, #2
 800a060:	4604      	mov	r4, r0
 800a062:	460d      	mov	r5, r1
 800a064:	e743      	b.n	8009eee <atan+0xce>
 800a066:	462b      	mov	r3, r5
 800a068:	ee10 2a10 	vmov	r2, s0
 800a06c:	4939      	ldr	r1, [pc, #228]	; (800a154 <atan+0x334>)
 800a06e:	2000      	movs	r0, #0
 800a070:	f7f6 fbf4 	bl	800085c <__aeabi_ddiv>
 800a074:	f04f 0a03 	mov.w	sl, #3
 800a078:	4604      	mov	r4, r0
 800a07a:	460d      	mov	r5, r1
 800a07c:	e737      	b.n	8009eee <atan+0xce>
 800a07e:	4b36      	ldr	r3, [pc, #216]	; (800a158 <atan+0x338>)
 800a080:	4e36      	ldr	r6, [pc, #216]	; (800a15c <atan+0x33c>)
 800a082:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a086:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800a08a:	e9da 2300 	ldrd	r2, r3, [sl]
 800a08e:	f7f6 f903 	bl	8000298 <__aeabi_dsub>
 800a092:	4622      	mov	r2, r4
 800a094:	462b      	mov	r3, r5
 800a096:	f7f6 f8ff 	bl	8000298 <__aeabi_dsub>
 800a09a:	4602      	mov	r2, r0
 800a09c:	460b      	mov	r3, r1
 800a09e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a0a2:	f7f6 f8f9 	bl	8000298 <__aeabi_dsub>
 800a0a6:	f1bb 0f00 	cmp.w	fp, #0
 800a0aa:	4604      	mov	r4, r0
 800a0ac:	460d      	mov	r5, r1
 800a0ae:	f6bf aed6 	bge.w	8009e5e <atan+0x3e>
 800a0b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a0b6:	461d      	mov	r5, r3
 800a0b8:	e6d1      	b.n	8009e5e <atan+0x3e>
 800a0ba:	a51d      	add	r5, pc, #116	; (adr r5, 800a130 <atan+0x310>)
 800a0bc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a0c0:	e6cd      	b.n	8009e5e <atan+0x3e>
 800a0c2:	bf00      	nop
 800a0c4:	f3af 8000 	nop.w
 800a0c8:	54442d18 	.word	0x54442d18
 800a0cc:	bff921fb 	.word	0xbff921fb
 800a0d0:	8800759c 	.word	0x8800759c
 800a0d4:	7e37e43c 	.word	0x7e37e43c
 800a0d8:	e322da11 	.word	0xe322da11
 800a0dc:	3f90ad3a 	.word	0x3f90ad3a
 800a0e0:	24760deb 	.word	0x24760deb
 800a0e4:	3fa97b4b 	.word	0x3fa97b4b
 800a0e8:	a0d03d51 	.word	0xa0d03d51
 800a0ec:	3fb10d66 	.word	0x3fb10d66
 800a0f0:	c54c206e 	.word	0xc54c206e
 800a0f4:	3fb745cd 	.word	0x3fb745cd
 800a0f8:	920083ff 	.word	0x920083ff
 800a0fc:	3fc24924 	.word	0x3fc24924
 800a100:	5555550d 	.word	0x5555550d
 800a104:	3fd55555 	.word	0x3fd55555
 800a108:	2c6a6c2f 	.word	0x2c6a6c2f
 800a10c:	bfa2b444 	.word	0xbfa2b444
 800a110:	52defd9a 	.word	0x52defd9a
 800a114:	3fadde2d 	.word	0x3fadde2d
 800a118:	af749a6d 	.word	0xaf749a6d
 800a11c:	3fb3b0f2 	.word	0x3fb3b0f2
 800a120:	fe231671 	.word	0xfe231671
 800a124:	3fbc71c6 	.word	0x3fbc71c6
 800a128:	9998ebc4 	.word	0x9998ebc4
 800a12c:	3fc99999 	.word	0x3fc99999
 800a130:	54442d18 	.word	0x54442d18
 800a134:	3ff921fb 	.word	0x3ff921fb
 800a138:	440fffff 	.word	0x440fffff
 800a13c:	7ff00000 	.word	0x7ff00000
 800a140:	3fdbffff 	.word	0x3fdbffff
 800a144:	3ff00000 	.word	0x3ff00000
 800a148:	3ff2ffff 	.word	0x3ff2ffff
 800a14c:	40038000 	.word	0x40038000
 800a150:	3ff80000 	.word	0x3ff80000
 800a154:	bff00000 	.word	0xbff00000
 800a158:	0800a620 	.word	0x0800a620
 800a15c:	0800a600 	.word	0x0800a600

0800a160 <fabs>:
 800a160:	ec51 0b10 	vmov	r0, r1, d0
 800a164:	ee10 2a10 	vmov	r2, s0
 800a168:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a16c:	ec43 2b10 	vmov	d0, r2, r3
 800a170:	4770      	bx	lr
	...

0800a174 <_init>:
 800a174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a176:	bf00      	nop
 800a178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a17a:	bc08      	pop	{r3}
 800a17c:	469e      	mov	lr, r3
 800a17e:	4770      	bx	lr

0800a180 <_fini>:
 800a180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a182:	bf00      	nop
 800a184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a186:	bc08      	pop	{r3}
 800a188:	469e      	mov	lr, r3
 800a18a:	4770      	bx	lr
